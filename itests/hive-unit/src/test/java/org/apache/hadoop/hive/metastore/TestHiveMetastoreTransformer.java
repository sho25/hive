begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
operator|.
name|GetTablesRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ExtendedTableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetTablesExtRequestFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ACCESSTYPE_NONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ACCESSTYPE_READONLY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ACCESSTYPE_READWRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveMetastoreTransformer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHiveMetastoreTransformer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|HiveMetaStoreClient
name|client
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf
decl_stmt|;
name|File
name|ext_wh
init|=
literal|null
decl_stmt|;
name|File
name|wh
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|boolean
name|isThriftClient
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CAPABILITIES_KEY
init|=
literal|"OBJCAPABILITIES"
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|wh
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
literal|"hive"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"warehouse"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"managed"
operator|+
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
name|wh
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|ext_wh
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
literal|"hive"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"warehouse"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"external"
operator|+
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
name|ext_wh
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_METADATA_TRANSFORMER_CLASS
argument_list|,
literal|"org.apache.hadoop.hive.metastore.MetastoreDefaultTransformer"
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|WAREHOUSE_EXTERNAL
argument_list|,
name|ext_wh
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|silentDropDatabase
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|TException
block|{
try|try
block|{
for|for
control|(
name|String
name|tableName
range|:
name|client
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
literal|"*"
argument_list|)
control|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
decl||
name|InvalidOperationException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
block|}
specifier|private
name|void
name|resetHMSClient
parameter_list|()
block|{
name|client
operator|.
name|setProcessorIdentifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setProcessorCapabilities
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setHMSClient
parameter_list|(
name|String
name|id
parameter_list|,
name|String
index|[]
name|caps
parameter_list|)
block|{
name|client
operator|.
name|setProcessorIdentifier
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|client
operator|.
name|setProcessorCapabilities
argument_list|(
name|caps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformerWithOldTables
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"db1"
decl_stmt|;
name|String
name|basetblName
init|=
literal|"oldstyletable"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|buckets
init|=
literal|32
decl_stmt|;
name|String
name|tblName
init|=
name|basetblName
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DBNAME"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"BUCKETS"
argument_list|,
name|buckets
argument_list|)
expr_stmt|;
name|StringBuilder
name|properties
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"EXTERNAL"
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
decl_stmt|;
name|setHMSClient
argument_list|(
literal|"testTranformerWithOldTables"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"HIVEBUCKET2"
block|,
literal|"EXTREAD"
block|,
literal|"EXTWRITE"
block|}
operator|)
argument_list|)
expr_stmt|;
name|Table
name|tbl2
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Created and retrieved tables do not match:"
operator|+
name|tbl2
operator|.
name|getTableName
argument_list|()
operator|+
literal|":"
operator|+
name|tblName
argument_list|,
name|tbl2
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test execution complete:testTransformerWithOldTables"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testTransformerWithOldTables failed with "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * EXTERNAL_TABLE    *   1) Old table with no capabilities    *   2a) New table with capabilities with no client requirements    *   2b) New table with capabilities with no matching client requirements    *   2c) New table with capabilities with partial match requirements    *   2d) New table with capabilities with full match requirements    */
annotation|@
name|Test
specifier|public
name|void
name|testTransformerExternalTable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
specifier|final
name|String
name|dbName
init|=
literal|"db1"
decl_stmt|;
name|String
name|basetblName
init|=
literal|"oldstyleexttable"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|buckets
init|=
literal|32
decl_stmt|;
name|String
name|tblName
init|=
name|basetblName
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DBNAME"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"BUCKETS"
argument_list|,
name|buckets
argument_list|)
expr_stmt|;
name|StringBuilder
name|properties
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"EXTERNAL"
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
decl_stmt|;
comment|// retrieve the table
name|Table
name|tbl2
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table="
operator|+
name|tblName
operator|+
literal|",Access="
operator|+
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Created and retrieved tables do not match:"
operator|+
name|tbl2
operator|.
name|getTableName
argument_list|()
operator|+
literal|":"
operator|+
name|tblName
argument_list|,
name|tbl2
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TableType mismatch"
argument_list|,
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|name
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buckets
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
comment|// no transformation
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// old client, AccessType not set
name|assertNull
argument_list|(
name|tbl2
operator|.
name|getRequiredReadCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testTransformerExternalTable"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"HIVEBUCKET2"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected buckets does not match:"
argument_list|,
name|buckets
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
comment|// no transformation
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|8
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// RW with HIVEBUCKET2 but no EXTWRITE
name|resetHMSClient
argument_list|()
expr_stmt|;
name|tblName
operator|=
literal|"test_ext_bucketed_wc"
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"EXTERNAL"
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEBUCKET2,EXTREAD,EXTWRITE"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buckets
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
comment|// no tranformation
name|setHMSClient
argument_list|(
literal|"testTranformerExternalTable"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"HIVEBUCKET2"
block|,
literal|"EXTREAD"
block|,
literal|"EXTWRITE"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buckets
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
comment|// client has the HIVEBUCKET2 capability, retain bucketing info
name|assertNull
argument_list|(
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tbl2
operator|.
name|getRequiredReadCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testTransformerExternalTableRO"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"EXTREAD"
block|,
literal|"EXTWRITE"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
comment|// client has no HIVEBUCKET2 capability, remove bucketing info
name|assertNotNull
argument_list|(
literal|"Required write capabilities is null"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Returned required capabilities list does not contain HIVEBUCKET2"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
operator|.
name|contains
argument_list|(
literal|"HIVEBUCKET2"
argument_list|)
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|tblName
operator|=
literal|"test_ext_unbucketed_wc"
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"EXTREAD,EXTWRITE"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|remove
argument_list|(
literal|"BUCKETS"
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestTransformerExternalUnbucketed"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"EXTREAD"
block|,
literal|"EXTWRITE"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Required read capabilities are not null"
argument_list|,
name|tbl2
operator|.
name|getRequiredReadCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Required write capabilities are not null"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|tblName
operator|=
literal|"test_ext_sparkbucketed_wc"
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"EXTERNAL"
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"SPARKDECIMAL,SPARKBUCKET,EXTREAD,EXTWRITE"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"BUCKETS"
argument_list|,
name|buckets
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testTransformerExternalTableSpark"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"HIVEFULLACIDREAD"
block|,
literal|"CONNECTORREAD"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// requires EXTREAD for RO
name|assertEquals
argument_list|(
name|buckets
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Required read capabilities is null"
argument_list|,
name|tbl2
operator|.
name|getRequiredReadCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Required write capabilities is null"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Required read capabilities does not contain EXTREAD"
argument_list|,
name|tbl2
operator|.
name|getRequiredReadCapabilities
argument_list|()
operator|.
name|contains
argument_list|(
literal|"EXTREAD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Required write capabilities does not contain EXTWRITE"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
operator|.
name|contains
argument_list|(
literal|"EXTWRITE"
argument_list|)
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testTransformerExternalTableSpark"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"EXTREAD"
block|,
literal|"CONNECTORREAD"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// requires EXTREAD for RO
name|assertEquals
argument_list|(
name|buckets
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Required write capabilities is null"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Required write capabilities does not contain EXTWRITE"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
operator|.
name|contains
argument_list|(
literal|"EXTWRITE"
argument_list|)
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testTransformerExternalTableSpark"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"SPARKBUCKET"
block|,
literal|"SPARKDECIMAL"
block|,
literal|"EXTREAD"
block|,
literal|"EXTWRITE"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buckets
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
comment|// client has SPARKBUCKET capability
name|resetHMSClient
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test execution complete:testTransformerExternalTable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testTransformerExternalTable failed with "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformerManagedTable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"db1"
decl_stmt|;
name|String
name|basetblName
init|=
literal|"oldstylemgdtable"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|basetblName
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DBNAME"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|)
expr_stmt|;
comment|// create unbucketed managed table with no capabilities
name|Table
name|tbl
init|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
decl_stmt|;
comment|// retrieve the table
name|Table
name|tbl2
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table="
operator|+
name|tblName
operator|+
literal|",Access="
operator|+
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Created and retrieved tables do not match:"
operator|+
name|tbl2
operator|.
name|getTableName
argument_list|()
operator|+
literal|":"
operator|+
name|tblName
argument_list|,
name|tbl2
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TableType mismatch"
argument_list|,
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|name
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
comment|// transformed
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// no translation to be done, so accessType not set
name|assertNull
argument_list|(
literal|"Required read capabilities not null"
argument_list|,
name|tbl2
operator|.
name|getRequiredReadCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Required write capabilities not null"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
comment|// managed table with no capabilities
name|tblName
operator|=
literal|"test_mgd_insert_woc"
expr_stmt|;
name|StringBuilder
name|properties
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"transactional=true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"transactional_properties=insert_only"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"createTable"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEMANAGEDINSERTWRITE"
block|,
literal|"HIVEFULLACIDWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// no transformation
name|setHMSClient
argument_list|(
literal|"testMGDwithConnectorRead"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"CONNECTORREAD"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Required write capabilities are null"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Required write capabilities does not contain CONNECTORWRITE"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
operator|.
name|contains
argument_list|(
literal|"CONNECTORWRITE"
argument_list|)
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwithInsertRead"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEMANAGEDINSERTREAD"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Required write capabilities are null"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Required write capabilities does not contain CONNECTORWRITE"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
operator|.
name|contains
argument_list|(
literal|"CONNECTORWRITE"
argument_list|)
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwithInsertWrite"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEMANAGEDINSERTWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Required read capabilities are not null"
argument_list|,
name|tbl2
operator|.
name|getRequiredReadCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Required write capabilities are not null"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwithConnectorWrite"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"CONNECTORWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Required read capabilities are not null"
argument_list|,
name|tbl2
operator|.
name|getRequiredReadCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
comment|// bucketed table with no capabilities
name|tblName
operator|=
literal|"test_mgd_insert_wc"
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"transactional=true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEMANAGEDINSERTREAD,HIVEMANAGEDINSERTWRITE,HIVECACHEINVALIDATE,"
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEMANAGEDSTATS,CONNECTORREAD,CONNECTORWRITE"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"transactional_properties=insert_only"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"createTable"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEMANAGEDINSERTWRITE"
block|,
literal|"HIVEFULLACIDWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwithAllWrites"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEMANAGEDINSERTWRITE"
block|,
literal|"HIVECACHEINVALIDATE"
block|,
literal|"HIVEMANAGEDSTATS"
block|,
literal|"CONNECTORWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Required read capabilities are not null"
argument_list|,
name|tbl2
operator|.
name|getRequiredReadCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Required write capabilities are not null"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwith1MissingWrite"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEMANAGEDINSERTREAD"
block|,
literal|"HIVEMANAGEDINSERTWRITE"
block|,
literal|"HIVECACHEINVALIDATE"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Required read capabilities are not null"
argument_list|,
name|tbl2
operator|.
name|getRequiredReadCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Required write capabilities are null"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Required write capabilities contains HIVEMANAGEDSTATS"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
operator|.
name|contains
argument_list|(
literal|"HIVEMANAGEDSTATS"
argument_list|)
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwith1Write"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"CONNECTORWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwithConnectorRead"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"CONNECTORREAD"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
comment|// managed tables with no capabilities
name|tblName
operator|=
literal|"test_mgd_full_woc"
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"transactional=true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"createTable"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEMANAGEDINSERTWRITE"
block|,
literal|"HIVEFULLACIDWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// translation skipped due to no capabilities
name|setHMSClient
argument_list|(
literal|"testMGDwithRAWMETADATA"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"MANAGERAWMETADATA"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwithConnectorRead"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"CONNECTORREAD"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwithFullACIDRead"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEFULLACIDREAD"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwith1Write"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEFULLACIDWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwithConnectorWrite"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"CONNECTORWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
comment|// bucketed table with no capabilities
name|tblName
operator|=
literal|"test_mgd_full_wc"
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"transactional=true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEFULLACIDREAD,HIVEFULLACIDWRITE,HIVECACHEINVALIDATE,"
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEMANAGEDSTATS,CONNECTORREAD,CONNECTORWRITE"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"createTable"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEMANAGEDINSERTWRITE"
block|,
literal|"HIVEFULLACIDWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwithRAWMETADATA"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"MANAGERAWMETADATA"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDFULLwithAllWrites"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEFULLACIDWRITE"
block|,
literal|"HIVECACHEINVALIDATE"
block|,
literal|"HIVEMANAGEDSTATS"
block|,
literal|"CONNECTORWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDFULLwith1MissingWrite"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVECACHEINVALIDATE"
block|,
literal|"HIVEMANAGEDSTATS"
block|,
literal|"CONNECTORWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDFULLwith1Write"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"CONNECTORWRITE"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwith1MissingWrite"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEFULLACIDREAD"
block|,
literal|"HIVEFULLACIDWRITE"
block|,
literal|"HIVECACHEINVALIDATE"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testMGDwithConnectorRead"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"CONNECTORREAD"
block|}
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testTranformerExternalTable"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"HIVEBUCKET2"
block|,
literal|"EXTREAD"
block|,
literal|"EXTWRITE"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test execution complete:testTransformerManagedTable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"testTransformerManagedTable failed with "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformerVirtualView
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
specifier|final
name|String
name|dbName
init|=
literal|"db1"
decl_stmt|;
name|String
name|basetblName
init|=
literal|"oldstyleview"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|basetblName
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DBNAME"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|VIRTUAL_VIEW
argument_list|)
expr_stmt|;
name|StringBuilder
name|properties
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
decl_stmt|;
comment|// retrieve the table
name|Table
name|tbl2
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"View="
operator|+
name|tblName
operator|+
literal|",Access="
operator|+
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Created and retrieved views do not match:"
operator|+
name|tbl2
operator|.
name|getTableName
argument_list|()
operator|+
literal|":"
operator|+
name|tblName
argument_list|,
name|tbl2
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TableType mismatch"
argument_list|,
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|name
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// old client, AccessType not set
comment|// table has capabilities
name|tblName
operator|=
literal|"test_view_wc"
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVESQL"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// old client, no transformation
name|setHMSClient
argument_list|(
literal|"testTransformerVirtualView"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"HIVESQL"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// RO accessonly for all views
name|setHMSClient
argument_list|(
literal|"testTransformerVirtualView"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"EXTWRITE"
block|,
literal|"HIVEFULLACIDWRITE"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// missing HIVESQL
name|resetHMSClient
argument_list|()
expr_stmt|;
comment|// table does not capabilities but client is newer
name|tblName
operator|=
literal|"test_view_woc"
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testTransformerVirtualView"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"HIVESQL"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// RO accessonly for all views
name|setHMSClient
argument_list|(
literal|"testTransformerVirtualView"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"EXTWRITE"
block|,
literal|"HIVEFULLACIDWRITE"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// missing HIVESQL
name|LOG
operator|.
name|info
argument_list|(
literal|"Test execution complete:testTransformerVirtualView"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testTransformerVirtualView failed with "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformerMaterializedView
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"db1"
decl_stmt|;
name|String
name|basetblName
init|=
literal|"oldstylemqtview"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|basetblName
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DBNAME"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|MATERIALIZED_VIEW
argument_list|)
expr_stmt|;
name|StringBuilder
name|properties
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
decl_stmt|;
comment|// retrieve the table
name|Table
name|tbl2
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"View="
operator|+
name|tblName
operator|+
literal|",Access="
operator|+
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Created and retrieved views do not match:"
operator|+
name|tbl2
operator|.
name|getTableName
argument_list|()
operator|+
literal|":"
operator|+
name|tblName
argument_list|,
name|tbl2
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TableType mismatch"
argument_list|,
name|TableType
operator|.
name|MATERIALIZED_VIEW
operator|.
name|name
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// old client, AccessType not set
comment|// table has capabilities
name|tblName
operator|=
literal|"test_mqtview_wc"
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEFULLACIDREAD,HIVEONLYMQTWRITE,HIVEMANAGESTATS,HIVEMQT,CONNECTORREAD"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match expected value:"
operator|+
name|tblName
argument_list|,
literal|0
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// View has capabilities, processor doesnt, no tranformation
name|setHMSClient
argument_list|(
literal|"testTransformerMQTFullSet"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"HIVEFULLACIDREAD"
block|,
literal|"HIVEONLYMQTWRITE"
block|,
literal|"HIVEMANAGESTATS"
block|,
literal|"HIVEMQT"
block|,
literal|"CONNECTORREAD"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// RO accessonly for all views
name|setHMSClient
argument_list|(
literal|"testTransformerMQTFullRead"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"HIVEFULLACIDREAD"
block|,
literal|"HIVEMQT"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testTransformerMQTConnRead"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"CONNECTORREAD"
block|,
literal|"HIVEMQT"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// RO accessonly for all views
name|setHMSClient
argument_list|(
literal|"testTransformerMQTDummySet"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"EXTWRITE"
block|,
literal|"HIVEFULLACIDWRITE"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// missing HIVEMQT + *READ
name|resetHMSClient
argument_list|()
expr_stmt|;
comment|// table does not capabilities but client is newer
name|tblName
operator|=
literal|"test_mqtview_woc"
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"testTransformerVirtualView"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"HIVEFULLACIDREAD"
block|,
literal|"HIVEMQT"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// RO accessonly for all views
name|setHMSClient
argument_list|(
literal|"testTransformerMQTConnRead"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"CONNECTORREAD"
block|,
literal|"HIVEMQT"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_READONLY
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// RO accessonly for all views
name|setHMSClient
argument_list|(
literal|"testTransformerVirtualView"
argument_list|,
operator|(
operator|new
name|String
index|[]
block|{
literal|"EXTWRITE, HIVEFULLACIDWRITE"
block|}
operator|)
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table access type does not match the expected value:"
operator|+
name|tblName
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
comment|// missing HIVEMQT + *READ
name|LOG
operator|.
name|info
argument_list|(
literal|"Test execution complete:testTransformerMaterializedView"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testTransformerMaterializedVirtualView failed with "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTablesExt
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"dbext"
decl_stmt|;
name|String
name|tblName
init|=
literal|"test_get_tables_ext"
decl_stmt|;
name|int
name|count
init|=
literal|10
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DBNAME"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|StringBuilder
name|table_params
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|capabilities
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|TableType
name|type
init|=
name|TableType
operator|.
name|EXTERNAL_TABLE
decl_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEFULLACIDWRITE"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEFULLACIDREAD"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVECACHEINVALIDATE"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"CONNECTORREAD"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"CONNECTORWRITE"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"CAPABILITIES"
argument_list|,
name|capabilities
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TABLECOUNT"
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"test_get_tables_ext"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|createTables
argument_list|(
name|tProps
argument_list|)
decl_stmt|;
name|int
name|requestedFields
init|=
operator|(
operator|new
name|GetTablesRequestBuilder
argument_list|()
operator|.
name|with
argument_list|(
name|GetTablesExtRequestFields
operator|.
name|PROCESSOR_CAPABILITIES
argument_list|)
operator|)
operator|.
name|bitValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExtendedTableInfo
argument_list|>
name|extTables
init|=
name|client
operator|.
name|getTablesExt
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
literal|"*"
argument_list|,
name|requestedFields
argument_list|,
literal|2000
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Return list size="
operator|+
name|extTables
operator|.
name|size
argument_list|()
operator|+
literal|",bitValue="
operator|+
name|requestedFields
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Return list size does not match expected size:extTables"
argument_list|,
name|count
argument_list|,
name|extTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExtendedTableInfo
name|tableInfo
range|:
name|extTables
control|)
block|{
name|assertNull
argument_list|(
literal|"Return object should not have read capabilities"
argument_list|,
name|tableInfo
operator|.
name|getRequiredReadCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Return object should not have write capabilities"
argument_list|,
name|tableInfo
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AccessType not expected to be set"
argument_list|,
literal|0
argument_list|,
name|tableInfo
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|requestedFields
operator|=
operator|(
operator|new
name|GetTablesRequestBuilder
argument_list|()
operator|.
name|with
argument_list|(
name|GetTablesExtRequestFields
operator|.
name|ACCESS_TYPE
argument_list|)
operator|)
operator|.
name|bitValue
argument_list|()
expr_stmt|;
name|extTables
operator|=
name|client
operator|.
name|getTablesExt
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
literal|"*"
argument_list|,
name|requestedFields
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Return list size="
operator|+
name|extTables
operator|.
name|size
argument_list|()
operator|+
literal|",bitValue="
operator|+
name|requestedFields
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Return list size does not match expected size"
argument_list|,
name|count
argument_list|,
name|extTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExtendedTableInfo
name|tableInfo
range|:
name|extTables
control|)
block|{
name|assertNull
argument_list|(
literal|"Return object should not have read capabilities"
argument_list|,
name|tableInfo
operator|.
name|getRequiredReadCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Return object should not have write capabilities"
argument_list|,
name|tableInfo
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"AccessType expected to be set"
argument_list|,
name|tableInfo
operator|.
name|getAccessType
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|requestedFields
operator|=
operator|(
operator|new
name|GetTablesRequestBuilder
argument_list|()
operator|.
name|with
argument_list|(
name|GetTablesExtRequestFields
operator|.
name|ALL
argument_list|)
operator|)
operator|.
name|bitValue
argument_list|()
expr_stmt|;
name|extTables
operator|=
name|client
operator|.
name|getTablesExt
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
literal|"*"
argument_list|,
name|requestedFields
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Return list size="
operator|+
name|extTables
operator|.
name|size
argument_list|()
operator|+
literal|",bitValue="
operator|+
name|requestedFields
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Return list size does not match expected size"
argument_list|,
name|count
argument_list|,
name|extTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExtendedTableInfo
name|tableInfo
range|:
name|extTables
control|)
block|{
name|assertTrue
argument_list|(
literal|"AccessType expected to be set"
argument_list|,
name|tableInfo
operator|.
name|getAccessType
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|extTables
operator|=
name|client
operator|.
name|getTablesExt
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
literal|"*"
argument_list|,
name|requestedFields
argument_list|,
operator|(
name|count
operator|-
literal|3
operator|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Return list size="
operator|+
name|extTables
operator|.
name|size
argument_list|()
operator|+
literal|",bitValue="
operator|+
name|requestedFields
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Return list size does not match expected size"
argument_list|,
operator|(
name|count
operator|-
literal|3
operator|)
argument_list|,
name|extTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExtendedTableInfo
name|tableInfo
range|:
name|extTables
control|)
block|{
name|assertTrue
argument_list|(
literal|"AccessType expected to be set"
argument_list|,
name|tableInfo
operator|.
name|getAccessType
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|extTables
operator|=
name|client
operator|.
name|getTablesExt
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
literal|"*"
argument_list|,
name|requestedFields
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Return list size="
operator|+
name|extTables
operator|.
name|size
argument_list|()
operator|+
literal|",bitValue="
operator|+
name|requestedFields
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Return list size does not match expected size"
argument_list|,
name|count
argument_list|,
name|extTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|=
literal|300
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
literal|"test_limit"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TABLECOUNT"
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|tables
operator|=
name|createTables
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of tables created"
argument_list|,
name|count
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|extTables
operator|=
name|client
operator|.
name|getTablesExt
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
literal|"test_limit*"
argument_list|,
name|requestedFields
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of tables returned"
argument_list|,
name|count
argument_list|,
name|extTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|extTables
operator|=
name|client
operator|.
name|getTablesExt
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
literal|"test_limit*"
argument_list|,
name|requestedFields
argument_list|,
operator|(
name|count
operator|/
literal|2
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of tables returned"
argument_list|,
operator|(
name|count
operator|/
literal|2
operator|)
argument_list|,
name|extTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|extTables
operator|=
name|client
operator|.
name|getTablesExt
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
literal|"test_limit*"
argument_list|,
name|requestedFields
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of tables returned"
argument_list|,
literal|1
argument_list|,
name|extTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test execution complete:testTablesExt"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testGetTablesExt() failed."
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testGetTablesExt failed with "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPartitionsByNames
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"db1"
decl_stmt|;
name|String
name|tblName
init|=
literal|"test_get_parts_by_names"
decl_stmt|;
name|int
name|count
init|=
literal|1
decl_stmt|;
name|int
name|pCount
init|=
literal|10
decl_stmt|;
name|int
name|bucketCount
init|=
literal|100
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DBNAME"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|capabilities
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|TableType
name|type
init|=
name|TableType
operator|.
name|MANAGED_TABLE
decl_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEFULLACIDWRITE"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEFULLACIDREAD"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVECACHEINVALIDATE"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"CONNECTORREAD"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"CONNECTORWRITE"
argument_list|)
expr_stmt|;
comment|// tProps.put("CAPABILITIES", capabilities);
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PARTITIONS"
argument_list|,
name|pCount
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestGetPartitionByNames#1"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|pCount
condition|;
name|i
operator|++
control|)
block|{
name|partValues
operator|.
name|add
argument_list|(
literal|"partcol="
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partValues
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return list size does not match expected size"
argument_list|,
name|pCount
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tblName
operator|=
literal|"test_gp_ext_bucketed_wc"
expr_stmt|;
name|StringBuilder
name|properties
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"EXTERNAL"
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEBUCKET2,EXTREAD,EXTWRITE"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"BUCKETS"
argument_list|,
name|bucketCount
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|parts
operator|=
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partValues
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Return list size="
operator|+
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|assertEquals
argument_list|(
literal|"Partition bucket count does not match"
argument_list|,
operator|-
literal|1
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// processor has capabilities
name|capabilities
operator|.
name|clear
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEBUCKET2"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestGetPartitionByNames#2"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|parts
operator|=
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partValues
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|assertEquals
argument_list|(
literal|"Partition bucket count does not match"
argument_list|,
operator|-
literal|1
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tblName
operator|=
literal|"test_parts_mgd_insert_wc"
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"transactional=true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEMANAGEDINSERTREAD,HIVEMANAGEDINSERTWRITE,HIVECACHEINVALIDATE,"
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEMANAGEDSTATS,CONNECTORREAD,CONNECTORWRITE"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"transactional_properties=insert_only"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"createTable"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HIVEMANAGEDINSERTWRITE,HIVEFULLACIDWRITE"
block|}
argument_list|)
expr_stmt|;
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|clear
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"CONNECTORREAD"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestGetPartitionByNames#3"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|parts
operator|=
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partValues
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Partition count does not match"
argument_list|,
name|pCount
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test execution complete:testGetPartitionsByNames"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testGetPartitionsByNames() failed."
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testGetPartitions failed:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"dbcreate"
decl_stmt|;
name|String
name|tblName
init|=
literal|"test_create_table_ext"
decl_stmt|;
name|TableType
name|type
init|=
name|TableType
operator|.
name|EXTERNAL_TABLE
decl_stmt|;
name|StringBuilder
name|table_params
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"key1=val1"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"EXTERNAL=TRUE"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DBNAME"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|table_params
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
decl_stmt|;
comment|// retrieve the table
name|Table
name|tbl2
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Table type expected to be EXTERNAL"
argument_list|,
literal|"EXTERNAL_TABLE"
argument_list|,
name|tbl2
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
name|tblName
operator|=
literal|"test_create_table_mgd_wc"
expr_stmt|;
name|type
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|)
expr_stmt|;
name|table_params
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"key1=val1"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"transactional_properties=default"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|table_params
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|capabilities
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEFULLACIDWRITE"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestCreateTableMGD#1"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
comment|// retrieve the table
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table type expected to be converted to EXTERNAL"
argument_list|,
literal|"EXTERNAL_TABLE"
argument_list|,
name|tbl2
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"external.table.purge is expected to be non-null"
argument_list|,
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"external.table.purge"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"external.table.purge is expected to be true"
argument_list|,
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"external.table.purge"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRUE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table params expected to contain original properties"
argument_list|,
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"val1"
argument_list|)
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|capabilities
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEMANAGEDINSERTWRITE"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestCreateTableMGD#2"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
comment|// retrieve the table
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table type expected to be converted to EXTERNAL"
argument_list|,
literal|"EXTERNAL_TABLE"
argument_list|,
name|tbl2
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"external.table.purge is expected to be non-null"
argument_list|,
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"external.table.purge"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"external.table.purge is expected to be true"
argument_list|,
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"external.table.purge"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRUE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table params expected to contain original properties"
argument_list|,
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"val1"
argument_list|)
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
comment|// Test for FULL ACID tables
name|tblName
operator|=
literal|"test_create_table_acid_mgd_woc"
expr_stmt|;
name|type
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|table_params
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"key1=val1"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"transactional=true"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|table_params
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CreateTable expected to fail, but passed for "
operator|+
name|tblName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create table expected to fail as ACID table cannot be created without possessing capabilities"
argument_list|)
expr_stmt|;
block|}
name|capabilities
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"CONNECTORWRITE"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestCreateTableACID#1"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Create table expected to fail but has succeeded."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CreateTable expected to fail and has failed for "
operator|+
name|tblName
argument_list|)
expr_stmt|;
block|}
name|resetHMSClient
argument_list|()
expr_stmt|;
name|capabilities
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEFULLACIDWRITE"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestCreateTableACID#2"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Create table expected to succeed and has succeeded."
argument_list|)
expr_stmt|;
comment|// retrieve the table
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TableType expected to be MANAGED_TABLE"
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|name
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table params expected to contain ACID properties"
argument_list|,
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"transactional"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table params not expected to contain INSERT ACID properties"
argument_list|,
operator|(
operator|(
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"transactional_properties"
argument_list|)
operator|==
literal|null
operator|)
operator|||
operator|!
operator|(
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"transactional_properties"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"insert_only"
argument_list|)
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|me
parameter_list|)
block|{
name|fail
argument_list|(
literal|"CreateTable expected to succeed, but failed for "
operator|+
name|tblName
argument_list|)
expr_stmt|;
block|}
name|resetHMSClient
argument_list|()
expr_stmt|;
name|tblName
operator|=
literal|"test_create_table_acid_mgd_wc"
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|table_params
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"key1=val1"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"transactional=true"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEFULLACIDREAD,HIVEFULLACIDWRITE,HIVECACHEINVALIDATE,"
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEMANAGEDSTATS,CONNECTORREAD,CONNECTORWRITE"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|table_params
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CreateTable expected to fail, but passed for "
operator|+
name|tblName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create table expected to fail as ACID table cannot be created without possessing capabilities"
argument_list|)
expr_stmt|;
block|}
name|tblName
operator|=
literal|"test_create_table_acid_mgd_wcw"
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|capabilities
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"CONNECTORWRITE"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestCreateTableACID#3"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Create table expected to fail but has succeeded."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CreateTable expected to fail and has failed for "
operator|+
name|tblName
argument_list|)
expr_stmt|;
block|}
name|resetHMSClient
argument_list|()
expr_stmt|;
name|tblName
operator|=
literal|"test_create_table_acid_mgd_whfaw"
expr_stmt|;
name|table_params
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"key1=val1"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"transactional=true"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEFULLACIDREAD,HIVEFULLACIDWRITE,HIVECACHEINVALIDATE,"
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVEMANAGEDSTATS,CONNECTORREAD,CONNECTORWRITE"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|capabilities
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEFULLACIDWRITE"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestCreateTableACID#4"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Create table expected to succeed and has succeeded."
argument_list|)
expr_stmt|;
comment|// retrieve the table
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TableType expected to be MANAGED_TABLE"
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|name
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table params expected to contain ACID properties"
argument_list|,
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"transactional"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table params not expected to contain INSERT ACID properties"
argument_list|,
operator|(
operator|(
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"transactional_properties"
argument_list|)
operator|==
literal|null
operator|)
operator|||
operator|!
operator|(
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"transactional_properties"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"insert_only"
argument_list|)
operator|)
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected access of type READONLY"
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl2
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Expected null required write capabilities"
argument_list|,
name|tbl2
operator|.
name|getRequiredWriteCapabilities
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|me
parameter_list|)
block|{
name|fail
argument_list|(
literal|"CreateTable expected to succeed, but failed for "
operator|+
name|tblName
argument_list|)
expr_stmt|;
block|}
name|resetHMSClient
argument_list|()
expr_stmt|;
name|tblName
operator|=
literal|"test_create_table_insert_mgd_woc"
expr_stmt|;
name|type
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|table_params
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"key1=val1"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"transactional=true"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
literal|"transactional_properties=insert_only"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|table_params
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CreateTable expected to fail, but passed for "
operator|+
name|tblName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create table expected to fail as ACID table cannot be created without possessing capabilities"
argument_list|)
expr_stmt|;
block|}
name|capabilities
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"CONNECTORWRITE"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestCreateTableMGD#1"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Create table expected to fail but has succeeded."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CreateTable expected to fail and has failed for "
operator|+
name|tblName
argument_list|)
expr_stmt|;
block|}
name|resetHMSClient
argument_list|()
expr_stmt|;
name|capabilities
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEMANAGEDINSERTWRITE"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestCreateTableMGD#2"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Create table expected to succeed and has succeeded."
argument_list|)
expr_stmt|;
comment|// retrieve the table
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TableType expected to be MANAGED_TABLE"
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|name
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table params expected to contain ACID properties"
argument_list|,
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"transactional"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table params expected to contain ACID properties"
argument_list|,
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"transactional_properties"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"insert_only"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|me
parameter_list|)
block|{
name|fail
argument_list|(
literal|"CreateTable expected to succeed, but failed for "
operator|+
name|tblName
argument_list|)
expr_stmt|;
block|}
name|resetHMSClient
argument_list|()
expr_stmt|;
comment|// table has capabilities
name|tblName
operator|=
literal|"test_view_wc"
expr_stmt|;
name|table_params
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|table_params
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"HIVESQL"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|table_params
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Create view is expected to succeed and has succeeded"
argument_list|)
expr_stmt|;
comment|// no transformation for views
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create view expected to succeed but has failed."
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Create view expected to succeed but has failed.<"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testCreateTable() failed."
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testCreateTable failed:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformerDatabase
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"testdb"
decl_stmt|;
try|try
block|{
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Drop database failed for "
operator|+
name|dbName
argument_list|)
expr_stmt|;
block|}
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|capabilities
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"EXTWRITE"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestGetDatabaseEXTWRITE"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Database location not as expected:actual="
operator|+
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|,
name|db
operator|.
name|getLocationUri
argument_list|()
operator|.
name|contains
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|WAREHOUSE_EXTERNAL
operator|.
name|getVarname
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|capabilities
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEFULLACIDWRITE"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestGetDatabaseACIDWRITE"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|db
operator|=
name|client
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Database location not expected to be external warehouse:actual="
operator|+
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|,
name|db
operator|.
name|getLocationUri
argument_list|()
operator|.
name|contains
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|WAREHOUSE_EXTERNAL
operator|.
name|getVarname
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|capabilities
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEMANAGEDINSERTWRITE"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestGetDatabaseINSERTWRITE"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|db
operator|=
name|client
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Database location not expected to be external warehouse:actual="
operator|+
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|,
name|db
operator|.
name|getLocationUri
argument_list|()
operator|.
name|contains
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|WAREHOUSE_EXTERNAL
operator|.
name|getVarname
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testTransformerDatabase() failed."
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testTransformerDatabase failed:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformerMultiTable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
specifier|final
name|String
name|dbName
init|=
literal|"testdb"
decl_stmt|;
specifier|final
name|String
name|ext_table
init|=
literal|"ext_table"
decl_stmt|;
specifier|final
name|String
name|acidTable
init|=
literal|"managed_table"
decl_stmt|;
specifier|final
name|String
name|part_ext
init|=
literal|"part_ext"
decl_stmt|;
try|try
block|{
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Drop database failed for "
operator|+
name|dbName
argument_list|)
expr_stmt|;
block|}
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|capabilities
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEFULLACIDWRITE"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestTransformerMultiTable"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DBNAME"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|ext_table
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DROPDB"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|StringBuilder
name|properties
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"EXTERNAL"
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
decl_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|acidTable
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|)
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"transactional"
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DROPDB"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|tProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DBNAME"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|part_ext
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"DROPDB"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|properties
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"EXTERNAL"
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|properties
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tProps
operator|.
name|put
argument_list|(
literal|"PARTITIONS"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|createTableWithCapabilities
argument_list|(
name|tProps
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|capabilities
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"EXTWRITE"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"EXTREAD"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestTransformerMultiTable"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|acidTable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AccessType does not match"
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|acidTable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AccessType does not match"
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|ext_table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AccessType does not match"
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|acidTable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AccessType does not match"
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
name|capabilities
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"EXTWRITE"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"EXTREAD"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVESQL"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"SPARKSQL"
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|add
argument_list|(
literal|"HIVEBUCKET2"
argument_list|)
expr_stmt|;
name|setHMSClient
argument_list|(
literal|"TestTransformerMultiTable"
argument_list|,
operator|(
name|String
index|[]
operator|)
operator|(
name|capabilities
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|acidTable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AccessType does not match"
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|acidTable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AccessType does not match"
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|part_ext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AccessType does not match"
argument_list|,
name|ACCESSTYPE_READWRITE
argument_list|,
name|tbl
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|acidTable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AccessType does not match"
argument_list|,
name|ACCESSTYPE_NONE
argument_list|,
name|tbl
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|resetHMSClient
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testTransformerDatabase() failed."
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testTransformerDatabase failed:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetHMSClient
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createTables
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|count
init|=
operator|(
operator|(
name|Integer
operator|)
name|props
operator|.
name|get
argument_list|(
literal|"TABLECOUNT"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
literal|"TBLNAME"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|caps
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|props
operator|.
name|get
argument_list|(
literal|"CAPABILITIES"
argument_list|)
decl_stmt|;
name|StringBuilder
name|table_params
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|caps
operator|!=
literal|null
condition|)
name|table_params
operator|.
name|append
argument_list|(
name|CAPABILITIES_KEY
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|caps
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"PROPERTIES"
argument_list|,
name|table_params
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|newtblName
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|newtblName
operator|=
name|tblName
operator|+
name|i
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"TBLNAME"
argument_list|,
name|newtblName
argument_list|)
expr_stmt|;
name|createTableWithCapabilities
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"DROPDB"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|newtblName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Create table failed for "
operator|+
name|newtblName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Table
name|createTableWithCapabilities
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|catalog
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|getOrDefault
argument_list|(
literal|"CATALOG"
argument_list|,
literal|"testcat"
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|getOrDefault
argument_list|(
literal|"DBNAME"
argument_list|,
literal|"simpdb"
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|getOrDefault
argument_list|(
literal|"TBLNAME"
argument_list|,
literal|"test_table"
argument_list|)
decl_stmt|;
name|TableType
name|type
init|=
operator|(
name|TableType
operator|)
name|props
operator|.
name|getOrDefault
argument_list|(
literal|"TBLTYPE"
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|)
decl_stmt|;
name|int
name|buckets
init|=
operator|(
operator|(
name|Integer
operator|)
name|props
operator|.
name|getOrDefault
argument_list|(
literal|"BUCKETS"
argument_list|,
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|String
name|properties
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|getOrDefault
argument_list|(
literal|"PROPERTIES"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|boolean
name|dropDb
init|=
operator|(
operator|(
name|Boolean
operator|)
name|props
operator|.
name|getOrDefault
argument_list|(
literal|"DROPDB"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|int
name|partitionCount
init|=
operator|(
operator|(
name|Integer
operator|)
name|props
operator|.
name|getOrDefault
argument_list|(
literal|"PARTITIONS"
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
specifier|final
name|String
name|typeName
init|=
literal|"Person"
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|TableType
operator|.
name|EXTERNAL_TABLE
condition|)
block|{
if|if
condition|(
operator|!
name|properties
operator|.
name|contains
argument_list|(
literal|"EXTERNAL=TRUE"
argument_list|)
condition|)
block|{
name|properties
operator|.
name|concat
argument_list|(
literal|";EXTERNAL=TRUE"
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|table_params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|propArray
init|=
name|properties
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|prop
range|:
name|propArray
control|)
block|{
name|String
index|[]
name|keyValue
init|=
name|prop
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|table_params
operator|.
name|put
argument_list|(
name|keyValue
index|[
literal|0
index|]
argument_list|,
name|keyValue
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Drop table failed for "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|dropDb
condition|)
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Drop database failed for "
operator|+
name|dbName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dropDb
condition|)
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|dropType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Drop type failed for "
operator|+
name|typeName
argument_list|)
expr_stmt|;
block|}
name|Type
name|typ1
init|=
operator|new
name|Type
argument_list|()
decl_stmt|;
name|typ1
operator|.
name|setName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|setFields
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"name"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"income"
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|createType
argument_list|(
name|typ1
argument_list|)
expr_stmt|;
name|TableBuilder
name|builder
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|setCols
argument_list|(
name|typ1
operator|.
name|getFields
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|setNumBuckets
argument_list|(
name|buckets
argument_list|)
operator|.
name|setTableParams
argument_list|(
name|table_params
argument_list|)
operator|.
name|addBucketCol
argument_list|(
literal|"name"
argument_list|)
operator|.
name|addStorageDescriptorParam
argument_list|(
literal|"test_param_1"
argument_list|,
literal|"Use this for comments etc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|buckets
operator|>
literal|0
condition|)
name|builder
operator|.
name|setNumBuckets
argument_list|(
name|buckets
argument_list|)
operator|.
name|addBucketCol
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitionCount
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|addPartCol
argument_list|(
literal|"partcol"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|TableType
operator|.
name|MANAGED_TABLE
condition|)
block|{
if|if
condition|(
name|properties
operator|.
name|contains
argument_list|(
literal|"transactional=true"
argument_list|)
operator|&&
operator|!
name|properties
operator|.
name|contains
argument_list|(
literal|"transactional_properties=insert_only"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setInputFormat
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setOutputFormat
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSerdeLib
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcSerde"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addStorageDescriptorParam
argument_list|(
literal|"inputFormat"
argument_list|,
literal|"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addStorageDescriptorParam
argument_list|(
literal|"outputFormat"
argument_list|,
literal|"org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat"
argument_list|)
expr_stmt|;
block|}
block|}
name|Table
name|tbl
init|=
name|builder
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|tblName
operator|+
literal|" created:type="
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitionCount
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|partitionCount
condition|;
name|i
operator|++
control|)
block|{
name|partValues
operator|.
name|add
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|vals
range|:
name|partValues
control|)
block|{
name|addPartition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isThriftClient
condition|)
block|{
comment|// the createTable() above does not update the location in the 'tbl'
comment|// object when the client is a thrift client and the code below relies
comment|// on the location being present in the 'tbl' object - so get the table
comment|// from the metastore
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|tbl
return|;
block|}
specifier|private
name|void
name|addPartition
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
throws|throws
name|TException
block|{
name|PartitionBuilder
name|partitionBuilder
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|values
operator|.
name|forEach
argument_list|(
name|val
lambda|->
name|partitionBuilder
operator|.
name|addValue
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|p
init|=
name|partitionBuilder
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// PartitionBuilder uses 0 as default whereas we use -1 for Tables.
name|client
operator|.
name|add_partition
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

