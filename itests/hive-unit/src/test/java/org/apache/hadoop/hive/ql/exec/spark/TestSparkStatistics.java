begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|Statistic
operator|.
name|SparkStatistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|Statistic
operator|.
name|SparkStatisticsNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
operator|.
name|SQLStdHiveAuthorizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
specifier|public
class|class
name|TestSparkStatistics
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSparkStatistics
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
name|SQLStdHiveAuthorizerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|,
literal|"spark"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"spark.master"
argument_list|,
literal|"local-cluster[1,2,1024]"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"spark.local.dir"
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
argument_list|,
literal|"TestSparkStatistics-local-dir"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Driver
name|driver
init|=
literal|null
decl_stmt|;
try|try
block|{
name|driver
operator|=
operator|new
name|Driver
argument_list|(
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|withGenerateNewQueryId
argument_list|(
literal|true
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|driver
operator|.
name|run
argument_list|(
literal|"create table test (col int)"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|driver
operator|.
name|compile
argument_list|(
literal|"select * from test order by col"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SparkTask
argument_list|>
name|sparkTasks
init|=
name|Utilities
operator|.
name|getSparkTasks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sparkTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SparkTask
name|sparkTask
init|=
name|sparkTasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DriverContext
name|driverCxt
init|=
operator|new
name|DriverContext
argument_list|(
name|driver
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|driverCxt
operator|.
name|prepare
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
name|sparkTask
operator|.
name|initialize
argument_list|(
name|driver
operator|.
name|getQueryState
argument_list|()
argument_list|,
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|driverCxt
argument_list|,
name|driver
operator|.
name|getContext
argument_list|()
operator|.
name|getOpContext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sparkTask
operator|.
name|execute
argument_list|(
name|driverCxt
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sparkTask
operator|.
name|getSparkStatistics
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SparkStatistic
argument_list|>
name|sparkStats
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|sparkTask
operator|.
name|getSparkStatistics
argument_list|()
operator|.
name|getStatisticGroup
argument_list|(
name|SparkStatisticsNames
operator|.
name|SPARK_GROUP_NAME
argument_list|)
operator|.
name|getStatistics
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|sparkStats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|statsMap
init|=
name|sparkStats
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|SparkStatistic
operator|::
name|getName
argument_list|,
name|SparkStatistic
operator|::
name|getValue
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|statsMap
operator|.
name|get
argument_list|(
name|SparkStatisticsNames
operator|.
name|TASK_DURATION_TIME
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|statsMap
operator|.
name|get
argument_list|(
name|SparkStatisticsNames
operator|.
name|EXECUTOR_CPU_TIME
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|statsMap
operator|.
name|get
argument_list|(
name|SparkStatisticsNames
operator|.
name|EXECUTOR_DESERIALIZE_CPU_TIME
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|statsMap
operator|.
name|get
argument_list|(
name|SparkStatisticsNames
operator|.
name|EXECUTOR_DESERIALIZE_TIME
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|statsMap
operator|.
name|get
argument_list|(
name|SparkStatisticsNames
operator|.
name|EXECUTOR_RUN_TIME
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists test"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

