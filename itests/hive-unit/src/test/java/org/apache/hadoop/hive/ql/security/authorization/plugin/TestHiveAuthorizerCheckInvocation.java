begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HiveAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|SessionStateUserAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
operator|.
name|HivePrivilegeObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test HiveAuthorizer api invocation  */
end_comment

begin_class
specifier|public
class|class
name|TestHiveAuthorizerCheckInvocation
block|{
specifier|protected
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|protected
specifier|static
name|Driver
name|driver
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tableName
init|=
name|TestHiveAuthorizerCheckInvocation
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
specifier|static
name|HiveAuthorizer
name|mockedAuthorizer
decl_stmt|;
comment|/**    * This factory creates a mocked HiveAuthorizer class. Use the mocked class to    * capture the argument passed to it in the test case.    */
specifier|static
class|class
name|MockedHiveAuthorizerFactory
implements|implements
name|HiveAuthorizerFactory
block|{
annotation|@
name|Override
specifier|public
name|HiveAuthorizer
name|createHiveAuthorizer
parameter_list|(
name|HiveMetastoreClientFactory
name|metastoreClientFactory
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|HiveAuthenticationProvider
name|authenticator
parameter_list|)
block|{
name|TestHiveAuthorizerCheckInvocation
operator|.
name|mockedAuthorizer
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HiveAuthorizer
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|TestHiveAuthorizerCheckInvocation
operator|.
name|mockedAuthorizer
return|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
comment|// Turn on mocked authorization
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
name|MockedHiveAuthorizerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
argument_list|,
name|SessionStateUserAuthenticator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (i int, j int, k string) partitioned by (city string, date string) "
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTests
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInputSomeColumnsUsed
parameter_list|()
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
throws|,
name|CommandNeedRetryException
block|{
name|reset
argument_list|(
name|mockedAuthorizer
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|driver
operator|.
name|compile
argument_list|(
literal|"select i from "
operator|+
name|tableName
operator|+
literal|" where k = 'X' and city = 'Scottsdale-AZ' "
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|inputs
init|=
name|getHivePrivilegeObjectInputs
argument_list|()
decl_stmt|;
name|checkSingleTableInput
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
name|HivePrivilegeObject
name|tableObj
init|=
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"no of columns used"
argument_list|,
literal|3
argument_list|,
name|tableObj
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Columns used"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"city"
argument_list|,
literal|"i"
argument_list|,
literal|"k"
argument_list|)
argument_list|,
name|getSortedList
argument_list|(
name|tableObj
operator|.
name|getColumns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getSortedList
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sortedCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|columns
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedCols
argument_list|)
expr_stmt|;
return|return
name|sortedCols
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInputAllColumnsUsed
parameter_list|()
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
throws|,
name|CommandNeedRetryException
block|{
name|reset
argument_list|(
name|mockedAuthorizer
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|driver
operator|.
name|compile
argument_list|(
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" order by i"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|inputs
init|=
name|getHivePrivilegeObjectInputs
argument_list|()
decl_stmt|;
name|checkSingleTableInput
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
name|HivePrivilegeObject
name|tableObj
init|=
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"no of columns used"
argument_list|,
literal|5
argument_list|,
name|tableObj
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Columns used"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"city"
argument_list|,
literal|"date"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|,
literal|"k"
argument_list|)
argument_list|,
name|getSortedList
argument_list|(
name|tableObj
operator|.
name|getColumns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInputNoColumnsUsed
parameter_list|()
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
throws|,
name|CommandNeedRetryException
block|{
name|reset
argument_list|(
name|mockedAuthorizer
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|driver
operator|.
name|compile
argument_list|(
literal|"describe "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|inputs
init|=
name|getHivePrivilegeObjectInputs
argument_list|()
decl_stmt|;
name|checkSingleTableInput
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
name|HivePrivilegeObject
name|tableObj
init|=
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"columns used"
argument_list|,
name|tableObj
operator|.
name|getColumns
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkSingleTableInput
parameter_list|(
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|inputs
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"number of inputs"
argument_list|,
literal|1
argument_list|,
name|inputs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HivePrivilegeObject
name|tableObj
init|=
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"input type"
argument_list|,
name|HivePrivilegeObjectType
operator|.
name|TABLE_OR_VIEW
argument_list|,
name|tableObj
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"table name"
argument_list|,
name|tableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|tableObj
operator|.
name|getObjectName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the inputs passed in current call to authorizer.checkPrivileges    * @throws HiveAuthzPluginException    * @throws HiveAccessControlException    */
specifier|private
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|getHivePrivilegeObjectInputs
parameter_list|()
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
comment|// Create argument capturer
comment|// a class variable cast to this generic of generic class
name|Class
argument_list|<
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
argument_list|>
name|class_listPrivObjects
init|=
operator|(
name|Class
operator|)
name|List
operator|.
name|class
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
argument_list|>
name|inputsCapturer
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|class_listPrivObjects
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockedAuthorizer
argument_list|)
operator|.
name|checkPrivileges
argument_list|(
name|any
argument_list|(
name|HiveOperationType
operator|.
name|class
argument_list|)
argument_list|,
name|inputsCapturer
operator|.
name|capture
argument_list|()
argument_list|,
name|Matchers
operator|.
name|anyListOf
argument_list|(
name|HivePrivilegeObject
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|HiveAuthzContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|inputsCapturer
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

