begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestSerdeWithFieldComments.  */
end_comment

begin_class
specifier|public
class|class
name|TestSerdeWithFieldComments
block|{
specifier|private
name|StructField
name|mockedStructField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|oiTypeName
parameter_list|,
name|String
name|comment
parameter_list|)
block|{
name|StructField
name|m
init|=
name|mock
argument_list|(
name|StructField
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|m
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ObjectInspector
name|oi
init|=
name|mock
argument_list|(
name|ObjectInspector
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|oiTypeName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|m
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|m
operator|.
name|getFieldComment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|comment
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFieldComments
parameter_list|()
throws|throws
name|MetaException
throws|,
name|SerDeException
block|{
name|StructObjectInspector
name|mockSOI
init|=
name|mock
argument_list|(
name|StructObjectInspector
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockSOI
operator|.
name|getCategory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
name|List
name|fieldRefs
init|=
operator|new
name|ArrayList
argument_list|<
name|StructField
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add field with a comment...
name|fieldRefs
operator|.
name|add
argument_list|(
name|mockedStructField
argument_list|(
literal|"first"
argument_list|,
literal|"type name 1"
argument_list|,
literal|"this is a comment"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... and one without
name|fieldRefs
operator|.
name|add
argument_list|(
name|mockedStructField
argument_list|(
literal|"second"
argument_list|,
literal|"type name 2"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockSOI
operator|.
name|getAllStructFieldRefs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fieldRefs
argument_list|)
expr_stmt|;
name|Deserializer
name|mockDe
init|=
name|mock
argument_list|(
name|Deserializer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockDe
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockSOI
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|result
init|=
name|HiveMetaStoreUtils
operator|.
name|getFieldsFromDeserializer
argument_list|(
literal|"testTable"
argument_list|,
name|mockDe
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"this is a comment"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"second"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"from deserializer"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

