begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
operator|.
name|BehaviourInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CurrentNotificationEventId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|listener
operator|.
name|DbNotificationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
operator|.
name|SOURCE_OF_REPLICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
operator|.
name|isFullAcidTable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
operator|.
name|isTransactionalTable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * TestReplicationWithTableMigrationEx - test replication for Hive2 to Hive3 (Strict managed tables)  */
end_comment

begin_class
specifier|public
class|class
name|TestReplicationWithTableMigrationEx
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationWithTableMigrationEx
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|WarehouseInstance
name|primary
decl_stmt|,
name|replica
decl_stmt|;
specifier|private
name|String
name|primaryDbName
decl_stmt|,
name|replicatedDbName
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrideProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|internalBeforeClassSetup
argument_list|(
name|overrideProperties
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|internalBeforeClassSetup
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrideConfigs
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|TestReplicationWithTableMigrationEx
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.client.use.datanode.hostname"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|Utils
operator|.
name|getUGI
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|".hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|miniDFSCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveConfigs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.support.concurrency"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.txn.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DbTxnManager"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.client.capability.check"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.repl.bootstrap.dump.open.txn.timeout"
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.checks.bucketing"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.mapred.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"mapred.input.dir.recursive"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.disallow.incompatible.col.type.changes"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.managed.tables"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.transactional.event.listeners"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|replica
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|hiveConfigs
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configsForPrimary
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.client.capability.check"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.repl.bootstrap.dump.open.txn.timeout"
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.checks.bucketing"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.mapred.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"mapred.input.dir.recursive"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.disallow.incompatible.col.type.changes"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.support.concurrency"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.txn.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DummyTxnManager"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.managed.tables"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|configsForPrimary
operator|.
name|putAll
argument_list|(
name|overrideConfigs
argument_list|)
expr_stmt|;
name|primary
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|configsForPrimary
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|classLevelTearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|primary
operator|.
name|close
argument_list|()
expr_stmt|;
name|replica
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Throwable
block|{
name|primaryDbName
operator|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_"
operator|+
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|replicatedDbName
operator|=
literal|"replicated_"
operator|+
name|primaryDbName
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|primaryDbName
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|prepareData
parameter_list|(
name|String
name|primaryDbName
parameter_list|)
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacid (id int) clustered by(id) into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacidpart (place string) partitioned by (country string) clustered by(place) "
operator|+
literal|"into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(3)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table tacidpart add partition(country='france')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidpart partition(country='india') values('mumbai')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidpart partition(country='us') values('sf')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidpart partition(country='france') values('paris')"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tacid"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tacidpart"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyLoadExecution
parameter_list|(
name|String
name|replicatedDbName
parameter_list|,
name|String
name|lastReplId
parameter_list|)
throws|throws
name|Throwable
block|{
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"tacid"
block|,
literal|"tacidpart"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|lastReplId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select count(*) from tacid"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"3"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from tacid order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select count(*) from tacidpart"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"3"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from tacidpart order by country"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"france"
block|,
literal|"india"
block|,
literal|"us"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isFullAcidTable
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tacid"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isFullAcidTable
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tacidpart"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|WarehouseInstance
operator|.
name|Tuple
name|dumpWithLastEventIdHacked
parameter_list|(
name|int
name|eventId
parameter_list|)
throws|throws
name|Throwable
block|{
name|BehaviourInjection
argument_list|<
name|CurrentNotificationEventId
argument_list|,
name|CurrentNotificationEventId
argument_list|>
name|callerVerifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|CurrentNotificationEventId
argument_list|,
name|CurrentNotificationEventId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CurrentNotificationEventId
name|apply
parameter_list|(
name|CurrentNotificationEventId
name|id
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"GetCurrentNotificationEventIdBehaviour called"
argument_list|)
expr_stmt|;
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
comment|// keep events to reply during incremental
name|id
operator|.
name|setEventId
argument_list|(
name|eventId
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|throwable
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setGetCurrentNotificationEventIdBehaviour
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetGetCurrentNotificationEventIdBehaviour
argument_list|()
expr_stmt|;
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentOpDuringBootStrapDumpCreateTableReplay
parameter_list|()
throws|throws
name|Throwable
block|{
name|prepareData
argument_list|(
name|primaryDbName
argument_list|)
expr_stmt|;
comment|// dump with operation after last repl id is fetched.
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|dumpWithLastEventIdHacked
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// next incremental dump
name|tuple
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentOpDuringBootStrapDumpInsertReplay
parameter_list|()
throws|throws
name|Throwable
block|{
name|prepareData
argument_list|(
name|primaryDbName
argument_list|)
expr_stmt|;
comment|// dump with operation after last repl id is fetched.
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|dumpWithLastEventIdHacked
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// next incremental dump
name|tuple
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableLevelDumpMigration
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (i int, j int)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
operator|+
literal|".'t1'"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|replicatedDbName
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t1 values (1, 2)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
operator|+
literal|".'t1'"
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentOpDuringBootStrapDumpInsertOverwrite
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacid (id int) clustered by(id) into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(3)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert overwrite table tacid values(4)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(5)"
argument_list|)
expr_stmt|;
comment|// dump with operation after last repl id is fetched.
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|dumpWithLastEventIdHacked
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"tacid"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select count(*) from tacid"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"2"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from tacid order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// next incremental dump
name|tuple
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"tacid"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select count(*) from tacid"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"2"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from tacid order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"4"
block|,
literal|"5"
block|,}
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadWithFailureInAddNotification
parameter_list|(
name|String
name|tbl
parameter_list|,
name|String
name|dumpLocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|BehaviourInjection
argument_list|<
name|InjectableBehaviourObjectStore
operator|.
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
name|callerVerifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|InjectableBehaviourObjectStore
operator|.
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|InjectableBehaviourObjectStore
operator|.
name|CallerArguments
name|args
parameter_list|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"InjectableBehaviourObjectStore called for Verifier - Table: "
operator|+
name|args
operator|.
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
operator|||
operator|(
name|args
operator|.
name|constraintTblName
operator|!=
literal|null
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|args
operator|.
name|dbName
operator|+
literal|" Constraint Table: "
operator|+
name|args
operator|.
name|constraintTblName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|args
operator|.
name|tblName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - Table: "
operator|+
name|args
operator|.
name|tblName
argument_list|)
expr_stmt|;
return|return
operator|!
name|args
operator|.
name|tblName
operator|.
name|equalsIgnoreCase
argument_list|(
name|tbl
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setCallerVerifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|withClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.metastore.transactional.event.listeners'='"
operator|+
name|DbNotificationListener
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|dumpLocation
argument_list|,
name|withClause
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetCallerVerifier
argument_list|()
expr_stmt|;
block|}
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncLoadPenFlagPropAlterDB
parameter_list|()
throws|throws
name|Throwable
block|{
name|prepareData
argument_list|(
name|primaryDbName
argument_list|)
expr_stmt|;
comment|// dump with operation after last repl id is fetched.
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|dumpWithLastEventIdHacked
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|primary
operator|.
name|getDatabase
argument_list|(
name|primaryDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter database "
operator|+
name|primaryDbName
operator|+
literal|" set dbproperties('dummy_key'='dummy_val')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tbl_temp (fld int)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|loadWithFailureInAddNotification
argument_list|(
literal|"tbl_temp"
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|Database
name|replDb
init|=
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replDb
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|primary
operator|.
name|getDatabase
argument_list|(
name|primaryDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|replDb
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"dummy_key"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"dummy_val"
argument_list|)
argument_list|)
expr_stmt|;
comment|// next incremental dump
name|tuple
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncLoadPenFlagWithMoveOptimization
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|withClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.enable.move.optimization'='true'"
argument_list|)
decl_stmt|;
name|prepareData
argument_list|(
name|primaryDbName
argument_list|)
expr_stmt|;
comment|// dump with operation after last repl id is fetched.
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|dumpWithLastEventIdHacked
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withClause
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// next incremental dump
name|tuple
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withClause
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReplUtils
operator|.
name|isFirstIncPending
argument_list|(
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUserName
parameter_list|(
name|String
name|userName
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertTrue
argument_list|(
name|userName
operator|.
name|equalsIgnoreCase
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tbl_own"
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|userName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tbl_own"
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|userName
operator|.
name|equalsIgnoreCase
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tacid"
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|userName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tacid"
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|userName
operator|.
name|equalsIgnoreCase
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tacidpart"
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|userName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tacidpart"
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|userName
operator|.
name|equalsIgnoreCase
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tbl_part"
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|userName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tbl_part"
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|userName
operator|.
name|equalsIgnoreCase
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"view_own"
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|userName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"view_own"
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|alterUserName
parameter_list|(
name|String
name|userName
parameter_list|)
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table tbl_own set owner USER "
operator|+
name|userName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table tacid set owner USER "
operator|+
name|userName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table tacidpart set owner USER "
operator|+
name|userName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table tbl_part set owner USER "
operator|+
name|userName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table view_own set owner USER "
operator|+
name|userName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnwerPropagation
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tbl_own (fld int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacid (id int) clustered by(id) into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacidpart (place string) partitioned by (country string) clustered by(place) "
operator|+
literal|"into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tbl_part (fld int) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tbl_own values (1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create view view_own as select * from tbl_own"
argument_list|)
expr_stmt|;
comment|// test bootstrap
name|alterUserName
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyUserName
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
comment|// test incremental
name|alterUserName
argument_list|(
literal|"hive1"
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyUserName
argument_list|(
literal|"hive1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnwerPropagationInc
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tbl_own (fld int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacid (id int) clustered by(id) into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacidpart (place string) partitioned by (country string) clustered by(place) "
operator|+
literal|"into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tbl_part (fld int) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tbl_own values (1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create view view_own as select * from tbl_own"
argument_list|)
expr_stmt|;
comment|// test incremental when table is getting created in the same load
name|alterUserName
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyUserName
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dynamicallyConvertNonAcidToAcidTable
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Non-acid table converted to an ACID table should be prohibited on source cluster with
comment|// strict managed false.
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (id int) stored as orc"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (place string) partitioned by (country string) stored as orc"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|runFailure
argument_list|(
literal|"alter table t1 set tblproperties('transactional'='true')"
argument_list|)
operator|.
name|runFailure
argument_list|(
literal|"alter table t2 set tblproperties('transactional'='true')"
argument_list|)
operator|.
name|runFailure
argument_list|(
literal|"alter table t1 set tblproperties('transactional'='true', "
operator|+
literal|"'transactional_properties'='insert_only')"
argument_list|)
operator|.
name|runFailure
argument_list|(
literal|"alter table t2 set tblproperties('transactional'='true', "
operator|+
literal|"'transactional_properties'='insert_only')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|prohibitManagedTableLocationChangeOnReplSource
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|tmpLocation
init|=
literal|"/tmp/"
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpLocation
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
comment|// For managed tables at source, the table location shouldn't be changed for the given
comment|// non-partitioned table and partition location shouldn't be changed for partitioned table as
comment|// alter event doesn't capture the new files list. So, it may cause data inconsistsency. So,
comment|// if database is enabled for replication at source, then alter location on managed tables
comment|// should be blocked.
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (id int) clustered by(id) into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t1 values(1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (place string) partitioned by (country string) stored as orc"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|runFailure
argument_list|(
literal|"alter table t1 set location '"
operator|+
name|tmpLocation
operator|+
literal|"'"
argument_list|)
operator|.
name|runFailure
argument_list|(
literal|"alter table t2 partition(country='india') set location '"
operator|+
name|tmpLocation
operator|+
literal|"'"
argument_list|)
operator|.
name|runFailure
argument_list|(
literal|"alter table t2 set location '"
operator|+
name|tmpLocation
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpLocation
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

