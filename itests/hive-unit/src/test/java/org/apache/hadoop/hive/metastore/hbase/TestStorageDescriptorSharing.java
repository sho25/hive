begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Integration tests with HBase Mini-cluster for HBaseStore  */
end_comment

begin_class
specifier|public
class|class
name|TestStorageDescriptorSharing
extends|extends
name|HBaseIntegrationTests
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHBaseStoreIntegration
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|MessageDigest
name|md
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startup
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseIntegrationTests
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseIntegrationTests
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|setupConnection
argument_list|()
expr_stmt|;
name|setupHBaseStore
argument_list|()
expr_stmt|;
try|try
block|{
name|md
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|createManyPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"manyParts"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pc"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"alan"
argument_list|,
literal|"bob"
argument_list|,
literal|"carl"
argument_list|,
literal|"doug"
argument_list|,
literal|"ethan"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|partVals
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/pc="
operator|+
name|val
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Partition
name|p
init|=
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:/tmp/pc="
operator|+
name|val
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|()
operator|.
name|countStorageDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableName2
init|=
literal|"differentTable"
decl_stmt|;
name|sd
operator|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input2"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|Table
argument_list|(
name|tableName2
argument_list|,
literal|"default"
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|()
operator|.
name|countStorageDescriptor
argument_list|()
argument_list|)
expr_stmt|;
comment|// Drop one of the partitions and make sure it doesn't drop the storage descriptor
name|store
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|()
operator|.
name|countStorageDescriptor
argument_list|()
argument_list|)
expr_stmt|;
comment|// Alter the second table in a few ways to make sure it changes it's descriptor properly
name|table
operator|=
name|store
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sdHash
init|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
decl_stmt|;
comment|// Alter the table without touching the storage descriptor
name|table
operator|.
name|setLastAccessTime
argument_list|(
name|startTime
operator|+
literal|1
argument_list|)
expr_stmt|;
name|store
operator|.
name|alterTable
argument_list|(
name|dbName
argument_list|,
name|tableName2
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|()
operator|.
name|countStorageDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|=
name|store
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|alteredHash
init|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|sdHash
argument_list|,
name|alteredHash
argument_list|)
expr_stmt|;
comment|// Alter the table, changing the storage descriptor
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|setOutputFormat
argument_list|(
literal|"output_changed"
argument_list|)
expr_stmt|;
name|store
operator|.
name|alterTable
argument_list|(
name|dbName
argument_list|,
name|tableName2
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|()
operator|.
name|countStorageDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|=
name|store
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName2
argument_list|)
expr_stmt|;
name|alteredHash
operator|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|sdHash
argument_list|,
name|alteredHash
argument_list|)
argument_list|)
expr_stmt|;
comment|// Alter one of the partitions without touching the storage descriptor
name|Partition
name|part
init|=
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|sdHash
operator|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|part
operator|.
name|setLastAccessTime
argument_list|(
name|part
operator|.
name|getLastAccessTime
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|store
operator|.
name|alterPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|()
operator|.
name|countStorageDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|=
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|alteredHash
operator|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|sdHash
argument_list|,
name|alteredHash
argument_list|)
expr_stmt|;
comment|// Alter the partition, changing the storage descriptor
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setOutputFormat
argument_list|(
literal|"output_changed_some_more"
argument_list|)
expr_stmt|;
name|store
operator|.
name|alterPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|()
operator|.
name|countStorageDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|=
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|alteredHash
operator|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|sdHash
argument_list|,
name|alteredHash
argument_list|)
argument_list|)
expr_stmt|;
comment|// Alter multiple partitions without touching the storage descriptors
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|store
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|sdHash
operator|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|parts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setLastAccessTime
argument_list|(
literal|97
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|listPartVals
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pv
range|:
name|partVals
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|partVals
operator|.
name|size
argument_list|()
argument_list|)
control|)
block|{
name|listPartVals
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|pv
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|alterPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|listPartVals
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|()
operator|.
name|countStorageDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|parts
operator|=
name|store
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|alteredHash
operator|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|sdHash
argument_list|,
name|alteredHash
argument_list|)
expr_stmt|;
comment|// Alter multiple partitions changning the storage descriptors
name|parts
operator|=
name|store
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sdHash
operator|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|parts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|setOutputFormat
argument_list|(
literal|"yet_a_different_of"
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|alterPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|listPartVals
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|()
operator|.
name|countStorageDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|parts
operator|=
name|store
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|alteredHash
operator|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|sdHash
argument_list|,
name|alteredHash
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|partVal
range|:
name|partVals
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|partVals
operator|.
name|size
argument_list|()
argument_list|)
control|)
block|{
name|store
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|()
operator|.
name|countStorageDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

