begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StringColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Integration tests with HBase Mini-cluster for HBaseStore  */
end_comment

begin_class
specifier|public
class|class
name|TestHBaseAggrStatsCacheIntegration
extends|extends
name|HBaseIntegrationTests
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHBaseStoreIntegration
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startup
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseIntegrationTests
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseIntegrationTests
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|setupConnection
argument_list|()
expr_stmt|;
name|setupHBaseStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
interface|interface
name|Checker
block|{
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"hit"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"today"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yesterday"
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"boolean"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"varchar"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals1
argument_list|,
name|partVals2
argument_list|)
control|)
block|{
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/default/hit/ds="
operator|+
name|partVals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|partVals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|psd
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|BooleanColumnStatsData
name|bcsd
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|bcsd
operator|.
name|setNumFalses
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|bcsd
operator|.
name|setNumTrues
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|bcsd
operator|.
name|setNumNulls
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
name|bcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"varchar"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|StringColumnStatsData
name|scsd
init|=
operator|new
name|StringColumnStatsData
argument_list|()
decl_stmt|;
name|scsd
operator|.
name|setAvgColLen
argument_list|(
literal|10.3
argument_list|)
expr_stmt|;
name|scsd
operator|.
name|setMaxColLen
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|scsd
operator|.
name|setNumNulls
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|scsd
operator|.
name|setNumDVs
argument_list|(
literal|12342
argument_list|)
expr_stmt|;
name|data
operator|.
name|setStringStats
argument_list|(
name|scsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVals
argument_list|)
expr_stmt|;
block|}
name|Checker
name|statChecker
init|=
operator|new
name|Checker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"boolean"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|BooleanColumnStatsData
name|bcsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|bcsd
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|bcsd
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|bcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|cso
operator|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col2"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"varchar"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|StringColumnStatsData
name|scsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10.3
argument_list|,
name|scsd
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2000
argument_list|,
name|scsd
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|scsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12342
argument_list|,
name|scsd
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|AggrStats
name|aggrStats
init|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=today"
argument_list|,
literal|"ds=yesterday"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|)
argument_list|)
decl_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
comment|// Check that we had to build it from the stats
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call again, this time it should come from memory.  Also, reverse the name order this time
comment|// to assure that we still hit.
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=yesterday"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|)
argument_list|)
expr_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|flushMemory
argument_list|()
expr_stmt|;
comment|// Call again, this time it should come from hbase
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=today"
argument_list|,
literal|"ds=yesterday"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|)
argument_list|)
expr_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|someWithStats
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"psws"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"today"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yesterday"
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"long"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals1
argument_list|,
name|partVals2
argument_list|)
control|)
block|{
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/default/psws/ds="
operator|+
name|partVals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|partVals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|psd
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|LongColumnStatsData
name|lcsd
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|lcsd
operator|.
name|setHighValue
argument_list|(
literal|192L
argument_list|)
expr_stmt|;
name|lcsd
operator|.
name|setLowValue
argument_list|(
operator|-
literal|20L
argument_list|)
expr_stmt|;
name|lcsd
operator|.
name|setNumNulls
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|lcsd
operator|.
name|setNumDVs
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|lcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVals
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|Checker
name|statChecker
init|=
operator|new
name|Checker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"long"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|LongColumnStatsData
name|lcsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|192L
argument_list|,
name|lcsd
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|20L
argument_list|,
name|lcsd
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|lcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|32
argument_list|,
name|lcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|AggrStats
name|aggrStats
init|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=today"
argument_list|,
literal|"ds=yesterday"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
decl_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
comment|// Check that we had to build it from the stats
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call again, this time it should come from memory.  Also, reverse the name order this time
comment|// to assure that we still hit.
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=yesterday"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|flushMemory
argument_list|()
expr_stmt|;
comment|// Call again, this time it should come from hbase
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=today"
argument_list|,
literal|"ds=yesterday"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidation
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"invalidation"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"today"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yesterday"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals3
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"tomorrow"
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"boolean"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals1
argument_list|,
name|partVals2
argument_list|,
name|partVals3
argument_list|)
control|)
block|{
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/default/invalidation/ds="
operator|+
name|partVals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|partVals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|psd
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|BooleanColumnStatsData
name|bcsd
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|bcsd
operator|.
name|setNumFalses
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|bcsd
operator|.
name|setNumTrues
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|bcsd
operator|.
name|setNumNulls
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
name|bcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVals
argument_list|)
expr_stmt|;
block|}
name|Checker
name|statChecker
init|=
operator|new
name|Checker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"boolean"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|BooleanColumnStatsData
name|bcsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|bcsd
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|bcsd
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|bcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|AggrStats
name|aggrStats
init|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=today"
argument_list|,
literal|"ds=yesterday"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
decl_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
comment|// Check that we had to build it from the stats
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call again, this time it should come from memory.  Also, reverse the name order this time
comment|// to assure that we still hit.
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=yesterday"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now call a different combination to get it in memory too
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=tomorrow"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=tomorrow"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// wake the invalidator and check again to make sure it isn't too aggressive about
comment|// removing our stuff.
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|wakeInvalidator
argument_list|()
expr_stmt|;
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=tomorrow"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update statistics for 'tomorrow'
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVals3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|BooleanColumnStatsData
name|bcsd
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|bcsd
operator|.
name|setNumFalses
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|bcsd
operator|.
name|setNumTrues
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|bcsd
operator|.
name|setNumNulls
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
name|bcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Checker
name|afterUpdate
init|=
operator|new
name|Checker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"boolean"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|BooleanColumnStatsData
name|bcsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|110
argument_list|,
name|bcsd
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|220
argument_list|,
name|bcsd
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|330
argument_list|,
name|bcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVals3
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|setRunInvalidatorEvery
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|wakeInvalidator
argument_list|()
expr_stmt|;
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=tomorrow"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|afterUpdate
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
comment|// Check that we missed, which means this aggregate was dropped from the cache.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that our other aggregate is still in the cache.
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=yesterday"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Drop 'yesterday', so our first aggregate should be dumped from memory and hbase
name|store
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partVals2
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|wakeInvalidator
argument_list|()
expr_stmt|;
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=yesterday"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Checker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"boolean"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|BooleanColumnStatsData
name|bcsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|bcsd
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|bcsd
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|bcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
comment|// Check that we missed, which means this aggregate was dropped from the cache.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that our other aggregate is still in the cache.
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=tomorrow"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|afterUpdate
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|setRunInvalidatorEvery
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|setMaxTimeInCache
argument_list|(
literal|500000
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|wakeInvalidator
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|alterInvalidation
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"ai"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"today"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yesterday"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals3
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"tomorrow"
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"boolean"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Partition
index|[]
name|partitions
init|=
operator|new
name|Partition
index|[
literal|3
index|]
decl_stmt|;
name|int
name|partnum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals1
argument_list|,
name|partVals2
argument_list|,
name|partVals3
argument_list|)
control|)
block|{
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/default/invalidation/ds="
operator|+
name|partVals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|partVals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|psd
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|partitions
index|[
name|partnum
operator|++
index|]
operator|=
name|part
expr_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|BooleanColumnStatsData
name|bcsd
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|bcsd
operator|.
name|setNumFalses
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|bcsd
operator|.
name|setNumTrues
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|bcsd
operator|.
name|setNumNulls
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
name|bcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVals
argument_list|)
expr_stmt|;
block|}
name|AggrStats
name|aggrStats
init|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=today"
argument_list|,
literal|"ds=tomorrow"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
decl_stmt|;
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=today"
argument_list|,
literal|"ds=yesterday"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that we had to build it from the stats
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// wake the invalidator and check again to make sure it isn't too aggressive about
comment|// removing our stuff.
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|wakeInvalidator
argument_list|()
expr_stmt|;
name|Partition
name|newPart
init|=
operator|new
name|Partition
argument_list|(
name|partitions
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|newPart
operator|.
name|setLastAccessTime
argument_list|(
operator|(
name|int
operator|)
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|alterPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partVals3
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|setRunInvalidatorEvery
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|wakeInvalidator
argument_list|()
expr_stmt|;
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=tomorrow"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that we missed, which means this aggregate was dropped from the cache.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that our other aggregate is still in the cache.
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=yesterday"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|setRunInvalidatorEvery
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|setMaxTimeInCache
argument_list|(
literal|500000
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|wakeInvalidator
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|altersInvalidation
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"asi"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"today"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yesterday"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals3
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"tomorrow"
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"boolean"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Partition
index|[]
name|partitions
init|=
operator|new
name|Partition
index|[
literal|3
index|]
decl_stmt|;
name|int
name|partnum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals1
argument_list|,
name|partVals2
argument_list|,
name|partVals3
argument_list|)
control|)
block|{
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/default/invalidation/ds="
operator|+
name|partVals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|partVals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|psd
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|partitions
index|[
name|partnum
operator|++
index|]
operator|=
name|part
expr_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|BooleanColumnStatsData
name|bcsd
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|bcsd
operator|.
name|setNumFalses
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|bcsd
operator|.
name|setNumTrues
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|bcsd
operator|.
name|setNumNulls
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
name|bcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVals
argument_list|)
expr_stmt|;
block|}
name|AggrStats
name|aggrStats
init|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=today"
argument_list|,
literal|"ds=tomorrow"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
decl_stmt|;
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=today"
argument_list|,
literal|"ds=yesterday"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that we had to build it from the stats
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// wake the invalidator and check again to make sure it isn't too aggressive about
comment|// removing our stuff.
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|wakeInvalidator
argument_list|()
expr_stmt|;
name|Partition
index|[]
name|newParts
init|=
operator|new
name|Partition
index|[
literal|2
index|]
decl_stmt|;
name|newParts
index|[
literal|0
index|]
operator|=
operator|new
name|Partition
argument_list|(
name|partitions
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|newParts
index|[
literal|0
index|]
operator|.
name|setLastAccessTime
argument_list|(
operator|(
name|int
operator|)
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|newParts
index|[
literal|1
index|]
operator|=
operator|new
name|Partition
argument_list|(
name|partitions
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|newParts
index|[
literal|1
index|]
operator|.
name|setLastAccessTime
argument_list|(
operator|(
name|int
operator|)
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|alterPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals1
argument_list|,
name|partVals3
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newParts
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|setRunInvalidatorEvery
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|wakeInvalidator
argument_list|()
expr_stmt|;
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=tomorrow"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that we missed, which means this aggregate was dropped from the cache.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that our other aggregate got dropped too
name|aggrStats
operator|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=yesterday"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|hbaseHits
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|totalGets
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|misses
operator|.
name|getCnt
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|setRunInvalidatorEvery
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|setMaxTimeInCache
argument_list|(
literal|500000
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|wakeInvalidator
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

