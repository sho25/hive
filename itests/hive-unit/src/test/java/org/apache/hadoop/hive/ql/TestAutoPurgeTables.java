begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|RetryTestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"Flaky"
argument_list|)
specifier|public
class|class
name|TestAutoPurgeTables
block|{
specifier|private
specifier|static
specifier|final
name|String
name|driverName
init|=
literal|"org.apache.hive.jdbc.HiveDriver"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|testDbName
init|=
literal|"auto_purge_test_db"
decl_stmt|;
comment|//private static final String testTableName = "auto_purge_test_table";
specifier|private
specifier|static
specifier|final
name|String
name|INSERT_OVERWRITE_COMMAND_FORMAT
init|=
literal|"insert overwrite table "
operator|+
name|testDbName
operator|+
literal|".%s select 1, \"test\""
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TRUNCATE_TABLE_COMMAND_FORMAT
init|=
literal|"truncate table "
operator|+
name|testDbName
operator|+
literal|".%s"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|partitionedColumnName
init|=
literal|"partCol"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|partitionedColumnValue1
init|=
literal|"20090619"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INSERT_OVERWRITE_COMMAND_PARTITIONED_FORMAT
init|=
literal|"insert overwrite table "
operator|+
name|testDbName
operator|+
literal|".%s PARTITION ("
operator|+
name|partitionedColumnName
operator|+
literal|"="
operator|+
name|partitionedColumnValue1
operator|+
literal|")"
operator|+
literal|" select 1, \"test\""
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|partitionedColumnValue2
init|=
literal|"20100720"
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|con
decl_stmt|;
specifier|private
specifier|static
name|MiniHS2
name|miniHS2
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"TestAutoPurgeTables"
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|getConnection
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|con1
decl_stmt|;
name|con1
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Connection is null"
argument_list|,
name|con1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Connection should not be closed"
argument_list|,
name|con1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|con1
return|;
block|}
specifier|private
specifier|static
name|void
name|createTestTable
parameter_list|(
name|Statement
name|stmt
parameter_list|,
name|String
name|isAutopurge
parameter_list|,
name|boolean
name|isExternal
parameter_list|,
name|boolean
name|isPartitioned
parameter_list|,
name|String
name|testTableName
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|createTablePrefix
decl_stmt|;
if|if
condition|(
name|isExternal
condition|)
block|{
name|createTablePrefix
operator|=
literal|"create external table "
expr_stmt|;
block|}
else|else
block|{
name|createTablePrefix
operator|=
literal|"create table "
expr_stmt|;
block|}
name|String
name|qualifiedTableName
init|=
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|testDbName
argument_list|,
name|testTableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPartitioned
condition|)
block|{
comment|// create a partitioned table
name|stmt
operator|.
name|execute
argument_list|(
name|createTablePrefix
operator|+
name|qualifiedTableName
operator|+
literal|" (id int, value string) "
operator|+
literal|" partitioned by ("
operator|+
name|partitionedColumnName
operator|+
literal|" STRING)"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into "
operator|+
name|qualifiedTableName
operator|+
literal|" PARTITION ("
operator|+
name|partitionedColumnName
operator|+
literal|"="
operator|+
name|partitionedColumnValue1
operator|+
literal|") values (1, \"dummy1\"), (2, \"dummy2\"), (3, \"dummy3\")"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into "
operator|+
name|qualifiedTableName
operator|+
literal|" PARTITION ("
operator|+
name|partitionedColumnName
operator|+
literal|"="
operator|+
name|partitionedColumnValue2
operator|+
literal|") values (4, \"dummy4\"), (5, \"dummy5\"), (6, \"dummy6\")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create a table
name|stmt
operator|.
name|execute
argument_list|(
name|createTablePrefix
operator|+
name|qualifiedTableName
operator|+
literal|" (id int, value string)"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into "
operator|+
name|qualifiedTableName
operator|+
literal|" values (1, \"dummy1\"), (2, \"dummy2\"), (3, \"dummy3\")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAutopurge
operator|!=
literal|null
condition|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"alter table "
operator|+
name|qualifiedTableName
operator|+
literal|" set tblproperties (\"auto.purge\"=\""
operator|+
name|isAutopurge
operator|+
literal|"\")"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestAutoPurgeTables
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// enable trash so it can be tested
name|conf
operator|.
name|setFloat
argument_list|(
literal|"fs.trash.checkpoint.interval"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"fs.trash.interval"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
comment|// Create test database and base tables once for all the test
name|miniHS2
operator|=
operator|new
name|MiniHS2
operator|.
name|Builder
argument_list|()
operator|.
name|withConf
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Class
operator|.
name|forName
argument_list|(
name|driverName
argument_list|)
expr_stmt|;
name|con
operator|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
operator|+
literal|";create=true"
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop database if exists "
operator|+
name|testDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create database "
operator|+
name|testDbName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
block|{
name|Statement
name|stmt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
comment|// drop test db and its tables and views
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop database if exists "
operator|+
name|testDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getCurrentTrashPath
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|stmt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
if|if
condition|(
name|miniHS2
operator|!=
literal|null
condition|)
block|{
name|miniHS2
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|miniHS2
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|trashDir
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getCurrentTrashPath
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|trashDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|trashDir
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getCurrentTrashPath
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|trashDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests if previous table data skips trash when insert overwrite table .. is run against a table    * which has auto.purge property set    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
literal|"true"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests when auto.purge is set to a invalid string, trash should be used for insert overwrite    * queries    *     * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testAutoPurgeInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
literal|"invalid"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test when auto.purge property is not set. Data should be moved to trash for insert overwrite    * queries    *     * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testAutoPurgeUnset
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests if the auto.purge property works correctly for external tables. Old data should skip    * trash when insert overwrite table .. is run when auto.purge is set to true    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testExternalTable
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
literal|"true"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests auto.purge when managed table is partitioned. Old data should skip trash when insert    * overwrite table .. is run and auto.purge property is set to true    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testPartitionedTable
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
literal|"true"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests auto.purge for an external, partitioned table. Old partition data should skip trash when    * auto.purge is set to true    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testExternalPartitionedTable
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
literal|"true"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests when auto.purge is set to false, older data is moved to Trash when insert overwrite table    * .. is run    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testNoAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
literal|"false"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests when auto.purge is set to false on a external table, older data is moved to Trash when    * insert overwrite table .. is run    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testExternalNoAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
literal|"false"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests when auto.purge is set to false on a partitioned table, older data is moved to Trash when    * insert overwrite table .. is run    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testPartitionedNoAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
literal|"false"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests when auto.purge is set to false on a partitioned external table, older data is moved to    * Trash when insert overwrite table .. is run    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testPartitionedExternalNoAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
literal|"false"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//truncate on external table is not allowed
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SQLException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTruncatePartitionedExternalNoAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//truncate on external table is not allowed
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SQLException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTruncateExternalNoAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncatePartitionedNoAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateNoAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateInvalidAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
literal|"invalid"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateUnsetAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//truncate on external table is not allowed
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SQLException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTruncatePartitionedExternalAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//truncate on external table is not allowed
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SQLException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTruncateExternalAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncatePartitionedAutoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test util method to run the insert overwrite table or truncate table test on a table    *     * @param autoPurgePropValue - string value of the auto.purge property for the test table. Ignored    *          if null    * @param isExternal - if set creates a external table for the test    * @param isPartitioned - if set creates a partitioned table for the test    * @param isTruncateTest - if set uses truncate table command for the test. Otherwise uses Insert    *          overwrite table command for the test    * @param testTableName - test table name    * @throws Exception    */
specifier|private
name|void
name|testUtil
parameter_list|(
name|String
name|autoPurgePropValue
parameter_list|,
name|boolean
name|isExternal
parameter_list|,
name|boolean
name|isPartitioned
parameter_list|,
name|boolean
name|isTruncateTest
parameter_list|,
name|String
name|testTableName
parameter_list|)
throws|throws
name|Exception
block|{
name|testUtil
argument_list|(
name|autoPurgePropValue
argument_list|,
name|isExternal
argument_list|,
name|isPartitioned
argument_list|,
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|autoPurgePropValue
argument_list|)
argument_list|,
name|isTruncateTest
argument_list|,
name|testTableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test util method to run the insert overwrite table or truncate table test on a table    *     * @param isAutoPurge - If set, creates a table with auto.purge with the given value    * @param isExternal - if set creates a external table for the test    * @param isPartitioned - if set creates a partitioned table for the test    * @param purgeExpected - if set the assert condition for the test is such that it expectes old    *          table data to be moved to trash. If not creates a assert condition to make sure that    *          data is not moved to trash    * @param isTruncateTest - if set uses truncate table command for the test. Otherwise uses Insert    *          overwrite table command for the test    * @param testTableName - table name for the test table    * @throws Exception    */
specifier|private
name|void
name|testUtil
parameter_list|(
name|String
name|isAutoPurge
parameter_list|,
name|boolean
name|isExternal
parameter_list|,
name|boolean
name|isPartitioned
parameter_list|,
name|boolean
name|purgeExpected
parameter_list|,
name|boolean
name|isTruncateTest
parameter_list|,
name|String
name|testTableName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
init|)
block|{
comment|// create a test table with auto.purge = true
name|createTestTable
argument_list|(
name|stmt
argument_list|,
name|isAutoPurge
argument_list|,
name|isExternal
argument_list|,
name|isPartitioned
argument_list|,
name|testTableName
argument_list|)
expr_stmt|;
name|int
name|numFilesInTrashBefore
init|=
name|getTrashFileCount
argument_list|()
decl_stmt|;
name|String
name|command
init|=
name|getCommand
argument_list|(
name|isTruncateTest
argument_list|,
name|isPartitioned
argument_list|,
name|testTableName
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|int
name|numFilesInTrashAfter
init|=
name|getTrashFileCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|purgeExpected
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Data should have been moved to trash. Number of files in trash: before : %d after %d"
argument_list|,
name|numFilesInTrashBefore
argument_list|,
name|numFilesInTrashAfter
argument_list|)
argument_list|,
name|numFilesInTrashBefore
operator|<
name|numFilesInTrashAfter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Data should not have been moved to trash. Number of files in trash: before : %d after %d"
argument_list|,
name|numFilesInTrashBefore
argument_list|,
name|numFilesInTrashAfter
argument_list|)
argument_list|,
name|numFilesInTrashBefore
argument_list|,
name|numFilesInTrashAfter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getCommand
parameter_list|(
name|boolean
name|isTruncateTest
parameter_list|,
name|boolean
name|isPartitioned
parameter_list|,
name|String
name|testTableName
parameter_list|)
block|{
if|if
condition|(
name|isTruncateTest
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|TRUNCATE_TABLE_COMMAND_FORMAT
argument_list|,
name|testTableName
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|isPartitioned
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|INSERT_OVERWRITE_COMMAND_PARTITIONED_FORMAT
argument_list|,
name|testTableName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|INSERT_OVERWRITE_COMMAND_FORMAT
argument_list|,
name|testTableName
argument_list|)
return|;
block|}
block|}
specifier|private
name|int
name|getTrashFileCount
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|trashDir
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getCurrentTrashPath
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|)
decl_stmt|;
return|return
name|getFileCount
argument_list|(
name|fs
argument_list|,
name|trashDir
argument_list|)
return|;
block|}
specifier|private
name|int
name|getFileCount
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|count
return|;
block|}
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|lfs
init|=
name|fs
operator|.
name|listFiles
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|lfs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LocatedFileStatus
name|lf
init|=
name|lfs
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|lf
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lf
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Exception while list files on "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

