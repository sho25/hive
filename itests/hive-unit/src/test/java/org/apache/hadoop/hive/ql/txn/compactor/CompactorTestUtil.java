begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|DelimitedInputWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|TransactionBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
operator|.
name|HiveStreamingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
operator|.
name|StreamingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
operator|.
name|StreamingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
operator|.
name|StrictDelimitedInputWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Collection of helper methods for compaction tests like TestCompactor.  */
end_comment

begin_class
class|class
name|CompactorTestUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CompactorTestUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Get a list of base/delta directory names.    * @param fs the resolved file system    * @param filter filter down the contents to delta/delete delta directories.    *               If this is null, no filter is applied    * @param table resolved table, where to search for delta directories    * @param partitionName the name of the partition, can be null, if table is not partitioned    * @return Collection of delta directory names, always non-null.    * @throws IOException if table location is unreachable.    */
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getBaseOrDeltaNames
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|PathFilter
name|filter
parameter_list|,
name|Table
name|table
parameter_list|,
name|String
name|partitionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|partitionName
operator|==
literal|null
condition|?
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
else|:
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|partitionName
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|fileStatuses
init|=
name|filter
operator|!=
literal|null
condition|?
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|,
name|filter
argument_list|)
else|:
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|fileStatuses
argument_list|)
operator|.
name|map
argument_list|(
name|FileStatus
operator|::
name|getPath
argument_list|)
operator|.
name|map
argument_list|(
name|Path
operator|::
name|getName
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the bucket files under a delta directory.    * @param fs the resolved file system    * @param table resolved table, where to search for bucket files    * @param partitionName he name of the partition, can be null, if table is not partitioned    * @param deltaName the name of the delta directory, underneath the search begins    * @return Collection of bucket file names, always non-null.    * @throws IOException if the table or delta directory location is unreachable.    */
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getBucketFileNames
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Table
name|table
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|deltaName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|partitionName
operator|==
literal|null
condition|?
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|deltaName
argument_list|)
else|:
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|partitionName
argument_list|,
name|deltaName
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|FileStatus
operator|::
name|getPath
argument_list|)
operator|.
name|map
argument_list|(
name|Path
operator|::
name|getName
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Trigger a compaction run.    * @param conf hive configuration    * @param dbName database name    * @param tblName table name    * @param compactionType major/minor    * @param isQueryBased true, if query based compaction should be run    * @param partNames partition names    * @throws Exception compaction cannot be started.    */
specifier|static
name|void
name|runCompaction
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|CompactionType
name|compactionType
parameter_list|,
name|boolean
name|isQueryBased
parameter_list|,
name|String
modifier|...
name|partNames
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|COMPACTOR_CRUD_QUERY_BASED
argument_list|,
name|isQueryBased
argument_list|)
expr_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|t
operator|.
name|init
argument_list|(
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
argument_list|,
operator|new
name|AtomicBoolean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|partNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|txnHandler
operator|.
name|compact
argument_list|(
operator|new
name|CompactionRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|compactionType
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|CompactionRequest
name|cr
init|=
operator|new
name|CompactionRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|compactionType
argument_list|)
decl_stmt|;
name|cr
operator|.
name|setPartitionname
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Trigger a compaction cleaner.    * @param hConf hive configuration    * @throws Exception if cleaner cannot be started.    */
specifier|static
name|void
name|runCleaner
parameter_list|(
name|HiveConf
name|hConf
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|hConf
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Cleaner
name|t
init|=
operator|new
name|Cleaner
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/**    * Trigger compaction initiator.    * @param hConf hive configuration    * @param isQueryBased run compaction as query based    * @throws Exception if initiator cannot be started.    */
specifier|static
name|void
name|runInitiator
parameter_list|(
name|HiveConf
name|hConf
parameter_list|,
name|boolean
name|isQueryBased
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|hConf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|COMPACTOR_CRUD_QUERY_BASED
argument_list|,
name|isQueryBased
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Initiator
name|t
init|=
operator|new
name|Initiator
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/**    * Trigger compaction worker.    * @param hConf hive configuration    * @param isQueryBased run compaction as query based    * @throws Exception if worker cannot be started.    */
specifier|static
name|void
name|runWorker
parameter_list|(
name|HiveConf
name|hConf
parameter_list|,
name|boolean
name|isQueryBased
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|hConf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|COMPACTOR_CRUD_QUERY_BASED
argument_list|,
name|isQueryBased
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/**    * Execute Hive CLI statement.    * @param cmd arbitrary statement to execute    * @param driver execution driver    * @throws Exception failed to execute statement    */
name|void
name|executeStatementOnDriver
parameter_list|(
name|String
name|cmd
parameter_list|,
name|IDriver
name|driver
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
try|try
block|{
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to execute \""
operator|+
name|cmd
operator|+
literal|"\". Driver returned: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Execute Hive CLI statement and get back result.    * @param cmd arbitrary statement to execute    * @param driver execution driver    * @return the result of the query    * @throws Exception failed to execute statement    */
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|executeStatementOnDriverAndReturnResults
parameter_list|(
name|String
name|cmd
parameter_list|,
name|IDriver
name|driver
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
try|try
block|{
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to execute \""
operator|+
name|cmd
operator|+
literal|"\". Driver returned: "
operator|+
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|rs
argument_list|)
expr_stmt|;
return|return
name|rs
return|;
block|}
comment|/**    * Open a hive streaming connection, write some content in two transactions.    * @param conf hive configuration    * @param dbName name of the database    * @param tblName name of the table    * @param abort abort all transactions in connection    * @param keepOpen keep the streaming connection open after the transaction has been committed    * @return open streaming connection, can be null    * @throws StreamingException streaming connection cannot be established    */
specifier|static
name|StreamingConnection
name|writeBatch
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|boolean
name|abort
parameter_list|,
name|boolean
name|keepOpen
parameter_list|)
throws|throws
name|StreamingException
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|2
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|abort
condition|)
block|{
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|.
name|write
argument_list|(
literal|"50,Kiev"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"51,St. Petersburg"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"44,Boston"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|keepOpen
condition|)
block|{
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|abort
condition|)
block|{
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|.
name|write
argument_list|(
literal|"52,Tel Aviv"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"53,Atlantis"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"53,Boston"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|connection
return|;
block|}
specifier|static
name|void
name|writeBatch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|StreamingConnection
name|connection
parameter_list|,
name|DelimitedInputWriter
name|writer
parameter_list|,
name|boolean
name|closeEarly
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|StreamingException
block|{
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|2
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"50,Kiev"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"51,St. Petersburg"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"44,Boston"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|closeEarly
condition|)
block|{
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"52,Tel Aviv"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"53,Atlantis"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"53,Boston"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|checkExpectedTxnsPresent
parameter_list|(
name|Path
name|base
parameter_list|,
name|Path
index|[]
name|deltas
parameter_list|,
name|String
name|columnNamesProperty
parameter_list|,
name|String
name|columnTypesProperty
parameter_list|,
name|int
name|bucket
parameter_list|,
name|long
name|min
parameter_list|,
name|long
name|max
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|invaliWriteIDs
parameter_list|,
name|int
name|numBuckets
parameter_list|)
throws|throws
name|IOException
block|{
name|ValidWriteIdList
name|writeIdList
init|=
operator|new
name|ValidWriteIdList
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
literal|"AcidTable"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWriteIdValid
parameter_list|(
name|long
name|writeid
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|RangeResponse
name|isWriteIdRangeValid
parameter_list|(
name|long
name|minWriteId
parameter_list|,
name|long
name|maxWriteId
parameter_list|)
block|{
return|return
name|RangeResponse
operator|.
name|ALL
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|writeToString
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFromString
parameter_list|(
name|String
name|src
parameter_list|)
block|{        }
annotation|@
name|Override
specifier|public
name|Long
name|getMinOpenWriteId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getHighWatermark
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|getInvalidWriteIds
parameter_list|()
block|{
return|return
operator|new
name|long
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValidBase
parameter_list|(
name|long
name|writeid
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWriteIdAborted
parameter_list|(
name|long
name|writeid
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|RangeResponse
name|isWriteIdRangeAborted
parameter_list|(
name|long
name|minWriteId
parameter_list|,
name|long
name|maxWriteId
parameter_list|)
block|{
return|return
name|RangeResponse
operator|.
name|ALL
return|;
block|}
block|}
decl_stmt|;
name|OrcInputFormat
name|aif
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
name|columnNamesProperty
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
name|columnTypesProperty
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|hive_metastoreConstants
operator|.
name|BUCKET_COUNT
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numBuckets
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"orc.schema.evolution.case.sensitive"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TRANSACTIONAL_TABLE_SCAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AcidInputFormat
operator|.
name|RawReader
argument_list|<
name|OrcStruct
argument_list|>
name|reader
init|=
name|aif
operator|.
name|getRawReader
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|,
name|bucket
argument_list|,
name|writeIdList
argument_list|,
name|base
argument_list|,
name|deltas
argument_list|)
decl_stmt|;
name|RecordIdentifier
name|identifier
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|OrcStruct
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|long
name|currentTxn
init|=
name|min
decl_stmt|;
name|boolean
name|seenCurrentTxn
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|identifier
argument_list|,
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|seenCurrentTxn
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTxn
argument_list|,
name|identifier
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
name|seenCurrentTxn
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|currentTxn
operator|!=
name|identifier
operator|.
name|getWriteId
argument_list|()
condition|)
block|{
if|if
condition|(
name|invaliWriteIDs
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|invaliWriteIDs
operator|.
name|contains
argument_list|(
name|identifier
operator|.
name|getWriteId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentTxn
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|max
argument_list|,
name|currentTxn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Turn a list of file statuses into string.    * @param stat list of files    * @return string value    */
specifier|static
name|String
name|printFileStatus
parameter_list|(
name|FileStatus
index|[]
name|stat
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"stat{"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
for|for
control|(
name|FileStatus
name|f
range|:
name|stat
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|void
name|runStreamingAPI
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|StreamingConnectionOption
argument_list|>
name|connectionOption
parameter_list|)
throws|throws
name|StreamingException
block|{
name|List
argument_list|<
name|StreamingConnection
argument_list|>
name|connections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|StreamingConnectionOption
name|option
range|:
name|connectionOption
control|)
block|{
name|connections
operator|.
name|add
argument_list|(
name|writeBatch
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|option
operator|.
name|abort
argument_list|,
name|option
operator|.
name|keepOpen
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|connections
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|forEach
argument_list|(
name|StreamingConnection
operator|::
name|close
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|StreamingConnectionOption
block|{
specifier|private
specifier|final
name|boolean
name|abort
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|keepOpen
decl_stmt|;
name|StreamingConnectionOption
parameter_list|(
name|boolean
name|abort
parameter_list|,
name|boolean
name|keepOpen
parameter_list|)
block|{
name|this
operator|.
name|abort
operator|=
name|abort
expr_stmt|;
name|this
operator|.
name|keepOpen
operator|=
name|keepOpen
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

