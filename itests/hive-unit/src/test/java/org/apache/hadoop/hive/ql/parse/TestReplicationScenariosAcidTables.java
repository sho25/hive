begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AllocateTableWriteIdsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AllocateTableWriteIdsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|OpenTxnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|OpenTxnsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
operator|.
name|CallerArguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
operator|.
name|BehaviourInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
operator|.
name|SOURCE_OF_REPLICATION
import|;
end_import

begin_comment
comment|/**  * TestReplicationScenariosAcidTables - test replication for ACID tables  */
end_comment

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"this is ignored as its taking more time. Need to analyze further to reduce the time"
argument_list|)
specifier|public
class|class
name|TestReplicationScenariosAcidTables
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestRule
name|replV1BackwardCompat
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|WarehouseInstance
name|primary
decl_stmt|,
name|replica
decl_stmt|,
name|replicaNonAcid
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|String
name|primaryDbName
decl_stmt|,
name|replicatedDbName
decl_stmt|,
name|primaryDbNameExtra
decl_stmt|;
specifier|private
enum|enum
name|OperationType
block|{
name|REPL_TEST_ACID_INSERT
block|,
name|REPL_TEST_ACID_INSERT_SELECT
block|,
name|REPL_TEST_ACID_CTAS
block|,
name|REPL_TEST_ACID_INSERT_OVERWRITE
block|,
name|REPL_TEST_ACID_INSERT_IMPORT
block|,
name|REPL_TEST_ACID_INSERT_LOADLOCAL
block|,
name|REPL_TEST_ACID_INSERT_UNION
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestReplicationScenariosAcidTables
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.client.use.datanode.hostname"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|Utils
operator|.
name|getUGI
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|".hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|miniDFSCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overridesForHiveConf
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.support.concurrency"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.txn.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DbTxnManager"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.client.capability.check"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.repl.bootstrap.dump.open.txn.timeout"
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.exec.dynamic.partition.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.checks.bucketing"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.mapred.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"mapred.input.dir.recursive"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.disallow.incompatible.col.type.changes"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|primary
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|overridesForHiveConf
argument_list|)
expr_stmt|;
name|replica
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|overridesForHiveConf
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overridesForHiveConf1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.support.concurrency"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.txn.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DummyTxnManager"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.client.capability.check"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|replicaNonAcid
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|overridesForHiveConf1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|classLevelTearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|primary
operator|.
name|close
argument_list|()
expr_stmt|;
name|replica
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Throwable
block|{
name|replV1BackwardCompat
operator|=
name|primary
operator|.
name|getReplivationV1CompatRule
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|primaryDbName
operator|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_"
operator|+
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|replicatedDbName
operator|=
literal|"replicated_"
operator|+
name|primaryDbName
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|primaryDbName
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
name|primaryDbNameExtra
operator|=
name|primaryDbName
operator|+
literal|"_extra"
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|primaryDbNameExtra
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replicaNonAcid
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|primaryDbName
operator|+
literal|"_extra cascade"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcidTablesBootstrap
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapDump
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (id int) clustered by(id) into 3 buckets stored as orc "
operator|+
literal|"tblproperties (\"transactional\"=\"true\")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t1 values(1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t1 values(2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (place string) partitioned by (country string) clustered by(place) "
operator|+
literal|"into 3 buckets stored as orc tblproperties (\"transactional\"=\"true\")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t2 partition(country='us') values ('austin')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t2 partition(country='france') values ('paris')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table t2 add partition(country='italy')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t3 (rank int) tblproperties(\"transactional\"=\"true\", "
operator|+
literal|"\"transactional_properties\"=\"insert_only\")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t3 values(11)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t3 values(22)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t4 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t4 values(111), (222)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t5 (id int) stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t5 values(1111), (2222)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table t5 set tblproperties (\"transactional\"=\"true\")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t5 values(3333)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|,
literal|"t3"
block|,
literal|"t4"
block|,
literal|"t5"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t1 order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t2 order by country"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"france"
block|,
literal|"india"
block|,
literal|"us"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select rank from t3 order by rank"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"11"
block|,
literal|"22"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t4 order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"111"
block|,
literal|"222"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t5 order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1111"
block|,
literal|"2222"
block|,
literal|"3333"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcidTablesBootstrapWithOpenTxnsTimeout
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Open 5 txns
name|HiveConf
name|primaryConf
init|=
name|primary
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|primary
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|OpenTxnsResponse
name|otResp
init|=
name|txnHandler
operator|.
name|openTxns
argument_list|(
operator|new
name|OpenTxnRequest
argument_list|(
literal|5
argument_list|,
literal|"u1"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|txns
init|=
name|otResp
operator|.
name|getTxn_ids
argument_list|()
decl_stmt|;
name|String
name|txnIdRange
init|=
literal|" txn_id>= "
operator|+
name|txns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|" and txn_id<= "
operator|+
name|txns
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|primaryConf
argument_list|,
literal|"select * from TXNS"
argument_list|)
argument_list|,
literal|5
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|primaryConf
argument_list|,
literal|"select count(*) from TXNS where txn_state = 'o' and "
operator|+
name|txnIdRange
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create 2 tables, one partitioned and other not. Also, have both types of full ACID and MM tables.
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (id int) clustered by(id) into 3 buckets stored as orc "
operator|+
literal|"tblproperties (\"transactional\"=\"true\")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t1 values(1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (rank int) partitioned by (name string) tblproperties(\"transactional\"=\"true\", "
operator|+
literal|"\"transactional_properties\"=\"insert_only\")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t2 partition(name='Bob') values(11)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t2 partition(name='Carl') values(10)"
argument_list|)
expr_stmt|;
comment|// Allocate write ids for both tables t1 and t2 for all txns
comment|// t1=5+1(insert) and t2=5+2(insert)
name|AllocateTableWriteIdsRequest
name|rqst
init|=
operator|new
name|AllocateTableWriteIdsRequest
argument_list|(
name|primaryDbName
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setTxnIds
argument_list|(
name|txns
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|allocateTableWriteIds
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setTableName
argument_list|(
literal|"t2"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|allocateTableWriteIds
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|primaryConf
argument_list|,
literal|"select * from TXN_TO_WRITE_ID"
argument_list|)
argument_list|,
literal|6
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|primaryConf
argument_list|,
literal|"select count(*) from TXN_TO_WRITE_ID where t2w_database = '"
operator|+
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"' and t2w_table = 't1'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|primaryConf
argument_list|,
literal|"select * from TXN_TO_WRITE_ID"
argument_list|)
argument_list|,
literal|7
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|primaryConf
argument_list|,
literal|"select count(*) from TXN_TO_WRITE_ID where t2w_database = '"
operator|+
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"' and t2w_table = 't2'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bootstrap dump with open txn timeout as 1s.
name|List
argument_list|<
name|String
argument_list|>
name|withConfigs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'hive.repl.bootstrap.dump.open.txn.timeout'='1s'"
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapDump
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|withConfigs
argument_list|)
decl_stmt|;
comment|// After bootstrap dump, all the opened txns should be aborted. Verify it.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|primaryConf
argument_list|,
literal|"select * from TXNS"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|primaryConf
argument_list|,
literal|"select count(*) from TXNS where txn_state = 'o' and "
operator|+
name|txnIdRange
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|primaryConf
argument_list|,
literal|"select * from TXNS"
argument_list|)
argument_list|,
literal|5
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|primaryConf
argument_list|,
literal|"select count(*) from TXNS where txn_state = 'a' and "
operator|+
name|txnIdRange
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the next write id
name|String
index|[]
name|nextWriteId
init|=
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|primaryConf
argument_list|,
literal|"select nwi_next from NEXT_WRITE_ID where "
operator|+
literal|" nwi_database = '"
operator|+
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"' and nwi_table = 't1'"
argument_list|)
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|nextWriteId
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
literal|7L
argument_list|)
expr_stmt|;
name|nextWriteId
operator|=
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|primaryConf
argument_list|,
literal|"select nwi_next from NEXT_WRITE_ID where "
operator|+
literal|" nwi_database = '"
operator|+
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"' and nwi_table = 't2'"
argument_list|)
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|nextWriteId
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
literal|8L
argument_list|)
expr_stmt|;
comment|// Bootstrap load which should also replicate the aborted write ids on both tables.
name|HiveConf
name|replicaConf
init|=
name|replica
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select rank from t2 order by rank"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"10"
block|,
literal|"11"
block|}
argument_list|)
expr_stmt|;
comment|// Verify if HWM is properly set after REPL LOAD
name|nextWriteId
operator|=
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|replicaConf
argument_list|,
literal|"select nwi_next from NEXT_WRITE_ID where "
operator|+
literal|" nwi_database = '"
operator|+
name|replicatedDbName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"' and nwi_table = 't1'"
argument_list|)
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|nextWriteId
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
literal|7L
argument_list|)
expr_stmt|;
name|nextWriteId
operator|=
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|replicaConf
argument_list|,
literal|"select nwi_next from NEXT_WRITE_ID where "
operator|+
literal|" nwi_database = '"
operator|+
name|replicatedDbName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"' and nwi_table = 't2'"
argument_list|)
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|nextWriteId
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
literal|8L
argument_list|)
expr_stmt|;
comment|// Verify if all the aborted write ids are replicated to the replicated DB
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|replicaConf
argument_list|,
literal|"select * from TXN_TO_WRITE_ID"
argument_list|)
argument_list|,
literal|5
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|replicaConf
argument_list|,
literal|"select count(*) from TXN_TO_WRITE_ID where t2w_database = '"
operator|+
name|replicatedDbName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"' and t2w_table = 't1'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|replicaConf
argument_list|,
literal|"select * from TXN_TO_WRITE_ID"
argument_list|)
argument_list|,
literal|5
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|replicaConf
argument_list|,
literal|"select count(*) from TXN_TO_WRITE_ID where t2w_database = '"
operator|+
name|replicatedDbName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"' and t2w_table = 't2'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify if entries added in COMPACTION_QUEUE for each table/partition
comment|// t1-> 1 entry and t2-> 2 entries (1 per partition)
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|replicaConf
argument_list|,
literal|"select * from COMPACTION_QUEUE"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|replicaConf
argument_list|,
literal|"select count(*) from COMPACTION_QUEUE where cq_database = '"
operator|+
name|replicatedDbName
operator|+
literal|"' and cq_table = 't1'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|replicaConf
argument_list|,
literal|"select * from COMPACTION_QUEUE"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|replicaConf
argument_list|,
literal|"select count(*) from COMPACTION_QUEUE where cq_database = '"
operator|+
name|replicatedDbName
operator|+
literal|"' and cq_table = 't2'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcidTablesBootstrapWithConcurrentWrites
parameter_list|()
throws|throws
name|Throwable
block|{
name|HiveConf
name|primaryConf
init|=
name|primary
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (id int) clustered by(id) into 3 buckets stored as orc "
operator|+
literal|"tblproperties (\"transactional\"=\"true\")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t1 values(1)"
argument_list|)
expr_stmt|;
comment|// Perform concurrent write on the acid table t1 when bootstrap dump in progress. Bootstrap
comment|// won't see the written data but the subsequent incremental repl should see it.
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
name|callerInjectedBehavior
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|CallerArguments
name|args
parameter_list|)
block|{
if|if
condition|(
name|injectionPathCalled
condition|)
block|{
name|nonInjectedPathCalled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Insert another row to t1 from another txn when bootstrap dump in progress.
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Entered new thread"
argument_list|)
expr_stmt|;
name|IDriver
name|driver
init|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|primaryConf
argument_list|)
decl_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|primaryConf
argument_list|)
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|primaryDbName
operator|+
literal|".t1 values(2)"
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
operator|(
name|ret
operator|.
name|getException
argument_list|()
operator|==
literal|null
operator|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Exit new thread success - {}"
argument_list|,
name|success
argument_list|,
name|ret
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created new thread {}"
argument_list|,
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setCallerVerifier
argument_list|(
name|callerInjectedBehavior
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapDump
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bootstrapDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|callerInjectedBehavior
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetCallerVerifier
argument_list|()
expr_stmt|;
comment|// reset the behaviour
block|}
comment|// Bootstrap dump has taken snapshot before concurrent tread performed write. So, it won't see data "2".
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t1 order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
argument_list|)
expr_stmt|;
comment|// Incremental should include the concurrent write of data "2" from another txn.
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t1 order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpenTxnEvent
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// create table will start and coomit the transaction
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key int, value int) PARTITIONED BY (load_date date) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ('transactional'='true')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW TABLES LIKE '"
operator|+
name|tableName
operator|+
literal|"'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-01') VALUES (1, 1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|tableName
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// Test the idempotent behavior of Open and Commit Txn
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbortTxnEvent
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|tableNameFail
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"Fail"
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// this should fail
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|runFailure
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableNameFail
operator|+
literal|" (key int, value int) PARTITIONED BY (load_date date) "
operator|+
literal|"CLUSTERED BY(key) ('transactional'='true')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW TABLES LIKE '"
operator|+
name|tableNameFail
operator|+
literal|"'"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
name|tableNameFail
block|}
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// Test the idempotent behavior of Abort Txn
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTxnEventNonAcid
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replicaNonAcid
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key int, value int) PARTITIONED BY (load_date date) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ('transactional'='true')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW TABLES LIKE '"
operator|+
name|tableName
operator|+
literal|"'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-01') VALUES (1, 1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|tableName
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replicaNonAcid
operator|.
name|runFailure
argument_list|(
literal|"REPL LOAD "
operator|+
name|replicatedDbName
operator|+
literal|" FROM '"
operator|+
name|incrementalDump
operator|.
name|dumpLocation
operator|+
literal|"'"
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcidBootstrapReplLoadRetryAfterFailure
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (id int) clustered by(id) into 3 buckets stored as orc "
operator|+
literal|"tblproperties (\"transactional\"=\"true\")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t1 values(1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (rank int) partitioned by (name string) tblproperties(\"transactional\"=\"true\", "
operator|+
literal|"\"transactional_properties\"=\"insert_only\")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t2 partition(name='bob') values(11)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t2 partition(name='carl') values(10)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple2
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Inject a behavior where REPL LOAD failed when try to load table "t2", it fails.
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
name|callerVerifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|CallerArguments
name|args
parameter_list|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|args
operator|.
name|tblName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - Table: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|tblName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|args
operator|.
name|tblName
operator|.
name|equals
argument_list|(
literal|"t1"
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setCallerVerifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|withConfigs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'hive.repl.approx.max.load.tasks'='1'"
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|resetCallerVerifier
argument_list|()
expr_stmt|;
comment|// reset the behaviour
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"null"
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like t2"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{ }
argument_list|)
expr_stmt|;
comment|// Retry with different dump should fail.
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple2
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
comment|// Verify if no create table on t1. Only table t2 should  be created in retry.
name|callerVerifier
operator|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|CallerArguments
name|args
parameter_list|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setCallerVerifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
comment|// Retry with same dump with which it was already loaded should resume the bootstrap load.
comment|// This time, it completes by adding just constraints for table t4.
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|resetCallerVerifier
argument_list|()
expr_stmt|;
comment|// reset the behaviour
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|run
argument_list|(
literal|"select name from t2 order by name"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bob"
argument_list|,
literal|"carl"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDumpAcidTableWithPartitionDirMissing
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".normal (a int) PARTITIONED BY (part int)"
operator|+
literal|" STORED AS ORC TBLPROPERTIES ('transactional'='true')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|dbName
operator|+
literal|".normal partition (part= 124) values (1)"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|primary
operator|.
name|warehouseRoot
argument_list|,
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|".db"
argument_list|)
decl_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"normal"
argument_list|)
expr_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"part=124"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|primary
operator|.
name|runCommand
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" with ('hive.repl.dump.include.acid.tables' = 'true')"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|ErrorMsg
operator|.
name|FILE_NOT_FOUND
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".normal"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDumpAcidTableWithTableDirMissing
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".normal (a int) "
operator|+
literal|" STORED AS ORC TBLPROPERTIES ('transactional'='true')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|dbName
operator|+
literal|".normal values (1)"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|primary
operator|.
name|warehouseRoot
argument_list|,
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|".db"
argument_list|)
decl_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"normal"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|primary
operator|.
name|runCommand
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" with ('hive.repl.dump.include.acid.tables' = 'true')"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|ErrorMsg
operator|.
name|FILE_NOT_FOUND
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".normal"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcidTableIncrementalReplication
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appendInsert
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendDelete
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendUpdate
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendTruncate
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendInsertIntoFromSelect
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendMerge
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendCreateAsSelect
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendImport
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendInsertOverwrite
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
comment|//appendLoadLocal(selectStmtList, expectedValues);
name|appendInsertUnion
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendMultiStatementTxn
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendMultiStatementTxnUpdateDelete
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|verifyIncrementalLoad
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendInsert
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testInsert"
decl_stmt|;
name|String
name|tableNameMM
init|=
name|tableName
operator|+
literal|"_MM"
decl_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendDelete
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testDelete"
decl_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|deleteRecords
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select count(*) from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendUpdate
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testUpdate"
decl_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|updateRecords
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select value from "
operator|+
name|tableName
operator|+
literal|" order by value"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendTruncate
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testTruncate"
decl_stmt|;
name|String
name|tableNameMM
init|=
name|tableName
operator|+
literal|"_MM"
decl_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|truncateTable
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select count(*) from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|}
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|truncateTable
argument_list|(
name|primaryDbName
argument_list|,
name|tableNameMM
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select count(*) from "
operator|+
name|tableNameMM
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendInsertIntoFromSelect
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testInsertIntoFromSelect"
decl_stmt|;
name|String
name|tableNameMM
init|=
name|tableName
operator|+
literal|"_MM"
decl_stmt|;
name|String
name|tableNameSelect
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_Select"
decl_stmt|;
name|String
name|tableNameSelectMM
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_SelectMM"
decl_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
name|tableNameSelect
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT_SELECT
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameSelect
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
name|tableNameSelectMM
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT_SELECT
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameSelectMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendMerge
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testMerge"
decl_stmt|;
name|String
name|tableNameMerge
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_Merge"
decl_stmt|;
name|insertForMerge
argument_list|(
name|tableName
argument_list|,
name|tableNameMerge
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select last_update_user from "
operator|+
name|tableName
operator|+
literal|" order by last_update_user"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"creation"
block|,
literal|"creation"
block|,
literal|"creation"
block|,
literal|"creation"
block|,
literal|"creation"
block|,
literal|"creation"
block|,
literal|"creation"
block|,
literal|"merge_update"
block|,
literal|"merge_insert"
block|,
literal|"merge_insert"
block|}
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select ID from "
operator|+
name|tableNameMerge
operator|+
literal|" order by ID"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"4"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"8"
block|,
literal|"11"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendCreateAsSelect
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testCreateAsSelect"
decl_stmt|;
name|String
name|tableNameMM
init|=
name|tableName
operator|+
literal|"_MM"
decl_stmt|;
name|String
name|tableNameCTAS
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_CTAS"
decl_stmt|;
name|String
name|tableNameCTASMM
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_CTASMM"
decl_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
name|tableNameCTAS
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_CTAS
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameCTAS
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
name|tableNameCTASMM
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_CTAS
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameCTASMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendImport
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testImport"
decl_stmt|;
name|String
name|tableNameMM
init|=
name|tableName
operator|+
literal|"_MM"
decl_stmt|;
name|String
name|tableNameImport
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_Import"
decl_stmt|;
name|String
name|tableNameImportMM
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_ImportMM"
decl_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
name|tableNameImport
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT_IMPORT
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameImport
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
name|tableNameImportMM
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT_IMPORT
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameImportMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendInsertOverwrite
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testInsertOverwrite"
decl_stmt|;
name|String
name|tableNameOW
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_OW"
decl_stmt|;
name|String
name|tableNameMM
init|=
name|tableName
operator|+
literal|"_MM"
decl_stmt|;
name|String
name|tableNameOWMM
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_OWMM"
decl_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
name|tableNameOW
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT_OVERWRITE
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameOW
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
name|tableNameOWMM
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT_OVERWRITE
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameOWMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
block|}
comment|//TODO: need to check why its failing. Loading to acid table from local path is failing.
specifier|private
name|void
name|appendLoadLocal
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testLoadLocal"
decl_stmt|;
name|String
name|tableNameLL
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_LL"
decl_stmt|;
name|String
name|tableNameMM
init|=
name|tableName
operator|+
literal|"_MM"
decl_stmt|;
name|String
name|tableNameLLMM
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_LLMM"
decl_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
name|tableNameLL
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT_LOADLOCAL
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameLL
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
name|tableNameLLMM
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT_LOADLOCAL
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameLLMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendInsertUnion
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testInsertUnion"
decl_stmt|;
name|String
name|tableNameUnion
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_UNION"
decl_stmt|;
name|String
name|tableNameMM
init|=
name|tableName
operator|+
literal|"_MM"
decl_stmt|;
name|String
name|tableNameUnionMM
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_UNIONMM"
decl_stmt|;
name|String
index|[]
name|resultArray
init|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
decl_stmt|;
name|String
index|[]
name|resultArrayUnion
init|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"5"
block|}
decl_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
name|tableNameUnion
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT_UNION
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
name|resultArray
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameUnion
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
name|resultArrayUnion
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|"_nopart"
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
name|resultArray
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameUnion
operator|+
literal|"_nopart"
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
name|resultArrayUnion
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
name|tableNameUnionMM
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT_UNION
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
name|resultArray
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameUnionMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
name|resultArrayUnion
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameMM
operator|+
literal|"_nopart"
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
name|resultArray
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameUnionMM
operator|+
literal|"_nopart"
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
name|resultArrayUnion
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendMultiStatementTxn
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testMultiStatementTxn"
decl_stmt|;
name|String
index|[]
name|resultArray
init|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
decl_stmt|;
name|String
name|tableNameMM
init|=
name|tableName
operator|+
literal|"_MM"
decl_stmt|;
name|String
name|tableProperty
init|=
literal|"'transactional'='true'"
decl_stmt|;
name|insertIntoDB
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|,
name|tableProperty
argument_list|,
name|resultArray
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|tableProperty
operator|=
name|setMMtableProperty
argument_list|(
name|tableProperty
argument_list|)
expr_stmt|;
name|insertIntoDB
argument_list|(
name|primaryDbName
argument_list|,
name|tableNameMM
argument_list|,
name|tableProperty
argument_list|,
name|resultArray
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select key from "
operator|+
name|tableNameMM
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendMultiStatementTxnUpdateDelete
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testMultiStatementTxnUpdate"
decl_stmt|;
name|String
name|tableNameDelete
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testMultiStatementTxnDelete"
decl_stmt|;
name|String
index|[]
name|resultArray
init|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
decl_stmt|;
name|String
name|tableProperty
init|=
literal|"'transactional'='true'"
decl_stmt|;
name|insertIntoDB
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|,
name|tableProperty
argument_list|,
name|resultArray
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateRecords
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select value from "
operator|+
name|tableName
operator|+
literal|" order by value"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|}
argument_list|)
expr_stmt|;
name|insertIntoDB
argument_list|(
name|primaryDbName
argument_list|,
name|tableNameDelete
argument_list|,
name|tableProperty
argument_list|,
name|resultArray
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|deleteRecords
argument_list|(
name|tableNameDelete
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select count(*) from "
operator|+
name|tableNameDelete
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplCM
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|tableNameMM
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_MM"
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[]
block|{
literal|"5"
block|}
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalDump
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|incrementalDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|truncateTable
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|verifyResultsInReplica
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"select count(*) from "
operator|+
name|tableName
argument_list|,
literal|"select count(*) from "
operator|+
name|tableName
operator|+
literal|"_nopart"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|result
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|insertRecords
argument_list|(
name|tableNameMM
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|incrementalDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|truncateTable
argument_list|(
name|primaryDbName
argument_list|,
name|tableNameMM
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|verifyResultsInReplica
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"select count(*) from "
operator|+
name|tableNameMM
argument_list|,
literal|"select count(*) from "
operator|+
name|tableNameMM
operator|+
literal|"_nopart"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|result
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiDBTxn
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|dbName1
init|=
name|tableName
operator|+
literal|"_db1"
decl_stmt|;
name|String
name|dbName2
init|=
name|tableName
operator|+
literal|"_db2"
decl_stmt|;
name|String
index|[]
name|resultArray
init|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
decl_stmt|;
name|String
name|tableProperty
init|=
literal|"'transactional'='true'"
decl_stmt|;
name|String
name|txnStrStart
init|=
literal|"START TRANSACTION"
decl_stmt|;
name|String
name|txnStrCommit
init|=
literal|"COMMIT"
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalDump
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"alter database default set dbproperties ('repl.source.for' = '1, 2, 3')"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
literal|"`*`"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbName1
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbName2
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName1
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" (key int, value int) PARTITIONED BY (load_date date) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ( "
operator|+
name|tableProperty
operator|+
literal|")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbName1
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW TABLES LIKE '"
operator|+
name|tableName
operator|+
literal|"'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName2
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" (key int, value int) PARTITIONED BY (load_date date) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ( "
operator|+
name|tableProperty
operator|+
literal|")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbName2
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW TABLES LIKE '"
operator|+
name|tableName
operator|+
literal|"'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
name|txnStrStart
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|dbName2
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-02') VALUES (5, 5)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|dbName1
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-01') VALUES (1, 1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|dbName1
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-01') VALUES (2, 2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|dbName2
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-01') VALUES (2, 2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|dbName2
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-02') VALUES (3, 3)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|dbName1
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-02') VALUES (3, 3)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|dbName1
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-03') VALUES (4, 4)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|dbName1
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-02') VALUES (5, 5)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|dbName2
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-01') VALUES (1, 1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|dbName2
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-03') VALUES (4, 4)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|dbName2
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|resultArray
argument_list|)
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|dbName1
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|resultArray
argument_list|)
operator|.
name|run
argument_list|(
name|txnStrCommit
argument_list|)
expr_stmt|;
name|incrementalDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
literal|"`*`"
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// Due to the limitation that we can only have one instance of Persistence Manager Factory in a JVM
comment|// we are not able to create multiple embedded derby instances for two different MetaStore instances.
name|primary
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbName1
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbName2
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
comment|//End of additional steps
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
literal|""
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS default"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
literal|""
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName1
argument_list|)
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|dbName1
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|resultArray
argument_list|)
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|dbName2
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|resultArray
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbName1
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbName2
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyResultsInReplica
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|selectStmtList
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
name|selectStmtList
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|expectedValues
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|WarehouseInstance
operator|.
name|Tuple
name|verifyIncrementalLoad
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|,
name|String
name|lastReplId
parameter_list|)
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|lastReplId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|verifyResultsInReplica
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|verifyResultsInReplica
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
return|return
name|incrementalDump
return|;
block|}
specifier|private
name|void
name|deleteRecords
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"delete from "
operator|+
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select count(*) from "
operator|+
name|tableName
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateRecords
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"update "
operator|+
name|tableName
operator|+
literal|" set value = 100 where key>= 2"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select value from "
operator|+
name|tableName
operator|+
literal|" order by value"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|truncateTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"truncate table "
operator|+
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select count(*) from "
operator|+
name|tableName
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"0"
argument_list|)
operator|.
name|run
argument_list|(
literal|"truncate table "
operator|+
name|tableName
operator|+
literal|"_nopart"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select count(*) from "
operator|+
name|tableName
operator|+
literal|"_nopart"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|WarehouseInstance
operator|.
name|Tuple
name|verifyLoad
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|tableNameOp
parameter_list|,
name|String
name|lastReplId
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
index|[]
name|resultArray
init|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
decl_stmt|;
if|if
condition|(
name|tableNameOp
operator|==
literal|null
condition|)
block|{
return|return
name|verifyIncrementalLoad
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|,
literal|"select key from "
operator|+
name|tableName
operator|+
literal|"_nopart order by key"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|resultArray
argument_list|,
name|resultArray
argument_list|)
argument_list|,
name|lastReplId
argument_list|)
return|;
block|}
return|return
name|verifyIncrementalLoad
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|,
literal|"select key from "
operator|+
name|tableNameOp
operator|+
literal|" order by key"
argument_list|,
literal|"select key from "
operator|+
name|tableName
operator|+
literal|"_nopart"
operator|+
literal|" order by key"
argument_list|,
literal|"select key from "
operator|+
name|tableNameOp
operator|+
literal|"_nopart"
operator|+
literal|" order by key"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|resultArray
argument_list|,
name|resultArray
argument_list|,
name|resultArray
argument_list|,
name|resultArray
argument_list|)
argument_list|,
name|lastReplId
argument_list|)
return|;
block|}
specifier|private
name|void
name|insertIntoDB
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|tableProperty
parameter_list|,
name|String
index|[]
name|resultArray
parameter_list|,
name|boolean
name|isTxn
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|txnStrStart
init|=
literal|"START TRANSACTION"
decl_stmt|;
name|String
name|txnStrCommit
init|=
literal|"COMMIT"
decl_stmt|;
if|if
condition|(
operator|!
name|isTxn
condition|)
block|{
name|txnStrStart
operator|=
literal|"use "
operator|+
name|dbName
expr_stmt|;
comment|//dummy
name|txnStrCommit
operator|=
literal|"use "
operator|+
name|dbName
expr_stmt|;
comment|//dummy
block|}
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key int, value int) PARTITIONED BY (load_date date) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ( "
operator|+
name|tableProperty
operator|+
literal|")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW TABLES LIKE '"
operator|+
name|tableName
operator|+
literal|"'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|"_nopart (key int, value int) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ( "
operator|+
name|tableProperty
operator|+
literal|")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW TABLES LIKE '"
operator|+
name|tableName
operator|+
literal|"_nopart'"
argument_list|)
operator|.
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|tableName
operator|+
literal|" ADD PARTITION (load_date='2016-03-03')"
argument_list|)
operator|.
name|run
argument_list|(
name|txnStrStart
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-01') VALUES (1, 1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-01') VALUES (2, 2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-02') VALUES (3, 3)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-03') VALUES (4, 4)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" partition (load_date='2016-03-02') VALUES (5, 5)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|" order by key"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|resultArray
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|"_nopart (key, value) select key, value from "
operator|+
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|tableName
operator|+
literal|"_nopart"
operator|+
literal|" order by key"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|resultArray
argument_list|)
operator|.
name|run
argument_list|(
name|txnStrCommit
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|insertIntoDB
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|tableProperty
parameter_list|,
name|String
index|[]
name|resultArray
parameter_list|)
throws|throws
name|Throwable
block|{
name|insertIntoDB
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|tableProperty
argument_list|,
name|resultArray
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|insertRecords
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|tableNameOp
parameter_list|,
name|boolean
name|isMMTable
parameter_list|,
name|OperationType
name|opType
parameter_list|)
throws|throws
name|Throwable
block|{
name|insertRecordsIntoDB
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|,
name|tableNameOp
argument_list|,
name|isMMTable
argument_list|,
name|opType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|insertRecordsIntoDB
parameter_list|(
name|String
name|DbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|tableNameOp
parameter_list|,
name|boolean
name|isMMTable
parameter_list|,
name|OperationType
name|opType
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
index|[]
name|resultArray
init|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
decl_stmt|;
name|String
name|tableProperty
init|=
literal|"'transactional'='true'"
decl_stmt|;
if|if
condition|(
name|isMMTable
condition|)
block|{
name|tableProperty
operator|=
name|setMMtableProperty
argument_list|(
name|tableProperty
argument_list|)
expr_stmt|;
block|}
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|DbName
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|opType
condition|)
block|{
case|case
name|REPL_TEST_ACID_INSERT
case|:
name|insertIntoDB
argument_list|(
name|DbName
argument_list|,
name|tableName
argument_list|,
name|tableProperty
argument_list|,
name|resultArray
argument_list|)
expr_stmt|;
name|insertIntoDB
argument_list|(
name|primaryDbNameExtra
argument_list|,
name|tableName
argument_list|,
name|tableProperty
argument_list|,
name|resultArray
argument_list|)
expr_stmt|;
return|return;
case|case
name|REPL_TEST_ACID_INSERT_OVERWRITE
case|:
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableNameOp
operator|+
literal|" (key int, value int) PARTITIONED BY (load_date date) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ( "
operator|+
name|tableProperty
operator|+
literal|" )"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableNameOp
operator|+
literal|" partition (load_date='2016-03-01') VALUES (2, 2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableNameOp
operator|+
literal|" partition (load_date='2016-03-01') VALUES (10, 12)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableNameOp
operator|+
literal|" partition (load_date='2016-03-02') VALUES (11, 1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|tableNameOp
operator|+
literal|" order by key"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"2"
block|,
literal|"10"
block|,
literal|"11"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert overwrite table "
operator|+
name|tableNameOp
operator|+
literal|" select * from "
operator|+
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableNameOp
operator|+
literal|"_nopart (key int, value int) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ( "
operator|+
name|tableProperty
operator|+
literal|" )"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableNameOp
operator|+
literal|"_nopart VALUES (2, 2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableNameOp
operator|+
literal|"_nopart VALUES (10, 12)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableNameOp
operator|+
literal|"_nopart VALUES (11, 1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|tableNameOp
operator|+
literal|"_nopart"
operator|+
literal|" order by key"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"2"
block|,
literal|"10"
block|,
literal|"11"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert overwrite table "
operator|+
name|tableNameOp
operator|+
literal|"_nopart select * from "
operator|+
name|tableName
operator|+
literal|"_nopart"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|tableNameOp
operator|+
literal|"_nopart"
operator|+
literal|" order by key"
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPL_TEST_ACID_INSERT_SELECT
case|:
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableNameOp
operator|+
literal|" (key int, value int) PARTITIONED BY (load_date date) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ( "
operator|+
name|tableProperty
operator|+
literal|" )"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|tableNameOp
operator|+
literal|" partition (load_date) select * from "
operator|+
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableNameOp
operator|+
literal|"_nopart (key int, value int) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ( "
operator|+
name|tableProperty
operator|+
literal|" )"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|tableNameOp
operator|+
literal|"_nopart select * from "
operator|+
name|tableName
operator|+
literal|"_nopart"
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPL_TEST_ACID_INSERT_IMPORT
case|:
name|String
name|path
init|=
literal|"hdfs:///tmp/"
operator|+
name|DbName
operator|+
literal|"/"
decl_stmt|;
name|String
name|exportPath
init|=
literal|"'"
operator|+
name|path
operator|+
name|tableName
operator|+
literal|"/'"
decl_stmt|;
name|String
name|exportPathNoPart
init|=
literal|"'"
operator|+
name|path
operator|+
name|tableName
operator|+
literal|"_nopart/'"
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"export table "
operator|+
name|tableName
operator|+
literal|" to "
operator|+
name|exportPath
argument_list|)
operator|.
name|run
argument_list|(
literal|"import table "
operator|+
name|tableNameOp
operator|+
literal|" from "
operator|+
name|exportPath
argument_list|)
operator|.
name|run
argument_list|(
literal|"export table "
operator|+
name|tableName
operator|+
literal|"_nopart to "
operator|+
name|exportPathNoPart
argument_list|)
operator|.
name|run
argument_list|(
literal|"import table "
operator|+
name|tableNameOp
operator|+
literal|"_nopart from "
operator|+
name|exportPathNoPart
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPL_TEST_ACID_CTAS
case|:
name|primary
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tableNameOp
operator|+
literal|" as select * from "
operator|+
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tableNameOp
operator|+
literal|"_nopart as select * from "
operator|+
name|tableName
operator|+
literal|"_nopart"
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPL_TEST_ACID_INSERT_LOADLOCAL
case|:
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableNameOp
operator|+
literal|" (key int, value int) PARTITIONED BY (load_date date) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ( "
operator|+
name|tableProperty
operator|+
literal|")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW TABLES LIKE '"
operator|+
name|tableNameOp
operator|+
literal|"'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tableNameOp
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT OVERWRITE LOCAL DIRECTORY './test.dat' SELECT a.* FROM "
operator|+
name|tableName
operator|+
literal|" a"
argument_list|)
operator|.
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH './test.dat' OVERWRITE INTO TABLE "
operator|+
name|tableNameOp
operator|+
literal|" PARTITION (load_date='2008-08-15')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableNameOp
operator|+
literal|"_nopart (key int, value int) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ( "
operator|+
name|tableProperty
operator|+
literal|")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW TABLES LIKE '"
operator|+
name|tableNameOp
operator|+
literal|"_nopart'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tableNameOp
operator|+
literal|"_nopart"
argument_list|)
operator|.
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH './test.dat' OVERWRITE INTO TABLE "
operator|+
name|tableNameOp
operator|+
literal|"_nopart"
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPL_TEST_ACID_INSERT_UNION
case|:
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableNameOp
operator|+
literal|" (key int, value int) PARTITIONED BY (load_date date) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ( "
operator|+
name|tableProperty
operator|+
literal|")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW TABLES LIKE '"
operator|+
name|tableNameOp
operator|+
literal|"'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tableNameOp
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert overwrite table "
operator|+
name|tableNameOp
operator|+
literal|" partition (load_date) select * from "
operator|+
name|tableName
operator|+
literal|" union all select * from "
operator|+
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableNameOp
operator|+
literal|"_nopart (key int, value int) "
operator|+
literal|"CLUSTERED BY(key) INTO 3 BUCKETS STORED AS ORC TBLPROPERTIES ( "
operator|+
name|tableProperty
operator|+
literal|")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert overwrite table "
operator|+
name|tableNameOp
operator|+
literal|"_nopart select * from "
operator|+
name|tableName
operator|+
literal|"_nopart union all select * from "
operator|+
name|tableName
operator|+
literal|"_nopart"
argument_list|)
expr_stmt|;
name|resultArray
operator|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
expr_stmt|;
break|break;
default|default:
return|return;
block|}
name|primary
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|tableNameOp
operator|+
literal|" order by key"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|resultArray
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"select key from "
operator|+
name|tableNameOp
operator|+
literal|"_nopart"
operator|+
literal|" order by key"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|resultArray
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|setMMtableProperty
parameter_list|(
name|String
name|tableProperty
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|tableProperty
operator|.
name|concat
argument_list|(
literal|", 'transactional_properties' = 'insert_only'"
argument_list|)
return|;
block|}
specifier|private
name|void
name|insertForMerge
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|tableNameMerge
parameter_list|,
name|boolean
name|isMMTable
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableProperty
init|=
literal|"'transactional'='true'"
decl_stmt|;
if|if
condition|(
name|isMMTable
condition|)
block|{
name|tableProperty
operator|=
name|setMMtableProperty
argument_list|(
name|tableProperty
argument_list|)
expr_stmt|;
block|}
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|"( ID int, TranValue string, last_update_user string) PARTITIONED BY "
operator|+
literal|"(tran_date string) CLUSTERED BY (ID) into 5 buckets STORED AS ORC TBLPROPERTIES "
operator|+
literal|" ( "
operator|+
name|tableProperty
operator|+
literal|" )"
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW TABLES LIKE '"
operator|+
name|tableName
operator|+
literal|"'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableNameMerge
operator|+
literal|" ( ID int, TranValue string, tran_date string) STORED AS ORC "
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW TABLES LIKE '"
operator|+
name|tableNameMerge
operator|+
literal|"'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tableNameMerge
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" PARTITION (tran_date) VALUES (1, 'value_01', 'creation', '20170410'),"
operator|+
literal|" (2, 'value_02', 'creation', '20170410'), (3, 'value_03', 'creation', '20170410'), "
operator|+
literal|" (4, 'value_04', 'creation', '20170410'), (5, 'value_05', 'creation', '20170413'), "
operator|+
literal|" (6, 'value_06', 'creation', '20170413'), (7, 'value_07', 'creation', '20170413'),  "
operator|+
literal|" (8, 'value_08', 'creation', '20170413'), (9, 'value_09', 'creation', '20170413'), "
operator|+
literal|" (10, 'value_10','creation', '20170413')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select ID from "
operator|+
name|tableName
operator|+
literal|" order by ID"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|,
literal|"10"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableNameMerge
operator|+
literal|" VALUES (1, 'value_01', '20170410'), "
operator|+
literal|" (4, NULL, '20170410'), (7, 'value_77777', '20170413'), "
operator|+
literal|" (8, NULL, '20170413'), (8, 'value_08', '20170415'), "
operator|+
literal|"(11, 'value_11', '20170415')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select ID from "
operator|+
name|tableNameMerge
operator|+
literal|" order by ID"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"4"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"8"
block|,
literal|"11"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"MERGE INTO "
operator|+
name|tableName
operator|+
literal|" AS T USING "
operator|+
name|tableNameMerge
operator|+
literal|" AS S ON T.ID = S.ID and"
operator|+
literal|" T.tran_date = S.tran_date WHEN MATCHED AND (T.TranValue != S.TranValue AND S.TranValue "
operator|+
literal|" IS NOT NULL) THEN UPDATE SET TranValue = S.TranValue, last_update_user = "
operator|+
literal|" 'merge_update' WHEN MATCHED AND S.TranValue IS NULL THEN DELETE WHEN NOT MATCHED "
operator|+
literal|" THEN INSERT VALUES (S.ID, S.TranValue,'merge_insert', S.tran_date)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select last_update_user from "
operator|+
name|tableName
operator|+
literal|" order by last_update_user"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"creation"
block|,
literal|"creation"
block|,
literal|"creation"
block|,
literal|"creation"
block|,
literal|"creation"
block|,
literal|"creation"
block|,
literal|"creation"
block|,
literal|"merge_update"
block|,
literal|"merge_insert"
block|,
literal|"merge_insert"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

