begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnCommonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|listener
operator|.
name|DbNotificationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|internal
operator|.
name|Log
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_class
specifier|public
class|class
name|TestCachedStoreUpdateUsingEvents
block|{
specifier|private
name|RawStore
name|rawStore
decl_stmt|;
specifier|private
name|SharedCache
name|sharedCache
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|HiveMetaStore
operator|.
name|HMSHandler
name|hmsHandler
decl_stmt|;
specifier|private
name|String
index|[]
name|colType
init|=
operator|new
name|String
index|[]
block|{
literal|"double"
block|,
literal|"string"
block|}
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Disable memory estimation for this test class
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|TRANSACTIONAL_EVENT_LISTENERS
argument_list|,
name|DbNotificationListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|RAW_STORE_IMPL
argument_list|,
literal|"org.apache.hadoop.hive.metastore.cache.CachedStore"
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_CACHE_CAN_USE_EVENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_TXN_STATS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|AGGREGATE_STATS_CACHE_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hmsHandler
operator|=
operator|new
name|HiveMetaStore
operator|.
name|HMSHandler
argument_list|(
literal|"testCachedStore"
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rawStore
operator|=
operator|new
name|ObjectStore
argument_list|()
expr_stmt|;
name|rawStore
operator|.
name|setConf
argument_list|(
name|hmsHandler
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|sharedCache
operator|=
name|CachedStore
operator|.
name|getSharedCache
argument_list|()
expr_stmt|;
comment|// Stop the CachedStore cache update service. We'll start it explicitly to control the test
name|CachedStore
operator|.
name|stopCacheUpdateService
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Create the 'hive' catalog with new warehouse directory
name|HiveMetaStore
operator|.
name|HMSHandler
operator|.
name|createDefaultCatalog
argument_list|(
name|rawStore
argument_list|,
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Database
name|createTestDb
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|dbOwner
parameter_list|)
block|{
name|String
name|dbDescription
init|=
name|dbName
decl_stmt|;
name|String
name|dbLocation
init|=
literal|"file:/tmp"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
name|dbDescription
argument_list|,
name|dbLocation
argument_list|,
name|dbParams
argument_list|)
decl_stmt|;
name|db
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|db
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|db
operator|.
name|setCatalogName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
return|return
name|db
return|;
block|}
specifier|private
name|Table
name|createTestTblParam
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|tblOwner
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ptnCols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblParams
parameter_list|)
block|{
name|String
name|serdeLocation
init|=
literal|"file:/tmp"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|SerDeInfo
name|serdeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
name|serdeLocation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|,
name|serdeInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|serdeParams
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setInputFormat
argument_list|(
name|OrcInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|OrcOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
name|tblOwner
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|ptnCols
argument_list|,
name|tblParams
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|Table
name|createTestTbl
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|tblOwner
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ptnCols
parameter_list|)
block|{
return|return
name|createTestTblParam
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tblOwner
argument_list|,
name|cols
argument_list|,
name|ptnCols
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|compareTables
parameter_list|(
name|Table
name|tbl1
parameter_list|,
name|Table
name|tbl2
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl1
operator|.
name|getSd
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl1
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl1
operator|.
name|getCatName
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl1
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl1
operator|.
name|getCreationMetadata
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getCreationMetadata
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl1
operator|.
name|getId
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|comparePartitions
parameter_list|(
name|Partition
name|part1
parameter_list|,
name|Partition
name|part2
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|part1
operator|.
name|getParameters
argument_list|()
argument_list|,
name|part2
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|part1
operator|.
name|getCatName
argument_list|()
argument_list|,
name|part2
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|part1
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|part2
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|part1
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|part1
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|part2
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|part1
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|part2
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDatabaseOpsForUpdateUsingEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|RawStore
name|rawStore
init|=
name|hmsHandler
operator|.
name|getMS
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|rawStore
argument_list|)
expr_stmt|;
comment|// Add a db via rawStore
name|String
name|dbName
init|=
literal|"testDatabaseOps"
decl_stmt|;
name|String
name|dbOwner
init|=
literal|"user1"
decl_stmt|;
name|Database
name|db
init|=
name|createTestDb
argument_list|(
name|dbName
argument_list|,
name|dbOwner
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_database
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
comment|// Read database via CachedStore
name|Database
name|dbRead
init|=
name|sharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
comment|// Add another db via rawStore
specifier|final
name|String
name|dbName1
init|=
literal|"testDatabaseOps1"
decl_stmt|;
name|Database
name|db1
init|=
name|createTestDb
argument_list|(
name|dbName1
argument_list|,
name|dbOwner
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_database
argument_list|(
name|db1
argument_list|)
expr_stmt|;
name|db1
operator|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName1
argument_list|)
expr_stmt|;
comment|// Read database via CachedStore
name|dbRead
operator|=
name|sharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db1
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
comment|// Alter the db via rawStore (can only alter owner or parameters)
name|dbOwner
operator|=
literal|"user2"
expr_stmt|;
name|Database
name|newdb
init|=
operator|new
name|Database
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|newdb
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|alter_database
argument_list|(
name|dbName
argument_list|,
name|newdb
argument_list|)
expr_stmt|;
name|newdb
operator|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
comment|// Read db via cachedStore
name|dbRead
operator|=
name|sharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newdb
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
comment|// Add another db via rawStore
specifier|final
name|String
name|dbName2
init|=
literal|"testDatabaseOps2"
decl_stmt|;
name|Database
name|db2
init|=
name|createTestDb
argument_list|(
name|dbName2
argument_list|,
name|dbOwner
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_database
argument_list|(
name|db2
argument_list|)
expr_stmt|;
name|db2
operator|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName2
argument_list|)
expr_stmt|;
comment|// Alter db "testDatabaseOps" via rawStore
name|dbOwner
operator|=
literal|"user1"
expr_stmt|;
name|newdb
operator|=
operator|new
name|Database
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|newdb
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|alter_database
argument_list|(
name|dbName
argument_list|,
name|newdb
argument_list|)
expr_stmt|;
name|newdb
operator|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
comment|// Drop db "testDatabaseOps1" via rawStore
name|Database
name|dropDb
init|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName1
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|drop_database
argument_list|(
name|dbName1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Read the newly added db via CachedStore
name|dbRead
operator|=
name|sharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db2
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
comment|// Read the altered db via CachedStore (altered user from "user2" to "user1")
name|dbRead
operator|=
name|sharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newdb
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
comment|// Try to read the dropped db after cache update
name|dbRead
operator|=
name|sharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
comment|// Clean up
name|hmsHandler
operator|.
name|drop_database
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|drop_database
argument_list|(
name|dbName2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|getDatabaseCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sharedCache
operator|.
name|clearTableCache
argument_list|()
expr_stmt|;
name|sharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableOpsForUpdateUsingEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|lastEventId
init|=
operator|-
literal|1
decl_stmt|;
name|RawStore
name|rawStore
init|=
name|hmsHandler
operator|.
name|getMS
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|rawStore
argument_list|)
expr_stmt|;
comment|// Add a db via rawStore
name|String
name|dbName
init|=
literal|"test_table_ops"
decl_stmt|;
name|String
name|dbOwner
init|=
literal|"user1"
decl_stmt|;
name|Database
name|db
init|=
name|createTestDb
argument_list|(
name|dbName
argument_list|,
name|dbOwner
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_database
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
comment|// Add a table via rawStore
name|String
name|tblName
init|=
literal|"tbl"
decl_stmt|;
name|String
name|tblOwner
init|=
literal|"user1"
decl_stmt|;
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"integer column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"string"
argument_list|,
literal|"string column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col1
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ptnCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|createTestTbl
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tblOwner
argument_list|,
name|cols
argument_list|,
name|ptnCols
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_table
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// Read database, table via CachedStore
name|Database
name|dbRead
init|=
name|sharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
name|Table
name|tblRead
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|compareTables
argument_list|(
name|tblRead
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
comment|// Add a new table via rawStore
name|String
name|tblName2
init|=
literal|"tbl2"
decl_stmt|;
name|Table
name|tbl2
init|=
name|createTestTbl
argument_list|(
name|dbName
argument_list|,
name|tblName2
argument_list|,
name|tblOwner
argument_list|,
name|cols
argument_list|,
name|ptnCols
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_table
argument_list|(
name|tbl2
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName2
argument_list|)
expr_stmt|;
comment|// Alter table "tbl" via rawStore
name|tblOwner
operator|=
literal|"role1"
expr_stmt|;
name|Table
name|newTable
init|=
operator|new
name|Table
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|newTable
operator|.
name|setOwner
argument_list|(
name|tblOwner
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
name|newTable
operator|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Owner of the table did not change."
argument_list|,
name|tblOwner
argument_list|,
name|newTable
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Owner type of the table did not change"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|newTable
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Drop table "tbl2" via rawStore
name|hmsHandler
operator|.
name|drop_table
argument_list|(
name|dbName
argument_list|,
name|tblName2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Read the altered "tbl" via CachedStore
name|tblRead
operator|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|compareTables
argument_list|(
name|tblRead
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
comment|// Try to read the dropped "tbl2" via CachedStore (should throw exception)
name|tblRead
operator|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|tblRead
argument_list|)
expr_stmt|;
comment|// Clean up
name|hmsHandler
operator|.
name|drop_database
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tblRead
operator|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|tblRead
argument_list|)
expr_stmt|;
name|tblRead
operator|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|tblRead
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|getDatabaseCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sharedCache
operator|.
name|clearTableCache
argument_list|()
expr_stmt|;
name|sharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionOpsForUpdateUsingEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|lastEventId
init|=
operator|-
literal|1
decl_stmt|;
name|RawStore
name|rawStore
init|=
name|hmsHandler
operator|.
name|getMS
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|rawStore
argument_list|)
expr_stmt|;
comment|// Add a db via rawStore
name|String
name|dbName
init|=
literal|"test_partition_ops"
decl_stmt|;
name|String
name|dbOwner
init|=
literal|"user1"
decl_stmt|;
name|Database
name|db
init|=
name|createTestDb
argument_list|(
name|dbName
argument_list|,
name|dbOwner
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_database
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
comment|// Add a table via rawStore
name|String
name|tblName
init|=
literal|"tbl"
decl_stmt|;
name|String
name|tblOwner
init|=
literal|"user1"
decl_stmt|;
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"integer column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"string"
argument_list|,
literal|"string column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col1
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col2
argument_list|)
expr_stmt|;
name|FieldSchema
name|ptnCol1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"part1"
argument_list|,
literal|"string"
argument_list|,
literal|"string partition column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ptnCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|ptnCols
operator|.
name|add
argument_list|(
name|ptnCol1
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|createTestTbl
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tblOwner
argument_list|,
name|cols
argument_list|,
name|ptnCols
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_table
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
specifier|final
name|String
name|ptnColVal1
init|=
literal|"aaa"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Partition
name|ptn1
init|=
operator|new
name|Partition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|ptn1
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|add_partition
argument_list|(
name|ptn1
argument_list|)
expr_stmt|;
name|ptn1
operator|=
name|rawStore
operator|.
name|getPartition
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|ptnColVal2
init|=
literal|"bbb"
decl_stmt|;
name|Partition
name|ptn2
init|=
operator|new
name|Partition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal2
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|ptn2
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|add_partition
argument_list|(
name|ptn2
argument_list|)
expr_stmt|;
name|ptn2
operator|=
name|rawStore
operator|.
name|getPartition
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Read database, table, partition via CachedStore
name|Database
name|dbRead
init|=
name|sharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
name|Table
name|tblRead
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|tblName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|compareTables
argument_list|(
name|tbl
argument_list|,
name|tblRead
argument_list|)
expr_stmt|;
name|Partition
name|ptn1Read
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|tblName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1
argument_list|)
argument_list|)
decl_stmt|;
name|comparePartitions
argument_list|(
name|ptn1
argument_list|,
name|ptn1Read
argument_list|)
expr_stmt|;
name|Partition
name|ptn2Read
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|tblName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal2
argument_list|)
argument_list|)
decl_stmt|;
name|comparePartitions
argument_list|(
name|ptn2
argument_list|,
name|ptn2Read
argument_list|)
expr_stmt|;
comment|// Add a new partition via rawStore
specifier|final
name|String
name|ptnColVal3
init|=
literal|"ccc"
decl_stmt|;
name|Partition
name|ptn3
init|=
operator|new
name|Partition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal3
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|ptn3
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|add_partition
argument_list|(
name|ptn3
argument_list|)
expr_stmt|;
name|ptn3
operator|=
name|rawStore
operator|.
name|getPartition
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Alter an existing partition ("aaa") via rawStore
name|ptn1
operator|=
name|rawStore
operator|.
name|getPartition
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|ptnColVal1Alt
init|=
literal|"aaa"
decl_stmt|;
name|Partition
name|ptn1Atl
init|=
operator|new
name|Partition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1Alt
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|ptn1Atl
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|alter_partitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptn1Atl
argument_list|)
argument_list|)
expr_stmt|;
name|ptn1Atl
operator|=
name|rawStore
operator|.
name|getPartition
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1Alt
argument_list|)
argument_list|)
expr_stmt|;
comment|// Drop an existing partition ("bbb") via rawStore
name|Partition
name|ptnDrop
init|=
name|rawStore
operator|.
name|getPartition
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal2
argument_list|)
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|drop_partition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Read the newly added partition via CachedStore
name|Partition
name|ptnRead
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal3
argument_list|)
argument_list|)
decl_stmt|;
name|comparePartitions
argument_list|(
name|ptn3
argument_list|,
name|ptnRead
argument_list|)
expr_stmt|;
comment|// Read the altered partition via CachedStore
name|ptnRead
operator|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1Alt
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ptn1Atl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|ptnRead
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|ptnRead
operator|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ptnRead
argument_list|)
expr_stmt|;
comment|// Drop table "tbl" via rawStore, it should remove the partition also
name|hmsHandler
operator|.
name|drop_table
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ptnRead
operator|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1Alt
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ptnRead
argument_list|)
expr_stmt|;
name|ptnRead
operator|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ptnRead
argument_list|)
expr_stmt|;
comment|// Clean up
name|rawStore
operator|.
name|dropDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|getDatabaseCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sharedCache
operator|.
name|clearTableCache
argument_list|()
expr_stmt|;
name|sharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateTableColStats
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
index|[]
name|colName
parameter_list|,
name|double
name|highValue
parameter_list|,
name|double
name|avgColLen
parameter_list|,
name|boolean
name|isTxnTable
parameter_list|)
throws|throws
name|Throwable
block|{
name|long
name|writeId
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|validWriteIds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isTxnTable
condition|)
block|{
name|writeId
operator|=
name|allocateWriteIds
argument_list|(
name|allocateTxns
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
expr_stmt|;
name|validWriteIds
operator|=
name|getValidWriteIds
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setIsTblLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|colStats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|colStats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setStatsObj
argument_list|(
name|getStatsObjects
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|highValue
argument_list|,
name|avgColLen
argument_list|)
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setEngine
argument_list|(
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
expr_stmt|;
name|SetPartitionsStatsRequest
name|setTblColStat
init|=
operator|new
name|SetPartitionsStatsRequest
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|colStats
argument_list|)
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
decl_stmt|;
name|setTblColStat
operator|.
name|setWriteId
argument_list|(
name|writeId
argument_list|)
expr_stmt|;
name|setTblColStat
operator|.
name|setValidWriteIdList
argument_list|(
name|validWriteIds
argument_list|)
expr_stmt|;
comment|// write stats objs persistently
name|hmsHandler
operator|.
name|update_table_column_statistics_req
argument_list|(
name|setTblColStat
argument_list|)
expr_stmt|;
name|validateTablePara
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|colStatsCache
init|=
name|sharedCache
operator|.
name|getTableColStatsFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|validWriteIds
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStatsCache
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColName
argument_list|()
argument_list|,
name|colName
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyStatDouble
argument_list|(
name|colStatsCache
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|colName
index|[
literal|0
index|]
argument_list|,
name|highValue
argument_list|)
expr_stmt|;
name|colStatsCache
operator|=
name|sharedCache
operator|.
name|getTableColStatsFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|colName
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|validWriteIds
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStatsCache
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColName
argument_list|()
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyStatString
argument_list|(
name|colStatsCache
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|,
name|avgColLen
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updatePartColStats
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|boolean
name|isTxnTable
parameter_list|,
name|String
index|[]
name|colName
parameter_list|,
name|String
name|partName
parameter_list|,
name|double
name|highValue
parameter_list|,
name|double
name|avgColLen
parameter_list|)
throws|throws
name|Throwable
block|{
name|long
name|writeId
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|validWriteIds
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|txnIds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isTxnTable
condition|)
block|{
name|txnIds
operator|=
name|allocateTxns
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writeId
operator|=
name|allocateWriteIds
argument_list|(
name|txnIds
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
expr_stmt|;
name|validWriteIds
operator|=
name|getValidWriteIds
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setIsTblLevel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|colStats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|colStats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setStatsObj
argument_list|(
name|getStatsObjects
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|highValue
argument_list|,
name|avgColLen
argument_list|)
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setEngine
argument_list|(
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
expr_stmt|;
name|SetPartitionsStatsRequest
name|setTblColStat
init|=
operator|new
name|SetPartitionsStatsRequest
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|colStats
argument_list|)
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
decl_stmt|;
name|setTblColStat
operator|.
name|setWriteId
argument_list|(
name|writeId
argument_list|)
expr_stmt|;
name|setTblColStat
operator|.
name|setValidWriteIdList
argument_list|(
name|validWriteIds
argument_list|)
expr_stmt|;
comment|// write stats objs persistently
name|hmsHandler
operator|.
name|update_partition_column_statistics_req
argument_list|(
name|setTblColStat
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTxnTable
condition|)
block|{
name|CommitTxnRequest
name|rqst
init|=
operator|new
name|CommitTxnRequest
argument_list|(
name|txnIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|commit_txn
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|writeId
operator|=
name|allocateWriteIds
argument_list|(
name|allocateTxns
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
expr_stmt|;
name|validWriteIds
operator|=
name|getValidWriteIds
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitionColumnStatistics"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|statRowStore
init|=
name|rawStore
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partName
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|,
name|validWriteIds
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
name|verifyStatString
argument_list|(
name|statRowStore
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|,
name|avgColLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTxnTable
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statRowStore
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isIsStatsCompliant
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statRowStore
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isIsStatsCompliant
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|statSharedCache
init|=
name|sharedCache
operator|.
name|getPartitionColStatsListFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partName
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|validWriteIds
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|verifyStatString
argument_list|(
name|statSharedCache
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|,
name|avgColLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTxnTable
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statSharedCache
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isIsStatsCompliant
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statSharedCache
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isIsStatsCompliant
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|SharedCache
operator|.
name|ColumStatsWithWriteId
name|statPartCache
init|=
name|sharedCache
operator|.
name|getPartitionColStatsFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CachedStore
operator|.
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|,
name|colName
index|[
literal|0
index|]
argument_list|,
name|validWriteIds
argument_list|)
decl_stmt|;
name|verifyStatDouble
argument_list|(
name|statPartCache
operator|.
name|getColumnStatisticsObj
argument_list|()
argument_list|,
name|colName
index|[
literal|0
index|]
argument_list|,
name|highValue
argument_list|)
expr_stmt|;
name|statPartCache
operator|=
name|sharedCache
operator|.
name|getPartitionColStatsFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CachedStore
operator|.
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|,
name|validWriteIds
argument_list|)
expr_stmt|;
name|verifyStatString
argument_list|(
name|statPartCache
operator|.
name|getColumnStatisticsObj
argument_list|()
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|,
name|avgColLen
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getStatsObjects
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
index|[]
name|colName
parameter_list|,
name|double
name|highValue
parameter_list|,
name|double
name|avgColLen
parameter_list|)
throws|throws
name|Throwable
block|{
name|double
name|lowValue
init|=
literal|50000.21
decl_stmt|;
name|long
name|numNulls
init|=
literal|3
decl_stmt|;
name|long
name|numDVs
init|=
literal|22
decl_stmt|;
name|long
name|maxColLen
init|=
literal|102
decl_stmt|;
name|boolean
name|isTblLevel
init|=
literal|true
decl_stmt|;
name|String
name|partName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setIsTblLevel
argument_list|(
name|isTblLevel
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|statsObj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|statsObj
operator|.
name|setColName
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setColType
argument_list|(
name|colType
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|statsData
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|DoubleColumnStatsData
name|numericStats
init|=
operator|new
name|DoubleColumnStatsData
argument_list|()
decl_stmt|;
name|statsData
operator|.
name|setDoubleStats
argument_list|(
name|numericStats
argument_list|)
expr_stmt|;
name|statsData
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|setHighValue
argument_list|(
name|highValue
argument_list|)
expr_stmt|;
name|statsData
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|setLowValue
argument_list|(
name|lowValue
argument_list|)
expr_stmt|;
name|statsData
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|setNumDVs
argument_list|(
name|numDVs
argument_list|)
expr_stmt|;
name|statsData
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|setNumNulls
argument_list|(
name|numNulls
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setStatsData
argument_list|(
name|statsData
argument_list|)
expr_stmt|;
name|statsObjs
operator|.
name|add
argument_list|(
name|statsObj
argument_list|)
expr_stmt|;
name|statsObj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|statsObj
operator|.
name|setColName
argument_list|(
name|colName
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setColType
argument_list|(
name|colType
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|statsData
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|StringColumnStatsData
name|stringStats
init|=
operator|new
name|StringColumnStatsData
argument_list|()
decl_stmt|;
name|statsData
operator|.
name|setStringStats
argument_list|(
name|stringStats
argument_list|)
expr_stmt|;
name|statsData
operator|.
name|getStringStats
argument_list|()
operator|.
name|setAvgColLen
argument_list|(
name|avgColLen
argument_list|)
expr_stmt|;
name|statsData
operator|.
name|getStringStats
argument_list|()
operator|.
name|setMaxColLen
argument_list|(
name|maxColLen
argument_list|)
expr_stmt|;
name|statsData
operator|.
name|getStringStats
argument_list|()
operator|.
name|setNumDVs
argument_list|(
name|numDVs
argument_list|)
expr_stmt|;
name|statsData
operator|.
name|getStringStats
argument_list|()
operator|.
name|setNumNulls
argument_list|(
name|numNulls
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setStatsData
argument_list|(
name|statsData
argument_list|)
expr_stmt|;
name|statsObjs
operator|.
name|add
argument_list|(
name|statsObj
argument_list|)
expr_stmt|;
return|return
name|statsObjs
return|;
block|}
specifier|private
name|void
name|verifyStatDouble
parameter_list|(
name|ColumnStatisticsObj
name|colStats
parameter_list|,
name|String
name|colName
parameter_list|,
name|double
name|highValue
parameter_list|)
block|{
name|double
name|lowValue
init|=
literal|50000.21
decl_stmt|;
name|long
name|numNulls
init|=
literal|3
decl_stmt|;
name|long
name|numDVs
init|=
literal|22
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStats
operator|.
name|getColName
argument_list|()
argument_list|,
name|colName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStats
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|lowValue
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStats
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|highValue
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStats
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|numNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStats
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|numDVs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyStatString
parameter_list|(
name|ColumnStatisticsObj
name|colStats
parameter_list|,
name|String
name|colName
parameter_list|,
name|double
name|avgColLen
parameter_list|)
block|{
name|long
name|numNulls
init|=
literal|3
decl_stmt|;
name|long
name|numDVs
init|=
literal|22
decl_stmt|;
name|long
name|maxColLen
init|=
literal|102
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStats
operator|.
name|getColName
argument_list|()
argument_list|,
name|colName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStats
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
name|maxColLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStats
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
name|avgColLen
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStats
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|numNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStats
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|numDVs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyStat
parameter_list|(
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
parameter_list|,
name|String
index|[]
name|colName
parameter_list|,
name|double
name|highValue
parameter_list|,
name|double
name|avgColLen
parameter_list|)
block|{
comment|//verifyStatDouble(colStats.get(0), colName[0], highValue);
name|verifyStatString
argument_list|(
name|colStats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|,
name|avgColLen
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpBeforeTest
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
index|[]
name|colName
parameter_list|,
name|boolean
name|isTxnTable
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|dbOwner
init|=
literal|"user1"
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|rawStore
argument_list|)
expr_stmt|;
comment|// Add a db via rawStore
name|Database
name|db
init|=
name|createTestDb
argument_list|(
name|dbName
argument_list|,
name|dbOwner
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_database
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|tblName
operator|!=
literal|null
condition|)
block|{
name|createTestTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|isTxnTable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createTestTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
index|[]
name|colName
parameter_list|,
name|boolean
name|isTxnTable
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Add a table via rawStore
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|,
literal|"int"
argument_list|,
literal|"integer column"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|colName
index|[
literal|1
index|]
argument_list|,
literal|"string"
argument_list|,
literal|"string column"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"test_param_1"
argument_list|,
literal|"hi"
argument_list|)
expr_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"test_param_2"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTxnTable
condition|)
block|{
name|tableParams
operator|.
name|put
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|String
name|tblOwner
init|=
literal|"testowner"
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ptnCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|ptnCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|"string partition column"
argument_list|)
argument_list|)
expr_stmt|;
name|ptnCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"hr"
argument_list|,
literal|"int"
argument_list|,
literal|"integer partition column"
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|createTestTblParam
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tblOwner
argument_list|,
name|cols
argument_list|,
literal|null
argument_list|,
name|tableParams
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|create_table
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTableWithPart
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
index|[]
name|colName
parameter_list|,
name|boolean
name|isTxnTbl
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|,
name|colType
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|,
name|colType
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"test_param_1"
argument_list|,
literal|"hi"
argument_list|)
expr_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"test_param_2"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTxnTbl
condition|)
block|{
name|tableParams
operator|.
name|put
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|tableParams
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|null
argument_list|,
literal|"orc"
argument_list|,
literal|"orc"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|tableParams
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setInputFormat
argument_list|(
name|OrcInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|OrcOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|tableParams
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|create_table
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partVals1
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partVals2
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|partParams
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|EnvironmentContext
name|environmentContext
init|=
operator|new
name|EnvironmentContext
argument_list|()
decl_stmt|;
name|environmentContext
operator|.
name|putToProperties
argument_list|(
name|StatsSetupConst
operator|.
name|STATS_GENERATED
argument_list|,
name|StatsSetupConst
operator|.
name|TASK
argument_list|)
expr_stmt|;
name|Partition
name|ptn1
init|=
operator|new
name|Partition
argument_list|(
name|partVals1
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|ptn1
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|add_partition_with_environment_context
argument_list|(
name|ptn1
argument_list|,
name|environmentContext
argument_list|)
expr_stmt|;
name|Partition
name|ptn2
init|=
operator|new
name|Partition
argument_list|(
name|partVals2
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|ptn2
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|add_partition_with_environment_context
argument_list|(
name|ptn2
argument_list|,
name|environmentContext
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|allocateTxns
parameter_list|(
name|int
name|numTxns
parameter_list|)
throws|throws
name|Throwable
block|{
name|OpenTxnRequest
name|openTxnRequest
init|=
operator|new
name|OpenTxnRequest
argument_list|(
literal|1
argument_list|,
literal|"user"
argument_list|,
literal|"host"
argument_list|)
decl_stmt|;
return|return
name|hmsHandler
operator|.
name|open_txns
argument_list|(
name|openTxnRequest
argument_list|)
operator|.
name|getTxn_ids
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|TxnToWriteId
argument_list|>
name|allocateWriteIds
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|txnIds
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|Throwable
block|{
name|AllocateTableWriteIdsRequest
name|allocateTableWriteIdsRequest
init|=
operator|new
name|AllocateTableWriteIdsRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|allocateTableWriteIdsRequest
operator|.
name|setTxnIds
argument_list|(
name|txnIds
argument_list|)
expr_stmt|;
return|return
name|hmsHandler
operator|.
name|allocate_table_write_ids
argument_list|(
name|allocateTableWriteIdsRequest
argument_list|)
operator|.
name|getTxnToWriteIds
argument_list|()
return|;
block|}
specifier|private
name|String
name|getValidWriteIds
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|Throwable
block|{
name|GetValidWriteIdsRequest
name|validWriteIdsRequest
init|=
operator|new
name|GetValidWriteIdsRequest
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TableName
operator|.
name|getDbTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|GetValidWriteIdsResponse
name|validWriteIdsResponse
init|=
name|hmsHandler
operator|.
name|get_valid_write_ids
argument_list|(
name|validWriteIdsRequest
argument_list|)
decl_stmt|;
return|return
name|TxnCommonUtils
operator|.
name|createValidReaderWriteIdList
argument_list|(
name|validWriteIdsResponse
operator|.
name|getTblValidWriteIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|writeToString
argument_list|()
return|;
block|}
specifier|private
name|void
name|validateTablePara
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|Throwable
block|{
name|Table
name|tblRead
init|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|Table
name|tblRead1
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tblRead
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tblRead1
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validatePartPara
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|partName
parameter_list|)
throws|throws
name|Throwable
block|{
comment|//Partition part1 = rawStore.getPartition(DEFAULT_CATALOG_NAME, dbName, tblName, partName);
comment|//Partition part2 = sharedCache.getPartitionFromCache(DEFAULT_CATALOG_NAME, dbName, tblName, partName);
comment|//Assert.assertEquals(part1.getParameters(), part2.getParameters());
block|}
specifier|private
name|void
name|deleteColStats
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
index|[]
name|colName
parameter_list|)
throws|throws
name|Throwable
block|{
name|boolean
name|status
init|=
name|hmsHandler
operator|.
name|delete_table_column_statistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|status
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getTableColStatsFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|getStatsObj
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getTableColStatsFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|colName
index|[
literal|1
index|]
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|getStatsObj
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|validateTablePara
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deletePartColStats
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
index|[]
name|colName
parameter_list|,
name|String
name|partName
parameter_list|)
throws|throws
name|Throwable
block|{
name|boolean
name|status
init|=
name|hmsHandler
operator|.
name|delete_partition_column_statistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|status
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|ColumStatsWithWriteId
name|colStats
init|=
name|sharedCache
operator|.
name|getPartitionColStatsFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CachedStore
operator|.
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colStats
operator|.
name|getColumnStatisticsObj
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|validateTablePara
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testTableColStatInternal
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|boolean
name|isTxnTable
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
index|[]
name|colName
init|=
operator|new
name|String
index|[]
block|{
literal|"income"
block|,
literal|"name"
block|}
decl_stmt|;
name|double
name|highValue
init|=
literal|1200000.4525
decl_stmt|;
name|double
name|avgColLen
init|=
literal|50.30
decl_stmt|;
name|setUpBeforeTest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|isTxnTable
argument_list|)
expr_stmt|;
name|updateTableColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|highValue
argument_list|,
name|avgColLen
argument_list|,
name|isTxnTable
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isTxnTable
condition|)
block|{
name|deleteColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
name|tblName
operator|=
literal|"tbl_part"
expr_stmt|;
name|createTableWithPart
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|isTxnTable
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitions
init|=
name|hmsHandler
operator|.
name|get_partition_names
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|isTxnTable
argument_list|,
name|colName
argument_list|,
name|partName
argument_list|,
name|highValue
argument_list|,
name|avgColLen
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isTxnTable
condition|)
block|{
name|deletePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|partName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableColumnStatistics
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
literal|"column_stats_test_db"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl"
decl_stmt|;
name|testTableColStatInternal
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableColumnStatisticsTxnTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
literal|"column_stats_test_db_txn"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl_txn"
decl_stmt|;
name|testTableColStatInternal
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableColumnStatisticsTxnTableMulti
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
literal|"column_stats_test_db_txn_multi"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl_part"
decl_stmt|;
name|String
index|[]
name|colName
init|=
operator|new
name|String
index|[]
block|{
literal|"income"
block|,
literal|"name"
block|}
decl_stmt|;
name|double
name|highValue
init|=
literal|1200000.4525
decl_stmt|;
name|double
name|avgColLen
init|=
literal|50.30
decl_stmt|;
name|setUpBeforeTest
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
name|colName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createTableWithPart
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitions
init|=
name|hmsHandler
operator|.
name|get_partition_names
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
name|colName
argument_list|,
name|partName
argument_list|,
name|highValue
argument_list|,
name|avgColLen
argument_list|)
expr_stmt|;
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
name|colName
argument_list|,
name|partName
argument_list|,
literal|1200000.4521
argument_list|,
name|avgColLen
argument_list|)
expr_stmt|;
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
name|colName
argument_list|,
name|partName
argument_list|,
name|highValue
argument_list|,
literal|34.78
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableColumnStatisticsTxnTableMultiAbort
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
literal|"column_stats_test_db_txn_multi_abort"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl_part"
decl_stmt|;
name|String
index|[]
name|colName
init|=
operator|new
name|String
index|[]
block|{
literal|"income"
block|,
literal|"name"
block|}
decl_stmt|;
name|double
name|highValue
init|=
literal|1200000.4525
decl_stmt|;
name|double
name|avgColLen
init|=
literal|50.30
decl_stmt|;
name|setUpBeforeTest
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
name|colName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createTableWithPart
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitions
init|=
name|hmsHandler
operator|.
name|get_partition_names
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|txnIds
init|=
name|allocateTxns
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|writeId
init|=
name|allocateWriteIds
argument_list|(
name|txnIds
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
decl_stmt|;
name|String
name|validWriteIds
init|=
name|getValidWriteIds
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
comment|// create a new columnstatistics desc to represent partition level column stats
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setIsTblLevel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|colStats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|colStats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setStatsObj
argument_list|(
name|getStatsObjects
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|highValue
argument_list|,
name|avgColLen
argument_list|)
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setEngine
argument_list|(
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
expr_stmt|;
name|SetPartitionsStatsRequest
name|setTblColStat
init|=
operator|new
name|SetPartitionsStatsRequest
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|colStats
argument_list|)
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
decl_stmt|;
name|setTblColStat
operator|.
name|setWriteId
argument_list|(
name|writeId
argument_list|)
expr_stmt|;
name|setTblColStat
operator|.
name|setValidWriteIdList
argument_list|(
name|validWriteIds
argument_list|)
expr_stmt|;
comment|// write stats objs persistently
name|hmsHandler
operator|.
name|update_partition_column_statistics_req
argument_list|(
name|setTblColStat
argument_list|)
expr_stmt|;
comment|// abort the txn and verify that the stats got is not compliant.
name|AbortTxnRequest
name|rqst
init|=
operator|new
name|AbortTxnRequest
argument_list|(
name|txnIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|abort_txn
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|allocateWriteIds
argument_list|(
name|allocateTxns
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|validWriteIds
operator|=
name|getValidWriteIds
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitionColumnStatistics"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|statRawStore
init|=
name|rawStore
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partName
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|,
name|validWriteIds
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
name|verifyStat
argument_list|(
name|statRawStore
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObj
argument_list|()
argument_list|,
name|colName
argument_list|,
name|highValue
argument_list|,
name|avgColLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statRawStore
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isIsStatsCompliant
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|statsListFromCache
init|=
name|sharedCache
operator|.
name|getPartitionColStatsListFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partName
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|validWriteIds
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|verifyStat
argument_list|(
name|statsListFromCache
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObj
argument_list|()
argument_list|,
name|colName
argument_list|,
name|highValue
argument_list|,
name|avgColLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statsListFromCache
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isIsStatsCompliant
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|ColumStatsWithWriteId
name|columStatsWithWriteId
init|=
name|sharedCache
operator|.
name|getPartitionColStatsFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CachedStore
operator|.
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|,
name|validWriteIds
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|columStatsWithWriteId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|validatePartPara
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableColumnStatisticsTxnTableOpenTxn
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
literal|"column_stats_test_db_txn_multi_open"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl_part"
decl_stmt|;
name|String
index|[]
name|colName
init|=
operator|new
name|String
index|[]
block|{
literal|"income"
block|,
literal|"name"
block|}
decl_stmt|;
name|double
name|highValue
init|=
literal|1200000.4121
decl_stmt|;
name|double
name|avgColLen
init|=
literal|23.30
decl_stmt|;
name|setUpBeforeTest
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
name|colName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createTableWithPart
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitions
init|=
name|hmsHandler
operator|.
name|get_partition_names
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// update part col stats successfully.
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
name|colName
argument_list|,
name|partName
argument_list|,
literal|1.2
argument_list|,
literal|12.2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|txnIds
init|=
name|allocateTxns
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|writeId
init|=
name|allocateWriteIds
argument_list|(
name|txnIds
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
decl_stmt|;
name|String
name|validWriteIds
init|=
name|getValidWriteIds
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
comment|// create a new columnstatistics desc to represent partition level column stats
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setIsTblLevel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|colStats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|colStats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setStatsObj
argument_list|(
name|getStatsObjects
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|highValue
argument_list|,
name|avgColLen
argument_list|)
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setEngine
argument_list|(
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
expr_stmt|;
name|SetPartitionsStatsRequest
name|setTblColStat
init|=
operator|new
name|SetPartitionsStatsRequest
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|colStats
argument_list|)
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
decl_stmt|;
name|setTblColStat
operator|.
name|setWriteId
argument_list|(
name|writeId
argument_list|)
expr_stmt|;
name|setTblColStat
operator|.
name|setValidWriteIdList
argument_list|(
name|validWriteIds
argument_list|)
expr_stmt|;
comment|// write stats objs persistently
name|hmsHandler
operator|.
name|update_partition_column_statistics_req
argument_list|(
name|setTblColStat
argument_list|)
expr_stmt|;
comment|// keep the txn open and verify that the stats got is not compliant.
name|allocateWriteIds
argument_list|(
name|allocateTxns
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|validWriteIds
operator|=
name|getValidWriteIds
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitionColumnStatistics"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|statRawStore
init|=
name|rawStore
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partName
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|,
name|validWriteIds
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
name|verifyStat
argument_list|(
name|statRawStore
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObj
argument_list|()
argument_list|,
name|colName
argument_list|,
name|highValue
argument_list|,
name|avgColLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statRawStore
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isIsStatsCompliant
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|statsListFromCache
init|=
name|sharedCache
operator|.
name|getPartitionColStatsListFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partName
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|validWriteIds
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|verifyStat
argument_list|(
name|statsListFromCache
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObj
argument_list|()
argument_list|,
name|colName
argument_list|,
name|highValue
argument_list|,
name|avgColLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statsListFromCache
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isIsStatsCompliant
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|ColumStatsWithWriteId
name|columStatsWithWriteId
init|=
name|sharedCache
operator|.
name|getPartitionColStatsFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CachedStore
operator|.
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|,
name|validWriteIds
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|columStatsWithWriteId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|validatePartPara
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyAggrStat
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
index|[]
name|colName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitions
parameter_list|,
name|boolean
name|isTxnTbl
parameter_list|,
name|double
name|highValue
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|txnIds
init|=
name|allocateTxns
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|allocateWriteIds
argument_list|(
name|txnIds
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
expr_stmt|;
name|String
name|validWriteIds
init|=
name|getValidWriteIds
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitionSpecsByFilterAndProjection"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStats
init|=
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitions
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|,
name|validWriteIds
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|highValue
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
comment|//Assert.assertEquals(aggrStats.isIsStatsCompliant(), true);
comment|// This will update the cache for non txn table.
name|PartitionsStatsRequest
name|request
init|=
operator|new
name|PartitionsStatsRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|partitions
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
decl_stmt|;
name|request
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|request
operator|.
name|setValidWriteIdList
argument_list|(
name|validWriteIds
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStatsCached
init|=
name|hmsHandler
operator|.
name|get_aggr_stats_for
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStatsCached
argument_list|,
name|aggrStats
argument_list|)
expr_stmt|;
comment|//Assert.assertEquals(aggrStatsCached.isIsStatsCompliant(), true);
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|stats
init|=
name|sharedCache
operator|.
name|getAggrStatsFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|SharedCache
operator|.
name|StatsType
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|highValue
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggrStat
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
literal|"aggr_stats_test"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl_part"
decl_stmt|;
name|String
index|[]
name|colName
init|=
operator|new
name|String
index|[]
block|{
literal|"income"
block|,
literal|"name"
block|}
decl_stmt|;
name|setUpBeforeTest
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
name|colName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|createTableWithPart
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitions
init|=
name|hmsHandler
operator|.
name|get_partition_names
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// update part col stats successfully.
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|false
argument_list|,
name|colName
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|false
argument_list|,
name|colName
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|verifyAggrStat
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|partitions
argument_list|,
literal|false
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|false
argument_list|,
name|colName
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|verifyAggrStat
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|partitions
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggrStatTxnTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
literal|"aggr_stats_test_db_txn"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl_part"
decl_stmt|;
name|String
index|[]
name|colName
init|=
operator|new
name|String
index|[]
block|{
literal|"income"
block|,
literal|"name"
block|}
decl_stmt|;
name|setUpBeforeTest
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
name|colName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createTableWithPart
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitions
init|=
name|hmsHandler
operator|.
name|get_partition_names
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// update part col stats successfully.
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
name|colName
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
name|colName
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|verifyAggrStat
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|partitions
argument_list|,
literal|true
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
name|colName
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|verifyAggrStat
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|partitions
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|txnIds
init|=
name|allocateTxns
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|writeId
init|=
name|allocateWriteIds
argument_list|(
name|txnIds
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
decl_stmt|;
name|String
name|validWriteIds
init|=
name|getValidWriteIds
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
comment|// create a new columnstatistics desc to represent partition level column stats
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setIsTblLevel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|colStats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|colStats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setStatsObj
argument_list|(
name|getStatsObjects
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
literal|5
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setEngine
argument_list|(
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
expr_stmt|;
name|SetPartitionsStatsRequest
name|setTblColStat
init|=
operator|new
name|SetPartitionsStatsRequest
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|colStats
argument_list|)
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
decl_stmt|;
name|setTblColStat
operator|.
name|setWriteId
argument_list|(
name|writeId
argument_list|)
expr_stmt|;
name|setTblColStat
operator|.
name|setValidWriteIdList
argument_list|(
name|validWriteIds
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|update_partition_column_statistics_req
argument_list|(
name|setTblColStat
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitionSpecsByFilterAndProjection"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStats
init|=
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitions
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|,
name|validWriteIds
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// keep the txn open and verify that the stats got is not compliant.
name|PartitionsStatsRequest
name|request
init|=
operator|new
name|PartitionsStatsRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|partitions
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
decl_stmt|;
name|request
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|request
operator|.
name|setValidWriteIdList
argument_list|(
name|validWriteIds
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStatsCached
init|=
name|hmsHandler
operator|.
name|get_aggr_stats_for
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStatsCached
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggrStatAbortTxn
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
literal|"aggr_stats_test_db_txn_abort"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl_part"
decl_stmt|;
name|String
index|[]
name|colName
init|=
operator|new
name|String
index|[]
block|{
literal|"income"
block|,
literal|"name"
block|}
decl_stmt|;
name|setUpBeforeTest
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
name|colName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createTableWithPart
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitions
init|=
name|hmsHandler
operator|.
name|get_partition_names
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// update part col stats successfully.
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
name|colName
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|updatePartColStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
name|colName
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|verifyAggrStat
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|partitions
argument_list|,
literal|true
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|txnIds
init|=
name|allocateTxns
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|long
name|writeId
init|=
name|allocateWriteIds
argument_list|(
name|txnIds
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
decl_stmt|;
name|String
name|validWriteIds
init|=
name|getValidWriteIds
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
comment|// create a new columnstatistics desc to represent partition level column stats
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setIsTblLevel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|colStats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|colStats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setStatsObj
argument_list|(
name|getStatsObjects
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
literal|5
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setEngine
argument_list|(
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
expr_stmt|;
name|SetPartitionsStatsRequest
name|setTblColStat
init|=
operator|new
name|SetPartitionsStatsRequest
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|colStats
argument_list|)
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
decl_stmt|;
name|setTblColStat
operator|.
name|setWriteId
argument_list|(
name|writeId
argument_list|)
expr_stmt|;
name|setTblColStat
operator|.
name|setValidWriteIdList
argument_list|(
name|validWriteIds
argument_list|)
expr_stmt|;
name|hmsHandler
operator|.
name|update_partition_column_statistics_req
argument_list|(
name|setTblColStat
argument_list|)
expr_stmt|;
name|AbortTxnRequest
name|abortTxnRequest
init|=
operator|new
name|AbortTxnRequest
argument_list|(
name|txnIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|hmsHandler
operator|.
name|abort_txn
argument_list|(
name|abortTxnRequest
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitionSpecsByFilterAndProjection"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStats
init|=
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitions
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|,
name|validWriteIds
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// keep the txn open and verify that the stats got is not compliant.
name|PartitionsStatsRequest
name|request
init|=
operator|new
name|PartitionsStatsRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|partitions
argument_list|,
name|Constants
operator|.
name|HIVE_ENGINE
argument_list|)
decl_stmt|;
name|request
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|request
operator|.
name|setValidWriteIdList
argument_list|(
name|validWriteIds
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStatsCached
init|=
name|hmsHandler
operator|.
name|get_aggr_stats_for
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStatsCached
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

