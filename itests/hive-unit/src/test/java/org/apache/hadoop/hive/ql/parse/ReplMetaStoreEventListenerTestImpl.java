begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|ListenerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * ReplMetaStoreEventListenerTestImpl - Implementation of MetaStoreEventListener to test  * isReplicated flag in some of the tests.  */
end_comment

begin_class
specifier|public
class|class
name|ReplMetaStoreEventListenerTestImpl
extends|extends
name|MetaStoreEventListener
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplMetaStoreEventListenerTestImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|replicatedDbsForEvents
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|nonReplicatedDbsForEvents
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|replicatedTablesForEvents
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|ReplMetaStoreEventListenerTestImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addNameToEventMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|eventMap
parameter_list|,
name|String
name|name
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
block|{
name|String
name|eventType
init|=
name|event
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|eventNames
init|=
name|eventMap
operator|.
name|get
argument_list|(
name|eventType
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventNames
operator|==
literal|null
condition|)
block|{
name|eventNames
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|eventMap
operator|.
name|put
argument_list|(
name|eventType
argument_list|,
name|eventNames
argument_list|)
expr_stmt|;
block|}
name|eventNames
operator|.
name|add
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCreateDatabase
parameter_list|(
name|CreateDatabaseEvent
name|createDatabaseEvent
parameter_list|)
block|{
name|String
name|dbName
init|=
name|createDatabaseEvent
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|createDatabaseEvent
operator|.
name|isReplicated
argument_list|()
condition|)
block|{
name|addNameToEventMap
argument_list|(
name|replicatedDbsForEvents
argument_list|,
name|dbName
argument_list|,
name|createDatabaseEvent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addNameToEventMap
argument_list|(
name|nonReplicatedDbsForEvents
argument_list|,
name|dbName
argument_list|,
name|createDatabaseEvent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAlterDatabase
parameter_list|(
name|AlterDatabaseEvent
name|alterDatabaseEvent
parameter_list|)
block|{
comment|// The test doesn't create any database rename events, so it's fine to just check the new
comment|// database name.
name|String
name|dbName
init|=
name|alterDatabaseEvent
operator|.
name|getNewDatabase
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|alterDatabaseEvent
operator|.
name|isReplicated
argument_list|()
condition|)
block|{
name|addNameToEventMap
argument_list|(
name|replicatedDbsForEvents
argument_list|,
name|dbName
argument_list|,
name|alterDatabaseEvent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addNameToEventMap
argument_list|(
name|nonReplicatedDbsForEvents
argument_list|,
name|dbName
argument_list|,
name|alterDatabaseEvent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCreateTable
parameter_list|(
name|CreateTableEvent
name|createTableEvent
parameter_list|)
block|{
name|String
name|dbName
init|=
name|createTableEvent
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|createTableEvent
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|createTableEvent
operator|.
name|isReplicated
argument_list|()
condition|)
block|{
name|addNameToEventMap
argument_list|(
name|replicatedDbsForEvents
argument_list|,
name|dbName
argument_list|,
name|createTableEvent
argument_list|)
expr_stmt|;
name|addNameToEventMap
argument_list|(
name|replicatedTablesForEvents
argument_list|,
name|tblName
argument_list|,
name|createTableEvent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addNameToEventMap
argument_list|(
name|nonReplicatedDbsForEvents
argument_list|,
name|dbName
argument_list|,
name|createTableEvent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAlterTable
parameter_list|(
name|AlterTableEvent
name|alterTableEvent
parameter_list|)
block|{
comment|// Test doesn't have table rename events, since we are only interested in checking replication
comment|// status. So, it's fine to get the names from the new table.
name|String
name|dbName
init|=
name|alterTableEvent
operator|.
name|getNewTable
argument_list|()
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|alterTableEvent
operator|.
name|getNewTable
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|alterTableEvent
operator|.
name|isReplicated
argument_list|()
condition|)
block|{
name|addNameToEventMap
argument_list|(
name|replicatedDbsForEvents
argument_list|,
name|dbName
argument_list|,
name|alterTableEvent
argument_list|)
expr_stmt|;
name|addNameToEventMap
argument_list|(
name|replicatedTablesForEvents
argument_list|,
name|tblName
argument_list|,
name|alterTableEvent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addNameToEventMap
argument_list|(
name|nonReplicatedDbsForEvents
argument_list|,
name|dbName
argument_list|,
name|alterTableEvent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropTable
parameter_list|(
name|DropTableEvent
name|dropTableEvent
parameter_list|)
block|{
name|String
name|dbName
init|=
name|dropTableEvent
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|dropTableEvent
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dropTableEvent
operator|.
name|isReplicated
argument_list|()
condition|)
block|{
name|addNameToEventMap
argument_list|(
name|replicatedDbsForEvents
argument_list|,
name|dbName
argument_list|,
name|dropTableEvent
argument_list|)
expr_stmt|;
name|addNameToEventMap
argument_list|(
name|replicatedTablesForEvents
argument_list|,
name|tblName
argument_list|,
name|dropTableEvent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addNameToEventMap
argument_list|(
name|nonReplicatedDbsForEvents
argument_list|,
name|dbName
argument_list|,
name|dropTableEvent
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|checkEventSanity
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|eventsMap
parameter_list|,
name|String
name|replicaDbName
parameter_list|)
block|{
name|replicaDbName
operator|=
name|replicaDbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|event
range|:
name|eventsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|dbsForEvent
init|=
name|replicatedDbsForEvents
operator|.
name|get
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Examining dbs and tables for event "
operator|+
name|event
argument_list|)
expr_stmt|;
comment|// isreplicated should be true only for replicated database
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dbsForEvent
operator|.
name|contains
argument_list|(
name|replicaDbName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dbsForEvent
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonReplicatedDbsForEvents
operator|.
name|get
argument_list|(
name|event
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nonReplicatedDbsForEvents
operator|.
name|get
argument_list|(
name|event
argument_list|)
operator|.
name|contains
argument_list|(
name|replicaDbName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|eventTables
init|=
name|replicatedTablesForEvents
operator|.
name|get
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|eventsMap
operator|.
name|get
argument_list|(
name|event
argument_list|)
argument_list|,
name|eventTables
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|clearSanityMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
name|Set
argument_list|<
name|String
argument_list|>
name|eventEntry
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|eventEntry
operator|!=
literal|null
condition|)
block|{
name|eventEntry
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|clearSanityData
parameter_list|()
block|{
name|clearSanityMap
argument_list|(
name|replicatedDbsForEvents
argument_list|)
expr_stmt|;
name|clearSanityMap
argument_list|(
name|nonReplicatedDbsForEvents
argument_list|)
expr_stmt|;
name|clearSanityMap
argument_list|(
name|replicatedTablesForEvents
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

