begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|gzip
operator|.
name|GzipJSONMessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|ReplExternalTables
operator|.
name|FILE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
operator|.
name|INC_BOOTSTRAP_ROOT_DIR_NAME
import|;
end_import

begin_comment
comment|/**  * Tests Table level replication scenarios.  */
end_comment

begin_class
specifier|public
class|class
name|TestTableLevelReplicationScenarios
extends|extends
name|BaseReplicationScenariosAcidTables
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REPLICA_EXTERNAL_BASE
init|=
literal|"/replica_external_base"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_MESSAGE_FACTORY
operator|.
name|getHiveName
argument_list|()
argument_list|,
name|GzipJSONMessageEncoder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_DUMP_METADATA_ONLY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DISTCP_DOAS_USER
operator|.
name|varname
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|internalBeforeClassSetup
argument_list|(
name|overrides
argument_list|,
name|TestTableLevelReplicationScenarios
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
enum|enum
name|CreateTableType
block|{
name|FULL_ACID
block|,
name|MM_ACID
block|,
name|NON_ACID
block|,
name|EXTERNAL
block|}
class|class
name|CreateTableInfo
block|{
name|String
name|tableName
decl_stmt|;
name|CreateTableType
name|type
decl_stmt|;
name|boolean
name|isPartitioned
decl_stmt|;
name|CreateTableInfo
parameter_list|(
name|String
name|tableName
parameter_list|,
name|CreateTableType
name|type
parameter_list|,
name|boolean
name|isPartitioned
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|isPartitioned
operator|=
name|isPartitioned
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createTables
parameter_list|(
name|List
argument_list|<
name|CreateTableInfo
argument_list|>
name|createTblsInfo
parameter_list|)
throws|throws
name|Throwable
block|{
for|for
control|(
name|CreateTableInfo
name|tblInfo
range|:
name|createTblsInfo
control|)
block|{
name|StringBuilder
name|strBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create "
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblInfo
operator|.
name|type
operator|==
name|CreateTableType
operator|.
name|EXTERNAL
condition|)
block|{
name|strBuilder
operator|.
name|append
argument_list|(
literal|" external "
argument_list|)
expr_stmt|;
block|}
name|strBuilder
operator|.
name|append
argument_list|(
literal|" table "
argument_list|)
operator|.
name|append
argument_list|(
name|primaryDbName
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|tblInfo
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tblInfo
operator|.
name|isPartitioned
condition|)
block|{
name|strBuilder
operator|.
name|append
argument_list|(
literal|" (a int) partitioned by (b int) "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|strBuilder
operator|.
name|append
argument_list|(
literal|" (a int, b int) "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tblInfo
operator|.
name|type
operator|==
name|CreateTableType
operator|.
name|FULL_ACID
condition|)
block|{
name|strBuilder
operator|.
name|append
argument_list|(
literal|" clustered by (a) into 2 buckets stored as orc "
operator|+
literal|"tblproperties (\"transactional\"=\"true\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tblInfo
operator|.
name|type
operator|==
name|CreateTableType
operator|.
name|MM_ACID
condition|)
block|{
name|strBuilder
operator|.
name|append
argument_list|(
literal|" tblproperties(\"transactional\"=\"true\", "
operator|+
literal|"\"transactional_properties\"=\"insert_only\")"
argument_list|)
expr_stmt|;
block|}
name|String
name|createTableCmd
init|=
name|strBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
name|createTableCmd
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|tblInfo
operator|.
name|tableName
operator|+
literal|" values(1, 10)"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createTables
parameter_list|(
name|String
index|[]
name|tableNames
parameter_list|,
name|CreateTableType
name|type
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|CreateTableInfo
argument_list|>
name|createTablesInfo
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tableNames
control|)
block|{
name|createTablesInfo
operator|.
name|add
argument_list|(
operator|new
name|CreateTableInfo
argument_list|(
name|tblName
argument_list|,
name|type
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|createTables
argument_list|(
name|createTablesInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|replicateAndVerify
parameter_list|(
name|String
name|replPolicy
parameter_list|,
name|String
name|lastReplId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
parameter_list|,
name|String
index|[]
name|expectedTables
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
literal|null
argument_list|,
name|expectedTables
argument_list|)
return|;
block|}
specifier|private
name|String
name|replicateAndVerify
parameter_list|(
name|String
name|replPolicy
parameter_list|,
name|String
name|oldReplPolicy
parameter_list|,
name|String
name|lastReplId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
parameter_list|,
name|String
index|[]
name|bootstrappedTables
parameter_list|,
name|String
index|[]
name|expectedTables
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
name|bootstrappedTables
argument_list|,
name|expectedTables
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|String
name|replicateAndVerify
parameter_list|(
name|String
name|replPolicy
parameter_list|,
name|String
name|oldReplPolicy
parameter_list|,
name|String
name|lastReplId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
parameter_list|,
name|String
index|[]
name|bootstrappedTables
parameter_list|,
name|String
index|[]
name|expectedTables
parameter_list|,
name|String
index|[]
name|records
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|dumpWithClause
operator|==
literal|null
condition|)
block|{
name|dumpWithClause
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|loadWithClause
operator|==
literal|null
condition|)
block|{
name|loadWithClause
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|// For bootstrap replication, drop the target database before triggering it.
if|if
condition|(
name|lastReplId
operator|==
literal|null
condition|)
block|{
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
if|if
condition|(
name|bootstrappedTables
operator|!=
literal|null
condition|)
block|{
name|verifyBootstrapDirInIncrementalDump
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|bootstrappedTables
argument_list|)
expr_stmt|;
block|}
comment|// If the policy contains '.'' means its table level replication.
name|verifyTableListForPolicy
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|replPolicy
operator|.
name|contains
argument_list|(
literal|".'"
argument_list|)
condition|?
name|expectedTables
else|:
literal|null
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|replPolicy
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|expectedTables
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|records
operator|==
literal|null
condition|)
block|{
name|records
operator|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
expr_stmt|;
block|}
for|for
control|(
name|String
name|table
range|:
name|expectedTables
control|)
block|{
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select a from "
operator|+
name|table
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|records
argument_list|)
expr_stmt|;
block|}
return|return
name|tuple
operator|.
name|lastReplicationId
return|;
block|}
specifier|private
name|String
name|replicateAndVerifyClearDump
parameter_list|(
name|String
name|replPolicy
parameter_list|,
name|String
name|oldReplPolicy
parameter_list|,
name|String
name|lastReplId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
parameter_list|,
name|String
index|[]
name|bootstrappedTables
parameter_list|,
name|String
index|[]
name|expectedTables
parameter_list|,
name|String
index|[]
name|records
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|dumpWithClause
operator|==
literal|null
condition|)
block|{
name|dumpWithClause
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|loadWithClause
operator|==
literal|null
condition|)
block|{
name|loadWithClause
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|// For bootstrap replication, drop the target database before triggering it.
if|if
condition|(
name|lastReplId
operator|==
literal|null
condition|)
block|{
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
if|if
condition|(
name|bootstrappedTables
operator|!=
literal|null
condition|)
block|{
name|verifyBootstrapDirInIncrementalDump
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|bootstrappedTables
argument_list|)
expr_stmt|;
block|}
comment|// If the policy contains '.'' means its table level replication.
name|verifyTableListForPolicy
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|replPolicy
operator|.
name|contains
argument_list|(
literal|".'"
argument_list|)
condition|?
name|expectedTables
else|:
literal|null
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|replPolicy
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|expectedTables
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|records
operator|==
literal|null
condition|)
block|{
name|records
operator|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
expr_stmt|;
block|}
for|for
control|(
name|String
name|table
range|:
name|expectedTables
control|)
block|{
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select a from "
operator|+
name|table
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|records
argument_list|)
expr_stmt|;
block|}
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|tuple
operator|.
name|lastReplicationId
return|;
block|}
specifier|private
name|void
name|verifyBootstrapDirInIncrementalDump
parameter_list|(
name|String
name|dumpLocation
parameter_list|,
name|String
index|[]
name|bootstrappedTables
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// _bootstrap directory should be created as bootstrap enabled on external tables.
name|Path
name|dumpPath
init|=
operator|new
name|Path
argument_list|(
name|dumpLocation
argument_list|,
name|INC_BOOTSTRAP_ROOT_DIR_NAME
argument_list|)
decl_stmt|;
comment|// If nothing to be bootstrapped.
if|if
condition|(
name|bootstrappedTables
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|dumpPath
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|dumpPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check if the DB dump path have any tables other than the ones listed in bootstrappedTables.
name|Path
name|dbPath
init|=
operator|new
name|Path
argument_list|(
name|dumpPath
argument_list|,
name|primaryDbName
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|fileStatuses
init|=
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|dbPath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileStatuses
operator|.
name|length
argument_list|,
name|bootstrappedTables
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Eg: _bootstrap/<db_name>/t2, _bootstrap/<db_name>/t3 etc
for|for
control|(
name|String
name|tableName
range|:
name|bootstrappedTables
control|)
block|{
name|Path
name|tblPath
init|=
operator|new
name|Path
argument_list|(
name|dbPath
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|tblPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyTableListForPolicy
parameter_list|(
name|String
name|dumpLocation
parameter_list|,
name|String
index|[]
name|tableList
parameter_list|)
throws|throws
name|Throwable
block|{
name|FileSystem
name|fileSystem
init|=
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|tableListFile
init|=
operator|new
name|Path
argument_list|(
name|dumpLocation
argument_list|,
name|ReplUtils
operator|.
name|REPL_TABLE_LIST_DIR_NAME
argument_list|)
decl_stmt|;
name|tableListFile
operator|=
operator|new
name|Path
argument_list|(
name|tableListFile
argument_list|,
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableList
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fileSystem
operator|.
name|exists
argument_list|(
name|tableListFile
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fileSystem
operator|.
name|exists
argument_list|(
name|tableListFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InputStream
name|inputStream
init|=
name|fileSystem
operator|.
name|open
argument_list|(
name|tableListFile
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|)
argument_list|)
expr_stmt|;
name|Set
name|tableNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tableList
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numTable
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
init|;
name|line
operator|!=
literal|null
condition|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
control|)
block|{
name|numTable
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableNames
operator|.
name|contains
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numTable
argument_list|,
name|tableList
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicBootstrapWithIncludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|}
decl_stmt|;
name|String
index|[]
name|originalFullAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t3"
block|,
literal|"t4"
block|}
decl_stmt|;
name|String
index|[]
name|originalMMAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t5"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalFullAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalMMAcidTables
argument_list|,
name|CreateTableType
operator|.
name|MM_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 2 tables are replicated to target.
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'(t1)|(t4)|(t5)'"
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t4"
block|,
literal|"t5"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicBootstrapWithIncludeAndExcludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t11"
block|,
literal|"t2"
block|,
literal|"t3"
block|,
literal|"t100"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 3 tables are replicated to target.
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'(t1*)|(t3)'.'t100'"
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t11"
block|,
literal|"t3"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicIncrementalWithIncludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tupleBootstrap
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|primaryDbName
argument_list|)
expr_stmt|;
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|}
decl_stmt|;
name|String
index|[]
name|originalFullAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t3"
block|,
literal|"t4"
block|}
decl_stmt|;
name|String
index|[]
name|originalMMAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t5"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalFullAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalMMAcidTables
argument_list|,
name|CreateTableType
operator|.
name|MM_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 2 tables are replicated to target.
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'t1|t5'"
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t5"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|tupleBootstrap
operator|.
name|lastReplicationId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicIncrementalWithIncludeAndExcludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tupleBootstrap
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|primaryDbName
argument_list|)
expr_stmt|;
name|String
index|[]
name|originalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t11"
block|,
literal|"t2"
block|,
literal|"t3"
block|,
literal|"t111"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 3 tables are replicated to target.
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'(t1+)|(t2)'.'t11|t3'"
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t111"
block|,
literal|"t2"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|tupleBootstrap
operator|.
name|lastReplicationId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncorrectTablePolicyInReplDump
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t11"
block|,
literal|"t2"
block|,
literal|"t3"
block|,
literal|"t111"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// Invalid repl policy where abrubtly placed DOT which causes ParseException during REPL dump.
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|boolean
name|failed
decl_stmt|;
name|String
index|[]
name|invalidReplPolicies
init|=
operator|new
name|String
index|[]
block|{
name|primaryDbName
operator|+
literal|".t1.t2"
block|,
comment|// Didn't enclose table pattern within single quotes.
name|primaryDbName
operator|+
literal|".'t1'.t2"
block|,
comment|// Table name and include list not allowed.
name|primaryDbName
operator|+
literal|".t1.'t2'"
block|,
comment|// Table name and exclude list not allowed.
name|primaryDbName
operator|+
literal|".'t1+'."
block|,
comment|// Abrubtly ended dot.
name|primaryDbName
operator|+
literal|".['t1+'].['t11']"
block|,
comment|// With square brackets
name|primaryDbName
operator|+
literal|"..''"
block|,
comment|// Two dots with empty list
name|primaryDbName
operator|+
literal|".'t1'.'tt2'.'t3'"
comment|// More than two list
block|}
decl_stmt|;
for|for
control|(
name|String
name|replPolicy
range|:
name|invalidReplPolicies
control|)
block|{
name|failed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception: {}"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|ParseException
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|failed
argument_list|)
expr_stmt|;
block|}
comment|// Test incremental replication with invalid replication policies in REPLACE clause.
name|String
name|replPolicy
init|=
name|primaryDbName
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tupleBootstrap
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|primaryDbName
argument_list|)
expr_stmt|;
name|String
name|lastReplId
init|=
name|tupleBootstrap
operator|.
name|lastReplicationId
decl_stmt|;
for|for
control|(
name|String
name|oldReplPolicy
range|:
name|invalidReplPolicies
control|)
block|{
name|failed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception: {}"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|ParseException
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|failed
argument_list|)
expr_stmt|;
block|}
comment|// Replace with replication policy having different DB name.
name|String
name|oldReplPolicy
init|=
name|replPolicy
decl_stmt|;
name|replPolicy
operator|=
name|primaryDbName
operator|+
literal|"_dupe.'t1+'.'t1'"
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception: {}"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|SemanticException
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|failed
argument_list|)
expr_stmt|;
comment|// Invalid pattern, include/exclude table list is empty.
name|invalidReplPolicies
operator|=
operator|new
name|String
index|[]
block|{
name|primaryDbName
operator|+
literal|".''.'t2'"
block|,
comment|// Include list is empty.
name|primaryDbName
operator|+
literal|".'t1'.''"
comment|// Exclude list is empty.
block|}
expr_stmt|;
for|for
control|(
name|String
name|invalidReplPolicy
range|:
name|invalidReplPolicies
control|)
block|{
name|failed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|replicateAndVerify
argument_list|(
name|invalidReplPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception: {}"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|SemanticException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|ErrorMsg
operator|.
name|REPL_INVALID_DB_OR_TABLE_PATTERN
operator|.
name|getMsg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|failed
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFullDbBootstrapReplicationWithDifferentReplPolicyFormats
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t200"
block|,
literal|"t3333"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// List of repl policy formats that leads to Full DB replication.
name|String
index|[]
name|fullDbReplPolicies
init|=
operator|new
name|String
index|[]
block|{
name|primaryDbName
operator|+
literal|".'.*?'"
block|,
name|primaryDbName
block|}
decl_stmt|;
comment|// Replicate and verify if all 3 tables are replicated to target.
for|for
control|(
name|String
name|replPolicy
range|:
name|fullDbReplPolicies
control|)
block|{
name|replicateAndVerifyClearDump
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|originalTables
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCaseInSensitiveNatureOfReplPolicy
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"aA11"
block|,
literal|"B2"
block|,
literal|"Cc3"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if 2 tables are replicated as per policy.
name|String
name|replPolicy
init|=
name|primaryDbName
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|".'(.*a1+)|(cc3)|(B2)'.'(AA1+)|(b2)'"
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"cc3"
block|}
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
decl_stmt|;
comment|// Test case insensitive nature in REPLACE clause as well.
name|String
name|oldReplPolicy
init|=
name|replPolicy
decl_stmt|;
name|replPolicy
operator|=
name|primaryDbName
operator|+
literal|".'(.*a1+)|(cc3)|(B2)'.'AA1+'"
expr_stmt|;
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"b2"
block|,
literal|"cc3"
block|}
expr_stmt|;
name|String
index|[]
name|bootstrappedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"b2"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrappedTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapAcidTablesIncrementalPhaseWithIncludeAndExcludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"b2"
block|}
decl_stmt|;
name|String
index|[]
name|originalFullAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"b1"
block|}
decl_stmt|;
name|String
index|[]
name|originalMMAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a3"
block|,
literal|"a4"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalFullAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalMMAcidTables
argument_list|,
name|CreateTableType
operator|.
name|MM_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only non-acid tables are replicated to target.
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithoutAcidClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'(a[0-9]+)|(b1)'.'a4'"
decl_stmt|;
name|String
index|[]
name|bootstrapReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|}
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|dumpWithoutAcidClause
argument_list|,
literal|null
argument_list|,
name|bootstrapReplicatedTables
argument_list|)
decl_stmt|;
comment|// Enable acid tables for replication.
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithAcidBootstrapClause
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_ACID_TABLES
operator|+
literal|"'='true'"
argument_list|)
decl_stmt|;
name|String
index|[]
name|incrementalReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|,
literal|"a3"
block|,
literal|"b1"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithAcidBootstrapClause
argument_list|,
literal|null
argument_list|,
name|incrementalReplicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapExternalTablesWithIncludeAndExcludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"b2"
block|}
decl_stmt|;
name|String
index|[]
name|originalExternalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"b1"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalExternalTables
argument_list|,
name|CreateTableType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 2 tables are replicated to target.
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|ReplicationTestUtils
operator|.
name|externalTableBasePathWithClause
argument_list|(
name|REPLICA_EXTERNAL_BASE
argument_list|,
name|replica
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|)
decl_stmt|;
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'(a[0-9]+)|(b2)'.'a1'"
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"b2"
block|}
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|replPolicy
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
comment|// the _external_tables_file info should be created as external tables are to be replicated.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the external table info contains only table "a2".
name|ReplicationTestUtils
operator|.
name|assertExternalFileInfo
argument_list|(
name|primary
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a2"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|replPolicy
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|replicatedTables
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapExternalTablesIncrementalPhaseWithIncludeAndExcludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"b2"
block|}
decl_stmt|;
name|String
index|[]
name|originalExternalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"b1"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalExternalTables
argument_list|,
name|CreateTableType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
comment|// Bootstrap should exclude external tables.
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|ReplicationTestUtils
operator|.
name|externalTableBasePathWithClause
argument_list|(
name|REPLICA_EXTERNAL_BASE
argument_list|,
name|replica
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'(a[0-9]+)|(b2)'.'a1'"
decl_stmt|;
name|String
index|[]
name|bootstrapReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"b2"
block|}
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
name|bootstrapReplicatedTables
argument_list|)
decl_stmt|;
comment|// Enable external tables replication and bootstrap in incremental phase.
name|String
index|[]
name|incrementalReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"b2"
block|}
decl_stmt|;
name|dumpWithClause
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|replPolicy
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
comment|// the _external_tables_file info should be created as external tables are to be replicated.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the external table info contains only table "a2".
name|ReplicationTestUtils
operator|.
name|assertExternalFileInfo
argument_list|(
name|primary
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a2"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|replPolicy
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|incrementalReplicatedTables
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicReplaceReplPolicy
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|}
decl_stmt|;
name|String
index|[]
name|originalFullAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t3"
block|,
literal|"t4"
block|}
decl_stmt|;
name|String
index|[]
name|originalMMAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t5"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalFullAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalMMAcidTables
argument_list|,
name|CreateTableType
operator|.
name|MM_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 2 tables are replicated to target.
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'(t1)|(t4)'"
decl_stmt|;
name|String
name|oldReplPolicy
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t4"
block|}
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
decl_stmt|;
comment|// Exclude t4 and include t3, t6
name|createTables
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t6"
block|}
argument_list|,
name|CreateTableType
operator|.
name|MM_ACID
argument_list|)
expr_stmt|;
name|oldReplPolicy
operator|=
name|replPolicy
expr_stmt|;
name|replPolicy
operator|=
name|primaryDbName
operator|+
literal|".'t1|t3|t6'"
expr_stmt|;
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t3"
block|,
literal|"t6"
block|}
expr_stmt|;
name|String
index|[]
name|bootstrappedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t3"
block|,
literal|"t6"
block|}
decl_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrappedTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
comment|// Convert to Full Db repl policy. All tables should be included.
name|oldReplPolicy
operator|=
name|replPolicy
expr_stmt|;
name|replPolicy
operator|=
name|primaryDbName
expr_stmt|;
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|,
literal|"t3"
block|,
literal|"t4"
block|,
literal|"t5"
block|,
literal|"t6"
block|}
expr_stmt|;
name|bootstrappedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"t2"
block|,
literal|"t4"
block|,
literal|"t5"
block|}
expr_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrappedTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
comment|// Convert to regex that excludes t3, t4 and t5.
name|oldReplPolicy
operator|=
name|replPolicy
expr_stmt|;
name|replPolicy
operator|=
name|primaryDbName
operator|+
literal|".'.*?'.'t[3-5]+'"
expr_stmt|;
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|,
literal|"t6"
block|}
expr_stmt|;
name|bootstrappedTables
operator|=
operator|new
name|String
index|[]
block|{}
expr_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrappedTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplacePolicyOnBootstrapAcidTablesIncrementalPhase
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"b1"
block|,
literal|"c1"
block|}
decl_stmt|;
name|String
index|[]
name|originalFullAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"b2"
block|}
decl_stmt|;
name|String
index|[]
name|originalMMAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a3"
block|,
literal|"a4"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalFullAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalMMAcidTables
argument_list|,
name|CreateTableType
operator|.
name|MM_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only non-acid tables are replicated to target.
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithoutAcidClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'(a[0-9]+)|(b[0-9]+)'.'b1'"
decl_stmt|;
name|String
index|[]
name|bootstrapReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|}
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|dumpWithoutAcidClause
argument_list|,
literal|null
argument_list|,
name|bootstrapReplicatedTables
argument_list|)
decl_stmt|;
comment|// Enable acid tables for replication. Also, replace, replication policy to exclude "b1" and "a3"
comment|// instead of "a1" alone.
name|String
name|oldReplPolicy
init|=
name|replPolicy
decl_stmt|;
name|replPolicy
operator|=
name|primaryDbName
operator|+
literal|".'[a-z]+[0-9]+'.'(a3)|(b1)'"
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithAcidBootstrapClause
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_ACID_TABLES
operator|+
literal|"'='true'"
argument_list|)
decl_stmt|;
name|String
index|[]
name|incrementalReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|,
literal|"a4"
block|,
literal|"b2"
block|,
literal|"c1"
block|}
decl_stmt|;
name|String
index|[]
name|bootstrappedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"a4"
block|,
literal|"b2"
block|,
literal|"c1"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithAcidBootstrapClause
argument_list|,
literal|null
argument_list|,
name|bootstrappedTables
argument_list|,
name|incrementalReplicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplacePolicyWhenAcidTablesDisabledForRepl
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"b1"
block|,
literal|"c1"
block|}
decl_stmt|;
name|String
index|[]
name|originalFullAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalFullAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only non-acid tables are replicated to target.
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithoutAcidClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'(a[0-9]+)|(b[0-9]+)'.'b1'"
decl_stmt|;
name|String
index|[]
name|bootstrapReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|}
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|dumpWithoutAcidClause
argument_list|,
literal|null
argument_list|,
name|bootstrapReplicatedTables
argument_list|)
decl_stmt|;
comment|// Continue to disable ACID tables for replication. Also, replace, replication policy to include
comment|// "a2" but exclude "a1" and "b1". Still ACID tables shouldn't be bootstrapped. Only non-ACID
comment|// table "b1" should be bootstrapped.
name|String
name|oldReplPolicy
init|=
name|replPolicy
decl_stmt|;
name|replPolicy
operator|=
name|primaryDbName
operator|+
literal|".'(a[0-9]+)|(b[0-9]+)'.'a2'"
expr_stmt|;
name|String
index|[]
name|incrementalReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"b1"
block|}
decl_stmt|;
name|String
index|[]
name|bootstrappedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"b1"
block|}
decl_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithoutAcidClause
argument_list|,
literal|null
argument_list|,
name|bootstrappedTables
argument_list|,
name|incrementalReplicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplacePolicyOnBootstrapExternalTablesIncrementalPhase
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"b1"
block|}
decl_stmt|;
name|String
index|[]
name|originalExternalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"b2"
block|,
literal|"c2"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalExternalTables
argument_list|,
name|CreateTableType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
comment|// Bootstrap should exclude external tables.
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|ReplicationTestUtils
operator|.
name|externalTableBasePathWithClause
argument_list|(
name|REPLICA_EXTERNAL_BASE
argument_list|,
name|replica
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'(a[0-9]+)|(b1)'.'a1'"
decl_stmt|;
name|String
index|[]
name|bootstrapReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"b1"
block|}
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
name|bootstrapReplicatedTables
argument_list|)
decl_stmt|;
comment|// Continue to disable external tables for replication. Also, replace, replication policy to exclude
comment|// "b1" and include "a1".
name|String
name|oldReplPolicy
init|=
name|replPolicy
decl_stmt|;
name|replPolicy
operator|=
name|primaryDbName
operator|+
literal|".'(a[0-9]+)|(b[0-9]+)'.'(a2)|(b1)'"
expr_stmt|;
name|String
index|[]
name|incrementalReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|}
decl_stmt|;
name|String
index|[]
name|bootstrappedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|}
decl_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
name|bootstrappedTables
argument_list|,
name|incrementalReplicatedTables
argument_list|)
expr_stmt|;
comment|// Enable external tables replication and bootstrap in incremental phase. Also, replace,
comment|// replication policy to exclude tables with prefix "b".
name|oldReplPolicy
operator|=
name|replPolicy
expr_stmt|;
name|replPolicy
operator|=
name|primaryDbName
operator|+
literal|".'[a-z]+[0-9]+'.'b[0-9]+'"
expr_stmt|;
name|incrementalReplicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|,
literal|"c2"
block|}
expr_stmt|;
name|bootstrappedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"c2"
block|}
expr_stmt|;
name|dumpWithClause
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|replPolicy
argument_list|,
name|oldReplPolicy
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
comment|// the _external_tables_file info should be created as external tables are to be replicated.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the external table info contains table "a2" and "c2".
name|ReplicationTestUtils
operator|.
name|assertExternalFileInfo
argument_list|(
name|primary
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a2"
argument_list|,
literal|"c2"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify if the expected tables are bootstrapped.
name|verifyBootstrapDirInIncrementalDump
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|bootstrappedTables
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|replPolicy
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|incrementalReplicatedTables
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameTableScenariosBasic
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'in[0-9]+'.'out[0-9]+'"
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"in2"
block|,
literal|"out3"
block|,
literal|"out4"
block|,
literal|"out5"
block|,
literal|"out6"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 2 tables are replicated to target.
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"in2"
block|}
decl_stmt|;
name|String
index|[]
name|bootstrapTables
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
comment|// Rename tables to make them satisfy the filter.
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out3 rename to in3"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out4 rename to in4"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out5 rename to in5"
argument_list|)
expr_stmt|;
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"in2"
block|,
literal|"in3"
block|,
literal|"in4"
block|,
literal|"in5"
block|}
expr_stmt|;
name|bootstrapTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in3"
block|,
literal|"in4"
block|,
literal|"in5"
block|}
expr_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table in3 rename to in7"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table in7 rename to in8"
argument_list|)
comment|// Double rename, both satisfying the filter, so no bootstrap.
operator|.
name|run
argument_list|(
literal|"alter table in4 rename to out9"
argument_list|)
comment|// out9 does not match the filter so in4 should be dropped.
operator|.
name|run
argument_list|(
literal|"alter table in5 rename to out10"
argument_list|)
comment|// Rename from satisfying name to not satisfying name.
operator|.
name|run
argument_list|(
literal|"alter table out10 rename to in11"
argument_list|)
expr_stmt|;
comment|// from non satisfying to satisfying, should be bootstrapped
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"in2"
block|,
literal|"in8"
block|,
literal|"in11"
block|}
expr_stmt|;
name|bootstrapTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in11"
block|}
expr_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table in8 rename to in12"
argument_list|)
comment|// table is renamed from satisfying to satisfying, no bootstrap
operator|.
name|run
argument_list|(
literal|"alter table out9 rename to in13"
argument_list|)
comment|// out9 does not match the filter so in13 should be bootstrapped.
operator|.
name|run
argument_list|(
literal|"alter table in13 rename to in14"
argument_list|)
comment|// table is renamed from satisfying to satisfying
operator|.
name|run
argument_list|(
literal|"alter table in2 rename to out200"
argument_list|)
comment|// this will change the rename to drop in2
operator|.
name|run
argument_list|(
literal|"alter table out200 rename to in200"
argument_list|)
comment|// this will add the bootstrap for in200
operator|.
name|run
argument_list|(
literal|"alter table in1 rename to out100"
argument_list|)
comment|// this will change the rename to drop
operator|.
name|run
argument_list|(
literal|"alter table out100 rename to in100"
argument_list|)
comment|// this will add the bootstrap
operator|.
name|run
argument_list|(
literal|"drop table in100"
argument_list|)
expr_stmt|;
comment|// table in100 is dropped, so no bootstrap should happen.
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in200"
block|,
literal|"in12"
block|,
literal|"in11"
block|,
literal|"in14"
block|}
expr_stmt|;
name|bootstrapTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in14"
block|,
literal|"in200"
block|}
expr_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameTableScenariosWithDmlOperations
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'in[0-9]+'.'out[0-9]+'"
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|String
index|[]
name|originalFullAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|}
decl_stmt|;
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in100"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalFullAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 2 tables are replicated to target.
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"in100"
block|}
decl_stmt|;
name|String
index|[]
name|bootstrapTables
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
comment|// Rename tables and do some operations.
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table in1 rename to out1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into out1 values(2, 100)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out1 rename to in4"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table in100 rename to out100"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into out100 values(2, 100)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out100 rename to in400"
argument_list|)
expr_stmt|;
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in4"
block|,
literal|"in400"
block|}
expr_stmt|;
name|bootstrapTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in4"
block|,
literal|"in400"
block|}
expr_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameTableScenariosAcidTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'in[0-9]+'.'out[0-9]+'"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_ACID_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|,
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"out4"
block|}
decl_stmt|;
name|String
index|[]
name|originalFullAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in2"
block|,
literal|"out5"
block|}
decl_stmt|;
name|String
index|[]
name|originalMMAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"out3"
block|,
literal|"out6"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalFullAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalMMAcidTables
argument_list|,
name|CreateTableType
operator|.
name|MM_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 1 tables are replicated to target. Acid tables are not dumped.
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|}
decl_stmt|;
name|String
index|[]
name|bootstrapTables
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|,
literal|null
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
comment|// Rename tables to make them satisfy the filter and enable acid tables.
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out3 rename to in3"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out4 rename to in4"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out5 rename to in5"
argument_list|)
expr_stmt|;
name|dumpWithClause
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_ACID_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='true'"
argument_list|)
expr_stmt|;
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"in2"
block|,
literal|"in3"
block|,
literal|"in4"
block|,
literal|"in5"
block|}
expr_stmt|;
name|bootstrapTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in2"
block|,
literal|"in3"
block|,
literal|"in4"
block|,
literal|"in5"
block|}
expr_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|,
literal|null
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameTableScenariosExternalTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'in[0-9]+'.'out[0-9]+'"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|ReplicationTestUtils
operator|.
name|externalTableBasePathWithClause
argument_list|(
name|REPLICA_EXTERNAL_BASE
argument_list|,
name|replica
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_ACID_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|,
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"out4"
block|}
decl_stmt|;
name|String
index|[]
name|originalExternalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in2"
block|,
literal|"out5"
block|}
decl_stmt|;
name|String
index|[]
name|originalMMAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in3"
block|,
literal|"out6"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalExternalTables
argument_list|,
name|CreateTableType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalMMAcidTables
argument_list|,
name|CreateTableType
operator|.
name|MM_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 1 tables are replicated to target. Acid and external tables are not dumped.
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|}
decl_stmt|;
name|String
index|[]
name|bootstrapTables
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
comment|// Rename tables to make them satisfy the filter and enable acid and external tables.
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out4 rename to in4"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out5 rename to in5"
argument_list|)
expr_stmt|;
name|dumpWithClause
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_ACID_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='true'"
argument_list|)
expr_stmt|;
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"in2"
block|,
literal|"in3"
block|,
literal|"in4"
block|,
literal|"in5"
block|}
expr_stmt|;
name|bootstrapTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in2"
block|,
literal|"in3"
block|,
literal|"in4"
block|,
literal|"in5"
block|}
expr_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
name|dumpWithClause
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='true'"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out6 rename to in6"
argument_list|)
comment|// external table bootstrap.
operator|.
name|run
argument_list|(
literal|"alter table in5 rename to out7"
argument_list|)
comment|// in5 should be deleted.
operator|.
name|run
argument_list|(
literal|"alter table out7 rename to in7"
argument_list|)
comment|// MM table bootstrap.
operator|.
name|run
argument_list|(
literal|"alter table in1 rename to out10"
argument_list|)
comment|// in1 should be deleted.
operator|.
name|run
argument_list|(
literal|"alter table out10 rename to in11"
argument_list|)
expr_stmt|;
comment|// normal table bootstrapped
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in2"
block|,
literal|"in3"
block|,
literal|"in4"
block|,
literal|"in11"
block|,
literal|"in6"
block|,
literal|"in7"
block|}
expr_stmt|;
name|bootstrapTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in11"
block|,
literal|"in6"
block|,
literal|"in7"
block|}
expr_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameTableScenariosWithReplaceExternalTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|ReplicationTestUtils
operator|.
name|externalTableBasePathWithClause
argument_list|(
name|REPLICA_EXTERNAL_BASE
argument_list|,
name|replica
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|)
decl_stmt|;
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'(in[0-9]+)|(out4)|(out5)|(out1500)'"
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|String
index|[]
name|originalExternalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"in2"
block|,
literal|"out3"
block|,
literal|"out4"
block|,
literal|"out10"
block|,
literal|"out11"
block|,
literal|"out1500"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalExternalTables
argument_list|,
name|CreateTableType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
comment|// Rename the tables to satisfy the condition also replace the policy.
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out4 rename to in5"
argument_list|)
comment|// Old name matching old, new name matching both
operator|.
name|run
argument_list|(
literal|"alter table out3 rename to in6"
argument_list|)
comment|// Old name not matching old and new name matching both
operator|.
name|run
argument_list|(
literal|"alter table in1 rename to out5"
argument_list|)
comment|// Old name matching old, new name matching only old.
operator|.
name|run
argument_list|(
literal|"alter table in2 rename to in7"
argument_list|)
comment|// Old name matching old, only new name not matching new.
operator|.
name|run
argument_list|(
literal|"alter table out1500 rename to out1501"
argument_list|)
comment|// Old name matching old, only old name not matching new.
operator|.
name|run
argument_list|(
literal|"alter table out10 rename to in10"
argument_list|)
comment|// Old name not matching old and new name matching both
operator|.
name|run
argument_list|(
literal|"drop table in10"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out11 rename to out12"
argument_list|)
comment|// Old name not matching old and new name not matching both
operator|.
name|run
argument_list|(
literal|"alter table out12 rename to in12"
argument_list|)
expr_stmt|;
comment|// Old name not matching old and new name matching both
name|String
name|newPolicy
init|=
name|primaryDbName
operator|+
literal|".'(in[0-9]+)|(out1500)|(in2)'"
decl_stmt|;
name|dumpWithClause
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|)
expr_stmt|;
comment|// in2 should be dropped.
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in5"
block|,
literal|"in6"
block|,
literal|"in7"
block|,
literal|"in12"
block|}
decl_stmt|;
name|String
index|[]
name|bootstrapTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in5"
block|,
literal|"in6"
block|,
literal|"in7"
block|,
literal|"in12"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|newPolicy
argument_list|,
name|replPolicy
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameTableScenariosWithReplacePolicyDMLOperattion
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".'(in[0-9]+)|(out5000)|(out5001)'.'(in100)|(in200)|(in305)'"
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|String
index|[]
name|originalFullAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"in2"
block|,
literal|"out3"
block|,
literal|"out4"
block|,
literal|"out5"
block|,
literal|"in100"
block|,
literal|"in200"
block|,
literal|"in300"
block|,
literal|"out3000"
block|,
literal|"out4000"
block|,
literal|"out4001"
block|}
decl_stmt|;
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in400"
block|,
literal|"out500"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalFullAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 4 tables are replicated to target.
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"in2"
block|,
literal|"in300"
block|,
literal|"in400"
block|}
decl_stmt|;
name|String
index|[]
name|bootstrapTables
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
comment|// Rename the tables to satisfy the condition also replace the policy.
name|String
name|newPolicy
init|=
name|primaryDbName
operator|+
literal|".'(in[0-9]+)|(out3000)'.'in2'"
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table in200 rename to in2000"
argument_list|)
comment|// Old name not matching old, old and new matching new policy.
operator|.
name|run
argument_list|(
literal|"alter table in400 rename to out400"
argument_list|)
comment|// Old name matching new and old policy, new matching none.
operator|.
name|run
argument_list|(
literal|"alter table out500 rename to in500"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out3000 rename to in3000"
argument_list|)
comment|// Old name not matching old policy and both name matching new
operator|.
name|run
argument_list|(
literal|"alter table in1 rename to out7"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table in300 rename to in301"
argument_list|)
comment|// for rename its all matching to matching.
operator|.
name|run
argument_list|(
literal|"alter table in301 rename to in305"
argument_list|)
comment|// ideally in305 bootstrap should not happen.
operator|.
name|run
argument_list|(
literal|"alter table out3 rename to in8"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out4 rename to in9"
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table in9"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out5 rename to in10"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table in10 rename to out11"
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table out11"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into in100 values(2, 100)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into in8 values(2, 100)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into in305 values(2, 100)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into in3000 values (2, 100)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into in2000 values (2, 100)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into in500 values(2, 100)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out4000 rename to out5000"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out5000 rename to in5000"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into in5000 values (2, 100)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out4001 rename to out5001"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out5001 rename to out5002"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into out5002 values (2, 100)"
argument_list|)
expr_stmt|;
comment|// in2 should be dropped.
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in100"
block|,
literal|"in2000"
block|,
literal|"in8"
block|,
literal|"in305"
block|,
literal|"in500"
block|,
literal|"in3000"
block|,
literal|"in5000"
block|}
expr_stmt|;
name|bootstrapTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in500"
block|,
literal|"in8"
block|,
literal|"in5000"
block|,
literal|"in305"
block|,
literal|"in3000"
block|,
literal|"in2000"
block|,
literal|"in100"
block|}
expr_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|newPolicy
argument_list|,
name|replPolicy
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|)
expr_stmt|;
comment|// No table filter
name|replPolicy
operator|=
name|newPolicy
expr_stmt|;
name|newPolicy
operator|=
name|primaryDbName
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table in100 rename to in12"
argument_list|)
comment|// should be just rename, but for replace its always bootstrap
operator|.
name|run
argument_list|(
literal|"alter table in2000 rename to out12"
argument_list|)
comment|// bootstrap by replace policy handler
operator|.
name|run
argument_list|(
literal|"alter table out400 rename to in400"
argument_list|)
comment|// bootstrap by rename
operator|.
name|run
argument_list|(
literal|"alter table out7 rename to in1"
argument_list|)
comment|// bootstrap by rename
operator|.
name|run
argument_list|(
literal|"alter table in305 rename to in301"
argument_list|)
comment|// should be just rename, but for replace its always bootstrap
operator|.
name|run
argument_list|(
literal|"alter table in301 rename to in300"
argument_list|)
comment|// should be just rename, but for replace its always bootstrap
operator|.
name|run
argument_list|(
literal|"alter table in8 rename to out3"
argument_list|)
comment|// should be just rename, but for replace its always bootstrap
operator|.
name|run
argument_list|(
literal|"insert into in2 values(2, 100)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into in1 values(2, 100)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into in400 values(2, 100)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table out3"
argument_list|)
expr_stmt|;
comment|// table will be removed from bootstrap list.
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in12"
block|,
literal|"in400"
block|,
literal|"in1"
block|,
literal|"in300"
block|,
literal|"out12"
block|,
literal|"in500"
block|,
literal|"in3000"
block|,
literal|"in2"
block|,
literal|"in5000"
block|,
literal|"out5002"
block|}
expr_stmt|;
name|bootstrapTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"out12"
block|,
literal|"in2"
block|,
literal|"in400"
block|,
literal|"in1"
block|,
literal|"in300"
block|,
literal|"in12"
block|,
literal|"out5002"
block|}
expr_stmt|;
name|replicateAndVerify
argument_list|(
name|newPolicy
argument_list|,
name|replPolicy
argument_list|,
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameTableScenariosUpgrade
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Policy with no table level filter, no ACID and external table.
name|String
name|replPolicy
init|=
name|primaryDbName
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|ReplicationTestUtils
operator|.
name|externalTableBasePathWithClause
argument_list|(
name|REPLICA_EXTERNAL_BASE
argument_list|,
name|replica
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|,
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"out4"
block|}
decl_stmt|;
name|String
index|[]
name|originalExternalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in2"
block|,
literal|"out5"
block|}
decl_stmt|;
name|String
index|[]
name|originalAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in3"
block|,
literal|"out6"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalExternalTables
argument_list|,
name|CreateTableType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
comment|// Only NON_ACID table replication is done.
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"out4"
block|}
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
name|replicatedTables
argument_list|)
decl_stmt|;
name|originalNonAcidTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in7"
block|,
literal|"out10"
block|}
expr_stmt|;
name|originalExternalTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in8"
block|,
literal|"out11"
block|}
expr_stmt|;
name|originalAcidTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in9"
block|,
literal|"out12"
block|}
expr_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalExternalTables
argument_list|,
name|CreateTableType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalAcidTables
argument_list|,
name|CreateTableType
operator|.
name|MM_ACID
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out4 rename to in4"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out5 rename to in5"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table out6 rename to in6"
argument_list|)
expr_stmt|;
comment|// Table level replication with ACID and EXTERNAL table.
name|String
name|newReplPolicy
init|=
name|primaryDbName
operator|+
literal|".'in[0-9]+'.'in8'"
decl_stmt|;
name|dumpWithClause
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_ACID_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='true'"
argument_list|)
expr_stmt|;
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"in2"
block|,
literal|"in3"
block|,
literal|"in4"
block|,
literal|"in5"
block|,
literal|"in6"
block|,
literal|"in7"
block|,
literal|"in9"
block|}
expr_stmt|;
name|String
index|[]
name|bootstrapTables
init|=
operator|new
name|String
index|[]
block|{
literal|"in2"
block|,
literal|"in3"
block|,
literal|"in4"
block|,
literal|"in5"
block|,
literal|"in6"
block|,
literal|"in9"
block|}
decl_stmt|;
name|lastReplId
operator|=
name|replicateAndVerify
argument_list|(
name|newReplPolicy
argument_list|,
name|replPolicy
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table in4 rename to out4"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table in5 rename to out5"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table in6 rename to out6"
argument_list|)
expr_stmt|;
name|dumpWithClause
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='true'"
argument_list|)
expr_stmt|;
comment|// Database replication with ACID and EXTERNAL table.
name|replicatedTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"in1"
block|,
literal|"in2"
block|,
literal|"in3"
block|,
literal|"out4"
block|,
literal|"out5"
block|,
literal|"out6"
block|,
literal|"in7"
block|,
literal|"in8"
block|,
literal|"in9"
block|,
literal|"out10"
block|,
literal|"out11"
block|,
literal|"out12"
block|}
expr_stmt|;
name|bootstrapTables
operator|=
operator|new
name|String
index|[]
block|{
literal|"out4"
block|,
literal|"out5"
block|,
literal|"out6"
block|,
literal|"in8"
block|,
literal|"out10"
block|,
literal|"out11"
block|,
literal|"out12"
block|}
expr_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|newReplPolicy
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
name|bootstrapTables
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

