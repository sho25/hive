begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|gzip
operator|.
name|GzipJSONMessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|ReplExternalTables
operator|.
name|FILE_NAME
import|;
end_import

begin_comment
comment|/**  * Tests Table level replication scenarios.  */
end_comment

begin_class
specifier|public
class|class
name|TestTableLevelReplicationScenarios
extends|extends
name|BaseReplicationScenariosAcidTables
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REPLICA_EXTERNAL_BASE
init|=
literal|"/replica_external_base"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_MESSAGE_FACTORY
operator|.
name|getHiveName
argument_list|()
argument_list|,
name|GzipJSONMessageEncoder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_DUMP_METADATA_ONLY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DISTCP_DOAS_USER
operator|.
name|varname
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|internalBeforeClassSetup
argument_list|(
name|overrides
argument_list|,
name|TestTableLevelReplicationScenarios
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
enum|enum
name|CreateTableType
block|{
name|FULL_ACID
block|,
name|MM_ACID
block|,
name|NON_ACID
block|,
name|EXTERNAL
block|}
class|class
name|CreateTableInfo
block|{
name|String
name|tableName
decl_stmt|;
name|CreateTableType
name|type
decl_stmt|;
name|boolean
name|isPartitioned
decl_stmt|;
name|CreateTableInfo
parameter_list|(
name|String
name|tableName
parameter_list|,
name|CreateTableType
name|type
parameter_list|,
name|boolean
name|isPartitioned
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|isPartitioned
operator|=
name|isPartitioned
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createTables
parameter_list|(
name|List
argument_list|<
name|CreateTableInfo
argument_list|>
name|createTblsInfo
parameter_list|)
throws|throws
name|Throwable
block|{
for|for
control|(
name|CreateTableInfo
name|tblInfo
range|:
name|createTblsInfo
control|)
block|{
name|StringBuilder
name|strBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create "
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblInfo
operator|.
name|type
operator|==
name|CreateTableType
operator|.
name|EXTERNAL
condition|)
block|{
name|strBuilder
operator|.
name|append
argument_list|(
literal|" external "
argument_list|)
expr_stmt|;
block|}
name|strBuilder
operator|.
name|append
argument_list|(
literal|" table "
argument_list|)
operator|.
name|append
argument_list|(
name|primaryDbName
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|tblInfo
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tblInfo
operator|.
name|isPartitioned
condition|)
block|{
name|strBuilder
operator|.
name|append
argument_list|(
literal|" (a int) partitioned by (b int) "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|strBuilder
operator|.
name|append
argument_list|(
literal|" (a int, b int) "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tblInfo
operator|.
name|type
operator|==
name|CreateTableType
operator|.
name|FULL_ACID
condition|)
block|{
name|strBuilder
operator|.
name|append
argument_list|(
literal|" clustered by (a) into 2 buckets stored as orc "
operator|+
literal|"tblproperties (\"transactional\"=\"true\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tblInfo
operator|.
name|type
operator|==
name|CreateTableType
operator|.
name|MM_ACID
condition|)
block|{
name|strBuilder
operator|.
name|append
argument_list|(
literal|" tblproperties(\"transactional\"=\"true\", "
operator|+
literal|"\"transactional_properties\"=\"insert_only\")"
argument_list|)
expr_stmt|;
block|}
name|String
name|createTableCmd
init|=
name|strBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
name|createTableCmd
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|tblInfo
operator|.
name|tableName
operator|+
literal|" values(1, 10)"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createTables
parameter_list|(
name|String
index|[]
name|tableNames
parameter_list|,
name|CreateTableType
name|type
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|CreateTableInfo
argument_list|>
name|createTablesInfo
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tableNames
control|)
block|{
name|createTablesInfo
operator|.
name|add
argument_list|(
operator|new
name|CreateTableInfo
argument_list|(
name|tblName
argument_list|,
name|type
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|createTables
argument_list|(
name|createTablesInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|replicateAndVerify
parameter_list|(
name|String
name|replPolicy
parameter_list|,
name|String
name|lastReplId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
parameter_list|,
name|String
index|[]
name|expectedTables
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|dumpWithClause
operator|==
literal|null
condition|)
block|{
name|dumpWithClause
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|loadWithClause
operator|==
literal|null
condition|)
block|{
name|loadWithClause
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|// For bootstrap replication, drop the target database before triggering it.
if|if
condition|(
name|lastReplId
operator|==
literal|null
condition|)
block|{
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|replPolicy
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|expectedTables
argument_list|)
expr_stmt|;
return|return
name|tuple
operator|.
name|lastReplicationId
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicBootstrapWithIncludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|}
decl_stmt|;
name|String
index|[]
name|originalFullAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t3"
block|,
literal|"t4"
block|}
decl_stmt|;
name|String
index|[]
name|originalMMAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t5"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalFullAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalMMAcidTables
argument_list|,
name|CreateTableType
operator|.
name|MM_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 2 tables are replicated to target.
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".['t1', 't4', 't5']"
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t4"
block|,
literal|"t5"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicBootstrapWithIncludeAndExcludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t11"
block|,
literal|"t2"
block|,
literal|"t3"
block|,
literal|"t100"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 3 tables are replicated to target.
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".['t1*', 't3'].['t100']"
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t11"
block|,
literal|"t3"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicIncrementalWithIncludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tupleBootstrap
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tupleBootstrap
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|}
decl_stmt|;
name|String
index|[]
name|originalFullAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t3"
block|,
literal|"t4"
block|}
decl_stmt|;
name|String
index|[]
name|originalMMAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t5"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalFullAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalMMAcidTables
argument_list|,
name|CreateTableType
operator|.
name|MM_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 2 tables are replicated to target.
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".['t1', 't5']"
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t5"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|tupleBootstrap
operator|.
name|lastReplicationId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicIncrementalWithIncludeAndExcludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tupleBootstrap
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tupleBootstrap
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|String
index|[]
name|originalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t11"
block|,
literal|"t2"
block|,
literal|"t3"
block|,
literal|"t111"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 3 tables are replicated to target.
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".['t1+', 't2'].['t11', 't3']"
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t111"
block|,
literal|"t2"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|tupleBootstrap
operator|.
name|lastReplicationId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplDumpWithIncorrectTablePolicy
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t11"
block|,
literal|"t2"
block|,
literal|"t3"
block|,
literal|"t111"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// Invalid repl policy where abrubtly placed DOT which causes ParseException during REPL dump.
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|boolean
name|failed
decl_stmt|;
name|String
index|[]
name|invalidReplPolicies
init|=
operator|new
name|String
index|[]
block|{
name|primaryDbName
operator|+
literal|".t1.t2"
block|,
comment|// Two explicit table names not allowed.
name|primaryDbName
operator|+
literal|".['t1'].t2"
block|,
comment|// Table name and include list not allowed.
name|primaryDbName
operator|+
literal|".t1.['t2']"
block|,
comment|// Table name and exclude list not allowed.
name|primaryDbName
operator|+
literal|".[t1].t2"
block|,
comment|// Table name and include list not allowed.
name|primaryDbName
operator|+
literal|".['t1+']."
block|,
comment|// Abrubtly ended dot.
name|primaryDbName
operator|+
literal|"..[]"
comment|// Multiple dots
block|}
decl_stmt|;
for|for
control|(
name|String
name|replPolicy
range|:
name|invalidReplPolicies
control|)
block|{
name|failed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception: {}"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|ParseException
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|failed
argument_list|)
expr_stmt|;
block|}
comment|// Invalid pattern where we didn't enclose table pattern within single or double quotes.
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".[t1].[t2]"
decl_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception: {}"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|SemanticException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|ErrorMsg
operator|.
name|REPL_INVALID_DB_OR_TABLE_PATTERN
operator|.
name|getMsg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|failed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFullDbBootstrapReplicationWithDifferentReplPolicyFormats
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t200"
block|,
literal|"t3333"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// List of repl policy formats that leads to Full DB replication.
name|String
index|[]
name|fullDbReplPolicies
init|=
operator|new
name|String
index|[]
block|{
name|primaryDbName
operator|+
literal|".['.*?']"
block|,
name|primaryDbName
operator|+
literal|".['.*?'].[]"
block|}
decl_stmt|;
comment|// Replicate and verify if all 3 tables are replicated to target.
for|for
control|(
name|String
name|replPolicy
range|:
name|fullDbReplPolicies
control|)
block|{
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|originalTables
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCaseInSensitiveNatureOfReplPolicy
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"aA11"
block|,
literal|"B2"
block|,
literal|"Cc3"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if 2 tables are replicated as per policy.
name|String
name|replPolicy
init|=
name|primaryDbName
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|".['.*a1+', 'cc3', 'B2'].['AA1+', 'b2']"
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"cc3"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapAcidTablesIncrementalPhaseWithIncludeAndExcludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"b2"
block|}
decl_stmt|;
name|String
index|[]
name|originalFullAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"b1"
block|}
decl_stmt|;
name|String
index|[]
name|originalMMAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a3"
block|,
literal|"a4"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalFullAcidTables
argument_list|,
name|CreateTableType
operator|.
name|FULL_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalMMAcidTables
argument_list|,
name|CreateTableType
operator|.
name|MM_ACID
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only non-acid tables are replicated to target.
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithoutAcidClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".['a[0-9]+', 'b1'].['a4']"
decl_stmt|;
name|String
index|[]
name|bootstrapReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|}
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|dumpWithoutAcidClause
argument_list|,
literal|null
argument_list|,
name|bootstrapReplicatedTables
argument_list|)
decl_stmt|;
comment|// Enable acid tables for replication.
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithAcidBootstrapClause
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|ReplUtils
operator|.
name|REPL_DUMP_INCLUDE_ACID_TABLES
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_ACID_TABLES
operator|+
literal|"'='true'"
argument_list|)
decl_stmt|;
name|String
index|[]
name|incrementalReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|,
literal|"a3"
block|,
literal|"b1"
block|}
decl_stmt|;
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithAcidBootstrapClause
argument_list|,
literal|null
argument_list|,
name|incrementalReplicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapExternalTablesWithIncludeAndExcludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"b2"
block|}
decl_stmt|;
name|String
index|[]
name|originalExternalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"b1"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalExternalTables
argument_list|,
name|CreateTableType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
comment|// Replicate and verify if only 2 tables are replicated to target.
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|ReplicationTestUtils
operator|.
name|externalTableBasePathWithClause
argument_list|(
name|REPLICA_EXTERNAL_BASE
argument_list|,
name|replica
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|)
decl_stmt|;
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".['a[0-9]+', 'b2'].['a1']"
decl_stmt|;
name|String
index|[]
name|replicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"b2"
block|}
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
comment|// the _external_tables_file info should be created as external tables are to be replicated.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the external table info contains only table "a2".
name|ReplicationTestUtils
operator|.
name|assertExternalFileInfo
argument_list|(
name|primary
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a2"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|replicatedTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapExternalTablesIncrementalPhaseWithIncludeAndExcludeList
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|originalNonAcidTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"b2"
block|}
decl_stmt|;
name|String
index|[]
name|originalExternalTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"b1"
block|}
decl_stmt|;
name|createTables
argument_list|(
name|originalNonAcidTables
argument_list|,
name|CreateTableType
operator|.
name|NON_ACID
argument_list|)
expr_stmt|;
name|createTables
argument_list|(
name|originalExternalTables
argument_list|,
name|CreateTableType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
comment|// Bootstrap should exclude external tables.
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|ReplicationTestUtils
operator|.
name|externalTableBasePathWithClause
argument_list|(
name|REPLICA_EXTERNAL_BASE
argument_list|,
name|replica
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|String
name|replPolicy
init|=
name|primaryDbName
operator|+
literal|".['a[0-9]+', 'b2'].['a1']"
decl_stmt|;
name|String
index|[]
name|bootstrapReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"b2"
block|}
decl_stmt|;
name|String
name|lastReplId
init|=
name|replicateAndVerify
argument_list|(
name|replPolicy
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|,
name|loadWithClause
argument_list|,
name|bootstrapReplicatedTables
argument_list|)
decl_stmt|;
comment|// Enable external tables replication and bootstrap in incremental phase.
name|String
index|[]
name|incrementalReplicatedTables
init|=
operator|new
name|String
index|[]
block|{
literal|"a2"
block|,
literal|"b2"
block|}
decl_stmt|;
name|dumpWithClause
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|replPolicy
argument_list|,
name|lastReplId
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
comment|// the _external_tables_file info should be created as external tables are to be replicated.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the external table info contains only table "a2".
name|ReplicationTestUtils
operator|.
name|assertExternalFileInfo
argument_list|(
name|primary
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a2"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|incrementalReplicatedTables
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

