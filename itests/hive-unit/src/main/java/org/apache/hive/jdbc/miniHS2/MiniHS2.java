begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapItUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|MiniLlapCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|ZooKeeperHiveHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|MiniDFSShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|MiniMrShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|CLIServiceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|SessionHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|ThriftBinaryCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|ThriftCLIServiceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|ThriftHttpCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
operator|.
name|HiveServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MiniHS2
extends|extends
name|AbstractHiveService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MiniHS2
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HS2_BINARY_MODE
init|=
literal|"binary"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HS2_HTTP_MODE
init|=
literal|"http"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|driverName
init|=
literal|"org.apache.hive.jdbc.HiveDriver"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FsPermission
name|FULL_PERM
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|00777
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FsPermission
name|WRITE_ALL_PERM
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|00733
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tmpDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
decl_stmt|;
specifier|private
name|HiveServer2
name|hiveServer2
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|File
name|baseDir
decl_stmt|;
specifier|private
specifier|final
name|Path
name|baseFsDir
decl_stmt|;
specifier|private
name|MiniMrShim
name|mr
decl_stmt|;
specifier|private
name|MiniDFSShim
name|dfs
decl_stmt|;
specifier|private
name|MiniLlapCluster
name|llapCluster
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|localFS
decl_stmt|;
specifier|private
name|boolean
name|useMiniKdc
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|String
name|serverPrincipal
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isMetastoreRemote
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|cleanupLocalDirOnStartup
decl_stmt|;
specifier|private
name|MiniClusterType
name|miniClusterType
init|=
name|MiniClusterType
operator|.
name|LOCALFS_ONLY
decl_stmt|;
specifier|public
enum|enum
name|MiniClusterType
block|{
name|MR
block|,
name|TEZ
block|,
name|LLAP
block|,
name|LOCALFS_ONLY
block|;   }
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
specifier|private
name|MiniClusterType
name|miniClusterType
init|=
name|MiniClusterType
operator|.
name|LOCALFS_ONLY
decl_stmt|;
specifier|private
name|boolean
name|useMiniKdc
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|serverPrincipal
decl_stmt|;
specifier|private
name|String
name|serverKeytab
decl_stmt|;
specifier|private
name|boolean
name|isHTTPTransMode
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|isMetastoreRemote
decl_stmt|;
specifier|private
name|boolean
name|usePortsFromConf
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|authType
init|=
literal|"KERBEROS"
decl_stmt|;
specifier|private
name|boolean
name|isHA
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|cleanupLocalDirOnStartup
init|=
literal|true
decl_stmt|;
specifier|public
name|Builder
parameter_list|()
block|{     }
specifier|public
name|Builder
name|withMiniMR
parameter_list|()
block|{
name|this
operator|.
name|miniClusterType
operator|=
name|MiniClusterType
operator|.
name|MR
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withMiniKdc
parameter_list|(
name|String
name|serverPrincipal
parameter_list|,
name|String
name|serverKeytab
parameter_list|)
block|{
name|this
operator|.
name|useMiniKdc
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|serverPrincipal
operator|=
name|serverPrincipal
expr_stmt|;
name|this
operator|.
name|serverKeytab
operator|=
name|serverKeytab
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withAuthenticationType
parameter_list|(
name|String
name|authType
parameter_list|)
block|{
name|this
operator|.
name|authType
operator|=
name|authType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withRemoteMetastore
parameter_list|()
block|{
name|this
operator|.
name|isMetastoreRemote
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withConf
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withHA
parameter_list|()
block|{
name|this
operator|.
name|isHA
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Start HS2 with HTTP transport mode, default is binary mode      * @return this Builder      */
specifier|public
name|Builder
name|withHTTPTransport
parameter_list|()
block|{
name|this
operator|.
name|isHTTPTransMode
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|cleanupLocalDirOnStartup
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|cleanupLocalDirOnStartup
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MiniHS2
name|build
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniClusterType
operator|==
name|MiniClusterType
operator|.
name|MR
operator|&&
name|useMiniKdc
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't create secure miniMr ... yet"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isHTTPTransMode
condition|)
block|{
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
argument_list|,
name|HS2_HTTP_MODE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
argument_list|,
name|HS2_BINARY_MODE
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MiniHS2
argument_list|(
name|hiveConf
argument_list|,
name|miniClusterType
argument_list|,
name|useMiniKdc
argument_list|,
name|serverPrincipal
argument_list|,
name|serverKeytab
argument_list|,
name|isMetastoreRemote
argument_list|,
name|usePortsFromConf
argument_list|,
name|authType
argument_list|,
name|isHA
argument_list|,
name|cleanupLocalDirOnStartup
argument_list|)
return|;
block|}
block|}
specifier|public
name|MiniMrShim
name|getMr
parameter_list|()
block|{
return|return
name|mr
return|;
block|}
specifier|public
name|void
name|setMr
parameter_list|(
name|MiniMrShim
name|mr
parameter_list|)
block|{
name|this
operator|.
name|mr
operator|=
name|mr
expr_stmt|;
block|}
specifier|public
name|MiniDFSShim
name|getDfs
parameter_list|()
block|{
return|return
name|dfs
return|;
block|}
specifier|public
name|void
name|setDfs
parameter_list|(
name|MiniDFSShim
name|dfs
parameter_list|)
block|{
name|this
operator|.
name|dfs
operator|=
name|dfs
expr_stmt|;
block|}
specifier|public
name|FileSystem
name|getLocalFS
parameter_list|()
block|{
return|return
name|localFS
return|;
block|}
specifier|public
name|MiniClusterType
name|getMiniClusterType
parameter_list|()
block|{
return|return
name|miniClusterType
return|;
block|}
specifier|public
name|void
name|setMiniClusterType
parameter_list|(
name|MiniClusterType
name|miniClusterType
parameter_list|)
block|{
name|this
operator|.
name|miniClusterType
operator|=
name|miniClusterType
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseMiniKdc
parameter_list|()
block|{
return|return
name|useMiniKdc
return|;
block|}
specifier|private
name|MiniHS2
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|MiniClusterType
name|miniClusterType
parameter_list|,
name|boolean
name|useMiniKdc
parameter_list|,
name|String
name|serverPrincipal
parameter_list|,
name|String
name|serverKeytab
parameter_list|,
name|boolean
name|isMetastoreRemote
parameter_list|,
name|boolean
name|usePortsFromConf
parameter_list|,
name|String
name|authType
parameter_list|,
name|boolean
name|isHA
parameter_list|,
name|boolean
name|cleanupLocalDirOnStartup
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Always use localhost for hostname as some tests like SSL CN validation ones
comment|// are tied to localhost being present in the certificate name
name|super
argument_list|(
name|hiveConf
argument_list|,
literal|"localhost"
argument_list|,
operator|(
name|usePortsFromConf
condition|?
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_PORT
argument_list|)
else|:
name|MetaStoreUtils
operator|.
name|findFreePort
argument_list|()
operator|)
argument_list|,
operator|(
name|usePortsFromConf
condition|?
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PORT
argument_list|)
else|:
name|MetaStoreUtils
operator|.
name|findFreePort
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setLongVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_MAX_START_ATTEMPTS
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setTimeVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SLEEP_INTERVAL_BETWEEN_START_ATTEMPTS
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|miniClusterType
operator|=
name|miniClusterType
expr_stmt|;
name|this
operator|.
name|useMiniKdc
operator|=
name|useMiniKdc
expr_stmt|;
name|this
operator|.
name|serverPrincipal
operator|=
name|serverPrincipal
expr_stmt|;
name|this
operator|.
name|isMetastoreRemote
operator|=
name|isMetastoreRemote
expr_stmt|;
name|this
operator|.
name|cleanupLocalDirOnStartup
operator|=
name|cleanupLocalDirOnStartup
expr_stmt|;
name|baseDir
operator|=
name|getBaseDir
argument_list|()
expr_stmt|;
name|localFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
decl_stmt|;
if|if
condition|(
name|miniClusterType
operator|!=
name|MiniClusterType
operator|.
name|LOCALFS_ONLY
condition|)
block|{
comment|// Initialize dfs
name|dfs
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getMiniDfs
argument_list|(
name|hiveConf
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|isHA
argument_list|)
expr_stmt|;
name|fs
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|String
name|uriString
init|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Initialize the execution engine based on cluster type
switch|switch
condition|(
name|miniClusterType
condition|)
block|{
case|case
name|TEZ
case|:
comment|// TODO: This should be making use of confDir to load configs setup for Tez, etc.
name|mr
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getMiniTezCluster
argument_list|(
name|hiveConf
argument_list|,
literal|2
argument_list|,
name|uriString
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|LLAP
case|:
if|if
condition|(
name|usePortsFromConf
condition|)
block|{
name|hiveConf
operator|.
name|setBoolean
argument_list|(
literal|"minillap.usePortsFromConf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|llapCluster
operator|=
name|LlapItUtils
operator|.
name|startAndGetMiniLlapCluster
argument_list|(
name|hiveConf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mr
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getMiniTezCluster
argument_list|(
name|hiveConf
argument_list|,
literal|2
argument_list|,
name|uriString
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|MR
case|:
name|mr
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getMiniMrCluster
argument_list|(
name|hiveConf
argument_list|,
literal|2
argument_list|,
name|uriString
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported cluster type "
operator|+
name|mr
argument_list|)
throw|;
block|}
comment|// store the config in system properties
name|mr
operator|.
name|setupConfiguration
argument_list|(
name|getHiveConf
argument_list|()
argument_list|)
expr_stmt|;
name|baseFsDir
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|,
literal|"/base"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This is FS only mode, just initialize the dfs root directory.
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|baseFsDir
operator|=
operator|new
name|Path
argument_list|(
literal|"file://"
operator|+
name|baseDir
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cleanupLocalDirOnStartup
condition|)
block|{
comment|// Cleanup baseFsDir since it can be shared across tests.
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to cleanup baseFsDir: {} while setting up MiniHS2"
argument_list|,
name|baseDir
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|baseFsDir
operator|.
name|depth
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
comment|// Avoid "/tmp", directories closer to "/"
name|fs
operator|.
name|delete
argument_list|(
name|baseFsDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|useMiniKdc
condition|)
block|{
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_PRINCIPAL
argument_list|,
name|serverPrincipal
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_KERBEROS_KEYTAB
argument_list|,
name|serverKeytab
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
argument_list|,
name|authType
argument_list|)
expr_stmt|;
block|}
name|String
name|metaStoreURL
init|=
literal|"jdbc:derby:;databaseName="
operator|+
name|baseDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test_metastore;create=true"
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|baseFsDir
argument_list|)
expr_stmt|;
name|Path
name|wareHouseDir
init|=
operator|new
name|Path
argument_list|(
name|baseFsDir
argument_list|,
literal|"warehouse"
argument_list|)
decl_stmt|;
comment|// Create warehouse with 777, so that user impersonation has no issues.
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|wareHouseDir
argument_list|,
name|FULL_PERM
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|wareHouseDir
argument_list|)
expr_stmt|;
name|setWareHouseDir
argument_list|(
name|wareHouseDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORECONNECTURLKEY
operator|.
name|varname
argument_list|,
name|metaStoreURL
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORECONNECTURLKEY
argument_list|,
name|metaStoreURL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|usePortsFromConf
condition|)
block|{
comment|// reassign a new port, just in case if one of the MR services grabbed the last one
name|setBinaryPort
argument_list|(
name|MetaStoreUtils
operator|.
name|findFreePort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_BIND_HOST
argument_list|,
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_PORT
argument_list|,
name|getBinaryPort
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PORT
argument_list|,
name|getHttpPort
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|scratchDir
init|=
operator|new
name|Path
argument_list|(
name|baseFsDir
argument_list|,
literal|"scratch"
argument_list|)
decl_stmt|;
comment|// Create root scratchdir with write all, so that user impersonation has no issues.
name|Utilities
operator|.
name|createDirsWithPermission
argument_list|(
name|hiveConf
argument_list|,
name|scratchDir
argument_list|,
name|WRITE_ALL_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIR
operator|.
name|varname
argument_list|,
name|scratchDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|SCRATCHDIR
argument_list|,
name|scratchDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|localScratchDir
init|=
name|baseDir
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"scratch"
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LOCALSCRATCHDIR
operator|.
name|varname
argument_list|,
name|localScratchDir
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|LOCALSCRATCHDIR
argument_list|,
name|localScratchDir
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MiniHS2
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|hiveConf
argument_list|,
name|MiniClusterType
operator|.
name|LOCALFS_ONLY
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MiniHS2
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|MiniClusterType
name|clusterType
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|hiveConf
argument_list|,
name|clusterType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MiniHS2
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|MiniClusterType
name|clusterType
parameter_list|,
name|boolean
name|usePortsFromConf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|hiveConf
argument_list|,
name|clusterType
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|usePortsFromConf
argument_list|,
literal|"KERBEROS"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isMetastoreRemote
condition|)
block|{
name|int
name|metaStorePort
init|=
name|MetaStoreUtils
operator|.
name|findFreePort
argument_list|()
decl_stmt|;
name|getHiveConf
argument_list|()
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|metaStorePort
argument_list|)
expr_stmt|;
name|MetaStoreUtils
operator|.
name|startMetaStore
argument_list|(
name|metaStorePort
argument_list|,
name|ShimLoader
operator|.
name|getHadoopThriftAuthBridge
argument_list|()
argument_list|,
name|getHiveConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hiveServer2
operator|=
operator|new
name|HiveServer2
argument_list|()
expr_stmt|;
comment|// Set confOverlay parameters
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|confOverlay
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|setConfProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hiveServer2
operator|.
name|init
argument_list|(
name|getHiveConf
argument_list|()
argument_list|)
expr_stmt|;
name|hiveServer2
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForStartup
argument_list|()
expr_stmt|;
name|setStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|verifyStarted
argument_list|()
expr_stmt|;
comment|// Currently there is no way to stop the MetaStore service. It will be stopped when the
comment|// test JVM exits. This is how other tests are also using MetaStore server.
name|hiveServer2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|setStarted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|llapCluster
operator|!=
literal|null
condition|)
block|{
name|llapCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|mr
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dfs
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore errors cleaning up miniMR
block|}
block|}
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CLIServiceClient
name|getServiceClient
parameter_list|()
block|{
name|verifyStarted
argument_list|()
expr_stmt|;
return|return
name|getServiceClientInternal
argument_list|()
return|;
block|}
specifier|public
name|HiveConf
name|getServerConf
parameter_list|()
block|{
if|if
condition|(
name|hiveServer2
operator|!=
literal|null
condition|)
block|{
return|return
name|hiveServer2
operator|.
name|getHiveConf
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|CLIServiceClient
name|getServiceClientInternal
parameter_list|()
block|{
for|for
control|(
name|Service
name|service
range|:
name|hiveServer2
operator|.
name|getServices
argument_list|()
control|)
block|{
if|if
condition|(
name|service
operator|instanceof
name|ThriftBinaryCLIService
condition|)
block|{
return|return
operator|new
name|ThriftCLIServiceClient
argument_list|(
operator|(
name|ThriftBinaryCLIService
operator|)
name|service
argument_list|)
return|;
block|}
if|if
condition|(
name|service
operator|instanceof
name|ThriftHttpCLIService
condition|)
block|{
return|return
operator|new
name|ThriftCLIServiceClient
argument_list|(
operator|(
name|ThriftHttpCLIService
operator|)
name|service
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"HiveServer2 not running Thrift service"
argument_list|)
throw|;
block|}
comment|/**    * return connection URL for this server instance    * @return    * @throws Exception    */
specifier|public
name|String
name|getJdbcURL
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getJdbcURL
argument_list|(
literal|"default"
argument_list|)
return|;
block|}
comment|/**    * return connection URL for this server instance    * @param dbName - DB name to be included in the URL    * @return    * @throws Exception    */
specifier|public
name|String
name|getJdbcURL
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getJdbcURL
argument_list|(
name|dbName
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**    * return connection URL for this server instance    * @param dbName - DB name to be included in the URL    * @param sessionConfExt - Addional string to be appended to sessionConf part of url    * @return    * @throws Exception    */
specifier|public
name|String
name|getJdbcURL
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|sessionConfExt
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getJdbcURL
argument_list|(
name|dbName
argument_list|,
name|sessionConfExt
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**    * return connection URL for this server instance    * @param dbName - DB name to be included in the URL    * @param sessionConfExt - Addional string to be appended to sessionConf part of url    * @param hiveConfExt - Additional string to be appended to HiveConf part of url (excluding the ?)    * @return    * @throws Exception    */
specifier|public
name|String
name|getJdbcURL
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|sessionConfExt
parameter_list|,
name|String
name|hiveConfExt
parameter_list|)
throws|throws
name|Exception
block|{
name|sessionConfExt
operator|=
operator|(
name|sessionConfExt
operator|==
literal|null
condition|?
literal|""
else|:
name|sessionConfExt
operator|)
expr_stmt|;
name|hiveConfExt
operator|=
operator|(
name|hiveConfExt
operator|==
literal|null
condition|?
literal|""
else|:
name|hiveConfExt
operator|)
expr_stmt|;
comment|// Strip the leading ";" if provided
comment|// (this is the assumption with which we're going to start configuring sessionConfExt)
if|if
condition|(
name|sessionConfExt
operator|.
name|startsWith
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
name|sessionConfExt
operator|=
name|sessionConfExt
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUseMiniKdc
argument_list|()
condition|)
block|{
name|sessionConfExt
operator|=
literal|"principal="
operator|+
name|serverPrincipal
operator|+
literal|";"
operator|+
name|sessionConfExt
expr_stmt|;
block|}
if|if
condition|(
name|isHttpTransportMode
argument_list|()
condition|)
block|{
name|sessionConfExt
operator|=
literal|"transportMode=http;httpPath=cliservice"
operator|+
literal|";"
operator|+
name|sessionConfExt
expr_stmt|;
block|}
name|String
name|baseJdbcURL
decl_stmt|;
if|if
condition|(
name|isDynamicServiceDiscovery
argument_list|()
condition|)
block|{
name|sessionConfExt
operator|=
literal|"serviceDiscoveryMode=zooKeeper;zooKeeperNamespace="
operator|+
name|getServerConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_ZOOKEEPER_NAMESPACE
argument_list|)
operator|+
literal|";"
operator|+
name|sessionConfExt
expr_stmt|;
name|baseJdbcURL
operator|=
name|getZKBaseJdbcURL
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|baseJdbcURL
operator|=
name|getBaseJdbcURL
argument_list|()
expr_stmt|;
block|}
name|baseJdbcURL
operator|=
name|baseJdbcURL
operator|+
name|dbName
expr_stmt|;
if|if
condition|(
operator|!
name|sessionConfExt
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|baseJdbcURL
operator|=
name|baseJdbcURL
operator|+
literal|";"
operator|+
name|sessionConfExt
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|hiveConfExt
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|hiveConfExt
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|baseJdbcURL
operator|=
name|baseJdbcURL
operator|+
literal|"?"
operator|+
name|hiveConfExt
expr_stmt|;
block|}
return|return
name|baseJdbcURL
return|;
block|}
comment|/**    * Build base JDBC URL    * @return    */
specifier|public
name|String
name|getBaseJdbcURL
parameter_list|()
block|{
if|if
condition|(
name|isHttpTransportMode
argument_list|()
condition|)
block|{
return|return
literal|"jdbc:hive2://"
operator|+
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|getHttpPort
argument_list|()
operator|+
literal|"/"
return|;
block|}
else|else
block|{
return|return
literal|"jdbc:hive2://"
operator|+
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|getBinaryPort
argument_list|()
operator|+
literal|"/"
return|;
block|}
block|}
comment|/**    * Build zk base JDBC URL    * @return    */
specifier|private
name|String
name|getZKBaseJdbcURL
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
name|getServerConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveConf
operator|!=
literal|null
condition|)
block|{
name|String
name|zkEnsemble
init|=
name|ZooKeeperHiveHelper
operator|.
name|getQuorumServers
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
return|return
literal|"jdbc:hive2://"
operator|+
name|zkEnsemble
operator|+
literal|"/"
return|;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Server's HiveConf is null. Unable to read ZooKeeper configs."
argument_list|)
throw|;
block|}
specifier|private
name|boolean
name|isHttpTransportMode
parameter_list|()
block|{
name|String
name|transportMode
init|=
name|getConfProperty
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
operator|.
name|varname
argument_list|)
decl_stmt|;
return|return
name|transportMode
operator|!=
literal|null
operator|&&
operator|(
name|transportMode
operator|.
name|equalsIgnoreCase
argument_list|(
name|HS2_HTTP_MODE
argument_list|)
operator|)
return|;
block|}
specifier|private
name|boolean
name|isDynamicServiceDiscovery
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
name|getServerConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveConf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Server's HiveConf is null. Unable to read ZooKeeper configs."
argument_list|)
throw|;
block|}
if|if
condition|(
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SUPPORT_DYNAMIC_SERVICE_DISCOVERY
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|String
name|getJdbcDriverName
parameter_list|()
block|{
return|return
name|driverName
return|;
block|}
specifier|public
name|MiniMrShim
name|getMR
parameter_list|()
block|{
return|return
name|mr
return|;
block|}
specifier|public
name|MiniDFSShim
name|getDFS
parameter_list|()
block|{
return|return
name|dfs
return|;
block|}
specifier|private
name|void
name|waitForStartup
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|waitTime
init|=
literal|0
decl_stmt|;
name|long
name|startupTimeout
init|=
literal|1000L
operator|*
literal|1000L
decl_stmt|;
name|CLIServiceClient
name|hs2Client
init|=
name|getServiceClientInternal
argument_list|()
decl_stmt|;
name|SessionHandle
name|sessionHandle
init|=
literal|null
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500L
argument_list|)
expr_stmt|;
name|waitTime
operator|+=
literal|500L
expr_stmt|;
if|if
condition|(
name|waitTime
operator|>
name|startupTimeout
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Couldn't access new HiveServer2: "
operator|+
name|getJdbcURL
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sessionConf
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**         if (isUseMiniKdc()) {           getMiniKdc().loginUser(getMiniKdc().getDefaultUserPrincipal());           sessionConf.put("principal", serverPrincipal);         }          */
name|sessionHandle
operator|=
name|hs2Client
operator|.
name|openSession
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|sessionConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// service not started yet
continue|continue;
block|}
name|hs2Client
operator|.
name|closeSession
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
break|break;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
specifier|public
name|Service
operator|.
name|STATE
name|getState
parameter_list|()
block|{
return|return
name|hiveServer2
operator|.
name|getServiceState
argument_list|()
return|;
block|}
specifier|static
name|File
name|getBaseDir
parameter_list|()
block|{
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|tmpDir
operator|+
literal|"/local_base"
argument_list|)
decl_stmt|;
return|return
name|baseDir
return|;
block|}
specifier|public
specifier|static
name|void
name|cleanupLocalDir
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|baseDir
init|=
name|getBaseDir
argument_list|()
decl_stmt|;
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Ignore. Safe if it does not exist.
block|}
block|}
block|}
end_class

end_unit

