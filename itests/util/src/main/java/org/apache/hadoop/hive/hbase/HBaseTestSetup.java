begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|extensions
operator|.
name|TestSetup
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_comment
comment|/**  * HBaseTestSetup defines HBase-specific test fixtures which are  * reused across testcases.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseTestSetup
extends|extends
name|TestSetup
block|{
specifier|private
name|MiniHBaseCluster
name|hbaseCluster
decl_stmt|;
specifier|private
name|int
name|zooKeeperPort
decl_stmt|;
specifier|private
name|String
name|hbaseRoot
decl_stmt|;
specifier|private
name|HConnection
name|hbaseConn
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_REGIONSERVERS
init|=
literal|1
decl_stmt|;
specifier|public
name|HBaseTestSetup
parameter_list|(
name|Test
name|test
parameter_list|)
block|{
name|super
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HConnection
name|getConnection
parameter_list|()
block|{
return|return
name|this
operator|.
name|hbaseConn
return|;
block|}
name|void
name|preTest
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|setUpFixtures
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rootdir"
argument_list|,
name|hbaseRoot
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.master"
argument_list|,
name|hbaseCluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerName
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|zooKeeperPort
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auxJars
init|=
name|conf
operator|.
name|getAuxJars
argument_list|()
decl_stmt|;
name|auxJars
operator|=
operator|(
operator|(
name|auxJars
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
operator|(
name|auxJars
operator|+
literal|","
operator|)
operator|)
operator|+
literal|"file:///"
operator|+
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|HBaseConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getJar
argument_list|()
expr_stmt|;
name|auxJars
operator|+=
literal|",file:///"
operator|+
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|HBaseSerDe
operator|.
name|class
argument_list|)
operator|.
name|getJar
argument_list|()
expr_stmt|;
name|auxJars
operator|+=
literal|",file:///"
operator|+
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|Watcher
operator|.
name|class
argument_list|)
operator|.
name|getJar
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setAuxJars
argument_list|(
name|auxJars
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpFixtures
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|/* We are not starting zookeeper server here because      * QTestUtil already starts it.      */
name|int
name|zkPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hive.zookeeper.client.port"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|zkPort
operator|==
name|zooKeeperPort
operator|)
operator|&&
operator|(
name|hbaseCluster
operator|!=
literal|null
operator|)
condition|)
block|{
return|return;
block|}
name|zooKeeperPort
operator|=
name|zkPort
expr_stmt|;
name|String
name|tmpdir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
decl_stmt|;
name|this
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.master"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|hbaseRoot
operator|=
literal|"file:///"
operator|+
name|tmpdir
operator|+
literal|"/hbase"
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rootdir"
argument_list|,
name|hbaseRoot
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|zooKeeperPort
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|hbaseConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hbaseConf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.port"
argument_list|,
name|findFreePort
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseConf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.info.port"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|hbaseConf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.port"
argument_list|,
name|findFreePort
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseConf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.info.port"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|hbaseCluster
operator|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|hbaseConf
argument_list|,
name|NUM_REGIONSERVERS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.master"
argument_list|,
name|hbaseCluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerName
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseConn
operator|=
name|HConnectionManager
operator|.
name|createConnection
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
comment|// opening the META table ensures that cluster is running
name|HTableInterface
name|meta
init|=
literal|null
decl_stmt|;
try|try
block|{
name|meta
operator|=
name|hbaseConn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|createHBaseTable
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createHBaseTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|HBASE_TABLE_NAME
init|=
literal|"HiveExternalTable"
decl_stmt|;
name|HTableDescriptor
name|htableDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|HBASE_TABLE_NAME
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcolDesc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|htableDesc
operator|.
name|addFamily
argument_list|(
name|hcolDesc
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|booleans
init|=
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|}
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1
block|,
name|Byte
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|short
index|[]
name|shorts
init|=
operator|new
name|short
index|[]
block|{
name|Short
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1
block|,
name|Short
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|int
index|[]
name|ints
init|=
operator|new
name|int
index|[]
block|{
name|Integer
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[]
block|{
name|Long
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[]
block|{
literal|"Hadoop, HBase,"
block|,
literal|"Hive"
block|,
literal|"Test Strings"
block|}
decl_stmt|;
name|float
index|[]
name|floats
init|=
operator|new
name|float
index|[]
block|{
name|Float
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1.0F
block|,
name|Float
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|double
index|[]
name|doubles
init|=
operator|new
name|double
index|[]
block|{
name|Double
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1.0
block|,
name|Double
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|HBaseAdmin
name|hbaseAdmin
init|=
literal|null
decl_stmt|;
name|HTableInterface
name|htable
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hbaseAdmin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|hbaseConn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|asList
argument_list|(
name|hbaseAdmin
operator|.
name|listTables
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|htableDesc
argument_list|)
condition|)
block|{
comment|// if table is already in there, don't recreate.
return|return;
block|}
name|hbaseAdmin
operator|.
name|createTable
argument_list|(
name|htableDesc
argument_list|)
expr_stmt|;
name|htable
operator|=
name|hbaseConn
operator|.
name|getTable
argument_list|(
name|HBASE_TABLE_NAME
argument_list|)
expr_stmt|;
comment|// data
name|Put
index|[]
name|puts
init|=
operator|new
name|Put
index|[]
block|{
operator|new
name|Put
argument_list|(
literal|"key-1"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
operator|new
name|Put
argument_list|(
literal|"key-2"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
operator|new
name|Put
argument_list|(
literal|"key-3"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|}
decl_stmt|;
comment|// store data
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|puts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|puts
index|[
name|i
index|]
operator|.
name|add
argument_list|(
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq-boolean"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|booleans
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|puts
index|[
name|i
index|]
operator|.
name|add
argument_list|(
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq-byte"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
name|bytes
index|[
name|i
index|]
block|}
argument_list|)
expr_stmt|;
name|puts
index|[
name|i
index|]
operator|.
name|add
argument_list|(
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq-short"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|shorts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|puts
index|[
name|i
index|]
operator|.
name|add
argument_list|(
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq-int"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ints
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|puts
index|[
name|i
index|]
operator|.
name|add
argument_list|(
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq-long"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|puts
index|[
name|i
index|]
operator|.
name|add
argument_list|(
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq-string"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|puts
index|[
name|i
index|]
operator|.
name|add
argument_list|(
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq-float"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|floats
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|puts
index|[
name|i
index|]
operator|.
name|add
argument_list|(
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq-double"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|doubles
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|htable
operator|.
name|put
argument_list|(
name|puts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|htable
operator|!=
literal|null
condition|)
name|htable
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|hbaseAdmin
operator|!=
literal|null
condition|)
name|hbaseAdmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|int
name|findFreePort
parameter_list|()
throws|throws
name|IOException
block|{
name|ServerSocket
name|server
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|server
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|port
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|hbaseConn
operator|!=
literal|null
condition|)
block|{
name|hbaseConn
operator|.
name|close
argument_list|()
expr_stmt|;
name|hbaseConn
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|hbaseCluster
operator|!=
literal|null
condition|)
block|{
name|HConnectionManager
operator|.
name|deleteAllConnections
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hbaseCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|hbaseCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

