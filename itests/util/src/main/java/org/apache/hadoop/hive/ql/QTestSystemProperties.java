begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|QTestSystemProperties
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SYS_PROP_TMP_DIR_PROPERTY
init|=
literal|"test.tmp.dir"
decl_stmt|;
comment|// typically target/tmp
specifier|private
specifier|static
specifier|final
name|String
name|SYS_PROP_SRC_TABLES_PROPERTY
init|=
literal|"test.src.tables"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SYS_PROP_OUTPUT_OVERWRITE
init|=
literal|"test.output.overwrite"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SYS_PROP_SRC_UDFS
init|=
literal|"test.src.udfs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SYS_PROP_VECTORIZATION_ENABLED
init|=
literal|"test.vectorization.enabled"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SYS_PROP_CHECK_SYNTAX
init|=
literal|"test.check.syntax"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SYS_PROP_FORCE_EXCLUSIONS
init|=
literal|"test.force.exclusions"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SYS_PROP_METASTORE_DB
init|=
literal|"test.metastore.db"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SYS_PROP_BUILD_DIR
init|=
literal|"build.dir"
decl_stmt|;
comment|// typically target
specifier|public
specifier|static
name|String
name|getTempDir
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|SYS_PROP_TMP_DIR_PROPERTY
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getSrcTables
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|SYS_PROP_SRC_TABLES_PROPERTY
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|setSrcTables
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|srcTables
parameter_list|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|SYS_PROP_SRC_TABLES_PROPERTY
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|srcTables
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getSourceUdfs
parameter_list|(
name|String
name|defaultTestSrcUDFs
parameter_list|)
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|SYS_PROP_SRC_UDFS
argument_list|,
name|defaultTestSrcUDFs
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getBuildDir
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|SYS_PROP_BUILD_DIR
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getMetaStoreDb
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|SYS_PROP_METASTORE_DB
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|System
operator|.
name|getProperty
argument_list|(
name|SYS_PROP_METASTORE_DB
argument_list|)
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isVectorizationEnabled
parameter_list|()
block|{
return|return
name|isTrue
argument_list|(
name|SYS_PROP_VECTORIZATION_ENABLED
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|shouldOverwriteResults
parameter_list|()
block|{
return|return
name|isTrue
argument_list|(
name|SYS_PROP_OUTPUT_OVERWRITE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|shouldCheckSyntax
parameter_list|()
block|{
return|return
name|isTrue
argument_list|(
name|SYS_PROP_CHECK_SYNTAX
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|shouldForceExclusions
parameter_list|()
block|{
return|return
name|isTrue
argument_list|(
name|SYS_PROP_FORCE_EXCLUSIONS
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isTrue
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

