begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|BinaryEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|EncoderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificDatumWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|control
operator|.
name|AbstractCliConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapItUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|MiniLlapCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|LlapProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSessionManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|zookeeper
operator|.
name|CuratorFrameworkSingleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|zookeeper
operator|.
name|ZooKeeperHiveLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|HdfsErasureCodingShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|druid
operator|.
name|MiniDruidCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|SingleNodeKafkaCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * QTestMiniClusters: decouples cluster details from QTestUtil (kafka/druid/spark/llap/tez/mr, file  * system)  */
end_comment

begin_class
specifier|public
class|class
name|QTestMiniClusters
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"QTestMiniClusters"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy HH:mm:ss"
argument_list|)
decl_stmt|;
comment|// security property names
specifier|private
specifier|static
specifier|final
name|String
name|SECURITY_KEY_PROVIDER_URI_NAME
init|=
literal|"dfs.encryption.key.provider.uri"
decl_stmt|;
comment|/**    * The default Erasure Coding Policy to use in Erasure Coding tests.    */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TEST_EC_POLICY
init|=
literal|"RS-3-2-1024k"
decl_stmt|;
specifier|private
name|QTestSetup
name|setup
decl_stmt|;
specifier|private
name|QTestArguments
name|testArgs
decl_stmt|;
specifier|private
name|MiniClusterType
name|clusterType
decl_stmt|;
specifier|private
name|HadoopShims
name|shims
decl_stmt|;
specifier|private
name|SparkSession
name|sparkSession
init|=
literal|null
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|HadoopShims
operator|.
name|MiniMrShim
name|mr
init|=
literal|null
decl_stmt|;
specifier|private
name|HadoopShims
operator|.
name|MiniDFSShim
name|dfs
init|=
literal|null
decl_stmt|;
specifier|private
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|hes
init|=
literal|null
decl_stmt|;
specifier|private
name|MiniLlapCluster
name|llapCluster
init|=
literal|null
decl_stmt|;
specifier|private
name|MiniDruidCluster
name|druidCluster
init|=
literal|null
decl_stmt|;
specifier|private
name|SingleNodeKafkaCluster
name|kafkaCluster
init|=
literal|null
decl_stmt|;
specifier|public
enum|enum
name|CoreClusterType
block|{
name|MR
block|,
name|TEZ
block|,
name|SPARK
block|}
specifier|public
enum|enum
name|FsType
block|{
name|LOCAL
block|,
name|HDFS
block|,
name|ENCRYPTED_HDFS
block|,
name|ERASURE_CODED_HDFS
block|,   }
specifier|public
enum|enum
name|MiniClusterType
block|{
name|MR
parameter_list|(
name|CoreClusterType
operator|.
name|MR
parameter_list|,
name|FsType
operator|.
name|HDFS
parameter_list|)
operator|,
constructor|TEZ(CoreClusterType.TEZ
operator|,
constructor|FsType.HDFS
block|)
enum|,
name|TEZ_LOCAL
parameter_list|(
name|CoreClusterType
operator|.
name|TEZ
parameter_list|,
name|FsType
operator|.
name|LOCAL
parameter_list|)
operator|,
constructor|SPARK(CoreClusterType.SPARK
operator|,
constructor|FsType.LOCAL
block|)
operator|,
name|MINI_SPARK_ON_YARN
argument_list|(
name|CoreClusterType
operator|.
name|SPARK
argument_list|,
name|FsType
operator|.
name|HDFS
argument_list|)
operator|,
name|LLAP
argument_list|(
name|CoreClusterType
operator|.
name|TEZ
argument_list|,
name|FsType
operator|.
name|HDFS
argument_list|)
operator|,
name|LLAP_LOCAL
argument_list|(
name|CoreClusterType
operator|.
name|TEZ
argument_list|,
name|FsType
operator|.
name|LOCAL
argument_list|)
operator|,
name|NONE
argument_list|(
name|CoreClusterType
operator|.
name|MR
argument_list|,
name|FsType
operator|.
name|LOCAL
argument_list|)
operator|,
name|DRUID_LOCAL
argument_list|(
name|CoreClusterType
operator|.
name|TEZ
argument_list|,
name|FsType
operator|.
name|LOCAL
argument_list|)
operator|,
name|DRUID
argument_list|(
name|CoreClusterType
operator|.
name|TEZ
argument_list|,
name|FsType
operator|.
name|HDFS
argument_list|)
operator|,
name|DRUID_KAFKA
argument_list|(
name|CoreClusterType
operator|.
name|TEZ
argument_list|,
name|FsType
operator|.
name|HDFS
argument_list|)
operator|,
name|KAFKA
argument_list|(
name|CoreClusterType
operator|.
name|TEZ
argument_list|,
name|FsType
operator|.
name|HDFS
argument_list|)
expr_stmt|;
end_class

begin_decl_stmt
specifier|private
specifier|final
name|CoreClusterType
name|coreClusterType
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|final
name|FsType
name|defaultFsType
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|MiniClusterType
argument_list|(
name|CoreClusterType
name|coreClusterType
argument_list|,
name|FsType
name|defaultFsType
argument_list|)
block|{
name|this
operator|.
name|coreClusterType
operator|=
name|coreClusterType
block|;
name|this
operator|.
name|defaultFsType
operator|=
name|defaultFsType
block|;     }
specifier|public
name|CoreClusterType
name|getCoreClusterType
argument_list|()
block|{
return|return
name|coreClusterType
return|;
block|}
end_expr_stmt

begin_function
specifier|public
name|FsType
name|getDefaultFsType
parameter_list|()
block|{
return|return
name|defaultFsType
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|MiniClusterType
name|valueForString
parameter_list|(
name|String
name|type
parameter_list|)
block|{
comment|// Replace this with valueOf.
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"miniMR"
argument_list|)
condition|)
block|{
return|return
name|MR
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"tez"
argument_list|)
condition|)
block|{
return|return
name|TEZ
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"tez_local"
argument_list|)
condition|)
block|{
return|return
name|TEZ_LOCAL
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"spark"
argument_list|)
condition|)
block|{
return|return
name|SPARK
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"miniSparkOnYarn"
argument_list|)
condition|)
block|{
return|return
name|MINI_SPARK_ON_YARN
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"llap"
argument_list|)
condition|)
block|{
return|return
name|LLAP
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"llap_local"
argument_list|)
condition|)
block|{
return|return
name|LLAP_LOCAL
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"druidLocal"
argument_list|)
condition|)
block|{
return|return
name|DRUID_LOCAL
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"druid"
argument_list|)
condition|)
block|{
return|return
name|DRUID
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"druid-kafka"
argument_list|)
condition|)
block|{
return|return
name|DRUID_KAFKA
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"kafka"
argument_list|)
condition|)
block|{
return|return
name|KAFKA
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"cannot recognize MiniClusterType from '%s'"
argument_list|,
name|type
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|public
name|String
name|getQOutFileExtensionPostfix
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
end_function

begin_comment
unit|}
comment|/**    * QTestSetup defines test fixtures which are reused across testcases, and are needed before any    * test can be run    */
end_comment

begin_class
unit|public
specifier|static
class|class
name|QTestSetup
block|{
specifier|private
name|MiniZooKeeperCluster
name|zooKeeperCluster
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|zkPort
decl_stmt|;
specifier|private
name|ZooKeeper
name|zooKeeper
decl_stmt|;
specifier|public
name|QTestSetup
parameter_list|()
block|{     }
specifier|public
name|void
name|preTest
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|zooKeeperCluster
operator|==
literal|null
condition|)
block|{
comment|// create temp dir
name|File
name|tmpDir
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|QTestSystemProperties
operator|.
name|getTempDir
argument_list|()
argument_list|)
argument_list|,
literal|"tmp_"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|zooKeeperCluster
operator|=
operator|new
name|MiniZooKeeperCluster
argument_list|()
expr_stmt|;
name|zkPort
operator|=
name|zooKeeperCluster
operator|.
name|startup
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|zooKeeper
operator|!=
literal|null
condition|)
block|{
name|zooKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|int
name|sessionTimeout
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_SESSION_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|zooKeeper
operator|=
operator|new
name|ZooKeeper
argument_list|(
literal|"localhost:"
operator|+
name|zkPort
argument_list|,
name|sessionTimeout
argument_list|,
operator|new
name|Watcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|arg0
parameter_list|)
block|{         }
block|}
argument_list|)
expr_stmt|;
name|String
name|zkServer
init|=
literal|"localhost"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.zookeeper.quorum"
argument_list|,
name|zkServer
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.zookeeper.client.port"
argument_list|,
literal|""
operator|+
name|zkPort
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|postTest
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|zooKeeperCluster
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|zooKeeper
operator|!=
literal|null
condition|)
block|{
name|zooKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|ZooKeeperHiveLockManager
operator|.
name|releaseAllLocks
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|CuratorFrameworkSingleton
operator|.
name|closeAndReleaseInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|zooKeeperCluster
operator|!=
literal|null
condition|)
block|{
name|zooKeeperCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|zooKeeperCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

begin_function
specifier|public
name|void
name|setup
parameter_list|(
name|QTestArguments
name|testArgs
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|String
name|scriptsDir
parameter_list|,
name|String
name|logDir
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|shims
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
expr_stmt|;
name|this
operator|.
name|clusterType
operator|=
name|testArgs
operator|.
name|getClusterType
argument_list|()
expr_stmt|;
name|this
operator|.
name|testArgs
operator|=
name|testArgs
expr_stmt|;
name|setupFileSystem
argument_list|(
name|testArgs
operator|.
name|getFsType
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|setup
operator|=
name|testArgs
operator|.
name|getQTestSetup
argument_list|()
expr_stmt|;
name|setup
operator|.
name|preTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|uriString
init|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|DRUID_KAFKA
operator|||
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|DRUID_LOCAL
operator|||
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|DRUID
condition|)
block|{
specifier|final
name|String
name|tempDir
init|=
name|QTestSystemProperties
operator|.
name|getTempDir
argument_list|()
decl_stmt|;
name|druidCluster
operator|=
operator|new
name|MiniDruidCluster
argument_list|(
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|DRUID
condition|?
literal|"mini-druid"
else|:
literal|"mini-druid-kafka"
argument_list|,
name|logDir
argument_list|,
name|tempDir
argument_list|,
name|setup
operator|.
name|zkPort
argument_list|,
name|Utilities
operator|.
name|jarFinderGetJar
argument_list|(
name|MiniDruidCluster
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|druidDeepStorage
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|druidCluster
operator|.
name|getDeepStorageDir
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|druidDeepStorage
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|scratchDir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|QTestSystemProperties
operator|.
name|getTempDir
argument_list|()
argument_list|,
literal|"druidStagingDir"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|scratchDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.druid.working.directory"
argument_list|,
name|scratchDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|druidCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|druidCluster
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|KAFKA
operator|||
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|DRUID_KAFKA
condition|)
block|{
name|kafkaCluster
operator|=
operator|new
name|SingleNodeKafkaCluster
argument_list|(
literal|"kafka"
argument_list|,
name|QTestSystemProperties
operator|.
name|getTempDir
argument_list|()
operator|+
literal|"/kafka-cluster"
argument_list|,
name|setup
operator|.
name|zkPort
argument_list|,
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|KAFKA
condition|?
literal|9093
else|:
literal|9092
argument_list|)
expr_stmt|;
name|kafkaCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|kafkaCluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|kafkaCluster
operator|.
name|createTopicWithData
argument_list|(
literal|"test-topic"
argument_list|,
operator|new
name|File
argument_list|(
name|scriptsDir
argument_list|,
literal|"kafka_init_data.json"
argument_list|)
argument_list|)
expr_stmt|;
name|kafkaCluster
operator|.
name|createTopicWithData
argument_list|(
literal|"wiki_kafka_csv"
argument_list|,
operator|new
name|File
argument_list|(
name|scriptsDir
argument_list|,
literal|"kafka_init_data.csv"
argument_list|)
argument_list|)
expr_stmt|;
name|kafkaCluster
operator|.
name|createTopicWithData
argument_list|(
literal|"wiki_kafka_avro_table"
argument_list|,
name|getAvroRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|confDir
init|=
name|testArgs
operator|.
name|getConfDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterType
operator|.
name|getCoreClusterType
argument_list|()
operator|==
name|CoreClusterType
operator|.
name|TEZ
condition|)
block|{
if|if
condition|(
name|confDir
operator|!=
literal|null
operator|&&
operator|!
name|confDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/tez-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|numTrackers
init|=
literal|2
decl_stmt|;
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|MiniClusterType
operator|.
name|LLAP
argument_list|,
name|MiniClusterType
operator|.
name|LLAP_LOCAL
argument_list|,
name|MiniClusterType
operator|.
name|DRUID_LOCAL
argument_list|,
name|MiniClusterType
operator|.
name|DRUID_KAFKA
argument_list|,
name|MiniClusterType
operator|.
name|DRUID
argument_list|,
name|MiniClusterType
operator|.
name|KAFKA
argument_list|)
operator|.
name|contains
argument_list|(
name|clusterType
argument_list|)
condition|)
block|{
name|llapCluster
operator|=
name|LlapItUtils
operator|.
name|startAndGetMiniLlapCluster
argument_list|(
name|conf
argument_list|,
name|setup
operator|.
name|zooKeeperCluster
argument_list|,
name|confDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|MiniClusterType
operator|.
name|LLAP_LOCAL
argument_list|,
name|MiniClusterType
operator|.
name|TEZ_LOCAL
argument_list|,
name|MiniClusterType
operator|.
name|DRUID_LOCAL
argument_list|)
operator|.
name|contains
argument_list|(
name|clusterType
argument_list|)
condition|)
block|{
name|mr
operator|=
name|shims
operator|.
name|getLocalMiniTezCluster
argument_list|(
name|conf
argument_list|,
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|LLAP_LOCAL
operator|||
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|DRUID_LOCAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mr
operator|=
name|shims
operator|.
name|getMiniTezCluster
argument_list|(
name|conf
argument_list|,
name|numTrackers
argument_list|,
name|uriString
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|MiniClusterType
operator|.
name|LLAP
argument_list|,
name|MiniClusterType
operator|.
name|LLAP_LOCAL
argument_list|,
name|MiniClusterType
operator|.
name|DRUID_KAFKA
argument_list|,
name|MiniClusterType
operator|.
name|DRUID
argument_list|,
name|MiniClusterType
operator|.
name|KAFKA
argument_list|)
operator|.
name|contains
argument_list|(
name|clusterType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|MINI_SPARK_ON_YARN
condition|)
block|{
name|mr
operator|=
name|shims
operator|.
name|getMiniSparkCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
name|uriString
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|MR
condition|)
block|{
name|mr
operator|=
name|shims
operator|.
name|getMiniMrCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
name|uriString
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testArgs
operator|.
name|isWithLlapIo
argument_list|()
operator|&&
operator|(
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|NONE
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"initializing llap IO"
argument_list|)
expr_stmt|;
name|LlapProxy
operator|.
name|initializeLlapIo
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|initConf
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|setupConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// TODO Ideally this should be done independent of whether mr is setup or not.
name|setFsRelatedProperties
argument_list|(
name|conf
argument_list|,
name|fs
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|llapCluster
operator|!=
literal|null
condition|)
block|{
name|Configuration
name|clusterSpecificConf
init|=
name|llapCluster
operator|.
name|getClusterSpecificConfiguration
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confEntry
range|:
name|clusterSpecificConf
control|)
block|{
comment|// Conf.get takes care of parameter replacement, iterator.value does not.
name|conf
operator|.
name|set
argument_list|(
name|confEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|clusterSpecificConf
operator|.
name|get
argument_list|(
name|confEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|druidCluster
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Path
name|druidDeepStorage
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|druidCluster
operator|.
name|getDeepStorageDir
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|druidDeepStorage
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.druid.storage.storageDirectory"
argument_list|,
name|druidDeepStorage
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.druid.metadata.db.type"
argument_list|,
literal|"derby"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.druid.metadata.uri"
argument_list|,
name|druidCluster
operator|.
name|getMetadataURI
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.druid.coordinator.address.default"
argument_list|,
name|druidCluster
operator|.
name|getCoordinatorURI
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.druid.overlord.address.default"
argument_list|,
name|druidCluster
operator|.
name|getOverlordURI
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.druid.broker.address.default"
argument_list|,
name|druidCluster
operator|.
name|getBrokerURI
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|scratchDir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|QTestSystemProperties
operator|.
name|getTempDir
argument_list|()
argument_list|,
literal|"druidStagingDir"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|scratchDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.druid.working.directory"
argument_list|,
name|scratchDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testArgs
operator|.
name|isWithLlapIo
argument_list|()
operator|&&
operator|(
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|NONE
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"initializing llap IO"
argument_list|)
expr_stmt|;
name|LlapProxy
operator|.
name|initializeLlapIo
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|postInit
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|createRemoteDirs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|preTest
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|setup
operator|.
name|preTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|postTest
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|setup
operator|.
name|postTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|restartSessions
parameter_list|(
name|boolean
name|canReuseSession
parameter_list|,
name|CliSessionState
name|ss
parameter_list|,
name|SessionState
name|oldSs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|oldSs
operator|!=
literal|null
operator|&&
name|canReuseSession
operator|&&
name|clusterType
operator|.
name|getCoreClusterType
argument_list|()
operator|==
name|CoreClusterType
operator|.
name|TEZ
condition|)
block|{
comment|// Copy the tezSessionState from the old CliSessionState.
name|TezSessionState
name|tezSessionState
init|=
name|oldSs
operator|.
name|getTezSession
argument_list|()
decl_stmt|;
name|oldSs
operator|.
name|setTezSession
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setTezSession
argument_list|(
name|tezSessionState
argument_list|)
expr_stmt|;
name|oldSs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oldSs
operator|!=
literal|null
operator|&&
name|clusterType
operator|.
name|getCoreClusterType
argument_list|()
operator|==
name|CoreClusterType
operator|.
name|SPARK
condition|)
block|{
name|sparkSession
operator|=
name|oldSs
operator|.
name|getSparkSession
argument_list|()
expr_stmt|;
name|ss
operator|.
name|setSparkSession
argument_list|(
name|sparkSession
argument_list|)
expr_stmt|;
name|oldSs
operator|.
name|setSparkSession
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|oldSs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|shutDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|clusterType
operator|.
name|getCoreClusterType
argument_list|()
operator|==
name|CoreClusterType
operator|.
name|TEZ
operator|&&
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTezSession
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTezSession
argument_list|()
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|druidCluster
operator|!=
literal|null
condition|)
block|{
name|druidCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|druidCluster
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|kafkaCluster
operator|!=
literal|null
condition|)
block|{
name|kafkaCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|kafkaCluster
operator|=
literal|null
expr_stmt|;
block|}
name|setup
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|sparkSession
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|SparkSessionManagerImpl
operator|.
name|getInstance
argument_list|()
operator|.
name|closeSession
argument_list|(
name|sparkSession
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing spark session."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sparkSession
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|mr
operator|=
literal|null
expr_stmt|;
block|}
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dfs
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|setSparkSession
parameter_list|(
name|SparkSession
name|sparkSession
parameter_list|)
block|{
name|this
operator|.
name|sparkSession
operator|=
name|sparkSession
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|SparkSession
name|getSparkSession
parameter_list|()
block|{
return|return
name|sparkSession
return|;
block|}
end_function

begin_function
specifier|public
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|getHdfsEncryptionShim
parameter_list|()
block|{
return|return
name|hes
return|;
block|}
end_function

begin_function
specifier|public
name|HadoopShims
operator|.
name|MiniMrShim
name|getMr
parameter_list|()
block|{
return|return
name|mr
return|;
block|}
end_function

begin_function
specifier|public
name|MiniClusterType
name|getClusterType
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterType
return|;
block|}
end_function

begin_comment
comment|/**    * Should deleted test tables have their data purged.    *    * @return true if data should be purged    */
end_comment

begin_function
specifier|public
name|boolean
name|fsNeedsPurge
parameter_list|(
name|FsType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|FsType
operator|.
name|ENCRYPTED_HDFS
operator|||
name|type
operator|==
name|FsType
operator|.
name|ERASURE_CODED_HDFS
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|createRemoteDirs
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
comment|// Create remote dirs once.
if|if
condition|(
name|getMr
argument_list|()
operator|!=
literal|null
condition|)
block|{
assert|assert
name|fs
operator|!=
literal|null
assert|;
name|Path
name|warehousePath
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|warehousePath
operator|!=
literal|null
assert|;
name|Path
name|hiveJarPath
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_JAR_DIRECTORY
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|hiveJarPath
operator|!=
literal|null
assert|;
name|Path
name|userInstallPath
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_USER_INSTALL_DIR
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|userInstallPath
operator|!=
literal|null
assert|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|warehousePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create path={}. Continuing. Exception message={}"
argument_list|,
name|warehousePath
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|hiveJarPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create path={}. Continuing. Exception message={}"
argument_list|,
name|warehousePath
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|userInstallPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create path={}. Continuing. Exception message={}"
argument_list|,
name|warehousePath
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|setupFileSystem
parameter_list|(
name|FsType
name|fsType
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fsType
operator|==
name|FsType
operator|.
name|LOCAL
condition|)
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fsType
operator|==
name|FsType
operator|.
name|HDFS
operator|||
name|fsType
operator|==
name|FsType
operator|.
name|ENCRYPTED_HDFS
operator|||
name|fsType
operator|==
name|FsType
operator|.
name|ERASURE_CODED_HDFS
condition|)
block|{
name|int
name|numDataNodes
init|=
literal|4
decl_stmt|;
comment|// Setup before getting dfs
switch|switch
condition|(
name|fsType
condition|)
block|{
case|case
name|ENCRYPTED_HDFS
case|:
comment|// Set the security key provider so that the MiniDFS cluster is initialized
comment|// with encryption
name|conf
operator|.
name|set
argument_list|(
name|SECURITY_KEY_PROVIDER_URI_NAME
argument_list|,
name|getKeyProviderURI
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"fs.trash.interval"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
break|break;
case|case
name|ERASURE_CODED_HDFS
case|:
comment|// We need more NameNodes for EC.
comment|// To fully exercise hdfs code paths we need 5 NameNodes for the RS-3-2-1024k policy.
comment|// With 6 NameNodes we can also run the RS-6-3-1024k policy.
name|numDataNodes
operator|=
literal|6
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|dfs
operator|=
name|shims
operator|.
name|getMiniDfs
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// Setup after getting dfs
switch|switch
condition|(
name|fsType
condition|)
block|{
case|case
name|ENCRYPTED_HDFS
case|:
comment|// set up the java key provider for encrypted hdfs cluster
name|hes
operator|=
name|shims
operator|.
name|createHdfsEncryptionShim
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"key provider is initialized"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ERASURE_CODED_HDFS
case|:
comment|// The Erasure policy can't be set in a q_test_init script as QTestUtil runs that code in
comment|// a mode that disallows test-only CommandProcessors.
comment|// Set the default policy on the root of the file system here.
name|HdfsErasureCodingShim
name|erasureCodingShim
init|=
name|shims
operator|.
name|createHdfsErasureCodingShim
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|erasureCodingShim
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|DEFAULT_TEST_EC_POLICY
argument_list|)
expr_stmt|;
name|erasureCodingShim
operator|.
name|setErasureCodingPolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs:///"
argument_list|)
argument_list|,
name|DEFAULT_TEST_EC_POLICY
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown or unhandled fsType ["
operator|+
name|fsType
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|private
name|String
name|getKeyProviderURI
parameter_list|()
block|{
comment|// Use the target directory if it is not specified
name|String
name|HIVE_ROOT
init|=
name|AbstractCliConfig
operator|.
name|HIVE_ROOT
decl_stmt|;
name|String
name|keyDir
init|=
name|HIVE_ROOT
operator|+
literal|"ql/target/"
decl_stmt|;
comment|// put the jks file in the current test path only for test purpose
return|return
literal|"jceks://file"
operator|+
operator|new
name|Path
argument_list|(
name|keyDir
argument_list|,
literal|"test.jks"
argument_list|)
operator|.
name|toUri
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getAvroRows
parameter_list|()
block|{
name|int
name|numRows
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|events
decl_stmt|;
specifier|final
name|DatumWriter
argument_list|<
name|GenericRecord
argument_list|>
name|writer
init|=
operator|new
name|SpecificDatumWriter
argument_list|<>
argument_list|(
name|Wikipedia
operator|.
name|getClassSchema
argument_list|()
argument_list|)
decl_stmt|;
name|events
operator|=
name|IntStream
operator|.
name|rangeClosed
argument_list|(
literal|0
argument_list|,
name|numRows
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
name|Wikipedia
operator|.
name|newBuilder
argument_list|()
comment|// 1534736225090 -> 08/19/2018 20:37:05
operator|.
name|setTimestamp
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|1534736225090L
operator|+
literal|1000
operator|*
literal|3600
operator|*
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setAdded
argument_list|(
name|i
operator|*
literal|300
argument_list|)
operator|.
name|setDeleted
argument_list|(
operator|-
name|i
argument_list|)
operator|.
name|setIsrobot
argument_list|(
name|i
operator|%
literal|2
operator|==
literal|0
argument_list|)
operator|.
name|setChannel
argument_list|(
literal|"chanel number "
operator|+
name|i
argument_list|)
operator|.
name|setComment
argument_list|(
literal|"comment number "
operator|+
name|i
argument_list|)
operator|.
name|setCommentlength
argument_list|(
name|i
argument_list|)
operator|.
name|setDiffurl
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"url %s"
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|setFlags
argument_list|(
literal|"flag"
argument_list|)
operator|.
name|setIsminor
argument_list|(
name|i
operator|%
literal|2
operator|>
literal|0
argument_list|)
operator|.
name|setIsanonymous
argument_list|(
name|i
operator|%
literal|3
operator|!=
literal|0
argument_list|)
operator|.
name|setNamespace
argument_list|(
literal|"namespace"
argument_list|)
operator|.
name|setIsunpatrolled
argument_list|(
operator|new
name|Boolean
argument_list|(
name|i
operator|%
literal|3
operator|==
literal|0
argument_list|)
argument_list|)
operator|.
name|setIsnew
argument_list|(
operator|new
name|Boolean
argument_list|(
name|i
operator|%
literal|2
operator|>
literal|0
argument_list|)
argument_list|)
operator|.
name|setPage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"page is %s"
argument_list|,
name|i
operator|*
literal|100
argument_list|)
argument_list|)
operator|.
name|setDelta
argument_list|(
name|i
argument_list|)
operator|.
name|setDeltabucket
argument_list|(
name|i
operator|*
literal|100.4
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"test-user-"
operator|+
name|i
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|genericRecord
lambda|->
block|{
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
name|out
operator|=
operator|new
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
argument_list|()
argument_list|;
name|BinaryEncoder
name|encoder
operator|=
name|EncoderFactory
operator|.
name|get
argument_list|()
operator|.
name|binaryEncoder
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
argument_list|;           try
block|{
name|writer
operator|.
name|write
argument_list|(
name|genericRecord
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
unit|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|events
return|;
end_return

begin_function
unit|}    private
name|void
name|setFsRelatedProperties
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|boolean
name|isLocalFs
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|String
name|fsUriString
init|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Different paths if running locally vs a remote fileSystem. Ideally this difference should not
comment|// exist.
name|Path
name|warehousePath
decl_stmt|;
name|Path
name|jarPath
decl_stmt|;
name|Path
name|userInstallPath
decl_stmt|;
if|if
condition|(
name|isLocalFs
condition|)
block|{
name|String
name|buildDir
init|=
name|QTestSystemProperties
operator|.
name|getBuildDir
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|fsUriString
argument_list|,
name|buildDir
argument_list|)
decl_stmt|;
comment|// Create a fake fs root for local fs
name|Path
name|localFsRoot
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"localfs"
argument_list|)
decl_stmt|;
name|warehousePath
operator|=
operator|new
name|Path
argument_list|(
name|localFsRoot
argument_list|,
literal|"warehouse"
argument_list|)
expr_stmt|;
name|jarPath
operator|=
operator|new
name|Path
argument_list|(
name|localFsRoot
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
name|userInstallPath
operator|=
operator|new
name|Path
argument_list|(
name|localFsRoot
argument_list|,
literal|"user_install"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO Why is this changed from the default in hive-conf?
name|warehousePath
operator|=
operator|new
name|Path
argument_list|(
name|fsUriString
argument_list|,
literal|"/build/ql/test/data/warehouse/"
argument_list|)
expr_stmt|;
name|jarPath
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|fsUriString
argument_list|,
literal|"/user"
argument_list|)
argument_list|,
literal|"hive"
argument_list|)
expr_stmt|;
name|userInstallPath
operator|=
operator|new
name|Path
argument_list|(
name|fsUriString
argument_list|,
literal|"/user"
argument_list|)
expr_stmt|;
block|}
name|warehousePath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|warehousePath
argument_list|)
expr_stmt|;
name|jarPath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|jarPath
argument_list|)
expr_stmt|;
name|userInstallPath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|userInstallPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|fsUriString
argument_list|)
expr_stmt|;
comment|// Remote dirs
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
name|warehousePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_JAR_DIRECTORY
argument_list|,
name|jarPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_USER_INSTALL_DIR
argument_list|,
name|userInstallPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// ConfVars.SCRATCHDIR - {test.tmp.dir}/scratchdir
comment|// Local dirs
comment|// ConfVars.LOCALSCRATCHDIR - {test.tmp.dir}/localscratchdir
comment|// TODO Make sure to cleanup created dirs.
block|}
end_function

unit|}
end_unit

