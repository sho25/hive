begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|CachingPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
operator|.
name|HookType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|// If this is run as a pre or post execution hook, it writes a message to SessionState.err
end_comment

begin_comment
comment|// (causing it to be cached if a CachingPrintStream is being used).  If it is run as a failure
end_comment

begin_comment
comment|// hook, it will write what has been cached by the CachingPrintStream to SessionState.out for
end_comment

begin_comment
comment|// verification.
end_comment

begin_class
specifier|public
class|class
name|VerifyCachingPrintStreamHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|ss
operator|.
name|err
operator|instanceof
name|CachingPrintStream
operator|)
assert|;
if|if
condition|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookType
operator|.
name|ON_FAILURE_HOOK
condition|)
block|{
assert|assert
operator|(
name|ss
operator|.
name|err
operator|instanceof
name|CachingPrintStream
operator|)
assert|;
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Begin cached logs."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|output
range|:
operator|(
operator|(
name|CachingPrintStream
operator|)
name|ss
operator|.
name|err
operator|)
operator|.
name|getOutput
argument_list|()
control|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"End cached logs."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"TEST, this should only appear once in the log."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

