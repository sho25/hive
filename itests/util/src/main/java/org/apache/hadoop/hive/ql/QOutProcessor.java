begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QTestUtil
operator|.
name|FsType
import|;
end_import

begin_comment
comment|/**  * QOutProcessor: produces the final q.out from original q.out by postprocessing (e.g. masks)  *  */
end_comment

begin_class
specifier|public
class|class
name|QOutProcessor
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PATH_HDFS_REGEX
init|=
literal|"(hdfs://)([a-zA-Z0-9:/_\\-\\.=])+"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PATH_HDFS_WITH_DATE_USER_GROUP_REGEX
init|=
literal|"([a-z]+) ([a-z]+)([ ]+)([0-9]+) ([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}) "
operator|+
name|PATH_HDFS_REGEX
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HDFS_MASK
init|=
literal|"### HDFS PATH ###"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HDFS_DATE_MASK
init|=
literal|"### HDFS DATE ###"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HDFS_USER_MASK
init|=
literal|"### USER ###"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HDFS_GROUP_MASK
init|=
literal|"### GROUP ###"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MASK_PATTERN
init|=
literal|"#### A masked pattern was here ####"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARTIAL_MASK_PATTERN
init|=
literal|"#### A PARTIAL masked pattern was here ####"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PatternReplacementPair
name|MASK_STATS
init|=
operator|new
name|PatternReplacementPair
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|" Num rows: [1-9][0-9]* Data size: [1-9][0-9]*"
argument_list|)
argument_list|,
literal|" Num rows: ###Masked### Data size: ###Masked###"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PatternReplacementPair
name|MASK_DATA_SIZE
init|=
operator|new
name|PatternReplacementPair
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|" Data size: [1-9][0-9]*"
argument_list|)
argument_list|,
literal|" Data size: ###Masked###"
argument_list|)
decl_stmt|;
specifier|private
name|FsType
name|fsType
init|=
name|FsType
operator|.
name|local
decl_stmt|;
specifier|public
specifier|static
class|class
name|LineProcessingResult
block|{
specifier|private
name|String
name|line
decl_stmt|;
specifier|private
name|boolean
name|partialMaskWasMatched
init|=
literal|false
decl_stmt|;
specifier|public
name|LineProcessingResult
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|this
operator|.
name|line
operator|=
name|line
expr_stmt|;
block|}
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
name|line
return|;
block|}
block|}
specifier|private
specifier|final
name|Pattern
index|[]
name|planMask
init|=
name|toPattern
argument_list|(
operator|new
name|String
index|[]
block|{
literal|".*file:.*"
block|,
literal|".*pfile:.*"
block|,
literal|".*/tmp/.*"
block|,
literal|".*invalidscheme:.*"
block|,
literal|".*lastUpdateTime.*"
block|,
literal|".*lastAccessTime.*"
block|,
literal|".*lastModifiedTime.*"
block|,
literal|".*[Oo]wner.*"
block|,
literal|".*CreateTime.*"
block|,
literal|".*LastAccessTime.*"
block|,
literal|".*Location.*"
block|,
literal|".*LOCATION '.*"
block|,
literal|".*transient_lastDdlTime.*"
block|,
literal|".*last_modified_.*"
block|,
literal|".*at org.*"
block|,
literal|".*at sun.*"
block|,
literal|".*at java.*"
block|,
literal|".*at junit.*"
block|,
literal|".*Caused by:.*"
block|,
literal|".*LOCK_QUERYID:.*"
block|,
literal|".*LOCK_TIME:.*"
block|,
literal|".*grantTime.*"
block|,
literal|".*[.][.][.] [0-9]* more.*"
block|,
literal|".*job_[0-9_]*.*"
block|,
literal|".*job_local[0-9_]*.*"
block|,
literal|".*USING 'java -cp.*"
block|,
literal|"^Deleted.*"
block|,
literal|".*DagName:.*"
block|,
literal|".*DagId:.*"
block|,
literal|".*Input:.*/data/files/.*"
block|,
literal|".*Output:.*/data/files/.*"
block|,
literal|".*total number of created files now is.*"
block|,
literal|".*.hive-staging.*"
block|,
literal|"pk_-?[0-9]*_[0-9]*_[0-9]*"
block|,
literal|"fk_-?[0-9]*_[0-9]*_[0-9]*"
block|,
literal|"uk_-?[0-9]*_[0-9]*_[0-9]*"
block|,
literal|"nn_-?[0-9]*_[0-9]*_[0-9]*"
block|,
comment|// not null constraint name
literal|"dc_-?[0-9]*_[0-9]*_[0-9]*"
block|,
comment|// default constraint name
literal|".*at com\\.sun\\.proxy.*"
block|,
literal|".*at com\\.jolbox.*"
block|,
literal|".*at com\\.zaxxer.*"
block|,
literal|"org\\.apache\\.hadoop\\.hive\\.metastore\\.model\\.MConstraint@([0-9]|[a-z])*"
block|,
literal|"^Repair: Added partition to metastore.*"
block|,
literal|"^Repair: Dropped partition from metastore.*"
block|}
argument_list|)
decl_stmt|;
specifier|public
name|QOutProcessor
parameter_list|(
name|FsType
name|fsType
parameter_list|)
block|{
name|this
operator|.
name|fsType
operator|=
name|fsType
expr_stmt|;
block|}
specifier|public
name|QOutProcessor
parameter_list|()
block|{
name|this
operator|.
name|fsType
operator|=
name|FsType
operator|.
name|hdfs
expr_stmt|;
block|}
specifier|private
name|Pattern
index|[]
name|toPattern
parameter_list|(
name|String
index|[]
name|patternStrs
parameter_list|)
block|{
name|Pattern
index|[]
name|patterns
init|=
operator|new
name|Pattern
index|[
name|patternStrs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|patternStrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|patterns
index|[
name|i
index|]
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|patternStrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|patterns
return|;
block|}
specifier|public
name|void
name|maskPatterns
parameter_list|(
name|String
name|fname
parameter_list|,
name|boolean
name|maskStats
parameter_list|,
name|boolean
name|maskDataSize
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|line
decl_stmt|;
name|BufferedReader
name|in
decl_stmt|;
name|BufferedWriter
name|out
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|File
name|fileOrig
init|=
operator|new
name|File
argument_list|(
name|fname
operator|+
literal|".orig"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|file
argument_list|,
name|fileOrig
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|fileOrig
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|lastWasMasked
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|null
operator|!=
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
condition|)
block|{
name|LineProcessingResult
name|result
init|=
name|processLine
argument_list|(
name|line
argument_list|,
name|maskStats
argument_list|,
name|maskDataSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|line
operator|.
name|equals
argument_list|(
name|MASK_PATTERN
argument_list|)
condition|)
block|{
comment|// We're folding multiple masked lines into one.
if|if
condition|(
operator|!
name|lastWasMasked
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|result
operator|.
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|lastWasMasked
operator|=
literal|true
expr_stmt|;
name|result
operator|.
name|partialMaskWasMatched
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|result
operator|.
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|lastWasMasked
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|partialMaskWasMatched
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|LineProcessingResult
name|processLine
parameter_list|(
name|String
name|line
parameter_list|,
name|boolean
name|maskStats
parameter_list|,
name|boolean
name|maskDataSize
parameter_list|)
block|{
name|LineProcessingResult
name|result
init|=
operator|new
name|LineProcessingResult
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fsType
operator|==
name|FsType
operator|.
name|encrypted_hdfs
condition|)
block|{
for|for
control|(
name|Pattern
name|pattern
range|:
name|partialReservedPlanMask
control|)
block|{
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|result
operator|.
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|result
operator|.
name|line
operator|=
name|PARTIAL_MASK_PATTERN
operator|+
literal|" "
operator|+
name|matcher
operator|.
name|group
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|partialMaskWasMatched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|PatternReplacementPair
name|prp
range|:
name|partialPlanMask
control|)
block|{
name|matcher
operator|=
name|prp
operator|.
name|pattern
operator|.
name|matcher
argument_list|(
name|result
operator|.
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|result
operator|.
name|line
operator|=
name|result
operator|.
name|line
operator|.
name|replaceAll
argument_list|(
name|prp
operator|.
name|pattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|prp
operator|.
name|replacement
argument_list|)
expr_stmt|;
name|result
operator|.
name|partialMaskWasMatched
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|partialMaskWasMatched
condition|)
block|{
for|for
control|(
name|Pair
argument_list|<
name|Pattern
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|patternsWithMaskComments
control|)
block|{
name|Pattern
name|pattern
init|=
name|pair
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|String
name|maskComment
init|=
name|pair
operator|.
name|getRight
argument_list|()
decl_stmt|;
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|result
operator|.
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|result
operator|.
name|line
operator|=
name|matcher
operator|.
name|replaceAll
argument_list|(
name|maskComment
argument_list|)
expr_stmt|;
name|result
operator|.
name|partialMaskWasMatched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|partialMaskWasMatched
operator|&&
name|maskStats
condition|)
block|{
name|matcher
operator|=
name|MASK_STATS
operator|.
name|pattern
operator|.
name|matcher
argument_list|(
name|result
operator|.
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|result
operator|.
name|line
operator|=
name|result
operator|.
name|line
operator|.
name|replaceAll
argument_list|(
name|MASK_STATS
operator|.
name|pattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|MASK_STATS
operator|.
name|replacement
argument_list|)
expr_stmt|;
name|result
operator|.
name|partialMaskWasMatched
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|partialMaskWasMatched
operator|&&
name|maskDataSize
condition|)
block|{
name|matcher
operator|=
name|MASK_DATA_SIZE
operator|.
name|pattern
operator|.
name|matcher
argument_list|(
name|result
operator|.
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|result
operator|.
name|line
operator|=
name|result
operator|.
name|line
operator|.
name|replaceAll
argument_list|(
name|MASK_DATA_SIZE
operator|.
name|pattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|MASK_DATA_SIZE
operator|.
name|replacement
argument_list|)
expr_stmt|;
name|result
operator|.
name|partialMaskWasMatched
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|Pattern
name|pattern
range|:
name|planMask
control|)
block|{
name|result
operator|.
name|line
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|result
operator|.
name|line
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|MASK_PATTERN
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|final
name|Pattern
index|[]
name|partialReservedPlanMask
init|=
name|toPattern
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"data/warehouse/(.*?/)+\\.hive-staging"
comment|// the directory might be db/table/partition
comment|//TODO: add more expected test result here
block|}
argument_list|)
decl_stmt|;
comment|/**    * Pattern to match and (partial) replacement text.    * For example, {"transaction":76,"bucketid":8249877}.  We just want to mask 76 but a regex that    * matches just 76 will match a lot of other things.    */
specifier|private
specifier|final
specifier|static
class|class
name|PatternReplacementPair
block|{
specifier|private
specifier|final
name|Pattern
name|pattern
decl_stmt|;
specifier|private
specifier|final
name|String
name|replacement
decl_stmt|;
name|PatternReplacementPair
parameter_list|(
name|Pattern
name|p
parameter_list|,
name|String
name|r
parameter_list|)
block|{
name|pattern
operator|=
name|p
expr_stmt|;
name|replacement
operator|=
name|r
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|PatternReplacementPair
index|[]
name|partialPlanMask
decl_stmt|;
block|{
name|ArrayList
argument_list|<
name|PatternReplacementPair
argument_list|>
name|ppm
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ppm
operator|.
name|add
argument_list|(
operator|new
name|PatternReplacementPair
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\{\"writeid\":[1-9][0-9]*,\"bucketid\":"
argument_list|)
argument_list|,
literal|"{\"writeid\":### Masked writeid ###,\"bucketid\":"
argument_list|)
argument_list|)
expr_stmt|;
name|ppm
operator|.
name|add
argument_list|(
operator|new
name|PatternReplacementPair
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"attempt_[0-9_]+"
argument_list|)
argument_list|,
literal|"attempt_#ID#"
argument_list|)
argument_list|)
expr_stmt|;
name|ppm
operator|.
name|add
argument_list|(
operator|new
name|PatternReplacementPair
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"vertex_[0-9_]+"
argument_list|)
argument_list|,
literal|"vertex_#ID#"
argument_list|)
argument_list|)
expr_stmt|;
name|ppm
operator|.
name|add
argument_list|(
operator|new
name|PatternReplacementPair
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"task_[0-9_]+"
argument_list|)
argument_list|,
literal|"task_#ID#"
argument_list|)
argument_list|)
expr_stmt|;
name|partialPlanMask
operator|=
name|ppm
operator|.
name|toArray
argument_list|(
operator|new
name|PatternReplacementPair
index|[
name|ppm
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
comment|/* This list may be modified by specific cli drivers to mask strings that change on every test */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|private
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|Pattern
argument_list|,
name|String
argument_list|>
argument_list|>
name|patternsWithMaskComments
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Pattern
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
name|toPatternPair
argument_list|(
literal|"(pblob|s3.?|swift|wasb.?).*hive-staging.*"
argument_list|,
literal|"### BLOBSTORE_STAGING_PATH ###"
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|toPatternPair
argument_list|(
name|PATH_HDFS_WITH_DATE_USER_GROUP_REGEX
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s %s$3$4 %s $6%s"
argument_list|,
name|HDFS_USER_MASK
argument_list|,
name|HDFS_GROUP_MASK
argument_list|,
name|HDFS_DATE_MASK
argument_list|,
name|HDFS_MASK
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|toPatternPair
argument_list|(
name|PATH_HDFS_REGEX
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"$1%s"
argument_list|,
name|HDFS_MASK
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
name|Pair
argument_list|<
name|Pattern
argument_list|,
name|String
argument_list|>
name|toPatternPair
parameter_list|(
name|String
name|patternStr
parameter_list|,
name|String
name|maskComment
parameter_list|)
block|{
return|return
name|ImmutablePair
operator|.
name|of
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|patternStr
argument_list|)
argument_list|,
name|maskComment
argument_list|)
return|;
block|}
specifier|public
name|void
name|addPatternWithMaskComment
parameter_list|(
name|String
name|patternStr
parameter_list|,
name|String
name|maskComment
parameter_list|)
block|{
name|patternsWithMaskComments
operator|.
name|add
argument_list|(
name|toPatternPair
argument_list|(
name|patternStr
argument_list|,
name|maskComment
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

