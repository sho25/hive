begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|control
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QTestUtil
operator|.
name|FsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QTestUtil
operator|.
name|MiniClusterType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCliConfig
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HIVE_ROOT
init|=
name|getHiveRoot
argument_list|()
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|MetastoreType
block|{
name|sql
block|,
name|hbase
block|}
empty_stmt|;
specifier|private
name|MetastoreType
name|metastoreType
init|=
name|MetastoreType
operator|.
name|sql
decl_stmt|;
specifier|private
name|String
name|queryFile
decl_stmt|;
specifier|private
name|String
name|queryFileRegex
decl_stmt|;
specifier|private
name|String
name|queryDirectory
decl_stmt|;
comment|// pending change to boolean
specifier|private
name|String
name|runDisabled
decl_stmt|;
comment|// FIXME: file paths in strings should be changed to either File or Path ... anything but String
specifier|private
name|String
name|resultsDirectory
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|excludedQueryFileNames
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|hadoopVersion
decl_stmt|;
specifier|private
name|String
name|logDirectory
decl_stmt|;
comment|// these should have viable defaults
specifier|private
name|String
name|cleanupScript
decl_stmt|;
specifier|private
name|String
name|initScript
decl_stmt|;
specifier|private
name|String
name|hiveConfDir
decl_stmt|;
specifier|private
name|MiniClusterType
name|clusterType
decl_stmt|;
specifier|private
name|FsType
name|fsType
decl_stmt|;
comment|// FIXME: null value is treated differently on the other end..when those filter will be
comment|// moved...this may change
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|includeQueryFileNames
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|CliAdapter
argument_list|>
name|cliAdapter
decl_stmt|;
specifier|public
name|AbstractCliConfig
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CliAdapter
argument_list|>
name|adapter
parameter_list|)
block|{
name|cliAdapter
operator|=
name|adapter
expr_stmt|;
name|clusterType
operator|=
name|MiniClusterType
operator|.
name|none
expr_stmt|;
name|queryFile
operator|=
name|getSysPropValue
argument_list|(
literal|"qfile"
argument_list|)
expr_stmt|;
name|queryFileRegex
operator|=
name|getSysPropValue
argument_list|(
literal|"qfile_regex"
argument_list|)
expr_stmt|;
name|runDisabled
operator|=
name|getSysPropValue
argument_list|(
literal|"run_disabled"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getHiveRoot
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|candidateSiblings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hive.root"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|candidateSiblings
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hive.root"
argument_list|)
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"error getting hive.root"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|candidateSiblings
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|string
range|:
name|candidateSiblings
control|)
block|{
name|File
name|curr
init|=
operator|new
name|File
argument_list|(
name|string
argument_list|)
decl_stmt|;
do|do
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|lls
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|curr
operator|.
name|list
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lls
operator|.
name|contains
argument_list|(
literal|"itests"
argument_list|)
operator|&&
name|lls
operator|.
name|contains
argument_list|(
literal|"ql"
argument_list|)
operator|&&
name|lls
operator|.
name|contains
argument_list|(
literal|"metastore"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"detected hiveRoot: "
operator|+
name|curr
argument_list|)
expr_stmt|;
return|return
name|QTestUtil
operator|.
name|ensurePathEndsInSlash
argument_list|(
name|curr
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
name|curr
operator|=
name|curr
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|curr
operator|!=
literal|null
condition|)
do|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unable to find hiveRoot"
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|setQueryDir
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
name|queryDirectory
operator|=
name|getAbsolutePath
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|overrideUserQueryFile
parameter_list|(
name|String
name|q
parameter_list|)
block|{
name|queryFile
operator|=
name|q
expr_stmt|;
block|}
specifier|public
name|void
name|includesFrom
parameter_list|(
name|URL
name|resource
parameter_list|,
name|String
name|key
parameter_list|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|resource
operator|.
name|openStream
argument_list|()
init|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|String
name|fileNames
init|=
name|getSysPropValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileNames
operator|==
literal|null
condition|)
block|{
name|fileNames
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileNames
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|qFile
range|:
name|TEST_SPLITTER
operator|.
name|split
argument_list|(
name|fileNames
argument_list|)
control|)
block|{
name|includeQuery
argument_list|(
name|qFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"error processing:"
operator|+
name|resource
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|includeQuery
parameter_list|(
name|String
name|qFile
parameter_list|)
block|{
if|if
condition|(
name|includeQueryFileNames
operator|==
literal|null
condition|)
block|{
name|includeQueryFileNames
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|includeQueryFileNames
operator|.
name|add
argument_list|(
name|qFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|excludesFrom
parameter_list|(
name|URL
name|resource
parameter_list|,
name|String
name|key
parameter_list|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|resource
operator|.
name|openStream
argument_list|()
init|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|String
name|fileNames
init|=
name|getSysPropValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileNames
operator|==
literal|null
condition|)
block|{
name|fileNames
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileNames
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|qFile
range|:
name|TEST_SPLITTER
operator|.
name|split
argument_list|(
name|fileNames
argument_list|)
control|)
block|{
name|excludeQuery
argument_list|(
name|qFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"error processing:"
operator|+
name|resource
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|excludeQuery
parameter_list|(
name|String
name|qFile
parameter_list|)
block|{
name|excludedQueryFileNames
operator|.
name|add
argument_list|(
name|qFile
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Splitter
name|TEST_SPLITTER
init|=
name|Splitter
operator|.
name|onPattern
argument_list|(
literal|"[, ]"
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
decl_stmt|;
specifier|public
specifier|static
class|class
name|IncludeFilter
implements|implements
name|FileFilter
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|includeOnly
decl_stmt|;
specifier|public
name|IncludeFilter
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|includeOnly
parameter_list|)
block|{
name|this
operator|.
name|includeOnly
operator|=
name|includeOnly
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|fpath
parameter_list|)
block|{
return|return
name|includeOnly
operator|==
literal|null
operator|||
name|includeOnly
operator|.
name|contains
argument_list|(
name|fpath
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|QFileFilter
extends|extends
name|IncludeFilter
block|{
specifier|public
name|QFileFilter
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|includeOnly
parameter_list|)
block|{
name|super
argument_list|(
name|includeOnly
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|fpath
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|accept
argument_list|(
name|fpath
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|fpath
operator|.
name|isDirectory
argument_list|()
operator|||
operator|!
name|fpath
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".q"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DisabledQFileFilter
extends|extends
name|IncludeFilter
block|{
specifier|public
name|DisabledQFileFilter
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|includeOnly
parameter_list|)
block|{
name|super
argument_list|(
name|includeOnly
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|fpath
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|accept
argument_list|(
name|fpath
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|fpath
operator|.
name|isDirectory
argument_list|()
operator|&&
name|fpath
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".q.disabled"
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|QFileRegexFilter
implements|implements
name|FileFilter
block|{
name|Pattern
name|filterPattern
decl_stmt|;
specifier|public
name|QFileRegexFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|filterPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|filePath
parameter_list|)
block|{
if|if
condition|(
name|filePath
operator|.
name|isDirectory
argument_list|()
operator|||
operator|!
name|filePath
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".q"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|testName
init|=
name|StringUtils
operator|.
name|chomp
argument_list|(
name|filePath
operator|.
name|getName
argument_list|()
argument_list|,
literal|".q"
argument_list|)
decl_stmt|;
return|return
name|filterPattern
operator|.
name|matcher
argument_list|(
name|testName
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|File
argument_list|>
name|getQueryFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareDirs
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|includeOnly
init|=
name|includeQueryFileNames
decl_stmt|;
comment|// queryDirectory should not be null
name|File
name|queryDir
init|=
operator|new
name|File
argument_list|(
name|queryDirectory
argument_list|)
decl_stmt|;
comment|// dedup file list
name|Set
argument_list|<
name|File
argument_list|>
name|testFiles
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryFile
operator|!=
literal|null
operator|&&
operator|!
name|queryFile
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// The user may have passed a list of files - comma separated
for|for
control|(
name|String
name|qFile
range|:
name|TEST_SPLITTER
operator|.
name|split
argument_list|(
name|queryFile
argument_list|)
control|)
block|{
if|if
condition|(
literal|null
operator|!=
name|queryDir
condition|)
block|{
name|testFiles
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|queryDir
argument_list|,
name|qFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testFiles
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|qFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|queryFileRegex
operator|!=
literal|null
operator|&&
operator|!
name|queryFileRegex
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|regex
range|:
name|TEST_SPLITTER
operator|.
name|split
argument_list|(
name|queryFileRegex
argument_list|)
control|)
block|{
name|testFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|queryDir
operator|.
name|listFiles
argument_list|(
operator|new
name|QFileRegexFilter
argument_list|(
name|regex
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|runDisabled
operator|!=
literal|null
operator|&&
name|runDisabled
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|testFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|queryDir
operator|.
name|listFiles
argument_list|(
operator|new
name|DisabledQFileFilter
argument_list|(
name|includeOnly
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|queryDir
operator|.
name|listFiles
argument_list|(
operator|new
name|QFileFilter
argument_list|(
name|includeOnly
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|qFileName
range|:
name|excludedQueryFileNames
control|)
block|{
name|testFiles
operator|.
name|remove
argument_list|(
operator|new
name|File
argument_list|(
name|queryDir
argument_list|,
name|qFileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|testFiles
return|;
block|}
specifier|private
name|void
name|prepareDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|hiveRootDir
init|=
operator|new
name|File
argument_list|(
name|HIVE_ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hiveRootDir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive Root Directory "
operator|+
name|hiveRootDir
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|File
name|logDir
init|=
operator|new
name|File
argument_list|(
name|logDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|logDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
block|}
name|File
name|resultsDir
init|=
operator|new
name|File
argument_list|(
name|resultsDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resultsDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|resultsDir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getHadoopVersion
parameter_list|()
block|{
if|if
condition|(
name|hadoopVersion
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"detecting hadoop.version from loaded libs"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|hadoopPropsLoc
init|=
literal|"/META-INF/maven/org.apache.hadoop/hadoop-hdfs/pom.properties"
decl_stmt|;
name|URL
name|hadoopPropsURL
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|hadoopPropsLoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|hadoopPropsURL
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to get hadoop properties: "
operator|+
name|hadoopPropsLoc
argument_list|)
throw|;
block|}
try|try
init|(
name|InputStream
name|is
init|=
name|hadoopPropsURL
operator|.
name|openStream
argument_list|()
init|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|hadoopVersion
operator|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hadoopVersion
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"version property not found"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unable to extract hadoop.version from: "
operator|+
name|hadoopPropsURL
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"can't get hadoop.version ; specify manually using hadoop.version property!"
argument_list|)
throw|;
block|}
block|}
return|return
name|hadoopVersion
return|;
block|}
specifier|protected
name|void
name|setHadoopVersion
parameter_list|(
name|String
name|hadoopVersion
parameter_list|)
block|{
name|this
operator|.
name|hadoopVersion
operator|=
name|hadoopVersion
expr_stmt|;
block|}
specifier|public
name|String
name|getLogDir
parameter_list|()
block|{
return|return
name|logDirectory
return|;
block|}
specifier|protected
name|void
name|setLogDir
parameter_list|(
name|String
name|logDirectory
parameter_list|)
block|{
name|this
operator|.
name|logDirectory
operator|=
name|getAbsolutePath
argument_list|(
name|logDirectory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getResultsDir
parameter_list|()
block|{
return|return
name|resultsDirectory
return|;
block|}
specifier|protected
name|void
name|setResultsDir
parameter_list|(
name|String
name|resultsDir
parameter_list|)
block|{
name|resultsDirectory
operator|=
name|getAbsolutePath
argument_list|(
name|resultsDir
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getCleanupScript
parameter_list|()
block|{
return|return
name|cleanupScript
return|;
block|}
specifier|protected
name|void
name|setCleanupScript
parameter_list|(
name|String
name|cleanupScript
parameter_list|)
block|{
name|this
operator|.
name|cleanupScript
operator|=
name|cleanupScript
expr_stmt|;
block|}
specifier|public
name|String
name|getInitScript
parameter_list|()
block|{
return|return
name|initScript
return|;
block|}
specifier|protected
name|void
name|setInitScript
parameter_list|(
name|String
name|initScript
parameter_list|)
block|{
name|String
name|initScriptPropValue
init|=
name|getSysPropValue
argument_list|(
literal|"initScript"
argument_list|)
decl_stmt|;
if|if
condition|(
name|initScriptPropValue
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"initScript override(by system property):"
operator|+
name|initScriptPropValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|initScript
operator|=
name|initScriptPropValue
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|initScript
operator|=
name|initScript
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getHiveConfDir
parameter_list|()
block|{
return|return
name|hiveConfDir
return|;
block|}
specifier|protected
name|void
name|setHiveConfDir
parameter_list|(
name|String
name|hiveConfDir
parameter_list|)
block|{
if|if
condition|(
name|hiveConfDir
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|hiveConfDir
operator|=
name|hiveConfDir
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|hiveConfDir
operator|=
name|getAbsolutePath
argument_list|(
name|hiveConfDir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|MiniClusterType
name|getClusterType
parameter_list|()
block|{
return|return
name|clusterType
return|;
block|}
specifier|protected
name|void
name|setClusterType
parameter_list|(
name|MiniClusterType
name|type
parameter_list|)
block|{
name|String
name|modeStr
init|=
name|getSysPropValue
argument_list|(
literal|"clustermode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|modeStr
operator|!=
literal|null
condition|)
block|{
comment|// FIXME: this should be changeto valueOf ...
comment|// that will also kill that fallback 'none' which is I think more like a problem than a
comment|// feature ;)
name|clusterType
operator|=
name|MiniClusterType
operator|.
name|valueForString
argument_list|(
name|modeStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clusterType
operator|=
name|type
expr_stmt|;
block|}
if|if
condition|(
name|clusterType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"clustertype cant be null"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|FsType
name|getFsType
parameter_list|()
block|{
return|return
name|this
operator|.
name|fsType
return|;
block|}
specifier|protected
name|void
name|setFsType
parameter_list|(
name|FsType
name|fsType
parameter_list|)
block|{
name|this
operator|.
name|fsType
operator|=
name|fsType
expr_stmt|;
block|}
specifier|private
name|String
name|getSysPropValue
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
name|String
name|propValue
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|propValue
operator|==
literal|null
operator|||
name|propValue
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"property: "
operator|+
name|propName
operator|+
literal|" used as override with val: "
operator|+
name|propValue
argument_list|)
expr_stmt|;
return|return
name|propValue
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|public
name|CliAdapter
name|getCliAdapter
parameter_list|()
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|CliAdapter
argument_list|>
name|cz
init|=
name|cliAdapter
operator|.
name|getConstructor
argument_list|(
name|AbstractCliConfig
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|cz
operator|.
name|newInstance
argument_list|(
name|this
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unable to build adapter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|setMetastoreType
parameter_list|(
name|MetastoreType
name|mt
parameter_list|)
block|{
name|metastoreType
operator|=
name|mt
expr_stmt|;
block|}
specifier|public
name|MetastoreType
name|getMetastoreType
parameter_list|()
block|{
return|return
name|metastoreType
return|;
block|}
specifier|public
name|String
name|getQueryDirectory
parameter_list|()
block|{
return|return
name|queryDirectory
return|;
block|}
specifier|private
name|String
name|getAbsolutePath
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|HIVE_ROOT
argument_list|)
argument_list|,
name|dir
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
block|}
end_class

end_unit

