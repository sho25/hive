begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QTestMiniClusters
operator|.
name|MiniClusterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_class
specifier|public
class|class
name|QTestRunnerUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_INIT_SCRIPT
init|=
literal|"q_test_init.sql"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CLEANUP_SCRIPT
init|=
literal|"q_test_cleanup.sql"
decl_stmt|;
comment|/**    * QTRunner: Runnable class for running a single query file.    **/
specifier|public
specifier|static
class|class
name|QTRunner
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|QTestUtil
name|qt
decl_stmt|;
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
specifier|public
name|QTRunner
parameter_list|(
name|QTestUtil
name|qt
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|qt
operator|=
name|qt
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|qt
operator|.
name|startSessionState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// assumption is that environment has already been cleaned once globally
comment|// hence each thread does not call cleanUp() and createSources() again
name|qt
operator|.
name|cliInit
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|qt
operator|.
name|executeClient
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Query file "
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|" failed with exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|outputTestFailureHelpMessage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Setup to execute a set of query files. Uses QTestUtil to do so.    *    * @param qfiles array of input query files containing arbitrary number of hive queries    * @param resDir output directory    * @param logDir log directory    * @return one QTestUtil for each query file    */
specifier|public
specifier|static
name|QTestUtil
index|[]
name|queryListRunnerSetup
parameter_list|(
name|File
index|[]
name|qfiles
parameter_list|,
name|String
name|resDir
parameter_list|,
name|String
name|logDir
parameter_list|,
name|String
name|initScript
parameter_list|,
name|String
name|cleanupScript
parameter_list|)
throws|throws
name|Exception
block|{
name|QTestUtil
index|[]
name|qt
init|=
operator|new
name|QTestUtil
index|[
name|qfiles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qt
index|[
name|i
index|]
operator|=
operator|new
name|QTestUtil
argument_list|(
name|QTestArguments
operator|.
name|QTestArgumentsBuilder
operator|.
name|instance
argument_list|()
operator|.
name|withOutDir
argument_list|(
name|resDir
argument_list|)
operator|.
name|withLogDir
argument_list|(
name|logDir
argument_list|)
operator|.
name|withClusterType
argument_list|(
name|MiniClusterType
operator|.
name|NONE
argument_list|)
operator|.
name|withConfDir
argument_list|(
literal|null
argument_list|)
operator|.
name|withInitScript
argument_list|(
name|initScript
operator|==
literal|null
condition|?
name|DEFAULT_INIT_SCRIPT
else|:
name|initScript
argument_list|)
operator|.
name|withCleanupScript
argument_list|(
name|cleanupScript
operator|==
literal|null
condition|?
name|DEFAULT_CLEANUP_SCRIPT
else|:
name|cleanupScript
argument_list|)
operator|.
name|withLlapIo
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|addFile
argument_list|(
name|qfiles
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|clearTestSideEffects
argument_list|()
expr_stmt|;
block|}
return|return
name|qt
return|;
block|}
comment|/**    * Executes a set of query files in sequence.    *    * @param qfiles array of input query files containing arbitrary number of hive queries    * @param qt array of QTestUtils, one per qfile    * @return true if all queries passed, false otw    */
specifier|public
specifier|static
name|boolean
name|queryListRunnerSingleThreaded
parameter_list|(
name|File
index|[]
name|qfiles
parameter_list|,
name|QTestUtil
index|[]
name|qt
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|createSources
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
operator|&&
operator|!
name|failed
condition|;
name|i
operator|++
control|)
block|{
name|qt
index|[
name|i
index|]
operator|.
name|clearTestSideEffects
argument_list|()
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|cliInit
argument_list|(
name|qfiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|executeClient
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|QTestProcessExecResult
name|result
init|=
name|qt
index|[
name|i
index|]
operator|.
name|checkCliDriverResults
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getReturnCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Test "
argument_list|)
operator|.
name|append
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" results check failed with error code "
argument_list|)
operator|.
name|append
argument_list|(
name|result
operator|.
name|getReturnCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNotEmpty
argument_list|(
name|result
operator|.
name|getCapturedOutput
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" and diff value "
argument_list|)
operator|.
name|append
argument_list|(
name|result
operator|.
name|getCapturedOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|outputTestFailureHelpMessage
argument_list|()
expr_stmt|;
block|}
name|qt
index|[
name|i
index|]
operator|.
name|clearPostTestEffects
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
operator|!
name|failed
operator|)
return|;
block|}
comment|/**    * Executes a set of query files parallel.    *<p>    * Each query file is run in a separate thread. The caller has to arrange that different query    * files do not collide (in terms of destination tables)    *    * @param qfiles array of input query files containing arbitrary number of hive queries    * @param qt array of QTestUtils, one per qfile    * @return true if all queries passed, false otw    */
specifier|public
specifier|static
name|boolean
name|queryListRunnerMultiThreaded
parameter_list|(
name|File
index|[]
name|qfiles
parameter_list|,
name|QTestUtil
index|[]
name|qt
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
comment|// in multithreaded mode - do cleanup/initialization just once
name|qt
index|[
literal|0
index|]
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|createSources
argument_list|()
expr_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|clearTestSideEffects
argument_list|()
expr_stmt|;
name|QTRunner
index|[]
name|qtRunners
init|=
operator|new
name|QTRunner
index|[
name|qfiles
operator|.
name|length
index|]
decl_stmt|;
name|Thread
index|[]
name|qtThread
init|=
operator|new
name|Thread
index|[
name|qfiles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qtRunners
index|[
name|i
index|]
operator|=
operator|new
name|QTRunner
argument_list|(
name|qt
index|[
name|i
index|]
argument_list|,
name|qfiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|qtThread
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|qtRunners
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qtThread
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qtThread
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|QTestProcessExecResult
name|result
init|=
name|qt
index|[
name|i
index|]
operator|.
name|checkCliDriverResults
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getReturnCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Test "
argument_list|)
operator|.
name|append
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" results check failed with error code "
argument_list|)
operator|.
name|append
argument_list|(
name|result
operator|.
name|getReturnCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNotEmpty
argument_list|(
name|result
operator|.
name|getCapturedOutput
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" and diff value "
argument_list|)
operator|.
name|append
argument_list|(
name|result
operator|.
name|getCapturedOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|outputTestFailureHelpMessage
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
operator|!
name|failed
operator|)
return|;
block|}
specifier|public
specifier|static
name|void
name|outputTestFailureHelpMessage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|QTestUtil
operator|.
name|DEBUG_HINT
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

