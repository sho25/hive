begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|dataset
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QTestSystemProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|qoption
operator|.
name|QTestOptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|QTestDatasetHandler
implements|implements
name|QTestOptionHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"QTestDatasetHandler"
argument_list|)
decl_stmt|;
specifier|private
name|File
name|datasetDir
decl_stmt|;
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|srcTables
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|missingTables
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|QTestDatasetHandler
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
comment|// Use path relative to dataDir directory if it is not specified
name|String
name|dataDir
init|=
name|getDataDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|datasetDir
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.set.files"
argument_list|)
operator|==
literal|null
condition|?
operator|new
name|File
argument_list|(
name|dataDir
operator|+
literal|"/datasets"
argument_list|)
else|:
operator|new
name|File
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.set.files"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDataDir
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|String
name|dataDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
decl_stmt|;
comment|// Use the current directory if it is not specified
if|if
condition|(
name|dataDir
operator|==
literal|null
condition|)
block|{
name|dataDir
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/data/files"
expr_stmt|;
block|}
return|return
name|dataDir
return|;
block|}
specifier|public
name|boolean
name|initDataset
parameter_list|(
name|String
name|table
parameter_list|,
name|CliDriver
name|cliDriver
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|tableFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|datasetDir
argument_list|,
name|table
argument_list|)
argument_list|,
name|Dataset
operator|.
name|INIT_FILE_NAME
argument_list|)
decl_stmt|;
name|String
name|commands
init|=
literal|null
decl_stmt|;
try|try
block|{
name|commands
operator|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|tableFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"dataset file not found %s"
argument_list|,
name|tableFile
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|CommandProcessorResponse
name|result
init|=
name|cliDriver
operator|.
name|processLine
argument_list|(
name|commands
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Result from cliDrriver.processLine in initFromDatasets="
operator|+
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failed during initFromDatasets processLine with code="
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getSrcTables
parameter_list|()
block|{
if|if
condition|(
name|srcTables
operator|==
literal|null
condition|)
block|{
name|initSrcTables
argument_list|()
expr_stmt|;
block|}
return|return
name|srcTables
return|;
block|}
specifier|public
specifier|static
name|void
name|addSrcTable
parameter_list|(
name|String
name|table
parameter_list|)
block|{
name|getSrcTables
argument_list|()
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|storeSrcTables
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|initSrcTables
parameter_list|()
block|{
if|if
condition|(
name|srcTables
operator|==
literal|null
condition|)
block|{
name|initSrcTablesFromSystemProperty
argument_list|()
expr_stmt|;
name|storeSrcTables
argument_list|()
expr_stmt|;
block|}
return|return
name|srcTables
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isSourceTable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getSrcTables
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|storeSrcTables
parameter_list|()
block|{
name|QTestSystemProperties
operator|.
name|setSrcTables
argument_list|(
name|srcTables
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|initSrcTablesFromSystemProperty
parameter_list|()
block|{
name|srcTables
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
comment|// FIXME: moved default value to here...for now
comment|// i think this features is never really used from the command line
for|for
control|(
name|String
name|srcTable
range|:
name|QTestSystemProperties
operator|.
name|getSrcTables
argument_list|()
control|)
block|{
name|srcTable
operator|=
name|srcTable
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|srcTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|srcTables
operator|.
name|add
argument_list|(
name|srcTable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|processArguments
parameter_list|(
name|String
name|arguments
parameter_list|)
block|{
name|String
index|[]
name|tables
init|=
name|arguments
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|tables
control|)
block|{
name|string
operator|=
name|string
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|srcTables
operator|==
literal|null
operator|||
operator|!
name|srcTables
operator|.
name|contains
argument_list|(
name|string
argument_list|)
condition|)
block|{
name|missingTables
operator|.
name|add
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeTest
parameter_list|(
name|QTestUtil
name|qt
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|missingTables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|QTestUtil
operator|.
name|class
init|)
block|{
name|qt
operator|.
name|newSession
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|table
range|:
name|missingTables
control|)
block|{
if|if
condition|(
name|initDataset
argument_list|(
name|table
argument_list|,
name|qt
operator|.
name|getCliDriver
argument_list|()
argument_list|)
condition|)
block|{
name|addSrcTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
name|missingTables
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qt
operator|.
name|newSession
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterTest
parameter_list|(
name|QTestUtil
name|qt
parameter_list|)
throws|throws
name|Exception
block|{   }
specifier|public
name|DatasetCollection
name|getDatasets
parameter_list|()
block|{
return|return
operator|new
name|DatasetCollection
argument_list|(
name|missingTables
argument_list|)
return|;
block|}
block|}
end_class

end_unit

