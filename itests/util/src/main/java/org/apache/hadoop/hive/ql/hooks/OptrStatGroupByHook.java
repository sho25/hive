begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  **/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_class
specifier|public
class|class
name|OptrStatGroupByHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
block|{
name|HiveConf
name|conf
init|=
name|hookContext
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TaskRunner
argument_list|>
name|completedTasks
init|=
name|hookContext
operator|.
name|getCompleteTaskList
argument_list|()
decl_stmt|;
name|boolean
name|enableProgress
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEJOBPROGRESS
argument_list|)
decl_stmt|;
comment|/** For each task visit the opeartor tree and and if the operator is GROUPBY      *  then print the HASH_OUT Optr level stat value.      **/
if|if
condition|(
name|completedTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TaskRunner
name|taskRunner
range|:
name|completedTasks
control|)
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
init|=
name|taskRunner
operator|.
name|getTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|isMapRedTask
argument_list|()
operator|&&
operator|!
name|task
operator|.
name|isMapRedLocalTask
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|optrSet
init|=
name|getOptrsForTask
argument_list|(
name|task
argument_list|)
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|optr
range|:
name|optrSet
control|)
block|{
if|if
condition|(
name|optr
operator|.
name|getType
argument_list|()
operator|==
name|OperatorType
operator|.
name|GROUPBY
condition|)
block|{
name|printCounterValue
argument_list|(
name|optr
operator|.
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|printCounterValue
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|ctrs
parameter_list|)
block|{
for|for
control|(
name|String
name|ctrName
range|:
name|ctrs
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ctrName
operator|.
name|contains
argument_list|(
literal|"HASH_OUT"
argument_list|)
condition|)
block|{
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
name|ctrName
operator|+
literal|"="
operator|+
name|ctrs
operator|.
name|get
argument_list|(
name|ctrName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|getOptrsForTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
parameter_list|)
block|{
name|Collection
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|topOptrs
init|=
name|task
operator|.
name|getTopOperators
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|allOptrs
init|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|opsToVisit
init|=
operator|new
name|LinkedList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|topOptrs
operator|!=
literal|null
condition|)
block|{
name|opsToVisit
operator|.
name|addAll
argument_list|(
name|topOptrs
argument_list|)
expr_stmt|;
name|addChildOptrs
argument_list|(
name|opsToVisit
argument_list|,
name|allOptrs
argument_list|)
expr_stmt|;
block|}
return|return
name|allOptrs
return|;
block|}
specifier|private
name|void
name|addChildOptrs
parameter_list|(
name|Queue
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|opsToVisit
parameter_list|,
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|opsVisited
parameter_list|)
block|{
if|if
condition|(
name|opsToVisit
operator|==
literal|null
operator|||
name|opsVisited
operator|==
literal|null
condition|)
block|{
return|return;
block|}
while|while
condition|(
name|opsToVisit
operator|.
name|peek
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|opsToVisit
operator|.
name|remove
argument_list|()
decl_stmt|;
name|opsVisited
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|opsVisited
operator|.
name|contains
argument_list|(
name|childOp
argument_list|)
condition|)
block|{
name|opsToVisit
operator|.
name|add
argument_list|(
name|childOp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

