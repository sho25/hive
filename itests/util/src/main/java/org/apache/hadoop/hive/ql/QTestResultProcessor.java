begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DigestPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|SessionStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|SortAndDigestPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|SortPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|StreamPrinter
import|;
end_import

begin_comment
comment|/**  * QTestResultProcessor: handles file-level q test result post-processing: sort, diff (similar to  * QOutProcessor, but this works with files, and QOutProcessor is for text-processing within a qtest  * result file)  *  */
end_comment

begin_class
specifier|public
class|class
name|QTestResultProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|SORT_BEFORE_DIFF
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- SORT_BEFORE_DIFF"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|SORT_QUERY_RESULTS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- SORT_QUERY_RESULTS"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|HASH_QUERY_RESULTS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- HASH_QUERY_RESULTS"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|SORT_AND_HASH_QUERY_RESULTS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- SORT_AND_HASH_QUERY_RESULTS"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|NO_SESSION_REUSE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- NO_SESSION_REUSE"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SORT_SUFFIX
init|=
literal|".sorted"
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qSortSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qSortQuerySet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qHashQuerySet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qSortNHashQuerySet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qNoSessionReuseQuerySet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|add
parameter_list|(
name|File
name|qf
parameter_list|,
name|String
name|query
parameter_list|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|SORT_BEFORE_DIFF
argument_list|,
name|query
argument_list|)
condition|)
block|{
name|qSortSet
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matches
argument_list|(
name|SORT_QUERY_RESULTS
argument_list|,
name|query
argument_list|)
condition|)
block|{
name|qSortQuerySet
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matches
argument_list|(
name|HASH_QUERY_RESULTS
argument_list|,
name|query
argument_list|)
condition|)
block|{
name|qHashQuerySet
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matches
argument_list|(
name|SORT_AND_HASH_QUERY_RESULTS
argument_list|,
name|query
argument_list|)
condition|)
block|{
name|qSortNHashQuerySet
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matches
argument_list|(
name|NO_SESSION_REUSE
argument_list|,
name|query
argument_list|)
condition|)
block|{
name|qNoSessionReuseQuerySet
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|matches
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|String
name|query
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|shouldSort
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|qSortSet
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
return|;
block|}
specifier|public
name|void
name|setOutputs
parameter_list|(
name|CliSessionState
name|ss
parameter_list|,
name|OutputStream
name|fo
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|qSortQuerySet
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|ss
operator|.
name|out
operator|=
operator|new
name|SortPrintStream
argument_list|(
name|fo
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qHashQuerySet
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|ss
operator|.
name|out
operator|=
operator|new
name|DigestPrintStream
argument_list|(
name|fo
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qSortNHashQuerySet
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|ss
operator|.
name|out
operator|=
operator|new
name|SortAndDigestPrintStream
argument_list|(
name|fo
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|=
operator|new
name|SessionStream
argument_list|(
name|fo
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|shouldNotReuseSession
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|qNoSessionReuseQuerySet
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
return|;
block|}
specifier|public
name|QTestProcessExecResult
name|executeDiffCommand
parameter_list|(
name|String
name|inFileName
parameter_list|,
name|String
name|outFileName
parameter_list|,
name|boolean
name|ignoreWhiteSpace
parameter_list|,
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
name|QTestProcessExecResult
name|result
decl_stmt|;
if|if
condition|(
name|shouldSort
argument_list|(
name|tname
argument_list|)
condition|)
block|{
name|String
name|inSorted
init|=
name|inFileName
operator|+
name|SORT_SUFFIX
decl_stmt|;
name|String
name|outSorted
init|=
name|outFileName
operator|+
name|SORT_SUFFIX
decl_stmt|;
name|sortResult
argument_list|(
name|inFileName
argument_list|,
name|outFileName
argument_list|,
name|inSorted
argument_list|,
name|outSorted
argument_list|)
expr_stmt|;
name|inFileName
operator|=
name|inSorted
expr_stmt|;
name|outFileName
operator|=
name|outSorted
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|diffCommandArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|diffCommandArgs
operator|.
name|add
argument_list|(
literal|"diff"
argument_list|)
expr_stmt|;
comment|// Text file comparison
name|diffCommandArgs
operator|.
name|add
argument_list|(
literal|"-a"
argument_list|)
expr_stmt|;
comment|// Ignore changes in the amount of white space
if|if
condition|(
name|ignoreWhiteSpace
condition|)
block|{
name|diffCommandArgs
operator|.
name|add
argument_list|(
literal|"-b"
argument_list|)
expr_stmt|;
block|}
comment|// Add files to compare to the arguments list
name|diffCommandArgs
operator|.
name|add
argument_list|(
name|getQuotedString
argument_list|(
name|inFileName
argument_list|)
argument_list|)
expr_stmt|;
name|diffCommandArgs
operator|.
name|add
argument_list|(
name|getQuotedString
argument_list|(
name|outFileName
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|executeCmd
argument_list|(
name|diffCommandArgs
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldSort
argument_list|(
name|tname
argument_list|)
condition|)
block|{
operator|new
name|File
argument_list|(
name|inFileName
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|outFileName
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|overwriteResults
parameter_list|(
name|String
name|inFileName
parameter_list|,
name|String
name|outFileName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// This method can be replaced with Files.copy(source, target, REPLACE_EXISTING)
comment|// once Hive uses JAVA 7.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Overwriting results "
operator|+
name|inFileName
operator|+
literal|" to "
operator|+
name|outFileName
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|executeCmd
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"cp"
block|,
name|getQuotedString
argument_list|(
name|inFileName
argument_list|)
block|,
name|getQuotedString
argument_list|(
name|outFileName
argument_list|)
block|}
argument_list|)
operator|.
name|getReturnCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected error while overwriting "
operator|+
name|inFileName
operator|+
literal|" with "
operator|+
name|outFileName
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|sortResult
parameter_list|(
name|String
name|inFileName
parameter_list|,
name|String
name|outFileName
parameter_list|,
name|String
name|inSorted
parameter_list|,
name|String
name|outSorted
parameter_list|)
throws|throws
name|Exception
block|{
comment|// sort will try to open the output file in write mode on windows. We need to
comment|// close it first.
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|out
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|out
operator|!=
name|System
operator|.
name|out
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sortFiles
argument_list|(
name|inFileName
argument_list|,
name|inSorted
argument_list|)
expr_stmt|;
name|sortFiles
argument_list|(
name|outFileName
argument_list|,
name|outSorted
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sortFiles
parameter_list|(
name|String
name|in
parameter_list|,
name|String
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|result
init|=
name|executeCmd
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"sort"
block|,
name|getQuotedString
argument_list|(
name|in
argument_list|)
block|, }
argument_list|,
name|out
argument_list|,
literal|null
argument_list|)
operator|.
name|getReturnCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected error while sorting "
operator|+
name|in
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|QTestProcessExecResult
name|executeCmd
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|executeCmd
argument_list|(
name|args
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|QTestProcessExecResult
name|executeCmd
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|executeCmd
argument_list|(
name|args
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|QTestProcessExecResult
name|executeCmd
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|args
parameter_list|,
name|String
name|outFile
parameter_list|,
name|String
name|errFile
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|cmdArray
init|=
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
name|executeCmd
argument_list|(
name|cmdArray
argument_list|,
name|outFile
argument_list|,
name|errFile
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|QTestProcessExecResult
name|executeCmd
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|String
name|outFile
parameter_list|,
name|String
name|errFile
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running: "
operator|+
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
operator|.
name|join
argument_list|(
name|args
argument_list|,
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|outFile
operator|==
literal|null
condition|?
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getChildOutStream
argument_list|()
else|:
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|PrintStream
name|err
init|=
name|errFile
operator|==
literal|null
condition|?
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getChildErrStream
argument_list|()
else|:
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|errFile
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|str
init|=
operator|new
name|PrintStream
argument_list|(
name|bos
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|err
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|out
argument_list|,
name|str
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|result
init|=
name|executor
operator|.
name|waitFor
argument_list|()
decl_stmt|;
name|outPrinter
operator|.
name|join
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|outFile
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|errFile
operator|!=
literal|null
condition|)
block|{
name|err
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|QTestProcessExecResult
operator|.
name|create
argument_list|(
name|result
argument_list|,
operator|new
name|String
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getQuotedString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
return|;
block|}
block|}
end_class

end_unit

