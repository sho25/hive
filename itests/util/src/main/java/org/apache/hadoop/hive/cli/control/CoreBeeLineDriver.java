begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|control
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|util
operator|.
name|QFileClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_class
specifier|public
class|class
name|CoreBeeLineDriver
extends|extends
name|CliAdapter
block|{
specifier|private
specifier|final
name|String
name|hiveRootDirectory
init|=
name|AbstractCliConfig
operator|.
name|HIVE_ROOT
decl_stmt|;
specifier|private
specifier|final
name|String
name|queryDirectory
decl_stmt|;
specifier|private
specifier|final
name|String
name|logDirectory
decl_stmt|;
specifier|private
specifier|final
name|String
name|resultsDirectory
decl_stmt|;
specifier|private
specifier|final
name|String
name|initScript
decl_stmt|;
specifier|private
specifier|final
name|String
name|cleanupScript
decl_stmt|;
specifier|private
name|boolean
name|overwrite
init|=
literal|false
decl_stmt|;
specifier|private
name|MiniHS2
name|miniHS2
decl_stmt|;
comment|//  private static QTestUtil.QTestSetup miniZKCluster = null;
specifier|public
name|CoreBeeLineDriver
parameter_list|(
name|AbstractCliConfig
name|testCliConfig
parameter_list|)
block|{
name|super
argument_list|(
name|testCliConfig
argument_list|)
expr_stmt|;
name|queryDirectory
operator|=
name|testCliConfig
operator|.
name|getQueryDirectory
argument_list|()
expr_stmt|;
name|logDirectory
operator|=
name|testCliConfig
operator|.
name|getLogDir
argument_list|()
expr_stmt|;
name|resultsDirectory
operator|=
name|testCliConfig
operator|.
name|getResultsDir
argument_list|()
expr_stmt|;
name|initScript
operator|=
name|testCliConfig
operator|.
name|getInitScript
argument_list|()
expr_stmt|;
name|cleanupScript
operator|=
name|testCliConfig
operator|.
name|getCleanupScript
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|BeforeClass
specifier|public
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testOutputOverwrite
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.output.overwrite"
argument_list|)
decl_stmt|;
if|if
condition|(
name|testOutputOverwrite
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|testOutputOverwrite
argument_list|)
condition|)
block|{
name|overwrite
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|disableserver
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.service.disable.server"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|disableserver
operator|&&
name|disableserver
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"test.service.disable.server=true Skipping HiveServer2 initialization!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
comment|// We do not need Zookeeper at the moment
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_LOCK_MANAGER
operator|.
name|varname
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.EmbeddedLockManager"
argument_list|)
expr_stmt|;
comment|// But if we need later we can enable it with this, or create one ourself
comment|//    miniZKCluster = new QTestUtil.QTestSetup();
comment|//    miniZKCluster.preTest(hiveConf);
name|hiveConf
operator|.
name|logVars
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
operator|.
name|Builder
argument_list|()
operator|.
name|withConf
argument_list|(
name|hiveConf
argument_list|)
operator|.
name|cleanupLocalDirOnStartup
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|AfterClass
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniHS2
operator|!=
literal|null
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|//    if (miniZKCluster != null) {
comment|//      miniZKCluster.tearDown();
comment|//    }
block|}
specifier|public
name|void
name|runTest
parameter_list|(
name|String
name|qFileName
parameter_list|)
throws|throws
name|Exception
block|{
name|QFileClient
name|qClient
init|=
operator|new
name|QFileClient
argument_list|(
name|miniHS2
operator|.
name|getHiveConf
argument_list|()
argument_list|,
name|hiveRootDirectory
argument_list|,
name|queryDirectory
argument_list|,
name|logDirectory
argument_list|,
name|resultsDirectory
argument_list|,
name|initScript
argument_list|,
name|cleanupScript
argument_list|)
operator|.
name|setQFileName
argument_list|(
name|qFileName
argument_list|)
operator|.
name|setUsername
argument_list|(
literal|"user"
argument_list|)
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
operator|.
name|setJdbcUrl
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|)
operator|.
name|setJdbcDriver
argument_list|(
literal|"org.apache.hive.jdbc.HiveDriver"
argument_list|)
operator|.
name|setTestDataDirectory
argument_list|(
name|hiveRootDirectory
operator|+
literal|"/data/files"
argument_list|)
operator|.
name|setTestScriptDirectory
argument_list|(
name|hiveRootDirectory
operator|+
literal|"/data/scripts"
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> STARTED "
operator|+
name|qFileName
operator|+
literal|" (Thread "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
try|try
block|{
name|qClient
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> FAILED "
operator|+
name|qFileName
operator|+
literal|" with exception:"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|long
name|elapsedTime
init|=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000
decl_stmt|;
name|String
name|time
init|=
literal|"("
operator|+
name|elapsedTime
operator|+
literal|"s)"
decl_stmt|;
if|if
condition|(
name|qClient
operator|.
name|compareResults
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> PASSED "
operator|+
name|qFileName
operator|+
literal|" "
operator|+
name|time
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|qClient
operator|.
name|hasErrors
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> FAILED "
operator|+
name|qFileName
operator|+
literal|" (ERROR) "
operator|+
name|time
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|overwrite
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> PASSED "
operator|+
name|qFileName
operator|+
literal|" (OVERWRITE) "
operator|+
name|time
argument_list|)
expr_stmt|;
name|qClient
operator|.
name|overwriteResults
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> FAILED "
operator|+
name|qFileName
operator|+
literal|" (DIFF) "
operator|+
name|time
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|runTest
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|name2
parameter_list|,
name|String
name|absolutePath
parameter_list|)
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|name2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

