begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|control
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|PreExecutePrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|qfile
operator|.
name|QFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|qfile
operator|.
name|QFile
operator|.
name|QFileBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|qfile
operator|.
name|QFileBeeLineClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|qfile
operator|.
name|QFileBeeLineClient
operator|.
name|QFileClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_class
specifier|public
class|class
name|CoreBeeLineDriver
extends|extends
name|CliAdapter
block|{
specifier|private
specifier|final
name|File
name|hiveRootDirectory
init|=
operator|new
name|File
argument_list|(
name|AbstractCliConfig
operator|.
name|HIVE_ROOT
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|File
name|queryDirectory
decl_stmt|;
specifier|private
specifier|final
name|File
name|logDirectory
decl_stmt|;
specifier|private
specifier|final
name|File
name|resultsDirectory
decl_stmt|;
specifier|private
specifier|final
name|File
name|initScript
decl_stmt|;
specifier|private
specifier|final
name|File
name|cleanupScript
decl_stmt|;
specifier|private
specifier|final
name|File
name|testDataDirectory
decl_stmt|;
specifier|private
specifier|final
name|File
name|testScriptDirectory
decl_stmt|;
specifier|private
name|boolean
name|overwrite
init|=
literal|false
decl_stmt|;
specifier|private
name|MiniHS2
name|miniHS2
decl_stmt|;
specifier|private
name|QFileClientBuilder
name|clientBuilder
decl_stmt|;
specifier|private
name|QFileBuilder
name|fileBuilder
decl_stmt|;
comment|//  private static QTestUtil.QTestSetup miniZKCluster = null;
specifier|public
name|CoreBeeLineDriver
parameter_list|(
name|AbstractCliConfig
name|testCliConfig
parameter_list|)
block|{
name|super
argument_list|(
name|testCliConfig
argument_list|)
expr_stmt|;
name|queryDirectory
operator|=
operator|new
name|File
argument_list|(
name|testCliConfig
operator|.
name|getQueryDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|logDirectory
operator|=
operator|new
name|File
argument_list|(
name|testCliConfig
operator|.
name|getLogDir
argument_list|()
argument_list|)
expr_stmt|;
name|resultsDirectory
operator|=
operator|new
name|File
argument_list|(
name|testCliConfig
operator|.
name|getResultsDir
argument_list|()
argument_list|)
expr_stmt|;
name|testDataDirectory
operator|=
operator|new
name|File
argument_list|(
name|hiveRootDirectory
argument_list|,
literal|"data"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"files"
argument_list|)
expr_stmt|;
name|testScriptDirectory
operator|=
operator|new
name|File
argument_list|(
name|hiveRootDirectory
argument_list|,
literal|"data"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"scripts"
argument_list|)
expr_stmt|;
name|initScript
operator|=
operator|new
name|File
argument_list|(
name|testScriptDirectory
argument_list|,
name|testCliConfig
operator|.
name|getInitScript
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupScript
operator|=
operator|new
name|File
argument_list|(
name|testScriptDirectory
argument_list|,
name|testCliConfig
operator|.
name|getCleanupScript
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|BeforeClass
specifier|public
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testOutputOverwrite
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.output.overwrite"
argument_list|)
decl_stmt|;
if|if
condition|(
name|testOutputOverwrite
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|testOutputOverwrite
argument_list|)
condition|)
block|{
name|overwrite
operator|=
literal|true
expr_stmt|;
block|}
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
comment|// We do not need Zookeeper at the moment
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_LOCK_MANAGER
operator|.
name|varname
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.EmbeddedLockManager"
argument_list|)
expr_stmt|;
comment|// But if we need later we can enable it with this, or create one ourself
comment|//    miniZKCluster = new QTestUtil.QTestSetup();
comment|//    miniZKCluster.preTest(hiveConf);
name|hiveConf
operator|.
name|logVars
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
operator|.
name|Builder
argument_list|()
operator|.
name|withConf
argument_list|(
name|hiveConf
argument_list|)
operator|.
name|cleanupLocalDirOnStartup
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|clientBuilder
operator|=
operator|new
name|QFileClientBuilder
argument_list|()
operator|.
name|setJdbcDriver
argument_list|(
literal|"org.apache.hive.jdbc.HiveDriver"
argument_list|)
operator|.
name|setJdbcUrl
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|)
operator|.
name|setUsername
argument_list|(
literal|"user"
argument_list|)
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|fileBuilder
operator|=
operator|new
name|QFileBuilder
argument_list|()
operator|.
name|setHiveRootDirectory
argument_list|(
name|hiveRootDirectory
argument_list|)
operator|.
name|setLogDirectory
argument_list|(
name|logDirectory
argument_list|)
operator|.
name|setQueryDirectory
argument_list|(
name|queryDirectory
argument_list|)
operator|.
name|setResultsDirectory
argument_list|(
name|resultsDirectory
argument_list|)
operator|.
name|setScratchDirectoryString
argument_list|(
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIR
argument_list|)
argument_list|)
operator|.
name|setWarehouseDirectoryString
argument_list|(
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|)
expr_stmt|;
name|runInfraScript
argument_list|(
name|initScript
argument_list|,
operator|new
name|File
argument_list|(
name|logDirectory
argument_list|,
literal|"init.beeline"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|logDirectory
argument_list|,
literal|"init.raw"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|runInfraScript
parameter_list|(
name|File
name|script
parameter_list|,
name|File
name|beeLineOutput
parameter_list|,
name|File
name|log
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|QFileBeeLineClient
name|beeLineClient
init|=
name|clientBuilder
operator|.
name|getClient
argument_list|(
name|beeLineOutput
argument_list|)
init|)
block|{
name|beeLineClient
operator|.
name|execute
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"set hive.exec.pre.hooks="
operator|+
name|PreExecutePrinter
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|";"
block|,
literal|"set test.data.dir="
operator|+
name|testDataDirectory
operator|+
literal|";"
block|,
literal|"set test.script.dir="
operator|+
name|testScriptDirectory
operator|+
literal|";"
block|,
literal|"!run "
operator|+
name|script
block|,           }
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|AfterClass
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|runInfraScript
argument_list|(
name|cleanupScript
argument_list|,
operator|new
name|File
argument_list|(
name|logDirectory
argument_list|,
literal|"cleanup.beeline"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|logDirectory
argument_list|,
literal|"cleanup.raw"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|miniHS2
operator|!=
literal|null
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|//    if (miniZKCluster != null) {
comment|//      miniZKCluster.tearDown();
comment|//    }
block|}
specifier|public
name|void
name|runTest
parameter_list|(
name|QFile
name|qFile
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|QFileBeeLineClient
name|beeLineClient
init|=
name|clientBuilder
operator|.
name|getClient
argument_list|(
name|qFile
operator|.
name|getLogFile
argument_list|()
argument_list|)
init|)
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> STARTED "
operator|+
name|qFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"QFile execution failed, see logs for details"
argument_list|,
name|beeLineClient
operator|.
name|execute
argument_list|(
name|qFile
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> EXECUTED "
operator|+
name|qFile
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|/
literal|1000
operator|+
literal|"s"
argument_list|)
expr_stmt|;
name|qFile
operator|.
name|filterOutput
argument_list|()
expr_stmt|;
name|long
name|filterEndTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> FILTERED "
operator|+
name|qFile
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
operator|(
name|filterEndTime
operator|-
name|endTime
operator|)
operator|/
literal|1000
operator|+
literal|"s"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
if|if
condition|(
name|qFile
operator|.
name|compareResults
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> PASSED "
operator|+
name|qFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> FAILED "
operator|+
name|qFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed diff"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qFile
operator|.
name|overwriteResults
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> PASSED "
operator|+
name|qFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|runTest
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|name2
parameter_list|,
name|String
name|absolutePath
parameter_list|)
throws|throws
name|Exception
block|{
name|QFile
name|qFile
init|=
name|fileBuilder
operator|.
name|getQFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|runTest
argument_list|(
name|qFile
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

