begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|dataset
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * DatasetParser: a parser which could parse dataset "hooks" from q files, --!qt:dataset:mydataset  */
end_comment

begin_class
specifier|public
class|class
name|DatasetParser
block|{
specifier|private
name|DatasetCollection
name|datasets
init|=
operator|new
name|DatasetCollection
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"DatasetParser"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATASET_PREFIX
init|=
literal|"--! qt:dataset:"
decl_stmt|;
specifier|public
name|void
name|parse
parameter_list|(
name|File
name|file
parameter_list|)
block|{
try|try
init|(
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
init|;
name|line
operator|!=
literal|null
condition|;
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
control|)
block|{
if|if
condition|(
name|line
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
name|DATASET_PREFIX
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|strDatasets
init|=
name|parseDatasetsFromLine
argument_list|(
name|line
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|strDataset
range|:
name|strDatasets
control|)
block|{
name|datasets
operator|.
name|add
argument_list|(
name|strDataset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"io exception while searching for datasets in qfile: %s"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DatasetCollection
name|getDatasets
parameter_list|()
block|{
return|return
name|datasets
return|;
block|}
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|parseDatasetsFromLine
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|datasets
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|input
operator|=
name|input
operator|.
name|substring
argument_list|(
name|DATASET_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|input
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|datasets
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|input
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|datasets
return|;
block|}
block|}
end_class

end_unit

