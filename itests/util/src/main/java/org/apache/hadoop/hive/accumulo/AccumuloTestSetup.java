begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|AccumuloException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|AccumuloSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|BatchWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|BatchWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|admin
operator|.
name|TableOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|minicluster
operator|.
name|MiniAccumuloCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|minicluster
operator|.
name|MiniAccumuloConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QTestMiniClusters
import|;
end_import

begin_comment
comment|/**  * Start and stop an AccumuloMiniCluster for testing purposes  */
end_comment

begin_class
specifier|public
class|class
name|AccumuloTestSetup
extends|extends
name|QTestMiniClusters
operator|.
name|QTestSetup
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"accumuloHiveTable"
decl_stmt|;
specifier|private
name|MiniAccumuloCluster
name|miniCluster
decl_stmt|;
specifier|public
name|AccumuloTestSetup
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preTest
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|preTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setupWithHiveConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupWithHiveConf
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|==
name|miniCluster
condition|)
block|{
name|String
name|testTmpDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
decl_stmt|;
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|testTmpDir
argument_list|,
literal|"accumulo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
name|MiniAccumuloConfig
name|cfg
init|=
operator|new
name|MiniAccumuloConfig
argument_list|(
name|tmpDir
argument_list|,
name|PASSWORD
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setNumTservers
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|miniCluster
operator|=
operator|new
name|MiniAccumuloCluster
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|miniCluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|createAccumuloTable
argument_list|(
name|miniCluster
operator|.
name|getConnector
argument_list|(
literal|"root"
argument_list|,
name|PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updateConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update hiveConf with the Accumulo specific parameters    * @param conf The hiveconf to update    */
specifier|private
name|void
name|updateConf
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
comment|// Setup connection information
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|USER_NAME
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|USER_PASS
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
if|if
condition|(
name|miniCluster
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|ZOOKEEPERS
argument_list|,
name|miniCluster
operator|.
name|getZooKeepers
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|INSTANCE_NAME
argument_list|,
name|miniCluster
operator|.
name|getInstanceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createAccumuloTable
parameter_list|(
name|Connector
name|conn
parameter_list|)
throws|throws
name|TableExistsException
throws|,
name|TableNotFoundException
throws|,
name|AccumuloException
throws|,
name|AccumuloSecurityException
block|{
name|TableOperations
name|tops
init|=
name|conn
operator|.
name|tableOperations
argument_list|()
decl_stmt|;
if|if
condition|(
name|tops
operator|.
name|exists
argument_list|(
name|TABLE_NAME
argument_list|)
condition|)
block|{
name|tops
operator|.
name|delete
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
name|tops
operator|.
name|create
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|booleans
init|=
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|}
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1
block|,
name|Byte
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|short
index|[]
name|shorts
init|=
operator|new
name|short
index|[]
block|{
name|Short
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1
block|,
name|Short
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|int
index|[]
name|ints
init|=
operator|new
name|int
index|[]
block|{
name|Integer
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[]
block|{
name|Long
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[]
block|{
literal|"Hadoop, Accumulo"
block|,
literal|"Hive"
block|,
literal|"Test Strings"
block|}
decl_stmt|;
name|float
index|[]
name|floats
init|=
operator|new
name|float
index|[]
block|{
name|Float
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1.0F
block|,
name|Float
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|double
index|[]
name|doubles
init|=
operator|new
name|double
index|[]
block|{
name|Double
operator|.
name|MIN_VALUE
block|,
operator|-
literal|1.0
block|,
name|Double
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|HiveDecimal
index|[]
name|decimals
init|=
operator|new
name|HiveDecimal
index|[]
block|{
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.14159"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.71828"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.57721"
argument_list|)
block|}
decl_stmt|;
name|Date
index|[]
name|dates
init|=
operator|new
name|Date
index|[]
block|{
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2014-01-01"
argument_list|)
block|,
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2014-03-01"
argument_list|)
block|,
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2014-05-01"
argument_list|)
block|}
decl_stmt|;
name|Timestamp
index|[]
name|timestamps
init|=
operator|new
name|Timestamp
index|[]
block|{
operator|new
name|Timestamp
argument_list|(
literal|50
argument_list|)
block|,
operator|new
name|Timestamp
argument_list|(
literal|100
argument_list|)
block|,
operator|new
name|Timestamp
argument_list|(
literal|150
argument_list|)
block|}
decl_stmt|;
name|BatchWriter
name|bw
init|=
name|conn
operator|.
name|createBatchWriter
argument_list|(
name|TABLE_NAME
argument_list|,
operator|new
name|BatchWriterConfig
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|cf
init|=
literal|"cf"
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Mutation
name|m
init|=
operator|new
name|Mutation
argument_list|(
literal|"key-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|cf
argument_list|,
literal|"cq-boolean"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|booleans
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|cf
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq-byte"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
name|bytes
index|[
name|i
index|]
block|}
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|cf
argument_list|,
literal|"cq-short"
argument_list|,
name|Short
operator|.
name|toString
argument_list|(
name|shorts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|cf
argument_list|,
literal|"cq-int"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|ints
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|cf
argument_list|,
literal|"cq-long"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|cf
argument_list|,
literal|"cq-string"
argument_list|,
name|strings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|cf
argument_list|,
literal|"cq-float"
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|floats
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|cf
argument_list|,
literal|"cq-double"
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|doubles
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|cf
argument_list|,
literal|"cq-decimal"
argument_list|,
name|decimals
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|cf
argument_list|,
literal|"cq-date"
argument_list|,
name|dates
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|cf
argument_list|,
literal|"cq-timestamp"
argument_list|,
name|timestamps
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bw
operator|.
name|addMutation
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|bw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|!=
name|miniCluster
condition|)
block|{
name|miniCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|miniCluster
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

