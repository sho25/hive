begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|bzip2
operator|.
name|BZip2CompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|control
operator|.
name|AbstractCliConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|CachingPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DigestPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|SortAndDigestPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|SortPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapItUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|MiniLlapCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|LlapProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|HBaseStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSessionManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|zookeeper
operator|.
name|CuratorFrameworkSingleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|zookeeper
operator|.
name|ZooKeeperHiveLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|InvalidTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|HiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|StreamPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * QTestUtil.  *  */
end_comment

begin_class
specifier|public
class|class
name|QTestUtil
block|{
specifier|public
specifier|static
specifier|final
name|String
name|UTF_8
init|=
literal|"UTF-8"
decl_stmt|;
comment|// security property names
specifier|private
specifier|static
specifier|final
name|String
name|SECURITY_KEY_PROVIDER_URI_NAME
init|=
literal|"dfs.encryption.key.provider.uri"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CRLF
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QTEST_LEAVE_FILES
init|=
literal|"QTEST_LEAVE_FILES"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"QTestUtil"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|defaultInitScript
init|=
literal|"q_test_init.sql"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|defaultCleanupScript
init|=
literal|"q_test_cleanup.sql"
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|testOnlyCommands
init|=
operator|new
name|String
index|[]
block|{
literal|"crypto"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_TMP_DIR_PROPERTY
init|=
literal|"test.tmp.dir"
decl_stmt|;
comment|// typically target/tmp
specifier|private
specifier|static
specifier|final
name|String
name|BUILD_DIR_PROPERTY
init|=
literal|"build.dir"
decl_stmt|;
comment|// typically target
specifier|private
name|String
name|testWarehouse
decl_stmt|;
specifier|private
specifier|final
name|String
name|testFiles
decl_stmt|;
specifier|protected
specifier|final
name|String
name|outDir
decl_stmt|;
specifier|protected
specifier|final
name|String
name|logDir
decl_stmt|;
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|qMap
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qSkipSet
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qSortSet
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qSortQuerySet
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qHashQuerySet
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qSortNHashQuerySet
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qNoSessionReuseQuerySet
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|qJavaVersionSpecificOutput
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SORT_SUFFIX
init|=
literal|".sorted"
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|srcTables
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|srcUDFs
decl_stmt|;
specifier|private
specifier|final
name|MiniClusterType
name|clusterType
decl_stmt|;
specifier|private
specifier|final
name|FsType
name|fsType
decl_stmt|;
specifier|private
name|ParseDriver
name|pd
decl_stmt|;
specifier|protected
name|Hive
name|db
decl_stmt|;
specifier|protected
name|QueryState
name|queryState
decl_stmt|;
specifier|protected
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|Driver
name|drv
decl_stmt|;
specifier|private
name|BaseSemanticAnalyzer
name|sem
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|overWrite
decl_stmt|;
specifier|private
name|CliDriver
name|cliDriver
decl_stmt|;
specifier|private
name|HadoopShims
operator|.
name|MiniMrShim
name|mr
init|=
literal|null
decl_stmt|;
specifier|private
name|HadoopShims
operator|.
name|MiniDFSShim
name|dfs
init|=
literal|null
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|hes
init|=
literal|null
decl_stmt|;
specifier|private
name|MiniLlapCluster
name|llapCluster
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|hadoopVer
init|=
literal|null
decl_stmt|;
specifier|private
name|QTestSetup
name|setup
init|=
literal|null
decl_stmt|;
specifier|private
name|TezSessionState
name|tezSessionState
init|=
literal|null
decl_stmt|;
specifier|private
name|SparkSession
name|sparkSession
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|isSessionStateStarted
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|javaVersion
init|=
name|getJavaVersion
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|initScript
decl_stmt|;
specifier|private
specifier|final
name|String
name|cleanupScript
decl_stmt|;
specifier|private
name|boolean
name|useHBaseMetastore
init|=
literal|false
decl_stmt|;
specifier|public
interface|interface
name|SuiteAddTestFunctor
block|{
specifier|public
name|void
name|addTestToSuite
parameter_list|(
name|TestSuite
name|suite
parameter_list|,
name|Object
name|setup
parameter_list|,
name|String
name|tName
parameter_list|)
function_decl|;
block|}
specifier|private
name|HBaseTestingUtility
name|utility
decl_stmt|;
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getSrcTables
parameter_list|()
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|srcTables
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// FIXME: moved default value to here...for now
comment|// i think this features is never really used from the command line
name|String
name|defaultTestSrcTables
init|=
literal|"src,src1,srcbucket,srcbucket2,src_json,src_thrift,src_sequencefile,srcpart,alltypesorc,src_hbase,cbo_t1,cbo_t2,cbo_t3,src_cbo,part,lineitem"
decl_stmt|;
for|for
control|(
name|String
name|srcTable
range|:
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.src.tables"
argument_list|,
name|defaultTestSrcTables
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|srcTable
operator|=
name|srcTable
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|srcTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|srcTables
operator|.
name|add
argument_list|(
name|srcTable
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|srcTables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Source tables cannot be empty"
argument_list|)
throw|;
block|}
return|return
name|srcTables
return|;
block|}
comment|/**    * Returns the default UDF names which should not be removed when resetting the test database    * @return The list of the UDF names not to remove    */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getSrcUDFs
parameter_list|()
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|srcUDFs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// FIXME: moved default value to here...for now
comment|// i think this features is never really used from the command line
name|String
name|defaultTestSrcUDFs
init|=
literal|"qtest_get_java_boolean"
decl_stmt|;
for|for
control|(
name|String
name|srcUDF
range|:
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.src.udfs"
argument_list|,
name|defaultTestSrcUDFs
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|srcUDF
operator|=
name|srcUDF
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|srcUDF
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|srcUDFs
operator|.
name|add
argument_list|(
name|srcUDF
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|srcUDFs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Source UDFs cannot be empty"
argument_list|)
throw|;
block|}
return|return
name|srcUDFs
return|;
block|}
specifier|public
name|HiveConf
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|boolean
name|deleteDirectory
parameter_list|(
name|File
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|path
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteDirectory
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|path
operator|.
name|delete
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|copyDirectoryToLocal
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|srcFs
init|=
name|src
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|destFs
init|=
name|dest
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcFs
operator|.
name|exists
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|srcFs
operator|.
name|listStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Path
name|dfs_path
init|=
name|file
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|local_path
init|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|,
name|name
argument_list|)
decl_stmt|;
comment|// If this is a source table we do not copy it out
if|if
condition|(
name|srcTables
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|destFs
operator|.
name|exists
argument_list|(
name|local_path
argument_list|)
condition|)
block|{
name|destFs
operator|.
name|mkdirs
argument_list|(
name|local_path
argument_list|)
expr_stmt|;
block|}
name|copyDirectoryToLocal
argument_list|(
name|dfs_path
argument_list|,
name|local_path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcFs
operator|.
name|copyToLocalFile
argument_list|(
name|dfs_path
argument_list|,
name|local_path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
name|Pattern
name|mapTok
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\.?)(.*)_map_(.*)"
argument_list|)
decl_stmt|;
specifier|static
name|Pattern
name|reduceTok
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*)(reduce_[^\\.]*)((\\..*)?)"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|normalizeNames
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|path
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|path
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|normalizeNames
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Matcher
name|m
init|=
name|reduceTok
operator|.
name|matcher
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"reduce"
operator|+
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|path
operator|.
name|renameTo
argument_list|(
operator|new
name|File
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
name|mapTok
operator|.
name|matcher
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|"map_"
operator|+
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|path
operator|.
name|renameTo
argument_list|(
operator|new
name|File
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|getOutputDirectory
parameter_list|()
block|{
return|return
name|outDir
return|;
block|}
specifier|public
name|String
name|getLogDirectory
parameter_list|()
block|{
return|return
name|logDir
return|;
block|}
specifier|private
name|String
name|getHadoopMainVersion
parameter_list|(
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+\\.\\d+).*"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|initConf
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|vectorizationEnabled
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.vectorization.enabled"
argument_list|)
decl_stmt|;
if|if
condition|(
name|vectorizationEnabled
operator|!=
literal|null
operator|&&
name|vectorizationEnabled
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|useHBaseMetastore
condition|)
block|{
comment|// Plug verifying metastore in for testing DirectSQL.
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_RAW_STORE_IMPL
argument_list|,
literal|"org.apache.hadoop.hive.metastore.VerifyingObjectStore"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_RAW_STORE_IMPL
argument_list|,
name|HBaseStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_FASTPATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|setupConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// TODO Ideally this should be done independent of whether mr is setup or not.
name|setFsRelatedProperties
argument_list|(
name|conf
argument_list|,
name|fs
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|llapCluster
operator|!=
literal|null
condition|)
block|{
name|Configuration
name|clusterSpecificConf
init|=
name|llapCluster
operator|.
name|getClusterSpecificConfiguration
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confEntry
range|:
name|clusterSpecificConf
control|)
block|{
comment|// Conf.get takes care of parameter replacement, iterator.value does not.
name|conf
operator|.
name|set
argument_list|(
name|confEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|clusterSpecificConf
operator|.
name|get
argument_list|(
name|confEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setFsRelatedProperties
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|boolean
name|isLocalFs
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|String
name|fsUriString
init|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Different paths if running locally vs a remote fileSystem. Ideally this difference should not exist.
name|Path
name|warehousePath
decl_stmt|;
name|Path
name|jarPath
decl_stmt|;
name|Path
name|userInstallPath
decl_stmt|;
if|if
condition|(
name|isLocalFs
condition|)
block|{
name|String
name|buildDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|BUILD_DIR_PROPERTY
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|fsUriString
argument_list|,
name|buildDir
argument_list|)
decl_stmt|;
comment|// Create a fake fs root for local fs
name|Path
name|localFsRoot
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"localfs"
argument_list|)
decl_stmt|;
name|warehousePath
operator|=
operator|new
name|Path
argument_list|(
name|localFsRoot
argument_list|,
literal|"warehouse"
argument_list|)
expr_stmt|;
name|jarPath
operator|=
operator|new
name|Path
argument_list|(
name|localFsRoot
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
name|userInstallPath
operator|=
operator|new
name|Path
argument_list|(
name|localFsRoot
argument_list|,
literal|"user_install"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO Why is this changed from the default in hive-conf?
name|warehousePath
operator|=
operator|new
name|Path
argument_list|(
name|fsUriString
argument_list|,
literal|"/build/ql/test/data/warehouse/"
argument_list|)
expr_stmt|;
name|jarPath
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|fsUriString
argument_list|,
literal|"/user"
argument_list|)
argument_list|,
literal|"hive"
argument_list|)
expr_stmt|;
name|userInstallPath
operator|=
operator|new
name|Path
argument_list|(
name|fsUriString
argument_list|,
literal|"/user"
argument_list|)
expr_stmt|;
block|}
name|warehousePath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|warehousePath
argument_list|)
expr_stmt|;
name|jarPath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|jarPath
argument_list|)
expr_stmt|;
name|userInstallPath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|userInstallPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|fsUriString
argument_list|)
expr_stmt|;
comment|// Remote dirs
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
name|warehousePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_JAR_DIRECTORY
argument_list|,
name|jarPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_USER_INSTALL_DIR
argument_list|,
name|userInstallPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// ConfVars.SCRATCHDIR - {test.tmp.dir}/scratchdir
comment|// Local dirs
comment|// ConfVars.LOCALSCRATCHDIR - {test.tmp.dir}/localscratchdir
comment|// TODO Make sure to cleanup created dirs.
block|}
specifier|private
name|void
name|createRemoteDirs
parameter_list|()
block|{
assert|assert
name|fs
operator|!=
literal|null
assert|;
name|Path
name|warehousePath
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|warehousePath
operator|!=
literal|null
assert|;
name|Path
name|hiveJarPath
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_JAR_DIRECTORY
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|hiveJarPath
operator|!=
literal|null
assert|;
name|Path
name|userInstallPath
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_USER_INSTALL_DIR
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|userInstallPath
operator|!=
literal|null
assert|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|warehousePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create path={}. Continuing. Exception message={}"
argument_list|,
name|warehousePath
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|hiveJarPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create path={}. Continuing. Exception message={}"
argument_list|,
name|warehousePath
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|userInstallPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create path={}. Continuing. Exception message={}"
argument_list|,
name|warehousePath
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
enum|enum
name|CoreClusterType
block|{
name|MR
block|,
name|TEZ
block|,
name|SPARK
block|}
specifier|public
enum|enum
name|FsType
block|{
name|local
block|,
name|hdfs
block|,
name|encrypted_hdfs
block|,   }
specifier|public
enum|enum
name|MiniClusterType
block|{
name|mr
parameter_list|(
name|CoreClusterType
operator|.
name|MR
parameter_list|,
name|FsType
operator|.
name|hdfs
parameter_list|)
operator|,
constructor|tez(CoreClusterType.TEZ
operator|,
constructor|FsType.hdfs
block|)
enum|,
name|tez_local
parameter_list|(
name|CoreClusterType
operator|.
name|TEZ
parameter_list|,
name|FsType
operator|.
name|local
parameter_list|)
operator|,
constructor|spark(CoreClusterType.SPARK
operator|,
constructor|FsType.local
block|)
operator|,
name|miniSparkOnYarn
argument_list|(
name|CoreClusterType
operator|.
name|SPARK
argument_list|,
name|FsType
operator|.
name|hdfs
argument_list|)
operator|,
name|llap
argument_list|(
name|CoreClusterType
operator|.
name|TEZ
argument_list|,
name|FsType
operator|.
name|hdfs
argument_list|)
operator|,
name|llap_local
argument_list|(
name|CoreClusterType
operator|.
name|TEZ
argument_list|,
name|FsType
operator|.
name|local
argument_list|)
operator|,
name|none
argument_list|(
name|CoreClusterType
operator|.
name|MR
argument_list|,
name|FsType
operator|.
name|local
argument_list|)
expr_stmt|;
end_class

begin_decl_stmt
specifier|private
specifier|final
name|CoreClusterType
name|coreClusterType
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|final
name|FsType
name|defaultFsType
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|MiniClusterType
argument_list|(
name|CoreClusterType
name|coreClusterType
argument_list|,
name|FsType
name|defaultFsType
argument_list|)
block|{
name|this
operator|.
name|coreClusterType
operator|=
name|coreClusterType
block|;
name|this
operator|.
name|defaultFsType
operator|=
name|defaultFsType
block|;     }
specifier|public
name|CoreClusterType
name|getCoreClusterType
argument_list|()
block|{
return|return
name|coreClusterType
return|;
block|}
end_expr_stmt

begin_function
specifier|public
name|FsType
name|getDefaultFsType
parameter_list|()
block|{
return|return
name|defaultFsType
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|MiniClusterType
name|valueForString
parameter_list|(
name|String
name|type
parameter_list|)
block|{
comment|// Replace this with valueOf.
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"miniMR"
argument_list|)
condition|)
block|{
return|return
name|mr
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"tez"
argument_list|)
condition|)
block|{
return|return
name|tez
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"tez_local"
argument_list|)
condition|)
block|{
return|return
name|tez_local
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"spark"
argument_list|)
condition|)
block|{
return|return
name|spark
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"miniSparkOnYarn"
argument_list|)
condition|)
block|{
return|return
name|miniSparkOnYarn
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"llap"
argument_list|)
condition|)
block|{
return|return
name|llap
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"llap_local"
argument_list|)
condition|)
block|{
return|return
name|llap_local
return|;
block|}
else|else
block|{
return|return
name|none
return|;
block|}
block|}
end_function

begin_function
unit|}     private
name|String
name|getKeyProviderURI
parameter_list|()
block|{
comment|// Use the target directory if it is not specified
name|String
name|HIVE_ROOT
init|=
name|AbstractCliConfig
operator|.
name|HIVE_ROOT
decl_stmt|;
name|String
name|keyDir
init|=
name|HIVE_ROOT
operator|+
literal|"ql/target/"
decl_stmt|;
comment|// put the jks file in the current test path only for test purpose
return|return
literal|"jceks://file"
operator|+
operator|new
name|Path
argument_list|(
name|keyDir
argument_list|,
literal|"test.jks"
argument_list|)
operator|.
name|toUri
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|startMiniHBaseCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|hbaseConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|hbaseConf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.info.port"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|utility
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
name|utility
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|utility
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|Driver
operator|.
name|class
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|admin
init|=
name|utility
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
comment|// Need to use reflection here to make compilation pass since HBaseIntegrationTests
comment|// is not compiled in hadoop-1. All HBaseMetastore tests run under hadoop-2, so this
comment|// guarantee HBaseIntegrationTests exist when we hitting this code path
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|initHBaseMetastoreMethod
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hive.metastore.hbase.HBaseStoreTestUtil"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"initHBaseMetastore"
argument_list|,
name|HBaseAdmin
operator|.
name|class
argument_list|,
name|HiveConf
operator|.
name|class
argument_list|)
decl_stmt|;
name|initHBaseMetastoreMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|admin
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_RAW_STORE_IMPL
argument_list|,
name|HBaseStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_FASTPATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_constructor
specifier|public
name|QTestUtil
parameter_list|(
name|String
name|outDir
parameter_list|,
name|String
name|logDir
parameter_list|,
name|MiniClusterType
name|clusterType
parameter_list|,
name|String
name|confDir
parameter_list|,
name|String
name|hadoopVer
parameter_list|,
name|String
name|initScript
parameter_list|,
name|String
name|cleanupScript
parameter_list|,
name|boolean
name|useHBaseMetastore
parameter_list|,
name|boolean
name|withLlapIo
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|outDir
argument_list|,
name|logDir
argument_list|,
name|clusterType
argument_list|,
name|confDir
argument_list|,
name|hadoopVer
argument_list|,
name|initScript
argument_list|,
name|cleanupScript
argument_list|,
name|useHBaseMetastore
argument_list|,
name|withLlapIo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_constructor

begin_constructor
specifier|public
name|QTestUtil
parameter_list|(
name|String
name|outDir
parameter_list|,
name|String
name|logDir
parameter_list|,
name|MiniClusterType
name|clusterType
parameter_list|,
name|String
name|confDir
parameter_list|,
name|String
name|hadzoopVer
parameter_list|,
name|String
name|initScript
parameter_list|,
name|String
name|cleanupScript
parameter_list|,
name|boolean
name|useHBaseMetastore
parameter_list|,
name|boolean
name|withLlapIo
parameter_list|,
name|FsType
name|fsType
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting up QTestUtil with outDir={}, logDir={}, clusterType={}, confDir={},"
operator|+
literal|" hadoopVer={}, initScript={}, cleanupScript={}, useHbaseMetaStore={}, withLlapIo={},"
operator|+
literal|" fsType={}"
argument_list|,
name|outDir
argument_list|,
name|logDir
argument_list|,
name|clusterType
argument_list|,
name|confDir
argument_list|,
name|hadoopVer
argument_list|,
name|initScript
argument_list|,
name|cleanupScript
argument_list|,
name|useHBaseMetastore
argument_list|,
name|withLlapIo
argument_list|,
name|fsType
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clusterType
argument_list|,
literal|"ClusterType cannot be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsType
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|fsType
operator|=
name|fsType
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|fsType
operator|=
name|clusterType
operator|.
name|getDefaultFsType
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|outDir
operator|=
name|outDir
expr_stmt|;
name|this
operator|.
name|logDir
operator|=
name|logDir
expr_stmt|;
name|this
operator|.
name|useHBaseMetastore
operator|=
name|useHBaseMetastore
expr_stmt|;
name|this
operator|.
name|srcTables
operator|=
name|getSrcTables
argument_list|()
expr_stmt|;
name|this
operator|.
name|srcUDFs
operator|=
name|getSrcUDFs
argument_list|()
expr_stmt|;
comment|// HIVE-14443 move this fall-back logic to CliConfigs
if|if
condition|(
name|confDir
operator|!=
literal|null
operator|&&
operator|!
name|confDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HiveConf
operator|.
name|setHiveSiteLocation
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/hive-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting hive-site: "
operator|+
name|HiveConf
operator|.
name|getHiveSiteLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|queryState
operator|=
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|Driver
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|useHBaseMetastore
condition|)
block|{
name|startMiniHBaseCluster
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|=
name|queryState
operator|.
name|getConf
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|hadoopVer
operator|=
name|getHadoopMainVersion
argument_list|(
name|hadoopVer
argument_list|)
expr_stmt|;
name|qMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|qSkipSet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|qSortSet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|qSortQuerySet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|qHashQuerySet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|qSortNHashQuerySet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|qNoSessionReuseQuerySet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|qJavaVersionSpecificOutput
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|clusterType
operator|=
name|clusterType
expr_stmt|;
name|HadoopShims
name|shims
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
decl_stmt|;
name|setupFileSystem
argument_list|(
name|shims
argument_list|)
expr_stmt|;
name|setup
operator|=
operator|new
name|QTestSetup
argument_list|()
expr_stmt|;
name|setup
operator|.
name|preTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setupMiniCluster
argument_list|(
name|shims
argument_list|,
name|confDir
argument_list|)
expr_stmt|;
name|initConf
argument_list|()
expr_stmt|;
if|if
condition|(
name|withLlapIo
operator|&&
operator|(
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|none
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"initializing llap IO"
argument_list|)
expr_stmt|;
name|LlapProxy
operator|.
name|initializeLlapIo
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// Use the current directory if it is not specified
name|String
name|dataDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataDir
operator|==
literal|null
condition|)
block|{
name|dataDir
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/data/files"
expr_stmt|;
block|}
name|testFiles
operator|=
name|dataDir
expr_stmt|;
comment|// Use the current directory if it is not specified
name|String
name|scriptsDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.scripts"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptsDir
operator|==
literal|null
condition|)
block|{
name|scriptsDir
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/data/scripts"
expr_stmt|;
block|}
name|this
operator|.
name|initScript
operator|=
name|scriptsDir
operator|+
name|File
operator|.
name|separator
operator|+
name|initScript
expr_stmt|;
name|this
operator|.
name|cleanupScript
operator|=
name|scriptsDir
operator|+
name|File
operator|.
name|separator
operator|+
name|cleanupScript
expr_stmt|;
name|overWrite
operator|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.output.overwrite"
argument_list|)
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor

begin_function
specifier|private
name|void
name|setupFileSystem
parameter_list|(
name|HadoopShims
name|shims
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fsType
operator|==
name|FsType
operator|.
name|local
condition|)
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fsType
operator|==
name|FsType
operator|.
name|hdfs
operator|||
name|fsType
operator|==
name|FsType
operator|.
name|encrypted_hdfs
condition|)
block|{
name|int
name|numDataNodes
init|=
literal|4
decl_stmt|;
if|if
condition|(
name|fsType
operator|==
name|FsType
operator|.
name|encrypted_hdfs
condition|)
block|{
comment|// Set the security key provider so that the MiniDFS cluster is initialized
comment|// with encryption
name|conf
operator|.
name|set
argument_list|(
name|SECURITY_KEY_PROVIDER_URI_NAME
argument_list|,
name|getKeyProviderURI
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"fs.trash.interval"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|shims
operator|.
name|getMiniDfs
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// set up the java key provider for encrypted hdfs cluster
name|hes
operator|=
name|shims
operator|.
name|createHdfsEncryptionShim
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"key provider is initialized"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dfs
operator|=
name|shims
operator|.
name|getMiniDfs
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown or unhandled fsType ["
operator|+
name|fsType
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|setupMiniCluster
parameter_list|(
name|HadoopShims
name|shims
parameter_list|,
name|String
name|confDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|uriString
init|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterType
operator|.
name|getCoreClusterType
argument_list|()
operator|==
name|CoreClusterType
operator|.
name|TEZ
condition|)
block|{
if|if
condition|(
name|confDir
operator|!=
literal|null
operator|&&
operator|!
name|confDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/tez-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|numTrackers
init|=
literal|2
decl_stmt|;
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|MiniClusterType
operator|.
name|llap
argument_list|,
name|MiniClusterType
operator|.
name|llap_local
argument_list|)
operator|.
name|contains
argument_list|(
name|clusterType
argument_list|)
condition|)
block|{
name|llapCluster
operator|=
name|LlapItUtils
operator|.
name|startAndGetMiniLlapCluster
argument_list|(
name|conf
argument_list|,
name|setup
operator|.
name|zooKeeperCluster
argument_list|,
name|confDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{       }
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|MiniClusterType
operator|.
name|llap_local
argument_list|,
name|MiniClusterType
operator|.
name|tez_local
argument_list|)
operator|.
name|contains
argument_list|(
name|clusterType
argument_list|)
condition|)
block|{
name|mr
operator|=
name|shims
operator|.
name|getLocalMiniTezCluster
argument_list|(
name|conf
argument_list|,
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|llap_local
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mr
operator|=
name|shims
operator|.
name|getMiniTezCluster
argument_list|(
name|conf
argument_list|,
name|numTrackers
argument_list|,
name|uriString
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|MiniClusterType
operator|.
name|llap
argument_list|,
name|MiniClusterType
operator|.
name|llap_local
argument_list|)
operator|.
name|contains
argument_list|(
name|clusterType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|miniSparkOnYarn
condition|)
block|{
name|mr
operator|=
name|shims
operator|.
name|getMiniSparkCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
name|uriString
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clusterType
operator|==
name|MiniClusterType
operator|.
name|mr
condition|)
block|{
name|mr
operator|=
name|shims
operator|.
name|getMiniMrCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
name|uriString
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|QTEST_LEAVE_FILES
argument_list|)
operator|==
literal|null
condition|)
block|{
name|cleanUp
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clusterType
operator|.
name|getCoreClusterType
argument_list|()
operator|==
name|CoreClusterType
operator|.
name|TEZ
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTezSession
argument_list|()
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|setup
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|sparkSession
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|SparkSessionManagerImpl
operator|.
name|getInstance
argument_list|()
operator|.
name|closeSession
argument_list|(
name|sparkSession
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing spark session."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sparkSession
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|useHBaseMetastore
condition|)
block|{
name|utility
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|mr
operator|=
literal|null
expr_stmt|;
block|}
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dfs
operator|=
literal|null
expr_stmt|;
block|}
name|Hive
operator|.
name|closeCurrent
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|String
name|readEntireFileIntoString
parameter_list|(
name|File
name|queryFile
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|queryFile
argument_list|)
argument_list|)
argument_list|,
name|QTestUtil
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|isr
argument_list|,
name|sw
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|isr
operator|!=
literal|null
condition|)
block|{
name|isr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|queryFile
parameter_list|)
throws|throws
name|IOException
block|{
name|addFile
argument_list|(
name|queryFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|queryFile
parameter_list|,
name|boolean
name|partial
parameter_list|)
throws|throws
name|IOException
block|{
name|addFile
argument_list|(
operator|new
name|File
argument_list|(
name|queryFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|addFile
parameter_list|(
name|File
name|qf
parameter_list|)
throws|throws
name|IOException
block|{
name|addFile
argument_list|(
name|qf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|addFile
parameter_list|(
name|File
name|qf
parameter_list|,
name|boolean
name|partial
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|query
init|=
name|readEntireFileIntoString
argument_list|(
name|qf
argument_list|)
decl_stmt|;
name|qMap
operator|.
name|put
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|,
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|partial
condition|)
return|return;
if|if
condition|(
name|checkHadoopVersionExclude
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|,
name|query
argument_list|)
condition|)
block|{
name|qSkipSet
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkNeedJavaSpecificOutput
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|,
name|query
argument_list|)
condition|)
block|{
name|qJavaVersionSpecificOutput
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matches
argument_list|(
name|SORT_BEFORE_DIFF
argument_list|,
name|query
argument_list|)
condition|)
block|{
name|qSortSet
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matches
argument_list|(
name|SORT_QUERY_RESULTS
argument_list|,
name|query
argument_list|)
condition|)
block|{
name|qSortQuerySet
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matches
argument_list|(
name|HASH_QUERY_RESULTS
argument_list|,
name|query
argument_list|)
condition|)
block|{
name|qHashQuerySet
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matches
argument_list|(
name|SORT_AND_HASH_QUERY_RESULTS
argument_list|,
name|query
argument_list|)
condition|)
block|{
name|qSortNHashQuerySet
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matches
argument_list|(
name|NO_SESSION_REUSE
argument_list|,
name|query
argument_list|)
condition|)
block|{
name|qNoSessionReuseQuerySet
operator|.
name|add
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_decl_stmt
specifier|private
specifier|static
specifier|final
name|Pattern
name|SORT_BEFORE_DIFF
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- SORT_BEFORE_DIFF"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|static
specifier|final
name|Pattern
name|SORT_QUERY_RESULTS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- SORT_QUERY_RESULTS"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|static
specifier|final
name|Pattern
name|HASH_QUERY_RESULTS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- HASH_QUERY_RESULTS"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|static
specifier|final
name|Pattern
name|SORT_AND_HASH_QUERY_RESULTS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- SORT_AND_HASH_QUERY_RESULTS"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|static
specifier|final
name|Pattern
name|NO_SESSION_REUSE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- NO_SESSION_REUSE"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|private
name|boolean
name|matches
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|String
name|query
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|checkHadoopVersionExclude
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|query
parameter_list|)
block|{
comment|// Look for a hint to not run a test on some Hadoop versions
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- (EX|IN)CLUDE_HADOOP_MAJOR_VERSIONS\\((.*)\\)"
argument_list|)
decl_stmt|;
name|boolean
name|excludeQuery
init|=
literal|false
decl_stmt|;
name|boolean
name|includeQuery
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|versionSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|hadoopVer
init|=
name|ShimLoader
operator|.
name|getMajorVersion
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|// Each qfile may include at most one INCLUDE or EXCLUDE directive.
comment|//
comment|// If a qfile contains an INCLUDE directive, and hadoopVer does
comment|// not appear in the list of versions to include, then the qfile
comment|// is skipped.
comment|//
comment|// If a qfile contains an EXCLUDE directive, and hadoopVer is
comment|// listed in the list of versions to EXCLUDE, then the qfile is
comment|// skipped.
comment|//
comment|// Otherwise, the qfile is included.
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|prefix
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"EX"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|excludeQuery
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|includeQuery
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|versions
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|versions
operator|.
name|split
argument_list|(
literal|"\\,"
argument_list|)
control|)
block|{
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
expr_stmt|;
name|versionSet
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
comment|//2nd match is not supposed to be there
name|String
name|message
init|=
literal|"QTestUtil: qfile "
operator|+
name|fileName
operator|+
literal|" contains more than one reference to (EX|IN)CLUDE_HADOOP_MAJOR_VERSIONS"
decl_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|excludeQuery
operator|&&
name|versionSet
operator|.
name|contains
argument_list|(
name|hadoopVer
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"QTestUtil: "
operator|+
name|fileName
operator|+
literal|" EXCLUDE list contains Hadoop Version "
operator|+
name|hadoopVer
operator|+
literal|". Skipping..."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|includeQuery
operator|&&
operator|!
name|versionSet
operator|.
name|contains
argument_list|(
name|hadoopVer
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"QTestUtil: "
operator|+
name|fileName
operator|+
literal|" INCLUDE list does not contain Hadoop Version "
operator|+
name|hadoopVer
operator|+
literal|". Skipping..."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|checkNeedJavaSpecificOutput
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|query
parameter_list|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"-- JAVA_VERSION_SPECIFIC_OUTPUT"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test is flagged to generate Java version specific "
operator|+
literal|"output. Since we are using Java version "
operator|+
name|javaVersion
operator|+
literal|", we will generated Java "
operator|+
name|javaVersion
operator|+
literal|" specific "
operator|+
literal|"output file for query file "
operator|+
name|fileName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_comment
comment|/**    * Get formatted Java version to include minor version, but    * exclude patch level.    *    * @return Java version formatted as major_version.minor_version    */
end_comment

begin_function
specifier|private
specifier|static
name|String
name|getJavaVersion
parameter_list|()
block|{
name|String
name|version
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"No java version could be determined "
operator|+
literal|"from system properties"
argument_list|)
throw|;
block|}
comment|// "java version" system property is formatted
comment|// major_version.minor_version.patch_level.
comment|// Find second dot, instead of last dot, to be safe
name|int
name|pos
init|=
name|version
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|pos
operator|=
name|version
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|version
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Clear out any side effects of running tests    */
end_comment

begin_function
specifier|public
name|void
name|clearPostTestEffects
parameter_list|()
throws|throws
name|Exception
block|{
name|setup
operator|.
name|postTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|clearKeysCreatedInTests
parameter_list|()
block|{
if|if
condition|(
name|hes
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
for|for
control|(
name|String
name|keyAlias
range|:
name|hes
operator|.
name|getKeys
argument_list|()
control|)
block|{
name|hes
operator|.
name|deleteKey
argument_list|(
name|keyAlias
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to clean the keys created in test due to the error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|clearUDFsCreatedDuringTests
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|QTEST_LEAVE_FILES
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// Delete functions created by the tests
comment|// It is enough to remove functions from the default database, other databases are dropped
for|for
control|(
name|String
name|udfName
range|:
name|db
operator|.
name|getFunctions
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|".*"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|srcUDFs
operator|.
name|contains
argument_list|(
name|udfName
argument_list|)
condition|)
block|{
name|db
operator|.
name|dropFunction
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|udfName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Clear out any side effects of running tests    */
end_comment

begin_function
specifier|public
name|void
name|clearTablesCreatedDuringTests
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|QTEST_LEAVE_FILES
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"hive.metastore.filter.hook"
argument_list|,
literal|"org.apache.hadoop.hive.metastore.DefaultMetaStoreFilterHookImpl"
argument_list|)
expr_stmt|;
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Delete any tables other than the source tables
comment|// and any databases other than the default database.
for|for
control|(
name|String
name|dbName
range|:
name|db
operator|.
name|getAllDatabases
argument_list|()
control|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setCurrentDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|db
operator|.
name|getAllTables
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|DEFAULT_DATABASE_NAME
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
operator|||
operator|!
name|srcTables
operator|.
name|contains
argument_list|(
name|tblName
argument_list|)
condition|)
block|{
name|Table
name|tblObj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tblObj
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTableException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to drop table "
operator|+
name|e
operator|.
name|getTableName
argument_list|()
operator|+
literal|". But it does not exist."
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// dropping index table can not be dropped directly. Dropping the base
comment|// table will automatically drop all its index table
if|if
condition|(
name|tblObj
operator|.
name|isIndexTable
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|db
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|fsType
operator|==
name|FsType
operator|.
name|encrypted_hdfs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this table is defined in srcTables, drop all indexes on it
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
name|db
operator|.
name|getIndexes
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexes
operator|!=
literal|null
operator|&&
name|indexes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Index
name|index
range|:
name|indexes
control|)
block|{
name|db
operator|.
name|dropIndex
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|DEFAULT_DATABASE_NAME
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
comment|// Drop cascade, functions dropped by cascade
name|db
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// delete remaining directories for external tables (can affect stats for following tests)
try|try
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|testWarehouse
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSystem
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSystem
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
for|for
control|(
name|FileStatus
name|status
range|:
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
control|)
block|{
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|srcTables
operator|.
name|contains
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|fileSystem
operator|.
name|delete
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ignore.. provides invalid url sometimes intentionally
block|}
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setCurrentDatabase
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
name|db
operator|.
name|getAllRoleNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|roleName
range|:
name|roleNames
control|)
block|{
if|if
condition|(
operator|!
literal|"PUBLIC"
operator|.
name|equalsIgnoreCase
argument_list|(
name|roleName
argument_list|)
operator|&&
operator|!
literal|"ADMIN"
operator|.
name|equalsIgnoreCase
argument_list|(
name|roleName
argument_list|)
condition|)
block|{
name|db
operator|.
name|dropRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Clear out any side effects of running tests    */
end_comment

begin_function
specifier|public
name|void
name|clearTestSideEffects
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|QTEST_LEAVE_FILES
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// allocate and initialize a new conf since a test can
comment|// modify conf by using 'set' commands
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|Driver
operator|.
name|class
argument_list|)
expr_stmt|;
name|initConf
argument_list|()
expr_stmt|;
name|initConfFromSetup
argument_list|()
expr_stmt|;
comment|// renew the metastore since the cluster type is unencrypted
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// propagate new conf to meta store
name|clearTablesCreatedDuringTests
argument_list|()
expr_stmt|;
name|clearUDFsCreatedDuringTests
argument_list|()
expr_stmt|;
name|clearKeysCreatedInTests
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
name|void
name|initConfFromSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|setup
operator|.
name|preTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanUp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|cleanUp
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|canReuseSession
init|=
operator|(
name|tname
operator|==
literal|null
operator|)
operator|||
operator|!
name|qNoSessionReuseQuerySet
operator|.
name|contains
argument_list|(
name|tname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isSessionStateStarted
condition|)
block|{
name|startSessionState
argument_list|(
name|canReuseSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|QTEST_LEAVE_FILES
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|clearTablesCreatedDuringTests
argument_list|()
expr_stmt|;
name|clearUDFsCreatedDuringTests
argument_list|()
expr_stmt|;
name|clearKeysCreatedInTests
argument_list|()
expr_stmt|;
name|File
name|cleanupFile
init|=
operator|new
name|File
argument_list|(
name|cleanupScript
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleanupFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|String
name|cleanupCommands
init|=
name|readEntireFileIntoString
argument_list|(
name|cleanupFile
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleanup ("
operator|+
name|cleanupScript
operator|+
literal|"):\n"
operator|+
name|cleanupCommands
argument_list|)
expr_stmt|;
if|if
condition|(
name|cliDriver
operator|==
literal|null
condition|)
block|{
name|cliDriver
operator|=
operator|new
name|CliDriver
argument_list|()
expr_stmt|;
block|}
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hive.test.shutdown.phase"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cliDriver
operator|.
name|processLine
argument_list|(
name|cleanupCommands
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed during cleanup processLine with code={}. Ignoring"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// TODO Convert this to an Assert.fail once HIVE-14682 is fixed
block|}
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hive.test.shutdown.phase"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No cleanup script detected. Skipping."
argument_list|)
expr_stmt|;
block|}
comment|// delete any contents in the warehouse dir
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|testWarehouse
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|FileStatus
index|[]
name|ls
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|ls
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|i
operator|<
name|ls
operator|.
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|ls
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Best effort
block|}
comment|// TODO: Clean up all the other paths that are created.
name|FunctionRegistry
operator|.
name|unregisterTemporaryUDF
argument_list|(
literal|"test_udaf"
argument_list|)
expr_stmt|;
name|FunctionRegistry
operator|.
name|unregisterTemporaryUDF
argument_list|(
literal|"test_error"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
name|void
name|runCreateTableCmd
parameter_list|(
name|String
name|createTableCmd
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|ecode
init|=
literal|0
decl_stmt|;
name|ecode
operator|=
name|drv
operator|.
name|run
argument_list|(
name|createTableCmd
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|ecode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"create table command: "
operator|+
name|createTableCmd
operator|+
literal|" failed with exit code= "
operator|+
name|ecode
argument_list|)
throw|;
block|}
return|return;
block|}
end_function

begin_function
specifier|protected
name|void
name|runCmd
parameter_list|(
name|String
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|ecode
init|=
literal|0
decl_stmt|;
name|ecode
operator|=
name|drv
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|drv
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|ecode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"command: "
operator|+
name|cmd
operator|+
literal|" failed with exit code= "
operator|+
name|ecode
argument_list|)
throw|;
block|}
return|return;
block|}
end_function

begin_function
specifier|public
name|void
name|createSources
parameter_list|()
throws|throws
name|Exception
block|{
name|createSources
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|createSources
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|canReuseSession
init|=
operator|(
name|tname
operator|==
literal|null
operator|)
operator|||
operator|!
name|qNoSessionReuseQuerySet
operator|.
name|contains
argument_list|(
name|tname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isSessionStateStarted
condition|)
block|{
name|startSessionState
argument_list|(
name|canReuseSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cliDriver
operator|==
literal|null
condition|)
block|{
name|cliDriver
operator|=
operator|new
name|CliDriver
argument_list|()
expr_stmt|;
block|}
name|cliDriver
operator|.
name|processLine
argument_list|(
literal|"set test.data.dir="
operator|+
name|testFiles
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|File
name|scriptFile
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|initScript
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scriptFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No init script detected. Skipping"
argument_list|)
expr_stmt|;
return|return;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hive.test.init.phase"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|initCommands
init|=
name|readEntireFileIntoString
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial setup ("
operator|+
name|initScript
operator|+
literal|"):\n"
operator|+
name|initCommands
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cliDriver
operator|.
name|processLine
argument_list|(
name|initCommands
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Result from cliDrriver.processLine in createSources="
operator|+
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failed during createSources processLine with code="
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hive.test.init.phase"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create remote dirs once.
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|createRemoteDirs
argument_list|()
expr_stmt|;
block|}
name|testWarehouse
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
expr_stmt|;
name|String
name|execEngine
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hive.execution.engine"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.execution.engine"
argument_list|,
literal|"mr"
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.execution.engine"
argument_list|,
name|execEngine
argument_list|)
expr_stmt|;
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|drv
operator|=
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|drv
operator|.
name|init
argument_list|()
expr_stmt|;
name|pd
operator|=
operator|new
name|ParseDriver
argument_list|()
expr_stmt|;
name|sem
operator|=
operator|new
name|SemanticAnalyzer
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|init
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
name|cleanUp
argument_list|(
name|tname
argument_list|)
expr_stmt|;
name|createSources
argument_list|(
name|tname
argument_list|)
expr_stmt|;
name|cliDriver
operator|.
name|processCmd
argument_list|(
literal|"set hive.cli.print.header=true;"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|cliInit
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
name|cliInit
argument_list|(
name|tname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|String
name|cliInit
parameter_list|(
name|String
name|tname
parameter_list|,
name|boolean
name|recreate
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|recreate
condition|)
block|{
name|cleanUp
argument_list|(
name|tname
argument_list|)
expr_stmt|;
name|createSources
argument_list|(
name|tname
argument_list|)
expr_stmt|;
block|}
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.DummyAuthenticator"
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|clearWorkMap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CliSessionState
name|ss
init|=
name|createSessionState
argument_list|()
decl_stmt|;
assert|assert
name|ss
operator|!=
literal|null
assert|;
name|ss
operator|.
name|in
operator|=
name|System
operator|.
name|in
expr_stmt|;
name|String
name|outFileExtension
init|=
name|getOutFileExtension
argument_list|(
name|tname
argument_list|)
decl_stmt|;
name|String
name|stdoutName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outDir
operator|!=
literal|null
condition|)
block|{
comment|// TODO: why is this needed?
name|File
name|qf
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
argument_list|)
decl_stmt|;
name|stdoutName
operator|=
name|qf
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
name|outFileExtension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stdoutName
operator|=
name|tname
operator|+
name|outFileExtension
expr_stmt|;
block|}
name|File
name|outf
init|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|stdoutName
argument_list|)
decl_stmt|;
name|OutputStream
name|fo
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outf
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qSortQuerySet
operator|.
name|contains
argument_list|(
name|tname
argument_list|)
condition|)
block|{
name|ss
operator|.
name|out
operator|=
operator|new
name|SortPrintStream
argument_list|(
name|fo
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qHashQuerySet
operator|.
name|contains
argument_list|(
name|tname
argument_list|)
condition|)
block|{
name|ss
operator|.
name|out
operator|=
operator|new
name|DigestPrintStream
argument_list|(
name|fo
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qSortNHashQuerySet
operator|.
name|contains
argument_list|(
name|tname
argument_list|)
condition|)
block|{
name|ss
operator|.
name|out
operator|=
operator|new
name|SortAndDigestPrintStream
argument_list|(
name|fo
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|fo
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|err
operator|=
operator|new
name|CachingPrintStream
argument_list|(
name|fo
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setIsSilent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SessionState
name|oldSs
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|canReuseSession
init|=
operator|!
name|qNoSessionReuseQuerySet
operator|.
name|contains
argument_list|(
name|tname
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldSs
operator|!=
literal|null
operator|&&
name|canReuseSession
operator|&&
name|clusterType
operator|.
name|getCoreClusterType
argument_list|()
operator|==
name|CoreClusterType
operator|.
name|TEZ
condition|)
block|{
comment|// Copy the tezSessionState from the old CliSessionState.
name|tezSessionState
operator|=
name|oldSs
operator|.
name|getTezSession
argument_list|()
expr_stmt|;
name|oldSs
operator|.
name|setTezSession
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setTezSession
argument_list|(
name|tezSessionState
argument_list|)
expr_stmt|;
name|oldSs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oldSs
operator|!=
literal|null
operator|&&
name|clusterType
operator|.
name|getCoreClusterType
argument_list|()
operator|==
name|CoreClusterType
operator|.
name|SPARK
condition|)
block|{
name|sparkSession
operator|=
name|oldSs
operator|.
name|getSparkSession
argument_list|()
expr_stmt|;
name|ss
operator|.
name|setSparkSession
argument_list|(
name|sparkSession
argument_list|)
expr_stmt|;
name|oldSs
operator|.
name|setSparkSession
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|oldSs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oldSs
operator|!=
literal|null
operator|&&
name|oldSs
operator|.
name|out
operator|!=
literal|null
operator|&&
name|oldSs
operator|.
name|out
operator|!=
name|System
operator|.
name|out
condition|)
block|{
name|oldSs
operator|.
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|cliDriver
operator|=
operator|new
name|CliDriver
argument_list|()
expr_stmt|;
if|if
condition|(
name|tname
operator|.
name|equals
argument_list|(
literal|"init_file.q"
argument_list|)
condition|)
block|{
name|ss
operator|.
name|initFiles
operator|.
name|add
argument_list|(
name|AbstractCliConfig
operator|.
name|HIVE_ROOT
operator|+
literal|"/data/scripts/test_init_file.sql"
argument_list|)
expr_stmt|;
block|}
name|cliDriver
operator|.
name|processInitFiles
argument_list|(
name|ss
argument_list|)
expr_stmt|;
return|return
name|outf
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|CliSessionState
name|createSessionState
parameter_list|()
block|{
return|return
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|setSparkSession
parameter_list|(
name|SparkSession
name|sparkSession
parameter_list|)
block|{
name|super
operator|.
name|setSparkSession
argument_list|(
name|sparkSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|sparkSession
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// Wait a little for cluster to init, at most 4 minutes
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|240000
decl_stmt|;
while|while
condition|(
name|sparkSession
operator|.
name|getMemoryAndCores
argument_list|()
operator|.
name|getSecond
argument_list|()
operator|<=
literal|1
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
name|endTime
condition|)
block|{
name|String
name|msg
init|=
literal|"Timed out waiting for Spark cluster to init"
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error trying to obtain executor info: "
operator|+
name|e
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|;
block|}
end_function

begin_function
specifier|private
name|CliSessionState
name|startSessionState
parameter_list|(
name|boolean
name|canReuseSession
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.DummyAuthenticator"
argument_list|)
expr_stmt|;
name|String
name|execEngine
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hive.execution.engine"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.execution.engine"
argument_list|,
literal|"mr"
argument_list|)
expr_stmt|;
name|CliSessionState
name|ss
init|=
name|createSessionState
argument_list|()
decl_stmt|;
assert|assert
name|ss
operator|!=
literal|null
assert|;
name|ss
operator|.
name|in
operator|=
name|System
operator|.
name|in
expr_stmt|;
name|ss
operator|.
name|out
operator|=
name|System
operator|.
name|out
expr_stmt|;
name|ss
operator|.
name|err
operator|=
name|System
operator|.
name|out
expr_stmt|;
name|SessionState
name|oldSs
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldSs
operator|!=
literal|null
operator|&&
name|canReuseSession
operator|&&
name|clusterType
operator|.
name|getCoreClusterType
argument_list|()
operator|==
name|CoreClusterType
operator|.
name|TEZ
condition|)
block|{
comment|// Copy the tezSessionState from the old CliSessionState.
name|tezSessionState
operator|=
name|oldSs
operator|.
name|getTezSession
argument_list|()
expr_stmt|;
name|ss
operator|.
name|setTezSession
argument_list|(
name|tezSessionState
argument_list|)
expr_stmt|;
name|oldSs
operator|.
name|setTezSession
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|oldSs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oldSs
operator|!=
literal|null
operator|&&
name|clusterType
operator|.
name|getCoreClusterType
argument_list|()
operator|==
name|CoreClusterType
operator|.
name|SPARK
condition|)
block|{
name|sparkSession
operator|=
name|oldSs
operator|.
name|getSparkSession
argument_list|()
expr_stmt|;
name|ss
operator|.
name|setSparkSession
argument_list|(
name|sparkSession
argument_list|)
expr_stmt|;
name|oldSs
operator|.
name|setSparkSession
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|oldSs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oldSs
operator|!=
literal|null
operator|&&
name|oldSs
operator|.
name|out
operator|!=
literal|null
operator|&&
name|oldSs
operator|.
name|out
operator|!=
name|System
operator|.
name|out
condition|)
block|{
name|oldSs
operator|.
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|isSessionStateStarted
operator|=
literal|true
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.execution.engine"
argument_list|,
name|execEngine
argument_list|)
expr_stmt|;
return|return
name|ss
return|;
block|}
end_function

begin_function
specifier|public
name|int
name|executeAdhocCommand
parameter_list|(
name|String
name|q
parameter_list|)
block|{
if|if
condition|(
operator|!
name|q
operator|.
name|contains
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|String
name|q1
init|=
name|q
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
index|[
literal|0
index|]
operator|+
literal|";"
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing "
operator|+
name|q1
argument_list|)
expr_stmt|;
return|return
name|cliDriver
operator|.
name|processLine
argument_list|(
name|q1
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|int
name|executeOne
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
name|String
name|q
init|=
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|String
name|q1
init|=
name|q
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|q
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|qrest
init|=
name|q
operator|.
name|substring
argument_list|(
name|q
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|qMap
operator|.
name|put
argument_list|(
name|tname
argument_list|,
name|qrest
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing "
operator|+
name|q1
argument_list|)
expr_stmt|;
return|return
name|cliDriver
operator|.
name|processLine
argument_list|(
name|q1
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|int
name|execute
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
try|try
block|{
return|return
name|drv
operator|.
name|run
argument_list|(
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
argument_list|)
operator|.
name|getResponseCode
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"driver failed to run the command: "
operator|+
name|tname
operator|+
literal|" due to the exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|int
name|executeClient
parameter_list|(
name|String
name|tname1
parameter_list|,
name|String
name|tname2
parameter_list|)
block|{
name|String
name|commands
init|=
name|getCommand
argument_list|(
name|tname1
argument_list|)
operator|+
name|CRLF
operator|+
name|getCommand
argument_list|(
name|tname2
argument_list|)
decl_stmt|;
return|return
name|executeClientInternal
argument_list|(
name|commands
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|int
name|executeClient
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
return|return
name|executeClientInternal
argument_list|(
name|getCommand
argument_list|(
name|tname
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|int
name|executeClientInternal
parameter_list|(
name|String
name|commands
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cmds
init|=
name|CliDriver
operator|.
name|splitSemiColon
argument_list|(
name|commands
argument_list|)
decl_stmt|;
name|int
name|rc
init|=
literal|0
decl_stmt|;
name|String
name|command
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|oneCmd
range|:
name|cmds
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|oneCmd
argument_list|,
literal|"\\"
argument_list|)
condition|)
block|{
name|command
operator|+=
name|StringUtils
operator|.
name|chop
argument_list|(
name|oneCmd
argument_list|)
operator|+
literal|"\\;"
expr_stmt|;
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|isHiveCommand
argument_list|(
name|oneCmd
argument_list|)
condition|)
block|{
name|command
operator|=
name|oneCmd
expr_stmt|;
block|}
else|else
block|{
name|command
operator|+=
name|oneCmd
expr_stmt|;
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|command
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isCommandUsedForTesting
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|rc
operator|=
name|executeTestCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|=
name|cliDriver
operator|.
name|processLine
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|!=
literal|0
operator|&&
operator|!
name|ignoreErrors
argument_list|()
condition|)
block|{
break|break;
block|}
name|command
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|==
literal|0
operator|&&
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setLastCommand
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// reset
block|}
return|return
name|rc
return|;
block|}
end_function

begin_comment
comment|/**    * This allows a .q file to continue executing after a statement runs into an error which is convenient    * if you want to use another hive cmd after the failure to sanity check the state of the system.    */
end_comment

begin_function
specifier|private
name|boolean
name|ignoreErrors
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|CLIIGNOREERRORS
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|isHiveCommand
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|String
index|[]
name|cmd
init|=
name|command
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
if|if
condition|(
name|HiveCommand
operator|.
name|find
argument_list|(
name|cmd
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|HiveCommand
operator|.
name|find
argument_list|(
name|cmd
argument_list|,
name|HiveCommand
operator|.
name|ONLY_FOR_TESTING
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|int
name|executeTestCommand
parameter_list|(
specifier|final
name|String
name|command
parameter_list|)
block|{
name|String
name|commandName
init|=
name|command
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|String
name|commandArgs
init|=
name|command
operator|.
name|trim
argument_list|()
operator|.
name|substring
argument_list|(
name|commandName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|commandArgs
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
name|commandArgs
operator|=
name|StringUtils
operator|.
name|chop
argument_list|(
name|commandArgs
argument_list|)
expr_stmt|;
block|}
comment|//replace ${hiveconf:hive.metastore.warehouse.dir} with actual dir if existed.
comment|//we only want the absolute path, so remove the header, such as hdfs://localhost:57145
name|String
name|wareHouseDir
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"^[a-zA-Z]+://.*?:\\d+"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|commandArgs
operator|=
name|commandArgs
operator|.
name|replaceAll
argument_list|(
literal|"\\$\\{hiveconf:hive\\.metastore\\.warehouse\\.dir\\}"
argument_list|,
name|wareHouseDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setLastCommand
argument_list|(
name|commandName
operator|+
literal|" "
operator|+
name|commandArgs
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|enableTestOnlyCmd
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|CommandProcessor
name|proc
init|=
name|getTestCommand
argument_list|(
name|commandName
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|!=
literal|null
condition|)
block|{
name|CommandProcessorResponse
name|response
init|=
name|proc
operator|.
name|run
argument_list|(
name|commandArgs
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|rc
init|=
name|response
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
name|response
operator|.
name|toString
argument_list|()
argument_list|,
name|response
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|?
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|response
operator|.
name|getException
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not get CommandProcessor for command: "
operator|+
name|commandName
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not execute test command"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|private
name|CommandProcessor
name|getTestCommand
parameter_list|(
specifier|final
name|String
name|commandName
parameter_list|)
throws|throws
name|SQLException
block|{
name|HiveCommand
name|testCommand
init|=
name|HiveCommand
operator|.
name|find
argument_list|(
operator|new
name|String
index|[]
block|{
name|commandName
block|}
argument_list|,
name|HiveCommand
operator|.
name|ONLY_FOR_TESTING
argument_list|)
decl_stmt|;
if|if
condition|(
name|testCommand
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|CommandProcessorFactory
operator|.
name|getForHiveCommandInternal
argument_list|(
operator|new
name|String
index|[]
block|{
name|commandName
block|}
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|testCommand
operator|.
name|isOnlyForTesting
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|enableTestOnlyCmd
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|StringBuilder
name|securityCMDs
init|=
operator|new
name|StringBuilder
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SECURITY_COMMAND_WHITELIST
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|testOnlyCommands
control|)
block|{
name|securityCMDs
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|securityCMDs
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SECURITY_COMMAND_WHITELIST
operator|.
name|toString
argument_list|()
argument_list|,
name|securityCMDs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|isCommandUsedForTesting
parameter_list|(
specifier|final
name|String
name|command
parameter_list|)
block|{
name|String
name|commandName
init|=
name|command
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|HiveCommand
name|testCommand
init|=
name|HiveCommand
operator|.
name|find
argument_list|(
operator|new
name|String
index|[]
block|{
name|commandName
block|}
argument_list|,
name|HiveCommand
operator|.
name|ONLY_FOR_TESTING
argument_list|)
decl_stmt|;
return|return
name|testCommand
operator|!=
literal|null
return|;
block|}
end_function

begin_function
specifier|private
name|String
name|getCommand
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
name|String
name|commands
init|=
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
decl_stmt|;
name|StringBuilder
name|newCommands
init|=
operator|new
name|StringBuilder
argument_list|(
name|commands
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|lastMatchEnd
init|=
literal|0
decl_stmt|;
name|Matcher
name|commentMatcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^--.*$"
argument_list|,
name|Pattern
operator|.
name|MULTILINE
argument_list|)
operator|.
name|matcher
argument_list|(
name|commands
argument_list|)
decl_stmt|;
comment|// remove the comments
while|while
condition|(
name|commentMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|newCommands
operator|.
name|append
argument_list|(
name|commands
operator|.
name|substring
argument_list|(
name|lastMatchEnd
argument_list|,
name|commentMatcher
operator|.
name|start
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lastMatchEnd
operator|=
name|commentMatcher
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
name|newCommands
operator|.
name|append
argument_list|(
name|commands
operator|.
name|substring
argument_list|(
name|lastMatchEnd
argument_list|,
name|commands
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|commands
operator|=
name|newCommands
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|commands
return|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|shouldBeSkipped
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
return|return
name|qSkipSet
operator|.
name|contains
argument_list|(
name|tname
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|String
name|getOutFileExtension
parameter_list|(
name|String
name|fname
parameter_list|)
block|{
name|String
name|outFileExtension
init|=
literal|".out"
decl_stmt|;
if|if
condition|(
name|qJavaVersionSpecificOutput
operator|.
name|contains
argument_list|(
name|fname
argument_list|)
condition|)
block|{
name|outFileExtension
operator|=
literal|".java"
operator|+
name|javaVersion
operator|+
literal|".out"
expr_stmt|;
block|}
return|return
name|outFileExtension
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|convertSequenceFileToTextFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create an instance of hive in order to create the tables
name|testWarehouse
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
expr_stmt|;
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Move all data from dest4_sequencefile to dest4
name|drv
operator|.
name|run
argument_list|(
literal|"FROM dest4_sequencefile INSERT OVERWRITE TABLE dest4 SELECT dest4_sequencefile.*"
argument_list|)
expr_stmt|;
comment|// Drop dest4_sequencefile
name|db
operator|.
name|dropTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"dest4_sequencefile"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|QTestProcessExecResult
name|checkNegativeResults
parameter_list|(
name|String
name|tname
parameter_list|,
name|Exception
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|outFileExtension
init|=
name|getOutFileExtension
argument_list|(
name|tname
argument_list|)
decl_stmt|;
name|File
name|qf
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
argument_list|)
decl_stmt|;
name|String
name|expf
init|=
name|outPath
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
name|outFileExtension
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|outf
init|=
literal|null
decl_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|outf
argument_list|,
name|qf
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
name|outFileExtension
argument_list|)
argument_list|)
expr_stmt|;
name|FileWriter
name|outfd
init|=
operator|new
name|FileWriter
argument_list|(
name|outf
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ParseException
condition|)
block|{
name|outfd
operator|.
name|write
argument_list|(
literal|"Parse Error: "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|SemanticException
condition|)
block|{
name|outfd
operator|.
name|write
argument_list|(
literal|"Semantic Exception: \n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
name|outfd
operator|.
name|write
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|outfd
operator|.
name|close
argument_list|()
expr_stmt|;
name|QTestProcessExecResult
name|result
init|=
name|executeDiffCommand
argument_list|(
name|outf
operator|.
name|getPath
argument_list|()
argument_list|,
name|expf
argument_list|,
literal|false
argument_list|,
name|qSortSet
operator|.
name|contains
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|overWrite
condition|)
block|{
name|overwriteResults
argument_list|(
name|outf
operator|.
name|getPath
argument_list|()
argument_list|,
name|expf
argument_list|)
expr_stmt|;
return|return
name|QTestProcessExecResult
operator|.
name|createWithoutOutput
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|public
name|QTestProcessExecResult
name|checkParseResults
parameter_list|(
name|String
name|tname
parameter_list|,
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|tree
operator|!=
literal|null
condition|)
block|{
name|String
name|outFileExtension
init|=
name|getOutFileExtension
argument_list|(
name|tname
argument_list|)
decl_stmt|;
name|File
name|parseDir
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
literal|"parse"
argument_list|)
decl_stmt|;
name|String
name|expf
init|=
name|outPath
argument_list|(
name|parseDir
operator|.
name|toString
argument_list|()
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
name|outFileExtension
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|outf
init|=
literal|null
decl_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|outf
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
name|outFileExtension
argument_list|)
argument_list|)
expr_stmt|;
name|FileWriter
name|outfd
init|=
operator|new
name|FileWriter
argument_list|(
name|outf
argument_list|)
decl_stmt|;
name|outfd
operator|.
name|write
argument_list|(
name|tree
operator|.
name|toStringTree
argument_list|()
argument_list|)
expr_stmt|;
name|outfd
operator|.
name|close
argument_list|()
expr_stmt|;
name|QTestProcessExecResult
name|exitVal
init|=
name|executeDiffCommand
argument_list|(
name|outf
operator|.
name|getPath
argument_list|()
argument_list|,
name|expf
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|overWrite
condition|)
block|{
name|overwriteResults
argument_list|(
name|outf
operator|.
name|getPath
argument_list|()
argument_list|,
name|expf
argument_list|)
expr_stmt|;
return|return
name|QTestProcessExecResult
operator|.
name|createWithoutOutput
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|exitVal
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Parse tree is null"
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Given the current configurations (e.g., hadoop version and execution mode), return    * the correct file name to compare with the current test run output.    * @param outDir The directory where the reference log files are stored.    * @param testName The test file name (terminated by ".out").    * @return The file name appended with the configuration values if it exists.    */
end_comment

begin_function
specifier|public
name|String
name|outPath
parameter_list|(
name|String
name|outDir
parameter_list|,
name|String
name|testName
parameter_list|)
block|{
name|String
name|ret
init|=
operator|(
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|testName
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// List of configurations. Currently the list consists of hadoop version and execution mode only
name|List
argument_list|<
name|String
argument_list|>
name|configs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|configs
operator|.
name|add
argument_list|(
name|this
operator|.
name|hadoopVer
argument_list|)
expr_stmt|;
name|Deque
argument_list|<
name|String
argument_list|>
name|stack
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|testName
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// example file names are input1.q.out_0.20.0_minimr or input2.q.out_0.17
for|for
control|(
name|String
name|s
range|:
name|configs
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|stack
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|fileName
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ret
operator|=
name|f
operator|.
name|getPath
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|private
name|Pattern
index|[]
name|toPattern
parameter_list|(
name|String
index|[]
name|patternStrs
parameter_list|)
block|{
name|Pattern
index|[]
name|patterns
init|=
operator|new
name|Pattern
index|[
name|patternStrs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|patternStrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|patterns
index|[
name|i
index|]
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|patternStrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|patterns
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|maskPatterns
parameter_list|(
name|Pattern
index|[]
name|patterns
parameter_list|,
name|String
name|fname
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|maskPattern
init|=
literal|"#### A masked pattern was here ####"
decl_stmt|;
name|String
name|partialMaskPattern
init|=
literal|"#### A PARTIAL masked pattern was here ####"
decl_stmt|;
name|String
name|line
decl_stmt|;
name|BufferedReader
name|in
decl_stmt|;
name|BufferedWriter
name|out
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|File
name|fileOrig
init|=
operator|new
name|File
argument_list|(
name|fname
operator|+
literal|".orig"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|file
argument_list|,
name|fileOrig
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|fileOrig
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|lastWasMasked
init|=
literal|false
decl_stmt|;
name|boolean
name|partialMaskWasMatched
init|=
literal|false
decl_stmt|;
name|Matcher
name|matcher
decl_stmt|;
while|while
condition|(
literal|null
operator|!=
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|fsType
operator|==
name|FsType
operator|.
name|encrypted_hdfs
condition|)
block|{
for|for
control|(
name|Pattern
name|pattern
range|:
name|partialReservedPlanMask
control|)
block|{
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|line
operator|=
name|partialMaskPattern
operator|+
literal|" "
operator|+
name|matcher
operator|.
name|group
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialMaskWasMatched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|partialMaskWasMatched
condition|)
block|{
for|for
control|(
name|Pair
argument_list|<
name|Pattern
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|patternsWithMaskComments
control|)
block|{
name|Pattern
name|pattern
init|=
name|pair
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|String
name|maskComment
init|=
name|pair
operator|.
name|getRight
argument_list|()
decl_stmt|;
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|line
operator|=
name|matcher
operator|.
name|replaceAll
argument_list|(
name|maskComment
argument_list|)
expr_stmt|;
name|partialMaskWasMatched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|Pattern
name|pattern
range|:
name|patterns
control|)
block|{
name|line
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|maskPattern
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|line
operator|.
name|equals
argument_list|(
name|maskPattern
argument_list|)
condition|)
block|{
comment|// We're folding multiple masked lines into one.
if|if
condition|(
operator|!
name|lastWasMasked
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|lastWasMasked
operator|=
literal|true
expr_stmt|;
name|partialMaskWasMatched
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|lastWasMasked
operator|=
literal|false
expr_stmt|;
name|partialMaskWasMatched
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_decl_stmt
specifier|private
specifier|final
name|Pattern
index|[]
name|planMask
init|=
name|toPattern
argument_list|(
operator|new
name|String
index|[]
block|{
literal|".*file:.*"
block|,
literal|".*pfile:.*"
block|,
literal|".*hdfs:.*"
block|,
literal|".*/tmp/.*"
block|,
literal|".*invalidscheme:.*"
block|,
literal|".*lastUpdateTime.*"
block|,
literal|".*lastAccessTime.*"
block|,
literal|".*lastModifiedTime.*"
block|,
literal|".*[Oo]wner.*"
block|,
literal|".*CreateTime.*"
block|,
literal|".*LastAccessTime.*"
block|,
literal|".*Location.*"
block|,
literal|".*LOCATION '.*"
block|,
literal|".*transient_lastDdlTime.*"
block|,
literal|".*last_modified_.*"
block|,
literal|".*at org.*"
block|,
literal|".*at sun.*"
block|,
literal|".*at java.*"
block|,
literal|".*at junit.*"
block|,
literal|".*Caused by:.*"
block|,
literal|".*LOCK_QUERYID:.*"
block|,
literal|".*LOCK_TIME:.*"
block|,
literal|".*grantTime.*"
block|,
literal|".*[.][.][.] [0-9]* more.*"
block|,
literal|".*job_[0-9_]*.*"
block|,
literal|".*job_local[0-9_]*.*"
block|,
literal|".*USING 'java -cp.*"
block|,
literal|"^Deleted.*"
block|,
literal|".*DagName:.*"
block|,
literal|".*DagId:.*"
block|,
literal|".*Input:.*/data/files/.*"
block|,
literal|".*Output:.*/data/files/.*"
block|,
literal|".*total number of created files now is.*"
block|,
literal|".*.hive-staging.*"
block|,
literal|"pk_-?[0-9]*_[0-9]*_[0-9]*"
block|,
literal|"fk_-?[0-9]*_[0-9]*_[0-9]*"
block|,
literal|".*at com\\.sun\\.proxy.*"
block|,
literal|".*at com\\.jolbox.*"
block|,
literal|".*at com\\.zaxxer.*"
block|,
literal|"org\\.apache\\.hadoop\\.hive\\.metastore\\.model\\.MConstraint@([0-9]|[a-z])*"
block|,
literal|"^Repair: Added partition to metastore.*"
block|}
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|final
name|Pattern
index|[]
name|partialReservedPlanMask
init|=
name|toPattern
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"data/warehouse/(.*?/)+\\.hive-staging"
comment|// the directory might be db/table/partition
comment|//TODO: add more expected test result here
block|}
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* This list may be modified by specific cli drivers to mask strings that change on every test */
end_comment

begin_decl_stmt
specifier|private
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|Pattern
argument_list|,
name|String
argument_list|>
argument_list|>
name|patternsWithMaskComments
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Pattern
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
name|toPatternPair
argument_list|(
literal|"(pblob|s3.?|swift|wasb.?).*hive-staging.*"
argument_list|,
literal|"### BLOBSTORE_STAGING_PATH ###"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_function
specifier|private
name|Pair
argument_list|<
name|Pattern
argument_list|,
name|String
argument_list|>
name|toPatternPair
parameter_list|(
name|String
name|patternStr
parameter_list|,
name|String
name|maskComment
parameter_list|)
block|{
return|return
name|ImmutablePair
operator|.
name|of
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|patternStr
argument_list|)
argument_list|,
name|maskComment
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|addPatternWithMaskComment
parameter_list|(
name|String
name|patternStr
parameter_list|,
name|String
name|maskComment
parameter_list|)
block|{
name|patternsWithMaskComments
operator|.
name|add
argument_list|(
name|toPatternPair
argument_list|(
name|patternStr
argument_list|,
name|maskComment
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|QTestProcessExecResult
name|checkCliDriverResults
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|qMap
operator|.
name|containsKey
argument_list|(
name|tname
argument_list|)
operator|)
assert|;
name|String
name|outFileExtension
init|=
name|getOutFileExtension
argument_list|(
name|tname
argument_list|)
decl_stmt|;
name|String
name|outFileName
init|=
name|outPath
argument_list|(
name|outDir
argument_list|,
name|tname
operator|+
name|outFileExtension
argument_list|)
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|tname
operator|+
name|outFileExtension
argument_list|)
decl_stmt|;
name|maskPatterns
argument_list|(
name|planMask
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|QTestProcessExecResult
name|exitVal
init|=
name|executeDiffCommand
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|,
name|outFileName
argument_list|,
literal|false
argument_list|,
name|qSortSet
operator|.
name|contains
argument_list|(
name|tname
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|overWrite
condition|)
block|{
name|overwriteResults
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|,
name|outFileName
argument_list|)
expr_stmt|;
return|return
name|QTestProcessExecResult
operator|.
name|createWithoutOutput
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|exitVal
return|;
block|}
end_function

begin_function
specifier|public
name|QTestProcessExecResult
name|checkCompareCliDriverResults
parameter_list|(
name|String
name|tname
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|outputs
operator|.
name|size
argument_list|()
operator|>
literal|1
assert|;
name|maskPatterns
argument_list|(
name|planMask
argument_list|,
name|outputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|outputs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|maskPatterns
argument_list|(
name|planMask
argument_list|,
name|outputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QTestProcessExecResult
name|result
init|=
name|executeDiffCommand
argument_list|(
name|outputs
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|,
name|outputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|,
name|qSortSet
operator|.
name|contains
argument_list|(
name|tname
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getReturnCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Files don't match: "
operator|+
name|outputs
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|+
literal|" and "
operator|+
name|outputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
return|return
name|QTestProcessExecResult
operator|.
name|createWithoutOutput
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|overwriteResults
parameter_list|(
name|String
name|inFileName
parameter_list|,
name|String
name|outFileName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// This method can be replaced with Files.copy(source, target, REPLACE_EXISTING)
comment|// once Hive uses JAVA 7.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Overwriting results "
operator|+
name|inFileName
operator|+
literal|" to "
operator|+
name|outFileName
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|executeCmd
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"cp"
block|,
name|getQuotedString
argument_list|(
name|inFileName
argument_list|)
block|,
name|getQuotedString
argument_list|(
name|outFileName
argument_list|)
block|}
argument_list|)
operator|.
name|getReturnCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected error while overwriting "
operator|+
name|inFileName
operator|+
literal|" with "
operator|+
name|outFileName
argument_list|)
throw|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|QTestProcessExecResult
name|executeDiffCommand
parameter_list|(
name|String
name|inFileName
parameter_list|,
name|String
name|outFileName
parameter_list|,
name|boolean
name|ignoreWhiteSpace
parameter_list|,
name|boolean
name|sortResults
parameter_list|)
throws|throws
name|Exception
block|{
name|QTestProcessExecResult
name|result
decl_stmt|;
if|if
condition|(
name|sortResults
condition|)
block|{
comment|// sort will try to open the output file in write mode on windows. We need to
comment|// close it first.
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|out
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|out
operator|!=
name|System
operator|.
name|out
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|inSorted
init|=
name|inFileName
operator|+
name|SORT_SUFFIX
decl_stmt|;
name|String
name|outSorted
init|=
name|outFileName
operator|+
name|SORT_SUFFIX
decl_stmt|;
name|sortFiles
argument_list|(
name|inFileName
argument_list|,
name|inSorted
argument_list|)
expr_stmt|;
name|sortFiles
argument_list|(
name|outFileName
argument_list|,
name|outSorted
argument_list|)
expr_stmt|;
name|inFileName
operator|=
name|inSorted
expr_stmt|;
name|outFileName
operator|=
name|outSorted
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|diffCommandArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|diffCommandArgs
operator|.
name|add
argument_list|(
literal|"diff"
argument_list|)
expr_stmt|;
comment|// Text file comparison
name|diffCommandArgs
operator|.
name|add
argument_list|(
literal|"-a"
argument_list|)
expr_stmt|;
comment|// Ignore changes in the amount of white space
if|if
condition|(
name|ignoreWhiteSpace
condition|)
block|{
name|diffCommandArgs
operator|.
name|add
argument_list|(
literal|"-b"
argument_list|)
expr_stmt|;
block|}
comment|// Add files to compare to the arguments list
name|diffCommandArgs
operator|.
name|add
argument_list|(
name|getQuotedString
argument_list|(
name|inFileName
argument_list|)
argument_list|)
expr_stmt|;
name|diffCommandArgs
operator|.
name|add
argument_list|(
name|getQuotedString
argument_list|(
name|outFileName
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|executeCmd
argument_list|(
name|diffCommandArgs
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortResults
condition|)
block|{
operator|new
name|File
argument_list|(
name|inFileName
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|outFileName
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|sortFiles
parameter_list|(
name|String
name|in
parameter_list|,
name|String
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|result
init|=
name|executeCmd
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"sort"
block|,
name|getQuotedString
argument_list|(
name|in
argument_list|)
block|,     }
argument_list|,
name|out
argument_list|,
literal|null
argument_list|)
operator|.
name|getReturnCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected error while sorting "
operator|+
name|in
argument_list|)
throw|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|QTestProcessExecResult
name|executeCmd
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|executeCmd
argument_list|(
name|args
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|QTestProcessExecResult
name|executeCmd
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|executeCmd
argument_list|(
name|args
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|QTestProcessExecResult
name|executeCmd
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|args
parameter_list|,
name|String
name|outFile
parameter_list|,
name|String
name|errFile
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|cmdArray
init|=
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
name|executeCmd
argument_list|(
name|cmdArray
argument_list|,
name|outFile
argument_list|,
name|errFile
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|QTestProcessExecResult
name|executeCmd
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|String
name|outFile
parameter_list|,
name|String
name|errFile
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running: "
operator|+
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
argument_list|(
name|args
argument_list|,
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|outFile
operator|==
literal|null
condition|?
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getChildOutStream
argument_list|()
else|:
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|PrintStream
name|err
init|=
name|errFile
operator|==
literal|null
condition|?
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getChildErrStream
argument_list|()
else|:
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|errFile
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|str
init|=
operator|new
name|PrintStream
argument_list|(
name|bos
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|err
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|out
argument_list|,
name|str
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|result
init|=
name|executor
operator|.
name|waitFor
argument_list|()
decl_stmt|;
name|outPrinter
operator|.
name|join
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|outFile
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|errFile
operator|!=
literal|null
condition|)
block|{
name|err
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|QTestProcessExecResult
operator|.
name|create
argument_list|(
name|result
argument_list|,
operator|new
name|String
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|String
name|getQuotedString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
return|;
block|}
end_function

begin_function
specifier|public
name|ASTNode
name|parseQuery
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|pd
operator|.
name|parse
argument_list|(
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|resetParser
parameter_list|()
throws|throws
name|SemanticException
block|{
name|drv
operator|.
name|init
argument_list|()
expr_stmt|;
name|pd
operator|=
operator|new
name|ParseDriver
argument_list|()
expr_stmt|;
name|queryState
operator|=
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|sem
operator|=
operator|new
name|SemanticAnalyzer
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|analyzeAST
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Do semantic analysis and plan generation
name|Context
name|ctx
init|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|ast
operator|.
name|getToken
argument_list|()
operator|==
literal|null
operator|)
operator|&&
operator|(
name|ast
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|ast
operator|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|sem
operator|.
name|getOutputs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sem
operator|.
name|getInputs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sem
operator|.
name|analyze
argument_list|(
name|ast
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|sem
operator|.
name|getRootTasks
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getQMap
parameter_list|()
block|{
return|return
name|qMap
return|;
block|}
end_function

begin_comment
comment|/**    * QTestSetup defines test fixtures which are reused across testcases,    * and are needed before any test can be run    */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|QTestSetup
block|{
specifier|private
name|MiniZooKeeperCluster
name|zooKeeperCluster
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|zkPort
decl_stmt|;
specifier|private
name|ZooKeeper
name|zooKeeper
decl_stmt|;
specifier|public
name|QTestSetup
parameter_list|()
block|{     }
specifier|public
name|void
name|preTest
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|zooKeeperCluster
operator|==
literal|null
condition|)
block|{
comment|//create temp dir
name|String
name|tmpBaseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TEST_TMP_DIR_PROPERTY
argument_list|)
decl_stmt|;
name|File
name|tmpDir
init|=
name|Utilities
operator|.
name|createTempDir
argument_list|(
name|tmpBaseDir
argument_list|)
decl_stmt|;
name|zooKeeperCluster
operator|=
operator|new
name|MiniZooKeeperCluster
argument_list|()
expr_stmt|;
name|zkPort
operator|=
name|zooKeeperCluster
operator|.
name|startup
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|zooKeeper
operator|!=
literal|null
condition|)
block|{
name|zooKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|int
name|sessionTimeout
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_SESSION_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|zooKeeper
operator|=
operator|new
name|ZooKeeper
argument_list|(
literal|"localhost:"
operator|+
name|zkPort
argument_list|,
name|sessionTimeout
argument_list|,
operator|new
name|Watcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|arg0
parameter_list|)
block|{         }
block|}
argument_list|)
expr_stmt|;
name|String
name|zkServer
init|=
literal|"localhost"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.zookeeper.quorum"
argument_list|,
name|zkServer
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.zookeeper.client.port"
argument_list|,
literal|""
operator|+
name|zkPort
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|postTest
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|zooKeeperCluster
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|zooKeeper
operator|!=
literal|null
condition|)
block|{
name|zooKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|ZooKeeperHiveLockManager
operator|.
name|releaseAllLocks
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|CuratorFrameworkSingleton
operator|.
name|closeAndReleaseInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|zooKeeperCluster
operator|!=
literal|null
condition|)
block|{
name|zooKeeperCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|zooKeeperCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * QTRunner: Runnable class for running a a single query file.    *    **/
end_comment

begin_class
specifier|public
specifier|static
class|class
name|QTRunner
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|QTestUtil
name|qt
decl_stmt|;
specifier|private
specifier|final
name|String
name|fname
decl_stmt|;
specifier|public
name|QTRunner
parameter_list|(
name|QTestUtil
name|qt
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|this
operator|.
name|qt
operator|=
name|qt
expr_stmt|;
name|this
operator|.
name|fname
operator|=
name|fname
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// assumption is that environment has already been cleaned once globally
comment|// hence each thread does not call cleanUp() and createSources() again
name|qt
operator|.
name|cliInit
argument_list|(
name|fname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qt
operator|.
name|executeClient
argument_list|(
name|fname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Query file "
operator|+
name|fname
operator|+
literal|" failed with exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|outputTestFailureHelpMessage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * Setup to execute a set of query files. Uses QTestUtil to do so.    *    * @param qfiles    *          array of input query files containing arbitrary number of hive    *          queries    * @param resDir    *          output directory    * @param logDir    *          log directory    * @return one QTestUtil for each query file    */
end_comment

begin_function
specifier|public
specifier|static
name|QTestUtil
index|[]
name|queryListRunnerSetup
parameter_list|(
name|File
index|[]
name|qfiles
parameter_list|,
name|String
name|resDir
parameter_list|,
name|String
name|logDir
parameter_list|,
name|String
name|initScript
parameter_list|,
name|String
name|cleanupScript
parameter_list|)
throws|throws
name|Exception
block|{
name|QTestUtil
index|[]
name|qt
init|=
operator|new
name|QTestUtil
index|[
name|qfiles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qt
index|[
name|i
index|]
operator|=
operator|new
name|QTestUtil
argument_list|(
name|resDir
argument_list|,
name|logDir
argument_list|,
name|MiniClusterType
operator|.
name|none
argument_list|,
literal|null
argument_list|,
literal|"0.20"
argument_list|,
name|initScript
operator|==
literal|null
condition|?
name|defaultInitScript
else|:
name|initScript
argument_list|,
name|cleanupScript
operator|==
literal|null
condition|?
name|defaultCleanupScript
else|:
name|cleanupScript
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|addFile
argument_list|(
name|qfiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|clearTestSideEffects
argument_list|()
expr_stmt|;
block|}
return|return
name|qt
return|;
block|}
end_function

begin_comment
comment|/**    * Executes a set of query files in sequence.    *    * @param qfiles    *          array of input query files containing arbitrary number of hive    *          queries    * @param qt    *          array of QTestUtils, one per qfile    * @return true if all queries passed, false otw    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|queryListRunnerSingleThreaded
parameter_list|(
name|File
index|[]
name|qfiles
parameter_list|,
name|QTestUtil
index|[]
name|qt
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|createSources
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
operator|&&
operator|!
name|failed
condition|;
name|i
operator|++
control|)
block|{
name|qt
index|[
name|i
index|]
operator|.
name|clearTestSideEffects
argument_list|()
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|cliInit
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qt
index|[
name|i
index|]
operator|.
name|executeClient
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|QTestProcessExecResult
name|result
init|=
name|qt
index|[
name|i
index|]
operator|.
name|checkCliDriverResults
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getReturnCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Test "
argument_list|)
operator|.
name|append
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" results check failed with error code "
argument_list|)
operator|.
name|append
argument_list|(
name|result
operator|.
name|getReturnCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNotEmpty
argument_list|(
name|result
operator|.
name|getCapturedOutput
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" and diff value "
argument_list|)
operator|.
name|append
argument_list|(
name|result
operator|.
name|getCapturedOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|outputTestFailureHelpMessage
argument_list|()
expr_stmt|;
block|}
name|qt
index|[
name|i
index|]
operator|.
name|clearPostTestEffects
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
operator|!
name|failed
operator|)
return|;
block|}
end_function

begin_comment
comment|/**    * Executes a set of query files parallel.    *    * Each query file is run in a separate thread. The caller has to arrange    * that different query files do not collide (in terms of destination tables)    *    * @param qfiles    *          array of input query files containing arbitrary number of hive    *          queries    * @param qt    *          array of QTestUtils, one per qfile    * @return true if all queries passed, false otw    *    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|queryListRunnerMultiThreaded
parameter_list|(
name|File
index|[]
name|qfiles
parameter_list|,
name|QTestUtil
index|[]
name|qt
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
comment|// in multithreaded mode - do cleanup/initialization just once
name|qt
index|[
literal|0
index|]
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|createSources
argument_list|()
expr_stmt|;
name|qt
index|[
literal|0
index|]
operator|.
name|clearTestSideEffects
argument_list|()
expr_stmt|;
name|QTRunner
index|[]
name|qtRunners
init|=
operator|new
name|QTRunner
index|[
name|qfiles
operator|.
name|length
index|]
decl_stmt|;
name|Thread
index|[]
name|qtThread
init|=
operator|new
name|Thread
index|[
name|qfiles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qtRunners
index|[
name|i
index|]
operator|=
operator|new
name|QTRunner
argument_list|(
name|qt
index|[
name|i
index|]
argument_list|,
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|qtThread
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|qtRunners
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qtThread
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qtThread
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|QTestProcessExecResult
name|result
init|=
name|qt
index|[
name|i
index|]
operator|.
name|checkCliDriverResults
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getReturnCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Test "
argument_list|)
operator|.
name|append
argument_list|(
name|qfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" results check failed with error code "
argument_list|)
operator|.
name|append
argument_list|(
name|result
operator|.
name|getReturnCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNotEmpty
argument_list|(
name|result
operator|.
name|getCapturedOutput
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" and diff value "
argument_list|)
operator|.
name|append
argument_list|(
name|result
operator|.
name|getCapturedOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|outputTestFailureHelpMessage
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
operator|!
name|failed
operator|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|outputTestFailureHelpMessage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"See ./ql/target/tmp/log/hive.log or ./itests/qtest/target/tmp/log/hive.log, or check "
operator|+
literal|"./ql/target/surefire-reports or ./itests/qtest/target/surefire-reports/ for specific "
operator|+
literal|"test cases logs."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|String
name|ensurePathEndsInSlash
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Path cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
return|return
name|path
return|;
block|}
else|else
block|{
return|return
name|path
operator|+
name|File
operator|.
name|separator
return|;
block|}
block|}
end_function

begin_decl_stmt
specifier|private
specifier|static
name|String
index|[]
name|cachedQvFileList
init|=
literal|null
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|cachedDefaultQvFileList
init|=
literal|null
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|static
name|Pattern
name|qvSuffix
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"_[0-9]+.qv$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getVersionFiles
parameter_list|(
name|String
name|queryDir
parameter_list|,
name|String
name|tname
parameter_list|)
block|{
name|ensureQvFileList
argument_list|(
name|queryDir
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|getVersionFilesInternal
argument_list|(
name|tname
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|cachedDefaultQvFileList
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|ensureQvFileList
parameter_list|(
name|String
name|queryDir
parameter_list|)
block|{
if|if
condition|(
name|cachedQvFileList
operator|!=
literal|null
condition|)
return|return;
comment|// Not thread-safe.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Getting versions from "
operator|+
name|queryDir
argument_list|)
expr_stmt|;
name|cachedQvFileList
operator|=
operator|(
operator|new
name|File
argument_list|(
name|queryDir
argument_list|)
operator|)
operator|.
name|list
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".qv"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|cachedQvFileList
operator|==
literal|null
condition|)
return|return;
comment|// no files at all
name|Arrays
operator|.
name|sort
argument_list|(
name|cachedQvFileList
argument_list|,
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|defaults
init|=
name|getVersionFilesInternal
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|cachedDefaultQvFileList
operator|=
operator|(
name|defaults
operator|!=
literal|null
operator|)
condition|?
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|defaults
argument_list|)
else|:
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getVersionFilesInternal
parameter_list|(
name|String
name|tname
parameter_list|)
block|{
if|if
condition|(
name|cachedQvFileList
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
name|int
name|pos
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|cachedQvFileList
argument_list|,
name|tname
argument_list|,
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Unexpected file list element: "
operator|+
name|cachedQvFileList
index|[
name|pos
index|]
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|pos
operator|=
operator|(
operator|-
name|pos
operator|-
literal|1
operator|)
init|;
name|pos
operator|<
name|cachedQvFileList
operator|.
name|length
condition|;
operator|++
name|pos
control|)
block|{
name|String
name|candidate
init|=
name|cachedQvFileList
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|candidate
operator|.
name|length
argument_list|()
operator|<=
name|tname
operator|.
name|length
argument_list|()
operator|||
operator|!
name|tname
operator|.
name|equalsIgnoreCase
argument_list|(
name|candidate
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tname
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|||
operator|!
name|qvSuffix
operator|.
name|matcher
argument_list|(
name|candidate
operator|.
name|substring
argument_list|(
name|tname
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|failed
parameter_list|(
name|int
name|ecode
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|debugHint
parameter_list|)
block|{
name|String
name|command
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|?
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getLastCommand
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|message
init|=
literal|"Client execution failed with error code = "
operator|+
name|ecode
operator|+
operator|(
name|command
operator|!=
literal|null
condition|?
literal|" running \""
operator|+
name|command
else|:
literal|""
operator|)
operator|+
literal|"\" fname="
operator|+
name|fname
operator|+
literal|" "
operator|+
operator|(
name|debugHint
operator|!=
literal|null
condition|?
name|debugHint
else|:
literal|""
operator|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// for negative tests, which is succeeded.. no need to print the query string
end_comment

begin_function
specifier|public
name|void
name|failed
parameter_list|(
name|String
name|fname
parameter_list|,
name|String
name|debugHint
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Client Execution was expected to fail, but succeeded with error code 0 for fname="
operator|+
name|fname
operator|+
operator|(
name|debugHint
operator|!=
literal|null
condition|?
operator|(
literal|" "
operator|+
name|debugHint
operator|)
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|failedDiff
parameter_list|(
name|int
name|ecode
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|debugHint
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Client Execution succeeded but contained differences "
operator|+
literal|"(error code = "
operator|+
name|ecode
operator|+
literal|") after executing "
operator|+
name|fname
operator|+
operator|(
name|debugHint
operator|!=
literal|null
condition|?
operator|(
literal|" "
operator|+
name|debugHint
operator|)
else|:
literal|""
operator|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|failed
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|debugHint
parameter_list|)
block|{
name|String
name|command
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|?
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getLastCommand
argument_list|()
else|:
literal|null
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed query: "
operator|+
name|fname
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception "
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
operator|+
literal|"\n"
operator|+
operator|(
name|command
operator|!=
literal|null
condition|?
literal|" running "
operator|+
name|command
else|:
literal|""
operator|)
operator|+
operator|(
name|debugHint
operator|!=
literal|null
condition|?
name|debugHint
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|addTestsToSuiteFromQfileNames
parameter_list|(
name|String
name|qFileNamesFile
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|qFilesToExecute
parameter_list|,
name|TestSuite
name|suite
parameter_list|,
name|Object
name|setup
parameter_list|,
name|SuiteAddTestFunctor
name|suiteAddTestCallback
parameter_list|)
block|{
try|try
block|{
name|File
name|qFileNames
init|=
operator|new
name|File
argument_list|(
name|qFileNamesFile
argument_list|)
decl_stmt|;
name|FileReader
name|fr
init|=
operator|new
name|FileReader
argument_list|(
name|qFileNames
operator|.
name|getCanonicalFile
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
name|fr
argument_list|)
decl_stmt|;
name|String
name|fName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|fName
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fName
operator|.
name|isEmpty
argument_list|()
operator|||
name|fName
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|int
name|eIdx
init|=
name|fName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|eIdx
operator|==
operator|-
literal|1
condition|)
block|{
continue|continue;
block|}
name|String
name|tName
init|=
name|fName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|eIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|qFilesToExecute
operator|.
name|isEmpty
argument_list|()
operator|||
name|qFilesToExecute
operator|.
name|contains
argument_list|(
name|fName
argument_list|)
condition|)
block|{
name|suiteAddTestCallback
operator|.
name|addTestToSuite
argument_list|(
name|suite
argument_list|,
name|setup
argument_list|,
name|tName
argument_list|)
expr_stmt|;
block|}
block|}
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception "
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|setupMetaStoreTableColumnStatsFor30TBTPCDSWorkload
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|Statement
argument_list|>
name|statements
init|=
operator|new
name|ArrayList
argument_list|<
name|Statement
argument_list|>
argument_list|()
decl_stmt|;
comment|// list of Statements, PreparedStatements
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// connection properties
name|props
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"javax.jdo.option.ConnectionUserName"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"javax.jdo.option.ConnectionPassword"
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"javax.jdo.option.ConnectionURL"
argument_list|)
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|Statement
name|s
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connected to metastore database "
argument_list|)
expr_stmt|;
block|}
name|String
name|mdbPath
init|=
name|AbstractCliConfig
operator|.
name|HIVE_ROOT
operator|+
literal|"/data/files/tpcds-perf/metastore_export/"
decl_stmt|;
comment|// Setup the table column stats
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
operator|new
name|File
argument_list|(
name|AbstractCliConfig
operator|.
name|HIVE_ROOT
operator|+
literal|"/metastore/scripts/upgrade/derby/022-HIVE-11107.derby.sql"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|command
decl_stmt|;
name|s
operator|.
name|execute
argument_list|(
literal|"DROP TABLE APP.TABLE_PARAMS"
argument_list|)
expr_stmt|;
name|s
operator|.
name|execute
argument_list|(
literal|"DROP TABLE APP.TAB_COL_STATS"
argument_list|)
expr_stmt|;
comment|// Create the column stats table
while|while
condition|(
operator|(
name|command
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|command
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to run command : "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|PreparedStatement
name|psCommand
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|command
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|statements
operator|.
name|add
argument_list|(
name|psCommand
argument_list|)
expr_stmt|;
name|psCommand
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"successfully completed "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got SQL Exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|tabColStatsCsv
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|mdbPath
argument_list|,
literal|"csv"
argument_list|,
literal|"TAB_COL_STATS.txt.bz2"
argument_list|)
decl_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|tabParamsCsv
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|mdbPath
argument_list|,
literal|"csv"
argument_list|,
literal|"TABLE_PARAMS.txt.bz2"
argument_list|)
decl_stmt|;
comment|// Set up the foreign key constraints properly in the TAB_COL_STATS data
name|String
name|tmpBaseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TEST_TMP_DIR_PROPERTY
argument_list|)
decl_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|tmpFileLoc1
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|tmpBaseDir
argument_list|,
literal|"TAB_COL_STATS.txt"
argument_list|)
decl_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|tmpFileLoc2
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|tmpBaseDir
argument_list|,
literal|"TABLE_PARAMS.txt"
argument_list|)
decl_stmt|;
class|class
name|MyComp
implements|implements
name|Comparator
argument_list|<
name|String
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|str1
parameter_list|,
name|String
name|str2
parameter_list|)
block|{
if|if
condition|(
name|str2
operator|.
name|length
argument_list|()
operator|!=
name|str1
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|str2
operator|.
name|length
argument_list|()
operator|-
name|str1
operator|.
name|length
argument_list|()
return|;
block|}
return|return
name|str1
operator|.
name|compareTo
argument_list|(
name|str2
argument_list|)
return|;
block|}
block|}
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|tableNameToID
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
operator|new
name|MyComp
argument_list|()
argument_list|)
decl_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM APP.TBLS"
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tblName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TBL_NAME"
argument_list|)
decl_stmt|;
name|Integer
name|tblId
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"TBL_ID"
argument_list|)
decl_stmt|;
name|tableNameToID
operator|.
name|put
argument_list|(
name|tblName
argument_list|,
name|tblId
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resultset : "
operator|+
name|tblName
operator|+
literal|" | "
operator|+
name|tblId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"select TBLS.TBL_NAME, a.COLUMN_NAME, a.TYPE_NAME from  "
operator|+
literal|"(select COLUMN_NAME, TYPE_NAME, SDS.SD_ID from APP.COLUMNS_V2 join APP.SDS on SDS.CD_ID = COLUMNS_V2.CD_ID) a"
operator|+
literal|" join APP.TBLS on  TBLS.SD_ID = a.SD_ID"
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tblName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|colName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|typeName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cols
init|=
name|data
operator|.
name|get
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|cols
condition|)
block|{
name|cols
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|cols
operator|.
name|put
argument_list|(
name|colName
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|tblName
argument_list|,
name|cols
argument_list|)
expr_stmt|;
block|}
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|BZip2CompressorInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|tabColStatsCsv
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Stream
argument_list|<
name|String
argument_list|>
name|replaced
init|=
name|reader
operator|.
name|lines
argument_list|()
operator|.
name|parallel
argument_list|()
operator|.
name|map
argument_list|(
name|str
lambda|->
block|{
name|String
index|[]
name|splits
init|=
name|str
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|splits
index|[
literal|0
index|]
decl_stmt|;
name|String
name|colName
init|=
name|splits
index|[
literal|1
index|]
decl_stmt|;
name|Integer
name|tblID
init|=
name|tableNameToID
operator|.
name|get
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"default@"
operator|+
name|tblName
operator|+
literal|"@"
operator|+
name|colName
operator|+
literal|"@"
operator|+
name|data
operator|.
name|get
argument_list|(
name|tblName
argument_list|)
operator|.
name|get
argument_list|(
name|colName
argument_list|)
operator|+
literal|"@"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|splits
index|[
name|i
index|]
operator|+
literal|"@"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|append
argument_list|(
name|tblID
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|tmpFileLoc1
argument_list|,
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
name|replaced
operator|::
name|iterator
argument_list|)
expr_stmt|;
name|replaced
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|BufferedReader
name|reader2
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|BZip2CompressorInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|tabParamsCsv
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|colStats
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Stream
argument_list|<
name|String
argument_list|>
name|replacedStream
init|=
name|reader2
operator|.
name|lines
argument_list|()
operator|.
name|parallel
argument_list|()
operator|.
name|map
argument_list|(
name|str
lambda|->
block|{
name|String
index|[]
name|splits
init|=
name|str
operator|.
name|split
argument_list|(
literal|"_@"
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|splits
index|[
literal|0
index|]
decl_stmt|;
name|Integer
name|tblId
init|=
name|tableNameToID
operator|.
name|get
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cols
init|=
name|data
operator|.
name|get
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{\"COLUMN_STATS\":{"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|cols
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
operator|+
name|colName
operator|+
literal|"\":\"true\","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"},\"BASIC_STATS\":\"true\"}"
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|put
argument_list|(
name|tblId
operator|.
name|toString
argument_list|()
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tblId
operator|.
name|toString
argument_list|()
operator|+
literal|"@"
operator|+
name|splits
index|[
literal|1
index|]
return|;
block|}
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|tmpFileLoc2
argument_list|,
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
name|replacedStream
operator|::
name|iterator
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|tmpFileLoc2
argument_list|,
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
name|colStats
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|map
lambda|->
name|map
operator|.
name|getKey
argument_list|()
operator|+
literal|"@COLUMN_STATS_ACCURATE@"
operator|+
name|map
operator|.
name|getValue
argument_list|()
argument_list|)
operator|::
name|iterator
argument_list|,
name|StandardOpenOption
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|replacedStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Load the column stats and table params with 30 TB scale
name|String
name|importStatement1
init|=
literal|"CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE(null, '"
operator|+
literal|"TAB_COL_STATS"
operator|+
literal|"', '"
operator|+
name|tmpFileLoc1
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"', '@', null, 'UTF-8', 1)"
decl_stmt|;
name|String
name|importStatement2
init|=
literal|"CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE(null, '"
operator|+
literal|"TABLE_PARAMS"
operator|+
literal|"', '"
operator|+
name|tmpFileLoc2
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"', '@', null, 'UTF-8', 1)"
decl_stmt|;
try|try
block|{
name|PreparedStatement
name|psImport1
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|importStatement1
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to execute : "
operator|+
name|importStatement1
argument_list|)
expr_stmt|;
block|}
name|statements
operator|.
name|add
argument_list|(
name|psImport1
argument_list|)
expr_stmt|;
name|psImport1
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"successfully completed "
operator|+
name|importStatement1
argument_list|)
expr_stmt|;
block|}
name|PreparedStatement
name|psImport2
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|importStatement2
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to execute : "
operator|+
name|importStatement2
argument_list|)
expr_stmt|;
block|}
name|statements
operator|.
name|add
argument_list|(
name|psImport2
argument_list|)
expr_stmt|;
name|psImport2
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"successfully completed "
operator|+
name|importStatement2
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got SQL Exception  "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got File not found Exception "
operator|+
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got IOException "
operator|+
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got SQLException "
operator|+
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Statements and PreparedStatements
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|statements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// PreparedStatement extend Statement
name|Statement
name|st
init|=
name|statements
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
name|st
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqle
parameter_list|)
block|{         }
block|}
comment|//Connection
try|try
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqle
parameter_list|)
block|{       }
block|}
block|}
end_function

unit|}
end_unit

