begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|control
operator|.
name|AbstractCliConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|CachingPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|SessionStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QTestMiniClusters
operator|.
name|FsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|cache
operator|.
name|results
operator|.
name|QueryResultsCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|dataset
operator|.
name|QTestDatasetHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveMaterializedViewsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|InvalidTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|events
operator|.
name|NotificationEventPoll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|StatsSources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|HiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|qoption
operator|.
name|QTestAuthorizerHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|qoption
operator|.
name|QTestOptionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|qoption
operator|.
name|QTestReplaceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|qoption
operator|.
name|QTestSysDbHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|scheduled
operator|.
name|QTestScheduledQueryCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|scheduled
operator|.
name|QTestScheduledQueryServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ProcessUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_comment
comment|/**  * QTestUtil.  */
end_comment

begin_class
specifier|public
class|class
name|QTestUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"QTestUtil"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QTEST_LEAVE_FILES
init|=
literal|"QTEST_LEAVE_FILES"
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|testOnlyCommands
init|=
operator|new
name|String
index|[]
block|{
literal|"crypto"
block|,
literal|"erasure"
block|}
decl_stmt|;
specifier|public
specifier|static
name|String
name|DEBUG_HINT
init|=
literal|"\nSee ./ql/target/tmp/log/hive.log or ./itests/qtest/target/tmp/log/hive.log, "
operator|+
literal|"or check ./ql/target/surefire-reports or ./itests/qtest/target/surefire-reports/ for specific test cases logs."
decl_stmt|;
specifier|private
name|String
name|testWarehouse
decl_stmt|;
annotation|@
name|Deprecated
specifier|private
specifier|final
name|String
name|testFiles
decl_stmt|;
specifier|private
specifier|final
name|String
name|outDir
decl_stmt|;
specifier|protected
specifier|final
name|String
name|logDir
decl_stmt|;
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|qMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|srcUDFs
decl_stmt|;
specifier|private
specifier|final
name|FsType
name|fsType
decl_stmt|;
specifier|private
name|ParseDriver
name|pd
decl_stmt|;
specifier|protected
name|Hive
name|db
decl_stmt|;
specifier|protected
name|HiveConf
name|conf
decl_stmt|;
specifier|protected
name|HiveConf
name|savedConf
decl_stmt|;
specifier|private
name|BaseSemanticAnalyzer
name|sem
decl_stmt|;
specifier|private
name|CliDriver
name|cliDriver
decl_stmt|;
specifier|private
specifier|final
name|QTestMiniClusters
name|miniClusters
init|=
operator|new
name|QTestMiniClusters
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|QOutProcessor
name|qOutProcessor
decl_stmt|;
specifier|private
specifier|static
name|QTestResultProcessor
name|qTestResultProcessor
init|=
operator|new
name|QTestResultProcessor
argument_list|()
decl_stmt|;
specifier|protected
name|QTestDatasetHandler
name|datasetHandler
decl_stmt|;
specifier|protected
name|QTestReplaceHandler
name|replaceHandler
decl_stmt|;
specifier|private
specifier|final
name|String
name|initScript
decl_stmt|;
specifier|private
specifier|final
name|String
name|cleanupScript
decl_stmt|;
name|QTestOptionDispatcher
name|dispatcher
init|=
operator|new
name|QTestOptionDispatcher
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isSessionStateStarted
init|=
literal|false
decl_stmt|;
specifier|public
name|CliDriver
name|getCliDriver
parameter_list|()
block|{
if|if
condition|(
name|cliDriver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no clidriver"
argument_list|)
throw|;
block|}
return|return
name|cliDriver
return|;
block|}
comment|/**    * Returns the default UDF names which should not be removed when resetting the test database    *    * @return The list of the UDF names not to remove    */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getSrcUDFs
parameter_list|()
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|srcUDFs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// FIXME: moved default value to here...for now
comment|// i think this features is never really used from the command line
name|String
name|defaultTestSrcUDFs
init|=
literal|"qtest_get_java_boolean"
decl_stmt|;
for|for
control|(
name|String
name|srcUDF
range|:
name|QTestSystemProperties
operator|.
name|getSourceUdfs
argument_list|(
name|defaultTestSrcUDFs
argument_list|)
control|)
block|{
name|srcUDF
operator|=
name|srcUDF
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|srcUDF
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|srcUDFs
operator|.
name|add
argument_list|(
name|srcUDF
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|srcUDFs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Source UDFs cannot be empty"
argument_list|)
throw|;
block|}
return|return
name|srcUDFs
return|;
block|}
specifier|public
name|HiveConf
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|void
name|initConf
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|QTestSystemProperties
operator|.
name|isVectorizationEnabled
argument_list|()
condition|)
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Plug verifying metastore in for testing DirectSQL.
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_RAW_STORE_IMPL
argument_list|,
literal|"org.apache.hadoop.hive.metastore.VerifyingObjectStore"
argument_list|)
expr_stmt|;
name|miniClusters
operator|.
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|QTestUtil
parameter_list|(
name|QTestArguments
name|testArgs
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting up QTestUtil with outDir={}, logDir={}, clusterType={}, confDir={},"
operator|+
literal|" initScript={}, cleanupScript={}, withLlapIo={}, fsType={}"
argument_list|,
name|testArgs
operator|.
name|getOutDir
argument_list|()
argument_list|,
name|testArgs
operator|.
name|getLogDir
argument_list|()
argument_list|,
name|testArgs
operator|.
name|getClusterType
argument_list|()
argument_list|,
name|testArgs
operator|.
name|getConfDir
argument_list|()
argument_list|,
name|testArgs
operator|.
name|getInitScript
argument_list|()
argument_list|,
name|testArgs
operator|.
name|getCleanupScript
argument_list|()
argument_list|,
name|testArgs
operator|.
name|isWithLlapIo
argument_list|()
argument_list|,
name|testArgs
operator|.
name|getFsType
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|testArgs
operator|.
name|getClusterType
argument_list|()
argument_list|,
literal|"ClusterType cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fsType
operator|=
name|testArgs
operator|.
name|getFsType
argument_list|()
expr_stmt|;
name|this
operator|.
name|outDir
operator|=
name|testArgs
operator|.
name|getOutDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|logDir
operator|=
name|testArgs
operator|.
name|getLogDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|srcUDFs
operator|=
name|getSrcUDFs
argument_list|()
expr_stmt|;
name|this
operator|.
name|replaceHandler
operator|=
operator|new
name|QTestReplaceHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|qOutProcessor
operator|=
operator|new
name|QOutProcessor
argument_list|(
name|fsType
argument_list|,
name|replaceHandler
argument_list|)
expr_stmt|;
comment|// HIVE-14443 move this fall-back logic to CliConfigs
if|if
condition|(
name|testArgs
operator|.
name|getConfDir
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|testArgs
operator|.
name|getConfDir
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HiveConf
operator|.
name|setHiveSiteLocation
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|testArgs
operator|.
name|getConfDir
argument_list|()
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/hive-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setHiveSiteLocation
argument_list|(
name|HiveConf
operator|.
name|getHiveSiteLocation
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting hive-site: "
operator|+
name|HiveConf
operator|.
name|getHiveSiteLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|IDriver
operator|.
name|class
argument_list|)
expr_stmt|;
name|setMetaStoreProperties
argument_list|()
expr_stmt|;
name|this
operator|.
name|miniClusters
operator|.
name|setup
argument_list|(
name|testArgs
argument_list|,
name|conf
argument_list|,
name|getScriptsDir
argument_list|()
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|initConf
argument_list|()
expr_stmt|;
name|datasetHandler
operator|=
operator|new
name|QTestDatasetHandler
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testFiles
operator|=
name|datasetHandler
operator|.
name|getDataDir
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"test.data.dir"
argument_list|,
name|datasetHandler
operator|.
name|getDataDir
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_RESULTS_CACHE_DIRECTORY
argument_list|,
literal|"/tmp/hive/_resultscache_"
operator|+
name|ProcessUtils
operator|.
name|getPid
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
literal|"dataset"
argument_list|,
name|datasetHandler
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
literal|"replace"
argument_list|,
name|replaceHandler
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
literal|"sysdb"
argument_list|,
operator|new
name|QTestSysDbHandler
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
literal|"scheduledqueryservice"
argument_list|,
operator|new
name|QTestScheduledQueryServiceProvider
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
literal|"scheduledquerycleaner"
argument_list|,
operator|new
name|QTestScheduledQueryCleaner
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
literal|"authorizer"
argument_list|,
operator|new
name|QTestAuthorizerHandler
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|scriptsDir
init|=
name|getScriptsDir
argument_list|()
decl_stmt|;
name|this
operator|.
name|initScript
operator|=
name|scriptsDir
operator|+
name|File
operator|.
name|separator
operator|+
name|testArgs
operator|.
name|getInitScript
argument_list|()
expr_stmt|;
name|this
operator|.
name|cleanupScript
operator|=
name|scriptsDir
operator|+
name|File
operator|.
name|separator
operator|+
name|testArgs
operator|.
name|getCleanupScript
argument_list|()
expr_stmt|;
name|savedConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setMetaStoreProperties
parameter_list|()
block|{
name|setMetastoreConfPropertyFromSystemProperty
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECT_URL_KEY
argument_list|)
expr_stmt|;
name|setMetastoreConfPropertyFromSystemProperty
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECTION_DRIVER
argument_list|)
expr_stmt|;
name|setMetastoreConfPropertyFromSystemProperty
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECTION_USER_NAME
argument_list|)
expr_stmt|;
name|setMetastoreConfPropertyFromSystemProperty
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PWD
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setMetastoreConfPropertyFromSystemProperty
parameter_list|(
name|MetastoreConf
operator|.
name|ConfVars
name|var
parameter_list|)
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
name|var
operator|.
name|getVarname
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|var
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|var
operator|.
name|getVarname
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getScriptsDir
parameter_list|()
block|{
comment|// Use the current directory if it is not specified
name|String
name|scriptsDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.scripts"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptsDir
operator|==
literal|null
condition|)
block|{
name|scriptsDir
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/data/scripts"
expr_stmt|;
block|}
return|return
name|scriptsDir
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|QTEST_LEAVE_FILES
argument_list|)
operator|==
literal|null
condition|)
block|{
name|cleanUp
argument_list|()
expr_stmt|;
block|}
name|miniClusters
operator|.
name|shutDown
argument_list|()
expr_stmt|;
name|Hive
operator|.
name|closeCurrent
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|queryFile
parameter_list|)
throws|throws
name|IOException
block|{
name|addFile
argument_list|(
operator|new
name|File
argument_list|(
name|queryFile
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|File
name|qf
parameter_list|,
name|boolean
name|partial
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|query
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|qf
argument_list|)
decl_stmt|;
name|qMap
operator|.
name|put
argument_list|(
name|qf
operator|.
name|getName
argument_list|()
argument_list|,
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|partial
condition|)
block|{
return|return;
block|}
name|qTestResultProcessor
operator|.
name|add
argument_list|(
name|qf
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|qOutProcessor
operator|.
name|initMasks
argument_list|(
name|qf
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clear out any side effects of running tests    */
specifier|public
name|void
name|clearPostTestEffects
parameter_list|()
throws|throws
name|Exception
block|{
name|dispatcher
operator|.
name|afterTest
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|miniClusters
operator|.
name|postTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearKeysCreatedInTests
parameter_list|()
block|{
if|if
condition|(
name|miniClusters
operator|.
name|getHdfsEncryptionShim
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
for|for
control|(
name|String
name|keyAlias
range|:
name|miniClusters
operator|.
name|getHdfsEncryptionShim
argument_list|()
operator|.
name|getKeys
argument_list|()
control|)
block|{
name|miniClusters
operator|.
name|getHdfsEncryptionShim
argument_list|()
operator|.
name|deleteKey
argument_list|(
name|keyAlias
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to clean the keys created in test due to the error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clearUDFsCreatedDuringTests
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|QTEST_LEAVE_FILES
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// Delete functions created by the tests
comment|// It is enough to remove functions from the default database, other databases are dropped
for|for
control|(
name|String
name|udfName
range|:
name|db
operator|.
name|getFunctions
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|".*"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|srcUDFs
operator|.
name|contains
argument_list|(
name|udfName
argument_list|)
condition|)
block|{
name|db
operator|.
name|dropFunction
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|udfName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Clear out any side effects of running tests    */
specifier|public
name|void
name|clearTablesCreatedDuringTests
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|QTEST_LEAVE_FILES
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"hive.metastore.filter.hook"
argument_list|,
literal|"org.apache.hadoop.hive.metastore.DefaultMetaStoreFilterHookImpl"
argument_list|)
expr_stmt|;
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// First delete any MVs to avoid race conditions
for|for
control|(
name|String
name|dbName
range|:
name|db
operator|.
name|getAllDatabases
argument_list|()
control|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setCurrentDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|db
operator|.
name|getAllTables
argument_list|()
control|)
block|{
name|Table
name|tblObj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tblObj
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTableException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to drop table "
operator|+
name|e
operator|.
name|getTableName
argument_list|()
operator|+
literal|". But it does not exist."
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// only remove MVs first
if|if
condition|(
operator|!
name|tblObj
operator|.
name|isMaterializedView
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|db
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|fsType
operator|==
name|FsType
operator|.
name|ENCRYPTED_HDFS
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Delete any tables other than the source tables
comment|// and any databases other than the default database.
for|for
control|(
name|String
name|dbName
range|:
name|db
operator|.
name|getAllDatabases
argument_list|()
control|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setCurrentDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|db
operator|.
name|getAllTables
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|DEFAULT_DATABASE_NAME
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
operator|||
operator|!
name|QTestDatasetHandler
operator|.
name|isSourceTable
argument_list|(
name|tblName
argument_list|)
condition|)
block|{
try|try
block|{
name|db
operator|.
name|getTable
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTableException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to drop table "
operator|+
name|e
operator|.
name|getTableName
argument_list|()
operator|+
literal|". But it does not exist."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|db
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|miniClusters
operator|.
name|fsNeedsPurge
argument_list|(
name|fsType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|DEFAULT_DATABASE_NAME
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
comment|// Drop cascade, functions dropped by cascade
name|db
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// delete remaining directories for external tables (can affect stats for following tests)
try|try
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|testWarehouse
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSystem
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSystem
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
for|for
control|(
name|FileStatus
name|status
range|:
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
control|)
block|{
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|QTestDatasetHandler
operator|.
name|isSourceTable
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|fileSystem
operator|.
name|delete
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ignore.. provides invalid url sometimes intentionally
block|}
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setCurrentDatabase
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
name|db
operator|.
name|getAllRoleNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|roleName
range|:
name|roleNames
control|)
block|{
if|if
condition|(
operator|!
literal|"PUBLIC"
operator|.
name|equalsIgnoreCase
argument_list|(
name|roleName
argument_list|)
operator|&&
operator|!
literal|"ADMIN"
operator|.
name|equalsIgnoreCase
argument_list|(
name|roleName
argument_list|)
condition|)
block|{
name|db
operator|.
name|dropRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|newSession
parameter_list|()
throws|throws
name|Exception
block|{
name|newSession
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|newSession
parameter_list|(
name|boolean
name|canReuseSession
parameter_list|)
throws|throws
name|Exception
block|{
comment|// allocate and initialize a new conf since a test can
comment|// modify conf by using 'set' commands
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|savedConf
argument_list|)
expr_stmt|;
name|initConf
argument_list|()
expr_stmt|;
name|initConfFromSetup
argument_list|()
expr_stmt|;
comment|// renew the metastore since the cluster type is unencrypted
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// propagate new conf to meta store
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.DummyAuthenticator"
argument_list|)
expr_stmt|;
name|CliSessionState
name|ss
init|=
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ss
operator|.
name|in
operator|=
name|System
operator|.
name|in
expr_stmt|;
name|SessionState
name|oldSs
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|miniClusters
operator|.
name|restartSessions
argument_list|(
name|canReuseSession
argument_list|,
name|ss
argument_list|,
name|oldSs
argument_list|)
expr_stmt|;
name|closeSession
argument_list|(
name|oldSs
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|cliDriver
operator|=
operator|new
name|CliDriver
argument_list|()
expr_stmt|;
name|File
name|outf
init|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
literal|"initialize.log"
argument_list|)
decl_stmt|;
name|setSessionOutputs
argument_list|(
literal|"that_shouldnt_happen_there"
argument_list|,
name|ss
argument_list|,
name|outf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clear out any side effects of running tests    */
specifier|public
name|void
name|clearTestSideEffects
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|QTEST_LEAVE_FILES
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// the test might have configured security/etc; open a new session to get rid of that
name|newSession
argument_list|()
expr_stmt|;
comment|// Remove any cached results from the previous test.
name|Utilities
operator|.
name|clearWorkMap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NotificationEventPoll
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|QueryResultsCache
operator|.
name|cleanupInstance
argument_list|()
expr_stmt|;
name|clearTablesCreatedDuringTests
argument_list|()
expr_stmt|;
name|clearUDFsCreatedDuringTests
argument_list|()
expr_stmt|;
name|clearKeysCreatedInTests
argument_list|()
expr_stmt|;
name|StatsSources
operator|.
name|clearGlobalStats
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|afterTest
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initConfFromSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|miniClusters
operator|.
name|preTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanUp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|cleanUp
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|canReuseSession
init|=
operator|(
name|fileName
operator|==
literal|null
operator|)
operator|||
operator|!
name|qTestResultProcessor
operator|.
name|shouldNotReuseSession
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isSessionStateStarted
condition|)
block|{
name|startSessionState
argument_list|(
name|canReuseSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|QTEST_LEAVE_FILES
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hive.test.shutdown.phase"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|clearKeysCreatedInTests
argument_list|()
expr_stmt|;
name|String
name|metastoreDb
init|=
name|QTestSystemProperties
operator|.
name|getMetaStoreDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|metastoreDb
operator|==
literal|null
operator|||
literal|"derby"
operator|.
name|equalsIgnoreCase
argument_list|(
name|metastoreDb
argument_list|)
condition|)
block|{
comment|// otherwise, the docker container is already destroyed by this time
name|cleanupFromFile
argument_list|()
expr_stmt|;
block|}
comment|// delete any contents in the warehouse dir
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|testWarehouse
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|FileStatus
index|[]
name|ls
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|ls
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|i
operator|<
name|ls
operator|.
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|ls
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Best effort
block|}
comment|// TODO: Clean up all the other paths that are created.
name|FunctionRegistry
operator|.
name|unregisterTemporaryUDF
argument_list|(
literal|"test_udaf"
argument_list|)
expr_stmt|;
name|FunctionRegistry
operator|.
name|unregisterTemporaryUDF
argument_list|(
literal|"test_error"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|cleanupFromFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|cleanupFile
init|=
operator|new
name|File
argument_list|(
name|cleanupScript
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleanupFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|String
name|cleanupCommands
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|cleanupFile
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleanup ("
operator|+
name|cleanupScript
operator|+
literal|"):\n"
operator|+
name|cleanupCommands
argument_list|)
expr_stmt|;
try|try
block|{
name|getCliDriver
argument_list|()
operator|.
name|processLine
argument_list|(
name|cleanupCommands
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed during cleanup processLine with code={}. Ignoring"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO Convert this to an Assert.fail once HIVE-14682 is fixed
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No cleanup script detected. Skipping."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|createSources
parameter_list|()
throws|throws
name|Exception
block|{
name|createSources
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createSources
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|canReuseSession
init|=
operator|(
name|fileName
operator|==
literal|null
operator|)
operator|||
operator|!
name|qTestResultProcessor
operator|.
name|shouldNotReuseSession
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isSessionStateStarted
condition|)
block|{
name|startSessionState
argument_list|(
name|canReuseSession
argument_list|)
expr_stmt|;
block|}
name|getCliDriver
argument_list|()
operator|.
name|processLine
argument_list|(
literal|"set test.data.dir="
operator|+
name|testFiles
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hive.test.init.phase"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|initFromScript
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hive.test.init.phase"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initFromScript
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|scriptFile
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|initScript
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scriptFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No init script detected. Skipping"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|initCommands
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial setup ("
operator|+
name|initScript
operator|+
literal|"):\n"
operator|+
name|initCommands
argument_list|)
expr_stmt|;
try|try
block|{
name|cliDriver
operator|.
name|processLine
argument_list|(
name|initCommands
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Result from cliDrriver.processLine in createSources=0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failed during createSources processLine with code="
operator|+
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|postInit
parameter_list|()
throws|throws
name|Exception
block|{
name|miniClusters
operator|.
name|postInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|sem
operator|=
operator|new
name|SemanticAnalyzer
argument_list|(
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|testWarehouse
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
expr_stmt|;
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|pd
operator|=
operator|new
name|ParseDriver
argument_list|()
expr_stmt|;
name|initMaterializedViews
argument_list|()
expr_stmt|;
comment|// Create views registry
name|firstStartSessionState
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initMaterializedViews
parameter_list|()
block|{
name|String
name|registryImpl
init|=
name|db
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"hive.server2.materializedviews.registry.impl"
argument_list|)
decl_stmt|;
name|db
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"hive.server2.materializedviews.registry.impl"
argument_list|,
literal|"DUMMY"
argument_list|)
expr_stmt|;
name|HiveMaterializedViewsRegistry
operator|.
name|get
argument_list|()
operator|.
name|init
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"hive.server2.materializedviews.registry.impl"
argument_list|,
name|registryImpl
argument_list|)
expr_stmt|;
block|}
comment|//FIXME: check why mr is needed for starting a session state from conf
specifier|private
name|void
name|firstStartSessionState
parameter_list|()
block|{
name|String
name|execEngine
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hive.execution.engine"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.execution.engine"
argument_list|,
literal|"mr"
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.execution.engine"
argument_list|,
name|execEngine
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
name|cleanUp
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|createSources
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|cliDriver
operator|.
name|processCmd
argument_list|(
literal|"set hive.cli.print.header=true;"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|cliInit
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|process
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|beforeTest
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|qTestResultProcessor
operator|.
name|shouldNotReuseSession
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|newSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|CliSessionState
name|ss
init|=
operator|(
name|CliSessionState
operator|)
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|outFileExtension
init|=
name|getOutFileExtension
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|String
name|stdoutName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outDir
operator|!=
literal|null
condition|)
block|{
comment|// TODO: why is this needed?
name|File
name|qf
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|stdoutName
operator|=
name|qf
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
name|outFileExtension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stdoutName
operator|=
name|fileName
operator|+
name|outFileExtension
expr_stmt|;
block|}
name|File
name|outf
init|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|stdoutName
argument_list|)
decl_stmt|;
name|setSessionOutputs
argument_list|(
name|fileName
argument_list|,
name|ss
argument_list|,
name|outf
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileName
operator|.
name|equals
argument_list|(
literal|"init_file.q"
argument_list|)
condition|)
block|{
name|ss
operator|.
name|initFiles
operator|.
name|add
argument_list|(
name|AbstractCliConfig
operator|.
name|HIVE_ROOT
operator|+
literal|"/data/scripts/test_init_file.sql"
argument_list|)
expr_stmt|;
block|}
name|cliDriver
operator|.
name|processInitFiles
argument_list|(
name|ss
argument_list|)
expr_stmt|;
return|return
name|outf
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
specifier|private
name|void
name|setSessionOutputs
parameter_list|(
name|String
name|fileName
parameter_list|,
name|CliSessionState
name|ss
parameter_list|,
name|File
name|outf
parameter_list|)
throws|throws
name|Exception
block|{
name|OutputStream
name|fo
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outf
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|out
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ss
operator|.
name|err
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|qTestResultProcessor
operator|.
name|setOutputs
argument_list|(
name|ss
argument_list|,
name|fo
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|ss
operator|.
name|err
operator|=
operator|new
name|CachingPrintStream
argument_list|(
name|fo
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setIsSilent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CliSessionState
name|startSessionState
parameter_list|(
name|boolean
name|canReuseSession
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.DummyAuthenticator"
argument_list|)
expr_stmt|;
comment|//FIXME: check why mr is needed for starting a session state from conf
name|String
name|execEngine
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hive.execution.engine"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.execution.engine"
argument_list|,
literal|"mr"
argument_list|)
expr_stmt|;
name|CliSessionState
name|ss
init|=
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ss
operator|.
name|in
operator|=
name|System
operator|.
name|in
expr_stmt|;
name|ss
operator|.
name|out
operator|=
operator|new
name|SessionStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|ss
operator|.
name|err
operator|=
operator|new
name|SessionStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|SessionState
name|oldSs
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|miniClusters
operator|.
name|restartSessions
argument_list|(
name|canReuseSession
argument_list|,
name|ss
argument_list|,
name|oldSs
argument_list|)
expr_stmt|;
name|closeSession
argument_list|(
name|oldSs
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|isSessionStateStarted
operator|=
literal|true
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.execution.engine"
argument_list|,
name|execEngine
argument_list|)
expr_stmt|;
return|return
name|ss
return|;
block|}
specifier|private
name|void
name|closeSession
parameter_list|(
name|SessionState
name|oldSs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|oldSs
operator|!=
literal|null
operator|&&
name|oldSs
operator|.
name|out
operator|!=
literal|null
operator|&&
name|oldSs
operator|.
name|out
operator|!=
name|System
operator|.
name|out
condition|)
block|{
name|oldSs
operator|.
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oldSs
operator|!=
literal|null
condition|)
block|{
name|oldSs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|executeAdhocCommand
parameter_list|(
name|String
name|q
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
if|if
condition|(
operator|!
name|q
operator|.
name|contains
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|String
name|q1
init|=
name|q
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
index|[
literal|0
index|]
operator|+
literal|";"
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing "
operator|+
name|q1
argument_list|)
expr_stmt|;
name|cliDriver
operator|.
name|processLine
argument_list|(
name|q1
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
name|CommandProcessorResponse
name|executeClient
parameter_list|(
name|String
name|tname1
parameter_list|,
name|String
name|tname2
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|String
name|commands
init|=
name|getCommand
argument_list|(
name|tname1
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|+
name|getCommand
argument_list|(
name|tname2
argument_list|)
decl_stmt|;
return|return
name|executeClientInternal
argument_list|(
name|commands
argument_list|)
return|;
block|}
specifier|public
name|CommandProcessorResponse
name|executeClient
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
return|return
name|executeClientInternal
argument_list|(
name|getCommand
argument_list|(
name|fileName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|CommandProcessorResponse
name|executeClientInternal
parameter_list|(
name|String
name|commands
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cmds
init|=
name|CliDriver
operator|.
name|splitSemiColon
argument_list|(
name|commands
argument_list|)
decl_stmt|;
name|CommandProcessorResponse
name|response
init|=
operator|new
name|CommandProcessorResponse
argument_list|()
decl_stmt|;
name|StringBuilder
name|command
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|QTestSyntaxUtil
name|qtsu
init|=
operator|new
name|QTestSyntaxUtil
argument_list|(
name|this
argument_list|,
name|conf
argument_list|,
name|pd
argument_list|)
decl_stmt|;
name|qtsu
operator|.
name|checkQFileSyntax
argument_list|(
name|cmds
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|oneCmd
range|:
name|cmds
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|oneCmd
argument_list|,
literal|"\\"
argument_list|)
condition|)
block|{
name|command
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|chop
argument_list|(
name|oneCmd
argument_list|)
operator|+
literal|"\\;"
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|isHiveCommand
argument_list|(
name|oneCmd
argument_list|)
condition|)
block|{
name|command
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|append
argument_list|(
name|oneCmd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|command
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|strCommand
init|=
name|command
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isCommandUsedForTesting
argument_list|(
name|strCommand
argument_list|)
condition|)
block|{
name|response
operator|=
name|executeTestCommand
argument_list|(
name|strCommand
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|=
name|cliDriver
operator|.
name|processLine
argument_list|(
name|strCommand
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreErrors
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|command
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setLastCommand
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// reset
block|}
return|return
name|response
return|;
block|}
comment|/**    * This allows a .q file to continue executing after a statement runs into an error which is convenient    * if you want to use another hive cmd after the failure to sanity check the state of the system.    */
specifier|private
name|boolean
name|ignoreErrors
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|CLIIGNOREERRORS
argument_list|)
return|;
block|}
name|boolean
name|isHiveCommand
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|String
index|[]
name|cmd
init|=
name|command
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
if|if
condition|(
name|HiveCommand
operator|.
name|find
argument_list|(
name|cmd
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|HiveCommand
operator|.
name|find
argument_list|(
name|cmd
argument_list|,
name|HiveCommand
operator|.
name|ONLY_FOR_TESTING
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|CommandProcessorResponse
name|executeTestCommand
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|String
name|commandName
init|=
name|command
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|String
name|commandArgs
init|=
name|command
operator|.
name|trim
argument_list|()
operator|.
name|substring
argument_list|(
name|commandName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|commandArgs
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
name|commandArgs
operator|=
name|StringUtils
operator|.
name|chop
argument_list|(
name|commandArgs
argument_list|)
expr_stmt|;
block|}
comment|//replace ${hiveconf:hive.metastore.warehouse.dir} with actual dir if existed.
comment|//we only want the absolute path, so remove the header, such as hdfs://localhost:57145
name|String
name|wareHouseDir
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"^[a-zA-Z]+://.*?:\\d+"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|commandArgs
operator|=
name|commandArgs
operator|.
name|replaceAll
argument_list|(
literal|"\\$\\{hiveconf:hive\\.metastore\\.warehouse\\.dir\\}"
argument_list|,
name|wareHouseDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setLastCommand
argument_list|(
name|commandName
operator|+
literal|" "
operator|+
name|commandArgs
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|enableTestOnlyCmd
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|CommandProcessor
name|proc
init|=
name|getTestCommand
argument_list|(
name|commandName
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|CommandProcessorResponse
name|response
init|=
name|proc
operator|.
name|run
argument_list|(
name|commandArgs
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|e
parameter_list|)
block|{
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|?
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not get CommandProcessor for command: "
operator|+
name|commandName
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not execute test command"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|CommandProcessor
name|getTestCommand
parameter_list|(
specifier|final
name|String
name|commandName
parameter_list|)
throws|throws
name|SQLException
block|{
name|HiveCommand
name|testCommand
init|=
name|HiveCommand
operator|.
name|find
argument_list|(
operator|new
name|String
index|[]
block|{
name|commandName
block|}
argument_list|,
name|HiveCommand
operator|.
name|ONLY_FOR_TESTING
argument_list|)
decl_stmt|;
if|if
condition|(
name|testCommand
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|CommandProcessorFactory
operator|.
name|getForHiveCommandInternal
argument_list|(
operator|new
name|String
index|[]
block|{
name|commandName
block|}
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|testCommand
operator|.
name|isOnlyForTesting
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|enableTestOnlyCmd
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|StringBuilder
name|securityCMDs
init|=
operator|new
name|StringBuilder
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SECURITY_COMMAND_WHITELIST
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|testOnlyCommands
control|)
block|{
name|securityCMDs
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|securityCMDs
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SECURITY_COMMAND_WHITELIST
operator|.
name|toString
argument_list|()
argument_list|,
name|securityCMDs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isCommandUsedForTesting
parameter_list|(
specifier|final
name|String
name|command
parameter_list|)
block|{
name|String
name|commandName
init|=
name|command
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|HiveCommand
name|testCommand
init|=
name|HiveCommand
operator|.
name|find
argument_list|(
operator|new
name|String
index|[]
block|{
name|commandName
block|}
argument_list|,
name|HiveCommand
operator|.
name|ONLY_FOR_TESTING
argument_list|)
decl_stmt|;
return|return
name|testCommand
operator|!=
literal|null
return|;
block|}
specifier|private
name|String
name|getCommand
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|String
name|commands
init|=
name|qMap
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|StringBuilder
name|newCommands
init|=
operator|new
name|StringBuilder
argument_list|(
name|commands
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|lastMatchEnd
init|=
literal|0
decl_stmt|;
name|Matcher
name|commentMatcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^--.*$"
argument_list|,
name|Pattern
operator|.
name|MULTILINE
argument_list|)
operator|.
name|matcher
argument_list|(
name|commands
argument_list|)
decl_stmt|;
comment|// remove the comments
while|while
condition|(
name|commentMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|newCommands
operator|.
name|append
argument_list|(
name|commands
operator|.
name|substring
argument_list|(
name|lastMatchEnd
argument_list|,
name|commentMatcher
operator|.
name|start
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lastMatchEnd
operator|=
name|commentMatcher
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
name|newCommands
operator|.
name|append
argument_list|(
name|commands
operator|.
name|substring
argument_list|(
name|lastMatchEnd
argument_list|,
name|commands
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|commands
operator|=
name|newCommands
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|commands
return|;
block|}
specifier|private
name|String
name|getOutFileExtension
parameter_list|(
name|String
name|fname
parameter_list|)
block|{
return|return
literal|".out"
return|;
block|}
specifier|public
name|QTestProcessExecResult
name|checkNegativeResults
parameter_list|(
name|String
name|tname
parameter_list|,
name|Exception
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|outFileExtension
init|=
name|getOutFileExtension
argument_list|(
name|tname
argument_list|)
decl_stmt|;
name|File
name|qf
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
argument_list|)
decl_stmt|;
name|String
name|expf
init|=
name|outPath
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
name|outFileExtension
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|outf
init|=
literal|null
decl_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|outf
argument_list|,
name|qf
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
name|outFileExtension
argument_list|)
argument_list|)
expr_stmt|;
name|FileWriter
name|outfd
init|=
operator|new
name|FileWriter
argument_list|(
name|outf
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ParseException
condition|)
block|{
name|outfd
operator|.
name|write
argument_list|(
literal|"Parse Error: "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|SemanticException
condition|)
block|{
name|outfd
operator|.
name|write
argument_list|(
literal|"Semantic Exception: \n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outfd
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|outfd
operator|.
name|write
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|outfd
operator|.
name|close
argument_list|()
expr_stmt|;
name|QTestProcessExecResult
name|result
init|=
name|qTestResultProcessor
operator|.
name|executeDiffCommand
argument_list|(
name|outf
operator|.
name|getPath
argument_list|()
argument_list|,
name|expf
argument_list|,
literal|false
argument_list|,
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|QTestSystemProperties
operator|.
name|shouldOverwriteResults
argument_list|()
condition|)
block|{
name|qTestResultProcessor
operator|.
name|overwriteResults
argument_list|(
name|outf
operator|.
name|getPath
argument_list|()
argument_list|,
name|expf
argument_list|)
expr_stmt|;
return|return
name|QTestProcessExecResult
operator|.
name|createWithoutOutput
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|QTestProcessExecResult
name|checkNegativeResults
parameter_list|(
name|String
name|tname
parameter_list|,
name|Error
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|outFileExtension
init|=
name|getOutFileExtension
argument_list|(
name|tname
argument_list|)
decl_stmt|;
name|File
name|qf
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|tname
argument_list|)
decl_stmt|;
name|String
name|expf
init|=
name|outPath
argument_list|(
name|outDir
operator|.
name|toString
argument_list|()
argument_list|,
name|tname
operator|.
name|concat
argument_list|(
name|outFileExtension
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|outf
init|=
literal|null
decl_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|File
argument_list|(
name|outf
argument_list|,
name|qf
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
name|outFileExtension
argument_list|)
argument_list|)
expr_stmt|;
name|FileWriter
name|outfd
init|=
operator|new
name|FileWriter
argument_list|(
name|outf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|outfd
operator|.
name|write
argument_list|(
literal|"FAILED: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|outfd
operator|.
name|close
argument_list|()
expr_stmt|;
name|QTestProcessExecResult
name|result
init|=
name|qTestResultProcessor
operator|.
name|executeDiffCommand
argument_list|(
name|outf
operator|.
name|getPath
argument_list|()
argument_list|,
name|expf
argument_list|,
literal|false
argument_list|,
name|qf
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|QTestSystemProperties
operator|.
name|shouldOverwriteResults
argument_list|()
condition|)
block|{
name|qTestResultProcessor
operator|.
name|overwriteResults
argument_list|(
name|outf
operator|.
name|getPath
argument_list|()
argument_list|,
name|expf
argument_list|)
expr_stmt|;
return|return
name|QTestProcessExecResult
operator|.
name|createWithoutOutput
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Given the current configurations (e.g., hadoop version and execution mode), return    * the correct file name to compare with the current test run output.    *    * @param outDir   The directory where the reference log files are stored.    * @param testName The test file name (terminated by ".out").    * @return The file name appended with the configuration values if it exists.    */
specifier|public
name|String
name|outPath
parameter_list|(
name|String
name|outDir
parameter_list|,
name|String
name|testName
parameter_list|)
block|{
name|String
name|ret
init|=
operator|(
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|testName
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// List of configurations. Currently the list consists of hadoop version and execution mode only
name|List
argument_list|<
name|String
argument_list|>
name|configs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|configs
operator|.
name|add
argument_list|(
name|miniClusters
operator|.
name|getClusterType
argument_list|()
operator|.
name|getQOutFileExtensionPostfix
argument_list|()
argument_list|)
expr_stmt|;
name|Deque
argument_list|<
name|String
argument_list|>
name|stack
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|testName
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// example file names are input1.q.out_mr_0.17 or input2.q.out_0.17
for|for
control|(
name|String
name|s
range|:
name|configs
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|stack
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|fileName
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ret
operator|=
name|f
operator|.
name|getPath
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|QTestProcessExecResult
name|checkCliDriverResults
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|qMap
operator|.
name|containsKey
argument_list|(
name|tname
argument_list|)
operator|)
assert|;
name|String
name|outFileExtension
init|=
name|getOutFileExtension
argument_list|(
name|tname
argument_list|)
decl_stmt|;
name|String
name|outFileName
init|=
name|outPath
argument_list|(
name|outDir
argument_list|,
name|tname
operator|+
name|outFileExtension
argument_list|)
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|tname
operator|+
name|outFileExtension
argument_list|)
decl_stmt|;
name|qOutProcessor
operator|.
name|maskPatterns
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|,
name|tname
argument_list|)
expr_stmt|;
name|QTestProcessExecResult
name|exitVal
init|=
name|qTestResultProcessor
operator|.
name|executeDiffCommand
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|,
name|outFileName
argument_list|,
literal|false
argument_list|,
name|tname
argument_list|)
decl_stmt|;
if|if
condition|(
name|QTestSystemProperties
operator|.
name|shouldOverwriteResults
argument_list|()
condition|)
block|{
name|qTestResultProcessor
operator|.
name|overwriteResults
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|,
name|outFileName
argument_list|)
expr_stmt|;
return|return
name|QTestProcessExecResult
operator|.
name|createWithoutOutput
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|exitVal
return|;
block|}
specifier|public
name|QTestProcessExecResult
name|checkCompareCliDriverResults
parameter_list|(
name|String
name|tname
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|outputs
operator|.
name|size
argument_list|()
operator|>
literal|1
assert|;
name|qOutProcessor
operator|.
name|maskPatterns
argument_list|(
name|outputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tname
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|outputs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qOutProcessor
operator|.
name|maskPatterns
argument_list|(
name|outputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|tname
argument_list|)
expr_stmt|;
name|QTestProcessExecResult
name|result
init|=
name|qTestResultProcessor
operator|.
name|executeDiffCommand
argument_list|(
name|outputs
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|,
name|outputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|,
name|tname
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getReturnCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Files don't match: "
operator|+
name|outputs
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|+
literal|" and "
operator|+
name|outputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
return|return
name|QTestProcessExecResult
operator|.
name|createWithoutOutput
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|ASTNode
name|parseQuery
parameter_list|(
name|String
name|tname
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|pd
operator|.
name|parse
argument_list|(
name|qMap
operator|.
name|get
argument_list|(
name|tname
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|analyzeAST
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Do semantic analysis and plan generation
name|Context
name|ctx
init|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|ast
operator|.
name|getToken
argument_list|()
operator|==
literal|null
operator|)
operator|&&
operator|(
name|ast
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|ast
operator|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|sem
operator|.
name|getOutputs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sem
operator|.
name|getInputs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sem
operator|.
name|analyze
argument_list|(
name|ast
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|sem
operator|.
name|getRootTasks
argument_list|()
return|;
block|}
specifier|public
name|void
name|failed
parameter_list|(
name|int
name|ecode
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|debugHint
parameter_list|)
block|{
name|String
name|command
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|?
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getLastCommand
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|message
init|=
literal|"Client execution failed with error code = "
operator|+
name|ecode
operator|+
operator|(
name|command
operator|!=
literal|null
condition|?
literal|" running \""
operator|+
name|command
else|:
literal|""
operator|)
operator|+
literal|"\" fname="
operator|+
name|fname
operator|+
literal|" "
operator|+
operator|(
name|debugHint
operator|!=
literal|null
condition|?
name|debugHint
else|:
literal|""
operator|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// for negative tests, which is succeeded.. no need to print the query string
specifier|public
name|void
name|failed
parameter_list|(
name|String
name|fname
parameter_list|,
name|String
name|debugHint
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Client Execution was expected to fail, but succeeded with error code 0 for fname="
operator|+
name|fname
operator|+
operator|(
name|debugHint
operator|!=
literal|null
condition|?
operator|(
literal|" "
operator|+
name|debugHint
operator|)
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|failedDiff
parameter_list|(
name|int
name|ecode
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|debugHint
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Client Execution succeeded but contained differences "
operator|+
literal|"(error code = "
operator|+
name|ecode
operator|+
literal|") after executing "
operator|+
name|fname
operator|+
operator|(
name|debugHint
operator|!=
literal|null
condition|?
operator|(
literal|" "
operator|+
name|debugHint
operator|)
else|:
literal|""
operator|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|failedQuery
parameter_list|(
name|Throwable
name|e
parameter_list|,
name|int
name|ecode
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|debugHint
parameter_list|)
block|{
name|String
name|command
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|?
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getLastCommand
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Client execution failed with error code = %d %nrunning %s %nfname=%s%n%s%n %s"
argument_list|,
name|ecode
argument_list|,
name|command
operator|!=
literal|null
condition|?
name|command
else|:
literal|""
argument_list|,
name|fname
argument_list|,
name|debugHint
operator|!=
literal|null
condition|?
name|debugHint
else|:
literal|""
argument_list|,
name|e
operator|==
literal|null
condition|?
literal|""
else|:
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|failedWithException
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|debugHint
parameter_list|)
block|{
name|String
name|command
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|?
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getLastCommand
argument_list|()
else|:
literal|null
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed query: "
operator|+
name|fname
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception "
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
operator|+
literal|"\n"
operator|+
operator|(
name|command
operator|!=
literal|null
condition|?
literal|" running "
operator|+
name|command
else|:
literal|""
operator|)
operator|+
operator|(
name|debugHint
operator|!=
literal|null
condition|?
name|debugHint
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|QOutProcessor
name|getQOutProcessor
parameter_list|()
block|{
return|return
name|qOutProcessor
return|;
block|}
specifier|public
specifier|static
name|void
name|initEventNotificationPoll
parameter_list|()
throws|throws
name|Exception
block|{
name|NotificationEventPoll
operator|.
name|initialize
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

