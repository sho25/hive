begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|qoption
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QTestUtil
import|;
end_import

begin_comment
comment|/**  * Provides facilities to invoke {@link QTestOptionHandler}-s.  *   * Enables to dispatch option arguments to a specific option handler.  * The option invocation format is '--! qt:<optionName>:<optionArgs>   *   * Please refer to specific implementations of {@link QTestOptionHandler} for more detailed information about them.   */
end_comment

begin_class
specifier|public
class|class
name|QTestOptionDispatcher
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|QTestOptionHandler
argument_list|>
name|handlers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|QTestOptionHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|register
parameter_list|(
name|String
name|prefix
parameter_list|,
name|QTestOptionHandler
name|datasetHandler
parameter_list|)
block|{
if|if
condition|(
name|handlers
operator|.
name|containsKey
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
name|handlers
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|datasetHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|File
name|file
parameter_list|)
block|{
synchronized|synchronized
init|(
name|QTestUtil
operator|.
name|class
init|)
block|{
name|parse
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|" *--! ?qt:([a-z]+):?(.*)"
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
init|;
name|line
operator|!=
literal|null
condition|;
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
control|)
block|{
name|String
name|l
init|=
name|line
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|sub
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|arguments
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|handlers
operator|.
name|containsKey
argument_list|(
name|sub
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Don't know how to handle "
operator|+
name|sub
operator|+
literal|"  line: "
operator|+
name|l
argument_list|)
throw|;
block|}
name|handlers
operator|.
name|get
argument_list|(
name|sub
argument_list|)
operator|.
name|processArguments
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while processing file: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|beforeTest
parameter_list|(
name|QTestUtil
name|qt
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|QTestOptionHandler
name|h
range|:
name|handlers
operator|.
name|values
argument_list|()
control|)
block|{
name|h
operator|.
name|beforeTest
argument_list|(
name|qt
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|afterTest
parameter_list|(
name|QTestUtil
name|qt
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|QTestOptionHandler
name|h
range|:
name|handlers
operator|.
name|values
argument_list|()
control|)
block|{
name|h
operator|.
name|afterTest
argument_list|(
name|qt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

