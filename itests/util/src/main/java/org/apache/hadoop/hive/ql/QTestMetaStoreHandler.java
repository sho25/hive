begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|dbinstall
operator|.
name|rules
operator|.
name|DatabaseRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|dbinstall
operator|.
name|rules
operator|.
name|Derby
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|dbinstall
operator|.
name|rules
operator|.
name|Mssql
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|dbinstall
operator|.
name|rules
operator|.
name|Mysql
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|dbinstall
operator|.
name|rules
operator|.
name|Oracle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|dbinstall
operator|.
name|rules
operator|.
name|Postgres
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * QTestMetaStoreHandler is responsible for wrapping the logic of handling different metastore  * databases in qtests.  */
end_comment

begin_class
specifier|public
class|class
name|QTestMetaStoreHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QTestMetaStoreHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|metastoreType
decl_stmt|;
specifier|private
name|DatabaseRule
name|rule
decl_stmt|;
specifier|public
name|QTestMetaStoreHandler
parameter_list|()
block|{
name|this
operator|.
name|metastoreType
operator|=
name|QTestSystemProperties
operator|.
name|getMetaStoreDb
argument_list|()
operator|==
literal|null
condition|?
literal|"derby"
else|:
name|QTestSystemProperties
operator|.
name|getMetaStoreDb
argument_list|()
expr_stmt|;
name|this
operator|.
name|rule
operator|=
name|getDatabaseRule
argument_list|(
name|metastoreType
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"initialized metastore type '%s' for qtests"
argument_list|,
name|metastoreType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DatabaseRule
name|getRule
parameter_list|()
block|{
return|return
name|rule
return|;
block|}
specifier|public
name|boolean
name|isDerby
parameter_list|()
block|{
return|return
literal|"derby"
operator|.
name|equalsIgnoreCase
argument_list|(
name|metastoreType
argument_list|)
return|;
block|}
specifier|public
name|QTestMetaStoreHandler
name|setMetaStoreConfiguration
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREDBTYPE
argument_list|,
name|getDbTypeConfString
argument_list|()
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECT_URL_KEY
argument_list|,
name|rule
operator|.
name|getJdbcUrl
argument_list|()
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECTION_DRIVER
argument_list|,
name|rule
operator|.
name|getJdbcDriver
argument_list|()
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECTION_USER_NAME
argument_list|,
name|rule
operator|.
name|getHiveUser
argument_list|()
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PWD
argument_list|,
name|rule
operator|.
name|getHivePassword
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"set metastore connection to url: %s"
argument_list|,
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECT_URL_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|DatabaseRule
name|getDatabaseRule
parameter_list|(
name|String
name|metastoreType
parameter_list|)
block|{
switch|switch
condition|(
name|metastoreType
condition|)
block|{
case|case
literal|"postgres"
case|:
return|return
operator|new
name|Postgres
argument_list|()
return|;
case|case
literal|"oracle"
case|:
return|return
operator|new
name|Oracle
argument_list|()
return|;
case|case
literal|"mysql"
case|:
return|return
operator|new
name|Mysql
argument_list|()
return|;
case|case
literal|"mssql"
case|:
case|case
literal|"sqlserver"
case|:
return|return
operator|new
name|Mssql
argument_list|()
return|;
default|default:
return|return
operator|new
name|Derby
argument_list|()
return|;
block|}
block|}
specifier|private
name|String
name|getDbTypeConfString
parameter_list|()
block|{
comment|// "ORACLE", "MYSQL", "MSSQL", "POSTGRES"
return|return
literal|"sqlserver"
operator|.
name|equalsIgnoreCase
argument_list|(
name|metastoreType
argument_list|)
condition|?
literal|"MSSQL"
else|:
name|metastoreType
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
specifier|public
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|getRule
argument_list|()
operator|.
name|before
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isDerby
argument_list|()
condition|)
block|{
comment|// derby is handled with old QTestUtil logic (TxnDbUtil stuff)
name|getRule
argument_list|()
operator|.
name|install
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|afterTest
parameter_list|(
name|QTestUtil
name|qt
parameter_list|)
throws|throws
name|Exception
block|{
name|getRule
argument_list|()
operator|.
name|after
argument_list|()
expr_stmt|;
comment|// special qtest logic, which doesn't fit quite well into Derby.after()
if|if
condition|(
name|isDerby
argument_list|()
condition|)
block|{
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|(
name|qt
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|(
name|qt
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setSystemProperties
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECT_URL_KEY
operator|.
name|getVarname
argument_list|()
argument_list|,
name|rule
operator|.
name|getJdbcUrl
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECTION_DRIVER
operator|.
name|getVarname
argument_list|()
argument_list|,
name|rule
operator|.
name|getJdbcDriver
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECTION_USER_NAME
operator|.
name|getVarname
argument_list|()
argument_list|,
name|rule
operator|.
name|getHiveUser
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PWD
operator|.
name|getVarname
argument_list|()
argument_list|,
name|rule
operator|.
name|getHivePassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

