begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|bzip2
operator|.
name|BZip2CompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|testutils
operator|.
name|HiveTestEnvSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility class which can load an existing metastore dump.  *  * This can be used to check planning on a large scale database.  */
end_comment

begin_class
specifier|public
class|class
name|MetaStoreDumpUtility
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetaStoreDumpUtility
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|setupMetaStoreTableColumnStatsFor30TBTPCDSWorkload
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|tmpBaseDir
parameter_list|)
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// connection properties
name|props
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"javax.jdo.option.ConnectionUserName"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"javax.jdo.option.ConnectionPassword"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"javax.jdo.option.ConnectionURL"
argument_list|)
decl_stmt|;
name|conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|Statement
name|s
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connected to metastore database "
argument_list|)
expr_stmt|;
block|}
name|String
name|mdbPath
init|=
name|HiveTestEnvSetup
operator|.
name|HIVE_ROOT
operator|+
literal|"/data/files/tpcds-perf/metastore_export/"
decl_stmt|;
comment|// Setup the table column stats
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
operator|new
name|File
argument_list|(
name|HiveTestEnvSetup
operator|.
name|HIVE_ROOT
operator|+
literal|"/metastore/scripts/upgrade/derby/022-HIVE-11107.derby.sql"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|command
decl_stmt|;
name|s
operator|.
name|execute
argument_list|(
literal|"DROP TABLE APP.TABLE_PARAMS"
argument_list|)
expr_stmt|;
name|s
operator|.
name|execute
argument_list|(
literal|"DROP TABLE APP.TAB_COL_STATS"
argument_list|)
expr_stmt|;
comment|// Create the column stats table
while|while
condition|(
operator|(
name|command
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|command
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to run command : "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
name|PreparedStatement
name|psCommand
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|command
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|psCommand
operator|.
name|execute
argument_list|()
expr_stmt|;
name|psCommand
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"successfully completed "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|tabColStatsCsv
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|mdbPath
argument_list|,
literal|"csv"
argument_list|,
literal|"TAB_COL_STATS.txt.bz2"
argument_list|)
decl_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|tabParamsCsv
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|mdbPath
argument_list|,
literal|"csv"
argument_list|,
literal|"TABLE_PARAMS.txt.bz2"
argument_list|)
decl_stmt|;
comment|// Set up the foreign key constraints properly in the TAB_COL_STATS data
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|tmpFileLoc1
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|tmpBaseDir
argument_list|,
literal|"TAB_COL_STATS.txt"
argument_list|)
decl_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|tmpFileLoc2
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|tmpBaseDir
argument_list|,
literal|"TABLE_PARAMS.txt"
argument_list|)
decl_stmt|;
class|class
name|MyComp
implements|implements
name|Comparator
argument_list|<
name|String
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|str1
parameter_list|,
name|String
name|str2
parameter_list|)
block|{
if|if
condition|(
name|str2
operator|.
name|length
argument_list|()
operator|!=
name|str1
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|str2
operator|.
name|length
argument_list|()
operator|-
name|str1
operator|.
name|length
argument_list|()
return|;
block|}
return|return
name|str1
operator|.
name|compareTo
argument_list|(
name|str2
argument_list|)
return|;
block|}
block|}
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|tableNameToID
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
operator|new
name|MyComp
argument_list|()
argument_list|)
decl_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM APP.TBLS"
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tblName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TBL_NAME"
argument_list|)
decl_stmt|;
name|Integer
name|tblId
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"TBL_ID"
argument_list|)
decl_stmt|;
name|tableNameToID
operator|.
name|put
argument_list|(
name|tblName
argument_list|,
name|tblId
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resultset : "
operator|+
name|tblName
operator|+
literal|" | "
operator|+
name|tblId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"select TBLS.TBL_NAME, a.COLUMN_NAME, a.TYPE_NAME from  "
operator|+
literal|"(select COLUMN_NAME, TYPE_NAME, SDS.SD_ID from APP.COLUMNS_V2 join APP.SDS on SDS.CD_ID = COLUMNS_V2.CD_ID) a"
operator|+
literal|" join APP.TBLS on  TBLS.SD_ID = a.SD_ID"
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tblName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|colName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|typeName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cols
init|=
name|data
operator|.
name|get
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|cols
condition|)
block|{
name|cols
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|cols
operator|.
name|put
argument_list|(
name|colName
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|tblName
argument_list|,
name|cols
argument_list|)
expr_stmt|;
block|}
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|BZip2CompressorInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|tabColStatsCsv
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Stream
argument_list|<
name|String
argument_list|>
name|replaced
init|=
name|reader
operator|.
name|lines
argument_list|()
operator|.
name|parallel
argument_list|()
operator|.
name|map
argument_list|(
name|str
lambda|->
block|{
name|String
index|[]
name|splits
init|=
name|str
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|splits
index|[
literal|0
index|]
decl_stmt|;
name|String
name|colName
init|=
name|splits
index|[
literal|1
index|]
decl_stmt|;
name|Integer
name|tblID
init|=
name|tableNameToID
operator|.
name|get
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"default@"
operator|+
name|tblName
operator|+
literal|"@"
operator|+
name|colName
operator|+
literal|"@"
operator|+
name|data
operator|.
name|get
argument_list|(
name|tblName
argument_list|)
operator|.
name|get
argument_list|(
name|colName
argument_list|)
operator|+
literal|"@"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|splits
index|[
name|i
index|]
operator|+
literal|"@"
argument_list|)
expr_stmt|;
block|}
comment|// Add tbl_id and empty bitvector
return|return
name|sb
operator|.
name|append
argument_list|(
name|tblID
argument_list|)
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|tmpFileLoc1
argument_list|,
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
name|replaced
operator|::
name|iterator
argument_list|)
expr_stmt|;
name|replaced
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|BufferedReader
name|reader2
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|BZip2CompressorInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|tabParamsCsv
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|colStats
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Stream
argument_list|<
name|String
argument_list|>
name|replacedStream
init|=
name|reader2
operator|.
name|lines
argument_list|()
operator|.
name|parallel
argument_list|()
operator|.
name|map
argument_list|(
name|str
lambda|->
block|{
name|String
index|[]
name|splits
init|=
name|str
operator|.
name|split
argument_list|(
literal|"_@"
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|splits
index|[
literal|0
index|]
decl_stmt|;
name|Integer
name|tblId
init|=
name|tableNameToID
operator|.
name|get
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cols
init|=
name|data
operator|.
name|get
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{\"COLUMN_STATS\":{"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|cols
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
operator|+
name|colName
operator|+
literal|"\":\"true\","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"},\"BASIC_STATS\":\"true\"}"
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|put
argument_list|(
name|tblId
operator|.
name|toString
argument_list|()
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tblId
operator|.
name|toString
argument_list|()
operator|+
literal|"@"
operator|+
name|splits
index|[
literal|1
index|]
return|;
block|}
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|tmpFileLoc2
argument_list|,
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
name|replacedStream
operator|::
name|iterator
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|tmpFileLoc2
argument_list|,
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
name|colStats
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|map
lambda|->
name|map
operator|.
name|getKey
argument_list|()
operator|+
literal|"@COLUMN_STATS_ACCURATE@"
operator|+
name|map
operator|.
name|getValue
argument_list|()
argument_list|)
operator|::
name|iterator
argument_list|,
name|StandardOpenOption
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|replacedStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Load the column stats and table params with 30 TB scale
name|String
name|importStatement1
init|=
literal|"CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE(null, '"
operator|+
literal|"TAB_COL_STATS"
operator|+
literal|"', '"
operator|+
name|tmpFileLoc1
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"', '@', null, 'UTF-8', 1)"
decl_stmt|;
name|String
name|importStatement2
init|=
literal|"CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE(null, '"
operator|+
literal|"TABLE_PARAMS"
operator|+
literal|"', '"
operator|+
name|tmpFileLoc2
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"', '@', null, 'UTF-8', 1)"
decl_stmt|;
name|PreparedStatement
name|psImport1
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|importStatement1
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to execute : "
operator|+
name|importStatement1
argument_list|)
expr_stmt|;
block|}
name|psImport1
operator|.
name|execute
argument_list|()
expr_stmt|;
name|psImport1
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"successfully completed "
operator|+
name|importStatement1
argument_list|)
expr_stmt|;
block|}
name|PreparedStatement
name|psImport2
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|importStatement2
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to execute : "
operator|+
name|importStatement2
argument_list|)
expr_stmt|;
block|}
name|psImport2
operator|.
name|execute
argument_list|()
expr_stmt|;
name|psImport2
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"successfully completed "
operator|+
name|importStatement2
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|execute
argument_list|(
literal|"ALTER TABLE APP.TAB_COL_STATS ADD COLUMN CAT_NAME VARCHAR(256)"
argument_list|)
expr_stmt|;
name|s
operator|.
name|execute
argument_list|(
literal|"update APP.TAB_COL_STATS set CAT_NAME = '"
operator|+
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"error while loading tpcds metastore dump"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

