begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IHMSHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|ISessionAuthState
import|;
end_import

begin_comment
comment|/**  *  * InjectableDummyAuthenticator - An implementation of HiveMetastoreAuthenticationProvider  * that wraps another Authenticator, but when asked to inject a user provided username  * and groupnames, does so. This can be toggled back and forth to use in testing  */
end_comment

begin_class
specifier|public
class|class
name|InjectableDummyAuthenticator
implements|implements
name|HiveMetastoreAuthenticationProvider
block|{
specifier|private
specifier|static
name|String
name|userName
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|injectMode
decl_stmt|;
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|HiveMetastoreAuthenticationProvider
argument_list|>
name|hmapClass
init|=
name|HadoopDefaultMetastoreAuthenticator
operator|.
name|class
decl_stmt|;
specifier|private
name|HiveMetastoreAuthenticationProvider
name|hmap
decl_stmt|;
specifier|public
specifier|static
name|void
name|injectHmapClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|HiveMetastoreAuthenticationProvider
argument_list|>
name|clazz
parameter_list|)
block|{
name|hmapClass
operator|=
name|clazz
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|injectUserName
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|userName
operator|=
name|user
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|injectGroupNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
block|{
name|groupNames
operator|=
name|groups
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|injectMode
parameter_list|(
name|boolean
name|mode
parameter_list|)
block|{
name|injectMode
operator|=
name|mode
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
if|if
condition|(
name|injectMode
condition|)
block|{
return|return
name|userName
return|;
block|}
else|else
block|{
return|return
name|hmap
operator|.
name|getUserName
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroupNames
parameter_list|()
block|{
if|if
condition|(
name|injectMode
condition|)
block|{
return|return
name|groupNames
return|;
block|}
else|else
block|{
return|return
name|hmap
operator|.
name|getGroupNames
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|hmap
operator|.
name|getConf
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
try|try
block|{
name|hmap
operator|=
name|hmapClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Whoops, could not create an Authenticator of class "
operator|+
name|hmapClass
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|hmap
operator|.
name|setConf
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMetaStoreHandler
parameter_list|(
name|IHMSHandler
name|handler
parameter_list|)
block|{
name|hmap
operator|.
name|setMetaStoreHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|HiveException
block|{
name|hmap
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSessionState
parameter_list|(
name|ISessionAuthState
name|arg0
parameter_list|)
block|{
comment|//no-op
block|}
block|}
end_class

end_unit

