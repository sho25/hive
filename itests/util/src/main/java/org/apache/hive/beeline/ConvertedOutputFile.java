begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DigestPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|FetchConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|SortAndDigestPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|SortPrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_comment
comment|/**  * Class for representing an OutputFile, into which the writes are converted by the existing  * FetchConverters.  */
end_comment

begin_class
specifier|public
class|class
name|ConvertedOutputFile
extends|extends
name|OutputFile
block|{
specifier|private
specifier|final
name|boolean
name|isActiveFetchConverter
decl_stmt|;
specifier|public
name|ConvertedOutputFile
parameter_list|(
name|OutputFile
name|inner
parameter_list|,
name|Converter
name|converter
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|converter
operator|.
name|getConvertedPrintStream
argument_list|(
name|inner
operator|.
name|getOut
argument_list|()
argument_list|)
argument_list|,
name|inner
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|isActiveFetchConverter
operator|=
operator|(
name|getOut
argument_list|()
operator|instanceof
name|FetchConverter
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|isActiveConverter
parameter_list|()
block|{
return|return
name|isActiveFetchConverter
return|;
block|}
annotation|@
name|Override
name|void
name|fetchStarted
parameter_list|()
block|{
if|if
condition|(
name|isActiveFetchConverter
condition|)
block|{
operator|(
operator|(
name|FetchConverter
operator|)
name|getOut
argument_list|()
operator|)
operator|.
name|fetchStarted
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|foundQuery
parameter_list|(
name|boolean
name|foundQuery
parameter_list|)
block|{
if|if
condition|(
name|isActiveFetchConverter
condition|)
block|{
operator|(
operator|(
name|FetchConverter
operator|)
name|getOut
argument_list|()
operator|)
operator|.
name|foundQuery
argument_list|(
name|foundQuery
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|fetchFinished
parameter_list|()
block|{
if|if
condition|(
name|isActiveFetchConverter
condition|)
block|{
operator|(
operator|(
name|FetchConverter
operator|)
name|getOut
argument_list|()
operator|)
operator|.
name|fetchFinished
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * The supported type of converters pointing to a specific FetchConverter class, and the method    * which provides the actual converted stream.    */
specifier|public
enum|enum
name|Converter
block|{
name|SORT_QUERY_RESULTS
block|{
specifier|public
name|PrintStream
name|getConvertedPrintStream
parameter_list|(
name|PrintStream
name|inner
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|SortPrintStream
argument_list|(
name|inner
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
block|}
block|,
name|HASH_QUERY_RESULTS
block|{
specifier|public
name|PrintStream
name|getConvertedPrintStream
parameter_list|(
name|PrintStream
name|inner
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|DigestPrintStream
argument_list|(
name|inner
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
block|}
block|,
name|SORT_AND_HASH_QUERY_RESULTS
block|{
specifier|public
name|PrintStream
name|getConvertedPrintStream
parameter_list|(
name|PrintStream
name|inner
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|SortAndDigestPrintStream
argument_list|(
name|inner
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
block|}
block|,
name|NONE
block|{
specifier|public
name|PrintStream
name|getConvertedPrintStream
parameter_list|(
name|PrintStream
name|inner
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|inner
return|;
block|}
block|}
block|;
specifier|public
specifier|abstract
name|PrintStream
name|getConvertedPrintStream
parameter_list|(
name|PrintStream
name|inner
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

