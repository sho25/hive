begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_comment
comment|/***  * Base class for Hive service  * AbstractHiveService.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractHiveService
block|{
specifier|private
name|HiveConf
name|hiveConf
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|hostname
decl_stmt|;
specifier|private
name|int
name|binaryPort
decl_stmt|;
specifier|private
name|int
name|httpPort
decl_stmt|;
specifier|private
name|boolean
name|startedHiveService
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|addedProperties
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|AbstractHiveService
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|binaryPort
parameter_list|,
name|int
name|httpPort
parameter_list|)
block|{
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
name|this
operator|.
name|binaryPort
operator|=
name|binaryPort
expr_stmt|;
name|this
operator|.
name|httpPort
operator|=
name|httpPort
expr_stmt|;
block|}
comment|/**    * Get Hive conf    * @return    */
specifier|public
name|HiveConf
name|getHiveConf
parameter_list|()
block|{
return|return
name|hiveConf
return|;
block|}
comment|/**    * Get config property    * @param propertyKey    * @return    */
specifier|public
name|String
name|getConfProperty
parameter_list|(
name|String
name|propertyKey
parameter_list|)
block|{
return|return
name|hiveConf
operator|.
name|get
argument_list|(
name|propertyKey
argument_list|)
return|;
block|}
comment|/**    * Set config property    * @param propertyKey    * @param propertyValue    */
specifier|public
name|void
name|setConfProperty
parameter_list|(
name|String
name|propertyKey
parameter_list|,
name|String
name|propertyValue
parameter_list|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|propertyKey
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|propertyKey
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
name|addedProperties
operator|.
name|add
argument_list|(
name|propertyKey
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create system properties set by this server instance. This ensures that    * the changes made by current test are not impacting subsequent tests.    */
specifier|public
name|void
name|clearProperties
parameter_list|()
block|{
for|for
control|(
name|String
name|propKey
range|:
name|addedProperties
control|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|propKey
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Retrieve warehouse directory    * @return    */
specifier|public
name|Path
name|getWareHouseDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|setWareHouseDir
parameter_list|(
name|String
name|wareHouseURI
parameter_list|)
block|{
name|verifyNotStarted
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
argument_list|,
name|wareHouseURI
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
name|wareHouseURI
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set service host    * @param hostName    */
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostName
expr_stmt|;
block|}
comment|// get service host
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
comment|/**    * Set binary service port #    * @param portNum    */
specifier|public
name|void
name|setBinaryPort
parameter_list|(
name|int
name|portNum
parameter_list|)
block|{
name|this
operator|.
name|binaryPort
operator|=
name|portNum
expr_stmt|;
block|}
comment|/**    * Set http service port #    * @param portNum    */
specifier|public
name|void
name|setHttpPort
parameter_list|(
name|int
name|portNum
parameter_list|)
block|{
name|this
operator|.
name|httpPort
operator|=
name|portNum
expr_stmt|;
block|}
comment|// Get binary service port #
specifier|public
name|int
name|getBinaryPort
parameter_list|()
block|{
return|return
name|binaryPort
return|;
block|}
comment|// Get http service port #
specifier|public
name|int
name|getHttpPort
parameter_list|()
block|{
return|return
name|httpPort
return|;
block|}
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|startedHiveService
return|;
block|}
specifier|public
name|void
name|setStarted
parameter_list|(
name|boolean
name|hiveServiceStatus
parameter_list|)
block|{
name|this
operator|.
name|startedHiveService
operator|=
name|hiveServiceStatus
expr_stmt|;
block|}
specifier|protected
name|void
name|verifyStarted
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isStarted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"HiveServer2 is not running"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|verifyNotStarted
parameter_list|()
block|{
if|if
condition|(
name|isStarted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"HiveServer2 already running"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

