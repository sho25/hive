begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|IntString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|PigServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|data
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pig
operator|.
name|impl
operator|.
name|logicalLayer
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
specifier|public
class|class
name|TestHCatHiveThriftCompatibility
extends|extends
name|HCatBaseTest
block|{
specifier|private
name|boolean
name|setUpComplete
init|=
literal|false
decl_stmt|;
specifier|private
name|Path
name|intStringSeq
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|setUpComplete
condition|)
block|{
return|return;
block|}
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|TIOStreamTransport
name|transport
init|=
operator|new
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|TBinaryProtocol
name|protocol
init|=
operator|new
name|TBinaryProtocol
argument_list|(
name|transport
argument_list|)
decl_stmt|;
name|IntString
name|intString
init|=
operator|new
name|IntString
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|intString
operator|.
name|write
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|BytesWritable
name|bytesWritable
init|=
operator|new
name|BytesWritable
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|intStringSeq
operator|=
operator|new
name|Path
argument_list|(
name|TEST_DATA_DIR
operator|+
literal|"/data/intString.seq"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating data file: "
operator|+
name|intStringSeq
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Writer
name|seqFileWriter
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|intStringSeq
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
argument_list|,
name|hiveConf
argument_list|,
name|intStringSeq
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|seqFileWriter
operator|.
name|append
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|bytesWritable
argument_list|)
expr_stmt|;
name|seqFileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|setUpComplete
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    *  Create a table with no explicit schema and ensure its correctly    *  discovered from the thrift struct.    */
annotation|@
name|Test
specifier|public
name|void
name|testDynamicCols
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists test_thrift"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"create external table test_thrift "
operator|+
literal|"partitioned by (year string) "
operator|+
literal|"row format serde 'org.apache.hadoop.hive.serde2.thrift.ThriftDeserializer' "
operator|+
literal|"with serdeproperties ( "
operator|+
literal|"  'serialization.class'='org.apache.hadoop.hive.serde2.thrift.test.IntString', "
operator|+
literal|"  'serialization.format'='org.apache.thrift.protocol.TBinaryProtocol') "
operator|+
literal|"stored as"
operator|+
literal|"  inputformat 'org.apache.hadoop.mapred.SequenceFileInputFormat'"
operator|+
literal|"  outputformat 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"alter table test_thrift add partition (year = '2012') location '"
operator|+
name|intStringSeq
operator|.
name|getParent
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|PigServer
name|pigServer
init|=
name|createPigServer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|pigServer
operator|.
name|registerQuery
argument_list|(
literal|"A = load 'test_thrift' using org.apache.hive.hcatalog.pig.HCatLoader();"
argument_list|)
expr_stmt|;
name|Schema
name|expectedSchema
init|=
operator|new
name|Schema
argument_list|()
decl_stmt|;
name|expectedSchema
operator|.
name|add
argument_list|(
operator|new
name|Schema
operator|.
name|FieldSchema
argument_list|(
literal|"myint"
argument_list|,
name|DataType
operator|.
name|INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|expectedSchema
operator|.
name|add
argument_list|(
operator|new
name|Schema
operator|.
name|FieldSchema
argument_list|(
literal|"mystring"
argument_list|,
name|DataType
operator|.
name|CHARARRAY
argument_list|)
argument_list|)
expr_stmt|;
name|expectedSchema
operator|.
name|add
argument_list|(
operator|new
name|Schema
operator|.
name|FieldSchema
argument_list|(
literal|"underscore_int"
argument_list|,
name|DataType
operator|.
name|INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|expectedSchema
operator|.
name|add
argument_list|(
operator|new
name|Schema
operator|.
name|FieldSchema
argument_list|(
literal|"year"
argument_list|,
name|DataType
operator|.
name|CHARARRAY
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSchema
argument_list|,
name|pigServer
operator|.
name|dumpSchema
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|iterator
init|=
name|pigServer
operator|.
name|openIterator
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|Tuple
name|t
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2012"
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

