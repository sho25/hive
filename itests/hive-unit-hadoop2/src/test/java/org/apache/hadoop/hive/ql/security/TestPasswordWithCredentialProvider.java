begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_class
specifier|public
class|class
name|TestPasswordWithCredentialProvider
block|{
specifier|public
specifier|static
name|boolean
name|doesHadoopPasswordAPIExist
parameter_list|()
block|{
name|boolean
name|foundMethod
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Method
name|getPasswordMethod
init|=
name|Configuration
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getPassword"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|foundMethod
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|err
parameter_list|)
block|{     }
return|return
name|foundMethod
return|;
block|}
specifier|private
specifier|static
specifier|final
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
argument_list|,
literal|"creds"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Object
name|invoke
parameter_list|(
name|Class
name|objClass
parameter_list|,
name|Object
name|obj
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
index|[]
name|argTypes
init|=
operator|new
name|Class
index|[
name|args
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|argTypes
index|[
name|idx
index|]
operator|=
name|args
index|[
name|idx
index|]
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
name|Method
name|method
init|=
name|objClass
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|argTypes
argument_list|)
decl_stmt|;
return|return
name|method
operator|.
name|invoke
argument_list|(
name|obj
argument_list|,
name|args
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPassword
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|doesHadoopPasswordAPIExist
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Skipping Password API test"
operator|+
literal|" because this version of hadoop-2 does not support the password API."
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|credName
init|=
literal|"my.password"
decl_stmt|;
name|String
name|credName2
init|=
literal|"my.password2"
decl_stmt|;
name|String
name|credName3
init|=
literal|"my.password3"
decl_stmt|;
name|String
name|hiveConfPassword
init|=
literal|"conf value"
decl_stmt|;
name|String
name|credPassword
init|=
literal|"cred value"
decl_stmt|;
name|String
name|confOnlyPassword
init|=
literal|"abcdefg"
decl_stmt|;
name|String
name|credOnlyPassword
init|=
literal|"12345"
decl_stmt|;
comment|// Set up conf
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|credName
argument_list|,
name|hiveConfPassword
argument_list|)
expr_stmt|;
comment|// Will be superceded by credential provider
name|conf
operator|.
name|set
argument_list|(
name|credName2
argument_list|,
name|confOnlyPassword
argument_list|)
expr_stmt|;
comment|// Will not be superceded
name|assertEquals
argument_list|(
name|hiveConfPassword
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|credName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|confOnlyPassword
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|credName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"credName3 should not exist in HiveConf"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|credName3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Configure getPassword() to fall back to conf if credential doesn't have entry
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.credential.clear-text-fallback"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// Set up CredentialProvider
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.credential.provider.path"
argument_list|,
literal|"jceks://file/"
operator|+
name|tmpDir
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/test.jks"
argument_list|)
expr_stmt|;
comment|// CredentialProvider/CredentialProviderFactory may not exist, depending on the version of
comment|// hadoop-2 being used to build Hive. Use reflection to do the following lines
comment|// to allow the test to compile regardless of what version of hadoop-2.
comment|// Update credName entry in the credential provider.
comment|//CredentialProvider provider = CredentialProviderFactory.getProviders(conf).get(0);
comment|//provider.createCredentialEntry(credName, credPassword.toCharArray());
comment|//provider.createCredentialEntry(credName3, credOnlyPassword.toCharArray());
comment|//provider.flush();
name|Class
name|credentialProviderClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.security.alias.CredentialProvider"
argument_list|)
decl_stmt|;
name|Class
name|credentialProviderFactoryClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.security.alias.CredentialProviderFactory"
argument_list|)
decl_stmt|;
name|Object
name|provider
init|=
operator|(
operator|(
name|List
operator|)
name|invoke
argument_list|(
name|credentialProviderFactoryClass
argument_list|,
literal|null
argument_list|,
literal|"getProviders"
argument_list|,
name|conf
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|invoke
argument_list|(
name|credentialProviderClass
argument_list|,
name|provider
argument_list|,
literal|"createCredentialEntry"
argument_list|,
name|credName
argument_list|,
name|credPassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|invoke
argument_list|(
name|credentialProviderClass
argument_list|,
name|provider
argument_list|,
literal|"createCredentialEntry"
argument_list|,
name|credName3
argument_list|,
name|credOnlyPassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|invoke
argument_list|(
name|credentialProviderClass
argument_list|,
name|provider
argument_list|,
literal|"flush"
argument_list|)
expr_stmt|;
comment|// If credential provider has entry for our credential, then it should be used
name|assertEquals
argument_list|(
literal|"getPassword() should use match value in credential provider"
argument_list|,
name|credPassword
argument_list|,
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getPassword
argument_list|(
name|conf
argument_list|,
name|credName
argument_list|)
argument_list|)
expr_stmt|;
comment|// If cred provider doesn't have entry, fall back to conf
name|assertEquals
argument_list|(
literal|"getPassword() should match value from conf"
argument_list|,
name|confOnlyPassword
argument_list|,
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getPassword
argument_list|(
name|conf
argument_list|,
name|credName2
argument_list|)
argument_list|)
expr_stmt|;
comment|// If cred provider has entry and conf does not, cred provider is used.
comment|// This is our use case of not having passwords stored in in the clear in hive conf files.
name|assertEquals
argument_list|(
literal|"getPassword() should use credential provider if conf has no value"
argument_list|,
name|credOnlyPassword
argument_list|,
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getPassword
argument_list|(
name|conf
argument_list|,
name|credName3
argument_list|)
argument_list|)
expr_stmt|;
comment|// If neither cred provider or conf have entry, return null;
name|assertNull
argument_list|(
literal|"null if neither cred provider or conf have entry"
argument_list|,
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getPassword
argument_list|(
name|conf
argument_list|,
literal|"nonexistentkey"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

