begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|minikdc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hooks
operator|.
name|TestHs2Hooks
operator|.
name|PostExecHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hooks
operator|.
name|TestHs2Hooks
operator|.
name|PreExecHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hooks
operator|.
name|TestHs2Hooks
operator|.
name|SemanticAnalysisHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests information retrieved from hooks, in Kerberos mode.  */
end_comment

begin_class
specifier|public
class|class
name|TestHs2HooksWithMiniKdc
block|{
specifier|private
specifier|static
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|MiniHiveKdc
name|miniHiveKdc
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Connection
name|hs2Conn
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
name|MiniHS2
operator|.
name|getJdbcDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
name|PostExecHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
name|PreExecHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
operator|.
name|varname
argument_list|,
name|SemanticAnalysisHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|""
operator|+
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|miniHiveKdc
operator|=
operator|new
name|MiniHiveKdc
argument_list|()
expr_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|miniHS2
operator|=
name|MiniHiveKdc
operator|.
name|getMiniHS2WithKerb
argument_list|(
name|miniHiveKdc
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUpTest
parameter_list|()
throws|throws
name|Exception
block|{
name|PreExecHook
operator|.
name|userName
operator|=
literal|null
expr_stmt|;
name|PreExecHook
operator|.
name|ipAddress
operator|=
literal|null
expr_stmt|;
name|PreExecHook
operator|.
name|operation
operator|=
literal|null
expr_stmt|;
name|PreExecHook
operator|.
name|error
operator|=
literal|null
expr_stmt|;
name|PostExecHook
operator|.
name|userName
operator|=
literal|null
expr_stmt|;
name|PostExecHook
operator|.
name|ipAddress
operator|=
literal|null
expr_stmt|;
name|PostExecHook
operator|.
name|operation
operator|=
literal|null
expr_stmt|;
name|PostExecHook
operator|.
name|error
operator|=
literal|null
expr_stmt|;
name|SemanticAnalysisHook
operator|.
name|userName
operator|=
literal|null
expr_stmt|;
name|SemanticAnalysisHook
operator|.
name|ipAddress
operator|=
literal|null
expr_stmt|;
name|SemanticAnalysisHook
operator|.
name|command
operator|=
literal|null
expr_stmt|;
name|SemanticAnalysisHook
operator|.
name|preAnalyzeError
operator|=
literal|null
expr_stmt|;
name|SemanticAnalysisHook
operator|.
name|postAnalyzeError
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDownTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|hs2Conn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore shutdown errors since there are negative tests
block|}
block|}
block|}
comment|/**    * Test that hook context properties are correctly set.    */
annotation|@
name|Test
specifier|public
name|void
name|testHookContexts
parameter_list|()
throws|throws
name|Throwable
block|{
name|miniHiveKdc
operator|.
name|loginUser
argument_list|(
name|MiniHiveKdc
operator|.
name|HIVE_TEST_USER_1
argument_list|)
expr_stmt|;
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show databases"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
expr_stmt|;
name|Throwable
name|error
init|=
name|PostExecHook
operator|.
name|error
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
name|error
operator|=
name|PreExecHook
operator|.
name|error
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"ipaddress is null"
argument_list|,
name|PostExecHook
operator|.
name|ipAddress
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"userName is null"
argument_list|,
name|PostExecHook
operator|.
name|userName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"operation is null"
argument_list|,
name|PostExecHook
operator|.
name|operation
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MiniHiveKdc
operator|.
name|HIVE_TEST_USER_1
argument_list|,
name|PostExecHook
operator|.
name|userName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PostExecHook
operator|.
name|ipAddress
argument_list|,
name|PostExecHook
operator|.
name|ipAddress
operator|.
name|contains
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"SHOWTABLES"
argument_list|,
name|PostExecHook
operator|.
name|operation
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"ipaddress is null"
argument_list|,
name|PreExecHook
operator|.
name|ipAddress
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"userName is null"
argument_list|,
name|PreExecHook
operator|.
name|userName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"operation is null"
argument_list|,
name|PreExecHook
operator|.
name|operation
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MiniHiveKdc
operator|.
name|HIVE_TEST_USER_1
argument_list|,
name|PreExecHook
operator|.
name|userName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PreExecHook
operator|.
name|ipAddress
argument_list|,
name|PreExecHook
operator|.
name|ipAddress
operator|.
name|contains
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"SHOWTABLES"
argument_list|,
name|PreExecHook
operator|.
name|operation
argument_list|)
expr_stmt|;
name|error
operator|=
name|SemanticAnalysisHook
operator|.
name|preAnalyzeError
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
name|error
operator|=
name|SemanticAnalysisHook
operator|.
name|postAnalyzeError
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"semantic hook context ipaddress is null"
argument_list|,
name|SemanticAnalysisHook
operator|.
name|ipAddress
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"semantic hook context userName is null"
argument_list|,
name|SemanticAnalysisHook
operator|.
name|userName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"semantic hook context command is null"
argument_list|,
name|SemanticAnalysisHook
operator|.
name|command
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"semantic hook context commandType is null"
argument_list|,
name|SemanticAnalysisHook
operator|.
name|commandType
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|SemanticAnalysisHook
operator|.
name|ipAddress
argument_list|,
name|SemanticAnalysisHook
operator|.
name|ipAddress
operator|.
name|contains
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"show tables"
argument_list|,
name|SemanticAnalysisHook
operator|.
name|command
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

