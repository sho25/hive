begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_class
specifier|public
class|class
name|Utils
block|{
comment|/**    * Convert hive types to sql types.    * @param type    * @return Integer java.sql.Types values    * @throws SQLException    */
specifier|public
specifier|static
name|int
name|hiveTypeToSqlType
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
literal|"string"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|VARCHAR
return|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|FLOAT
return|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|DOUBLE
return|;
block|}
elseif|else
if|if
condition|(
literal|"boolean"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|BOOLEAN
return|;
block|}
elseif|else
if|if
condition|(
literal|"tinyint"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|TINYINT
return|;
block|}
elseif|else
if|if
condition|(
literal|"smallint"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|SMALLINT
return|;
block|}
elseif|else
if|if
condition|(
literal|"int"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|INTEGER
return|;
block|}
elseif|else
if|if
condition|(
literal|"bigint"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|BIGINT
return|;
block|}
elseif|else
if|if
condition|(
literal|"timestamp"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|TIMESTAMP
return|;
block|}
elseif|else
if|if
condition|(
literal|"decimal"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|DECIMAL
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"map<"
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|VARCHAR
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"array<"
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|VARCHAR
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"struct<"
argument_list|)
condition|)
block|{
return|return
name|Types
operator|.
name|VARCHAR
return|;
block|}
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Unrecognized column type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

