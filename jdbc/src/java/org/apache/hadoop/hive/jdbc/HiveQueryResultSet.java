begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|dynamic_type
operator|.
name|DynamicSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|service
operator|.
name|HiveInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * HiveQueryResultSet.  *  */
end_comment

begin_class
specifier|public
class|class
name|HiveQueryResultSet
extends|extends
name|HiveBaseResultSet
block|{
specifier|private
name|HiveInterface
name|client
decl_stmt|;
specifier|private
name|DynamicSerDe
name|ds
decl_stmt|;
specifier|private
name|int
name|maxRows
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|rowsFetched
init|=
literal|0
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|HiveQueryResultSet
parameter_list|(
name|HiveInterface
name|client
parameter_list|,
name|int
name|maxRows
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|row
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxRows
operator|=
name|maxRows
expr_stmt|;
name|initDynamicSerde
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|HiveQueryResultSet
parameter_list|(
name|HiveInterface
name|client
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
argument_list|(
name|client
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Instantiate the dynamic serde used to deserialize the result row.    */
specifier|private
name|void
name|initDynamicSerde
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
name|Schema
name|fullSchema
init|=
name|client
operator|.
name|getThriftSchema
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schema
init|=
name|fullSchema
operator|.
name|getFieldSchemas
argument_list|()
decl_stmt|;
name|columnNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|columnTypes
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|String
name|serDDL
decl_stmt|;
if|if
condition|(
operator|(
name|schema
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|schema
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|serDDL
operator|=
operator|new
name|String
argument_list|(
literal|"struct result { "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|schema
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|pos
operator|!=
literal|0
condition|)
block|{
name|serDDL
operator|=
name|serDDL
operator|.
name|concat
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|columnTypes
operator|.
name|add
argument_list|(
name|schema
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
name|schema
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serDDL
operator|=
name|serDDL
operator|.
name|concat
argument_list|(
name|schema
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|serDDL
operator|=
name|serDDL
operator|.
name|concat
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|serDDL
operator|=
name|serDDL
operator|.
name|concat
argument_list|(
name|schema
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|serDDL
operator|=
name|serDDL
operator|.
name|concat
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serDDL
operator|=
operator|new
name|String
argument_list|(
literal|"struct result { string empty }"
argument_list|)
expr_stmt|;
block|}
name|ds
operator|=
operator|new
name|DynamicSerDe
argument_list|()
expr_stmt|;
name|Properties
name|dsp
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|dsp
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|TCTLSeparatedProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dsp
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Constants
operator|.
name|META_TABLE_NAME
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|dsp
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_DDL
argument_list|,
name|serDDL
argument_list|)
expr_stmt|;
name|dsp
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|ds
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dsp
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|FIELD_DELIM
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|ds
operator|.
name|initialize
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|dsp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Could not create ResultSet: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Moves the cursor down one row from its current position.    *     * @see java.sql.ResultSet#next()    * @throws SQLException    *           if a database access error occurs.    */
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|maxRows
operator|>
literal|0
operator|&&
name|rowsFetched
operator|>=
name|maxRows
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|rowStr
init|=
literal|""
decl_stmt|;
try|try
block|{
name|rowStr
operator|=
operator|(
name|String
operator|)
name|client
operator|.
name|fetchOne
argument_list|()
expr_stmt|;
name|rowsFetched
operator|++
expr_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|rowStr
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|ds
operator|.
name|deserialize
argument_list|(
operator|new
name|BytesWritable
argument_list|(
name|rowStr
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|row
operator|=
operator|(
name|ArrayList
argument_list|<
name|?
argument_list|>
operator|)
name|o
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Error retrieving next row"
argument_list|)
throw|;
block|}
comment|// NOTE: fetchOne dosn't throw new SQLException("Method not supported").
return|return
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|rowStr
argument_list|)
return|;
block|}
block|}
end_class

end_unit

