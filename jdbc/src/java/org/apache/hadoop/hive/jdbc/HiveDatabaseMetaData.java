begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|service
operator|.
name|HiveInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|RowIdLifetime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_comment
comment|/**  * HiveDatabaseMetaData.  *  */
end_comment

begin_class
specifier|public
class|class
name|HiveDatabaseMetaData
implements|implements
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
block|{
specifier|private
specifier|final
name|HiveInterface
name|client
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CATALOG_SEPARATOR
init|=
literal|"."
decl_stmt|;
comment|//  The maximum column length = MFieldSchema.FNAME in metastore/src/model/package.jdo
specifier|private
specifier|static
specifier|final
name|int
name|maxColumnNameLength
init|=
literal|128
decl_stmt|;
comment|/**    *    */
specifier|public
name|HiveDatabaseMetaData
parameter_list|(
name|HiveInterface
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
specifier|public
name|boolean
name|allProceduresAreCallable
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|allTablesAreSelectable
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|autoCommitFailureClosesAllResultSets
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|dataDefinitionCausesTransactionCommit
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|dataDefinitionIgnoredInTransactions
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|deletesAreDetected
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|doesMaxRowSizeIncludeBlobs
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getAttributes
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|typeNamePattern
parameter_list|,
name|String
name|attributeNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getBestRowIdentifier
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|int
name|scope
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getCatalogSeparator
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|CATALOG_SEPARATOR
return|;
block|}
specifier|public
name|String
name|getCatalogTerm
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|"database"
return|;
block|}
specifier|public
name|ResultSet
name|getCatalogs
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
comment|// TODO a client call to get the schema's after HIVE-675 is implemented
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|catalogs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|catalogs
operator|.
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
return|return
operator|new
name|HiveMetaDataResultSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TABLE_CAT"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STRING"
argument_list|)
argument_list|,
name|catalogs
argument_list|)
block|{
specifier|private
name|int
name|cnt
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|cnt
operator|<
name|data
operator|.
name|size
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|a
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
comment|// TABLE_CAT String => table catalog (may be null)
name|row
operator|=
name|a
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ResultSet
name|getClientInfoProperties
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getColumnPrivileges
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|columnNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|private
name|String
name|convertPattern
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
return|return
literal|".*"
return|;
block|}
else|else
block|{
return|return
name|pattern
operator|.
name|replace
argument_list|(
literal|"%"
argument_list|,
literal|".*"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"_"
argument_list|,
literal|"."
argument_list|)
return|;
block|}
block|}
specifier|public
name|ResultSet
name|getColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
specifier|final
name|String
name|schemaPattern
parameter_list|,
specifier|final
name|String
name|tableNamePattern
parameter_list|,
specifier|final
name|String
name|columnNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|JdbcColumn
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|JdbcColumn
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|catalog
operator|==
literal|null
condition|)
block|{
name|catalog
operator|=
literal|"default"
expr_stmt|;
block|}
name|String
name|regtableNamePattern
init|=
name|convertPattern
argument_list|(
name|tableNamePattern
argument_list|)
decl_stmt|;
name|String
name|regcolumnNamePattern
init|=
name|convertPattern
argument_list|(
name|columnNamePattern
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|client
operator|.
name|get_tables
argument_list|(
name|catalog
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|table
range|:
name|tables
control|)
block|{
if|if
condition|(
name|table
operator|.
name|matches
argument_list|(
name|regtableNamePattern
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
name|client
operator|.
name|get_fields
argument_list|(
name|catalog
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|int
name|ordinalPos
init|=
literal|1
decl_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|regcolumnNamePattern
argument_list|)
condition|)
block|{
name|columns
operator|.
name|add
argument_list|(
operator|new
name|JdbcColumn
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|table
argument_list|,
name|catalog
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|field
operator|.
name|getComment
argument_list|()
argument_list|,
name|ordinalPos
argument_list|)
argument_list|)
expr_stmt|;
name|ordinalPos
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|columns
argument_list|,
operator|new
name|GetColumnsComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|HiveMetaDataResultSet
argument_list|<
name|JdbcColumn
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TABLE_CAT"
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
literal|"TABLE_NAME"
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
literal|"DATA_TYPE"
argument_list|,
literal|"TYPE_NAME"
argument_list|,
literal|"COLUMN_SIZE"
argument_list|,
literal|"BUFFER_LENGTH"
argument_list|,
literal|"DECIMAL_DIGITS"
argument_list|,
literal|"NUM_PREC_RADIX"
argument_list|,
literal|"NULLABLE"
argument_list|,
literal|"REMARKS"
argument_list|,
literal|"COLUMN_DEF"
argument_list|,
literal|"SQL_DATA_TYPE"
argument_list|,
literal|"SQL_DATETIME_SUB"
argument_list|,
literal|"CHAR_OCTET_LENGTH"
argument_list|,
literal|"ORDINAL_POSITION"
argument_list|,
literal|"IS_NULLABLE"
argument_list|,
literal|"SCOPE_CATLOG"
argument_list|,
literal|"SCOPE_SCHEMA"
argument_list|,
literal|"SCOPE_TABLE"
argument_list|,
literal|"SOURCE_DATA_TYPE"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"I32"
argument_list|,
literal|"STRING"
argument_list|,
literal|"I32"
argument_list|,
literal|"I32"
argument_list|,
literal|"I32"
argument_list|,
literal|"I32"
argument_list|,
literal|"I32"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"I32"
argument_list|,
literal|"I32"
argument_list|,
literal|"I32"
argument_list|,
literal|"I32"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"I32"
argument_list|)
argument_list|,
name|columns
argument_list|)
block|{
specifier|private
name|int
name|cnt
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|cnt
operator|<
name|data
operator|.
name|size
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|a
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|JdbcColumn
name|column
init|=
name|data
operator|.
name|get
argument_list|(
name|cnt
argument_list|)
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
name|column
operator|.
name|getTableCatalog
argument_list|()
argument_list|)
expr_stmt|;
comment|// TABLE_CAT String => table catalog (may be null)
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// TABLE_SCHEM String => table schema (may be null)
name|a
operator|.
name|add
argument_list|(
name|column
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// TABLE_NAME String => table name
name|a
operator|.
name|add
argument_list|(
name|column
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
comment|// COLUMN_NAME String => column name
name|a
operator|.
name|add
argument_list|(
name|column
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
comment|// DATA_TYPE short => SQL type from java.sql.Types
name|a
operator|.
name|add
argument_list|(
name|column
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// TYPE_NAME String => Data source dependent type name.
name|a
operator|.
name|add
argument_list|(
name|column
operator|.
name|getColumnSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// COLUMN_SIZE int => column size.
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// BUFFER_LENGTH is not used.
name|a
operator|.
name|add
argument_list|(
name|column
operator|.
name|getDecimalDigits
argument_list|()
argument_list|)
expr_stmt|;
comment|// DECIMAL_DIGITS int => number of fractional digits
name|a
operator|.
name|add
argument_list|(
name|column
operator|.
name|getNumPrecRadix
argument_list|()
argument_list|)
expr_stmt|;
comment|// NUM_PREC_RADIX int => typically either 10 or 2
name|a
operator|.
name|add
argument_list|(
name|DatabaseMetaData
operator|.
name|columnNullable
argument_list|)
expr_stmt|;
comment|// NULLABLE int => is NULL allowed?
name|a
operator|.
name|add
argument_list|(
name|column
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
comment|// REMARKS String => comment describing column (may be null)
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// COLUMN_DEF String => default value (may be null)
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// SQL_DATA_TYPE int => unused
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// SQL_DATETIME_SUB int => unused
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// CHAR_OCTET_LENGTH int
name|a
operator|.
name|add
argument_list|(
name|column
operator|.
name|getOrdinalPos
argument_list|()
argument_list|)
expr_stmt|;
comment|// ORDINAL_POSITION int
name|a
operator|.
name|add
argument_list|(
literal|"YES"
argument_list|)
expr_stmt|;
comment|// IS_NULLABLE String
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// SCOPE_CATLOG String
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// SCOPE_SCHEMA String
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// SCOPE_TABLE String
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// SOURCE_DATA_TYPE short
name|row
operator|=
name|a
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * We sort the output of getColumns to guarantee jdbc compliance.    * First check by table name then by ordinal position    */
specifier|private
class|class
name|GetColumnsComparator
implements|implements
name|Comparator
argument_list|<
name|JdbcColumn
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JdbcColumn
name|o1
parameter_list|,
name|JdbcColumn
name|o2
parameter_list|)
block|{
name|int
name|compareName
init|=
name|o1
operator|.
name|getTableName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareName
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|o1
operator|.
name|getOrdinalPos
argument_list|()
operator|>
name|o2
operator|.
name|getOrdinalPos
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|getOrdinalPos
argument_list|()
operator|<
name|o2
operator|.
name|getOrdinalPos
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|compareName
return|;
block|}
block|}
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getCrossReference
parameter_list|(
name|String
name|primaryCatalog
parameter_list|,
name|String
name|primarySchema
parameter_list|,
name|String
name|primaryTable
parameter_list|,
name|String
name|foreignCatalog
parameter_list|,
name|String
name|foreignSchema
parameter_list|,
name|String
name|foreignTable
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getDatabaseMajorVersion
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getDatabaseMinorVersion
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getDatabaseProductName
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|"Hive"
return|;
block|}
specifier|public
name|String
name|getDatabaseProductVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|"0"
return|;
block|}
specifier|public
name|int
name|getDefaultTransactionIsolation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|Connection
operator|.
name|TRANSACTION_NONE
return|;
block|}
specifier|public
name|int
name|getDriverMajorVersion
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getDriverMinorVersion
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|String
name|getDriverName
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|fetchManifestAttribute
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|IMPLEMENTATION_TITLE
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDriverVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|fetchManifestAttribute
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|IMPLEMENTATION_VERSION
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getExportedKeys
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getExtraNameCharacters
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getFunctionColumns
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|,
name|String
name|arg2
parameter_list|,
name|String
name|arg3
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getFunctions
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|,
name|String
name|arg2
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getIdentifierQuoteString
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getImportedKeys
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getIndexInfo
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|boolean
name|unique
parameter_list|,
name|boolean
name|approximate
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getJDBCMajorVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|3
return|;
block|}
specifier|public
name|int
name|getJDBCMinorVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxBinaryLiteralLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxCatalogNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxCharLiteralLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/**    *  Returns the value of maxColumnNameLength.    *    *  @param int    */
specifier|public
name|int
name|getMaxColumnNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|maxColumnNameLength
return|;
block|}
specifier|public
name|int
name|getMaxColumnsInGroupBy
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxColumnsInIndex
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxColumnsInOrderBy
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxColumnsInSelect
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxColumnsInTable
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxConnections
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxCursorNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxIndexLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxProcedureNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxRowSize
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxSchemaNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxStatementLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxStatements
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxTableNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxTablesInSelect
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxUserNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getNumericFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|ResultSet
name|getPrimaryKeys
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getProcedureColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|procedureNamePattern
parameter_list|,
name|String
name|columnNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getProcedureTerm
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getProcedures
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|procedureNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getResultSetHoldability
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|RowIdLifetime
name|getRowIdLifetime
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getSQLKeywords
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getSQLStateType
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|DatabaseMetaData
operator|.
name|sqlStateSQL99
return|;
block|}
specifier|public
name|String
name|getSchemaTerm
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|ResultSet
name|getSchemas
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|getSchemas
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getSchemas
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
operator|new
name|HiveMetaDataResultSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TABLE_SCHEM"
argument_list|,
literal|"TABLE_CATALOG"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|)
argument_list|,
literal|null
argument_list|)
block|{
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
specifier|public
name|String
name|getSearchStringEscape
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getStringFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|ResultSet
name|getSuperTables
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|tableNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getSuperTypes
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|typeNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getSystemFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|ResultSet
name|getTablePrivileges
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|tableNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getTableTypes
parameter_list|()
throws|throws
name|SQLException
block|{
specifier|final
name|TableType
index|[]
name|tt
init|=
name|TableType
operator|.
name|values
argument_list|()
decl_stmt|;
name|ResultSet
name|result
init|=
operator|new
name|HiveMetaDataResultSet
argument_list|<
name|TableType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TABLE_TYPE"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STRING"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TableType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tt
argument_list|)
argument_list|)
argument_list|)
block|{
specifier|private
name|int
name|cnt
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|cnt
operator|<
name|data
operator|.
name|size
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|a
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
name|toJdbcTableType
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|cnt
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
name|a
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|ResultSet
name|getTables
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|tableNamePattern
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|tablesstr
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JdbcTable
argument_list|>
name|resultTables
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|final
name|String
name|resultCatalog
decl_stmt|;
if|if
condition|(
name|catalog
operator|==
literal|null
condition|)
block|{
comment|// On jdbc the default catalog is null but on hive it's "default"
name|resultCatalog
operator|=
literal|"default"
expr_stmt|;
block|}
else|else
block|{
name|resultCatalog
operator|=
name|catalog
expr_stmt|;
block|}
name|String
name|regtableNamePattern
init|=
name|convertPattern
argument_list|(
name|tableNamePattern
argument_list|)
decl_stmt|;
try|try
block|{
name|tablesstr
operator|=
name|client
operator|.
name|get_tables
argument_list|(
name|resultCatalog
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tablestr
range|:
name|tablesstr
control|)
block|{
if|if
condition|(
name|tablestr
operator|.
name|matches
argument_list|(
name|regtableNamePattern
argument_list|)
condition|)
block|{
name|Table
name|tbl
init|=
name|client
operator|.
name|get_table
argument_list|(
name|resultCatalog
argument_list|,
name|tablestr
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|==
literal|null
condition|)
block|{
name|resultTables
operator|.
name|add
argument_list|(
operator|new
name|JdbcTable
argument_list|(
name|resultCatalog
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableType
argument_list|()
argument_list|,
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tableType
init|=
name|toJdbcTableType
argument_list|(
name|tbl
operator|.
name|getTableType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
name|resultTables
operator|.
name|add
argument_list|(
operator|new
name|JdbcTable
argument_list|(
name|resultCatalog
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableType
argument_list|()
argument_list|,
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|resultTables
argument_list|,
operator|new
name|GetTablesComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ResultSet
name|result
init|=
operator|new
name|HiveMetaDataResultSet
argument_list|<
name|JdbcTable
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TABLE_CAT"
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
literal|"TABLE_NAME"
argument_list|,
literal|"TABLE_TYPE"
argument_list|,
literal|"REMARKS"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|)
argument_list|,
name|resultTables
argument_list|)
block|{
specifier|private
name|int
name|cnt
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|cnt
operator|<
name|data
operator|.
name|size
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|a
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|JdbcTable
name|table
init|=
name|data
operator|.
name|get
argument_list|(
name|cnt
argument_list|)
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
name|table
operator|.
name|getTableCatalog
argument_list|()
argument_list|)
expr_stmt|;
comment|// TABLE_CAT String => table catalog (may be null)
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// TABLE_SCHEM String => table schema (may be null)
name|a
operator|.
name|add
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// TABLE_NAME String => table name
try|try
block|{
name|a
operator|.
name|add
argument_list|(
name|table
operator|.
name|getSqlTableType
argument_list|()
argument_list|)
expr_stmt|;
comment|// TABLE_TYPE String => "TABLE","VIEW"
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|a
operator|.
name|add
argument_list|(
name|table
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
comment|// REMARKS String => explanatory comment on the table
name|row
operator|=
name|a
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * We sort the output of getTables to guarantee jdbc compliance.    * First check by table type then by table name    */
specifier|private
class|class
name|GetTablesComparator
implements|implements
name|Comparator
argument_list|<
name|JdbcTable
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JdbcTable
name|o1
parameter_list|,
name|JdbcTable
name|o2
parameter_list|)
block|{
name|int
name|compareType
init|=
name|o1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareType
operator|==
literal|0
condition|)
block|{
return|return
name|o1
operator|.
name|getTableName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|compareType
return|;
block|}
block|}
block|}
comment|/**    * Translate hive table types into jdbc table types.    * @param hivetabletype    * @return    */
specifier|public
specifier|static
name|String
name|toJdbcTableType
parameter_list|(
name|String
name|hivetabletype
parameter_list|)
block|{
if|if
condition|(
name|hivetabletype
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|hivetabletype
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"TABLE"
return|;
block|}
elseif|else
if|if
condition|(
name|hivetabletype
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"VIEW"
return|;
block|}
elseif|else
if|if
condition|(
name|hivetabletype
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"EXTERNAL TABLE"
return|;
block|}
else|else
block|{
return|return
name|hivetabletype
return|;
block|}
block|}
specifier|public
name|String
name|getTimeDateFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|ResultSet
name|getTypeInfo
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getUDTs
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|typeNamePattern
parameter_list|,
name|int
index|[]
name|types
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
operator|new
name|HiveMetaDataResultSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TYPE_CAT"
argument_list|,
literal|"TYPE_SCHEM"
argument_list|,
literal|"TYPE_NAME"
argument_list|,
literal|"CLASS_NAME"
argument_list|,
literal|"DATA_TYPE"
argument_list|,
literal|"REMARKS"
argument_list|,
literal|"BASE_TYPE"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"I32"
argument_list|,
literal|"STRING"
argument_list|,
literal|"I32"
argument_list|)
argument_list|,
literal|null
argument_list|)
block|{
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
specifier|public
name|String
name|getURL
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getUserName
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getVersionColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|insertsAreDetected
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isCatalogAtStart
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|locatorsUpdateCopy
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|nullPlusNonNullIsNull
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|nullsAreSortedAtEnd
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|nullsAreSortedAtStart
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|nullsAreSortedHigh
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|nullsAreSortedLow
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|othersDeletesAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|othersInsertsAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|othersUpdatesAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|ownDeletesAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|ownInsertsAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|ownUpdatesAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|storesLowerCaseIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|storesLowerCaseQuotedIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|storesMixedCaseIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|storesMixedCaseQuotedIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|storesUpperCaseIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|storesUpperCaseQuotedIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsANSI92EntryLevelSQL
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsANSI92FullSQL
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsANSI92IntermediateSQL
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsAlterTableWithAddColumn
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsAlterTableWithDropColumn
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsBatchUpdates
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInDataManipulation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInIndexDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInPrivilegeDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInProcedureCalls
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInTableDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsColumnAliasing
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsConvert
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsConvert
parameter_list|(
name|int
name|fromType
parameter_list|,
name|int
name|toType
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsCoreSQLGrammar
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsCorrelatedSubqueries
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsDataDefinitionAndDataManipulationTransactions
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsDataManipulationTransactionsOnly
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsDifferentTableCorrelationNames
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsExpressionsInOrderBy
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsExtendedSQLGrammar
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsFullOuterJoins
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsGetGeneratedKeys
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsGroupBy
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsGroupByBeyondSelect
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsGroupByUnrelated
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsIntegrityEnhancementFacility
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsLikeEscapeClause
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsLimitedOuterJoins
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsMinimumSQLGrammar
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsMixedCaseIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsMixedCaseQuotedIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsMultipleOpenResults
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsMultipleResultSets
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsMultipleTransactions
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsNamedParameters
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsNonNullableColumns
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsOpenCursorsAcrossCommit
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsOpenCursorsAcrossRollback
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsOpenStatementsAcrossCommit
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsOpenStatementsAcrossRollback
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsOrderByUnrelated
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsOuterJoins
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsPositionedDelete
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsPositionedUpdate
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsResultSetConcurrency
parameter_list|(
name|int
name|type
parameter_list|,
name|int
name|concurrency
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsResultSetHoldability
parameter_list|(
name|int
name|holdability
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsResultSetType
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsSavepoints
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInDataManipulation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInIndexDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInPrivilegeDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInProcedureCalls
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInTableDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSelectForUpdate
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsStatementPooling
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsStoredFunctionsUsingCallSyntax
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsStoredProcedures
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSubqueriesInComparisons
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsSubqueriesInExists
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsSubqueriesInIns
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsSubqueriesInQuantifieds
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsTableCorrelationNames
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsTransactionIsolationLevel
parameter_list|(
name|int
name|level
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsTransactions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsUnion
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsUnionAll
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|updatesAreDetected
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|usesLocalFilePerTable
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|usesLocalFiles
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/**    * Lazy-load manifest attributes as needed.    */
specifier|private
specifier|static
name|Attributes
name|manifestAttributes
init|=
literal|null
decl_stmt|;
comment|/**    * Loads the manifest attributes from the jar.    *     * @throws java.net.MalformedURLException    * @throws IOException    */
specifier|private
specifier|synchronized
name|void
name|loadManifestAttributes
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|manifestAttributes
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|Class
name|clazz
init|=
name|this
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|String
name|classContainer
init|=
name|clazz
operator|.
name|getProtectionDomain
argument_list|()
operator|.
name|getCodeSource
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|URL
name|manifestUrl
init|=
operator|new
name|URL
argument_list|(
literal|"jar:"
operator|+
name|classContainer
operator|+
literal|"!/META-INF/MANIFEST.MF"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|(
name|manifestUrl
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|manifestAttributes
operator|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
expr_stmt|;
block|}
comment|/**    * Helper to initialize attributes and return one.    *     * @param attributeName    * @return    * @throws SQLException    */
specifier|private
name|String
name|fetchManifestAttribute
parameter_list|(
name|Attributes
operator|.
name|Name
name|attributeName
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|loadManifestAttributes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Couldn't load manifest attributes."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|manifestAttributes
operator|.
name|getValue
argument_list|(
name|attributeName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|SQLException
block|{
name|HiveDatabaseMetaData
name|meta
init|=
operator|new
name|HiveDatabaseMetaData
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DriverName: "
operator|+
name|meta
operator|.
name|getDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DriverVersion: "
operator|+
name|meta
operator|.
name|getDriverVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

