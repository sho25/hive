begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TStatusCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|CookieStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|Utils
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Utils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**     * The required prefix for the connection URL.     */
specifier|public
specifier|static
specifier|final
name|String
name|URL_PREFIX
init|=
literal|"jdbc:hive2://"
decl_stmt|;
comment|/**     * If host is provided, without a port.     */
specifier|static
specifier|final
name|String
name|DEFAULT_PORT
init|=
literal|"10000"
decl_stmt|;
comment|/**    * Hive's default database name    */
specifier|static
specifier|final
name|String
name|DEFAULT_DATABASE
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URI_JDBC_PREFIX
init|=
literal|"jdbc:"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URI_HIVE_PREFIX
init|=
literal|"hive2:"
decl_stmt|;
comment|// This value is set to true by the setServiceUnavailableRetryStrategy() when the server returns 401
specifier|static
specifier|final
name|String
name|HIVE_SERVER2_RETRY_KEY
init|=
literal|"hive.server2.retryserver"
decl_stmt|;
specifier|static
specifier|final
name|String
name|HIVE_SERVER2_RETRY_TRUE
init|=
literal|"true"
decl_stmt|;
specifier|static
specifier|final
name|String
name|HIVE_SERVER2_RETRY_FALSE
init|=
literal|"false"
decl_stmt|;
specifier|public
specifier|static
class|class
name|JdbcConnectionParams
block|{
comment|// Note on client side parameter naming convention:
comment|// Prefer using a shorter camelCase param name instead of using the same name as the
comment|// corresponding
comment|// HiveServer2 config.
comment|// For a jdbc url: jdbc:hive2://<host>:<port>/dbName;sess_var_list?hive_conf_list#hive_var_list,
comment|// client side params are specified in sess_var_list
comment|// Client param names:
comment|// Retry setting
specifier|static
specifier|final
name|String
name|RETRIES
init|=
literal|"retries"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_TYPE
init|=
literal|"auth"
decl_stmt|;
comment|// We're deprecating this variable's name.
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_QOP_DEPRECATED
init|=
literal|"sasl.qop"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_QOP
init|=
literal|"saslQop"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_SIMPLE
init|=
literal|"noSasl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_TOKEN
init|=
literal|"delegationToken"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_USER
init|=
literal|"user"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_PRINCIPAL
init|=
literal|"principal"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_PASSWD
init|=
literal|"password"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_KERBEROS_AUTH_TYPE
init|=
literal|"kerberosAuthType"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_KERBEROS_AUTH_TYPE_FROM_SUBJECT
init|=
literal|"fromSubject"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ANONYMOUS_USER
init|=
literal|"anonymous"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ANONYMOUS_PASSWD
init|=
literal|"anonymous"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|USE_SSL
init|=
literal|"ssl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SSL_TRUST_STORE
init|=
literal|"sslTrustStore"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SSL_TRUST_STORE_PASSWORD
init|=
literal|"trustStorePassword"
decl_stmt|;
comment|// We're deprecating the name and placement of this in the parsed map (from hive conf vars to
comment|// hive session vars).
specifier|static
specifier|final
name|String
name|TRANSPORT_MODE_DEPRECATED
init|=
literal|"hive.server2.transport.mode"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRANSPORT_MODE
init|=
literal|"transportMode"
decl_stmt|;
comment|// We're deprecating the name and placement of this in the parsed map (from hive conf vars to
comment|// hive session vars).
specifier|static
specifier|final
name|String
name|HTTP_PATH_DEPRECATED
init|=
literal|"hive.server2.thrift.http.path"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_PATH
init|=
literal|"httpPath"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_DISCOVERY_MODE
init|=
literal|"serviceDiscoveryMode"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_DRIVER
init|=
literal|"driver"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_URL
init|=
literal|"url"
decl_stmt|;
comment|// Don't use dynamic service discovery
specifier|static
specifier|final
name|String
name|SERVICE_DISCOVERY_MODE_NONE
init|=
literal|"none"
decl_stmt|;
comment|// Use ZooKeeper for indirection while using dynamic service discovery
specifier|static
specifier|final
name|String
name|SERVICE_DISCOVERY_MODE_ZOOKEEPER
init|=
literal|"zooKeeper"
decl_stmt|;
specifier|static
specifier|final
name|String
name|ZOOKEEPER_NAMESPACE
init|=
literal|"zooKeeperNamespace"
decl_stmt|;
comment|// Default namespace value on ZooKeeper.
comment|// This value is used if the param "zooKeeperNamespace" is not specified in the JDBC Uri.
specifier|static
specifier|final
name|String
name|ZOOKEEPER_DEFAULT_NAMESPACE
init|=
literal|"hiveserver2"
decl_stmt|;
specifier|static
specifier|final
name|String
name|COOKIE_AUTH
init|=
literal|"cookieAuth"
decl_stmt|;
specifier|static
specifier|final
name|String
name|COOKIE_AUTH_FALSE
init|=
literal|"false"
decl_stmt|;
specifier|static
specifier|final
name|String
name|COOKIE_NAME
init|=
literal|"cookieName"
decl_stmt|;
comment|// The default value of the cookie name when CookieAuth=true
specifier|static
specifier|final
name|String
name|DEFAULT_COOKIE_NAMES_HS2
init|=
literal|"hive.server2.auth"
decl_stmt|;
comment|// The http header prefix for additional headers which have to be appended to the request
specifier|static
specifier|final
name|String
name|HTTP_HEADER_PREFIX
init|=
literal|"http.header."
decl_stmt|;
comment|// Set the fetchSize
specifier|static
specifier|final
name|String
name|FETCH_SIZE
init|=
literal|"fetchSize"
decl_stmt|;
comment|// --------------- Begin 2 way ssl options -------------------------
comment|// Use two way ssl. This param will take effect only when ssl=true
specifier|static
specifier|final
name|String
name|USE_TWO_WAY_SSL
init|=
literal|"twoWay"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TRUE
init|=
literal|"true"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SSL_KEY_STORE
init|=
literal|"sslKeyStore"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SSL_KEY_STORE_PASSWORD
init|=
literal|"keyStorePassword"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SSL_KEY_STORE_TYPE
init|=
literal|"JKS"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SUNX509_ALGORITHM_STRING
init|=
literal|"SunX509"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SUNJSSE_ALGORITHM_STRING
init|=
literal|"SunJSSE"
decl_stmt|;
comment|// --------------- End 2 way ssl options ----------------------------
comment|// Non-configurable params:
comment|// Currently supports JKS keystore format
specifier|static
specifier|final
name|String
name|SSL_TRUST_STORE_TYPE
init|=
literal|"JKS"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_VAR_PREFIX
init|=
literal|"hivevar:"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_CONF_PREFIX
init|=
literal|"hiveconf:"
decl_stmt|;
specifier|private
name|String
name|host
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|port
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|jdbcUriString
decl_stmt|;
specifier|private
name|String
name|dbName
init|=
name|DEFAULT_DATABASE
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveConfs
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveVars
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sessionVars
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isEmbeddedMode
init|=
literal|false
decl_stmt|;
specifier|private
name|String
index|[]
name|authorityList
decl_stmt|;
specifier|private
name|String
name|zooKeeperEnsemble
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|currentHostZnodePath
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|rejectedHostZnodePaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|JdbcConnectionParams
parameter_list|()
block|{     }
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
specifier|public
name|String
name|getJdbcUriString
parameter_list|()
block|{
return|return
name|jdbcUriString
return|;
block|}
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|dbName
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveConfs
parameter_list|()
block|{
return|return
name|hiveConfs
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVars
parameter_list|()
block|{
return|return
name|hiveVars
return|;
block|}
specifier|public
name|boolean
name|isEmbeddedMode
parameter_list|()
block|{
return|return
name|isEmbeddedMode
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSessionVars
parameter_list|()
block|{
return|return
name|sessionVars
return|;
block|}
specifier|public
name|String
index|[]
name|getAuthorityList
parameter_list|()
block|{
return|return
name|authorityList
return|;
block|}
specifier|public
name|String
name|getZooKeeperEnsemble
parameter_list|()
block|{
return|return
name|zooKeeperEnsemble
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRejectedHostZnodePaths
parameter_list|()
block|{
return|return
name|rejectedHostZnodePaths
return|;
block|}
specifier|public
name|String
name|getCurrentHostZnodePath
parameter_list|()
block|{
return|return
name|currentHostZnodePath
return|;
block|}
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
specifier|public
name|void
name|setJdbcUriString
parameter_list|(
name|String
name|jdbcUriString
parameter_list|)
block|{
name|this
operator|.
name|jdbcUriString
operator|=
name|jdbcUriString
expr_stmt|;
block|}
specifier|public
name|void
name|setDbName
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
block|}
specifier|public
name|void
name|setHiveConfs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveConfs
parameter_list|)
block|{
name|this
operator|.
name|hiveConfs
operator|=
name|hiveConfs
expr_stmt|;
block|}
specifier|public
name|void
name|setHiveVars
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveVars
parameter_list|)
block|{
name|this
operator|.
name|hiveVars
operator|=
name|hiveVars
expr_stmt|;
block|}
specifier|public
name|void
name|setEmbeddedMode
parameter_list|(
name|boolean
name|embeddedMode
parameter_list|)
block|{
name|this
operator|.
name|isEmbeddedMode
operator|=
name|embeddedMode
expr_stmt|;
block|}
specifier|public
name|void
name|setSessionVars
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sessionVars
parameter_list|)
block|{
name|this
operator|.
name|sessionVars
operator|=
name|sessionVars
expr_stmt|;
block|}
specifier|public
name|void
name|setSuppliedAuthorityList
parameter_list|(
name|String
index|[]
name|authorityList
parameter_list|)
block|{
name|this
operator|.
name|authorityList
operator|=
name|authorityList
expr_stmt|;
block|}
specifier|public
name|void
name|setZooKeeperEnsemble
parameter_list|(
name|String
name|zooKeeperEnsemble
parameter_list|)
block|{
name|this
operator|.
name|zooKeeperEnsemble
operator|=
name|zooKeeperEnsemble
expr_stmt|;
block|}
specifier|public
name|void
name|setCurrentHostZnodePath
parameter_list|(
name|String
name|currentHostZnodePath
parameter_list|)
block|{
name|this
operator|.
name|currentHostZnodePath
operator|=
name|currentHostZnodePath
expr_stmt|;
block|}
block|}
comment|// Verify success or success_with_info status, else throw SQLException
specifier|static
name|void
name|verifySuccessWithInfo
parameter_list|(
name|TStatus
name|status
parameter_list|)
throws|throws
name|SQLException
block|{
name|verifySuccess
argument_list|(
name|status
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Verify success status, else throw SQLException
specifier|static
name|void
name|verifySuccess
parameter_list|(
name|TStatus
name|status
parameter_list|)
throws|throws
name|SQLException
block|{
name|verifySuccess
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Verify success and optionally with_info status, else throw SQLException
specifier|static
name|void
name|verifySuccess
parameter_list|(
name|TStatus
name|status
parameter_list|,
name|boolean
name|withInfo
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|status
operator|.
name|getStatusCode
argument_list|()
operator|==
name|TStatusCode
operator|.
name|SUCCESS_STATUS
operator|||
operator|(
name|withInfo
operator|&&
name|status
operator|.
name|getStatusCode
argument_list|()
operator|==
name|TStatusCode
operator|.
name|SUCCESS_WITH_INFO_STATUS
operator|)
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|HiveSQLException
argument_list|(
name|status
argument_list|)
throw|;
block|}
comment|/**    * Parse JDBC connection URL    * The new format of the URL is:    * jdbc:hive2://<host1>:<port1>,<host2>:<port2>/dbName;sess_var_list?hive_conf_list#hive_var_list    * where the optional sess, conf and var lists are semicolon separated<key>=<val> pairs.    * For utilizing dynamic service discovery with HiveServer2 multiple comma separated host:port pairs can    * be specified as shown above.    * The JDBC driver resolves the list of uris and picks a specific server instance to connect to.    * Currently, dynamic service discovery using ZooKeeper is supported, in which case the host:port pairs represent a ZooKeeper ensemble.    *    * As before, if the host/port is not specified, it the driver runs an embedded hive.    * examples -    *  jdbc:hive2://ubuntu:11000/db2?hive.cli.conf.printheader=true;hive.exec.mode.local.auto.inputbytes.max=9999#stab=salesTable;icol=customerID    *  jdbc:hive2://?hive.cli.conf.printheader=true;hive.exec.mode.local.auto.inputbytes.max=9999#stab=salesTable;icol=customerID    *  jdbc:hive2://ubuntu:11000/db2;user=foo;password=bar    *    *  Connect to http://server:10001/hs2, with specified basicAuth credentials and initial database:    *  jdbc:hive2://server:10001/db;user=foo;password=bar?hive.server2.transport.mode=http;hive.server2.thrift.http.path=hs2    *    * @param uri    * @return    * @throws SQLException    */
specifier|static
name|JdbcConnectionParams
name|parseURL
parameter_list|(
name|String
name|uri
parameter_list|,
name|Properties
name|info
parameter_list|)
throws|throws
name|JdbcUriParseException
throws|,
name|SQLException
throws|,
name|ZooKeeperHiveClientException
block|{
name|JdbcConnectionParams
name|connParams
init|=
operator|new
name|JdbcConnectionParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|uri
operator|.
name|startsWith
argument_list|(
name|URL_PREFIX
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JdbcUriParseException
argument_list|(
literal|"Bad URL format: Missing prefix "
operator|+
name|URL_PREFIX
argument_list|)
throw|;
block|}
comment|// For URLs with no other configuration
comment|// Don't parse them, but set embedded mode as true
if|if
condition|(
name|uri
operator|.
name|equalsIgnoreCase
argument_list|(
name|URL_PREFIX
argument_list|)
condition|)
block|{
name|connParams
operator|.
name|setEmbeddedMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|connParams
return|;
block|}
comment|// The JDBC URI now supports specifying multiple host:port if dynamic service discovery is
comment|// configured on HiveServer2 (like: host1:port1,host2:port2,host3:port3)
comment|// We'll extract the authorities (host:port combo) from the URI, extract session vars, hive
comment|// confs& hive vars by parsing it as a Java URI.
comment|// To parse the intermediate URI as a Java URI, we'll give a dummy authority(dummy:00000).
comment|// Later, we'll substitute the dummy authority for a resolved authority.
name|String
name|dummyAuthorityString
init|=
literal|"dummyhost:00000"
decl_stmt|;
name|String
name|suppliedAuthorities
init|=
name|getAuthorities
argument_list|(
name|uri
argument_list|,
name|connParams
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|suppliedAuthorities
operator|==
literal|null
operator|)
operator|||
operator|(
name|suppliedAuthorities
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// Given uri of the form:
comment|// jdbc:hive2:///dbName;sess_var_list?hive_conf_list#hive_var_list
name|connParams
operator|.
name|setEmbeddedMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Supplied authorities: "
operator|+
name|suppliedAuthorities
argument_list|)
expr_stmt|;
name|String
index|[]
name|authorityList
init|=
name|suppliedAuthorities
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|connParams
operator|.
name|setSuppliedAuthorityList
argument_list|(
name|authorityList
argument_list|)
expr_stmt|;
name|uri
operator|=
name|uri
operator|.
name|replace
argument_list|(
name|suppliedAuthorities
argument_list|,
name|dummyAuthorityString
argument_list|)
expr_stmt|;
block|}
comment|// Now parse the connection uri with dummy authority
name|URI
name|jdbcURI
init|=
name|URI
operator|.
name|create
argument_list|(
name|uri
operator|.
name|substring
argument_list|(
name|URI_JDBC_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// key=value pattern
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([^;]*)=([^;]*)[;]?"
argument_list|)
decl_stmt|;
comment|// dbname and session settings
name|String
name|sessVars
init|=
name|jdbcURI
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|sessVars
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|sessVars
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|dbName
init|=
literal|""
decl_stmt|;
comment|// removing leading '/' returned by getPath()
name|sessVars
operator|=
name|sessVars
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sessVars
operator|.
name|contains
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
comment|// only dbname is provided
name|dbName
operator|=
name|sessVars
expr_stmt|;
block|}
else|else
block|{
comment|// we have dbname followed by session parameters
name|dbName
operator|=
name|sessVars
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sessVars
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
argument_list|)
expr_stmt|;
name|sessVars
operator|=
name|sessVars
operator|.
name|substring
argument_list|(
name|sessVars
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessVars
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|sessMatcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|sessVars
argument_list|)
decl_stmt|;
while|while
condition|(
name|sessMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|connParams
operator|.
name|getSessionVars
argument_list|()
operator|.
name|put
argument_list|(
name|sessMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|,
name|sessMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|JdbcUriParseException
argument_list|(
literal|"Bad URL format: Multiple values for property "
operator|+
name|sessMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|dbName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|connParams
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// parse hive conf settings
name|String
name|confStr
init|=
name|jdbcURI
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|confStr
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|confMatcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|confStr
argument_list|)
decl_stmt|;
while|while
condition|(
name|confMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|connParams
operator|.
name|getHiveConfs
argument_list|()
operator|.
name|put
argument_list|(
name|confMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|,
name|confMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// parse hive var settings
name|String
name|varStr
init|=
name|jdbcURI
operator|.
name|getFragment
argument_list|()
decl_stmt|;
if|if
condition|(
name|varStr
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|varMatcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|varStr
argument_list|)
decl_stmt|;
while|while
condition|(
name|varMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|connParams
operator|.
name|getHiveVars
argument_list|()
operator|.
name|put
argument_list|(
name|varMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|,
name|varMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Apply configs supplied in the JDBC connection properties object
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|kv
range|:
name|info
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|kv
operator|.
name|getKey
argument_list|()
operator|instanceof
name|String
operator|)
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|kv
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|JdbcConnectionParams
operator|.
name|HIVE_VAR_PREFIX
argument_list|)
condition|)
block|{
name|connParams
operator|.
name|getHiveVars
argument_list|()
operator|.
name|put
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|JdbcConnectionParams
operator|.
name|HIVE_VAR_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|info
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|JdbcConnectionParams
operator|.
name|HIVE_CONF_PREFIX
argument_list|)
condition|)
block|{
name|connParams
operator|.
name|getHiveConfs
argument_list|()
operator|.
name|put
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|JdbcConnectionParams
operator|.
name|HIVE_CONF_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|info
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Extract user/password from JDBC connection properties if its not supplied
comment|// in the connection URL
if|if
condition|(
operator|!
name|connParams
operator|.
name|getSessionVars
argument_list|()
operator|.
name|containsKey
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_USER
argument_list|)
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|containsKey
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_USER
argument_list|)
condition|)
block|{
name|connParams
operator|.
name|getSessionVars
argument_list|()
operator|.
name|put
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_USER
argument_list|,
name|info
operator|.
name|getProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|containsKey
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_PASSWD
argument_list|)
condition|)
block|{
name|connParams
operator|.
name|getSessionVars
argument_list|()
operator|.
name|put
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_PASSWD
argument_list|,
name|info
operator|.
name|getProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_PASSWD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|info
operator|.
name|containsKey
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_TYPE
argument_list|)
condition|)
block|{
name|connParams
operator|.
name|getSessionVars
argument_list|()
operator|.
name|put
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_TYPE
argument_list|,
name|info
operator|.
name|getProperty
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Handle all deprecations here:
name|String
name|newUsage
decl_stmt|;
name|String
name|usageUrlBase
init|=
literal|"jdbc:hive2://<host>:<port>/dbName;"
decl_stmt|;
comment|// Handle deprecation of AUTH_QOP_DEPRECATED
name|newUsage
operator|=
name|usageUrlBase
operator|+
name|JdbcConnectionParams
operator|.
name|AUTH_QOP
operator|+
literal|"=<qop_value>"
expr_stmt|;
name|handleParamDeprecation
argument_list|(
name|connParams
operator|.
name|getSessionVars
argument_list|()
argument_list|,
name|connParams
operator|.
name|getSessionVars
argument_list|()
argument_list|,
name|JdbcConnectionParams
operator|.
name|AUTH_QOP_DEPRECATED
argument_list|,
name|JdbcConnectionParams
operator|.
name|AUTH_QOP
argument_list|,
name|newUsage
argument_list|)
expr_stmt|;
comment|// Handle deprecation of TRANSPORT_MODE_DEPRECATED
name|newUsage
operator|=
name|usageUrlBase
operator|+
name|JdbcConnectionParams
operator|.
name|TRANSPORT_MODE
operator|+
literal|"=<transport_mode_value>"
expr_stmt|;
name|handleParamDeprecation
argument_list|(
name|connParams
operator|.
name|getHiveConfs
argument_list|()
argument_list|,
name|connParams
operator|.
name|getSessionVars
argument_list|()
argument_list|,
name|JdbcConnectionParams
operator|.
name|TRANSPORT_MODE_DEPRECATED
argument_list|,
name|JdbcConnectionParams
operator|.
name|TRANSPORT_MODE
argument_list|,
name|newUsage
argument_list|)
expr_stmt|;
comment|// Handle deprecation of HTTP_PATH_DEPRECATED
name|newUsage
operator|=
name|usageUrlBase
operator|+
name|JdbcConnectionParams
operator|.
name|HTTP_PATH
operator|+
literal|"=<http_path_value>"
expr_stmt|;
name|handleParamDeprecation
argument_list|(
name|connParams
operator|.
name|getHiveConfs
argument_list|()
argument_list|,
name|connParams
operator|.
name|getSessionVars
argument_list|()
argument_list|,
name|JdbcConnectionParams
operator|.
name|HTTP_PATH_DEPRECATED
argument_list|,
name|JdbcConnectionParams
operator|.
name|HTTP_PATH
argument_list|,
name|newUsage
argument_list|)
expr_stmt|;
comment|// Extract host, port
if|if
condition|(
name|connParams
operator|.
name|isEmbeddedMode
argument_list|()
condition|)
block|{
comment|// In case of embedded mode we were supplied with an empty authority.
comment|// So we never substituted the authority with a dummy one.
name|connParams
operator|.
name|setHost
argument_list|(
name|jdbcURI
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|connParams
operator|.
name|setPort
argument_list|(
name|jdbcURI
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Configure host, port and params from ZooKeeper if used,
comment|// and substitute the dummy authority with a resolved one
name|configureConnParams
argument_list|(
name|connParams
argument_list|)
expr_stmt|;
comment|// We check for invalid host, port while configuring connParams with configureConnParams()
name|String
name|authorityStr
init|=
name|connParams
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|connParams
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Resolved authority: "
operator|+
name|authorityStr
argument_list|)
expr_stmt|;
name|uri
operator|=
name|uri
operator|.
name|replace
argument_list|(
name|dummyAuthorityString
argument_list|,
name|authorityStr
argument_list|)
expr_stmt|;
name|connParams
operator|.
name|setJdbcUriString
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|connParams
return|;
block|}
comment|/**    * Remove the deprecatedName param from the fromMap and put the key value in the toMap.    * Also log a deprecation message for the client.    * @param fromMap    * @param toMap    * @param deprecatedName    * @param newName    * @param newUsage    */
specifier|private
specifier|static
name|void
name|handleParamDeprecation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fromMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toMap
parameter_list|,
name|String
name|deprecatedName
parameter_list|,
name|String
name|newName
parameter_list|,
name|String
name|newUsage
parameter_list|)
block|{
if|if
condition|(
name|fromMap
operator|.
name|containsKey
argument_list|(
name|deprecatedName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"***** JDBC param deprecation *****"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"The use of "
operator|+
name|deprecatedName
operator|+
literal|" is deprecated."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Please use "
operator|+
name|newName
operator|+
literal|" like so: "
operator|+
name|newUsage
argument_list|)
expr_stmt|;
name|String
name|paramValue
init|=
name|fromMap
operator|.
name|remove
argument_list|(
name|deprecatedName
argument_list|)
decl_stmt|;
name|toMap
operator|.
name|put
argument_list|(
name|newName
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the authority string from the supplied uri, which could potentially contain multiple    * host:port pairs.    *    * @param uri    * @param connParams    * @return    * @throws JdbcUriParseException    */
specifier|private
specifier|static
name|String
name|getAuthorities
parameter_list|(
name|String
name|uri
parameter_list|,
name|JdbcConnectionParams
name|connParams
parameter_list|)
throws|throws
name|JdbcUriParseException
block|{
name|String
name|authorities
decl_stmt|;
comment|/**      * For a jdbc uri like:      * jdbc:hive2://<host1>:<port1>,<host2>:<port2>/dbName;sess_var_list?conf_list#var_list      * Extract the uri host:port list starting after "jdbc:hive2://",      * till the 1st "/" or "?" or "#" whichever comes first& in the given order      * Examples:      * jdbc:hive2://host1:port1,host2:port2,host3:port3/db;k1=v1?k2=v2#k3=v3      * jdbc:hive2://host1:port1,host2:port2,host3:port3/;k1=v1?k2=v2#k3=v3      * jdbc:hive2://host1:port1,host2:port2,host3:port3?k2=v2#k3=v3      * jdbc:hive2://host1:port1,host2:port2,host3:port3#k3=v3      */
name|int
name|fromIndex
init|=
name|Utils
operator|.
name|URL_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|toIndex
init|=
operator|-
literal|1
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|toIndexChars
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/"
argument_list|,
literal|"?"
argument_list|,
literal|"#"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|toIndexChar
range|:
name|toIndexChars
control|)
block|{
name|toIndex
operator|=
name|uri
operator|.
name|indexOf
argument_list|(
name|toIndexChar
argument_list|,
name|fromIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|toIndex
operator|>
literal|0
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|toIndex
operator|<
literal|0
condition|)
block|{
name|authorities
operator|=
name|uri
operator|.
name|substring
argument_list|(
name|fromIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorities
operator|=
name|uri
operator|.
name|substring
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
expr_stmt|;
block|}
return|return
name|authorities
return|;
block|}
specifier|private
specifier|static
name|void
name|configureConnParams
parameter_list|(
name|JdbcConnectionParams
name|connParams
parameter_list|)
throws|throws
name|JdbcUriParseException
throws|,
name|ZooKeeperHiveClientException
block|{
name|String
name|serviceDiscoveryMode
init|=
name|connParams
operator|.
name|getSessionVars
argument_list|()
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|SERVICE_DISCOVERY_MODE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|serviceDiscoveryMode
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|JdbcConnectionParams
operator|.
name|SERVICE_DISCOVERY_MODE_ZOOKEEPER
operator|.
name|equalsIgnoreCase
argument_list|(
name|serviceDiscoveryMode
argument_list|)
operator|)
condition|)
block|{
comment|// Set ZooKeeper ensemble in connParams for later use
name|connParams
operator|.
name|setZooKeeperEnsemble
argument_list|(
name|joinStringArray
argument_list|(
name|connParams
operator|.
name|getAuthorityList
argument_list|()
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
comment|// Configure using ZooKeeper
name|ZooKeeperHiveClientHelper
operator|.
name|configureConnParams
argument_list|(
name|connParams
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|authority
init|=
name|connParams
operator|.
name|getAuthorityList
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URI
name|jdbcURI
init|=
name|URI
operator|.
name|create
argument_list|(
name|URI_HIVE_PREFIX
operator|+
literal|"//"
operator|+
name|authority
argument_list|)
decl_stmt|;
comment|// Check to prevent unintentional use of embedded mode. A missing "/"
comment|// to separate the 'path' portion of URI can result in this.
comment|// The missing "/" common typo while using secure mode, eg of such url -
comment|// jdbc:hive2://localhost:10000;principal=hive/HiveServer2Host@YOUR-REALM.COM
if|if
condition|(
name|jdbcURI
operator|.
name|getAuthority
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|host
init|=
name|jdbcURI
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|jdbcURI
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JdbcUriParseException
argument_list|(
literal|"Bad URL format. Hostname not found "
operator|+
literal|" in authority part of the url: "
operator|+
name|jdbcURI
operator|.
name|getAuthority
argument_list|()
operator|+
literal|". Are you missing a '/' after the hostname ?"
argument_list|)
throw|;
block|}
comment|// Set the port to default value; we do support jdbc url like:
comment|// jdbc:hive2://localhost/db
if|if
condition|(
name|port
operator|<=
literal|0
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|Utils
operator|.
name|DEFAULT_PORT
argument_list|)
expr_stmt|;
block|}
name|connParams
operator|.
name|setHost
argument_list|(
name|jdbcURI
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|connParams
operator|.
name|setPort
argument_list|(
name|jdbcURI
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Read the next server coordinates (host:port combo) from ZooKeeper. Ignore the znodes already    * explored. Also update the host, port, jdbcUriString and other configs published by the server.    *    * @param connParams    * @return true if new server info is retrieved successfully    */
specifier|static
name|boolean
name|updateConnParamsFromZooKeeper
parameter_list|(
name|JdbcConnectionParams
name|connParams
parameter_list|)
block|{
comment|// Add current host to the rejected list
name|connParams
operator|.
name|getRejectedHostZnodePaths
argument_list|()
operator|.
name|add
argument_list|(
name|connParams
operator|.
name|getCurrentHostZnodePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|oldServerHost
init|=
name|connParams
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|oldServerPort
init|=
name|connParams
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|// Update connection params (including host, port) from ZooKeeper
try|try
block|{
name|ZooKeeperHiveClientHelper
operator|.
name|configureConnParams
argument_list|(
name|connParams
argument_list|)
expr_stmt|;
name|connParams
operator|.
name|setJdbcUriString
argument_list|(
name|connParams
operator|.
name|getJdbcUriString
argument_list|()
operator|.
name|replace
argument_list|(
name|oldServerHost
operator|+
literal|":"
operator|+
name|oldServerPort
argument_list|,
name|connParams
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|connParams
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Selected HiveServer2 instance with uri: "
operator|+
name|connParams
operator|.
name|getJdbcUriString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ZooKeeperHiveClientException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|String
name|joinStringArray
parameter_list|(
name|String
index|[]
name|stringArray
parameter_list|,
name|String
name|seperator
parameter_list|)
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|cur
init|=
literal|0
init|,
name|end
init|=
name|stringArray
operator|.
name|length
init|;
name|cur
operator|<
name|end
condition|;
name|cur
operator|++
control|)
block|{
if|if
condition|(
name|cur
operator|>
literal|0
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|seperator
argument_list|)
expr_stmt|;
block|}
name|stringBuilder
operator|.
name|append
argument_list|(
name|stringArray
index|[
name|cur
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Takes a version string delimited by '.' and '-' characters    * and returns a partial version.    *    * @param fullVersion    *          version string.    * @param position    *          position of version string to get starting at 0. eg, for a X.x.xxx    *          string, 0 will return the major version, 1 will return minor    *          version.    * @return version part, or -1 if version string was malformed.    */
specifier|static
name|int
name|getVersionPart
parameter_list|(
name|String
name|fullVersion
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|int
name|version
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|String
index|[]
name|tokens
init|=
name|fullVersion
operator|.
name|split
argument_list|(
literal|"[\\.-]"
argument_list|)
decl_stmt|;
comment|//$NON-NLS-1$
if|if
condition|(
name|tokens
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|length
operator|>
literal|1
operator|&&
name|tokens
index|[
name|position
index|]
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tokens
index|[
name|position
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|version
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|version
return|;
block|}
comment|/**    * The function iterates through the list of cookies in the cookiestore and tries to    * match them with the cookieName. If there is a match, the cookieStore already    * has a valid cookie and the client need not send Credentials for validation purpose.    * @param cookieStore The cookie Store    * @param cookieName Name of the cookie which needs to be validated    * @param isSSL Whether this is a http/https connection    * @return true or false based on whether the client needs to send the credentials or    * not to the server.    */
specifier|static
name|boolean
name|needToSendCredentials
parameter_list|(
name|CookieStore
name|cookieStore
parameter_list|,
name|String
name|cookieName
parameter_list|,
name|boolean
name|isSSL
parameter_list|)
block|{
if|if
condition|(
name|cookieName
operator|==
literal|null
operator|||
name|cookieStore
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|List
argument_list|<
name|Cookie
argument_list|>
name|cookies
init|=
name|cookieStore
operator|.
name|getCookies
argument_list|()
decl_stmt|;
for|for
control|(
name|Cookie
name|c
range|:
name|cookies
control|)
block|{
comment|// If this is a secured cookie and the current connection is non-secured,
comment|// then, skip this cookie. We need to skip this cookie because, the cookie
comment|// replay will not be transmitted to the server.
if|if
condition|(
name|c
operator|.
name|isSecure
argument_list|()
operator|&&
operator|!
name|isSSL
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|cookieName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|String
name|parsePropertyFromUrl
parameter_list|(
specifier|final
name|String
name|url
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
name|String
index|[]
name|tokens
init|=
name|url
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|token
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
name|key
operator|.
name|trim
argument_list|()
operator|+
literal|"="
argument_list|)
condition|)
block|{
return|return
name|token
operator|.
name|trim
argument_list|()
operator|.
name|substring
argument_list|(
operator|(
name|key
operator|.
name|trim
argument_list|()
operator|+
literal|"="
operator|)
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

