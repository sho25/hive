begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HttpAuthUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequestInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|CookieStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|protocol
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_comment
comment|/**  *  * Authentication interceptor which adds Base64 encoded payload,  * containing the username and kerberos service ticket,  * to the outgoing http request header.  *  */
end_comment

begin_class
specifier|public
class|class
name|HttpKerberosRequestInterceptor
implements|implements
name|HttpRequestInterceptor
block|{
name|String
name|principal
decl_stmt|;
name|String
name|host
decl_stmt|;
name|String
name|serverHttpUrl
decl_stmt|;
name|boolean
name|assumeSubject
decl_stmt|;
name|CookieStore
name|cookieStore
decl_stmt|;
name|boolean
name|isCookieEnabled
decl_stmt|;
comment|// NB: The purpose of isSSL flag is as follows:
comment|// This flag is useful when the HS2 server sends a secure cookie and
comment|// the client is in a non-ssl mode. Here, the client replay of the cookie
comment|// doesnt reach the server. If we don't send credentials in such a scenario,
comment|// the server  would send a 401 error back to the client.
comment|// Thus, we would need 2 cycles instead of 1 cycle to process an incoming request if
comment|// isSSL is absent.
name|boolean
name|isSSL
decl_stmt|;
name|String
name|cookieName
decl_stmt|;
comment|// A fair reentrant lock
specifier|private
specifier|static
name|ReentrantLock
name|kerberosLock
init|=
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|HttpKerberosRequestInterceptor
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|serverHttpUrl
parameter_list|,
name|boolean
name|assumeSubject
parameter_list|,
name|CookieStore
name|cs
parameter_list|,
name|String
name|cn
parameter_list|,
name|boolean
name|isSSL
parameter_list|)
block|{
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|serverHttpUrl
operator|=
name|serverHttpUrl
expr_stmt|;
name|this
operator|.
name|assumeSubject
operator|=
name|assumeSubject
expr_stmt|;
name|this
operator|.
name|cookieStore
operator|=
name|cs
expr_stmt|;
name|this
operator|.
name|isSSL
operator|=
name|isSSL
expr_stmt|;
name|isCookieEnabled
operator|=
operator|(
name|cs
operator|!=
literal|null
operator|)
expr_stmt|;
name|cookieName
operator|=
name|cn
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|HttpRequest
name|httpRequest
parameter_list|,
name|HttpContext
name|httpContext
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|String
name|kerberosAuthHeader
decl_stmt|;
try|try
block|{
comment|// Generate the service ticket for sending to the server.
comment|// Locking ensures the tokens are unique in case of concurrent requests
name|kerberosLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// If cookie based authentication is allowed, generate ticket only when necessary.
comment|// The necessary condition is either when there are no server side cookies in the
comment|// cookiestore which can be send back or when the server returns a 401 error code
comment|// indicating that the previous cookie has expired.
if|if
condition|(
name|isCookieEnabled
condition|)
block|{
name|httpContext
operator|.
name|setAttribute
argument_list|(
name|ClientContext
operator|.
name|COOKIE_STORE
argument_list|,
name|cookieStore
argument_list|)
expr_stmt|;
block|}
comment|// Generate the kerberos ticket under the following scenarios:
comment|// 1. Cookie Authentication is disabled OR
comment|// 2. The first time when the request is sent OR
comment|// 3. The server returns a 401, which sometimes means the cookie has expired OR
comment|// 4. The cookie is secured where as the client connect does not use SSL
if|if
condition|(
operator|!
name|isCookieEnabled
operator|||
operator|(
operator|(
name|httpContext
operator|.
name|getAttribute
argument_list|(
name|Utils
operator|.
name|HIVE_SERVER2_RETRY_KEY
argument_list|)
operator|==
literal|null
operator|&&
operator|(
name|cookieStore
operator|==
literal|null
operator|||
operator|(
name|cookieStore
operator|!=
literal|null
operator|&&
name|Utils
operator|.
name|needToSendCredentials
argument_list|(
name|cookieStore
argument_list|,
name|cookieName
argument_list|,
name|isSSL
argument_list|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|httpContext
operator|.
name|getAttribute
argument_list|(
name|Utils
operator|.
name|HIVE_SERVER2_RETRY_KEY
argument_list|)
operator|!=
literal|null
operator|&&
name|httpContext
operator|.
name|getAttribute
argument_list|(
name|Utils
operator|.
name|HIVE_SERVER2_RETRY_KEY
argument_list|)
operator|.
name|equals
argument_list|(
name|Utils
operator|.
name|HIVE_SERVER2_RETRY_TRUE
argument_list|)
operator|)
operator|)
condition|)
block|{
name|kerberosAuthHeader
operator|=
name|HttpAuthUtils
operator|.
name|getKerberosServiceTicket
argument_list|(
name|principal
argument_list|,
name|host
argument_list|,
name|serverHttpUrl
argument_list|,
name|assumeSubject
argument_list|)
expr_stmt|;
comment|// Set the session key token (Base64 encoded) in the headers
name|httpRequest
operator|.
name|addHeader
argument_list|(
name|HttpAuthUtils
operator|.
name|AUTHORIZATION
operator|+
literal|": "
operator|+
name|HttpAuthUtils
operator|.
name|NEGOTIATE
operator|+
literal|" "
argument_list|,
name|kerberosAuthHeader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isCookieEnabled
condition|)
block|{
name|httpContext
operator|.
name|setAttribute
argument_list|(
name|Utils
operator|.
name|HIVE_SERVER2_RETRY_KEY
argument_list|,
name|Utils
operator|.
name|HIVE_SERVER2_RETRY_FALSE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|kerberosLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

