begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverPropertyInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLFeatureNotSupportedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|Utils
operator|.
name|JdbcConnectionParams
import|;
end_import

begin_comment
comment|/**  * HiveDriver.  *  */
end_comment

begin_class
specifier|public
class|class
name|HiveDriver
implements|implements
name|Driver
block|{
static|static
block|{
try|try
block|{
name|java
operator|.
name|sql
operator|.
name|DriverManager
operator|.
name|registerDriver
argument_list|(
operator|new
name|HiveDriver
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Is this driver JDBC compliant?    */
specifier|private
specifier|static
specifier|final
name|boolean
name|JDBC_COMPLIANT
init|=
literal|false
decl_stmt|;
comment|/**    * Property key for the database name.    */
specifier|private
specifier|static
specifier|final
name|String
name|DBNAME_PROPERTY_KEY
init|=
literal|"DBNAME"
decl_stmt|;
comment|/**    * Property key for the Hive Server2 host.    */
specifier|private
specifier|static
specifier|final
name|String
name|HOST_PROPERTY_KEY
init|=
literal|"HOST"
decl_stmt|;
comment|/**    * Property key for the Hive Server2 port.    */
specifier|private
specifier|static
specifier|final
name|String
name|PORT_PROPERTY_KEY
init|=
literal|"PORT"
decl_stmt|;
comment|/**    *    */
specifier|public
name|HiveDriver
parameter_list|()
block|{
comment|// TODO Auto-generated constructor stub
name|SecurityManager
name|security
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|security
operator|!=
literal|null
condition|)
block|{
name|security
operator|.
name|checkWrite
argument_list|(
literal|"foobah"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks whether a given url is in a valid format.    *    * The current uri format is: jdbc:hive://[host[:port]]    *    * jdbc:hive:// - run in embedded mode jdbc:hive://localhost - connect to    * localhost default port (10000) jdbc:hive://localhost:5050 - connect to    * localhost port 5050    *    * TODO: - write a better regex. - decide on uri format    */
annotation|@
name|Override
specifier|public
name|boolean
name|acceptsURL
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|Pattern
operator|.
name|matches
argument_list|(
name|Utils
operator|.
name|URL_PREFIX
operator|+
literal|".*"
argument_list|,
name|url
argument_list|)
return|;
block|}
comment|/*    * As per JDBC 3.0 Spec (section 9.2)    * "If the Driver implementation understands the URL, it will return a Connection object;    * otherwise it returns null"    */
annotation|@
name|Override
specifier|public
name|Connection
name|connect
parameter_list|(
name|String
name|url
parameter_list|,
name|Properties
name|info
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|acceptsURL
argument_list|(
name|url
argument_list|)
condition|?
operator|new
name|HiveConnection
argument_list|(
name|url
argument_list|,
name|info
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**    * Package scoped access to the Driver's Major Version    * @return The Major version number of the driver. -1 if it cannot be determined from the    * manifest.mf file.    */
specifier|static
name|int
name|getMajorDriverVersion
parameter_list|()
block|{
name|int
name|version
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|String
name|fullVersion
init|=
name|HiveDriver
operator|.
name|fetchManifestAttribute
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|IMPLEMENTATION_VERSION
argument_list|)
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|fullVersion
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
comment|//$NON-NLS-1$
if|if
condition|(
name|tokens
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|length
operator|>
literal|0
operator|&&
name|tokens
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Possible reasons to end up here:
comment|// - Unable to read version from manifest.mf
comment|// - Version string is not in the proper X.x.xxx format
name|version
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|version
return|;
block|}
comment|/**    * Package scoped access to the Driver's Minor Version    * @return The Minor version number of the driver. -1 if it cannot be determined from the    * manifest.mf file.    */
specifier|static
name|int
name|getMinorDriverVersion
parameter_list|()
block|{
name|int
name|version
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|String
name|fullVersion
init|=
name|HiveDriver
operator|.
name|fetchManifestAttribute
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|IMPLEMENTATION_VERSION
argument_list|)
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|fullVersion
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
comment|//$NON-NLS-1$
if|if
condition|(
name|tokens
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|length
operator|>
literal|1
operator|&&
name|tokens
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tokens
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Possible reasons to end up here:
comment|// - Unable to read version from manifest.mf
comment|// - Version string is not in the proper X.x.xxx format
name|version
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|version
return|;
block|}
comment|/**    * Returns the major version of this driver.    */
annotation|@
name|Override
specifier|public
name|int
name|getMajorVersion
parameter_list|()
block|{
return|return
name|HiveDriver
operator|.
name|getMajorDriverVersion
argument_list|()
return|;
block|}
comment|/**    * Returns the minor version of this driver.    */
annotation|@
name|Override
specifier|public
name|int
name|getMinorVersion
parameter_list|()
block|{
return|return
name|HiveDriver
operator|.
name|getMinorDriverVersion
argument_list|()
return|;
block|}
specifier|public
name|Logger
name|getParentLogger
parameter_list|()
throws|throws
name|SQLFeatureNotSupportedException
block|{
comment|// JDK 1.7
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|DriverPropertyInfo
index|[]
name|getPropertyInfo
parameter_list|(
name|String
name|url
parameter_list|,
name|Properties
name|info
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|url
operator|!=
literal|null
operator|)
operator|&&
name|url
operator|.
name|startsWith
argument_list|(
name|Utils
operator|.
name|URL_PREFIX
argument_list|)
condition|)
block|{
name|info
operator|=
name|parseURLforPropertyInfo
argument_list|(
name|url
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|DriverPropertyInfo
name|hostProp
init|=
operator|new
name|DriverPropertyInfo
argument_list|(
name|HOST_PROPERTY_KEY
argument_list|,
name|info
operator|.
name|getProperty
argument_list|(
name|HOST_PROPERTY_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|hostProp
operator|.
name|required
operator|=
literal|false
expr_stmt|;
name|hostProp
operator|.
name|description
operator|=
literal|"Hostname of Hive Server2"
expr_stmt|;
name|DriverPropertyInfo
name|portProp
init|=
operator|new
name|DriverPropertyInfo
argument_list|(
name|PORT_PROPERTY_KEY
argument_list|,
name|info
operator|.
name|getProperty
argument_list|(
name|PORT_PROPERTY_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|portProp
operator|.
name|required
operator|=
literal|false
expr_stmt|;
name|portProp
operator|.
name|description
operator|=
literal|"Port number of Hive Server2"
expr_stmt|;
name|DriverPropertyInfo
name|dbProp
init|=
operator|new
name|DriverPropertyInfo
argument_list|(
name|DBNAME_PROPERTY_KEY
argument_list|,
name|info
operator|.
name|getProperty
argument_list|(
name|DBNAME_PROPERTY_KEY
argument_list|,
literal|"default"
argument_list|)
argument_list|)
decl_stmt|;
name|dbProp
operator|.
name|required
operator|=
literal|false
expr_stmt|;
name|dbProp
operator|.
name|description
operator|=
literal|"Database name"
expr_stmt|;
name|DriverPropertyInfo
index|[]
name|dpi
init|=
operator|new
name|DriverPropertyInfo
index|[
literal|3
index|]
decl_stmt|;
name|dpi
index|[
literal|0
index|]
operator|=
name|hostProp
expr_stmt|;
name|dpi
index|[
literal|1
index|]
operator|=
name|portProp
expr_stmt|;
name|dpi
index|[
literal|2
index|]
operator|=
name|dbProp
expr_stmt|;
return|return
name|dpi
return|;
block|}
comment|/**    * Returns whether the driver is JDBC compliant.    */
annotation|@
name|Override
specifier|public
name|boolean
name|jdbcCompliant
parameter_list|()
block|{
return|return
name|JDBC_COMPLIANT
return|;
block|}
comment|/**    * Takes a url in the form of jdbc:hive://[hostname]:[port]/[db_name] and    * parses it. Everything after jdbc:hive// is optional.    *    * The output from Utils.parseUrl() is massaged for the needs of getPropertyInfo    * @param url    * @param defaults    * @return    * @throws java.sql.SQLException    */
specifier|private
name|Properties
name|parseURLforPropertyInfo
parameter_list|(
name|String
name|url
parameter_list|,
name|Properties
name|defaults
parameter_list|)
throws|throws
name|SQLException
block|{
name|Properties
name|urlProps
init|=
operator|(
name|defaults
operator|!=
literal|null
operator|)
condition|?
operator|new
name|Properties
argument_list|(
name|defaults
argument_list|)
else|:
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
operator|||
operator|!
name|url
operator|.
name|startsWith
argument_list|(
name|Utils
operator|.
name|URL_PREFIX
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Invalid connection url: "
operator|+
name|url
argument_list|)
throw|;
block|}
name|JdbcConnectionParams
name|params
init|=
literal|null
decl_stmt|;
try|try
block|{
name|params
operator|=
name|Utils
operator|.
name|parseURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ZooKeeperHiveClientException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|host
init|=
name|params
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|host
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|port
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|params
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|port
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|port
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
operator|||
name|port
operator|.
name|equals
argument_list|(
literal|"-1"
argument_list|)
condition|)
block|{
name|port
operator|=
name|Utils
operator|.
name|DEFAULT_PORT
expr_stmt|;
block|}
name|String
name|db
init|=
name|params
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|urlProps
operator|.
name|put
argument_list|(
name|HOST_PROPERTY_KEY
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|urlProps
operator|.
name|put
argument_list|(
name|PORT_PROPERTY_KEY
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|urlProps
operator|.
name|put
argument_list|(
name|DBNAME_PROPERTY_KEY
argument_list|,
name|db
argument_list|)
expr_stmt|;
return|return
name|urlProps
return|;
block|}
comment|/**    * Lazy-load manifest attributes as needed.    */
specifier|private
specifier|static
name|Attributes
name|manifestAttributes
init|=
literal|null
decl_stmt|;
comment|/**    * Loads the manifest attributes from the jar.    *    * @throws java.net.MalformedURLException    * @throws IOException    */
specifier|private
specifier|static
specifier|synchronized
name|void
name|loadManifestAttributes
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|manifestAttributes
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|HiveDriver
operator|.
name|class
decl_stmt|;
name|String
name|classContainer
init|=
name|clazz
operator|.
name|getProtectionDomain
argument_list|()
operator|.
name|getCodeSource
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|URL
name|manifestUrl
init|=
operator|new
name|URL
argument_list|(
literal|"jar:"
operator|+
name|classContainer
operator|+
literal|"!/META-INF/MANIFEST.MF"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|(
name|manifestUrl
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|manifestAttributes
operator|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
expr_stmt|;
block|}
comment|/**    * Package scoped to allow manifest fetching from other HiveDriver classes    * Helper to initialize attributes and return one.    *    * @param attributeName    * @return    * @throws SQLException    */
specifier|static
name|String
name|fetchManifestAttribute
parameter_list|(
name|Attributes
operator|.
name|Name
name|attributeName
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|loadManifestAttributes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Couldn't load manifest attributes."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|manifestAttributes
operator|.
name|getValue
argument_list|(
name|attributeName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

