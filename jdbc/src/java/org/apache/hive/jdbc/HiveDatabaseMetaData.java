begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|RowIdLifetime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|GetInfoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetCatalogsReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetCatalogsResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetColumnsReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetColumnsResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetFunctionsReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetFunctionsResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetInfoReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetInfoResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetInfoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetSchemasReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetSchemasResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetTableTypesReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetTableTypesResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetTablesReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetTablesResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetTypeInfoReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetTypeInfoResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TSessionHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_comment
comment|/**  * HiveDatabaseMetaData.  *  */
end_comment

begin_class
specifier|public
class|class
name|HiveDatabaseMetaData
implements|implements
name|DatabaseMetaData
block|{
specifier|private
specifier|final
name|HiveConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|TCLIService
operator|.
name|Iface
name|client
decl_stmt|;
specifier|private
specifier|final
name|TSessionHandle
name|sessHandle
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CATALOG_SEPARATOR
init|=
literal|"."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|SEARCH_STRING_ESCAPE
init|=
literal|'\\'
decl_stmt|;
comment|//  The maximum column length = MFieldSchema.FNAME in metastore/src/model/package.jdo
specifier|private
specifier|static
specifier|final
name|int
name|maxColumnNameLength
init|=
literal|128
decl_stmt|;
comment|//  Cached values, to save on round trips to database.
specifier|private
name|String
name|dbVersion
init|=
literal|null
decl_stmt|;
comment|/**    *    */
specifier|public
name|HiveDatabaseMetaData
parameter_list|(
name|HiveConnection
name|connection
parameter_list|,
name|TCLIService
operator|.
name|Iface
name|client
parameter_list|,
name|TSessionHandle
name|sessHandle
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|sessHandle
operator|=
name|sessHandle
expr_stmt|;
block|}
specifier|public
name|boolean
name|allProceduresAreCallable
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|allTablesAreSelectable
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|autoCommitFailureClosesAllResultSets
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|dataDefinitionCausesTransactionCommit
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|dataDefinitionIgnoredInTransactions
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|deletesAreDetected
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|doesMaxRowSizeIncludeBlobs
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getAttributes
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|typeNamePattern
parameter_list|,
name|String
name|attributeNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getBestRowIdentifier
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|int
name|scope
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getCatalogSeparator
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|CATALOG_SEPARATOR
return|;
block|}
specifier|public
name|String
name|getCatalogTerm
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|"instance"
return|;
block|}
specifier|public
name|ResultSet
name|getCatalogs
parameter_list|()
throws|throws
name|SQLException
block|{
name|TGetCatalogsResp
name|catalogResp
decl_stmt|;
try|try
block|{
name|catalogResp
operator|=
name|client
operator|.
name|GetCatalogs
argument_list|(
operator|new
name|TGetCatalogsReq
argument_list|(
name|sessHandle
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|catalogResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|HiveQueryResultSet
operator|.
name|Builder
argument_list|(
name|connection
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|setSessionHandle
argument_list|(
name|sessHandle
argument_list|)
operator|.
name|setStmtHandle
argument_list|(
name|catalogResp
operator|.
name|getOperationHandle
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|ResultSet
name|getClientInfoProperties
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getColumnPrivileges
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|columnNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getPseudoColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|tableNamePattern
parameter_list|,
name|String
name|columnNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// JDK 1.7
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|generatedKeyAlwaysReturned
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// JDK 1.7
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/**    * Convert a pattern containing JDBC catalog search wildcards into    * Java regex patterns.    *    * @param pattern input which may contain '%' or '_' wildcard characters, or    * these characters escaped using {@link #getSearchStringEscape()}.    * @return replace %/_ with regex search characters, also handle escaped    * characters.    */
specifier|private
name|String
name|convertPattern
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
return|return
literal|".*"
return|;
block|}
else|else
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|(
name|pattern
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|escaped
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|len
init|=
name|pattern
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|pattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|escaped
condition|)
block|{
if|if
condition|(
name|c
operator|!=
name|SEARCH_STRING_ESCAPE
condition|)
block|{
name|escaped
operator|=
literal|false
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|c
operator|==
name|SEARCH_STRING_ESCAPE
condition|)
block|{
name|escaped
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'%'
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'_'
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
name|ResultSet
name|getColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|tableNamePattern
parameter_list|,
name|String
name|columnNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
name|TGetColumnsResp
name|colResp
decl_stmt|;
name|TGetColumnsReq
name|colReq
init|=
operator|new
name|TGetColumnsReq
argument_list|()
decl_stmt|;
name|colReq
operator|.
name|setSessionHandle
argument_list|(
name|sessHandle
argument_list|)
expr_stmt|;
name|colReq
operator|.
name|setCatalogName
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
name|colReq
operator|.
name|setSchemaName
argument_list|(
name|schemaPattern
argument_list|)
expr_stmt|;
name|colReq
operator|.
name|setTableName
argument_list|(
name|tableNamePattern
argument_list|)
expr_stmt|;
name|colReq
operator|.
name|setColumnName
argument_list|(
name|columnNamePattern
argument_list|)
expr_stmt|;
try|try
block|{
name|colResp
operator|=
name|client
operator|.
name|GetColumns
argument_list|(
name|colReq
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|colResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// build the resultset from response
return|return
operator|new
name|HiveQueryResultSet
operator|.
name|Builder
argument_list|(
name|connection
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|setSessionHandle
argument_list|(
name|sessHandle
argument_list|)
operator|.
name|setStmtHandle
argument_list|(
name|colResp
operator|.
name|getOperationHandle
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * We sort the output of getColumns to guarantee jdbc compliance.    * First check by table name then by ordinal position    */
specifier|private
class|class
name|GetColumnsComparator
implements|implements
name|Comparator
argument_list|<
name|JdbcColumn
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JdbcColumn
name|o1
parameter_list|,
name|JdbcColumn
name|o2
parameter_list|)
block|{
name|int
name|compareName
init|=
name|o1
operator|.
name|getTableName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareName
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|o1
operator|.
name|getOrdinalPos
argument_list|()
operator|>
name|o2
operator|.
name|getOrdinalPos
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|getOrdinalPos
argument_list|()
operator|<
name|o2
operator|.
name|getOrdinalPos
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|compareName
return|;
block|}
block|}
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|this
operator|.
name|connection
return|;
block|}
specifier|public
name|ResultSet
name|getCrossReference
parameter_list|(
name|String
name|primaryCatalog
parameter_list|,
name|String
name|primarySchema
parameter_list|,
name|String
name|primaryTable
parameter_list|,
name|String
name|foreignCatalog
parameter_list|,
name|String
name|foreignSchema
parameter_list|,
name|String
name|foreignTable
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getDatabaseMajorVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|Utils
operator|.
name|getVersionPart
argument_list|(
name|getDatabaseProductVersion
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
name|int
name|getDatabaseMinorVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|Utils
operator|.
name|getVersionPart
argument_list|(
name|getDatabaseProductVersion
argument_list|()
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDatabaseProductName
parameter_list|()
throws|throws
name|SQLException
block|{
name|TGetInfoResp
name|resp
init|=
name|getServerInfo
argument_list|(
name|GetInfoType
operator|.
name|CLI_DBMS_NAME
operator|.
name|toTGetInfoType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|resp
operator|.
name|getInfoValue
argument_list|()
operator|.
name|getStringValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDatabaseProductVersion
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|dbVersion
operator|!=
literal|null
condition|)
block|{
comment|//lazy-caching of the version.
return|return
name|dbVersion
return|;
block|}
name|TGetInfoResp
name|resp
init|=
name|getServerInfo
argument_list|(
name|GetInfoType
operator|.
name|CLI_DBMS_VER
operator|.
name|toTGetInfoType
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|dbVersion
operator|=
name|resp
operator|.
name|getInfoValue
argument_list|()
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
return|return
name|dbVersion
return|;
block|}
specifier|public
name|int
name|getDefaultTransactionIsolation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|Connection
operator|.
name|TRANSACTION_NONE
return|;
block|}
specifier|public
name|int
name|getDriverMajorVersion
parameter_list|()
block|{
return|return
name|HiveDriver
operator|.
name|getMajorDriverVersion
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDriverMinorVersion
parameter_list|()
block|{
return|return
name|HiveDriver
operator|.
name|getMinorDriverVersion
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDriverName
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|HiveDriver
operator|.
name|fetchManifestAttribute
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|IMPLEMENTATION_TITLE
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDriverVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|HiveDriver
operator|.
name|fetchManifestAttribute
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|IMPLEMENTATION_VERSION
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getExportedKeys
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getExtraNameCharacters
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// TODO: verify that this is correct
return|return
literal|""
return|;
block|}
specifier|public
name|ResultSet
name|getFunctionColumns
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|,
name|String
name|arg2
parameter_list|,
name|String
name|arg3
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getFunctions
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|functionNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
name|TGetFunctionsResp
name|funcResp
decl_stmt|;
name|TGetFunctionsReq
name|getFunctionsReq
init|=
operator|new
name|TGetFunctionsReq
argument_list|()
decl_stmt|;
name|getFunctionsReq
operator|.
name|setSessionHandle
argument_list|(
name|sessHandle
argument_list|)
expr_stmt|;
name|getFunctionsReq
operator|.
name|setCatalogName
argument_list|(
name|catalogName
argument_list|)
expr_stmt|;
name|getFunctionsReq
operator|.
name|setSchemaName
argument_list|(
name|schemaPattern
argument_list|)
expr_stmt|;
name|getFunctionsReq
operator|.
name|setFunctionName
argument_list|(
name|functionNamePattern
argument_list|)
expr_stmt|;
try|try
block|{
name|funcResp
operator|=
name|client
operator|.
name|GetFunctions
argument_list|(
name|getFunctionsReq
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|funcResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|HiveQueryResultSet
operator|.
name|Builder
argument_list|(
name|connection
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|setSessionHandle
argument_list|(
name|sessHandle
argument_list|)
operator|.
name|setStmtHandle
argument_list|(
name|funcResp
operator|.
name|getOperationHandle
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|String
name|getIdentifierQuoteString
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getImportedKeys
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
operator|new
name|HiveQueryResultSet
operator|.
name|Builder
argument_list|(
name|connection
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|setEmptyResultSet
argument_list|(
literal|true
argument_list|)
operator|.
name|setSchema
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"PKTABLE_CAT"
argument_list|,
literal|"PKTABLE_SCHEM"
argument_list|,
literal|"PKTABLE_NAME"
argument_list|,
literal|"PKCOLUMN_NAME"
argument_list|,
literal|"FKTABLE_CAT"
argument_list|,
literal|"FKTABLE_SCHEM"
argument_list|,
literal|"FKTABLE_NAME"
argument_list|,
literal|"FKCOLUMN_NAME"
argument_list|,
literal|"KEY_SEQ"
argument_list|,
literal|"UPDATE_RULE"
argument_list|,
literal|"DELETE_RULE"
argument_list|,
literal|"FK_NAME"
argument_list|,
literal|"PK_NAME"
argument_list|,
literal|"DEFERRABILITY"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"SMALLINT"
argument_list|,
literal|"SMALLINT"
argument_list|,
literal|"SMALLINT"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|ResultSet
name|getIndexInfo
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|,
name|boolean
name|unique
parameter_list|,
name|boolean
name|approximate
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getJDBCMajorVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|3
return|;
block|}
specifier|public
name|int
name|getJDBCMinorVersion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getMaxBinaryLiteralLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxCatalogNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxCharLiteralLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/**    *  Returns the value of maxColumnNameLength.    *    */
specifier|public
name|int
name|getMaxColumnNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|maxColumnNameLength
return|;
block|}
specifier|public
name|int
name|getMaxColumnsInGroupBy
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxColumnsInIndex
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxColumnsInOrderBy
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxColumnsInSelect
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxColumnsInTable
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxConnections
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxCursorNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxIndexLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxProcedureNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxRowSize
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxSchemaNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxStatementLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxStatements
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxTableNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxTablesInSelect
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMaxUserNameLength
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getNumericFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|ResultSet
name|getPrimaryKeys
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// Hive doesn't support primary keys
comment|// using local schema with empty resultset
return|return
operator|new
name|HiveQueryResultSet
operator|.
name|Builder
argument_list|(
name|connection
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|setEmptyResultSet
argument_list|(
literal|true
argument_list|)
operator|.
name|setSchema
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TABLE_CAT"
argument_list|,
literal|"TABLE_SCHEM"
argument_list|,
literal|"TABLE_NAME"
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
literal|"KEY_SEQ"
argument_list|,
literal|"PK_NAME"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"INT"
argument_list|,
literal|"STRING"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|ResultSet
name|getProcedureColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|procedureNamePattern
parameter_list|,
name|String
name|columnNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// Hive doesn't support primary keys
comment|// using local schema with empty resultset
return|return
operator|new
name|HiveQueryResultSet
operator|.
name|Builder
argument_list|(
name|connection
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|setEmptyResultSet
argument_list|(
literal|true
argument_list|)
operator|.
name|setSchema
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"PROCEDURE_CAT"
argument_list|,
literal|"PROCEDURE_SCHEM"
argument_list|,
literal|"PROCEDURE_NAME"
argument_list|,
literal|"COLUMN_NAME"
argument_list|,
literal|"COLUMN_TYPE"
argument_list|,
literal|"DATA_TYPE"
argument_list|,
literal|"TYPE_NAME"
argument_list|,
literal|"PRECISION"
argument_list|,
literal|"LENGTH"
argument_list|,
literal|"SCALE"
argument_list|,
literal|"RADIX"
argument_list|,
literal|"NULLABLE"
argument_list|,
literal|"REMARKS"
argument_list|,
literal|"COLUMN_DEF"
argument_list|,
literal|"SQL_DATA_TYPE"
argument_list|,
literal|"SQL_DATETIME_SUB"
argument_list|,
literal|"CHAR_OCTET_LENGTH"
argument_list|,
literal|"ORDINAL_POSITION"
argument_list|,
literal|"IS_NULLABLE"
argument_list|,
literal|"SPECIFIC_NAME"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"SMALLINT"
argument_list|,
literal|"INT"
argument_list|,
literal|"STRING"
argument_list|,
literal|"INT"
argument_list|,
literal|"INT"
argument_list|,
literal|"SMALLINT"
argument_list|,
literal|"SMALLINT"
argument_list|,
literal|"SMALLINT"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"INT"
argument_list|,
literal|"INT"
argument_list|,
literal|"INT"
argument_list|,
literal|"INT"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|String
name|getProcedureTerm
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
operator|new
name|String
argument_list|(
literal|"UDF"
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getProcedures
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|procedureNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// Hive doesn't support primary keys
comment|// using local schema with empty resultset
return|return
operator|new
name|HiveQueryResultSet
operator|.
name|Builder
argument_list|(
name|connection
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|setEmptyResultSet
argument_list|(
literal|true
argument_list|)
operator|.
name|setSchema
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"PROCEDURE_CAT"
argument_list|,
literal|"PROCEDURE_SCHEM"
argument_list|,
literal|"PROCEDURE_NAME"
argument_list|,
literal|"RESERVERD"
argument_list|,
literal|"RESERVERD"
argument_list|,
literal|"RESERVERD"
argument_list|,
literal|"REMARKS"
argument_list|,
literal|"PROCEDURE_TYPE"
argument_list|,
literal|"SPECIFIC_NAME"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"SMALLINT"
argument_list|,
literal|"STRING"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|int
name|getResultSetHoldability
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|RowIdLifetime
name|getRowIdLifetime
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getSQLKeywords
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getSQLStateType
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|DatabaseMetaData
operator|.
name|sqlStateSQL99
return|;
block|}
specifier|public
name|String
name|getSchemaTerm
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|"database"
return|;
block|}
specifier|public
name|ResultSet
name|getSchemas
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|getSchemas
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|ResultSet
name|getSchemas
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|)
throws|throws
name|SQLException
block|{
name|TGetSchemasResp
name|schemaResp
decl_stmt|;
name|TGetSchemasReq
name|schemaReq
init|=
operator|new
name|TGetSchemasReq
argument_list|()
decl_stmt|;
name|schemaReq
operator|.
name|setSessionHandle
argument_list|(
name|sessHandle
argument_list|)
expr_stmt|;
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
name|schemaReq
operator|.
name|setCatalogName
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaPattern
operator|==
literal|null
condition|)
block|{
name|schemaPattern
operator|=
literal|"%"
expr_stmt|;
block|}
name|schemaReq
operator|.
name|setSchemaName
argument_list|(
name|schemaPattern
argument_list|)
expr_stmt|;
try|try
block|{
name|schemaResp
operator|=
name|client
operator|.
name|GetSchemas
argument_list|(
name|schemaReq
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|schemaResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|HiveQueryResultSet
operator|.
name|Builder
argument_list|(
name|connection
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|setSessionHandle
argument_list|(
name|sessHandle
argument_list|)
operator|.
name|setStmtHandle
argument_list|(
name|schemaResp
operator|.
name|getOperationHandle
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSearchStringEscape
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|SEARCH_STRING_ESCAPE
argument_list|)
return|;
block|}
specifier|public
name|String
name|getStringFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|ResultSet
name|getSuperTables
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|tableNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getSuperTypes
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|typeNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getSystemFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|ResultSet
name|getTablePrivileges
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|tableNamePattern
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getTableTypes
parameter_list|()
throws|throws
name|SQLException
block|{
name|TGetTableTypesResp
name|tableTypeResp
decl_stmt|;
try|try
block|{
name|tableTypeResp
operator|=
name|client
operator|.
name|GetTableTypes
argument_list|(
operator|new
name|TGetTableTypesReq
argument_list|(
name|sessHandle
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|tableTypeResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|HiveQueryResultSet
operator|.
name|Builder
argument_list|(
name|connection
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|setSessionHandle
argument_list|(
name|sessHandle
argument_list|)
operator|.
name|setStmtHandle
argument_list|(
name|tableTypeResp
operator|.
name|getOperationHandle
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|ResultSet
name|getTables
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|tableNamePattern
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|SQLException
block|{
name|TGetTablesResp
name|getTableResp
decl_stmt|;
if|if
condition|(
name|schemaPattern
operator|==
literal|null
condition|)
block|{
comment|// if schemaPattern is null it means that the schemaPattern value should not be used to narrow the search
name|schemaPattern
operator|=
literal|"%"
expr_stmt|;
block|}
name|TGetTablesReq
name|getTableReq
init|=
operator|new
name|TGetTablesReq
argument_list|(
name|sessHandle
argument_list|)
decl_stmt|;
name|getTableReq
operator|.
name|setTableName
argument_list|(
name|tableNamePattern
argument_list|)
expr_stmt|;
comment|// TODO: need to set catalog parameter
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
name|getTableReq
operator|.
name|setTableTypes
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|types
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaPattern
operator|!=
literal|null
condition|)
block|{
name|getTableReq
operator|.
name|setSchemaName
argument_list|(
name|schemaPattern
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|getTableResp
operator|=
name|client
operator|.
name|GetTables
argument_list|(
name|getTableReq
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|getTableResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|HiveQueryResultSet
operator|.
name|Builder
argument_list|(
name|connection
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|setSessionHandle
argument_list|(
name|sessHandle
argument_list|)
operator|.
name|setStmtHandle
argument_list|(
name|getTableResp
operator|.
name|getOperationHandle
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * We sort the output of getTables to guarantee jdbc compliance.    * First check by table type then by table name    */
specifier|private
class|class
name|GetTablesComparator
implements|implements
name|Comparator
argument_list|<
name|JdbcTable
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JdbcTable
name|o1
parameter_list|,
name|JdbcTable
name|o2
parameter_list|)
block|{
name|int
name|compareType
init|=
name|o1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareType
operator|==
literal|0
condition|)
block|{
return|return
name|o1
operator|.
name|getTableName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|compareType
return|;
block|}
block|}
block|}
comment|/**    * Translate hive table types into jdbc table types.    * @param hivetabletype    * @return the type of the table    */
specifier|public
specifier|static
name|String
name|toJdbcTableType
parameter_list|(
name|String
name|hivetabletype
parameter_list|)
block|{
if|if
condition|(
name|hivetabletype
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|hivetabletype
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"TABLE"
return|;
block|}
elseif|else
if|if
condition|(
name|hivetabletype
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"VIEW"
return|;
block|}
elseif|else
if|if
condition|(
name|hivetabletype
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"EXTERNAL TABLE"
return|;
block|}
else|else
block|{
return|return
name|hivetabletype
return|;
block|}
block|}
specifier|public
name|String
name|getTimeDateFunctions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|ResultSet
name|getTypeInfo
parameter_list|()
throws|throws
name|SQLException
block|{
name|TGetTypeInfoResp
name|getTypeInfoResp
decl_stmt|;
name|TGetTypeInfoReq
name|getTypeInfoReq
init|=
operator|new
name|TGetTypeInfoReq
argument_list|()
decl_stmt|;
name|getTypeInfoReq
operator|.
name|setSessionHandle
argument_list|(
name|sessHandle
argument_list|)
expr_stmt|;
try|try
block|{
name|getTypeInfoResp
operator|=
name|client
operator|.
name|GetTypeInfo
argument_list|(
name|getTypeInfoReq
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|getTypeInfoResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|HiveQueryResultSet
operator|.
name|Builder
argument_list|(
name|connection
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|setSessionHandle
argument_list|(
name|sessHandle
argument_list|)
operator|.
name|setStmtHandle
argument_list|(
name|getTypeInfoResp
operator|.
name|getOperationHandle
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|ResultSet
name|getUDTs
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schemaPattern
parameter_list|,
name|String
name|typeNamePattern
parameter_list|,
name|int
index|[]
name|types
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
operator|new
name|HiveMetaDataResultSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TYPE_CAT"
argument_list|,
literal|"TYPE_SCHEM"
argument_list|,
literal|"TYPE_NAME"
argument_list|,
literal|"CLASS_NAME"
argument_list|,
literal|"DATA_TYPE"
argument_list|,
literal|"REMARKS"
argument_list|,
literal|"BASE_TYPE"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"STRING"
argument_list|,
literal|"INT"
argument_list|,
literal|"STRING"
argument_list|,
literal|"INT"
argument_list|)
argument_list|,
literal|null
argument_list|)
block|{
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getObject
parameter_list|(
name|String
name|columnLabel
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// JDK 1.7
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getObject
parameter_list|(
name|int
name|columnIndex
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// JDK 1.7
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
specifier|public
name|String
name|getURL
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getUserName
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|ResultSet
name|getVersionColumns
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|insertsAreDetected
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isCatalogAtStart
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|locatorsUpdateCopy
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|nullPlusNonNullIsNull
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|nullsAreSortedAtEnd
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|nullsAreSortedAtStart
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|nullsAreSortedHigh
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|nullsAreSortedLow
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|othersDeletesAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|othersInsertsAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|othersUpdatesAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|ownDeletesAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|ownInsertsAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|ownUpdatesAreVisible
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|storesLowerCaseIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|storesLowerCaseQuotedIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|storesMixedCaseIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|storesMixedCaseQuotedIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|storesUpperCaseIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|storesUpperCaseQuotedIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsANSI92EntryLevelSQL
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsANSI92FullSQL
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsANSI92IntermediateSQL
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsAlterTableWithAddColumn
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsAlterTableWithDropColumn
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsBatchUpdates
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInDataManipulation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInIndexDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInPrivilegeDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInProcedureCalls
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsCatalogsInTableDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsColumnAliasing
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsConvert
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsConvert
parameter_list|(
name|int
name|fromType
parameter_list|,
name|int
name|toType
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsCoreSQLGrammar
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsCorrelatedSubqueries
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsDataDefinitionAndDataManipulationTransactions
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsDataManipulationTransactionsOnly
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsDifferentTableCorrelationNames
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsExpressionsInOrderBy
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsExtendedSQLGrammar
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsFullOuterJoins
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsGetGeneratedKeys
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsGroupBy
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsGroupByBeyondSelect
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsGroupByUnrelated
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsIntegrityEnhancementFacility
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsLikeEscapeClause
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsLimitedOuterJoins
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsMinimumSQLGrammar
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsMixedCaseIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsMixedCaseQuotedIdentifiers
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsMultipleOpenResults
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsMultipleResultSets
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsMultipleTransactions
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsNamedParameters
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsNonNullableColumns
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsOpenCursorsAcrossCommit
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsOpenCursorsAcrossRollback
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsOpenStatementsAcrossCommit
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsOpenStatementsAcrossRollback
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsOrderByUnrelated
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsOuterJoins
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsPositionedDelete
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsPositionedUpdate
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsResultSetConcurrency
parameter_list|(
name|int
name|type
parameter_list|,
name|int
name|concurrency
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsResultSetHoldability
parameter_list|(
name|int
name|holdability
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsResultSetType
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsSavepoints
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInDataManipulation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInIndexDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInPrivilegeDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInProcedureCalls
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSchemasInTableDefinitions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSelectForUpdate
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsStatementPooling
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsStoredFunctionsUsingCallSyntax
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsStoredProcedures
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsSubqueriesInComparisons
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsSubqueriesInExists
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsSubqueriesInIns
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsSubqueriesInQuantifieds
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsTableCorrelationNames
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsTransactionIsolationLevel
parameter_list|(
name|int
name|level
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsTransactions
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsUnion
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|supportsUnionAll
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|updatesAreDetected
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|usesLocalFilePerTable
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|usesLocalFiles
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|SQLException
block|{
name|HiveDatabaseMetaData
name|meta
init|=
operator|new
name|HiveDatabaseMetaData
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DriverName: "
operator|+
name|meta
operator|.
name|getDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DriverVersion: "
operator|+
name|meta
operator|.
name|getDriverVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TGetInfoResp
name|getServerInfo
parameter_list|(
name|TGetInfoType
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
name|TGetInfoReq
name|req
init|=
operator|new
name|TGetInfoReq
argument_list|(
name|sessHandle
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|TGetInfoResp
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|client
operator|.
name|GetInfo
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resp
return|;
block|}
block|}
end_class

end_unit

