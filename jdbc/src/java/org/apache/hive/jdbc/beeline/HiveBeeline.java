begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|beeline
operator|.
name|OptionsProcessor
operator|.
name|PrintMode
import|;
end_import

begin_import
import|import
name|sqlline
operator|.
name|SqlLine
import|;
end_import

begin_class
specifier|public
class|class
name|HiveBeeline
block|{
comment|// TODO: expose from the JDBC connection class
specifier|private
specifier|static
specifier|final
name|String
name|URI_PREFIX
init|=
literal|"jdbc:hive://"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SQLLINE_CLASS
init|=
literal|"sqlline.SqlLine"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_JDBC_DRIVER
init|=
literal|"org.apache.hadoop.hive.jdbc.HiveDriver"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SQLLINE_SILENT
init|=
literal|"--silent=true"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SQLLINE_VERBOSE
init|=
literal|"--verbose=true"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SQLLINE_SCRIPT_CMD
init|=
literal|"!run"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URL_DB_MARKER
init|=
literal|"/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URL_HIVE_CONF_MARKER
init|=
literal|"?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URL_HIVE_VAR_MARKER
init|=
literal|"#"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URL_SESS_VAR_MARKER
init|=
literal|";"
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionsProcessor
name|oproc
init|=
operator|new
name|OptionsProcessor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oproc
operator|.
name|processArgs
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// assemble connection URL
name|String
name|jdbcURL
init|=
name|URI_PREFIX
decl_stmt|;
if|if
condition|(
name|oproc
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// no, host name indicates an embbeded hive invocation
name|jdbcURL
operator|+=
name|oproc
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|oproc
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|oproc
operator|.
name|getDatabase
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jdbcURL
operator|+=
name|URL_DB_MARKER
operator|+
name|oproc
operator|.
name|getDatabase
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|oproc
operator|.
name|getSessVars
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jdbcURL
operator|+=
name|URL_SESS_VAR_MARKER
operator|+
name|oproc
operator|.
name|getSessVars
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|oproc
operator|.
name|getHiveConfs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jdbcURL
operator|+=
name|URL_HIVE_CONF_MARKER
operator|+
name|oproc
operator|.
name|getHiveConfs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|oproc
operator|.
name|getHiveVars
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jdbcURL
operator|+=
name|URL_HIVE_VAR_MARKER
operator|+
name|oproc
operator|.
name|getHiveVars
argument_list|()
expr_stmt|;
block|}
comment|// setup input file or string
name|InputStream
name|sqlLineInput
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|oproc
operator|.
name|getFileName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|scriptCmd
init|=
name|SQLLINE_SCRIPT_CMD
operator|+
literal|" "
operator|+
name|oproc
operator|.
name|getFileName
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
name|sqlLineInput
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|scriptCmd
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oproc
operator|.
name|getExecString
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// process the string to make each stmt a separate line
name|String
name|execString
init|=
name|oproc
operator|.
name|getExecString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|execCommand
init|=
literal|""
decl_stmt|;
name|String
name|command
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|oneCmd
range|:
name|execString
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|oneCmd
argument_list|,
literal|"\\"
argument_list|)
condition|)
block|{
name|command
operator|+=
name|StringUtils
operator|.
name|chop
argument_list|(
name|oneCmd
argument_list|)
operator|+
literal|";"
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|command
operator|+=
name|oneCmd
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|command
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|execCommand
operator|+=
name|command
operator|+
literal|";\n"
expr_stmt|;
comment|// stmt should end with ';' for sqlLine
name|command
operator|=
literal|""
expr_stmt|;
block|}
name|sqlLineInput
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|execCommand
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// setup SQLLine args
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-u"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|jdbcURL
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-d"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|HIVE_JDBC_DRIVER
argument_list|)
expr_stmt|;
comment|// TODO: make it configurable for HS or HS2
if|if
condition|(
name|oproc
operator|.
name|getpMode
argument_list|()
operator|==
name|PrintMode
operator|.
name|SILENT
condition|)
block|{
name|argList
operator|.
name|add
argument_list|(
name|SQLLINE_SILENT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oproc
operator|.
name|getpMode
argument_list|()
operator|==
name|PrintMode
operator|.
name|VERBOSE
condition|)
block|{
name|argList
operator|.
name|add
argument_list|(
name|SQLLINE_VERBOSE
argument_list|)
expr_stmt|;
block|}
comment|// Invoke sqlline
name|SqlLine
operator|.
name|mainWithInputRedirection
argument_list|(
name|argList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|sqlLineInput
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

