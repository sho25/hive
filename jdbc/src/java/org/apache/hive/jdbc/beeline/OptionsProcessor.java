begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * OptionsProcessor.  *  */
end_comment

begin_class
specifier|public
class|class
name|OptionsProcessor
block|{
enum|enum
name|PrintMode
block|{
name|SILENT
block|,
name|NORMAL
block|,
name|VERBOSE
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|l4j
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OptionsProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
name|commandLine
decl_stmt|;
comment|/**    * -database option if any that the session has been invoked with.    */
specifier|private
name|String
name|database
decl_stmt|;
comment|/**    * -e option if any that the session has been invoked with.    */
specifier|private
name|String
name|execString
decl_stmt|;
comment|/**    * -f option if any that the session has been invoked with.    */
specifier|private
name|String
name|fileName
decl_stmt|;
comment|/**    * properties set from -hiveconf via cmdline.    */
specifier|private
specifier|final
name|Properties
name|cmdProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|/**    * host name and port number of remote Hive server    */
specifier|private
name|String
name|host
decl_stmt|;
specifier|private
name|int
name|port
decl_stmt|;
comment|/**    * print mode    */
specifier|private
name|PrintMode
name|pMode
init|=
name|PrintMode
operator|.
name|NORMAL
decl_stmt|;
comment|/**    * hive var properties    */
specifier|private
name|String
name|hiveVars
decl_stmt|;
comment|/**    * hive conf properties    */
specifier|private
name|String
name|hiveConfs
decl_stmt|;
comment|/**    * hive session properties    */
specifier|private
name|String
name|sessVars
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|public
name|OptionsProcessor
parameter_list|()
block|{
comment|// -database database
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"databasename"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"database"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Specify the database to use"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|// -e 'quoted-query-string'
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"quoted-query-string"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"SQL from command line"
argument_list|)
operator|.
name|create
argument_list|(
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -f<query-file>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"filename"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"SQL from files"
argument_list|)
operator|.
name|create
argument_list|(
literal|'f'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -hiveconf x=y
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"hiveconf"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Use value for given property"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|// -sessVar x=y
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"sessVar"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Use value for given property"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|// -h hostname/ippaddress
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"hostname"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"connecting to Hive Server on remote host"
argument_list|)
operator|.
name|create
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -p port
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"port"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"connecting to Hive Server on port number"
argument_list|)
operator|.
name|create
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
comment|// Substitution option -d, --define
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"key=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"define"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Variable subsitution to apply to hive commands. e.g. -d A=B or --define A=B"
argument_list|)
operator|.
name|create
argument_list|(
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
comment|// Substitution option --hivevar
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"key=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"hivevar"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Variable subsitution to apply to hive commands. e.g. --hivevar A=B"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|// [-S|--silent]
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"S"
argument_list|,
literal|"silent"
argument_list|,
literal|false
argument_list|,
literal|"Silent mode in interactive shell"
argument_list|)
argument_list|)
expr_stmt|;
comment|// [-v|--verbose]
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"v"
argument_list|,
literal|"verbose"
argument_list|,
literal|false
argument_list|,
literal|"Verbose mode (echo executed SQL to the console)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// [-H|--help]
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"H"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print help information"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDatabase
parameter_list|()
block|{
return|return
name|database
return|;
block|}
specifier|public
name|String
name|getExecString
parameter_list|()
block|{
return|return
name|execString
return|;
block|}
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
specifier|public
name|PrintMode
name|getpMode
parameter_list|()
block|{
return|return
name|pMode
return|;
block|}
specifier|public
name|String
name|getHiveVars
parameter_list|()
block|{
return|return
name|hiveVars
return|;
block|}
specifier|public
name|String
name|getHiveConfs
parameter_list|()
block|{
return|return
name|hiveConfs
return|;
block|}
specifier|public
name|String
name|getSessVars
parameter_list|()
block|{
return|return
name|sessVars
return|;
block|}
specifier|public
name|boolean
name|processArgs
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
block|{
try|try
block|{
name|commandLine
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|argv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'H'
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'S'
argument_list|)
condition|)
block|{
name|pMode
operator|=
name|PrintMode
operator|.
name|SILENT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'v'
argument_list|)
condition|)
block|{
name|pMode
operator|=
name|PrintMode
operator|.
name|VERBOSE
expr_stmt|;
block|}
else|else
block|{
name|pMode
operator|=
name|PrintMode
operator|.
name|NORMAL
expr_stmt|;
block|}
name|hiveConfs
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"hiveconf"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveVars
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"define"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveVars
operator|+=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"hivevar"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|sessVars
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"sessvar"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|database
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"database"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|execString
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|'f'
argument_list|)
expr_stmt|;
name|host
operator|=
operator|(
name|String
operator|)
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|'h'
argument_list|)
expr_stmt|;
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|'p'
argument_list|,
literal|"10000"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|execString
operator|!=
literal|null
operator|&&
name|fileName
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The '-e' and '-f' options cannot be specified simultaneously"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"hiveconf"
argument_list|)
condition|)
block|{
name|Properties
name|confProps
init|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"hiveconf"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|confProps
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|cmdProperties
operator|.
name|setProperty
argument_list|(
name|propKey
argument_list|,
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|printUsage
parameter_list|()
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
literal|"beeline"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

