begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLFeatureNotSupportedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLWarning
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|RowSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|RowSetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TCancelOperationReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TCancelOperationResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TCloseOperationReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TCloseOperationResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TExecuteStatementReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TExecuteStatementResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetOperationStatusReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TGetOperationStatusResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TOperationHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TSessionHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TFetchResultsReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TFetchResultsResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|TFetchOrientation
import|;
end_import

begin_comment
comment|/**  * HiveStatement.  *  */
end_comment

begin_class
specifier|public
class|class
name|HiveStatement
implements|implements
name|java
operator|.
name|sql
operator|.
name|Statement
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveStatement
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HiveConnection
name|connection
decl_stmt|;
specifier|private
name|TCLIService
operator|.
name|Iface
name|client
decl_stmt|;
specifier|private
name|TOperationHandle
name|stmtHandle
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|TSessionHandle
name|sessHandle
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sessConf
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|fetchSize
init|=
literal|50
decl_stmt|;
specifier|private
name|boolean
name|isScrollableResultset
init|=
literal|false
decl_stmt|;
comment|/**    * We need to keep a reference to the result set to support the following:    *<code>    * statement.execute(String sql);    * statement.getResultSet();    *</code>.    */
specifier|private
name|ResultSet
name|resultSet
init|=
literal|null
decl_stmt|;
comment|/**    * Sets the limit for the maximum number of rows that any ResultSet object produced by this    * Statement can contain to the given number. If the limit is exceeded, the excess rows    * are silently dropped. The value must be>= 0, and 0 means there is not limit.    */
specifier|private
name|int
name|maxRows
init|=
literal|0
decl_stmt|;
comment|/**    * Add SQLWarnings to the warningChain if needed.    */
specifier|private
name|SQLWarning
name|warningChain
init|=
literal|null
decl_stmt|;
comment|/**    * Keep state so we can fail certain calls made after close().    */
specifier|private
name|boolean
name|isClosed
init|=
literal|false
decl_stmt|;
comment|/**    * Keep state so we can fail certain calls made after cancel().    */
specifier|private
name|boolean
name|isCancelled
init|=
literal|false
decl_stmt|;
comment|/**    * Keep this state so we can know whether the query in this statement is closed.    */
specifier|private
name|boolean
name|isQueryClosed
init|=
literal|false
decl_stmt|;
comment|/**    * Keep this state so we can know whether the query logs are being generated in HS2.    */
specifier|private
name|boolean
name|isLogBeingGenerated
init|=
literal|true
decl_stmt|;
comment|/**    * Keep this state so we can know whether the statement is submitted to HS2 and start execution    * successfully.    */
specifier|private
name|boolean
name|isExecuteStatementFailed
init|=
literal|false
decl_stmt|;
comment|// A fair reentrant lock
specifier|private
name|ReentrantLock
name|transportLock
init|=
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|HiveStatement
parameter_list|(
name|HiveConnection
name|connection
parameter_list|,
name|TCLIService
operator|.
name|Iface
name|client
parameter_list|,
name|TSessionHandle
name|sessHandle
parameter_list|)
block|{
name|this
argument_list|(
name|connection
argument_list|,
name|client
argument_list|,
name|sessHandle
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveStatement
parameter_list|(
name|HiveConnection
name|connection
parameter_list|,
name|TCLIService
operator|.
name|Iface
name|client
parameter_list|,
name|TSessionHandle
name|sessHandle
parameter_list|,
name|boolean
name|isScrollableResultset
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|sessHandle
operator|=
name|sessHandle
expr_stmt|;
name|this
operator|.
name|isScrollableResultset
operator|=
name|isScrollableResultset
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#addBatch(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|void
name|addBatch
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#cancel()    */
annotation|@
name|Override
specifier|public
name|void
name|cancel
parameter_list|()
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"cancel"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCancelled
condition|)
block|{
return|return;
block|}
name|transportLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|stmtHandle
operator|!=
literal|null
condition|)
block|{
name|TCancelOperationReq
name|cancelReq
init|=
operator|new
name|TCancelOperationReq
argument_list|(
name|stmtHandle
argument_list|)
decl_stmt|;
name|TCancelOperationResp
name|cancelResp
init|=
name|client
operator|.
name|CancelOperation
argument_list|(
name|cancelReq
argument_list|)
decl_stmt|;
name|Utils
operator|.
name|verifySuccessWithInfo
argument_list|(
name|cancelResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|"08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|transportLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|isCancelled
operator|=
literal|true
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#clearBatch()    */
annotation|@
name|Override
specifier|public
name|void
name|clearBatch
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#clearWarnings()    */
annotation|@
name|Override
specifier|public
name|void
name|clearWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
name|warningChain
operator|=
literal|null
expr_stmt|;
block|}
name|void
name|closeClientOperation
parameter_list|()
throws|throws
name|SQLException
block|{
name|transportLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|stmtHandle
operator|!=
literal|null
condition|)
block|{
name|TCloseOperationReq
name|closeReq
init|=
operator|new
name|TCloseOperationReq
argument_list|(
name|stmtHandle
argument_list|)
decl_stmt|;
name|TCloseOperationResp
name|closeResp
init|=
name|client
operator|.
name|CloseOperation
argument_list|(
name|closeReq
argument_list|)
decl_stmt|;
name|Utils
operator|.
name|verifySuccessWithInfo
argument_list|(
name|closeResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|"08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|transportLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|isQueryClosed
operator|=
literal|true
expr_stmt|;
name|isExecuteStatementFailed
operator|=
literal|false
expr_stmt|;
name|stmtHandle
operator|=
literal|null
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#close()    */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
return|return;
block|}
name|closeClientOperation
argument_list|()
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
name|resultSet
operator|=
literal|null
expr_stmt|;
name|isClosed
operator|=
literal|true
expr_stmt|;
block|}
comment|// JDK 1.7
specifier|public
name|void
name|closeOnCompletion
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#execute(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|boolean
name|execute
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"execute"
argument_list|)
expr_stmt|;
name|closeClientOperation
argument_list|()
expr_stmt|;
name|initFlags
argument_list|()
expr_stmt|;
name|TExecuteStatementReq
name|execReq
init|=
operator|new
name|TExecuteStatementReq
argument_list|(
name|sessHandle
argument_list|,
name|sql
argument_list|)
decl_stmt|;
comment|/**      * Run asynchronously whenever possible      * Currently only a SQLOperation can be run asynchronously,      * in a background operation thread      * Compilation is synchronous and execution is asynchronous      */
name|execReq
operator|.
name|setRunAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|execReq
operator|.
name|setConfOverlay
argument_list|(
name|sessConf
argument_list|)
expr_stmt|;
name|transportLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|TExecuteStatementResp
name|execResp
init|=
name|client
operator|.
name|ExecuteStatement
argument_list|(
name|execReq
argument_list|)
decl_stmt|;
name|Utils
operator|.
name|verifySuccessWithInfo
argument_list|(
name|execResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|stmtHandle
operator|=
name|execResp
operator|.
name|getOperationHandle
argument_list|()
expr_stmt|;
name|isExecuteStatementFailed
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|eS
parameter_list|)
block|{
name|isExecuteStatementFailed
operator|=
literal|true
expr_stmt|;
throw|throw
name|eS
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|isExecuteStatementFailed
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
literal|"08S01"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|transportLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|TGetOperationStatusReq
name|statusReq
init|=
operator|new
name|TGetOperationStatusReq
argument_list|(
name|stmtHandle
argument_list|)
decl_stmt|;
name|boolean
name|operationComplete
init|=
literal|false
decl_stmt|;
name|TGetOperationStatusResp
name|statusResp
decl_stmt|;
comment|// Poll on the operation status, till the operation is complete
while|while
condition|(
operator|!
name|operationComplete
condition|)
block|{
try|try
block|{
comment|/**          * For an async SQLOperation, GetOperationStatus will use the long polling approach          * It will essentially return after the HIVE_SERVER2_LONG_POLLING_TIMEOUT (a server config) expires          */
name|transportLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|statusResp
operator|=
name|client
operator|.
name|GetOperationStatus
argument_list|(
name|statusReq
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|transportLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|Utils
operator|.
name|verifySuccessWithInfo
argument_list|(
name|statusResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|statusResp
operator|.
name|isSetOperationState
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|statusResp
operator|.
name|getOperationState
argument_list|()
condition|)
block|{
case|case
name|CLOSED_STATE
case|:
case|case
name|FINISHED_STATE
case|:
name|operationComplete
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CANCELED_STATE
case|:
comment|// 01000 -> warning
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Query was cancelled"
argument_list|,
literal|"01000"
argument_list|)
throw|;
case|case
name|ERROR_STATE
case|:
comment|// Get the error details from the underlying exception
throw|throw
operator|new
name|SQLException
argument_list|(
name|statusResp
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
name|statusResp
operator|.
name|getSqlState
argument_list|()
argument_list|,
name|statusResp
operator|.
name|getErrorCode
argument_list|()
argument_list|)
throw|;
case|case
name|UKNOWN_STATE
case|:
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Unknown query"
argument_list|,
literal|"HY000"
argument_list|)
throw|;
case|case
name|INITIALIZED_STATE
case|:
case|case
name|PENDING_STATE
case|:
case|case
name|RUNNING_STATE
case|:
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|isLogBeingGenerated
operator|=
literal|false
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|isLogBeingGenerated
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|"08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|isLogBeingGenerated
operator|=
literal|false
expr_stmt|;
comment|// The query should be completed by now
if|if
condition|(
operator|!
name|stmtHandle
operator|.
name|isHasResultSet
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|resultSet
operator|=
operator|new
name|HiveQueryResultSet
operator|.
name|Builder
argument_list|(
name|this
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|setSessionHandle
argument_list|(
name|sessHandle
argument_list|)
operator|.
name|setStmtHandle
argument_list|(
name|stmtHandle
argument_list|)
operator|.
name|setMaxRows
argument_list|(
name|maxRows
argument_list|)
operator|.
name|setFetchSize
argument_list|(
name|fetchSize
argument_list|)
operator|.
name|setScrollable
argument_list|(
name|isScrollableResultset
argument_list|)
operator|.
name|setTransportLock
argument_list|(
name|transportLock
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|checkConnection
parameter_list|(
name|String
name|action
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Can't "
operator|+
name|action
operator|+
literal|" after statement has been closed"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|initFlags
parameter_list|()
block|{
name|isCancelled
operator|=
literal|false
expr_stmt|;
name|isQueryClosed
operator|=
literal|false
expr_stmt|;
name|isLogBeingGenerated
operator|=
literal|true
expr_stmt|;
name|isExecuteStatementFailed
operator|=
literal|false
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#execute(java.lang.String, int)    */
annotation|@
name|Override
specifier|public
name|boolean
name|execute
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|autoGeneratedKeys
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#execute(java.lang.String, int[])    */
annotation|@
name|Override
specifier|public
name|boolean
name|execute
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
index|[]
name|columnIndexes
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#execute(java.lang.String, java.lang.String[])    */
annotation|@
name|Override
specifier|public
name|boolean
name|execute
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#executeBatch()    */
annotation|@
name|Override
specifier|public
name|int
index|[]
name|executeBatch
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#executeQuery(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|ResultSet
name|executeQuery
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
operator|!
name|execute
argument_list|(
name|sql
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"The query did not generate a result set!"
argument_list|)
throw|;
block|}
return|return
name|resultSet
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#executeUpdate(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|int
name|executeUpdate
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#executeUpdate(java.lang.String, int)    */
annotation|@
name|Override
specifier|public
name|int
name|executeUpdate
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|autoGeneratedKeys
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#executeUpdate(java.lang.String, int[])    */
annotation|@
name|Override
specifier|public
name|int
name|executeUpdate
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
index|[]
name|columnIndexes
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#executeUpdate(java.lang.String, java.lang.String[])    */
annotation|@
name|Override
specifier|public
name|int
name|executeUpdate
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getConnection()    */
annotation|@
name|Override
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"getConnection"
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|connection
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getFetchDirection()    */
annotation|@
name|Override
specifier|public
name|int
name|getFetchDirection
parameter_list|()
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"getFetchDirection"
argument_list|)
expr_stmt|;
return|return
name|ResultSet
operator|.
name|FETCH_FORWARD
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getFetchSize()    */
annotation|@
name|Override
specifier|public
name|int
name|getFetchSize
parameter_list|()
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"getFetchSize"
argument_list|)
expr_stmt|;
return|return
name|fetchSize
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getGeneratedKeys()    */
annotation|@
name|Override
specifier|public
name|ResultSet
name|getGeneratedKeys
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getMaxFieldSize()    */
annotation|@
name|Override
specifier|public
name|int
name|getMaxFieldSize
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getMaxRows()    */
annotation|@
name|Override
specifier|public
name|int
name|getMaxRows
parameter_list|()
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"getMaxRows"
argument_list|)
expr_stmt|;
return|return
name|maxRows
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getMoreResults()    */
annotation|@
name|Override
specifier|public
name|boolean
name|getMoreResults
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getMoreResults(int)    */
annotation|@
name|Override
specifier|public
name|boolean
name|getMoreResults
parameter_list|(
name|int
name|current
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getQueryTimeout()    */
annotation|@
name|Override
specifier|public
name|int
name|getQueryTimeout
parameter_list|()
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"getQueryTimeout"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getResultSet()    */
annotation|@
name|Override
specifier|public
name|ResultSet
name|getResultSet
parameter_list|()
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"getResultSet"
argument_list|)
expr_stmt|;
return|return
name|resultSet
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getResultSetConcurrency()    */
annotation|@
name|Override
specifier|public
name|int
name|getResultSetConcurrency
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getResultSetHoldability()    */
annotation|@
name|Override
specifier|public
name|int
name|getResultSetHoldability
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getResultSetType()    */
annotation|@
name|Override
specifier|public
name|int
name|getResultSetType
parameter_list|()
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"getResultSetType"
argument_list|)
expr_stmt|;
return|return
name|ResultSet
operator|.
name|TYPE_FORWARD_ONLY
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getUpdateCount()    */
annotation|@
name|Override
specifier|public
name|int
name|getUpdateCount
parameter_list|()
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"getUpdateCount"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#getWarnings()    */
annotation|@
name|Override
specifier|public
name|SQLWarning
name|getWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"getWarnings"
argument_list|)
expr_stmt|;
return|return
name|warningChain
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#isClosed()    */
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|isClosed
return|;
block|}
comment|// JDK 1.7
specifier|public
name|boolean
name|isCloseOnCompletion
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#isPoolable()    */
annotation|@
name|Override
specifier|public
name|boolean
name|isPoolable
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#setCursorName(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|void
name|setCursorName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#setEscapeProcessing(boolean)    */
annotation|@
name|Override
specifier|public
name|void
name|setEscapeProcessing
parameter_list|(
name|boolean
name|enable
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|enable
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#setFetchDirection(int)    */
annotation|@
name|Override
specifier|public
name|void
name|setFetchDirection
parameter_list|(
name|int
name|direction
parameter_list|)
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"setFetchDirection"
argument_list|)
expr_stmt|;
if|if
condition|(
name|direction
operator|!=
name|ResultSet
operator|.
name|FETCH_FORWARD
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Not supported direction "
operator|+
name|direction
argument_list|)
throw|;
block|}
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#setFetchSize(int)    */
annotation|@
name|Override
specifier|public
name|void
name|setFetchSize
parameter_list|(
name|int
name|rows
parameter_list|)
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"setFetchSize"
argument_list|)
expr_stmt|;
name|fetchSize
operator|=
name|rows
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#setMaxFieldSize(int)    */
annotation|@
name|Override
specifier|public
name|void
name|setMaxFieldSize
parameter_list|(
name|int
name|max
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#setMaxRows(int)    */
annotation|@
name|Override
specifier|public
name|void
name|setMaxRows
parameter_list|(
name|int
name|max
parameter_list|)
throws|throws
name|SQLException
block|{
name|checkConnection
argument_list|(
literal|"setMaxRows"
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"max must be>= 0"
argument_list|)
throw|;
block|}
name|maxRows
operator|=
name|max
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#setPoolable(boolean)    */
annotation|@
name|Override
specifier|public
name|void
name|setPoolable
parameter_list|(
name|boolean
name|poolable
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Statement#setQueryTimeout(int)    */
annotation|@
name|Override
specifier|public
name|void
name|setQueryTimeout
parameter_list|(
name|int
name|seconds
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// 0 is supported which means "no limit"
if|if
condition|(
name|seconds
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Query timeout seconds must be 0"
argument_list|)
throw|;
block|}
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Wrapper#isWrapperFor(java.lang.Class)    */
annotation|@
name|Override
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Wrapper#unwrap(java.lang.Class)    */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Cannot unwrap to "
operator|+
name|iface
argument_list|)
throw|;
block|}
comment|/**    * Check whether query execution might be producing more logs to be fetched.    * This method is a public API for usage outside of Hive, although it is not part of the    * interface java.sql.Statement.    * @return true if query execution might be producing more logs. It does not indicate if last    *         log lines have been fetched by getQueryLog.    */
specifier|public
name|boolean
name|hasMoreLogs
parameter_list|()
block|{
return|return
name|isLogBeingGenerated
return|;
block|}
comment|/**    * Get the execution logs of the given SQL statement.    * This method is a public API for usage outside of Hive, although it is not part of the    * interface java.sql.Statement.    * This method gets the incremental logs during SQL execution, and uses fetchSize holden by    * HiveStatement object.    * @return a list of logs. It can be empty if there are no new logs to be retrieved at that time.    * @throws SQLException    * @throws ClosedOrCancelledStatementException if statement has been cancelled or closed    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getQueryLog
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ClosedOrCancelledStatementException
block|{
return|return
name|getQueryLog
argument_list|(
literal|true
argument_list|,
name|fetchSize
argument_list|)
return|;
block|}
comment|/**    * Get the execution logs of the given SQL statement.    * This method is a public API for usage outside of Hive, although it is not part of the    * interface java.sql.Statement.    * @param incremental indicate getting logs either incrementally or from the beginning,    *                    when it is true or false.    * @param fetchSize the number of lines to fetch    * @return a list of logs. It can be empty if there are no new logs to be retrieved at that time.    * @throws SQLException    * @throws ClosedOrCancelledStatementException if statement has been cancelled or closed    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getQueryLog
parameter_list|(
name|boolean
name|incremental
parameter_list|,
name|int
name|fetchSize
parameter_list|)
throws|throws
name|SQLException
throws|,
name|ClosedOrCancelledStatementException
block|{
name|checkConnection
argument_list|(
literal|"getQueryLog"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCancelled
condition|)
block|{
throw|throw
operator|new
name|ClosedOrCancelledStatementException
argument_list|(
literal|"Method getQueryLog() failed. The "
operator|+
literal|"statement has been closed or cancelled."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|logs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TFetchResultsResp
name|tFetchResultsResp
init|=
literal|null
decl_stmt|;
name|transportLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|stmtHandle
operator|!=
literal|null
condition|)
block|{
name|TFetchResultsReq
name|tFetchResultsReq
init|=
operator|new
name|TFetchResultsReq
argument_list|(
name|stmtHandle
argument_list|,
name|getFetchOrientation
argument_list|(
name|incremental
argument_list|)
argument_list|,
name|fetchSize
argument_list|)
decl_stmt|;
name|tFetchResultsReq
operator|.
name|setFetchType
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|tFetchResultsResp
operator|=
name|client
operator|.
name|FetchResults
argument_list|(
name|tFetchResultsReq
argument_list|)
expr_stmt|;
name|Utils
operator|.
name|verifySuccessWithInfo
argument_list|(
name|tFetchResultsResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isQueryClosed
condition|)
block|{
throw|throw
operator|new
name|ClosedOrCancelledStatementException
argument_list|(
literal|"Method getQueryLog() failed. The "
operator|+
literal|"statement has been closed or cancelled."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isExecuteStatementFailed
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Method getQueryLog() failed. Because the stmtHandle in "
operator|+
literal|"HiveStatement is null and the statement execution might fail."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|logs
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Error when getting query log: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|transportLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|RowSet
name|rowSet
init|=
name|RowSetFactory
operator|.
name|create
argument_list|(
name|tFetchResultsResp
operator|.
name|getResults
argument_list|()
argument_list|,
name|connection
operator|.
name|getProtocol
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|row
range|:
name|rowSet
control|)
block|{
name|logs
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|row
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|logs
return|;
block|}
specifier|private
name|TFetchOrientation
name|getFetchOrientation
parameter_list|(
name|boolean
name|incremental
parameter_list|)
block|{
if|if
condition|(
name|incremental
condition|)
block|{
return|return
name|TFetchOrientation
operator|.
name|FETCH_NEXT
return|;
block|}
else|else
block|{
return|return
name|TFetchOrientation
operator|.
name|FETCH_FIRST
return|;
block|}
block|}
block|}
end_class

end_unit

