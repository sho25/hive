begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|ExponentialBackoffRetry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|Utils
operator|.
name|JdbcConnectionParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_class
specifier|public
class|class
name|ZooKeeperHiveClientHelper
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZooKeeperHiveClientHelper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * A no-op watcher class    */
specifier|public
specifier|static
class|class
name|DummyWatcher
implements|implements
name|Watcher
block|{
specifier|public
name|void
name|process
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
name|event
parameter_list|)
block|{     }
block|}
comment|/**    * Resolve to a host:port by connecting to ZooKeeper and picking a host randomly.    *    * @param uri    * @param connParams    * @return    * @throws SQLException    */
specifier|static
name|String
name|getNextServerUriFromZooKeeper
parameter_list|(
name|JdbcConnectionParams
name|connParams
parameter_list|)
throws|throws
name|ZooKeeperHiveClientException
block|{
name|String
name|zooKeeperEnsemble
init|=
name|connParams
operator|.
name|getZooKeeperEnsemble
argument_list|()
decl_stmt|;
name|String
name|zooKeeperNamespace
init|=
name|connParams
operator|.
name|getSessionVars
argument_list|()
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|ZOOKEEPER_NAMESPACE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|zooKeeperNamespace
operator|==
literal|null
operator|)
operator|||
operator|(
name|zooKeeperNamespace
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|zooKeeperNamespace
operator|=
name|JdbcConnectionParams
operator|.
name|ZOOKEEPER_DEFAULT_NAMESPACE
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|serverHosts
decl_stmt|;
name|Random
name|randomizer
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|String
name|serverNode
decl_stmt|;
name|CuratorFramework
name|zooKeeperClient
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
name|zooKeeperEnsemble
argument_list|)
operator|.
name|sessionTimeoutMs
argument_list|(
name|JdbcConnectionParams
operator|.
name|ZOOKEEPER_SESSION_TIMEOUT
argument_list|)
operator|.
name|connectionTimeoutMs
argument_list|(
name|JdbcConnectionParams
operator|.
name|ZOOKEEPER_CONNECTION_TIMEOUT
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|ExponentialBackoffRetry
argument_list|(
literal|1000
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|zooKeeperClient
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|serverHosts
operator|=
name|zooKeeperClient
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/"
operator|+
name|zooKeeperNamespace
argument_list|)
expr_stmt|;
comment|// Remove the znodes we've already tried from this list
name|serverHosts
operator|.
name|removeAll
argument_list|(
name|connParams
operator|.
name|getRejectedHostZnodePaths
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverHosts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ZooKeeperHiveClientException
argument_list|(
literal|"Tried all existing HiveServer2 uris from ZooKeeper."
argument_list|)
throw|;
block|}
comment|// Now pick a host randomly
name|serverNode
operator|=
name|serverHosts
operator|.
name|get
argument_list|(
name|randomizer
operator|.
name|nextInt
argument_list|(
name|serverHosts
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connParams
operator|.
name|setCurrentHostZnodePath
argument_list|(
name|serverNode
argument_list|)
expr_stmt|;
name|String
name|serverUri
init|=
operator|new
name|String
argument_list|(
name|zooKeeperClient
operator|.
name|getData
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/"
operator|+
name|zooKeeperNamespace
operator|+
literal|"/"
operator|+
name|serverNode
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Selected HiveServer2 instance with uri: "
operator|+
name|serverUri
argument_list|)
expr_stmt|;
return|return
name|serverUri
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ZooKeeperHiveClientException
argument_list|(
literal|"Unable to read HiveServer2 uri from ZooKeeper"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// Close the client connection with ZooKeeper
if|if
condition|(
name|zooKeeperClient
operator|!=
literal|null
condition|)
block|{
name|zooKeeperClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

