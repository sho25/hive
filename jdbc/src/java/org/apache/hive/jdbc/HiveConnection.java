begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TSetClientInfoResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TSetClientInfoReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|auth
operator|.
name|HiveAuthUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|Utils
operator|.
name|JdbcConnectionParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HiveAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|KerberosSaslHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|PlainSaslHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|SaslQOP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|SessionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
operator|.
name|EmbeddedThriftBinaryCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCancelDelegationTokenReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCancelDelegationTokenResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCloseSessionReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetDelegationTokenReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TGetDelegationTokenResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TOpenSessionReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TOpenSessionResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TRenewDelegationTokenReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TRenewDelegationTokenResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TSessionHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequestInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|CookieStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpRequestRetryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ServiceUnavailableRetryStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|RegistryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|socket
operator|.
name|ConnectionSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ssl
operator|.
name|DefaultHostnameVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ssl
operator|.
name|SSLConnectionSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|BasicCookieStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|conn
operator|.
name|BasicHttpClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ssl
operator|.
name|SSLContexts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|THttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Clob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|NClob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLClientInfoException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLFeatureNotSupportedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLWarning
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLXML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Savepoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * HiveConnection.  *  */
end_comment

begin_class
specifier|public
class|class
name|HiveConnection
implements|implements
name|java
operator|.
name|sql
operator|.
name|Connection
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|jdbcUriString
decl_stmt|;
specifier|private
name|String
name|host
decl_stmt|;
specifier|private
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sessConfMap
decl_stmt|;
specifier|private
name|JdbcConnectionParams
name|connParams
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isEmbeddedMode
decl_stmt|;
specifier|private
name|TTransport
name|transport
decl_stmt|;
specifier|private
name|boolean
name|assumeSubject
decl_stmt|;
comment|// TODO should be replaced by CliServiceClient
specifier|private
name|TCLIService
operator|.
name|Iface
name|client
decl_stmt|;
specifier|private
name|boolean
name|isClosed
init|=
literal|true
decl_stmt|;
specifier|private
name|SQLWarning
name|warningChain
init|=
literal|null
decl_stmt|;
specifier|private
name|TSessionHandle
name|sessHandle
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TProtocolVersion
argument_list|>
name|supportedProtocols
init|=
operator|new
name|LinkedList
argument_list|<
name|TProtocolVersion
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|loginTimeout
init|=
literal|0
decl_stmt|;
specifier|private
name|TProtocolVersion
name|protocol
decl_stmt|;
specifier|private
name|int
name|fetchSize
init|=
name|HiveStatement
operator|.
name|DEFAULT_FETCH_SIZE
decl_stmt|;
specifier|private
name|String
name|initFile
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|wmPool
init|=
literal|null
decl_stmt|,
name|wmApp
init|=
literal|null
decl_stmt|;
specifier|private
name|Properties
name|clientInfo
decl_stmt|;
comment|/**    * Get all direct HiveServer2 URLs from a ZooKeeper based HiveServer2 URL    * @param zookeeperBasedHS2Url    * @return    * @throws Exception    */
specifier|public
specifier|static
name|List
argument_list|<
name|JdbcConnectionParams
argument_list|>
name|getAllUrls
parameter_list|(
name|String
name|zookeeperBasedHS2Url
parameter_list|)
throws|throws
name|Exception
block|{
name|JdbcConnectionParams
name|params
init|=
name|Utils
operator|.
name|parseURL
argument_list|(
name|zookeeperBasedHS2Url
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
decl_stmt|;
comment|// if zk is disabled or if HA service discovery is enabled we return the already populated params.
comment|// in HA mode, params is already populated with Active server host info.
if|if
condition|(
name|params
operator|.
name|getZooKeeperEnsemble
argument_list|()
operator|==
literal|null
operator|||
name|ZooKeeperHiveClientHelper
operator|.
name|isZkHADynamicDiscoveryMode
argument_list|(
name|params
operator|.
name|getSessionVars
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|params
argument_list|)
return|;
block|}
return|return
name|ZooKeeperHiveClientHelper
operator|.
name|getDirectParamsList
argument_list|(
name|params
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getAllUrlStrings
parameter_list|(
name|String
name|zookeeperBasedHS2Url
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|jdbcUrls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JdbcConnectionParams
argument_list|>
name|allConnectionParams
init|=
name|getAllUrls
argument_list|(
name|zookeeperBasedHS2Url
argument_list|)
decl_stmt|;
for|for
control|(
name|JdbcConnectionParams
name|cp
range|:
name|allConnectionParams
control|)
block|{
name|String
name|jdbcUrl
init|=
name|makeDirectJDBCUrlFromConnectionParams
argument_list|(
name|cp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|jdbcUrl
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|jdbcUrl
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|jdbcUrls
operator|.
name|add
argument_list|(
name|jdbcUrl
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jdbcUrls
return|;
block|}
specifier|private
specifier|static
name|String
name|makeDirectJDBCUrlFromConnectionParams
parameter_list|(
name|JdbcConnectionParams
name|cp
parameter_list|)
block|{
comment|// Direct JDBC Url format:
comment|// jdbc:hive2://<host1>:<port1>/dbName;sess_var_list?hive_conf_list#hive_var_list
name|StringBuilder
name|url
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|cp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cp
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
name|cp
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|cp
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|cp
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add session vars
if|if
condition|(
operator|(
name|cp
operator|.
name|getSessionVars
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|cp
operator|.
name|getSessionVars
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sessVar
range|:
name|cp
operator|.
name|getSessionVars
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|sessVar
operator|.
name|getKey
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|JdbcConnectionParams
operator|.
name|SERVICE_DISCOVERY_MODE
argument_list|)
operator|)
operator|||
operator|(
name|sessVar
operator|.
name|getKey
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|JdbcConnectionParams
operator|.
name|ZOOKEEPER_NAMESPACE
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
name|url
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|sessVar
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|sessVar
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add hive confs
if|if
condition|(
operator|(
name|cp
operator|.
name|getHiveConfs
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|cp
operator|.
name|getHiveConfs
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|boolean
name|firstKV
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveConf
range|:
name|cp
operator|.
name|getHiveConfs
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|firstKV
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstKV
operator|=
literal|false
expr_stmt|;
block|}
name|url
operator|.
name|append
argument_list|(
name|hiveConf
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|hiveConf
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add hive vars
if|if
condition|(
operator|(
name|cp
operator|.
name|getHiveVars
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|cp
operator|.
name|getHiveVars
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|boolean
name|firstKV
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveVar
range|:
name|cp
operator|.
name|getHiveVars
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|firstKV
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstKV
operator|=
literal|false
expr_stmt|;
block|}
name|url
operator|.
name|append
argument_list|(
name|hiveVar
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|hiveVar
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|HiveConnection
parameter_list|(
name|String
name|uri
parameter_list|,
name|Properties
name|info
parameter_list|)
throws|throws
name|SQLException
block|{
name|setupLoginTimeout
argument_list|()
expr_stmt|;
try|try
block|{
name|connParams
operator|=
name|Utils
operator|.
name|parseURL
argument_list|(
name|uri
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ZooKeeperHiveClientException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|jdbcUriString
operator|=
name|connParams
operator|.
name|getJdbcUriString
argument_list|()
expr_stmt|;
comment|// JDBC URL: jdbc:hive2://<host>:<port>/dbName;sess_var_list?hive_conf_list#hive_var_list
comment|// each list:<key1>=<val1>;<key2>=<val2> and so on
comment|// sess_var_list -> sessConfMap
comment|// hive_conf_list -> hiveConfMap
comment|// hive_var_list -> hiveVarMap
name|sessConfMap
operator|=
name|connParams
operator|.
name|getSessionVars
argument_list|()
expr_stmt|;
if|if
condition|(
name|isKerberosAuthMode
argument_list|()
condition|)
block|{
name|host
operator|=
name|Utils
operator|.
name|getCanonicalHostName
argument_list|(
name|connParams
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|host
operator|=
name|connParams
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
name|port
operator|=
name|connParams
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|isEmbeddedMode
operator|=
name|connParams
operator|.
name|isEmbeddedMode
argument_list|()
expr_stmt|;
if|if
condition|(
name|sessConfMap
operator|.
name|containsKey
argument_list|(
name|JdbcConnectionParams
operator|.
name|FETCH_SIZE
argument_list|)
condition|)
block|{
name|fetchSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|FETCH_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sessConfMap
operator|.
name|containsKey
argument_list|(
name|JdbcConnectionParams
operator|.
name|INIT_FILE
argument_list|)
condition|)
block|{
name|initFile
operator|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|INIT_FILE
argument_list|)
expr_stmt|;
block|}
name|wmPool
operator|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|WM_POOL
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|application
range|:
name|JdbcConnectionParams
operator|.
name|APPLICATION
control|)
block|{
name|wmApp
operator|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|application
argument_list|)
expr_stmt|;
if|if
condition|(
name|wmApp
operator|!=
literal|null
condition|)
break|break;
block|}
comment|// add supported protocols
name|supportedProtocols
operator|.
name|add
argument_list|(
name|TProtocolVersion
operator|.
name|HIVE_CLI_SERVICE_PROTOCOL_V1
argument_list|)
expr_stmt|;
name|supportedProtocols
operator|.
name|add
argument_list|(
name|TProtocolVersion
operator|.
name|HIVE_CLI_SERVICE_PROTOCOL_V2
argument_list|)
expr_stmt|;
name|supportedProtocols
operator|.
name|add
argument_list|(
name|TProtocolVersion
operator|.
name|HIVE_CLI_SERVICE_PROTOCOL_V3
argument_list|)
expr_stmt|;
name|supportedProtocols
operator|.
name|add
argument_list|(
name|TProtocolVersion
operator|.
name|HIVE_CLI_SERVICE_PROTOCOL_V4
argument_list|)
expr_stmt|;
name|supportedProtocols
operator|.
name|add
argument_list|(
name|TProtocolVersion
operator|.
name|HIVE_CLI_SERVICE_PROTOCOL_V5
argument_list|)
expr_stmt|;
name|supportedProtocols
operator|.
name|add
argument_list|(
name|TProtocolVersion
operator|.
name|HIVE_CLI_SERVICE_PROTOCOL_V6
argument_list|)
expr_stmt|;
name|supportedProtocols
operator|.
name|add
argument_list|(
name|TProtocolVersion
operator|.
name|HIVE_CLI_SERVICE_PROTOCOL_V7
argument_list|)
expr_stmt|;
name|supportedProtocols
operator|.
name|add
argument_list|(
name|TProtocolVersion
operator|.
name|HIVE_CLI_SERVICE_PROTOCOL_V8
argument_list|)
expr_stmt|;
name|supportedProtocols
operator|.
name|add
argument_list|(
name|TProtocolVersion
operator|.
name|HIVE_CLI_SERVICE_PROTOCOL_V9
argument_list|)
expr_stmt|;
name|supportedProtocols
operator|.
name|add
argument_list|(
name|TProtocolVersion
operator|.
name|HIVE_CLI_SERVICE_PROTOCOL_V10
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEmbeddedMode
condition|)
block|{
name|EmbeddedThriftBinaryCLIService
name|embeddedClient
init|=
operator|new
name|EmbeddedThriftBinaryCLIService
argument_list|()
decl_stmt|;
name|embeddedClient
operator|.
name|init
argument_list|(
literal|null
argument_list|,
name|connParams
operator|.
name|getHiveConfs
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|=
name|embeddedClient
expr_stmt|;
name|connParams
operator|.
name|getHiveConfs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// open client session
name|openSession
argument_list|()
expr_stmt|;
name|executeInitSql
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|int
name|maxRetries
init|=
literal|1
decl_stmt|;
try|try
block|{
name|String
name|strRetries
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|RETRIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|strRetries
argument_list|)
condition|)
block|{
name|maxRetries
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|strRetries
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// Ignore the exception
block|}
for|for
control|(
name|int
name|numRetries
init|=
literal|0
init|;
condition|;
control|)
block|{
try|try
block|{
comment|// open the client transport
name|openTransport
argument_list|()
expr_stmt|;
comment|// set up the client
name|client
operator|=
operator|new
name|TCLIService
operator|.
name|Client
argument_list|(
operator|new
name|TBinaryProtocol
argument_list|(
name|transport
argument_list|)
argument_list|)
expr_stmt|;
comment|// open client session
name|openSession
argument_list|()
expr_stmt|;
name|executeInitSql
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to connect to "
operator|+
name|connParams
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|connParams
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|errMsg
init|=
literal|null
decl_stmt|;
name|String
name|warnMsg
init|=
literal|"Could not open client transport with JDBC Uri: "
operator|+
name|jdbcUriString
operator|+
literal|": "
decl_stmt|;
if|if
condition|(
name|ZooKeeperHiveClientHelper
operator|.
name|isZkDynamicDiscoveryMode
argument_list|(
name|sessConfMap
argument_list|)
condition|)
block|{
name|errMsg
operator|=
literal|"Could not open client transport for any of the Server URI's in ZooKeeper: "
expr_stmt|;
comment|// Try next available server in zookeeper, or retry all the servers again if retry is enabled
while|while
condition|(
operator|!
name|Utils
operator|.
name|updateConnParamsFromZooKeeper
argument_list|(
name|connParams
argument_list|)
operator|&&
operator|++
name|numRetries
operator|<
name|maxRetries
condition|)
block|{
name|connParams
operator|.
name|getRejectedHostZnodePaths
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Update with new values
name|jdbcUriString
operator|=
name|connParams
operator|.
name|getJdbcUriString
argument_list|()
expr_stmt|;
if|if
condition|(
name|isKerberosAuthMode
argument_list|()
condition|)
block|{
name|host
operator|=
name|Utils
operator|.
name|getCanonicalHostName
argument_list|(
name|connParams
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|host
operator|=
name|connParams
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
name|port
operator|=
name|connParams
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|errMsg
operator|=
name|warnMsg
expr_stmt|;
operator|++
name|numRetries
expr_stmt|;
block|}
if|if
condition|(
name|numRetries
operator|>=
name|maxRetries
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|errMsg
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|" 08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|warnMsg
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" Retrying "
operator|+
name|numRetries
operator|+
literal|" of "
operator|+
name|maxRetries
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Wrap the client with a thread-safe proxy to serialize the RPC calls
name|client
operator|=
name|newSynchronizedClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeInitSql
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|initFile
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sqlList
init|=
name|parseInitFile
argument_list|(
name|initFile
argument_list|)
decl_stmt|;
name|Statement
name|st
init|=
name|createStatement
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|sql
range|:
name|sqlList
control|)
block|{
name|boolean
name|hasResult
init|=
name|st
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasResult
condition|)
block|{
name|ResultSet
name|rs
init|=
name|st
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to execute initial SQL"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseInitFile
parameter_list|(
name|String
name|initFile
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|initFile
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|initSqlList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|input
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|line
operator|=
name|line
operator|.
name|concat
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|initSqlList
operator|=
name|getInitSql
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to read initial SQL file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|br
operator|!=
literal|null
condition|)
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|initSqlList
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getInitSql
parameter_list|(
name|String
name|sbLine
parameter_list|)
block|{
name|char
index|[]
name|sqlArray
init|=
name|sbLine
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|initSqlList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|beginIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|sqlArray
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|sqlArray
index|[
name|index
index|]
operator|==
literal|';'
condition|)
block|{
name|String
name|sql
init|=
name|sbLine
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|,
name|index
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|initSqlList
operator|.
name|add
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|beginIndex
operator|=
name|index
operator|+
literal|1
expr_stmt|;
block|}
block|}
return|return
name|initSqlList
return|;
block|}
specifier|private
name|void
name|openTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeSubject
operator|=
name|JdbcConnectionParams
operator|.
name|AUTH_KERBEROS_AUTH_TYPE_FROM_SUBJECT
operator|.
name|equals
argument_list|(
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_KERBEROS_AUTH_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|transport
operator|=
name|isHttpTransportMode
argument_list|()
condition|?
name|createHttpTransport
argument_list|()
else|:
name|createBinaryTransport
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|transport
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|transport
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
name|logZkDiscoveryMessage
argument_list|(
literal|"Connected to "
operator|+
name|connParams
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|connParams
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getConnectedUrl
parameter_list|()
block|{
return|return
name|jdbcUriString
return|;
block|}
specifier|private
name|String
name|getServerHttpUrl
parameter_list|(
name|boolean
name|useSsl
parameter_list|)
block|{
comment|// Create the http/https url
comment|// JDBC driver will set up an https url if ssl is enabled, otherwise http
name|String
name|schemeName
init|=
name|useSsl
condition|?
literal|"https"
else|:
literal|"http"
decl_stmt|;
comment|// http path should begin with "/"
name|String
name|httpPath
decl_stmt|;
name|httpPath
operator|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|HTTP_PATH
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpPath
operator|==
literal|null
condition|)
block|{
name|httpPath
operator|=
literal|"/"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|httpPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|httpPath
operator|=
literal|"/"
operator|+
name|httpPath
expr_stmt|;
block|}
return|return
name|schemeName
operator|+
literal|"://"
operator|+
name|host
operator|+
literal|":"
operator|+
name|port
operator|+
name|httpPath
return|;
block|}
specifier|private
name|TTransport
name|createHttpTransport
parameter_list|()
throws|throws
name|SQLException
throws|,
name|TTransportException
block|{
name|CloseableHttpClient
name|httpClient
decl_stmt|;
name|boolean
name|useSsl
init|=
name|isSslConnection
argument_list|()
decl_stmt|;
comment|// Create an http client from the configs
name|httpClient
operator|=
name|getHttpClient
argument_list|(
name|useSsl
argument_list|)
expr_stmt|;
name|transport
operator|=
operator|new
name|THttpClient
argument_list|(
name|getServerHttpUrl
argument_list|(
name|useSsl
argument_list|)
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
return|return
name|transport
return|;
block|}
specifier|private
name|CloseableHttpClient
name|getHttpClient
parameter_list|(
name|Boolean
name|useSsl
parameter_list|)
throws|throws
name|SQLException
block|{
name|boolean
name|isCookieEnabled
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|COOKIE_AUTH
argument_list|)
operator|==
literal|null
operator|||
operator|(
operator|!
name|JdbcConnectionParams
operator|.
name|COOKIE_AUTH_FALSE
operator|.
name|equalsIgnoreCase
argument_list|(
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|COOKIE_AUTH
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|String
name|cookieName
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|COOKIE_NAME
argument_list|)
operator|==
literal|null
condition|?
name|JdbcConnectionParams
operator|.
name|DEFAULT_COOKIE_NAMES_HS2
else|:
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|COOKIE_NAME
argument_list|)
decl_stmt|;
name|CookieStore
name|cookieStore
init|=
name|isCookieEnabled
condition|?
operator|new
name|BasicCookieStore
argument_list|()
else|:
literal|null
decl_stmt|;
name|HttpClientBuilder
name|httpClientBuilder
decl_stmt|;
comment|// Request interceptor for any request pre-processing logic
name|HttpRequestInterceptor
name|requestInterceptor
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|additionalHttpHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|customCookies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Retrieve the additional HttpHeaders
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|sessConfMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|JdbcConnectionParams
operator|.
name|HTTP_HEADER_PREFIX
argument_list|)
condition|)
block|{
name|additionalHttpHeaders
operator|.
name|put
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|JdbcConnectionParams
operator|.
name|HTTP_HEADER_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|JdbcConnectionParams
operator|.
name|HTTP_COOKIE_PREFIX
argument_list|)
condition|)
block|{
name|customCookies
operator|.
name|put
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|JdbcConnectionParams
operator|.
name|HTTP_COOKIE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Configure http client for kerberos/password based authentication
if|if
condition|(
name|isKerberosAuthMode
argument_list|()
condition|)
block|{
comment|/**        * Add an interceptor which sets the appropriate header in the request.        * It does the kerberos authentication and get the final service ticket,        * for sending to the server before every request.        * In https mode, the entire information is encrypted        */
name|requestInterceptor
operator|=
operator|new
name|HttpKerberosRequestInterceptor
argument_list|(
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_PRINCIPAL
argument_list|)
argument_list|,
name|host
argument_list|,
name|getServerHttpUrl
argument_list|(
name|useSsl
argument_list|)
argument_list|,
name|assumeSubject
argument_list|,
name|cookieStore
argument_list|,
name|cookieName
argument_list|,
name|useSsl
argument_list|,
name|additionalHttpHeaders
argument_list|,
name|customCookies
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Check for delegation token, if present add it in the header
name|String
name|tokenStr
init|=
name|getClientDelegationToken
argument_list|(
name|sessConfMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenStr
operator|!=
literal|null
condition|)
block|{
name|requestInterceptor
operator|=
operator|new
name|HttpTokenAuthInterceptor
argument_list|(
name|tokenStr
argument_list|,
name|cookieStore
argument_list|,
name|cookieName
argument_list|,
name|useSsl
argument_list|,
name|additionalHttpHeaders
argument_list|,
name|customCookies
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/**        * Add an interceptor to pass username/password in the header.        * In https mode, the entire information is encrypted        */
name|requestInterceptor
operator|=
operator|new
name|HttpBasicAuthInterceptor
argument_list|(
name|getUserName
argument_list|()
argument_list|,
name|getPassword
argument_list|()
argument_list|,
name|cookieStore
argument_list|,
name|cookieName
argument_list|,
name|useSsl
argument_list|,
name|additionalHttpHeaders
argument_list|,
name|customCookies
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Configure http client for cookie based authentication
if|if
condition|(
name|isCookieEnabled
condition|)
block|{
comment|// Create a http client with a retry mechanism when the server returns a status code of 401.
name|httpClientBuilder
operator|=
name|HttpClients
operator|.
name|custom
argument_list|()
operator|.
name|setServiceUnavailableRetryStrategy
argument_list|(
operator|new
name|ServiceUnavailableRetryStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|retryRequest
parameter_list|(
specifier|final
name|HttpResponse
name|response
parameter_list|,
specifier|final
name|int
name|executionCount
parameter_list|,
specifier|final
name|HttpContext
name|context
parameter_list|)
block|{
name|int
name|statusCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|boolean
name|ret
init|=
name|statusCode
operator|==
literal|401
operator|&&
name|executionCount
operator|<=
literal|1
decl_stmt|;
comment|// Set the context attribute to true which will be interpreted by the request
comment|// interceptor
if|if
condition|(
name|ret
condition|)
block|{
name|context
operator|.
name|setAttribute
argument_list|(
name|Utils
operator|.
name|HIVE_SERVER2_RETRY_KEY
argument_list|,
name|Utils
operator|.
name|HIVE_SERVER2_RETRY_TRUE
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRetryInterval
parameter_list|()
block|{
comment|// Immediate retry
return|return
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|httpClientBuilder
operator|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
comment|// In case the server's idletimeout is set to a lower value, it might close it's side of
comment|// connection. However we retry one more time on NoHttpResponseException
name|httpClientBuilder
operator|.
name|setRetryHandler
argument_list|(
operator|new
name|HttpRequestRetryHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|retryRequest
parameter_list|(
name|IOException
name|exception
parameter_list|,
name|int
name|executionCount
parameter_list|,
name|HttpContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|executionCount
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Retry attempts to connect to server exceeded."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|exception
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NoHttpResponseException
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not connect to the server. Retrying one more time."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Add the request interceptor to the client builder
name|httpClientBuilder
operator|.
name|addInterceptorFirst
argument_list|(
name|requestInterceptor
argument_list|)
expr_stmt|;
comment|// Add an interceptor to add in an XSRF header
name|httpClientBuilder
operator|.
name|addInterceptorLast
argument_list|(
operator|new
name|XsrfHttpRequestInterceptor
argument_list|()
argument_list|)
expr_stmt|;
comment|// Configure http client for SSL
if|if
condition|(
name|useSsl
condition|)
block|{
name|String
name|useTwoWaySSL
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|USE_TWO_WAY_SSL
argument_list|)
decl_stmt|;
name|String
name|sslTrustStorePath
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_TRUST_STORE
argument_list|)
decl_stmt|;
name|String
name|sslTrustStorePassword
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_TRUST_STORE_PASSWORD
argument_list|)
decl_stmt|;
name|KeyStore
name|sslTrustStore
decl_stmt|;
name|SSLConnectionSocketFactory
name|socketFactory
decl_stmt|;
name|SSLContext
name|sslContext
decl_stmt|;
comment|/**        * The code within the try block throws: SSLInitializationException, KeyStoreException,        * IOException, NoSuchAlgorithmException, CertificateException, KeyManagementException&        * UnrecoverableKeyException. We don't want the client to retry on any of these,        * hence we catch all and throw a SQLException.        */
try|try
block|{
if|if
condition|(
name|useTwoWaySSL
operator|!=
literal|null
operator|&&
name|useTwoWaySSL
operator|.
name|equalsIgnoreCase
argument_list|(
name|JdbcConnectionParams
operator|.
name|TRUE
argument_list|)
condition|)
block|{
name|socketFactory
operator|=
name|getTwoWaySSLSocketFactory
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sslTrustStorePath
operator|==
literal|null
operator|||
name|sslTrustStorePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Create a default socket factory based on standard JSSE trust material
name|socketFactory
operator|=
name|SSLConnectionSocketFactory
operator|.
name|getSocketFactory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Pick trust store config from the given path
name|sslTrustStore
operator|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_TRUST_STORE_TYPE
argument_list|)
expr_stmt|;
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|sslTrustStorePath
argument_list|)
init|)
block|{
name|sslTrustStore
operator|.
name|load
argument_list|(
name|fis
argument_list|,
name|sslTrustStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sslContext
operator|=
name|SSLContexts
operator|.
name|custom
argument_list|()
operator|.
name|loadTrustMaterial
argument_list|(
name|sslTrustStore
argument_list|,
literal|null
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|socketFactory
operator|=
operator|new
name|SSLConnectionSocketFactory
argument_list|(
name|sslContext
argument_list|,
operator|new
name|DefaultHostnameVerifier
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Registry
argument_list|<
name|ConnectionSocketFactory
argument_list|>
name|registry
init|=
name|RegistryBuilder
operator|.
expr|<
name|ConnectionSocketFactory
operator|>
name|create
argument_list|()
operator|.
name|register
argument_list|(
literal|"https"
argument_list|,
name|socketFactory
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|httpClientBuilder
operator|.
name|setConnectionManager
argument_list|(
operator|new
name|BasicHttpClientConnectionManager
argument_list|(
name|registry
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Could not create an https connection to "
operator|+
name|jdbcUriString
operator|+
literal|". "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
name|msg
argument_list|,
literal|" 08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|httpClientBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create underlying SSL or non-SSL transport    *    * @return TTransport    * @throws TTransportException    */
specifier|private
name|TTransport
name|createUnderlyingTransport
parameter_list|()
throws|throws
name|TTransportException
block|{
name|TTransport
name|transport
init|=
literal|null
decl_stmt|;
comment|// Note: Thrift returns an SSL socket that is already bound to the specified host:port
comment|// Therefore an open called on this would be a no-op later
comment|// Hence, any TTransportException related to connecting with the peer are thrown here.
comment|// Bubbling them up the call hierarchy so that a retry can happen in openTransport,
comment|// if dynamic service discovery is configured.
if|if
condition|(
name|isSslConnection
argument_list|()
condition|)
block|{
comment|// get SSL socket
name|String
name|sslTrustStore
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_TRUST_STORE
argument_list|)
decl_stmt|;
name|String
name|sslTrustStorePassword
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_TRUST_STORE_PASSWORD
argument_list|)
decl_stmt|;
if|if
condition|(
name|sslTrustStore
operator|==
literal|null
operator|||
name|sslTrustStore
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|transport
operator|=
name|HiveAuthUtils
operator|.
name|getSSLSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|loginTimeout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transport
operator|=
name|HiveAuthUtils
operator|.
name|getSSLSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|loginTimeout
argument_list|,
name|sslTrustStore
argument_list|,
name|sslTrustStorePassword
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// get non-SSL socket transport
name|transport
operator|=
name|HiveAuthUtils
operator|.
name|getSocketTransport
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|loginTimeout
argument_list|)
expr_stmt|;
block|}
return|return
name|transport
return|;
block|}
comment|/**    * Create transport per the connection options    * Supported transport options are:    *   - SASL based transports over    *      + Kerberos    *      + Delegation token    *      + SSL    *      + non-SSL    *   - Raw (non-SASL) socket    *    *   Kerberos and Delegation token supports SASL QOP configurations    * @throws SQLException, TTransportException    */
specifier|private
name|TTransport
name|createBinaryTransport
parameter_list|()
throws|throws
name|SQLException
throws|,
name|TTransportException
block|{
try|try
block|{
name|TTransport
name|socketTransport
init|=
name|createUnderlyingTransport
argument_list|()
decl_stmt|;
comment|// handle secure connection if specified
if|if
condition|(
operator|!
name|JdbcConnectionParams
operator|.
name|AUTH_SIMPLE
operator|.
name|equals
argument_list|(
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
condition|)
block|{
comment|// If Kerberos
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SaslQOP
name|saslQOP
init|=
name|SaslQOP
operator|.
name|AUTH
decl_stmt|;
if|if
condition|(
name|sessConfMap
operator|.
name|containsKey
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_QOP
argument_list|)
condition|)
block|{
try|try
block|{
name|saslQOP
operator|=
name|SaslQOP
operator|.
name|fromString
argument_list|(
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_QOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Invalid "
operator|+
name|JdbcConnectionParams
operator|.
name|AUTH_QOP
operator|+
literal|" parameter. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"42000"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|saslProps
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|,
name|saslQOP
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the client did not specify qop then just negotiate the one supported by server
name|saslProps
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|,
literal|"auth-conf,auth-int,auth"
argument_list|)
expr_stmt|;
block|}
name|saslProps
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|SERVER_AUTH
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessConfMap
operator|.
name|containsKey
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_PRINCIPAL
argument_list|)
condition|)
block|{
name|transport
operator|=
name|KerberosSaslHelper
operator|.
name|getKerberosTransport
argument_list|(
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_PRINCIPAL
argument_list|)
argument_list|,
name|host
argument_list|,
name|socketTransport
argument_list|,
name|saslProps
argument_list|,
name|assumeSubject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If there's a delegation token available then use token based connection
name|String
name|tokenStr
init|=
name|getClientDelegationToken
argument_list|(
name|sessConfMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenStr
operator|!=
literal|null
condition|)
block|{
name|transport
operator|=
name|KerberosSaslHelper
operator|.
name|getTokenTransport
argument_list|(
name|tokenStr
argument_list|,
name|host
argument_list|,
name|socketTransport
argument_list|,
name|saslProps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we are using PLAIN Sasl connection with user/password
name|String
name|userName
init|=
name|getUserName
argument_list|()
decl_stmt|;
name|String
name|passwd
init|=
name|getPassword
argument_list|()
decl_stmt|;
comment|// Overlay the SASL transport on top of the base socket transport (SSL or non-SSL)
name|transport
operator|=
name|PlainSaslHelper
operator|.
name|getPlainTransport
argument_list|(
name|userName
argument_list|,
name|passwd
argument_list|,
name|socketTransport
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Raw socket connection (non-sasl)
name|transport
operator|=
name|socketTransport
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SaslException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Could not create secure connection to "
operator|+
name|jdbcUriString
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|" 08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|transport
return|;
block|}
name|SSLConnectionSocketFactory
name|getTwoWaySSLSocketFactory
parameter_list|()
throws|throws
name|SQLException
block|{
name|SSLConnectionSocketFactory
name|socketFactory
init|=
literal|null
decl_stmt|;
try|try
block|{
name|KeyManagerFactory
name|keyManagerFactory
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|JdbcConnectionParams
operator|.
name|SUNX509_ALGORITHM_STRING
argument_list|,
name|JdbcConnectionParams
operator|.
name|SUNJSSE_ALGORITHM_STRING
argument_list|)
decl_stmt|;
name|String
name|keyStorePath
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_KEY_STORE
argument_list|)
decl_stmt|;
name|String
name|keyStorePassword
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_KEY_STORE_PASSWORD
argument_list|)
decl_stmt|;
name|KeyStore
name|sslKeyStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_KEY_STORE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStorePath
operator|==
literal|null
operator|||
name|keyStorePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_KEY_STORE
operator|+
literal|" Not configured for 2 way SSL connection, keyStorePath param is empty"
argument_list|)
throw|;
block|}
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|keyStorePath
argument_list|)
init|)
block|{
name|sslKeyStore
operator|.
name|load
argument_list|(
name|fis
argument_list|,
name|keyStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keyManagerFactory
operator|.
name|init
argument_list|(
name|sslKeyStore
argument_list|,
name|keyStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|TrustManagerFactory
name|trustManagerFactory
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|JdbcConnectionParams
operator|.
name|SUNX509_ALGORITHM_STRING
argument_list|)
decl_stmt|;
name|String
name|trustStorePath
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_TRUST_STORE
argument_list|)
decl_stmt|;
name|String
name|trustStorePassword
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_TRUST_STORE_PASSWORD
argument_list|)
decl_stmt|;
name|KeyStore
name|sslTrustStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_TRUST_STORE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|trustStorePath
operator|==
literal|null
operator|||
name|trustStorePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|JdbcConnectionParams
operator|.
name|SSL_TRUST_STORE
operator|+
literal|" Not configured for 2 way SSL connection"
argument_list|)
throw|;
block|}
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|trustStorePath
argument_list|)
init|)
block|{
name|sslTrustStore
operator|.
name|load
argument_list|(
name|fis
argument_list|,
name|trustStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|trustManagerFactory
operator|.
name|init
argument_list|(
name|sslTrustStore
argument_list|)
expr_stmt|;
name|SSLContext
name|context
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
name|context
operator|.
name|init
argument_list|(
name|keyManagerFactory
operator|.
name|getKeyManagers
argument_list|()
argument_list|,
name|trustManagerFactory
operator|.
name|getTrustManagers
argument_list|()
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|socketFactory
operator|=
operator|new
name|SSLConnectionSocketFactory
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Error while initializing 2 way ssl socket factory "
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|socketFactory
return|;
block|}
comment|// Lookup the delegation token. First in the connection URL, then Configuration
specifier|private
name|String
name|getClientDelegationToken
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jdbcConnConf
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|tokenStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JdbcConnectionParams
operator|.
name|AUTH_TOKEN
operator|.
name|equalsIgnoreCase
argument_list|(
name|jdbcConnConf
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
condition|)
block|{
comment|// check delegation token in job conf if any
try|try
block|{
name|tokenStr
operator|=
name|SessionUtils
operator|.
name|getTokenStrForm
argument_list|(
name|HiveAuthConstants
operator|.
name|HS2_CLIENT_TOKEN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Error reading token "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|tokenStr
return|;
block|}
specifier|private
name|void
name|openSession
parameter_list|()
throws|throws
name|SQLException
block|{
name|TOpenSessionReq
name|openReq
init|=
operator|new
name|TOpenSessionReq
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|openConf
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// for remote JDBC client, try to set the conf var using 'set foo=bar'
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveConf
range|:
name|connParams
operator|.
name|getHiveConfs
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|openConf
operator|.
name|put
argument_list|(
literal|"set:hiveconf:"
operator|+
name|hiveConf
operator|.
name|getKey
argument_list|()
argument_list|,
name|hiveConf
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// For remote JDBC client, try to set the hive var using 'set hivevar:key=value'
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveVar
range|:
name|connParams
operator|.
name|getHiveVars
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|openConf
operator|.
name|put
argument_list|(
literal|"set:hivevar:"
operator|+
name|hiveVar
operator|.
name|getKey
argument_list|()
argument_list|,
name|hiveVar
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// switch the database
name|openConf
operator|.
name|put
argument_list|(
literal|"use:database"
argument_list|,
name|connParams
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
comment|// set the fetchSize
name|openConf
operator|.
name|put
argument_list|(
literal|"set:hiveconf:hive.server2.thrift.resultset.default.fetch.size"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|fetchSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|wmPool
operator|!=
literal|null
condition|)
block|{
name|openConf
operator|.
name|put
argument_list|(
literal|"set:hivevar:wmpool"
argument_list|,
name|wmPool
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wmApp
operator|!=
literal|null
condition|)
block|{
name|openConf
operator|.
name|put
argument_list|(
literal|"set:hivevar:wmapp"
argument_list|,
name|wmApp
argument_list|)
expr_stmt|;
block|}
comment|// set the session configuration
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sessVars
init|=
name|connParams
operator|.
name|getSessionVars
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessVars
operator|.
name|containsKey
argument_list|(
name|HiveAuthConstants
operator|.
name|HS2_PROXY_USER
argument_list|)
condition|)
block|{
name|openConf
operator|.
name|put
argument_list|(
name|HiveAuthConstants
operator|.
name|HS2_PROXY_USER
argument_list|,
name|sessVars
operator|.
name|get
argument_list|(
name|HiveAuthConstants
operator|.
name|HS2_PROXY_USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|openReq
operator|.
name|setConfiguration
argument_list|(
name|openConf
argument_list|)
expr_stmt|;
comment|// Store the user name in the open request in case no non-sasl authentication
if|if
condition|(
name|JdbcConnectionParams
operator|.
name|AUTH_SIMPLE
operator|.
name|equals
argument_list|(
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|openReq
operator|.
name|setUsername
argument_list|(
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_USER
argument_list|)
argument_list|)
expr_stmt|;
name|openReq
operator|.
name|setPassword
argument_list|(
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_PASSWD
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|TOpenSessionResp
name|openResp
init|=
name|client
operator|.
name|OpenSession
argument_list|(
name|openReq
argument_list|)
decl_stmt|;
comment|// validate connection
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|openResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|supportedProtocols
operator|.
name|contains
argument_list|(
name|openResp
operator|.
name|getServerProtocolVersion
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
literal|"Unsupported Hive2 protocol"
argument_list|)
throw|;
block|}
name|protocol
operator|=
name|openResp
operator|.
name|getServerProtocolVersion
argument_list|()
expr_stmt|;
name|sessHandle
operator|=
name|openResp
operator|.
name|getSessionHandle
argument_list|()
expr_stmt|;
comment|// Update fetchSize if modified by server
name|String
name|serverFetchSize
init|=
name|openResp
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"hive.server2.thrift.resultset.default.fetch.size"
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverFetchSize
operator|!=
literal|null
condition|)
block|{
name|fetchSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|serverFetchSize
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error opening session"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Could not establish connection to "
operator|+
name|jdbcUriString
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|" 08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|isClosed
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * @return username from sessConfMap    */
specifier|private
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|getSessionValue
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_USER
argument_list|,
name|JdbcConnectionParams
operator|.
name|ANONYMOUS_USER
argument_list|)
return|;
block|}
comment|/**    * @return password from sessConfMap    */
specifier|private
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|getSessionValue
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_PASSWD
argument_list|,
name|JdbcConnectionParams
operator|.
name|ANONYMOUS_PASSWD
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isSslConnection
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|USE_SSL
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isKerberosAuthMode
parameter_list|()
block|{
return|return
operator|!
name|JdbcConnectionParams
operator|.
name|AUTH_SIMPLE
operator|.
name|equals
argument_list|(
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|&&
name|sessConfMap
operator|.
name|containsKey
argument_list|(
name|JdbcConnectionParams
operator|.
name|AUTH_PRINCIPAL
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isHttpTransportMode
parameter_list|()
block|{
name|String
name|transportMode
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|JdbcConnectionParams
operator|.
name|TRANSPORT_MODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|transportMode
operator|!=
literal|null
operator|&&
operator|(
name|transportMode
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"http"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|logZkDiscoveryMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|ZooKeeperHiveClientHelper
operator|.
name|isZkDynamicDiscoveryMode
argument_list|(
name|sessConfMap
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Lookup varName in sessConfMap, if its null or empty return the default    * value varDefault    * @param varName    * @param varDefault    * @return    */
specifier|private
name|String
name|getSessionValue
parameter_list|(
name|String
name|varName
parameter_list|,
name|String
name|varDefault
parameter_list|)
block|{
name|String
name|varValue
init|=
name|sessConfMap
operator|.
name|get
argument_list|(
name|varName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|varValue
operator|==
literal|null
operator|)
operator|||
name|varValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|varValue
operator|=
name|varDefault
expr_stmt|;
block|}
return|return
name|varValue
return|;
block|}
comment|// copy loginTimeout from driver manager. Thrift timeout needs to be in millis
specifier|private
name|void
name|setupLoginTimeout
parameter_list|()
block|{
name|long
name|timeOut
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|DriverManager
operator|.
name|getLoginTimeout
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeOut
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|loginTimeout
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|loginTimeout
operator|=
operator|(
name|int
operator|)
name|timeOut
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|abort
parameter_list|(
name|Executor
name|executor
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// JDK 1.7
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getDelegationToken
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|renewer
parameter_list|)
throws|throws
name|SQLException
block|{
name|TGetDelegationTokenReq
name|req
init|=
operator|new
name|TGetDelegationTokenReq
argument_list|(
name|sessHandle
argument_list|,
name|owner
argument_list|,
name|renewer
argument_list|)
decl_stmt|;
try|try
block|{
name|TGetDelegationTokenResp
name|tokenResp
init|=
name|client
operator|.
name|GetDelegationToken
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|tokenResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tokenResp
operator|.
name|getDelegationToken
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Could not retrieve token: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|" 08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|String
name|tokenStr
parameter_list|)
throws|throws
name|SQLException
block|{
name|TCancelDelegationTokenReq
name|cancelReq
init|=
operator|new
name|TCancelDelegationTokenReq
argument_list|(
name|sessHandle
argument_list|,
name|tokenStr
argument_list|)
decl_stmt|;
try|try
block|{
name|TCancelDelegationTokenResp
name|cancelResp
init|=
name|client
operator|.
name|CancelDelegationToken
argument_list|(
name|cancelReq
argument_list|)
decl_stmt|;
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|cancelResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Could not cancel token: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|" 08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|renewDelegationToken
parameter_list|(
name|String
name|tokenStr
parameter_list|)
throws|throws
name|SQLException
block|{
name|TRenewDelegationTokenReq
name|cancelReq
init|=
operator|new
name|TRenewDelegationTokenReq
argument_list|(
name|sessHandle
argument_list|,
name|tokenStr
argument_list|)
decl_stmt|;
try|try
block|{
name|TRenewDelegationTokenResp
name|renewResp
init|=
name|client
operator|.
name|RenewDelegationToken
argument_list|(
name|cancelReq
argument_list|)
decl_stmt|;
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|renewResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Could not renew token: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|" 08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#clearWarnings()    */
annotation|@
name|Override
specifier|public
name|void
name|clearWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
name|warningChain
operator|=
literal|null
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#close()    */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
operator|!
name|isClosed
condition|)
block|{
name|TCloseSessionReq
name|closeReq
init|=
operator|new
name|TCloseSessionReq
argument_list|(
name|sessHandle
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|CloseSession
argument_list|(
name|closeReq
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Error while cleaning up the server resources"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|isClosed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#commit()    */
annotation|@
name|Override
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#createArrayOf(java.lang.String,    * java.lang.Object[])    */
annotation|@
name|Override
specifier|public
name|Array
name|createArrayOf
parameter_list|(
name|String
name|arg0
parameter_list|,
name|Object
index|[]
name|arg1
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#createBlob()    */
annotation|@
name|Override
specifier|public
name|Blob
name|createBlob
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#createClob()    */
annotation|@
name|Override
specifier|public
name|Clob
name|createClob
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#createNClob()    */
annotation|@
name|Override
specifier|public
name|NClob
name|createNClob
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#createSQLXML()    */
annotation|@
name|Override
specifier|public
name|SQLXML
name|createSQLXML
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/**    * Creates a Statement object for sending SQL statements to the database.    *    * @throws SQLException    *           if a database access error occurs.    * @see java.sql.Connection#createStatement()    */
annotation|@
name|Override
specifier|public
name|Statement
name|createStatement
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Can't create Statement, connection is closed"
argument_list|)
throw|;
block|}
return|return
operator|new
name|HiveStatement
argument_list|(
name|this
argument_list|,
name|client
argument_list|,
name|sessHandle
argument_list|,
name|fetchSize
argument_list|)
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#createStatement(int, int)    */
annotation|@
name|Override
specifier|public
name|Statement
name|createStatement
parameter_list|(
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|resultSetConcurrency
operator|!=
name|ResultSet
operator|.
name|CONCUR_READ_ONLY
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Statement with resultset concurrency "
operator|+
name|resultSetConcurrency
operator|+
literal|" is not supported"
argument_list|,
literal|"HYC00"
argument_list|)
throw|;
comment|// Optional feature not implemented
block|}
if|if
condition|(
name|resultSetType
operator|==
name|ResultSet
operator|.
name|TYPE_SCROLL_SENSITIVE
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Statement with resultset type "
operator|+
name|resultSetType
operator|+
literal|" is not supported"
argument_list|,
literal|"HYC00"
argument_list|)
throw|;
comment|// Optional feature not implemented
block|}
return|return
operator|new
name|HiveStatement
argument_list|(
name|this
argument_list|,
name|client
argument_list|,
name|sessHandle
argument_list|,
name|resultSetType
operator|==
name|ResultSet
operator|.
name|TYPE_SCROLL_INSENSITIVE
argument_list|,
name|fetchSize
argument_list|)
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#createStatement(int, int, int)    */
annotation|@
name|Override
specifier|public
name|Statement
name|createStatement
parameter_list|(
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#createStruct(java.lang.String, java.lang.Object[])    */
annotation|@
name|Override
specifier|public
name|Struct
name|createStruct
parameter_list|(
name|String
name|typeName
parameter_list|,
name|Object
index|[]
name|attributes
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#getAutoCommit()    */
annotation|@
name|Override
specifier|public
name|boolean
name|getAutoCommit
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|true
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#getCatalog()    */
annotation|@
name|Override
specifier|public
name|String
name|getCatalog
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|""
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#getClientInfo()    */
annotation|@
name|Override
specifier|public
name|Properties
name|getClientInfo
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|clientInfo
operator|==
literal|null
condition|?
operator|new
name|Properties
argument_list|()
else|:
name|clientInfo
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#getClientInfo(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|String
name|getClientInfo
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|clientInfo
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|clientInfo
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#getHoldability()    */
annotation|@
name|Override
specifier|public
name|int
name|getHoldability
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#getMetaData()    */
annotation|@
name|Override
specifier|public
name|DatabaseMetaData
name|getMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Connection is closed"
argument_list|)
throw|;
block|}
return|return
operator|new
name|HiveDatabaseMetaData
argument_list|(
name|this
argument_list|,
name|client
argument_list|,
name|sessHandle
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNetworkTimeout
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// JDK 1.7
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getSchema
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Connection is closed"
argument_list|)
throw|;
block|}
try|try
init|(
name|Statement
name|stmt
init|=
name|createStatement
argument_list|()
init|;
name|ResultSet
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT current_database()"
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Failed to get schema information"
argument_list|)
throw|;
block|}
return|return
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#getTransactionIsolation()    */
annotation|@
name|Override
specifier|public
name|int
name|getTransactionIsolation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|Connection
operator|.
name|TRANSACTION_NONE
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#getTypeMap()    */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getTypeMap
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#getWarnings()    */
annotation|@
name|Override
specifier|public
name|SQLWarning
name|getWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|warningChain
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#isClosed()    */
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|isClosed
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#isReadOnly()    */
annotation|@
name|Override
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#isValid(int)    */
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|timeout
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"timeout value was negative"
argument_list|)
throw|;
block|}
name|boolean
name|rc
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|productName
init|=
operator|new
name|HiveDatabaseMetaData
argument_list|(
name|this
argument_list|,
name|client
argument_list|,
name|sessHandle
argument_list|)
operator|.
name|getDatabaseProductName
argument_list|()
decl_stmt|;
name|rc
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// IGNORE
block|}
return|return
name|rc
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#nativeSQL(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|String
name|nativeSQL
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#prepareCall(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#prepareCall(java.lang.String, int, int)    */
annotation|@
name|Override
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#prepareCall(java.lang.String, int, int, int)    */
annotation|@
name|Override
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#prepareStatement(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
operator|new
name|HivePreparedStatement
argument_list|(
name|this
argument_list|,
name|client
argument_list|,
name|sessHandle
argument_list|,
name|sql
argument_list|)
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#prepareStatement(java.lang.String, int)    */
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|autoGeneratedKeys
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
operator|new
name|HivePreparedStatement
argument_list|(
name|this
argument_list|,
name|client
argument_list|,
name|sessHandle
argument_list|,
name|sql
argument_list|)
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#prepareStatement(java.lang.String, int[])    */
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
index|[]
name|columnIndexes
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#prepareStatement(java.lang.String,    * java.lang.String[])    */
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#prepareStatement(java.lang.String, int, int)    */
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
operator|new
name|HivePreparedStatement
argument_list|(
name|this
argument_list|,
name|client
argument_list|,
name|sessHandle
argument_list|,
name|sql
argument_list|)
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#prepareStatement(java.lang.String, int, int, int)    */
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#releaseSavepoint(java.sql.Savepoint)    */
annotation|@
name|Override
specifier|public
name|void
name|releaseSavepoint
parameter_list|(
name|Savepoint
name|savepoint
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#rollback()    */
annotation|@
name|Override
specifier|public
name|void
name|rollback
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#rollback(java.sql.Savepoint)    */
annotation|@
name|Override
specifier|public
name|void
name|rollback
parameter_list|(
name|Savepoint
name|savepoint
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#setAutoCommit(boolean)    */
annotation|@
name|Override
specifier|public
name|void
name|setAutoCommit
parameter_list|(
name|boolean
name|autoCommit
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// Per JDBC spec, if the connection is closed a SQLException should be thrown.
if|if
condition|(
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Connection is closed"
argument_list|)
throw|;
block|}
comment|// The auto-commit mode is always enabled for this connection. Per JDBC spec,
comment|// if setAutoCommit is called and the auto-commit mode is not changed, the call is a no-op.
if|if
condition|(
operator|!
name|autoCommit
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Request to set autoCommit to false; Hive does not support autoCommit=false."
argument_list|)
expr_stmt|;
name|SQLWarning
name|warning
init|=
operator|new
name|SQLWarning
argument_list|(
literal|"Hive does not support autoCommit=false"
argument_list|)
decl_stmt|;
if|if
condition|(
name|warningChain
operator|==
literal|null
condition|)
name|warningChain
operator|=
name|warning
expr_stmt|;
else|else
name|warningChain
operator|.
name|setNextWarning
argument_list|(
name|warning
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#setCatalog(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|void
name|setCatalog
parameter_list|(
name|String
name|catalog
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// Per JDBC spec, if the driver does not support catalogs,
comment|// it will silently ignore this request.
if|if
condition|(
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Connection is closed"
argument_list|)
throw|;
block|}
return|return;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#setClientInfo(java.util.Properties)    */
annotation|@
name|Override
specifier|public
name|void
name|setClientInfo
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|SQLClientInfoException
block|{
name|clientInfo
operator|=
name|properties
expr_stmt|;
name|sendClientInfo
argument_list|()
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#setClientInfo(java.lang.String, java.lang.String)    */
annotation|@
name|Override
specifier|public
name|void
name|setClientInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|SQLClientInfoException
block|{
if|if
condition|(
name|clientInfo
operator|==
literal|null
condition|)
block|{
name|clientInfo
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|clientInfo
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|sendClientInfo
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|sendClientInfo
parameter_list|()
throws|throws
name|SQLClientInfoException
block|{
name|TSetClientInfoReq
name|req
init|=
operator|new
name|TSetClientInfoReq
argument_list|(
name|sessHandle
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|clientInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|==
literal|null
operator|||
name|e
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|map
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|req
operator|.
name|setConfiguration
argument_list|(
name|map
argument_list|)
expr_stmt|;
try|try
block|{
name|TSetClientInfoResp
name|openResp
init|=
name|client
operator|.
name|SetClientInfo
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Utils
operator|.
name|verifySuccess
argument_list|(
name|openResp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
decl||
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error sending client info"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SQLClientInfoException
argument_list|(
literal|"Error sending client info"
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#setHoldability(int)    */
annotation|@
name|Override
specifier|public
name|void
name|setHoldability
parameter_list|(
name|int
name|holdability
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setNetworkTimeout
parameter_list|(
name|Executor
name|executor
parameter_list|,
name|int
name|milliseconds
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// JDK 1.7
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#setReadOnly(boolean)    */
annotation|@
name|Override
specifier|public
name|void
name|setReadOnly
parameter_list|(
name|boolean
name|readOnly
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// Per JDBC spec, if the connection is closed a SQLException should be thrown.
if|if
condition|(
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Connection is closed"
argument_list|)
throw|;
block|}
comment|// Per JDBC spec, the request defines a hint to the driver to enable database optimizations.
comment|// The read-only mode for this connection is disabled and cannot be enabled (isReadOnly always returns false).
comment|// The most correct behavior is to throw only if the request tries to enable the read-only mode.
if|if
condition|(
name|readOnly
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Enabling read-only mode not supported"
argument_list|)
throw|;
block|}
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#setSavepoint()    */
annotation|@
name|Override
specifier|public
name|Savepoint
name|setSavepoint
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#setSavepoint(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|Savepoint
name|setSavepoint
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setSchema
parameter_list|(
name|String
name|schema
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// JDK 1.7
if|if
condition|(
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Connection is closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|schema
operator|==
literal|null
operator|||
name|schema
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Schema name is null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|schema
operator|.
name|contains
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"invalid schema name"
argument_list|)
throw|;
block|}
name|Statement
name|stmt
init|=
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"use "
operator|+
name|schema
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#setTransactionIsolation(int)    */
annotation|@
name|Override
specifier|public
name|void
name|setTransactionIsolation
parameter_list|(
name|int
name|level
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO: throw an exception?
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Connection#setTypeMap(java.util.Map)    */
annotation|@
name|Override
specifier|public
name|void
name|setTypeMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Wrapper#isWrapperFor(java.lang.Class)    */
annotation|@
name|Override
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
comment|/*    * (non-Javadoc)    *    * @see java.sql.Wrapper#unwrap(java.lang.Class)    */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|(
literal|"Method not supported"
argument_list|)
throw|;
block|}
specifier|public
name|TProtocolVersion
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
specifier|public
specifier|static
name|TCLIService
operator|.
name|Iface
name|newSynchronizedClient
parameter_list|(
name|TCLIService
operator|.
name|Iface
name|client
parameter_list|)
block|{
return|return
operator|(
name|TCLIService
operator|.
name|Iface
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|HiveConnection
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|TCLIService
operator|.
name|Iface
operator|.
name|class
block|}
argument_list|,
operator|new
name|SynchronizedHandler
argument_list|(
name|client
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|SynchronizedHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|final
name|TCLIService
operator|.
name|Iface
name|client
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SynchronizedHandler
parameter_list|(
name|TCLIService
operator|.
name|Iface
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|method
operator|.
name|invoke
argument_list|(
name|client
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
comment|// all IFace APIs throw TException
if|if
condition|(
name|e
operator|.
name|getTargetException
argument_list|()
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
operator|.
name|getTargetException
argument_list|()
throw|;
block|}
else|else
block|{
comment|// should not happen
throw|throw
operator|new
name|TException
argument_list|(
literal|"Error in calling method "
operator|+
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getTargetException
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
literal|"Error in calling method "
operator|+
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

