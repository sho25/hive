begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestJdbcDriver
block|{
specifier|private
specifier|static
name|File
name|file
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|input
decl_stmt|;
specifier|private
name|String
name|expected
decl_stmt|;
specifier|public
name|TestJdbcDriver
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
block|}
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
comment|// Here are some positive cases which can be executed as below :
block|{
literal|"show databases;show tables;"
block|,
literal|"show databases,show tables"
block|}
block|,
block|{
literal|" show\n\r  tables;"
block|,
literal|"show tables"
block|}
block|,
block|{
literal|"show databases; show\ntables;"
block|,
literal|"show databases,show tables"
block|}
block|,
block|{
literal|"show    tables;"
block|,
literal|"show    tables"
block|}
block|,
block|{
literal|"show tables ;"
block|,
literal|"show tables"
block|}
block|,
comment|// Here are some negative cases as below :
block|{
literal|"show tables"
block|,
literal|","
block|}
block|,
block|{
literal|"show tables show tables;"
block|,
literal|"show tables show tables"
block|}
block|,
block|{
literal|"show tab les;"
block|,
literal|"show tab les"
block|}
block|,
block|{
literal|"#show tables; show\n tables;"
block|,
literal|"tables"
block|}
block|,
block|{
literal|"show tab les;show tables;"
block|,
literal|"show tab les,show tables"
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
literal|"Init.sql"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanUpAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseInitFile
parameter_list|()
throws|throws
name|IOException
block|{
name|BufferedWriter
name|bw
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bw
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|bw
operator|.
name|write
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|bw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|,
name|HiveConnection
operator|.
name|parseInitFile
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test was failed due to "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|bw
operator|!=
literal|null
condition|)
block|{
name|bw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

