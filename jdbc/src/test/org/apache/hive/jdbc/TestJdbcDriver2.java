begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExplainTask
operator|.
name|EXPL_COLUMN_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|SetProcessor
operator|.
name|SET_COLUMN_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverPropertyInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveVersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
operator|.
name|ClassicTableTypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
operator|.
name|ClassicTableTypeMapping
operator|.
name|ClassicTableTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
operator|.
name|HiveTableTypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
operator|.
name|TableTypeMappingFactory
operator|.
name|TableTypeMappings
import|;
end_import

begin_comment
comment|/**  * TestJdbcDriver2  *  */
end_comment

begin_class
specifier|public
class|class
name|TestJdbcDriver2
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|driverName
init|=
literal|"org.apache.hive.jdbc.HiveDriver"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tableName
init|=
literal|"testHiveJdbcDriver_Table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tableComment
init|=
literal|"Simple table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|viewName
init|=
literal|"testHiveJdbcDriverView"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|viewComment
init|=
literal|"Simple view"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|partitionedTableName
init|=
literal|"testHiveJdbcDriverPartitionedTable"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|partitionedColumnName
init|=
literal|"partcolabc"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|partitionedColumnValue
init|=
literal|"20090619"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|partitionedTableComment
init|=
literal|"Partitioned table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|dataTypeTableName
init|=
literal|"testDataTypeTable"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|dataTypeTableComment
init|=
literal|"Table with many column data types"
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|Path
name|dataFilePath
decl_stmt|;
specifier|private
specifier|final
name|Path
name|dataTypeDataFilePath
decl_stmt|;
specifier|private
name|Connection
name|con
decl_stmt|;
specifier|private
name|boolean
name|standAloneServer
init|=
literal|false
decl_stmt|;
specifier|public
name|TestJdbcDriver2
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestJdbcDriver2
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|dataFileDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|dataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|dataTypeDataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"datatypes.txt"
argument_list|)
expr_stmt|;
name|standAloneServer
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.service.standalone.server"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Class
operator|.
name|forName
argument_list|(
name|driverName
argument_list|)
expr_stmt|;
if|if
condition|(
name|standAloneServer
condition|)
block|{
comment|// get connection
name|con
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hive2://localhost:10000/default"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|con
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hive2://"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Connection is null"
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Connection should not be closed"
argument_list|,
name|con
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
comment|// drop table. ignore error.
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|res
decl_stmt|;
comment|// create table
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (under_col int comment 'the under column', value string) comment '"
operator|+
name|tableComment
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|// also initialize a paritioned table to test against.
comment|// drop table. ignore error.
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table "
operator|+
name|partitionedTableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|partitionedTableName
operator|+
literal|" (under_col int, value string) comment '"
operator|+
name|partitionedTableComment
operator|+
literal|"' partitioned by ("
operator|+
name|partitionedColumnName
operator|+
literal|" STRING)"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|partitionedTableName
operator|+
literal|" PARTITION ("
operator|+
name|partitionedColumnName
operator|+
literal|"="
operator|+
name|partitionedColumnValue
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|// drop table. ignore error.
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table "
operator|+
name|dataTypeTableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|dataTypeTableName
operator|+
literal|" (c1 int, c2 boolean, c3 double, c4 string,"
operator|+
literal|" c5 array<int>, c6 map<int,string>, c7 map<string,string>,"
operator|+
literal|" c8 struct<r:string,s:int,t:double>,"
operator|+
literal|" c9 tinyint, c10 smallint, c11 float, c12 bigint,"
operator|+
literal|" c13 array<array<string>>,"
operator|+
literal|" c14 map<int, map<int,int>>,"
operator|+
literal|" c15 struct<r:int,s:struct<a:int,b:string>>,"
operator|+
literal|" c16 array<struct<m:map<string,string>,n:int>>,"
operator|+
literal|" c17 timestamp, "
operator|+
literal|" c18 decimal, "
operator|+
literal|" c19 binary, "
operator|+
literal|" c20 date) comment'"
operator|+
name|dataTypeTableComment
operator|+
literal|"' partitioned by (dt STRING)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataTypeDataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|dataTypeTableName
operator|+
literal|" PARTITION (dt='20090619')"
argument_list|)
expr_stmt|;
comment|// drop view. ignore error.
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop view "
operator|+
name|viewName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create view
name|stmt
operator|.
name|execute
argument_list|(
literal|"create view "
operator|+
name|viewName
operator|+
literal|" comment '"
operator|+
name|viewComment
operator|+
literal|"' as select * from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
comment|// drop table
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table "
operator|+
name|partitionedTableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table "
operator|+
name|dataTypeTableName
argument_list|)
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Connection should be closed"
argument_list|,
name|con
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"createStatement() on closed connection should throw exception"
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBadURL
parameter_list|()
throws|throws
name|Exception
block|{
name|checkBadUrl
argument_list|(
literal|"jdbc:hive2://localhost:10000;principal=test"
argument_list|)
expr_stmt|;
name|checkBadUrl
argument_list|(
literal|"jdbc:hive2://localhost:10000;"
operator|+
literal|"principal=hive/HiveServer2Host@YOUR-REALM.COM"
argument_list|)
expr_stmt|;
name|checkBadUrl
argument_list|(
literal|"jdbc:hive2://localhost:10000test"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkBadUrl
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown IllegalArgumentException but did not "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|i
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|i
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Bad URL format. Hostname not found "
operator|+
literal|" in authority part of the url"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testDataTypes2
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select c5, c1 from "
operator|+
name|dataTypeTableName
operator|+
literal|" order by c1"
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|meta
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
comment|// row 1
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// skip the last (partitioning) column since it is always non-null
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|meta
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
name|res
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testErrorDiag
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// verify syntax error
try|try
block|{
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select from "
operator|+
name|dataTypeTableName
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"42000"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify table not fuond error
try|try
block|{
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from nonTable"
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"42S02"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify invalid column error
try|try
block|{
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select zzzz from "
operator|+
name|dataTypeTableName
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"42000"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * verify 'explain ...' resultset    * @throws SQLException    */
specifier|public
name|void
name|testExplainStmt
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"explain select c1, c2, c3, c4, c5 as a, c6, c7, c8, c9, c10, c11, c12, "
operator|+
literal|"c1*2, sentences(null, null, null) as b from "
operator|+
name|dataTypeTableName
operator|+
literal|" limit 1"
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// only one result column
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnLabel
argument_list|(
literal|1
argument_list|)
argument_list|,
name|EXPL_COLUMN_NAME
argument_list|)
expr_stmt|;
comment|// verify the column name
comment|//verify that there is data in the resultset
name|assertTrue
argument_list|(
literal|"Nothing returned explain"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPrepareStatement
parameter_list|()
block|{
name|String
name|sql
init|=
literal|"from (select count(1) from "
operator|+
name|tableName
operator|+
literal|" where   'not?param?not?param'<> 'not_param??not_param' and ?=? "
operator|+
literal|" and 1=? and 2=? and 3.0=? and 4.0=? and 'test\\'string\"'=? and 5=? and ?=? "
operator|+
literal|" and date '2012-01-01' = date ?"
operator|+
literal|" ) t  select '2011-03-25' ddate,'China',true bv, 10 num limit 10"
decl_stmt|;
comment|///////////////////////////////////////////////
comment|//////////////////// correct testcase
comment|//////////////////////////////////////////////
try|try
block|{
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setBoolean
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setBoolean
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setShort
argument_list|(
literal|3
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setFloat
argument_list|(
literal|5
argument_list|,
literal|3f
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setDouble
argument_list|(
literal|6
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|7
argument_list|,
literal|"test'string\""
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setLong
argument_list|(
literal|8
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setByte
argument_list|(
literal|9
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setByte
argument_list|(
literal|10
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|11
argument_list|,
literal|"2012-01-01"
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setMaxRows
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"2011-03-25"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|"ddate"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|"num"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|10
argument_list|,
name|res
operator|.
name|getByte
argument_list|(
literal|"num"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2011-03-25"
argument_list|,
name|res
operator|.
name|getDate
argument_list|(
literal|"ddate"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|res
operator|.
name|getDouble
argument_list|(
literal|"num"
argument_list|)
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|"num"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
literal|"10"
argument_list|)
operator|.
name|shortValue
argument_list|()
argument_list|,
name|res
operator|.
name|getShort
argument_list|(
literal|"num"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|res
operator|.
name|getLong
argument_list|(
literal|"num"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|"bv"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|res
operator|.
name|getObject
argument_list|(
literal|"ddate"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|o
operator|=
name|res
operator|.
name|getObject
argument_list|(
literal|"num"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|///////////////////////////////////////////////
comment|//////////////////// other failure testcases
comment|//////////////////////////////////////////////
comment|// set nothing for prepared sql
name|Exception
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Execute the un-setted sql statement should throw exception"
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
comment|// set some of parameters for prepared sql, not all of them.
name|expectedException
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setBoolean
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setBoolean
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Execute the invalid setted sql statement should throw exception"
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
comment|// set the wrong type parameters for prepared sql.
name|expectedException
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
comment|// wrong type here
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"wrong"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"there must be a empty result set"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Execute the invalid setted sql statement should throw exception"
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute non-select statements using execute() and executeUpdated() APIs    * of PreparedStatement interface    * @throws Exception    */
specifier|public
name|void
name|testExecutePreparedStatement
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|key
init|=
literal|"testKey"
decl_stmt|;
name|String
name|val1
init|=
literal|"val1"
decl_stmt|;
name|String
name|val2
init|=
literal|"val2"
decl_stmt|;
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"set "
operator|+
name|key
operator|+
literal|" = ?"
argument_list|)
decl_stmt|;
comment|// execute() of Prepared statement
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|ps
operator|.
name|execute
argument_list|()
expr_stmt|;
name|verifyConfValue
argument_list|(
name|key
argument_list|,
name|val1
argument_list|)
expr_stmt|;
comment|// executeUpdate() of Prepared statement
name|ps
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|ps
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|verifyConfValue
argument_list|(
name|key
argument_list|,
name|val2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute "set x" and extract value from key=val format result    * Verify the extracted value    * @param stmt    * @return    * @throws Exception    */
specifier|private
name|void
name|verifyConfValue
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|expectedVal
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"set "
operator|+
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|resultValues
index|[]
init|=
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
comment|// "key = 'val'"
name|assertEquals
argument_list|(
literal|"Result not in key = val format"
argument_list|,
literal|2
argument_list|,
name|resultValues
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|resultValues
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|resultValues
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// remove '
name|assertEquals
argument_list|(
literal|"Conf value should be set by execute()"
argument_list|,
name|expectedVal
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|testSelectAll
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSelectAll
argument_list|(
name|tableName
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// tests not setting maxRows (return all)
name|doTestSelectAll
argument_list|(
name|tableName
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// tests setting maxRows to 0 (return all)
block|}
specifier|public
specifier|final
name|void
name|testSelectAllPartioned
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSelectAll
argument_list|(
name|partitionedTableName
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// tests not setting maxRows
comment|// (return all)
name|doTestSelectAll
argument_list|(
name|partitionedTableName
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// tests setting maxRows to 0
comment|// (return all)
block|}
specifier|public
specifier|final
name|void
name|testSelectAllMaxRows
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSelectAll
argument_list|(
name|tableName
argument_list|,
literal|100
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|testSelectAllFetchSize
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSelectAll
argument_list|(
name|tableName
argument_list|,
literal|100
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNullType
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select null from "
operator|+
name|dataTypeTableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|res
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// executeQuery should always throw a SQLException,
comment|// when it executes a non-ResultSet query (like create)
specifier|public
name|void
name|testExecuteQueryException
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"create table test_t2 (under_col int, value string)"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Caught an expected SQLException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkResultSetExpected
parameter_list|(
name|Statement
name|stmt
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|setupQueries
parameter_list|,
name|String
name|testQuery
parameter_list|,
name|boolean
name|isExpectedResultSet
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|hasResultSet
decl_stmt|;
comment|// execute the setup queries
for|for
control|(
name|String
name|setupQuery
range|:
name|setupQueries
control|)
block|{
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
name|setupQuery
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failWithExceptionMsg
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// execute the test query
try|try
block|{
name|hasResultSet
operator|=
name|stmt
operator|.
name|execute
argument_list|(
name|testQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hasResultSet
argument_list|,
name|isExpectedResultSet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failWithExceptionMsg
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|failWithExceptionMsg
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNullResultSet
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|setupQueries
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|testQuery
decl_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// -select- should return a ResultSet
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"select: success"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|failWithExceptionMsg
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// -create- should not return a ResultSet
name|setupQueries
operator|.
name|add
argument_list|(
literal|"drop table test_t1"
argument_list|)
expr_stmt|;
name|testQuery
operator|=
literal|"create table test_t1 (under_col int, value string)"
expr_stmt|;
name|checkResultSetExpected
argument_list|(
name|stmt
argument_list|,
name|setupQueries
argument_list|,
name|testQuery
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setupQueries
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// -create table as select- should not return a ResultSet
name|setupQueries
operator|.
name|add
argument_list|(
literal|"drop table test_t1"
argument_list|)
expr_stmt|;
name|testQuery
operator|=
literal|"create table test_t1 as select * from "
operator|+
name|tableName
expr_stmt|;
name|checkResultSetExpected
argument_list|(
name|stmt
argument_list|,
name|setupQueries
argument_list|,
name|testQuery
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setupQueries
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// -insert table as select- should not return a ResultSet
name|setupQueries
operator|.
name|add
argument_list|(
literal|"drop table test_t1"
argument_list|)
expr_stmt|;
name|setupQueries
operator|.
name|add
argument_list|(
literal|"create table test_t1 (under_col int, value string)"
argument_list|)
expr_stmt|;
name|testQuery
operator|=
literal|"insert into table test_t1 select under_col, value from "
operator|+
name|tableName
expr_stmt|;
name|checkResultSetExpected
argument_list|(
name|stmt
argument_list|,
name|setupQueries
argument_list|,
name|testQuery
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setupQueries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCloseResultSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// execute query, ignore exception if any
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
decl_stmt|;
comment|// close ResultSet, ignore exception if any
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// A statement should be open even after ResultSet#close
name|assertFalse
argument_list|(
name|stmt
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
comment|// A Statement#cancel after ResultSet#close should be a no-op
try|try
block|{
name|stmt
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|failWithExceptionMsg
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
comment|// execute query, ignore exception if any
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|// close ResultSet, ignore exception if any
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// A Statement#execute after ResultSet#close should be fine too
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|failWithExceptionMsg
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// A Statement#close after ResultSet#close should close the statement
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|stmt
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDataTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|dataTypeTableName
operator|+
literal|" order by c1"
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|meta
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
comment|// row 1
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// skip the last (partitioning) column since it is always non-null
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|meta
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
name|res
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// getXXX returns 0 for numeric types, false for boolean and null for other
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0d
argument_list|,
name|res
operator|.
name|getDouble
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|getByte
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|getShort
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0f
argument_list|,
name|res
operator|.
name|getFloat
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|res
operator|.
name|getLong
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getDate
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
comment|// row 2
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.1d
argument_list|,
name|res
operator|.
name|getDouble
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"r\":null,\"s\":null,\"t\":null}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|res
operator|.
name|getByte
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|res
operator|.
name|getShort
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.0f
argument_list|,
name|res
operator|.
name|getFloat
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|res
operator|.
name|getLong
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"r\":null,\"s\":null}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getTimestamp
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getBigDecimal
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getDate
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
comment|// row 3
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.1d
argument_list|,
name|res
operator|.
name|getDouble
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1,2]"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{1:\"x\",2:\"y\"}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"k\":\"v\"}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"r\":\"a\",\"s\":9,\"t\":2.2}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getByte
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getShort
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|res
operator|.
name|getFloat
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getLong
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[\"a\",\"b\"],[\"c\",\"d\"]]"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{1:{11:12,13:14},2:{21:22}}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"r\":1,\"s\":{\"a\":2,\"b\":\"x\"}}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[{\"m\":{},\"n\":1},{\"m\":{\"a\":\"b\",\"c\":\"d\"},\"n\":2}]"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2012-04-22 09:00:00.123456789"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2012-04-22 09:00:00.123456789"
argument_list|,
name|res
operator|.
name|getTimestamp
argument_list|(
literal|17
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123456789.0123456"
argument_list|,
name|res
operator|.
name|getBigDecimal
argument_list|(
literal|18
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcd"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2013-01-01"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2013-01-01"
argument_list|,
name|res
operator|.
name|getDate
argument_list|(
literal|20
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test getBoolean rules on non-boolean columns
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// test case sensitivity
name|assertFalse
argument_list|(
name|meta
operator|.
name|isCaseSensitive
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isCaseSensitive
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isCaseSensitive
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|isCaseSensitive
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// no more rows
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestSelectAll
parameter_list|(
name|String
name|tableName
parameter_list|,
name|int
name|maxRows
parameter_list|,
name|int
name|fetchSize
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|isPartitionTable
init|=
name|tableName
operator|.
name|equals
argument_list|(
name|partitionedTableName
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxRows
operator|>=
literal|0
condition|)
block|{
name|stmt
operator|.
name|setMaxRows
argument_list|(
name|maxRows
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchSize
operator|>
literal|0
condition|)
block|{
name|stmt
operator|.
name|setFetchSize
argument_list|(
name|fetchSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fetchSize
argument_list|,
name|stmt
operator|.
name|getFetchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// JDBC says that 0 means return all, which is the default
name|int
name|expectedMaxRows
init|=
name|maxRows
operator|<
literal|1
condition|?
literal|0
else|:
name|maxRows
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Statement max rows not as expected"
argument_list|,
name|expectedMaxRows
argument_list|,
name|stmt
operator|.
name|getMaxRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Statement should not be closed"
argument_list|,
name|stmt
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|ResultSet
name|res
decl_stmt|;
comment|// run some queries
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet is null"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"getResultSet() not returning expected ResultSet"
argument_list|,
name|res
operator|==
name|stmt
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"get update count not as expected"
argument_list|,
literal|0
argument_list|,
name|stmt
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|ResultSetMetaData
name|meta
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|int
name|expectedColCount
init|=
name|isPartitionTable
condition|?
literal|3
else|:
literal|2
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column count"
argument_list|,
name|expectedColCount
argument_list|,
name|meta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|moreRow
init|=
name|res
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|moreRow
condition|)
block|{
try|try
block|{
name|i
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|"under_col"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|"under_col"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPartitionTable
condition|)
block|{
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|,
name|partitionedColumnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
name|partitionedColumnName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Last result value was not null"
argument_list|,
name|res
operator|.
name|wasNull
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"No warnings should be found on ResultSet"
argument_list|,
name|res
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
comment|// verifying that method is supported
comment|// System.out.println(res.getString(1) + " " + res.getString(2));
name|assertEquals
argument_list|(
literal|"getInt and getString don't align for the same result value"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected result found"
argument_list|,
literal|"val_"
operator|+
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|moreRow
operator|=
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// supposed to get 500 rows if maxRows isn't set
name|int
name|expectedRowCount
init|=
name|maxRows
operator|>
literal|0
condition|?
name|maxRows
else|:
literal|500
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of rows returned"
argument_list|,
name|expectedRowCount
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// should have no more rows
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|moreRow
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"No warnings should be found on statement"
argument_list|,
name|stmt
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
comment|// verifying that method is supported
name|assertNull
argument_list|(
literal|"No warnings should be found on connection"
argument_list|,
name|con
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
comment|// verifying that method is supported
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Statement should be closed"
argument_list|,
name|stmt
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testErrorMessages
parameter_list|()
throws|throws
name|SQLException
block|{
name|String
name|invalidSyntaxSQLState
init|=
literal|"42000"
decl_stmt|;
comment|// These tests inherently cause exceptions to be written to the test output
comment|// logs. This is undesirable, since you it might appear to someone looking
comment|// at the test output logs as if something is failing when it isn't. Not
comment|// sure
comment|// how to get around that.
name|doTestErrorCase
argument_list|(
literal|"SELECTT * FROM "
operator|+
name|tableName
argument_list|,
literal|"cannot recognize input near 'SELECTT' '*' 'FROM'"
argument_list|,
name|invalidSyntaxSQLState
argument_list|,
literal|40000
argument_list|)
expr_stmt|;
name|doTestErrorCase
argument_list|(
literal|"SELECT * FROM some_table_that_does_not_exist"
argument_list|,
literal|"Table not found"
argument_list|,
literal|"42S02"
argument_list|,
literal|10001
argument_list|)
expr_stmt|;
name|doTestErrorCase
argument_list|(
literal|"drop table some_table_that_does_not_exist"
argument_list|,
literal|"Table not found"
argument_list|,
literal|"42S02"
argument_list|,
literal|10001
argument_list|)
expr_stmt|;
name|doTestErrorCase
argument_list|(
literal|"SELECT invalid_column FROM "
operator|+
name|tableName
argument_list|,
literal|"Invalid table alias or column reference"
argument_list|,
name|invalidSyntaxSQLState
argument_list|,
literal|10004
argument_list|)
expr_stmt|;
name|doTestErrorCase
argument_list|(
literal|"SELECT invalid_function(under_col) FROM "
operator|+
name|tableName
argument_list|,
literal|"Invalid function"
argument_list|,
name|invalidSyntaxSQLState
argument_list|,
literal|10011
argument_list|)
expr_stmt|;
comment|// TODO: execute errors like this currently don't return good error
comment|// codes and messages. This should be fixed.
name|doTestErrorCase
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (key int, value string)"
argument_list|,
literal|"FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask"
argument_list|,
literal|"08S01"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestErrorCase
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedMessage
parameter_list|,
name|String
name|expectedSQLState
parameter_list|,
name|int
name|expectedErrorCode
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|boolean
name|exceptionFound
init|=
literal|false
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Adequate error messaging not found for '"
operator|+
name|sql
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected SQLState not found for '"
operator|+
name|sql
operator|+
literal|"'"
argument_list|,
name|expectedSQLState
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected error code not found for '"
operator|+
name|sql
operator|+
literal|"'"
argument_list|,
name|expectedErrorCode
argument_list|,
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|exceptionFound
operator|=
literal|true
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Exception should have been thrown for query: "
operator|+
name|sql
argument_list|,
name|exceptionFound
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testShowTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
decl_stmt|;
name|boolean
name|testTableExists
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"table name is null in result set"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|testTableExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"table name "
operator|+
name|tableName
operator|+
literal|" not found in SHOW TABLES result set"
argument_list|,
name|testTableExists
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetaDataGetTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|getTablesTest
argument_list|(
name|ClassicTableTypes
operator|.
name|TABLE
operator|.
name|toString
argument_list|()
argument_list|,
name|ClassicTableTypes
operator|.
name|VIEW
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetaDataGetTablesHive
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TABLE_TYPE_MAPPING
operator|.
name|varname
operator|+
literal|" = "
operator|+
name|TableTypeMappings
operator|.
name|HIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getTablesTest
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|,
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetaDataGetTablesClassic
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TABLE_TYPE_MAPPING
operator|.
name|varname
operator|+
literal|" = "
operator|+
name|TableTypeMappings
operator|.
name|CLASSIC
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|getTablesTest
argument_list|(
name|ClassicTableTypes
operator|.
name|TABLE
operator|.
name|toString
argument_list|()
argument_list|,
name|ClassicTableTypes
operator|.
name|VIEW
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the type returned for pre-created table type table and view type    * table    * @param tableTypeName expected table type    * @param viewTypeName expected view type    * @throws SQLException    */
specifier|private
name|void
name|getTablesTest
parameter_list|(
name|String
name|tableTypeName
parameter_list|,
name|String
name|viewTypeName
parameter_list|)
throws|throws
name|SQLException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
index|[]
argument_list|>
name|tests
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"test%jdbc%"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"testhivejdbcdriver_table"
block|,
literal|"testhivejdbcdriverpartitionedtable"
block|,
literal|"testhivejdbcdriverview"
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"%jdbcdriver\\_table"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"testhivejdbcdriver_table"
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"testhivejdbcdriver\\_table"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"testhivejdbcdriver_table"
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"test_ivejdbcdri_er\\_table"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"testhivejdbcdriver_table"
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"test_ivejdbcdri_er_table"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"testhivejdbcdriver_table"
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"test_ivejdbcdri_er%table"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"testhivejdbcdriver_table"
block|,
literal|"testhivejdbcdriverpartitionedtable"
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"%jdbc%"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"testhivejdbcdriver_table"
block|,
literal|"testhivejdbcdriverpartitionedtable"
block|,
literal|"testhivejdbcdriverview"
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|""
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|checkPattern
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ResultSet
name|rs
init|=
operator|(
name|ResultSet
operator|)
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
literal|"default"
argument_list|,
literal|null
argument_list|,
name|checkPattern
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|resMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|resMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CAT"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_SCHEM"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_NAME"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_TYPE"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"REMARKS"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|resultTableName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get by index different from get by name."
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|,
name|resultTableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Excpected a different table."
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|checkPattern
argument_list|)
index|[
name|cnt
index|]
argument_list|,
name|resultTableName
argument_list|)
expr_stmt|;
name|String
name|resultTableComment
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"REMARKS"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing comment on the table."
argument_list|,
name|resultTableComment
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|tableType
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_TYPE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultTableName
operator|.
name|endsWith
argument_list|(
literal|"view"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Expected a tabletype view but got something else."
argument_list|,
name|viewTypeName
argument_list|,
name|tableType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Expected a tabletype table but got something else."
argument_list|,
name|tableTypeName
argument_list|,
name|tableType
argument_list|)
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Received an incorrect number of tables."
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|checkPattern
argument_list|)
operator|.
name|length
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
comment|// only ask for the views.
name|ResultSet
name|rs
init|=
operator|(
name|ResultSet
operator|)
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
literal|"default"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|viewTypeName
block|}
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of views found."
argument_list|,
literal|1
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetaDataGetCatalogs
parameter_list|()
throws|throws
name|SQLException
block|{
name|ResultSet
name|rs
init|=
operator|(
name|ResultSet
operator|)
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getCatalogs
argument_list|()
decl_stmt|;
name|ResultSetMetaData
name|resMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CAT"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetaDataGetSchemas
parameter_list|()
throws|throws
name|SQLException
block|{
name|ResultSet
name|rs
init|=
operator|(
name|ResultSet
operator|)
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
name|ResultSetMetaData
name|resMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_SCHEM"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CATALOG"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//    assertNull(rs.getString(2));
name|assertFalse
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//test default table types returned in
comment|// Connection.getMetaData().getTableTypes()
specifier|public
name|void
name|testMetaDataGetTableTypes
parameter_list|()
throws|throws
name|SQLException
block|{
name|metaDataGetTableTypeTest
argument_list|(
operator|new
name|ClassicTableTypeMapping
argument_list|()
operator|.
name|getTableTypeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//test default table types returned in
comment|// Connection.getMetaData().getTableTypes() when type config is set to "HIVE"
specifier|public
name|void
name|testMetaDataGetHiveTableTypes
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TABLE_TYPE_MAPPING
operator|.
name|varname
operator|+
literal|" = "
operator|+
name|TableTypeMappings
operator|.
name|HIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|metaDataGetTableTypeTest
argument_list|(
operator|new
name|HiveTableTypeMapping
argument_list|()
operator|.
name|getTableTypeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//test default table types returned in
comment|// Connection.getMetaData().getTableTypes() when type config is set to "CLASSIC"
specifier|public
name|void
name|testMetaDataGetClassicTableTypes
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TABLE_TYPE_MAPPING
operator|.
name|varname
operator|+
literal|" = "
operator|+
name|TableTypeMappings
operator|.
name|CLASSIC
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|metaDataGetTableTypeTest
argument_list|(
operator|new
name|ClassicTableTypeMapping
argument_list|()
operator|.
name|getTableTypeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if Connection.getMetaData().getTableTypes() returns expected    *  tabletypes    * @param tabletypes expected table types    * @throws SQLException    */
specifier|private
name|void
name|metaDataGetTableTypeTest
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tabletypes
parameter_list|)
throws|throws
name|SQLException
block|{
name|ResultSet
name|rs
init|=
operator|(
name|ResultSet
operator|)
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTableTypes
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tabletype
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_TYPE"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get by index different from get by name"
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|tabletype
argument_list|)
expr_stmt|;
name|tabletypes
operator|.
name|remove
argument_list|(
name|tabletype
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect tabletype count."
argument_list|,
literal|0
argument_list|,
name|tabletypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Found less tabletypes then we test for."
argument_list|,
name|cnt
operator|>=
name|tabletypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetaDataGetColumns
parameter_list|()
throws|throws
name|SQLException
block|{
name|Map
argument_list|<
name|String
index|[]
argument_list|,
name|Integer
argument_list|>
name|tests
init|=
operator|new
name|HashMap
argument_list|<
name|String
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"testhivejdbcdriver\\_table"
block|,
literal|null
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"testhivejdbc%"
block|,
literal|null
block|}
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"testhiveJDBC%"
block|,
literal|null
block|}
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdriver\\_table"
block|,
literal|null
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdriver\\_table%"
block|,
literal|"under\\_col"
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//    tests.put(new String[]{"%jdbcdriver\\_table%", "under\\_COL"}, 1);
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdriver\\_table%"
block|,
literal|"under\\_co_"
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdriver\\_table%"
block|,
literal|"under_col"
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdriver\\_table%"
block|,
literal|"und%"
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdriver\\_table%"
block|,
literal|"%"
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdriver\\_table%"
block|,
literal|"_%"
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
name|checkPattern
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ResultSet
name|rs
init|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|checkPattern
index|[
literal|0
index|]
argument_list|,
name|checkPattern
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// validate the metadata for the getColumns result set
name|ResultSetMetaData
name|rsmd
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CAT"
argument_list|,
name|rsmd
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|columnname
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
decl_stmt|;
name|int
name|ordinalPos
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"ORDINAL_POSITION"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cnt
condition|)
block|{
case|case
literal|0
case|:
name|assertEquals
argument_list|(
literal|"Wrong column name found"
argument_list|,
literal|"under_col"
argument_list|,
name|columnname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong ordinal position found"
argument_list|,
name|ordinalPos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|assertEquals
argument_list|(
literal|"Wrong column name found"
argument_list|,
literal|"value"
argument_list|,
name|columnname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong ordinal position found"
argument_list|,
name|ordinalPos
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|cnt
operator|++
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Found less columns then we test for."
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|checkPattern
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validate the Metadata for the result set of a metadata getColumns call.    */
specifier|public
name|void
name|testMetaDataGetColumnsMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
name|ResultSet
name|rs
init|=
operator|(
name|ResultSet
operator|)
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"testhivejdbcdriver\\_table"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|rsmd
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CAT"
argument_list|,
name|rsmd
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|rsmd
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|rsmd
operator|.
name|getColumnDisplaySize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ORDINAL_POSITION"
argument_list|,
name|rsmd
operator|.
name|getColumnName
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|rsmd
operator|.
name|getColumnType
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|rsmd
operator|.
name|getColumnDisplaySize
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*   public void testConversionsBaseResultSet() throws SQLException {     ResultSet rs = new HiveMetaDataResultSet(Arrays.asList("key")             , Arrays.asList("long")             , Arrays.asList(1234, "1234", "abc")) {       private int cnt=1;       public boolean next() throws SQLException {         if (cnt<data.size()) {           row = Arrays.asList(data.get(cnt));           cnt++;           return true;         } else {           return false;         }       }     };      while (rs.next()) {       String key = rs.getString("key");       if ("1234".equals(key)) {         assertEquals("Converting a string column into a long failed.", rs.getLong("key"), 1234L);         assertEquals("Converting a string column into a int failed.", rs.getInt("key"), 1234);       } else if ("abc".equals(key)) {         Object result = null;         Exception expectedException = null;         try {           result = rs.getLong("key");         } catch (SQLException e) {           expectedException = e;         }         assertTrue("Trying to convert 'abc' into a long should not work.", expectedException!=null);         try {           result = rs.getInt("key");         } catch (SQLException e) {           expectedException = e;         }         assertTrue("Trying to convert 'abc' into a int should not work.", expectedException!=null);       }     }   }    */
specifier|public
name|void
name|testDescribeTable
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"describe "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column name 'under_col' not found"
argument_list|,
literal|"under_col"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column type 'under_col' for column under_col not found"
argument_list|,
literal|"int"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column name 'value' not found"
argument_list|,
literal|"value"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column type 'string' for column key not found"
argument_list|,
literal|"string"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"More results found than expected"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDatabaseMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|meta
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hive"
argument_list|,
name|meta
operator|.
name|getDatabaseProductName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|,
name|meta
operator|.
name|getDatabaseProductVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hive.version"
argument_list|)
argument_list|,
name|meta
operator|.
name|getDatabaseProductVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"verifying hive version pattern. got "
operator|+
name|meta
operator|.
name|getDatabaseProductVersion
argument_list|()
argument_list|,
name|Pattern
operator|.
name|matches
argument_list|(
literal|"\\d+\\.\\d+\\.\\d+.*"
argument_list|,
name|meta
operator|.
name|getDatabaseProductVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DatabaseMetaData
operator|.
name|sqlStateSQL99
argument_list|,
name|meta
operator|.
name|getSQLStateType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsCatalogsInTableDefinitions
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsSchemasInTableDefinitions
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsSchemasInDataManipulation
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsMultipleResultSets
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsStoredProcedures
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|supportsAlterTableWithAddColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResultSetMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select c1, c2, c3, c4, c5 as a, c6, c7, c8, c9, c10, c11, c12, "
operator|+
literal|"c1*2, sentences(null, null, null) as b, c17, c18, c20 from "
operator|+
name|dataTypeTableName
operator|+
literal|" limit 1"
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|meta
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|colRS
init|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|dataTypeTableName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|meta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c1"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c1"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|1
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|1
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|2
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c3"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"double"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c3"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"double"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|3
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|3
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c4"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c4"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|4
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|4
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c5"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"array<int>"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c6"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c6"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map<int,string>"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c7"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c7"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map<string,string>"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c8"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c8"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"struct<r:string,s:int,t:double>"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c9"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|TINYINT
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tinyint"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c9"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|TINYINT
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tinyint"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|9
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|9
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c10"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"smallint"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c10"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"smallint"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|10
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|10
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c11"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"float"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c11"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"float"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|11
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|11
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c12"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bigint"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c12"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bigint"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|12
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|12
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_c12"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c17"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"timestamp"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|29
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|29
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c18"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"decimal"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c20"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DATE
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"date"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|meta
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|meta
operator|.
name|isAutoIncrement
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isCurrency
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResultSetMetaData
operator|.
name|columnNullable
argument_list|,
name|meta
operator|.
name|isNullable
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// [url] [host] [port] [db]
specifier|private
specifier|static
specifier|final
name|String
index|[]
index|[]
name|URL_PROPERTIES
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"jdbc:hive2://"
block|,
literal|""
block|,
literal|""
block|,
literal|"default"
block|}
block|,
block|{
literal|"jdbc:hive2://localhost:10001/default"
block|,
literal|"localhost"
block|,
literal|"10001"
block|,
literal|"default"
block|}
block|,
block|{
literal|"jdbc:hive2://localhost/notdefault"
block|,
literal|"localhost"
block|,
literal|"10000"
block|,
literal|"notdefault"
block|}
block|,
block|{
literal|"jdbc:hive2://foo:1243"
block|,
literal|"foo"
block|,
literal|"1243"
block|,
literal|"default"
block|}
block|}
decl_stmt|;
specifier|public
name|void
name|testDriverProperties
parameter_list|()
throws|throws
name|SQLException
block|{
name|HiveDriver
name|driver
init|=
operator|new
name|HiveDriver
argument_list|()
decl_stmt|;
for|for
control|(
name|String
index|[]
name|testValues
range|:
name|URL_PROPERTIES
control|)
block|{
name|DriverPropertyInfo
index|[]
name|dpi
init|=
name|driver
operator|.
name|getPropertyInfo
argument_list|(
name|testValues
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected DriverPropertyInfo array size"
argument_list|,
literal|3
argument_list|,
name|dpi
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertDpi
argument_list|(
name|dpi
index|[
literal|0
index|]
argument_list|,
literal|"HOST"
argument_list|,
name|testValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertDpi
argument_list|(
name|dpi
index|[
literal|1
index|]
argument_list|,
literal|"PORT"
argument_list|,
name|testValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertDpi
argument_list|(
name|dpi
index|[
literal|2
index|]
argument_list|,
literal|"DBNAME"
argument_list|,
name|testValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertDpi
parameter_list|(
name|DriverPropertyInfo
name|dpi
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid DriverPropertyInfo name"
argument_list|,
name|name
argument_list|,
name|dpi
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid DriverPropertyInfo value"
argument_list|,
name|value
argument_list|,
name|dpi
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid DriverPropertyInfo required"
argument_list|,
literal|false
argument_list|,
name|dpi
operator|.
name|required
argument_list|)
expr_stmt|;
block|}
comment|/**    * validate schema generated by "set" command    * @throws SQLException    */
specifier|public
name|void
name|testSetCommand
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// execute set command
name|String
name|sql
init|=
literal|"set -v"
decl_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
comment|// Validate resultset columns
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SET_COLUMN_NAME
argument_list|,
name|md
operator|.
name|getColumnLabel
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//check if there is data in the resultset
name|assertTrue
argument_list|(
literal|"Nothing returned by set -v"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Validate error on closed resultset    * @throws SQLException    */
specifier|public
name|void
name|testPostClose
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet is null"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{ }
try|try
block|{
name|res
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{ }
try|try
block|{
name|res
operator|.
name|setFetchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{ }
block|}
comment|/*    * The JDBC spec says when you have duplicate column names,    * the first one should be returned.    */
specifier|public
name|void
name|testDuplicateColumnNameOrder
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT 1 AS a, 2 AS a from "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test bad args to getXXX()    * @throws SQLException    */
specifier|public
name|void
name|testOutOfBoundCols
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
decl_stmt|;
comment|// row 1
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|res
operator|.
name|getInt
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|res
operator|.
name|getInt
argument_list|(
literal|"zzzz"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{     }
block|}
comment|/**    * Verify selecting using builtin UDFs    * @throws SQLException    */
specifier|public
name|void
name|testBuiltInUDFCol
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select c12, bin(c12) from "
operator|+
name|dataTypeTableName
operator|+
literal|" where c1=1"
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// only one result column
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnLabel
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"_c1"
argument_list|)
expr_stmt|;
comment|// verify the system generated column name
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify selecting named expression columns    * @throws SQLException    */
specifier|public
name|void
name|testExprCol
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select c1+1 as col1, length(c4) as len from "
operator|+
name|dataTypeTableName
operator|+
literal|" where c1=1"
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// only one result column
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnLabel
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"col1"
argument_list|)
expr_stmt|;
comment|// verify the column name
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnLabel
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"len"
argument_list|)
expr_stmt|;
comment|// verify the column name
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * test getProcedureColumns()    * @throws SQLException    */
specifier|public
name|void
name|testProcCols
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|dbmd
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbmd
argument_list|)
expr_stmt|;
comment|// currently getProcedureColumns always returns an empty resultset for Hive
name|ResultSet
name|res
init|=
name|dbmd
operator|.
name|getProcedureColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * test testProccedures()    * @throws SQLException    */
specifier|public
name|void
name|testProccedures
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|dbmd
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbmd
argument_list|)
expr_stmt|;
comment|// currently testProccedures always returns an empty resultset for Hive
name|ResultSet
name|res
init|=
name|dbmd
operator|.
name|getProcedures
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * test getPrimaryKeys()    * @throws SQLException    */
specifier|public
name|void
name|testPrimaryKeys
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|dbmd
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbmd
argument_list|)
expr_stmt|;
comment|// currently getPrimaryKeys always returns an empty resultset for Hive
name|ResultSet
name|res
init|=
name|dbmd
operator|.
name|getPrimaryKeys
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * test getImportedKeys()    * @throws SQLException    */
specifier|public
name|void
name|testImportedKeys
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|dbmd
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbmd
argument_list|)
expr_stmt|;
comment|// currently getImportedKeys always returns an empty resultset for Hive
name|ResultSet
name|res
init|=
name|dbmd
operator|.
name|getImportedKeys
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the Driver implementation understands the URL, it will return a Connection object;    * otherwise it returns null    */
specifier|public
name|void
name|testInvalidURL
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveDriver
name|driver
init|=
operator|new
name|HiveDriver
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
name|driver
operator|.
name|connect
argument_list|(
literal|"jdbc:derby://localhost:10000/default"
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

