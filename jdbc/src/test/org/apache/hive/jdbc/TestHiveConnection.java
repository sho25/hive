begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveConnection
block|{
specifier|private
specifier|static
specifier|final
name|String
name|EXISTING_TOKEN
init|=
literal|"ExistingToken"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXPECTED_TOKEN_STRING_FORM
init|=
literal|"AAAAAA"
decl_stmt|;
specifier|private
specifier|static
name|HiveConnection
operator|.
name|DelegationTokenFetcher
name|fetcher
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|fetcher
operator|=
operator|new
name|HiveConnection
operator|.
name|DelegationTokenFetcher
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfNPEThrownWhileGettingDelegationToken
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|tokenStr
init|=
name|fetcher
operator|.
name|getTokenFromCredential
argument_list|(
operator|new
name|Credentials
argument_list|()
argument_list|,
literal|"hive"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Token with id: hive shall not be found."
argument_list|,
literal|null
argument_list|,
name|tokenStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"This NPE is not handled in the code elsewhere so user is not notified about it!"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfGettingDelegationTokenFromCredentialWorks
parameter_list|()
throws|throws
name|IOException
block|{
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|EXISTING_TOKEN
argument_list|)
argument_list|,
operator|new
name|Token
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tokenStr
init|=
name|fetcher
operator|.
name|getTokenFromCredential
argument_list|(
name|creds
argument_list|,
name|EXISTING_TOKEN
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Token string form is not as expected."
argument_list|,
name|EXPECTED_TOKEN_STRING_FORM
argument_list|,
name|tokenStr
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

