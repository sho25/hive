begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverPropertyInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_class
specifier|public
class|class
name|TestJdbcDriver
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
name|String
name|driverName
init|=
literal|"org.apache.hadoop.hive.jdbc.HiveDriver"
decl_stmt|;
specifier|private
specifier|static
name|String
name|tableName
init|=
literal|"testHiveDriverTable"
decl_stmt|;
specifier|private
specifier|static
name|String
name|partitionedTableName
init|=
literal|"testHiveDriverPartitionedTable"
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|Path
name|dataFilePath
decl_stmt|;
specifier|private
name|Connection
name|con
decl_stmt|;
specifier|private
name|boolean
name|standAloneServer
init|=
literal|false
decl_stmt|;
specifier|public
name|TestJdbcDriver
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestJdbcDriver
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|dataFileDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|dataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|standAloneServer
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.service.standalone.server"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Class
operator|.
name|forName
argument_list|(
name|driverName
argument_list|)
expr_stmt|;
if|if
condition|(
name|standAloneServer
condition|)
block|{
comment|// get connection
name|con
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hive://localhost:10000/default"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|con
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hive://"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Connection is null"
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Connection should not be closed"
argument_list|,
name|con
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
comment|// drop table. ignore error.
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"drop table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{     }
comment|// create table
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (key int, value string)"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// load data
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// also initialize a paritioned table to test against.
comment|// drop table. ignore error.
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"drop table "
operator|+
name|partitionedTableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{     }
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"create table "
operator|+
name|partitionedTableName
operator|+
literal|" (key int, value string) partitioned by (dt STRING)"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// load data
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|partitionedTableName
operator|+
literal|" PARTITION (dt='20090619')"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
comment|// drop table
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"drop table "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"drop table "
operator|+
name|partitionedTableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Connection should be closed"
argument_list|,
name|con
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"createStatement() on closed connection should throw exception"
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|testSelectAll
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSelectAll
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// tests not setting maxRows  (return all)
name|doTestSelectAll
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// tests setting maxRows to 0 (return all)
block|}
specifier|public
specifier|final
name|void
name|testSelectAllPartioned
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSelectAll
argument_list|(
name|this
operator|.
name|partitionedTableName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// tests not setting maxRows  (return all)
name|doTestSelectAll
argument_list|(
name|this
operator|.
name|partitionedTableName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// tests setting maxRows to 0 (return all)
block|}
specifier|public
specifier|final
name|void
name|testSelectAllMaxRows
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSelectAll
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|doTestSelectAll
parameter_list|(
name|String
name|tableName
parameter_list|,
name|int
name|maxRows
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxRows
operator|>=
literal|0
condition|)
name|stmt
operator|.
name|setMaxRows
argument_list|(
name|maxRows
argument_list|)
expr_stmt|;
comment|//JDBC says that 0 means return all, which is the default
name|int
name|expectedMaxRows
init|=
name|maxRows
operator|<
literal|1
condition|?
literal|0
else|:
name|maxRows
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Statement max rows not as expected"
argument_list|,
name|expectedMaxRows
argument_list|,
name|stmt
operator|.
name|getMaxRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Statement should not be closed"
argument_list|,
name|stmt
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|ResultSet
name|res
decl_stmt|;
comment|// run some queries
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet is null"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"getResultSet() not returning expected ResultSet"
argument_list|,
name|res
operator|==
name|stmt
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"get update count not as expected"
argument_list|,
literal|0
argument_list|,
name|stmt
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|boolean
name|moreRow
init|=
name|res
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|moreRow
condition|)
block|{
try|try
block|{
name|i
operator|++
expr_stmt|;
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Last result value was not null"
argument_list|,
name|res
operator|.
name|wasNull
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"No warnings should be found on ResultSet"
argument_list|,
name|res
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
comment|//verifying that method is supported
comment|//System.out.println(res.getString(1) + " " + res.getString(2));
name|assertEquals
argument_list|(
literal|"getInt and getString don't align for the same result value"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected result found"
argument_list|,
literal|"val_"
operator|+
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|moreRow
operator|=
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// supposed to get 500 rows if maxRows isn't set
name|int
name|expectedRowCount
init|=
name|maxRows
operator|>
literal|0
condition|?
name|maxRows
else|:
literal|500
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of rows returned"
argument_list|,
name|expectedRowCount
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// should have no more rows
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|moreRow
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"No warnings should be found on statement"
argument_list|,
name|stmt
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
comment|//verifying that method is supported
name|assertNull
argument_list|(
literal|"No warnings should be found on connection"
argument_list|,
name|con
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
comment|//verifying that method is supported
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Statement should be closed"
argument_list|,
name|stmt
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testShowTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
decl_stmt|;
name|boolean
name|testTableExists
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"table name is null in result set"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
name|testTableExists
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"table name "
operator|+
name|tableName
operator|+
literal|" not found in SHOW TABLES result set"
argument_list|,
name|testTableExists
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDescribeTable
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"describe "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column name 'key' not found"
argument_list|,
literal|"key"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column type 'int' for column key not found"
argument_list|,
literal|"int"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column name 'value' not found"
argument_list|,
literal|"value"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column type 'string' for column key not found"
argument_list|,
literal|"string"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"More results found than expected"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDatabaseMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|meta
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hive"
argument_list|,
name|meta
operator|.
name|getDatabaseProductName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|meta
operator|.
name|getDatabaseProductVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|meta
operator|.
name|getProcedures
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsCatalogsInTableDefinitions
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsSchemasInTableDefinitions
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsSchemasInDataManipulation
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsMultipleResultSets
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsStoredProcedures
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResultSetMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"drop table "
operator|+
name|tableName
argument_list|)
decl_stmt|;
comment|//creating a table with tinyint is failing currently so not including
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (a string, b boolean, c bigint, d int, f double)"
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" limit 1"
argument_list|)
expr_stmt|;
name|ResultSetMetaData
name|meta
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column type"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column type"
argument_list|,
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column type"
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column type"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column type"
argument_list|,
name|Types
operator|.
name|DOUBLE
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column type name"
argument_list|,
literal|"string"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column type name"
argument_list|,
literal|"boolean"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column type name"
argument_list|,
literal|"bigint"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column type name"
argument_list|,
literal|"int"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column type name"
argument_list|,
literal|"double"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column display size"
argument_list|,
literal|32
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column display size"
argument_list|,
literal|8
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column display size"
argument_list|,
literal|32
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column display size"
argument_list|,
literal|16
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column display size"
argument_list|,
literal|16
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|meta
operator|.
name|isAutoIncrement
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isCurrency
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResultSetMetaData
operator|.
name|columnNullable
argument_list|,
name|meta
operator|.
name|isNullable
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedPrecision
init|=
name|i
operator|==
literal|5
condition|?
operator|-
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|expectedScale
init|=
name|i
operator|==
literal|5
condition|?
operator|-
literal|1
else|:
literal|0
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected precision"
argument_list|,
name|expectedPrecision
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected scale"
argument_list|,
name|expectedScale
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// [url] [host] [port] [db]
specifier|private
specifier|static
specifier|final
name|String
index|[]
index|[]
name|URL_PROPERTIES
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"jdbc:hive://"
block|,
literal|""
block|,
literal|""
block|,
literal|"default"
block|}
block|,
block|{
literal|"jdbc:hive://localhost:10001/default"
block|,
literal|"localhost"
block|,
literal|"10001"
block|,
literal|"default"
block|}
block|,
block|{
literal|"jdbc:hive://localhost/notdefault"
block|,
literal|"localhost"
block|,
literal|"10000"
block|,
literal|"notdefault"
block|}
block|,
block|{
literal|"jdbc:hive://foo:1243"
block|,
literal|"foo"
block|,
literal|"1243"
block|,
literal|"default"
block|}
block|}
decl_stmt|;
specifier|public
name|void
name|testDriverProperties
parameter_list|()
throws|throws
name|SQLException
block|{
name|HiveDriver
name|driver
init|=
operator|new
name|HiveDriver
argument_list|()
decl_stmt|;
for|for
control|(
name|String
index|[]
name|testValues
range|:
name|URL_PROPERTIES
control|)
block|{
name|DriverPropertyInfo
index|[]
name|dpi
init|=
name|driver
operator|.
name|getPropertyInfo
argument_list|(
name|testValues
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected DriverPropertyInfo array size"
argument_list|,
literal|3
argument_list|,
name|dpi
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertDpi
argument_list|(
name|dpi
index|[
literal|0
index|]
argument_list|,
literal|"HOST"
argument_list|,
name|testValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertDpi
argument_list|(
name|dpi
index|[
literal|1
index|]
argument_list|,
literal|"PORT"
argument_list|,
name|testValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertDpi
argument_list|(
name|dpi
index|[
literal|2
index|]
argument_list|,
literal|"DBNAME"
argument_list|,
name|testValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertDpi
parameter_list|(
name|DriverPropertyInfo
name|dpi
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid DriverPropertyInfo name"
argument_list|,
name|name
argument_list|,
name|dpi
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid DriverPropertyInfo value"
argument_list|,
name|value
argument_list|,
name|dpi
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid DriverPropertyInfo required"
argument_list|,
literal|false
argument_list|,
name|dpi
operator|.
name|required
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

