begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_class
specifier|public
class|class
name|TestJdbcDriver
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
name|String
name|driverName
init|=
literal|"org.apache.hadoop.hive.jdbc.HiveDriver"
decl_stmt|;
specifier|private
specifier|static
name|String
name|tableName
init|=
literal|"testHiveDriverTable"
decl_stmt|;
specifier|private
specifier|static
name|String
name|partitionedTableName
init|=
literal|"testHiveDriverPartitionedTable"
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|Path
name|dataFilePath
decl_stmt|;
specifier|private
name|Connection
name|con
decl_stmt|;
specifier|private
name|boolean
name|standAloneServer
init|=
literal|false
decl_stmt|;
specifier|public
name|TestJdbcDriver
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestJdbcDriver
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|dataFileDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|dataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|standAloneServer
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.service.standalone.server"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Class
operator|.
name|forName
argument_list|(
name|driverName
argument_list|)
expr_stmt|;
if|if
condition|(
name|standAloneServer
condition|)
block|{
comment|// get connection
name|con
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hive://localhost:10000/default"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|con
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hive://"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Connection is null"
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
comment|// drop table. ignore error.
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"drop table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{     }
comment|// create table
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (key int, value string)"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// load data
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// also initialize a paritioned table to test against.
comment|// drop table. ignore error.
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"drop table "
operator|+
name|partitionedTableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{     }
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"create table "
operator|+
name|partitionedTableName
operator|+
literal|" (key int, value string) partitioned by (dt STRING)"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// load data
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|partitionedTableName
operator|+
literal|" PARTITION (dt='20090619')"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
comment|// drop table
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"drop table "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"drop table "
operator|+
name|partitionedTableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|testSelectAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|res
decl_stmt|;
comment|// TODO: There is no schema for show tables or describe table.
comment|/*     stmt.executeQuery("drop table michi1");     stmt.executeQuery("drop table michi2");     stmt.executeQuery("drop table michi3");     stmt.executeQuery("create table michi1 (num int)");     stmt.executeQuery("create table michi2 (num int)");     stmt.executeQuery("create table michi3 (num int)");      res = stmt.executeQuery("show tables");     res = stmt.executeQuery("describe michi1");     while (res.next()) {       System.out.println(res.getString(0));     }     */
comment|// run some queries
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet is null"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|boolean
name|moreRow
init|=
name|res
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|moreRow
condition|)
block|{
try|try
block|{
name|i
operator|++
expr_stmt|;
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//System.out.println(res.getString(1) + " " + res.getString(2));
name|assertEquals
argument_list|(
literal|"getInt and getString don't align for the same result value"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected result found"
argument_list|,
literal|"val_"
operator|+
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|moreRow
operator|=
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// supposed to get 500 rows
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// should have no more rows
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|moreRow
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|testSelectAllPartitioned
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
comment|// run some queries
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|partitionedTableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet is null"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|boolean
name|moreRow
init|=
name|res
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|moreRow
condition|)
block|{
try|try
block|{
name|i
operator|++
expr_stmt|;
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//System.out.println(res.getString(1) + " " + res.getString(2));
name|assertEquals
argument_list|(
literal|"getInt and getString don't align for the same result value"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected result found"
argument_list|,
literal|"val_"
operator|+
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|moreRow
operator|=
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// supposed to get 500 rows
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// should have no more rows
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|moreRow
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testShowTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
decl_stmt|;
name|boolean
name|testTableExists
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"table name is null in result set"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
name|testTableExists
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"table name "
operator|+
name|tableName
operator|+
literal|" not found in SHOW TABLES result set"
argument_list|,
name|testTableExists
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDescribeTable
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"describe "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column name 'key' not found"
argument_list|,
literal|"key"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column type 'int' for column key not found"
argument_list|,
literal|"int"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column name 'value' not found"
argument_list|,
literal|"value"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column type 'string' for column key not found"
argument_list|,
literal|"string"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"More results found than expected"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

