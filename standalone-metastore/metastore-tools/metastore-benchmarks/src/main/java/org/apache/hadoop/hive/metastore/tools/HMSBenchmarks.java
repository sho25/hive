begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|DescriptiveStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|Util
operator|.
name|addManyPartitions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|Util
operator|.
name|addManyPartitionsNoException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|Util
operator|.
name|createSchema
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|Util
operator|.
name|generatePartitionNames
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newFixedThreadPool
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|Util
operator|.
name|throwingSupplierWrapper
import|;
end_import

begin_comment
comment|/**  * Actual benchmark code.  */
end_comment

begin_class
specifier|final
class|class
name|HMSBenchmarks
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HMSBenchmarks
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_KEY
init|=
literal|"parameter_"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_VALUE
init|=
literal|"value_"
decl_stmt|;
specifier|static
name|DescriptiveStatistics
name|benchmarkListDatabases
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|benchmark
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
return|return
name|benchmark
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|getAllDatabases
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|DescriptiveStatistics
name|benchmarkListAllTables
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|benchmark
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
return|return
name|benchmark
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|DescriptiveStatistics
name|benchmarkTableCreate
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|Table
name|table
init|=
name|Util
operator|.
name|TableBuilder
operator|.
name|buildDefaultTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|bench
operator|.
name|measure
argument_list|(
literal|null
argument_list|,
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|DescriptiveStatistics
name|benchmarkDeleteCreate
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|Table
name|table
init|=
name|Util
operator|.
name|TableBuilder
operator|.
name|buildDefaultTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|static
name|DescriptiveStatistics
name|benchmarkDeleteWithPartitions
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|,
name|int
name|howMany
parameter_list|,
name|int
name|nparams
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
comment|// Create many parameters
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|nparams
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nparams
condition|;
name|i
operator|++
control|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|PARAM_KEY
operator|+
name|i
argument_list|,
name|PARAM_VALUE
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
block|{
name|createPartitionedTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|;
name|addManyPartitions
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|parameters
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|howMany
argument_list|)
argument_list|;           return
literal|true
argument_list|;
block|}
block|)
operator|,
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
operator|,
literal|null
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    static
name|DescriptiveStatistics
name|benchmarkGetTable
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|createPartitionedTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkListTables
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|,
name|int
name|count
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
comment|// Create a bunch of tables
name|String
name|format
init|=
literal|"tmp_table_%d"
decl_stmt|;
try|try
block|{
name|createManyTables
argument_list|(
name|client
argument_list|,
name|count
argument_list|,
name|dbName
argument_list|,
name|format
argument_list|)
expr_stmt|;
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|dropManyTables
argument_list|(
name|client
argument_list|,
name|count
argument_list|,
name|dbName
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkCreatePartition
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|createPartitionedTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"d1"
argument_list|)
decl_stmt|;
try|try
block|{
name|Table
name|t
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Partition
name|partition
init|=
operator|new
name|Util
operator|.
name|PartitionBuilder
argument_list|(
name|t
argument_list|)
operator|.
name|withValues
argument_list|(
name|values
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|bench
operator|.
name|measure
argument_list|(
literal|null
argument_list|,
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|addPartition
argument_list|(
name|partition
argument_list|)
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|values
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|new
name|DescriptiveStatistics
argument_list|()
return|;
block|}
finally|finally
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkListPartition
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|createPartitionedTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|addManyPartitions
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"d"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|new
name|DescriptiveStatistics
argument_list|()
return|;
block|}
finally|finally
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkListManyPartitions
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|,
name|int
name|howMany
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|createPartitionedTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|addManyPartitions
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|howMany
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created {} partitions"
argument_list|,
name|howMany
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"started benchmark... "
argument_list|)
expr_stmt|;
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|new
name|DescriptiveStatistics
argument_list|()
return|;
block|}
finally|finally
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkGetPartitions
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|,
name|int
name|howMany
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|createPartitionedTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|addManyPartitions
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|howMany
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created {} partitions"
argument_list|,
name|howMany
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"started benchmark... "
argument_list|)
expr_stmt|;
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|new
name|DescriptiveStatistics
argument_list|()
return|;
block|}
finally|finally
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkDropPartition
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|createPartitionedTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"d1"
argument_list|)
decl_stmt|;
try|try
block|{
name|Table
name|t
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Partition
name|partition
init|=
operator|new
name|Util
operator|.
name|PartitionBuilder
argument_list|(
name|t
argument_list|)
operator|.
name|withValues
argument_list|(
name|values
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|addPartition
argument_list|(
name|partition
argument_list|)
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|values
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|new
name|DescriptiveStatistics
argument_list|()
return|;
block|}
finally|finally
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkCreatePartitions
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|,
name|int
name|count
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|createPartitionedTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|bench
operator|.
name|measure
argument_list|(
literal|null
argument_list|,
parameter_list|()
lambda|->
name|addManyPartitionsNoException
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|count
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkDropPartitions
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|,
name|int
name|count
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|createPartitionedTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|addManyPartitionsNoException
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|count
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkGetPartitionNames
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|,
name|int
name|count
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|createPartitionedTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|addManyPartitionsNoException
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|getPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkGetPartitionsByName
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|,
name|int
name|count
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|createPartitionedTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|addManyPartitionsNoException
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|getPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionNames
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkRenameTable
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|,
name|int
name|count
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|String
name|tableName
init|=
name|data
operator|.
name|tableName
decl_stmt|;
name|createPartitionedTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|addManyPartitionsNoException
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Table
name|oldTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|oldTable
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Table
name|newTable
init|=
name|oldTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|setTableName
argument_list|(
name|tableName
operator|+
literal|"_renamed"
argument_list|)
expr_stmt|;
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// Measuring 2 renames, so the tests are idempotent
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|alterTable
argument_list|(
name|oldTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|oldTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
argument_list|)
expr_stmt|;
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|alterTable
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|oldTable
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|new
name|DescriptiveStatistics
argument_list|()
return|;
block|}
finally|finally
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkDropDatabase
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|bench
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|,
name|int
name|count
parameter_list|)
block|{
specifier|final
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|data
operator|.
name|dbName
decl_stmt|;
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|bench
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|createDatabase
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
name|createManyTables
argument_list|(
name|client
argument_list|,
name|count
argument_list|,
name|dbName
argument_list|,
literal|"tmp_table_%d"
argument_list|)
expr_stmt|;
block|}
argument_list|,
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|createDatabase
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|createManyTables
parameter_list|(
name|HMSClient
name|client
parameter_list|,
name|int
name|howMany
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|format
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|columns
init|=
name|createSchema
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitions
init|=
name|createSchema
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"date"
argument_list|,
literal|"string"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|howMany
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|createTable
argument_list|(
operator|new
name|Util
operator|.
name|TableBuilder
argument_list|(
name|dbName
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|withType
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|)
operator|.
name|withColumns
argument_list|(
name|columns
argument_list|)
operator|.
name|withPartitionKeys
argument_list|(
name|partitions
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|dropManyTables
parameter_list|(
name|HMSClient
name|client
parameter_list|,
name|int
name|howMany
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|format
parameter_list|)
block|{
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|howMany
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Create a simple table with a single column and single partition
end_comment

begin_function
specifier|private
specifier|static
name|void
name|createPartitionedTable
parameter_list|(
name|HMSClient
name|client
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|throwingSupplierWrapper
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|createTable
argument_list|(
operator|new
name|Util
operator|.
name|TableBuilder
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|withType
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|)
operator|.
name|withColumns
argument_list|(
name|createSchema
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"name:string"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|withPartitionKeys
argument_list|(
name|createSchema
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"date"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|DescriptiveStatistics
name|benchmarkGetNotificationId
parameter_list|(
annotation|@
name|NotNull
name|MicroBenchmark
name|benchmark
parameter_list|,
annotation|@
name|NotNull
name|BenchData
name|data
parameter_list|)
block|{
name|HMSClient
name|client
init|=
name|data
operator|.
name|getClient
argument_list|()
decl_stmt|;
return|return
name|benchmark
operator|.
name|measure
argument_list|(
parameter_list|()
lambda|->
name|throwingSupplierWrapper
argument_list|(
name|client
operator|::
name|getCurrentNotificationId
argument_list|)
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

