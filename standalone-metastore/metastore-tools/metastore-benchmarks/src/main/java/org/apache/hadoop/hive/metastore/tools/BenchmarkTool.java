begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|DescriptiveStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|Constants
operator|.
name|HMS_DEFAULT_PORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|HMSBenchmarks
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|Util
operator|.
name|getServerUri
import|;
end_import

begin_import
import|import static
name|picocli
operator|.
name|CommandLine
operator|.
name|Command
import|;
end_import

begin_import
import|import static
name|picocli
operator|.
name|CommandLine
operator|.
name|Option
import|;
end_import

begin_comment
comment|/**  * Command-line access to Hive Metastore.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"squid:S106"
block|,
literal|"squid:S1148"
block|}
argument_list|)
comment|// Using System.out
annotation|@
name|Command
argument_list|(
name|name
operator|=
literal|"BenchmarkTool"
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|,
name|version
operator|=
literal|"1.0"
argument_list|,
name|showDefaultValues
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|BenchmarkTool
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BenchmarkTool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TimeUnit
name|scale
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CSV_SEPARATOR
init|=
literal|"\t"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_TABLE
init|=
literal|"bench_table"
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-H"
block|,
literal|"--host"
block|}
argument_list|,
name|description
operator|=
literal|"HMS Host"
argument_list|,
name|paramLabel
operator|=
literal|"URI"
argument_list|)
specifier|private
name|String
name|host
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-P"
block|,
literal|"--port"
block|}
argument_list|,
name|description
operator|=
literal|"HMS Server port"
argument_list|)
specifier|private
name|Integer
name|port
init|=
name|HMS_DEFAULT_PORT
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-d"
block|,
literal|"--db"
block|}
argument_list|,
name|description
operator|=
literal|"database name"
argument_list|)
specifier|private
name|String
name|dbName
init|=
literal|"bench_"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-t"
block|,
literal|"--table"
block|}
argument_list|,
name|description
operator|=
literal|"table name"
argument_list|)
specifier|private
name|String
name|tableName
init|=
name|TEST_TABLE
operator|+
literal|"_"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-N"
block|,
literal|"--number"
block|}
argument_list|,
name|description
operator|=
literal|"umber of object instances"
argument_list|)
specifier|private
name|int
index|[]
name|instances
init|=
block|{
literal|100
block|}
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-L"
block|,
literal|"--spin"
block|}
argument_list|,
name|description
operator|=
literal|"spin count"
argument_list|)
specifier|private
name|int
name|spinCount
init|=
literal|100
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-W"
block|,
literal|"--warmup"
block|}
argument_list|,
name|description
operator|=
literal|"warmup count"
argument_list|)
specifier|private
name|int
name|warmup
init|=
literal|15
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-l"
block|,
literal|"--list"
block|}
argument_list|,
name|description
operator|=
literal|"list matching benchmarks"
argument_list|)
specifier|private
name|boolean
name|doList
init|=
literal|false
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-o"
block|,
literal|"--output"
block|}
argument_list|,
name|description
operator|=
literal|"output file"
argument_list|)
specifier|private
name|String
name|outputFile
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-T"
block|,
literal|"--threads"
block|}
argument_list|,
name|description
operator|=
literal|"number of concurrent threads"
argument_list|)
specifier|private
name|int
name|nThreads
init|=
literal|2
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"--confdir"
block|}
argument_list|,
name|description
operator|=
literal|"configuration directory"
argument_list|)
specifier|private
name|String
name|confDir
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"--sanitize"
block|}
argument_list|,
name|description
operator|=
literal|"sanitize results (remove outliers)"
argument_list|)
specifier|private
name|boolean
name|doSanitize
init|=
literal|false
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-C"
block|,
literal|"--csv"
block|}
argument_list|,
name|description
operator|=
literal|"produce CSV output"
argument_list|)
specifier|private
name|boolean
name|doCSV
init|=
literal|false
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"--params"
block|}
argument_list|,
name|description
operator|=
literal|"number of table/partition parameters"
argument_list|)
specifier|private
name|int
name|nParameters
init|=
literal|0
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"--savedata"
block|}
argument_list|,
name|description
operator|=
literal|"save raw data in specified dir"
argument_list|)
specifier|private
name|String
name|dataSaveDir
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"--separator"
block|}
argument_list|,
name|description
operator|=
literal|"CSV field separator"
argument_list|)
specifier|private
name|String
name|csvSeparator
init|=
name|CSV_SEPARATOR
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-M"
block|,
literal|"--pattern"
block|}
argument_list|,
name|description
operator|=
literal|"test name patterns"
argument_list|)
specifier|private
name|Pattern
index|[]
name|matches
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-E"
block|,
literal|"--exclude"
block|}
argument_list|,
name|description
operator|=
literal|"test name patterns to exclude"
argument_list|)
specifier|private
name|Pattern
index|[]
name|exclude
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|CommandLine
operator|.
name|run
argument_list|(
operator|new
name|BenchmarkTool
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|saveData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DescriptiveStatistics
argument_list|>
name|result
parameter_list|,
name|String
name|location
parameter_list|,
name|TimeUnit
name|scale
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|toFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating directory {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dir
operator|.
name|toFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} should be a directory"
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
comment|// Create a new file for each benchmark and dump raw data to it.
name|result
operator|.
name|forEach
argument_list|(
parameter_list|(
name|name
parameter_list|,
name|data
parameter_list|)
lambda|->
name|saveDataFile
argument_list|(
name|location
argument_list|,
name|name
argument_list|,
name|data
argument_list|,
name|scale
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|saveDataFile
parameter_list|(
name|String
name|location
parameter_list|,
name|String
name|name
parameter_list|,
name|DescriptiveStatistics
name|data
parameter_list|,
name|TimeUnit
name|scale
parameter_list|)
block|{
name|long
name|conv
init|=
name|scale
operator|.
name|toNanos
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
name|Paths
operator|.
name|get
argument_list|(
name|location
argument_list|,
name|name
argument_list|)
decl_stmt|;
try|try
init|(
name|PrintStream
name|output
init|=
operator|new
name|PrintStream
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
comment|// Print all values one per line
name|Arrays
operator|.
name|stream
argument_list|(
name|data
operator|.
name|getValues
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|d
lambda|->
name|output
operator|.
name|println
argument_list|(
name|d
operator|/
name|conv
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to write to {}"
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using warmup "
operator|+
name|warmup
operator|+
literal|" spin "
operator|+
name|spinCount
operator|+
literal|" nparams "
operator|+
name|nParameters
operator|+
literal|" threads "
operator|+
name|nThreads
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|BenchData
name|bData
init|=
operator|new
name|BenchData
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|MicroBenchmark
name|bench
init|=
operator|new
name|MicroBenchmark
argument_list|(
name|warmup
argument_list|,
name|spinCount
argument_list|)
decl_stmt|;
name|BenchmarkSuite
name|suite
init|=
operator|new
name|BenchmarkSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|setScale
argument_list|(
name|scale
argument_list|)
operator|.
name|doSanitize
argument_list|(
name|doSanitize
argument_list|)
operator|.
name|add
argument_list|(
literal|"getNid"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkGetNotificationId
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"listDatabases"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkListDatabases
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"listTables"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkListAllTables
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"getTable"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkGetTable
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"createTable"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkTableCreate
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"dropTable"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkDeleteCreate
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"dropTableWithPartitions"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkDeleteWithPartitions
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
literal|1
argument_list|,
name|nParameters
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"addPartition"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkCreatePartition
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"dropPartition"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkDropPartition
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"listPartition"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkListPartition
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"getPartition"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkGetPartitions
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"getPartitionNames"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkGetPartitionNames
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"getPartitionsByNames"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkGetPartitionsByName
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"renameTable"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkRenameTable
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"dropDatabase"
argument_list|,
parameter_list|()
lambda|->
name|benchmarkDropDatabase
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|howMany
range|:
name|instances
control|)
block|{
name|suite
operator|.
name|add
argument_list|(
literal|"listTables"
operator|+
literal|'.'
operator|+
name|howMany
argument_list|,
parameter_list|()
lambda|->
name|benchmarkListTables
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
name|howMany
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"dropTableWithPartitions"
operator|+
literal|'.'
operator|+
name|howMany
argument_list|,
parameter_list|()
lambda|->
name|benchmarkDeleteWithPartitions
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
name|howMany
argument_list|,
name|nParameters
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"listPartitions"
operator|+
literal|'.'
operator|+
name|howMany
argument_list|,
parameter_list|()
lambda|->
name|benchmarkListManyPartitions
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
name|howMany
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"getPartitions"
operator|+
literal|'.'
operator|+
name|howMany
argument_list|,
parameter_list|()
lambda|->
name|benchmarkGetPartitions
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
name|howMany
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"getPartitionNames"
operator|+
literal|'.'
operator|+
name|howMany
argument_list|,
parameter_list|()
lambda|->
name|benchmarkGetPartitionNames
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
name|howMany
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"getPartitionsByNames"
operator|+
literal|'.'
operator|+
name|howMany
argument_list|,
parameter_list|()
lambda|->
name|benchmarkGetPartitionsByName
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
name|howMany
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"addPartitions"
operator|+
literal|'.'
operator|+
name|howMany
argument_list|,
parameter_list|()
lambda|->
name|benchmarkCreatePartitions
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
name|howMany
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"dropPartitions"
operator|+
literal|'.'
operator|+
name|howMany
argument_list|,
parameter_list|()
lambda|->
name|benchmarkDropPartitions
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
name|howMany
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"renameTable"
operator|+
literal|'.'
operator|+
name|howMany
argument_list|,
parameter_list|()
lambda|->
name|benchmarkRenameTable
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
name|howMany
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"dropDatabase"
operator|+
literal|'.'
operator|+
name|howMany
argument_list|,
parameter_list|()
lambda|->
name|benchmarkDropDatabase
argument_list|(
name|bench
argument_list|,
name|bData
argument_list|,
name|howMany
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doList
condition|)
block|{
name|suite
operator|.
name|listMatching
argument_list|(
name|matches
argument_list|,
name|exclude
argument_list|)
operator|.
name|forEach
argument_list|(
name|System
operator|.
name|out
operator|::
name|println
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using table '{}.{}"
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|HMSClient
name|client
init|=
operator|new
name|HMSClient
argument_list|(
name|getServerUri
argument_list|(
name|host
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|port
argument_list|)
argument_list|)
argument_list|,
name|confDir
argument_list|)
init|)
block|{
name|bData
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|client
operator|.
name|dbExists
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
name|client
operator|.
name|createDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|client
operator|.
name|tableExists
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// Arrange various benchmarks in a suite
name|BenchmarkSuite
name|result
init|=
name|suite
operator|.
name|runMatching
argument_list|(
name|matches
argument_list|,
name|exclude
argument_list|)
decl_stmt|;
name|Formatter
name|fmt
init|=
operator|new
name|Formatter
argument_list|(
name|sb
argument_list|)
decl_stmt|;
if|if
condition|(
name|doCSV
condition|)
block|{
name|result
operator|.
name|displayCSV
argument_list|(
name|fmt
argument_list|,
name|csvSeparator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|display
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
block|}
name|PrintStream
name|output
init|=
name|System
operator|.
name|out
decl_stmt|;
if|if
condition|(
name|outputFile
operator|!=
literal|null
condition|)
block|{
name|output
operator|=
operator|new
name|PrintStream
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputFile
operator|!=
literal|null
condition|)
block|{
comment|// Print results to stdout as well
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Formatter
name|f
init|=
operator|new
name|Formatter
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|result
operator|.
name|display
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|output
operator|.
name|print
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|dataSaveDir
operator|!=
literal|null
condition|)
block|{
name|saveData
argument_list|(
name|result
operator|.
name|getResult
argument_list|()
argument_list|,
name|dataSaveDir
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

