begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|Util
operator|.
name|filterMatches
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_class
specifier|public
class|class
name|UtilTest
block|{
specifier|public
name|UtilTest
parameter_list|()
block|{   }
comment|/**    * Test that a null pattern returns all candidates for iflterMatches.    * Also verify that null candidates result in an empty result list.    */
annotation|@
name|Test
specifier|public
name|void
name|filterMatchesEmpty
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|candidates
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filterMatches
argument_list|(
name|candidates
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|is
argument_list|(
name|candidates
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filterMatches
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test positive matches when some candidates match.    */
annotation|@
name|Test
specifier|public
name|void
name|filterMatchesPositive
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|candidates
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filterMatches
argument_list|(
name|candidates
argument_list|,
operator|new
name|Pattern
index|[]
block|{
name|Pattern
operator|.
name|compile
argument_list|(
literal|"f.*"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test negative matches    */
annotation|@
name|Test
specifier|public
name|void
name|filterMatchesNegative
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|candidates
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filterMatches
argument_list|(
name|candidates
argument_list|,
literal|null
argument_list|,
operator|new
name|Pattern
index|[]
block|{
name|Pattern
operator|.
name|compile
argument_list|(
literal|"b"
argument_list|)
block|}
argument_list|)
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that multiple patterns are handled correctly. We use one positive and one negative parrent.    */
annotation|@
name|Test
specifier|public
name|void
name|filterMatchesMultiple
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|candidates
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"any"
argument_list|,
literal|"boom"
argument_list|,
literal|"hello"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|patterns
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"^a"
argument_list|,
literal|"!y$"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filterMatches
argument_list|(
name|candidates
argument_list|,
operator|new
name|Pattern
index|[]
block|{
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^a"
argument_list|)
block|}
argument_list|,
operator|new
name|Pattern
index|[]
block|{
name|Pattern
operator|.
name|compile
argument_list|(
literal|"y$"
argument_list|)
block|}
argument_list|)
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

