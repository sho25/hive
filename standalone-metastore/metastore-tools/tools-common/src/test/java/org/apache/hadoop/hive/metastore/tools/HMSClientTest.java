begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|HMSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|AfterAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeAll
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|Util
operator|.
name|getServerUri
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalToIgnoringCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_class
specifier|public
class|class
name|HMSClientTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_NAME
init|=
literal|"param"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VALUE_NAME
init|=
literal|"value"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATABASE
init|=
literal|"hmsClientTest"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATABASE_DESCRIPTION
init|=
literal|"hmsclienttest description"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|TEST_DATABASE_PARAMS
init|=
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
name|PARAM_NAME
argument_list|,
name|VALUE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|hasClient
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_TABLE_NAME
init|=
literal|"test1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Table
name|TEST_TABLE
init|=
name|Util
operator|.
name|TableBuilder
operator|.
name|buildDefaultTable
argument_list|(
name|TEST_DATABASE
argument_list|,
name|TEST_TABLE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HMSClient
name|client
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeAll
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|db
init|=
operator|new
name|Util
operator|.
name|DatabaseBuilder
argument_list|(
name|TEST_DATABASE
argument_list|)
operator|.
name|withDescription
argument_list|(
name|TEST_DATABASE_DESCRIPTION
argument_list|)
operator|.
name|withParams
argument_list|(
name|TEST_DATABASE_PARAMS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Create client and default test database
try|try
block|{
name|client
operator|=
operator|new
name|HMSClient
argument_list|(
name|getServerUri
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterAll
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|TException
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
comment|// Destroy test database
name|client
operator|.
name|dropDatabase
argument_list|(
name|TEST_DATABASE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|beforeTest
parameter_list|()
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|client
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that list of databases contains "default" and test database    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|getAllDatabases
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|client
operator|.
name|getAllDatabases
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|databases
argument_list|,
name|Matchers
operator|.
name|hasItem
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|databases
argument_list|,
name|Matchers
operator|.
name|hasItem
argument_list|(
name|TEST_DATABASE
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|(
name|TEST_DATABASE
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|Matchers
operator|.
name|contains
argument_list|(
name|TEST_DATABASE
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that an attempt to create an existing database throws AlreadyExistsException.    */
annotation|@
name|Test
specifier|public
name|void
name|createExistingDatabase
parameter_list|()
block|{
name|Throwable
name|exception
init|=
name|Assertions
operator|.
name|assertThrows
argument_list|(
name|AlreadyExistsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
operator|.
name|createDatabase
argument_list|(
name|TEST_DATABASE
argument_list|)
argument_list|)
decl_stmt|;
block|}
comment|/**    * Creating a database with null name should not be allowed    * and should throw MetaException.    */
annotation|@
name|Test
specifier|public
name|void
name|createDatabaseNullName
parameter_list|()
block|{
name|Database
name|db
init|=
operator|new
name|Util
operator|.
name|DatabaseBuilder
argument_list|(
name|TEST_DATABASE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Throwable
name|exception
init|=
name|Assertions
operator|.
name|assertThrows
argument_list|(
name|MetaException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
argument_list|)
decl_stmt|;
block|}
comment|/**    * Creating a database with an empty name should not be allowed    * and should throw InvalidObjectException    */
annotation|@
name|Test
specifier|public
name|void
name|createDatabaseEmptyName
parameter_list|()
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|client
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Util
operator|.
name|DatabaseBuilder
argument_list|(
name|TEST_DATABASE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Throwable
name|exception
init|=
name|Assertions
operator|.
name|assertThrows
argument_list|(
name|InvalidObjectException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
argument_list|)
decl_stmt|;
block|}
comment|/**    * Verify that getDatabase() returns all expected fields    * @throws TException if fails to get database info    */
annotation|@
name|Test
specifier|public
name|void
name|getDatabase
parameter_list|()
throws|throws
name|TException
block|{
name|Database
name|db
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|TEST_DATABASE
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalToIgnoringCase
argument_list|(
name|TEST_DATABASE
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|db
operator|.
name|getDescription
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|TEST_DATABASE_DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|TEST_DATABASE_PARAMS
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|,
name|Matchers
operator|.
name|containsString
argument_list|(
name|TEST_DATABASE
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that locating database is case-insensitive    */
annotation|@
name|Test
specifier|public
name|void
name|getDatabaseCI
parameter_list|()
throws|throws
name|TException
block|{
name|Database
name|db
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|TEST_DATABASE
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalToIgnoringCase
argument_list|(
name|TEST_DATABASE
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|db
operator|.
name|getDescription
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|TEST_DATABASE_DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|TEST_DATABASE_PARAMS
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|,
name|Matchers
operator|.
name|containsString
argument_list|(
name|TEST_DATABASE
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that searching for non-existing database throws    * NoSuchObjectException    */
annotation|@
name|Test
specifier|public
name|void
name|getNonExistingDb
parameter_list|()
block|{
name|Throwable
name|exception
init|=
name|Assertions
operator|.
name|assertThrows
argument_list|(
name|NoSuchObjectException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
operator|.
name|getDatabase
argument_list|(
literal|"WhatIsThisDatabase"
argument_list|)
argument_list|)
decl_stmt|;
block|}
comment|/**    * Verify that dropping for non-existing database throws    * NoSuchObjectException    */
annotation|@
name|Test
specifier|public
name|void
name|dropNonExistingDb
parameter_list|()
block|{
name|Throwable
name|exception
init|=
name|Assertions
operator|.
name|assertThrows
argument_list|(
name|NoSuchObjectException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"WhatIsThisDatabase"
argument_list|)
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAllTables
parameter_list|()
throws|throws
name|TException
block|{
try|try
block|{
name|client
operator|.
name|createTable
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
operator|.
name|getAllTables
argument_list|(
name|TEST_DATABASE
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Matchers
operator|.
name|contains
argument_list|(
name|TEST_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|TEST_DATABASE
argument_list|,
name|TEST_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

