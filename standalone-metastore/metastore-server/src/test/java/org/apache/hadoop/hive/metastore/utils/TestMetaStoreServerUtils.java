begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionSpecWithSharedSD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionWithoutSD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
operator|.
name|compile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
operator|.
name|FAST_STATS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
operator|.
name|NUM_ERASURE_CODED_FILES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
operator|.
name|NUM_FILES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
operator|.
name|STATS_GENERATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
operator|.
name|TOTAL_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|filterMapkeys
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMetaStoreServerUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"db1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"tbl1"
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramsWithStats
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NUM_FILES
argument_list|,
literal|"1"
argument_list|,
name|TOTAL_SIZE
argument_list|,
literal|"2"
argument_list|,
name|NUM_ERASURE_CODED_FILES
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
specifier|private
name|Database
name|db
decl_stmt|;
specifier|public
name|TestMetaStoreServerUtils
parameter_list|()
block|{
try|try
block|{
name|db
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTrimMapNullsXform
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"akey"
argument_list|,
literal|"aval"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blank"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"null"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"akey"
argument_list|,
literal|"aval"
argument_list|,
literal|"blank"
argument_list|,
literal|""
argument_list|,
literal|"null"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|xformed
init|=
name|MetaStoreServerUtils
operator|.
name|trimMapNulls
argument_list|(
name|m
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|xformed
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTrimMapNullsPrune
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"akey"
argument_list|,
literal|"aval"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blank"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"null"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"akey"
argument_list|,
literal|"aval"
argument_list|,
literal|"blank"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pruned
init|=
name|MetaStoreServerUtils
operator|.
name|trimMapNulls
argument_list|(
name|m
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pruned
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testcolumnsIncludedByNameType
parameter_list|()
block|{
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"string"
argument_list|,
literal|"col1 comment"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col1a
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"string"
argument_list|,
literal|"col1 but with a different comment"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"string"
argument_list|,
literal|"col2 comment"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col3
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
literal|"string"
argument_list|,
literal|"col3 comment"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|MetaStoreServerUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|MetaStoreServerUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col1a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|MetaStoreServerUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|MetaStoreServerUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col2
argument_list|,
name|col1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|MetaStoreServerUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|,
name|col3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|MetaStoreServerUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col3
argument_list|,
name|col2
argument_list|,
name|col1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|MetaStoreServerUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that updateTableStatsSlow really updates table statistics.    * The test does the following:    *<ol>    *<li>Create database</li>    *<li>Create unpartitioned table</li>    *<li>Create unpartitioned table which has params</li>    *<li>Call updateTableStatsSlow with arguments which should cause stats calculation</li>    *<li>Verify table statistics using mocked warehouse</li>    *<li>Create table which already have stats</li>    *<li>Call updateTableStatsSlow forcing stats recompute</li>    *<li>Verify table statistics using mocked warehouse</li>    *<li>Verifies behavior when STATS_GENERATED is set in environment context</li>    *</ol>    */
annotation|@
name|Test
specifier|public
name|void
name|testUpdateTableStatsSlow_statsUpdated
parameter_list|()
throws|throws
name|TException
block|{
name|long
name|fileLength
init|=
literal|5
decl_stmt|;
comment|// Create database and table
name|Table
name|tbl
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Set up mock warehouse
name|FileStatus
name|fs1
init|=
name|getFileStatus
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|"/tmp/0"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FileStatus
name|fs2
init|=
name|getFileStatus
argument_list|(
name|fileLength
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|"/tmp/1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FileStatus
name|fs3
init|=
name|getFileStatus
argument_list|(
name|fileLength
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|"/tmp/1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileStatus
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|fs1
argument_list|,
name|fs2
argument_list|,
name|fs3
argument_list|)
decl_stmt|;
name|Warehouse
name|wh
init|=
name|mock
argument_list|(
name|Warehouse
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|wh
operator|.
name|getFileStatusesForUnpartitionedTable
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NUM_FILES
argument_list|,
literal|"2"
argument_list|,
name|TOTAL_SIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|2
operator|*
name|fileLength
argument_list|)
argument_list|,
name|NUM_ERASURE_CODED_FILES
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|MetaStoreServerUtils
operator|.
name|updateTableStatsSlow
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|,
name|wh
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that when stats are already present and forceRecompute is specified they are recomputed
name|Table
name|tbl1
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addTableParam
argument_list|(
name|NUM_FILES
argument_list|,
literal|"0"
argument_list|)
operator|.
name|addTableParam
argument_list|(
name|TOTAL_SIZE
argument_list|,
literal|"0"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|wh
operator|.
name|getFileStatusesForUnpartitionedTable
argument_list|(
name|db
argument_list|,
name|tbl1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
name|MetaStoreServerUtils
operator|.
name|updateTableStatsSlow
argument_list|(
name|db
argument_list|,
name|tbl1
argument_list|,
name|wh
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tbl1
operator|.
name|getParameters
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that COLUMN_STATS_ACCURATE is removed from params
name|Table
name|tbl2
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addTableParam
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|wh
operator|.
name|getFileStatusesForUnpartitionedTable
argument_list|(
name|db
argument_list|,
name|tbl2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
name|MetaStoreServerUtils
operator|.
name|updateTableStatsSlow
argument_list|(
name|db
argument_list|,
name|tbl2
argument_list|,
name|wh
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tbl2
operator|.
name|getParameters
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|EnvironmentContext
name|context
init|=
operator|new
name|EnvironmentContext
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|STATS_GENERATED
argument_list|,
name|StatsSetupConst
operator|.
name|TASK
argument_list|)
argument_list|)
decl_stmt|;
comment|// Verify that if environment context has STATS_GENERATED set to task,
comment|// COLUMN_STATS_ACCURATE in params is set to correct value
name|Table
name|tbl3
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addTableParam
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|,
literal|"foo"
argument_list|)
comment|// The value doesn't matter
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|wh
operator|.
name|getFileStatusesForUnpartitionedTable
argument_list|(
name|db
argument_list|,
name|tbl3
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
name|MetaStoreServerUtils
operator|.
name|updateTableStatsSlow
argument_list|(
name|db
argument_list|,
name|tbl3
argument_list|,
name|wh
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expected1
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NUM_FILES
argument_list|,
literal|"2"
argument_list|,
name|TOTAL_SIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|2
operator|*
name|fileLength
argument_list|)
argument_list|,
name|NUM_ERASURE_CODED_FILES
argument_list|,
literal|"1"
argument_list|,
name|COLUMN_STATS_ACCURATE
argument_list|,
literal|"{\"BASIC_STATS\":\"true\"}"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tbl3
operator|.
name|getParameters
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the call to updateTableStatsSlow() removes DO_NOT_UPDATE_STATS from table params.    */
annotation|@
name|Test
specifier|public
name|void
name|testUpdateTableStatsSlow_removesDoNotUpdateStats
parameter_list|()
throws|throws
name|TException
block|{
comment|// Create database and table
name|Table
name|tbl
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addTableParam
argument_list|(
name|StatsSetupConst
operator|.
name|DO_NOT_UPDATE_STATS
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Table
name|tbl1
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addTableParam
argument_list|(
name|StatsSetupConst
operator|.
name|DO_NOT_UPDATE_STATS
argument_list|,
literal|"false"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Warehouse
name|wh
init|=
name|mock
argument_list|(
name|Warehouse
operator|.
name|class
argument_list|)
decl_stmt|;
name|MetaStoreServerUtils
operator|.
name|updateTableStatsSlow
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|,
name|wh
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wh
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getFileStatusesForUnpartitionedTable
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|MetaStoreServerUtils
operator|.
name|updateTableStatsSlow
argument_list|(
name|db
argument_list|,
name|tbl1
argument_list|,
name|wh
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wh
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getFileStatusesForUnpartitionedTable
argument_list|(
name|db
argument_list|,
name|tbl1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that updateTableStatsSlow() does not calculate table statistics when    *<ol>    *<li>newDir is true</li>    *<li>Table is partitioned</li>    *<li>Stats are already present and forceRecompute isn't set</li>    *</ol>    */
annotation|@
name|Test
specifier|public
name|void
name|testUpdateTableStatsSlow_doesNotUpdateStats
parameter_list|()
throws|throws
name|TException
block|{
comment|// Create database and table
name|FieldSchema
name|fs
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"date"
argument_list|,
literal|"string"
argument_list|,
literal|"date column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|Table
name|tbl
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Warehouse
name|wh
init|=
name|mock
argument_list|(
name|Warehouse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// newDir(true) => stats not updated
name|MetaStoreServerUtils
operator|.
name|updateTableStatsSlow
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|,
name|wh
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wh
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getFileStatusesForUnpartitionedTable
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
comment|// partitioned table => stats not updated
name|Table
name|tbl1
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setPartCols
argument_list|(
name|cols
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|MetaStoreServerUtils
operator|.
name|updateTableStatsSlow
argument_list|(
name|db
argument_list|,
name|tbl1
argument_list|,
name|wh
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wh
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getFileStatusesForUnpartitionedTable
argument_list|(
name|db
argument_list|,
name|tbl1
argument_list|)
expr_stmt|;
comment|// Already contains stats => stats not updated when forceRecompute isn't set
name|Table
name|tbl2
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setTableParams
argument_list|(
name|paramsWithStats
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|MetaStoreServerUtils
operator|.
name|updateTableStatsSlow
argument_list|(
name|db
argument_list|,
name|tbl2
argument_list|,
name|wh
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wh
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getFileStatusesForUnpartitionedTable
argument_list|(
name|db
argument_list|,
name|tbl2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isFastStatsSameWithNullPartitions
parameter_list|()
block|{
name|Partition
name|partition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|MetaStoreServerUtils
operator|.
name|isFastStatsSame
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaStoreServerUtils
operator|.
name|isFastStatsSame
argument_list|(
literal|null
argument_list|,
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaStoreServerUtils
operator|.
name|isFastStatsSame
argument_list|(
name|partition
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isFastStatsSameWithNoMatchingStats
parameter_list|()
block|{
name|Partition
name|oldPartition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|oldPartition
operator|.
name|setParameters
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaStoreServerUtils
operator|.
name|isFastStatsSame
argument_list|(
name|oldPartition
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|put
argument_list|(
literal|"someKeyThatIsNotInFastStats"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|oldPartition
operator|.
name|setParameters
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaStoreServerUtils
operator|.
name|isFastStatsSame
argument_list|(
name|oldPartition
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Test case where one or all of the FAST_STATS parameters are not present in newPart
annotation|@
name|Test
specifier|public
name|void
name|isFastStatsSameMatchingButOnlyOneStat
parameter_list|()
block|{
name|Partition
name|oldPartition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|Partition
name|newPartition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|randomParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|randomParams
operator|.
name|put
argument_list|(
literal|"randomParam1"
argument_list|,
literal|"randomVal1"
argument_list|)
expr_stmt|;
name|newPartition
operator|.
name|setParameters
argument_list|(
name|randomParams
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaStoreServerUtils
operator|.
name|isFastStatsSame
argument_list|(
name|oldPartition
argument_list|,
name|newPartition
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Test case where all parameters are present and their values are same
annotation|@
name|Test
specifier|public
name|void
name|isFastStatsSameMatching
parameter_list|()
block|{
name|Partition
name|oldPartition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|Partition
name|newPartition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oldParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|testVal
init|=
literal|1
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|FAST_STATS
control|)
block|{
name|oldParams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|testVal
argument_list|)
argument_list|)
expr_stmt|;
name|newParams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|testVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|oldPartition
operator|.
name|setParameters
argument_list|(
name|oldParams
argument_list|)
expr_stmt|;
name|newPartition
operator|.
name|setParameters
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MetaStoreServerUtils
operator|.
name|isFastStatsSame
argument_list|(
name|oldPartition
argument_list|,
name|newPartition
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Test case where all parameters are present and their values are different
annotation|@
name|Test
specifier|public
name|void
name|isFastStatsSameDifferent
parameter_list|()
block|{
name|Partition
name|oldPartition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|Partition
name|newPartition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oldParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|testVal
init|=
literal|1
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|FAST_STATS
control|)
block|{
name|oldParams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|testVal
argument_list|)
argument_list|)
expr_stmt|;
name|newParams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|++
name|testVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|oldPartition
operator|.
name|setParameters
argument_list|(
name|oldParams
argument_list|)
expr_stmt|;
name|newPartition
operator|.
name|setParameters
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaStoreServerUtils
operator|.
name|isFastStatsSame
argument_list|(
name|oldPartition
argument_list|,
name|newPartition
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isFastStatsSameNullStatsInNew
parameter_list|()
block|{
name|Partition
name|oldPartition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|Partition
name|newPartition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oldParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|testVal
init|=
literal|1
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|FAST_STATS
control|)
block|{
name|oldParams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|testVal
argument_list|)
argument_list|)
expr_stmt|;
name|newParams
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|oldPartition
operator|.
name|setParameters
argument_list|(
name|oldParams
argument_list|)
expr_stmt|;
name|newPartition
operator|.
name|setParameters
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaStoreServerUtils
operator|.
name|isFastStatsSame
argument_list|(
name|oldPartition
argument_list|,
name|newPartition
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build a FileStatus object.    */
specifier|private
specifier|static
name|FileStatus
name|getFileStatus
parameter_list|(
name|long
name|fileLength
parameter_list|,
name|boolean
name|isdir
parameter_list|,
name|int
name|blockReplication
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|int
name|modificationTime
parameter_list|,
name|String
name|pathString
parameter_list|,
name|boolean
name|isErasureCoded
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
name|fileLength
argument_list|,
name|isdir
argument_list|,
name|blockReplication
argument_list|,
name|blockSize
argument_list|,
name|modificationTime
argument_list|,
literal|0L
argument_list|,
operator|(
name|FsPermission
operator|)
literal|null
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|isErasureCoded
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterMapWithPredicates
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|testMap
init|=
name|getTestParamMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|excludePatterns
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"lastDdl"
argument_list|,
literal|"num"
argument_list|)
decl_stmt|;
name|testMapFilter
argument_list|(
name|testMap
argument_list|,
name|excludePatterns
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testMap
operator|.
name|containsKey
argument_list|(
literal|"transient_lastDdlTime"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testMap
operator|.
name|containsKey
argument_list|(
literal|"numFiles"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testMap
operator|.
name|containsKey
argument_list|(
literal|"numFilesErasureCoded"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testMap
operator|.
name|containsKey
argument_list|(
literal|"numRows"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"totalSize"
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"rawDataSize"
argument_list|,
literal|"3243234"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"COLUMN_STATS_ACCURATE"
argument_list|,
literal|"{\"BASIC_STATS\":\"true\""
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"COLUMN_STATS_ACCURATED"
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"bucketing_version"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"testBucketing_version"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|expectedMap
argument_list|,
name|is
argument_list|(
name|testMap
argument_list|)
argument_list|)
expr_stmt|;
name|testMap
operator|=
name|getTestParamMap
argument_list|()
expr_stmt|;
name|excludePatterns
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"^bucket"
argument_list|,
literal|"ACCURATE$"
argument_list|)
expr_stmt|;
name|testMapFilter
argument_list|(
name|testMap
argument_list|,
name|excludePatterns
argument_list|)
expr_stmt|;
name|expectedMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"totalSize"
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"numRows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"rawDataSize"
argument_list|,
literal|"3243234"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"COLUMN_STATS_ACCURATED"
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"numFiles"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"transient_lastDdlTime"
argument_list|,
literal|"1537487124"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"testBucketing_version"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"numFilesErasureCoded"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|assertThat
argument_list|(
name|expectedMap
argument_list|,
name|is
argument_list|(
name|testMap
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that if the config is not set in MetastoreConf, it does not filter any parameter
name|Configuration
name|testConf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|testMap
operator|=
name|getTestParamMap
argument_list|()
expr_stmt|;
name|excludePatterns
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|MetastoreConf
operator|.
name|getTrimmedStringsVar
argument_list|(
name|testConf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_NOTIFICATION_PARAMETERS_EXCLUDE_PATTERNS
argument_list|)
argument_list|)
expr_stmt|;
name|testMapFilter
argument_list|(
name|testMap
argument_list|,
name|excludePatterns
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getTestParamMap
argument_list|()
argument_list|,
name|is
argument_list|(
name|testMap
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that if the config is set to empty String in MetastoreConf, it does not filter any parameter
name|testConf
operator|.
name|setStrings
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_NOTIFICATION_PARAMETERS_EXCLUDE_PATTERNS
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testMap
operator|=
name|getTestParamMap
argument_list|()
expr_stmt|;
name|excludePatterns
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|MetastoreConf
operator|.
name|getTrimmedStringsVar
argument_list|(
name|testConf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_NOTIFICATION_PARAMETERS_EXCLUDE_PATTERNS
argument_list|)
argument_list|)
expr_stmt|;
name|testMapFilter
argument_list|(
name|testMap
argument_list|,
name|excludePatterns
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getTestParamMap
argument_list|()
argument_list|,
name|is
argument_list|(
name|testMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testMapFilter
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|testMap
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|patterns
parameter_list|)
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|>
name|paramsFilter
init|=
name|patterns
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|pattern
lambda|->
name|compile
argument_list|(
name|pattern
argument_list|)
operator|.
name|asPredicate
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|filterMapkeys
argument_list|(
name|testMap
argument_list|,
name|paramsFilter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getTestParamMap
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"totalSize"
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"numRows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"rawDataSize"
argument_list|,
literal|"3243234"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"COLUMN_STATS_ACCURATE"
argument_list|,
literal|"{\"BASIC_STATS\":\"true\""
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"COLUMN_STATS_ACCURATED"
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"numFiles"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"transient_lastDdlTime"
argument_list|,
literal|"1537487124"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"bucketing_version"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"testBucketing_version"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"numFilesErasureCoded"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**    * Two empty StorageDescriptorKey should be equal.    */
annotation|@
name|Test
specifier|public
name|void
name|testCompareNullSdKey
parameter_list|()
block|{
name|assertThat
argument_list|(
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
operator|.
name|UNSET_KEY
argument_list|,
name|is
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Two StorageDescriptorKey objects with null storage descriptors should be    * equal iff the base location is equal.    */
annotation|@
name|Test
specifier|public
name|void
name|testCompareNullSd
parameter_list|()
block|{
name|assertThat
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Different locations produce different objects
name|assertThat
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|IsNot
operator|.
name|not
argument_list|(
name|equalTo
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"b"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Two StorageDescriptorKey objects with the same base location but different    * SD location should be equal    */
annotation|@
name|Test
specifier|public
name|void
name|testCompareWithSdSamePrefixDifferentLocation
parameter_list|()
throws|throws
name|MetaException
block|{
name|Partition
name|p1
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"l1"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p2
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"l2"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p1
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p2
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Two StorageDescriptorKey objects with the same base location    * should be equal iff their columns are equal    */
annotation|@
name|Test
specifier|public
name|void
name|testCompareWithSdSamePrefixDifferentCols
parameter_list|()
throws|throws
name|MetaException
block|{
name|Partition
name|p1
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"l1"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p2
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"l2"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p3
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"l2"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p1
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|IsNot
operator|.
name|not
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p2
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p1
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p3
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Two StorageDescriptorKey objects with the same base location    * should be equal iff their output formats are equal    */
annotation|@
name|Test
specifier|public
name|void
name|testCompareWithSdSamePrefixDifferentOutputFormat
parameter_list|()
throws|throws
name|MetaException
block|{
name|Partition
name|p1
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"l1"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|setOutputFormat
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p2
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"l2"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setOutputFormat
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p3
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"l2"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setOutputFormat
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p1
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|IsNot
operator|.
name|not
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p2
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p1
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p3
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Two StorageDescriptorKey objects with the same base location    * should be equal iff their input formats are equal    */
annotation|@
name|Test
specifier|public
name|void
name|testCompareWithSdSamePrefixDifferentInputFormat
parameter_list|()
throws|throws
name|MetaException
block|{
name|Partition
name|p1
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"l1"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p2
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"l2"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p3
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"l1"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p1
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|IsNot
operator|.
name|not
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p2
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p1
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|MetaStoreServerUtils
operator|.
name|StorageDescriptorKey
argument_list|(
literal|"a"
argument_list|,
name|p3
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test getPartitionspecsGroupedByStorageDescriptor() for partitions with null SDs.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetPartitionspecsGroupedBySDNullSD
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// Create database and table
name|Table
name|tbl
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p1
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Set SD to null
name|p1
operator|.
name|unsetSd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|p1
operator|.
name|getSd
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|StorageDescriptor
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|result
init|=
name|MetaStoreServerUtils
operator|.
name|getPartitionspecsGroupedByStorageDescriptor
argument_list|(
name|tbl
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|p1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionSpec
name|ps
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ps
operator|.
name|getRootPath
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitions
init|=
name|ps
operator|.
name|getSharedSDPartitionSpec
argument_list|()
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|partitions
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionWithoutSD
name|partition
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|partition
operator|.
name|getRelativePath
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"val1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test getPartitionspecsGroupedByStorageDescriptor() for partitions with a single    * partition which is located under table location.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetPartitionspecsGroupedBySDOnePartitionInTable
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// Create database and table
name|Table
name|tbl
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p1
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"/foo/bar"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|result
init|=
name|MetaStoreServerUtils
operator|.
name|getPartitionspecsGroupedByStorageDescriptor
argument_list|(
name|tbl
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|p1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionSpec
name|ps
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ps
operator|.
name|getRootPath
argument_list|()
argument_list|,
name|is
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitions
init|=
name|ps
operator|.
name|getSharedSDPartitionSpec
argument_list|()
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|partitions
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionWithoutSD
name|partition
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|partition
operator|.
name|getRelativePath
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"val1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test getPartitionspecsGroupedByStorageDescriptor() for partitions with a single    * partition which is located outside table location.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetPartitionspecsGroupedBySDonePartitionExternal
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// Create database and table
name|Table
name|tbl
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p1
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"/a/b"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|result
init|=
name|MetaStoreServerUtils
operator|.
name|getPartitionspecsGroupedByStorageDescriptor
argument_list|(
name|tbl
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|p1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionSpec
name|ps
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ps
operator|.
name|getRootPath
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|ps
operator|.
name|getPartitionList
argument_list|()
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|partitions
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"val1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test getPartitionspecsGroupedByStorageDescriptor() multiple partitions:    *<ul>    *<li>Partition with null SD</li>    *<li>Two partitions under the table location</li>    *<li>One partition outside of table location</li>    *</ul>    */
annotation|@
name|Test
specifier|public
name|void
name|testGetPartitionspecsGroupedBySDonePartitionCombined
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// Create database and table
name|String
name|sharedInputFormat
init|=
literal|"foo1"
decl_stmt|;
name|Table
name|tbl
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p1
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"/foo/bar"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val1"
argument_list|)
operator|.
name|setInputFormat
argument_list|(
name|sharedInputFormat
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p2
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"/a/b"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a2"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val2"
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"foo2"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p3
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a3"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val3"
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"foo3"
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|p4
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"DB_NAME"
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"TABLE_NAME"
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"/foo/baz"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"val4"
argument_list|)
operator|.
name|setInputFormat
argument_list|(
name|sharedInputFormat
argument_list|)
operator|.
name|build
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|p3
operator|.
name|unsetSd
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|result
init|=
name|MetaStoreServerUtils
operator|.
name|getPartitionspecsGroupedByStorageDescriptor
argument_list|(
name|tbl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionSpec
name|ps1
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ps1
operator|.
name|getRootPath
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps1
operator|.
name|getPartitionList
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|List
argument_list|<
name|Partition
argument_list|>
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionSpecWithSharedSD
name|partSpec
init|=
name|ps1
operator|.
name|getSharedSDPartitionSpec
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitions1
init|=
name|partSpec
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|partitions1
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionWithoutSD
name|partition1
init|=
name|partitions1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|partition1
operator|.
name|getRelativePath
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|partition1
operator|.
name|getValues
argument_list|()
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"val3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionSpec
name|ps2
init|=
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ps2
operator|.
name|getRootPath
argument_list|()
argument_list|,
name|is
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps2
operator|.
name|getPartitionList
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|List
argument_list|<
name|Partition
argument_list|>
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitions2
init|=
name|ps2
operator|.
name|getSharedSDPartitionSpec
argument_list|()
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|partitions2
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionWithoutSD
name|partition2_1
init|=
name|partitions2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PartitionWithoutSD
name|partition2_2
init|=
name|partitions2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|partition2_1
operator|.
name|getRelativePath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"baz"
argument_list|)
condition|)
block|{
comment|// Swap p2_1 and p2_2
name|PartitionWithoutSD
name|tmp
init|=
name|partition2_1
decl_stmt|;
name|partition2_1
operator|=
name|partition2_2
expr_stmt|;
name|partition2_2
operator|=
name|tmp
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|partition2_1
operator|.
name|getRelativePath
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|partition2_1
operator|.
name|getValues
argument_list|()
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"val1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|partition2_2
operator|.
name|getRelativePath
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"/baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|partition2_2
operator|.
name|getValues
argument_list|()
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"val4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionSpec
name|ps4
init|=
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ps4
operator|.
name|getRootPath
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ps4
operator|.
name|getSharedSDPartitionSpec
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|PartitionSpecWithSharedSD
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|ps4
operator|.
name|getPartitionList
argument_list|()
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|partitions
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"val2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnonymizeConnectionURL
parameter_list|()
block|{
name|String
name|connectionURL
init|=
literal|null
decl_stmt|;
name|String
name|expectedConnectionURL
init|=
literal|null
decl_stmt|;
name|String
name|result
init|=
name|MetaStoreServerUtils
operator|.
name|anonymizeConnectionURL
argument_list|(
name|connectionURL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedConnectionURL
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|connectionURL
operator|=
literal|"jdbc:mysql://localhost:1111/db?user=user&password=password"
expr_stmt|;
name|expectedConnectionURL
operator|=
literal|"jdbc:mysql://localhost:1111/db?user=****&password=****"
expr_stmt|;
name|result
operator|=
name|MetaStoreServerUtils
operator|.
name|anonymizeConnectionURL
argument_list|(
name|connectionURL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedConnectionURL
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|connectionURL
operator|=
literal|"jdbc:derby:sample;user=jill;password=toFetchAPail"
expr_stmt|;
name|expectedConnectionURL
operator|=
literal|"jdbc:derby:sample;user=****;password=****"
expr_stmt|;
name|result
operator|=
name|MetaStoreServerUtils
operator|.
name|anonymizeConnectionURL
argument_list|(
name|connectionURL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedConnectionURL
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|connectionURL
operator|=
literal|"jdbc:mysql://[(host=myhost1,port=1111,user=sandy,password=secret),"
operator|+
literal|"(host=myhost2,port=2222,user=finn,password=secret)]/db"
expr_stmt|;
name|expectedConnectionURL
operator|=
literal|"jdbc:mysql://[(host=myhost1,port=1111,user=****,password=****),"
operator|+
literal|"(host=myhost2,port=2222,user=****,password=****)]/db"
expr_stmt|;
name|result
operator|=
name|MetaStoreServerUtils
operator|.
name|anonymizeConnectionURL
argument_list|(
name|connectionURL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedConnectionURL
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|connectionURL
operator|=
literal|"jdbc:derby:memory:${test.tmp.dir}/junit_metastore_db;create=true"
expr_stmt|;
name|result
operator|=
name|MetaStoreServerUtils
operator|.
name|anonymizeConnectionURL
argument_list|(
name|connectionURL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|connectionURL
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

