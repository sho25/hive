begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|DateColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|DateColumnStatsMergerTest
block|{
specifier|private
specifier|static
specifier|final
name|Date
name|DATE_1
init|=
operator|new
name|Date
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Date
name|DATE_2
init|=
operator|new
name|Date
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Date
name|DATE_3
init|=
operator|new
name|Date
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|ColumnStatsMerger
name|merger
init|=
operator|new
name|DateColumnStatsMerger
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testMergeNullMinMaxValues
parameter_list|()
block|{
name|ColumnStatisticsObj
name|old
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|createData
argument_list|(
name|old
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|merger
operator|.
name|merge
argument_list|(
name|old
argument_list|,
name|old
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|old
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|old
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeNulls
parameter_list|()
block|{
name|ColumnStatisticsObj
name|oldObj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|createData
argument_list|(
name|oldObj
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|newObj
decl_stmt|;
name|newObj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|createData
argument_list|(
name|newObj
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|merger
operator|.
name|merge
argument_list|(
name|oldObj
argument_list|,
name|newObj
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|oldObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|oldObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|newObj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|createData
argument_list|(
name|newObj
argument_list|,
name|DATE_1
argument_list|,
name|DATE_3
argument_list|)
expr_stmt|;
name|merger
operator|.
name|merge
argument_list|(
name|oldObj
argument_list|,
name|newObj
argument_list|)
expr_stmt|;
name|newObj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|createData
argument_list|(
name|newObj
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|merger
operator|.
name|merge
argument_list|(
name|oldObj
argument_list|,
name|newObj
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DATE_1
argument_list|,
name|oldObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DATE_3
argument_list|,
name|oldObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeNonNullAndNullLowerValuesNewIsNull
parameter_list|()
block|{
name|ColumnStatisticsObj
name|oldObj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|createData
argument_list|(
name|oldObj
argument_list|,
name|DATE_2
argument_list|,
name|DATE_2
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|newObj
decl_stmt|;
name|newObj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|createData
argument_list|(
name|newObj
argument_list|,
name|DATE_3
argument_list|,
name|DATE_3
argument_list|)
expr_stmt|;
name|merger
operator|.
name|merge
argument_list|(
name|oldObj
argument_list|,
name|newObj
argument_list|)
expr_stmt|;
name|newObj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|createData
argument_list|(
name|newObj
argument_list|,
name|DATE_1
argument_list|,
name|DATE_1
argument_list|)
expr_stmt|;
name|merger
operator|.
name|merge
argument_list|(
name|oldObj
argument_list|,
name|newObj
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DATE_1
argument_list|,
name|oldObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DATE_3
argument_list|,
name|oldObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DateColumnStatsDataInspector
name|createData
parameter_list|(
name|ColumnStatisticsObj
name|objNulls
parameter_list|,
name|Date
name|lowValue
parameter_list|,
name|Date
name|highValue
parameter_list|)
block|{
name|ColumnStatisticsData
name|statisticsData
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|DateColumnStatsDataInspector
name|data
init|=
operator|new
name|DateColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|statisticsData
operator|.
name|setDateStats
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|objNulls
operator|.
name|setStatsData
argument_list|(
name|statisticsData
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLowValue
argument_list|(
name|lowValue
argument_list|)
expr_stmt|;
name|data
operator|.
name|setHighValue
argument_list|(
name|highValue
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

