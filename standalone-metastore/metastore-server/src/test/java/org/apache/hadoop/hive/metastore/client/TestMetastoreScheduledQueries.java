begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOObjectNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|PersistenceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStoreTestHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PersistenceManagerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ScheduledQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ScheduledQueryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ScheduledQueryMaintenanceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ScheduledQueryMaintenanceRequestType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ScheduledQueryPollRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ScheduledQueryPollResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ScheduledQueryProgressInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MScheduledExecution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Tests handling of scheduled queries related calls to the metastore.  *  * Checks wether expected state changes are being done to the HMS database.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMetastoreScheduledQueries
extends|extends
name|MetaStoreClientTest
block|{
specifier|private
specifier|final
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|public
name|TestMetastoreScheduledQueries
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
throws|throws
name|Exception
block|{
name|metaStore
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"scheduled.queries.progress.timeout"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// HIVE-19729: Shallow the exceptions based on the discussion in the Jira
block|}
name|client
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNonExistent
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|getScheduledQuery
argument_list|(
operator|new
name|ScheduledQueryKey
argument_list|(
literal|"nonExistent"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|ScheduledQuery
name|schq
init|=
name|createScheduledQuery
argument_list|(
name|createKey
argument_list|(
literal|"create"
argument_list|,
literal|"c1"
argument_list|)
argument_list|)
decl_stmt|;
name|ScheduledQueryMaintenanceRequest
name|r
init|=
operator|new
name|ScheduledQueryMaintenanceRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledQuery
argument_list|(
name|schq
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|ScheduledQuery
name|schq2
init|=
name|client
operator|.
name|getScheduledQuery
argument_list|(
operator|new
name|ScheduledQueryKey
argument_list|(
literal|"create"
argument_list|,
literal|"c1"
argument_list|)
argument_list|)
decl_stmt|;
comment|// next execution is set by remote
name|schq
operator|.
name|setNextExecution
argument_list|(
name|schq2
operator|.
name|getNextExecution
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|schq2
argument_list|,
name|schq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidInputException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateWithInvalidSchedule
parameter_list|()
throws|throws
name|Exception
block|{
name|ScheduledQuery
name|schq
init|=
name|createScheduledQuery
argument_list|(
name|createKey
argument_list|(
literal|"createInvalidSch"
argument_list|,
literal|"c1"
argument_list|)
argument_list|)
decl_stmt|;
name|schq
operator|.
name|setSchedule
argument_list|(
literal|"asd asd"
argument_list|)
expr_stmt|;
name|ScheduledQueryMaintenanceRequest
name|r
init|=
operator|new
name|ScheduledQueryMaintenanceRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledQuery
argument_list|(
name|schq
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDuplicateCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|ScheduledQuery
name|schq
init|=
name|createScheduledQuery
argument_list|(
name|createKey
argument_list|(
literal|"duplicate"
argument_list|,
literal|"c1"
argument_list|)
argument_list|)
decl_stmt|;
name|ScheduledQueryMaintenanceRequest
name|r
init|=
operator|new
name|ScheduledQueryMaintenanceRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledQuery
argument_list|(
name|schq
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|ScheduledQuery
name|schq
init|=
name|createScheduledQuery
argument_list|(
name|createKey
argument_list|(
literal|"update"
argument_list|,
literal|"ns1"
argument_list|)
argument_list|)
decl_stmt|;
name|ScheduledQueryMaintenanceRequest
name|r
init|=
operator|new
name|ScheduledQueryMaintenanceRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledQuery
argument_list|(
name|schq
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|ALTER
argument_list|)
expr_stmt|;
name|ScheduledQuery
name|schq2
init|=
name|createScheduledQuery2
argument_list|(
name|createKey
argument_list|(
literal|"update"
argument_list|,
literal|"ns1"
argument_list|)
argument_list|)
decl_stmt|;
name|schq2
operator|.
name|getScheduleKey
argument_list|()
operator|.
name|setClusterNamespace
argument_list|(
literal|"ns1"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledQuery
argument_list|(
name|schq2
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|ScheduledQuery
name|schq3
init|=
name|client
operator|.
name|getScheduledQuery
argument_list|(
operator|new
name|ScheduledQueryKey
argument_list|(
literal|"update"
argument_list|,
literal|"ns1"
argument_list|)
argument_list|)
decl_stmt|;
comment|// next execution is set by remote
name|schq2
operator|.
name|setNextExecution
argument_list|(
name|schq3
operator|.
name|getNextExecution
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|schq2
argument_list|,
name|schq3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNormalDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|ScheduledQuery
name|schq
init|=
name|createScheduledQuery
argument_list|(
name|createKey
argument_list|(
literal|"q1"
argument_list|,
literal|"nsdel"
argument_list|)
argument_list|)
decl_stmt|;
name|ScheduledQueryMaintenanceRequest
name|r
init|=
operator|new
name|ScheduledQueryMaintenanceRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledQuery
argument_list|(
name|schq
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|DROP
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNormalDeleteWithExec
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testCaseNS
init|=
literal|"delwithexec"
decl_stmt|;
comment|// insert
name|ScheduledQuery
name|schq
init|=
name|createScheduledQuery
argument_list|(
name|createKey
argument_list|(
literal|"del2"
argument_list|,
name|testCaseNS
argument_list|)
argument_list|)
decl_stmt|;
name|ScheduledQueryMaintenanceRequest
name|r
init|=
operator|new
name|ScheduledQueryMaintenanceRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledQuery
argument_list|(
name|schq
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// wait 2 sec to have the query exection
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// invoke poll to create a dependent execution
name|ScheduledQueryPollRequest
name|pollRequest
init|=
operator|new
name|ScheduledQueryPollRequest
argument_list|(
name|testCaseNS
argument_list|)
decl_stmt|;
name|client
operator|.
name|scheduledQueryPoll
argument_list|(
name|pollRequest
argument_list|)
expr_stmt|;
comment|// delete scheduled query
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|DROP
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDeleteNonExistent
parameter_list|()
throws|throws
name|Exception
block|{
name|ScheduledQuery
name|schq
init|=
name|createScheduledQuery
argument_list|(
name|createKey
argument_list|(
literal|"nonexistent"
argument_list|,
literal|"nsdel"
argument_list|)
argument_list|)
decl_stmt|;
name|ScheduledQueryMaintenanceRequest
name|r
init|=
operator|new
name|ScheduledQueryMaintenanceRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|DROP
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledQuery
argument_list|(
name|schq
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExclusivePoll
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ObjectStoreTestHook
operator|.
name|instance
operator|=
operator|new
name|ObjectStoreTestHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|scheduledQueryPoll
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
expr_stmt|;
name|ScheduledQuery
name|schq
init|=
name|createScheduledQuery
argument_list|(
operator|new
name|ScheduledQueryKey
argument_list|(
literal|"q1"
argument_list|,
literal|"exclusive"
argument_list|)
argument_list|)
decl_stmt|;
name|ScheduledQueryMaintenanceRequest
name|r
init|=
operator|new
name|ScheduledQueryMaintenanceRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledQuery
argument_list|(
name|schq
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// wait 1 sec for next execution
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|ScheduledQueryPollResponse
argument_list|>
name|f1
init|=
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|AsyncPollCall
argument_list|(
literal|"exclusive"
argument_list|)
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|ScheduledQueryPollResponse
argument_list|>
name|f2
init|=
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|AsyncPollCall
argument_list|(
literal|"exclusive"
argument_list|)
argument_list|)
decl_stmt|;
name|ScheduledQueryPollResponse
name|resp1
init|=
name|f1
operator|.
name|get
argument_list|()
decl_stmt|;
name|ScheduledQueryPollResponse
name|resp2
init|=
name|f2
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resp1
operator|.
name|isSetQuery
argument_list|()
operator|^
name|resp2
operator|.
name|isSetQuery
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|ObjectStoreTestHook
operator|.
name|instance
operator|=
literal|null
expr_stmt|;
block|}
block|}
class|class
name|AsyncPollCall
implements|implements
name|Callable
argument_list|<
name|ScheduledQueryPollResponse
argument_list|>
block|{
specifier|private
name|String
name|ns
decl_stmt|;
name|AsyncPollCall
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|ns
operator|=
name|string
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ScheduledQueryPollResponse
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|IMetaStoreClient
name|client1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|client1
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|ScheduledQueryPollRequest
name|request
init|=
operator|new
name|ScheduledQueryPollRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setClusterNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|ScheduledQueryPollResponse
name|pollResult
init|=
literal|null
decl_stmt|;
name|pollResult
operator|=
name|client1
operator|.
name|scheduledQueryPoll
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|pollResult
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|client1
operator|!=
literal|null
condition|)
block|{
name|client1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPoll
parameter_list|()
throws|throws
name|Exception
block|{
name|ScheduledQuery
name|schq
init|=
name|createScheduledQuery
argument_list|(
operator|new
name|ScheduledQueryKey
argument_list|(
literal|"q1"
argument_list|,
literal|"polltest"
argument_list|)
argument_list|)
decl_stmt|;
name|ScheduledQueryMaintenanceRequest
name|r
init|=
operator|new
name|ScheduledQueryMaintenanceRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledQuery
argument_list|(
name|schq
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|schq
operator|.
name|setScheduleKey
argument_list|(
operator|new
name|ScheduledQueryKey
argument_list|(
literal|"q1"
argument_list|,
literal|"polltestOther"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// disabled queries are not considered
name|schq
operator|.
name|setScheduleKey
argument_list|(
operator|new
name|ScheduledQueryKey
argument_list|(
literal|"q2disabled"
argument_list|,
literal|"polltest"
argument_list|)
argument_list|)
expr_stmt|;
name|schq
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// do some poll requests; and wait for q1's execution
name|ScheduledQueryPollRequest
name|request
init|=
operator|new
name|ScheduledQueryPollRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setClusterNamespace
argument_list|(
literal|"polltest"
argument_list|)
expr_stmt|;
name|ScheduledQueryPollResponse
name|pollResult
init|=
literal|null
decl_stmt|;
comment|// wait for poll to hit
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|pollResult
operator|=
name|client
operator|.
name|scheduledQueryPoll
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|pollResult
operator|.
name|isSetQuery
argument_list|()
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|pollResult
operator|.
name|isSetQuery
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pollResult
operator|.
name|isSetScheduleKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pollResult
operator|.
name|isSetExecutionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// after reading the only scheduled query; there are no more queries to run (for 1 sec)
name|ScheduledQueryPollResponse
name|pollResult2
init|=
name|client
operator|.
name|scheduledQueryPoll
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|pollResult2
operator|.
name|isSetQuery
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|PersistenceManager
name|pm
init|=
name|PersistenceManagerProvider
operator|.
name|getPersistenceManager
argument_list|()
init|)
block|{
name|MScheduledExecution
name|q
init|=
name|pm
operator|.
name|getObjectById
argument_list|(
name|MScheduledExecution
operator|.
name|class
argument_list|,
name|pollResult
operator|.
name|getExecutionId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryState
operator|.
name|INITED
argument_list|,
name|q
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getStartTime
argument_list|()
operator|<=
name|getEpochSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getStartTime
argument_list|()
operator|>=
name|getEpochSeconds
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getEndTime
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getLastUpdateTime
argument_list|()
operator|<=
name|getEpochSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getLastUpdateTime
argument_list|()
operator|>=
name|getEpochSeconds
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// wait 1 sec
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ScheduledQueryProgressInfo
name|info
decl_stmt|;
name|info
operator|=
operator|new
name|ScheduledQueryProgressInfo
argument_list|(
name|pollResult
operator|.
name|getExecutionId
argument_list|()
argument_list|,
name|QueryState
operator|.
name|EXECUTING
argument_list|,
literal|"executor-query-id"
argument_list|)
expr_stmt|;
name|client
operator|.
name|scheduledQueryProgress
argument_list|(
name|info
argument_list|)
expr_stmt|;
try|try
init|(
name|PersistenceManager
name|pm
init|=
name|PersistenceManagerProvider
operator|.
name|getPersistenceManager
argument_list|()
init|)
block|{
name|MScheduledExecution
name|q
init|=
name|pm
operator|.
name|getObjectById
argument_list|(
name|MScheduledExecution
operator|.
name|class
argument_list|,
name|pollResult
operator|.
name|getExecutionId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|QueryState
operator|.
name|EXECUTING
argument_list|,
name|q
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"executor-query-id"
argument_list|,
name|q
operator|.
name|getExecutorQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getLastUpdateTime
argument_list|()
operator|<=
name|getEpochSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getLastUpdateTime
argument_list|()
operator|>=
name|getEpochSeconds
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// wait 1 sec
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|ScheduledQueryProgressInfo
argument_list|(
name|pollResult
operator|.
name|getExecutionId
argument_list|()
argument_list|,
name|QueryState
operator|.
name|ERRORED
argument_list|,
literal|"executor-query-id"
argument_list|)
expr_stmt|;
comment|//    info.set
name|client
operator|.
name|scheduledQueryProgress
argument_list|(
name|info
argument_list|)
expr_stmt|;
try|try
init|(
name|PersistenceManager
name|pm
init|=
name|PersistenceManagerProvider
operator|.
name|getPersistenceManager
argument_list|()
init|)
block|{
name|MScheduledExecution
name|q
init|=
name|pm
operator|.
name|getObjectById
argument_list|(
name|MScheduledExecution
operator|.
name|class
argument_list|,
name|pollResult
operator|.
name|getExecutionId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|QueryState
operator|.
name|ERRORED
argument_list|,
name|q
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"executor-query-id"
argument_list|,
name|q
operator|.
name|getExecutorQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|q
operator|.
name|getLastUpdateTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getEndTime
argument_list|()
operator|<=
name|getEpochSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getEndTime
argument_list|()
operator|>=
name|getEpochSeconds
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// clustername is taken into account; this should be empty
name|request
operator|.
name|setClusterNamespace
argument_list|(
literal|"polltestSomethingElse"
argument_list|)
expr_stmt|;
name|pollResult
operator|=
name|client
operator|.
name|scheduledQueryPoll
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pollResult
operator|.
name|isSetQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|namespace
init|=
literal|"cleanup"
decl_stmt|;
name|ObjectStore
name|objStore
init|=
operator|new
name|ObjectStore
argument_list|()
decl_stmt|;
name|objStore
operator|.
name|setConf
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|objStore
operator|.
name|deleteScheduledExecutions
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ScheduledQuery
name|schq
init|=
name|createScheduledQuery
argument_list|(
operator|new
name|ScheduledQueryKey
argument_list|(
literal|"q1"
argument_list|,
name|namespace
argument_list|)
argument_list|)
decl_stmt|;
name|ScheduledQueryMaintenanceRequest
name|r
init|=
operator|new
name|ScheduledQueryMaintenanceRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledQuery
argument_list|(
name|schq
argument_list|)
expr_stmt|;
name|objStore
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ScheduledQueryPollRequest
name|request
init|=
operator|new
name|ScheduledQueryPollRequest
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|ScheduledQueryPollResponse
name|pollResult
init|=
name|objStore
operator|.
name|scheduledQueryPoll
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// will add q1 as a query being executed
try|try
init|(
name|PersistenceManager
name|pm
init|=
name|PersistenceManagerProvider
operator|.
name|getPersistenceManager
argument_list|()
init|)
block|{
name|MScheduledExecution
name|q
init|=
name|pm
operator|.
name|getObjectById
argument_list|(
name|MScheduledExecution
operator|.
name|class
argument_list|,
name|pollResult
operator|.
name|getExecutionId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|QueryState
operator|.
name|INITED
argument_list|,
name|q
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|objStore
operator|.
name|deleteScheduledExecutions
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
init|(
name|PersistenceManager
name|pm
init|=
name|PersistenceManagerProvider
operator|.
name|getPersistenceManager
argument_list|()
init|)
block|{
try|try
block|{
name|pm
operator|.
name|getObjectById
argument_list|(
name|MScheduledExecution
operator|.
name|class
argument_list|,
name|pollResult
operator|.
name|getExecutionId
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The execution is expected to be deleted at this point..."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDOObjectNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutdatedCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|namespace
init|=
literal|"outdatedcleanup"
decl_stmt|;
name|ObjectStore
name|objStore
init|=
operator|new
name|ObjectStore
argument_list|()
decl_stmt|;
name|objStore
operator|.
name|setConf
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|objStore
operator|.
name|deleteScheduledExecutions
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ScheduledQuery
name|schq
init|=
name|createScheduledQuery
argument_list|(
operator|new
name|ScheduledQueryKey
argument_list|(
literal|"q1"
argument_list|,
name|namespace
argument_list|)
argument_list|)
decl_stmt|;
name|ScheduledQueryMaintenanceRequest
name|r
init|=
operator|new
name|ScheduledQueryMaintenanceRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setType
argument_list|(
name|ScheduledQueryMaintenanceRequestType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledQuery
argument_list|(
name|schq
argument_list|)
expr_stmt|;
name|objStore
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ScheduledQueryPollRequest
name|request
init|=
operator|new
name|ScheduledQueryPollRequest
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|ScheduledQueryPollResponse
name|pollResult
init|=
name|objStore
operator|.
name|scheduledQueryPoll
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// will add q1 as a query being executed
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|objStore
operator|.
name|markScheduledExecutionsTimedOut
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
init|(
name|PersistenceManager
name|pm
init|=
name|PersistenceManagerProvider
operator|.
name|getPersistenceManager
argument_list|()
init|)
block|{
name|MScheduledExecution
name|execution
init|=
name|pm
operator|.
name|getObjectById
argument_list|(
name|MScheduledExecution
operator|.
name|class
argument_list|,
name|pollResult
operator|.
name|getExecutionId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|QueryState
operator|.
name|TIMED_OUT
argument_list|,
name|execution
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getEpochSeconds
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
return|;
block|}
specifier|private
name|ScheduledQuery
name|createScheduledQuery
parameter_list|(
name|ScheduledQueryKey
name|key
parameter_list|)
block|{
name|ScheduledQuery
name|schq
init|=
operator|new
name|ScheduledQuery
argument_list|()
decl_stmt|;
name|schq
operator|.
name|setScheduleKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|schq
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|schq
operator|.
name|setSchedule
argument_list|(
literal|"* * * * * ? *"
argument_list|)
expr_stmt|;
name|schq
operator|.
name|setUser
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|schq
operator|.
name|setQuery
argument_list|(
literal|"select 1"
argument_list|)
expr_stmt|;
return|return
name|schq
return|;
block|}
specifier|private
name|ScheduledQueryKey
name|createKey
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|string
parameter_list|)
block|{
name|ScheduledQueryKey
name|ret
init|=
operator|new
name|ScheduledQueryKey
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setScheduleName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setClusterNamespace
argument_list|(
name|string
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|ScheduledQuery
name|createScheduledQuery2
parameter_list|(
name|ScheduledQueryKey
name|key
parameter_list|)
block|{
name|ScheduledQuery
name|schq
init|=
operator|new
name|ScheduledQuery
argument_list|()
decl_stmt|;
name|schq
operator|.
name|setScheduleKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|schq
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|schq
operator|.
name|setSchedule
argument_list|(
literal|"* * * 22 * ? *"
argument_list|)
expr_stmt|;
name|schq
operator|.
name|setUser
argument_list|(
literal|"user22"
argument_list|)
expr_stmt|;
name|schq
operator|.
name|setQuery
argument_list|(
literal|"select 12"
argument_list|)
expr_stmt|;
return|return
name|schq
return|;
block|}
block|}
end_class

end_unit

