begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartitionProjectionEvaluator
operator|.
name|PartitionFieldNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|PersistenceManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartitionProjectionEvaluator
operator|.
name|CD_PATTERN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartitionProjectionEvaluator
operator|.
name|SD_PATTERN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartitionProjectionEvaluator
operator|.
name|SERDE_PATTERN
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestPartitionProjectionEvaluator
block|{
specifier|private
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fieldNameToColumnName
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"createTime"
argument_list|,
literal|"\"PARTITIONS\""
operator|+
literal|".\"CREATE_TIME\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"lastAccessTime"
argument_list|,
literal|"\"PARTITIONS\""
operator|+
literal|".\"LAST_ACCESS_TIME\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"sd.location"
argument_list|,
literal|"\"SDS\""
operator|+
literal|".\"LOCATION\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"sd.inputFormat"
argument_list|,
literal|"\"SDS\""
operator|+
literal|".\"INPUT_FORMAT\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"sd.outputFormat"
argument_list|,
literal|"\"SDS\""
operator|+
literal|".\"OUTPUT_FORMAT\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"sd.storedAsSubDirectories"
argument_list|,
literal|"\"SDS\""
operator|+
literal|".\"IS_STOREDASSUBDIRECTORIES\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"sd.compressed"
argument_list|,
literal|"\"SDS\""
operator|+
literal|".\"IS_COMPRESSED\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"sd.numBuckets"
argument_list|,
literal|"\"SDS\""
operator|+
literal|".\"NUM_BUCKETS\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"sd.serdeInfo.name"
argument_list|,
literal|"\"SDS\""
operator|+
literal|".\"NAME\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"sd.serdeInfo.serializationLib"
argument_list|,
literal|"\"SDS\""
operator|+
literal|".\"SLIB\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"PART_ID"
argument_list|,
literal|"\"PARTITIONS\""
operator|+
literal|".\"PART_ID\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"SD_ID"
argument_list|,
literal|"\"SDS\""
operator|+
literal|".\"SD_ID\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"SERDE_ID"
argument_list|,
literal|"\"SERDES\""
operator|+
literal|".\"SERDE_ID\""
argument_list|)
decl|.
name|put
argument_list|(
literal|"CD_ID"
argument_list|,
literal|"\"SDS\""
operator|+
literal|".\"CD_ID\""
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|void
name|compareTreeUtil
parameter_list|(
name|PartitionFieldNode
name|expected
parameter_list|,
name|PartitionFieldNode
name|given
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
operator|||
name|given
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expected
operator|==
literal|null
operator|&&
name|given
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Field names should match"
argument_list|,
name|expected
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|given
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"IsLeafNode: Expected "
operator|+
name|expected
operator|+
literal|" "
operator|+
name|expected
operator|.
name|isLeafNode
argument_list|()
operator|+
literal|" Given "
operator|+
name|given
operator|+
literal|" "
operator|+
name|given
operator|.
name|isLeafNode
argument_list|()
argument_list|,
name|expected
operator|.
name|isLeafNode
argument_list|()
argument_list|,
name|given
operator|.
name|isLeafNode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"IsMultivalued: Expected "
operator|+
name|expected
operator|+
literal|" "
operator|+
name|expected
operator|.
name|isMultiValued
argument_list|()
operator|+
literal|" Given "
operator|+
name|given
operator|+
literal|" "
operator|+
name|given
operator|.
name|isMultiValued
argument_list|()
argument_list|,
name|expected
operator|.
name|isMultiValued
argument_list|()
argument_list|,
name|given
operator|.
name|isMultiValued
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PartitionFieldNode
name|child
range|:
name|expected
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"given node "
operator|+
name|given
operator|+
literal|" does not have the child node "
operator|+
name|child
argument_list|,
name|given
operator|.
name|getChildren
argument_list|()
operator|.
name|contains
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PartitionFieldNode
name|giveChild
range|:
name|given
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|.
name|equals
argument_list|(
name|giveChild
argument_list|)
condition|)
block|{
name|compareTreeUtil
argument_list|(
name|child
argument_list|,
name|giveChild
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"More than one copies of node "
operator|+
name|child
operator|+
literal|" found"
argument_list|,
literal|1
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|compare
parameter_list|(
name|Set
argument_list|<
name|PartitionFieldNode
argument_list|>
name|roots
parameter_list|,
name|Set
argument_list|<
name|PartitionFieldNode
argument_list|>
name|giveRoots
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Given roots size does not match with the size of expected number of roots"
argument_list|,
name|roots
operator|.
name|size
argument_list|()
argument_list|,
name|giveRoots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PartitionFieldNode
name|root
range|:
name|roots
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|giveRoots
operator|.
name|contains
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PartitionFieldNode
name|givenRoot
range|:
name|giveRoots
control|)
block|{
if|if
condition|(
name|givenRoot
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|compareTreeUtil
argument_list|(
name|root
argument_list|,
name|givenRoot
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"More than one copies of node found for "
operator|+
name|root
argument_list|,
literal|1
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionFieldTree
parameter_list|()
throws|throws
name|MetaException
block|{
name|PersistenceManager
name|mockPm
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PersistenceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|projectionFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"sd.location"
argument_list|)
expr_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"sd.parameters"
argument_list|)
expr_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"createTime"
argument_list|)
expr_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"sd.serdeInfo.serializationLib"
argument_list|)
expr_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"sd.cols"
argument_list|)
expr_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"parameters"
argument_list|)
expr_stmt|;
name|PartitionProjectionEvaluator
name|projectionEvaluator
init|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|PartitionFieldNode
argument_list|>
name|roots
init|=
name|projectionEvaluator
operator|.
name|getRoots
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|PartitionFieldNode
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|PartitionFieldNode
name|sdNode
init|=
operator|new
name|PartitionFieldNode
argument_list|(
literal|"sd"
argument_list|)
decl_stmt|;
name|sdNode
operator|.
name|addChild
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"sd.location"
argument_list|)
argument_list|)
expr_stmt|;
name|sdNode
operator|.
name|addChild
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"sd.parameters"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionFieldNode
name|sdColsNodes
init|=
operator|new
name|PartitionFieldNode
argument_list|(
literal|"sd.cols"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|sdColsNodes
operator|.
name|addChild
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"sd.cols.name"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|sdColsNodes
operator|.
name|addChild
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"sd.cols.type"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|sdColsNodes
operator|.
name|addChild
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"sd.cols.comment"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|sdNode
operator|.
name|addChild
argument_list|(
name|sdColsNodes
argument_list|)
expr_stmt|;
name|PartitionFieldNode
name|serdeNode
init|=
operator|new
name|PartitionFieldNode
argument_list|(
literal|"sd.serdeInfo"
argument_list|)
decl_stmt|;
name|serdeNode
operator|.
name|addChild
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"sd.serdeInfo.serializationLib"
argument_list|)
argument_list|)
expr_stmt|;
name|sdNode
operator|.
name|addChild
argument_list|(
name|serdeNode
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|sdNode
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"parameters"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"createTime"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"PART_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"SD_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"CD_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"SERDE_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|expected
argument_list|,
name|roots
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProjectionCompaction
parameter_list|()
throws|throws
name|MetaException
block|{
name|PersistenceManager
name|mockPm
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PersistenceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|projectionFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"sd.location"
argument_list|)
expr_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"sd.parameters"
argument_list|)
expr_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"createTime"
argument_list|)
expr_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"sd"
argument_list|)
expr_stmt|;
name|PartitionProjectionEvaluator
name|projectionEvaluator
init|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|PartitionFieldNode
argument_list|>
name|roots
init|=
name|projectionEvaluator
operator|.
name|getRoots
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"sd.location should not contained since it is already included in sd"
argument_list|,
name|roots
operator|.
name|contains
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"sd.location"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"sd.parameters should not contained since it is already included in sd"
argument_list|,
name|roots
operator|.
name|contains
argument_list|(
operator|new
name|PartitionFieldNode
argument_list|(
literal|"sd.parameters"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidProjectFields
parameter_list|()
throws|throws
name|MetaException
block|{
name|PersistenceManager
name|mockPm
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PersistenceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|projectionFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"sd.location"
argument_list|)
expr_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"sd.parameters"
argument_list|)
expr_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"createTime"
argument_list|)
expr_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"sd"
argument_list|)
expr_stmt|;
name|projectionFields
operator|.
name|add
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFind
parameter_list|()
throws|throws
name|MetaException
block|{
name|PersistenceManager
name|mockPm
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PersistenceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|projectionFields
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"sd"
argument_list|,
literal|"createTime"
argument_list|,
literal|"sd.location"
argument_list|,
literal|"parameters"
argument_list|)
decl_stmt|;
name|PartitionProjectionEvaluator
name|projectionEvaluator
init|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|projectionEvaluator
operator|.
name|find
argument_list|(
name|SD_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|projectionFields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"sd"
argument_list|,
literal|"createTime"
argument_list|,
literal|"parameters"
argument_list|)
expr_stmt|;
name|projectionEvaluator
operator|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|projectionEvaluator
operator|.
name|find
argument_list|(
name|SD_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|projectionFields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"createTime"
argument_list|,
literal|"parameters"
argument_list|,
literal|"sd.serdeInfo.serializationLib"
argument_list|)
expr_stmt|;
name|projectionEvaluator
operator|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|projectionEvaluator
operator|.
name|find
argument_list|(
name|SD_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|projectionFields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"createTime"
argument_list|,
literal|"parameters"
argument_list|,
literal|"sd.location"
argument_list|)
expr_stmt|;
name|projectionEvaluator
operator|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|projectionEvaluator
operator|.
name|find
argument_list|(
name|SD_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|projectionFields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"createTime"
argument_list|,
literal|"parameters"
argument_list|,
literal|"sd.location"
argument_list|)
expr_stmt|;
name|projectionEvaluator
operator|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|projectionEvaluator
operator|.
name|find
argument_list|(
name|SERDE_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|projectionFields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"createTime"
argument_list|,
literal|"parameters"
argument_list|,
literal|"sd.serdeInfo.serializationLib"
argument_list|)
expr_stmt|;
name|projectionEvaluator
operator|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|projectionEvaluator
operator|.
name|find
argument_list|(
name|SERDE_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|projectionFields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"createTime"
argument_list|,
literal|"parameters"
argument_list|,
literal|"sd.serdeInfo"
argument_list|)
expr_stmt|;
name|projectionEvaluator
operator|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|projectionEvaluator
operator|.
name|find
argument_list|(
name|SERDE_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|projectionFields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"createTime"
argument_list|,
literal|"parameters"
argument_list|)
expr_stmt|;
name|projectionEvaluator
operator|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|projectionEvaluator
operator|.
name|find
argument_list|(
name|SD_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|projectionFields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"createTime"
argument_list|,
literal|"parameters"
argument_list|,
literal|"sd.cols"
argument_list|)
expr_stmt|;
name|projectionEvaluator
operator|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|projectionEvaluator
operator|.
name|find
argument_list|(
name|CD_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|projectionFields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"createTime"
argument_list|,
literal|"parameters"
argument_list|,
literal|"sd.cols.name"
argument_list|)
expr_stmt|;
name|projectionEvaluator
operator|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|projectionEvaluator
operator|.
name|find
argument_list|(
name|CD_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|projectionFields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"createTime"
argument_list|,
literal|"parameters"
argument_list|,
literal|"sd"
argument_list|,
literal|"sd.location"
argument_list|)
expr_stmt|;
name|projectionEvaluator
operator|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// CD_PATTERN should exist since sd gets expanded to all the child nodes
name|Assert
operator|.
name|assertTrue
argument_list|(
name|projectionEvaluator
operator|.
name|find
argument_list|(
name|CD_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testFindNegative
parameter_list|()
throws|throws
name|MetaException
block|{
name|PersistenceManager
name|mockPm
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PersistenceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|projectionFields
init|=
name|projectionFields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"createTime"
argument_list|,
literal|"parameters"
argument_list|,
literal|"sdxcols"
argument_list|)
decl_stmt|;
name|PartitionProjectionEvaluator
name|projectionEvaluator
init|=
operator|new
name|PartitionProjectionEvaluator
argument_list|(
name|mockPm
argument_list|,
name|fieldNameToColumnName
argument_list|,
name|projectionFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

