begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|CatalogBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|FunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_comment
comment|/**  * Test class for IMetaStoreClient API. Testing the Database related functions.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestDatabases
extends|extends
name|MetaStoreClientTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DATABASE
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|final
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|Database
index|[]
name|testDatabases
init|=
operator|new
name|Database
index|[
literal|4
index|]
decl_stmt|;
specifier|public
name|TestDatabases
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Clean up the databases
for|for
control|(
name|String
name|databaseName
range|:
name|client
operator|.
name|getAllDatabases
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|databaseName
operator|.
name|equals
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
condition|)
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|databaseName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|testDatabases
index|[
literal|0
index|]
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_database_1"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|testDatabases
index|[
literal|1
index|]
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_database_to_find_1"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|testDatabases
index|[
literal|2
index|]
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_database_to_find_2"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|testDatabases
index|[
literal|3
index|]
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_database_hidden_1"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the databases, and reload them from the MetaStore
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDatabases
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|testDatabases
index|[
name|i
index|]
operator|=
name|client
operator|.
name|getDatabase
argument_list|(
name|testDatabases
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// HIVE-19729: Shallow the exceptions based on the discussion in the Jira
block|}
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * This test creates and queries a database and then drops it. Good for testing the happy path.    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateGetDeleteDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|getDatabaseWithAllParametersSet
argument_list|()
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Database
name|createdDatabase
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// The createTime will be set on the server side, so the comparison should skip it
name|database
operator|.
name|setCreateTime
argument_list|(
name|createdDatabase
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing databases"
argument_list|,
name|database
argument_list|,
name|createdDatabase
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The directory should be created"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The directory should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NoSuchObjectException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateDatabaseDefaultValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"dummy"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Database
name|createdDatabase
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Comparing description"
argument_list|,
name|createdDatabase
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing location"
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|createdDatabase
operator|.
name|getName
argument_list|()
operator|+
literal|".db"
argument_list|,
name|createdDatabase
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing parameters"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|createdDatabase
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Comparing privileges"
argument_list|,
name|createdDatabase
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing owner name"
argument_list|,
name|SecurityUtils
operator|.
name|getUser
argument_list|()
argument_list|,
name|createdDatabase
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing owner type"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|createdDatabase
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateDatabaseOwnerName
parameter_list|()
throws|throws
name|Exception
block|{
name|DatabaseBuilder
name|databaseBuilder
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setCatalogName
argument_list|(
literal|"hive"
argument_list|)
operator|.
name|setName
argument_list|(
literal|"dummy"
argument_list|)
operator|.
name|setOwnerName
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Database
name|db
init|=
name|databaseBuilder
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Owner name should be filled"
argument_list|,
name|db
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateDatabaseNullName
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
comment|// Missing class setting field
name|database
operator|.
name|setName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
comment|// Throwing InvalidObjectException would be more appropriate, but we do not change the API
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateDatabaseInvalidName
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
comment|// Invalid character in new database name
name|database
operator|.
name|setName
argument_list|(
literal|"test_database_1;"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateDatabaseEmptyName
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
comment|// Empty new database name
name|database
operator|.
name|setName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
comment|// Throwing InvalidObjectException would be more appropriate, but we do not change the API
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateDatabaseAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
comment|// Already existing database
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultDatabaseData
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default database name"
argument_list|,
literal|"default"
argument_list|,
name|database
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default database description"
argument_list|,
literal|"Default Hive database"
argument_list|,
name|database
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default database location"
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default database parameters"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|database
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default database owner"
argument_list|,
literal|"public"
argument_list|,
name|database
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default database owner type"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|database
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Default database privileges"
argument_list|,
name|database
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"database create time should be set"
argument_list|,
name|database
operator|.
name|isSetCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Database create time should be non-zero"
argument_list|,
name|database
operator|.
name|getCreateTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDatabaseCreateTime
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create db without specifying createtime
name|Database
name|testDb
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_create_time"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
name|client
operator|.
name|getDatabase
argument_list|(
literal|"test_create_time"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Database create time should have been set"
argument_list|,
name|database
operator|.
name|getCreateTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDbCreateTimeOverride
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create db by providing a create time. Should be overridden, create time should
comment|// always be set by metastore
name|Database
name|testDb
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_create_time"
argument_list|)
operator|.
name|setCreateTime
argument_list|(
literal|1
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
name|client
operator|.
name|getDatabase
argument_list|(
literal|"test_create_time"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Database create time should have been set"
argument_list|,
name|database
operator|.
name|getCreateTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Database create time should have been reset by metastore"
argument_list|,
name|database
operator|.
name|getCreateTime
argument_list|()
operator|!=
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDatabaseCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
comment|// Test in upper case
name|Database
name|resultUpper
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing databases"
argument_list|,
name|database
argument_list|,
name|resultUpper
argument_list|)
expr_stmt|;
comment|// Test in mixed case
name|Database
name|resultMix
init|=
name|client
operator|.
name|getDatabase
argument_list|(
literal|"teST_dAtABase_1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing databases"
argument_list|,
name|database
argument_list|,
name|resultMix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetDatabaseNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|getDatabase
argument_list|(
literal|"no_such_database"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetDatabaseNullName
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Missing database name in the query
name|client
operator|.
name|getDatabase
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropDatabaseNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"no_such_database"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropDatabaseNullName
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Missing database in the query
name|client
operator|.
name|dropDatabase
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropDatabaseDefaultDatabase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check if it is possible to drop default database
name|client
operator|.
name|dropDatabase
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
comment|// Test in upper case
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allDatabases
init|=
name|client
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All databases size"
argument_list|,
literal|4
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test in mixed case
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"TesT_DatABaSe_1"
argument_list|)
expr_stmt|;
name|allDatabases
operator|=
name|client
operator|.
name|getAllDatabases
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All databases size"
argument_list|,
literal|4
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseDeleteData
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
operator|+
literal|"/dataFile"
argument_list|)
decl_stmt|;
name|metaStore
operator|.
name|createFile
argument_list|(
name|dataFile
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
comment|// Do not delete the data
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Check that the data still exist
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The data file should still exist"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Recreate the database
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The data file should still exist"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the data
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Check that the data is removed
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The data file should not exist"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropDatabaseIgnoreUnknownFalse
parameter_list|()
throws|throws
name|Exception
block|{
comment|// No such database
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"no_such_database"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseIgnoreUnknownTrue
parameter_list|()
throws|throws
name|Exception
block|{
comment|// No such database
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"no_such_database"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropDatabaseWithTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|testTable
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseWithTableCascade
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|testTable
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The directory should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropDatabaseWithFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Function
name|testFunction
init|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test_function"
argument_list|)
operator|.
name|setClass
argument_list|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFUpper"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseWithFunctionCascade
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Function
name|testFunction
init|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test_function"
argument_list|)
operator|.
name|setClass
argument_list|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFUpper"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The directory should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAllDatabases
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|allDatabases
init|=
name|client
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All databases size"
argument_list|,
literal|5
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Database
name|database
range|:
name|testDatabases
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Checking database names"
argument_list|,
name|allDatabases
operator|.
name|contains
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Checnking that default database is returned"
argument_list|,
name|allDatabases
operator|.
name|contains
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Drop one database, see what remains
name|client
operator|.
name|dropDatabase
argument_list|(
name|testDatabases
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|allDatabases
operator|=
name|client
operator|.
name|getAllDatabases
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All databases size"
argument_list|,
literal|4
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Database
name|database
range|:
name|testDatabases
control|)
block|{
if|if
condition|(
operator|!
name|database
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|testDatabases
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Checking database names"
argument_list|,
name|allDatabases
operator|.
name|contains
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Checnking that default database is returned"
argument_list|,
name|allDatabases
operator|.
name|contains
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Checking that the deleted database is not returned"
argument_list|,
name|allDatabases
operator|.
name|contains
argument_list|(
name|testDatabases
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDatabases
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Find databases which name contains _to_find_
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*_to_find_*"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found databases size"
argument_list|,
literal|2
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_to_find_1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_to_find_2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Find databases which name contains _to_find_ or _hidden_
name|databases
operator|=
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*_to_find_*|*_hidden_*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found databases size"
argument_list|,
literal|3
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_to_find_1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_to_find_2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_hidden_1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Look for databases but do not find any
name|databases
operator|=
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*_not_such_database_*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No such databases size"
argument_list|,
literal|0
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Look for databases without pattern
name|databases
operator|=
name|client
operator|.
name|getDatabases
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Search databases without pattern size"
argument_list|,
literal|5
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDatabasesCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check case insensitive search
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*_tO_FiND*"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found databases size"
argument_list|,
literal|2
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_to_find_1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_to_find_2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|originalDatabase
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Database
name|newDatabase
init|=
operator|new
name|DatabaseBuilder
argument_list|()
comment|// The database name is not changed during alter
operator|.
name|setName
argument_list|(
name|originalDatabase
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|GROUP
argument_list|)
operator|.
name|setOwnerName
argument_list|(
literal|"owner2"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/database_location_2"
argument_list|)
operator|.
name|setDescription
argument_list|(
literal|"dummy description 2"
argument_list|)
operator|.
name|addParam
argument_list|(
literal|"param_key_1"
argument_list|,
literal|"param_value_1_2"
argument_list|)
operator|.
name|addParam
argument_list|(
literal|"param_key_2_3"
argument_list|,
literal|"param_value_2_3"
argument_list|)
operator|.
name|setCreateTime
argument_list|(
name|originalDatabase
operator|.
name|getCreateTime
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|alterDatabase
argument_list|(
name|originalDatabase
operator|.
name|getName
argument_list|()
argument_list|,
name|newDatabase
argument_list|)
expr_stmt|;
name|Database
name|alteredDatabase
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|newDatabase
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing Databases"
argument_list|,
name|newDatabase
argument_list|,
name|alteredDatabase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterDatabaseNotNullableFields
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|getDatabaseWithAllParametersSet
argument_list|()
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Database
name|originalDatabase
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Database
name|newDatabase
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|newDatabase
operator|.
name|setName
argument_list|(
literal|"new_name"
argument_list|)
expr_stmt|;
name|newDatabase
operator|.
name|setCatalogName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|alterDatabase
argument_list|(
name|originalDatabase
operator|.
name|getName
argument_list|()
argument_list|,
name|newDatabase
argument_list|)
expr_stmt|;
comment|// The name should not be changed, so reload the db with the original name
name|Database
name|alteredDatabase
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|originalDatabase
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Database name should not change"
argument_list|,
name|originalDatabase
operator|.
name|getName
argument_list|()
argument_list|,
name|alteredDatabase
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Database description should not change"
argument_list|,
name|originalDatabase
operator|.
name|getDescription
argument_list|()
argument_list|,
name|alteredDatabase
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Database location should not change"
argument_list|,
name|originalDatabase
operator|.
name|getLocationUri
argument_list|()
argument_list|,
name|alteredDatabase
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Database parameters should be empty"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|alteredDatabase
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Database owner should be empty"
argument_list|,
name|alteredDatabase
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Database owner type should not change"
argument_list|,
name|originalDatabase
operator|.
name|getOwnerType
argument_list|()
argument_list|,
name|alteredDatabase
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Database privileges should be empty"
argument_list|,
name|alteredDatabase
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterDatabaseNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|newDatabase
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_database_altered"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|alterDatabase
argument_list|(
literal|"no_such_database"
argument_list|,
name|newDatabase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterDatabaseCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|originalDatabase
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Database
name|newDatabase
init|=
name|originalDatabase
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newDatabase
operator|.
name|setDescription
argument_list|(
literal|"Altered database"
argument_list|)
expr_stmt|;
comment|// Test in upper case
name|client
operator|.
name|alterDatabase
argument_list|(
name|originalDatabase
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|newDatabase
argument_list|)
expr_stmt|;
name|Database
name|alteredDatabase
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|newDatabase
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing databases"
argument_list|,
name|newDatabase
argument_list|,
name|alteredDatabase
argument_list|)
expr_stmt|;
comment|// Test in mixed case
name|originalDatabase
operator|=
name|testDatabases
index|[
literal|2
index|]
expr_stmt|;
name|newDatabase
operator|=
name|originalDatabase
operator|.
name|deepCopy
argument_list|()
expr_stmt|;
name|newDatabase
operator|.
name|setDescription
argument_list|(
literal|"Altered database 2"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alterDatabase
argument_list|(
literal|"TeST_daTAbaSe_TO_FiNd_2"
argument_list|,
name|newDatabase
argument_list|)
expr_stmt|;
name|alteredDatabase
operator|=
name|client
operator|.
name|getDatabase
argument_list|(
name|newDatabase
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing databases"
argument_list|,
name|newDatabase
argument_list|,
name|alteredDatabase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|databasesInCatalogs
parameter_list|()
throws|throws
name|TException
throws|,
name|URISyntaxException
block|{
name|String
name|catName
init|=
literal|"mycatalog"
decl_stmt|;
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|catName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
name|String
index|[]
name|dbNames
init|=
block|{
literal|"db1"
block|,
literal|"db9"
block|}
decl_stmt|;
name|Database
index|[]
name|dbs
init|=
operator|new
name|Database
index|[
literal|2
index|]
decl_stmt|;
comment|// For this one don't specify a location to make sure it gets put in the catalog directory
name|dbs
index|[
literal|0
index|]
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// For the second one, explicitly set a location to make sure it ends up in the specified place.
name|String
name|db1Location
init|=
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|dbNames
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|dbs
index|[
literal|1
index|]
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbNames
index|[
literal|1
index|]
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|db1Location
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|Database
name|fetched
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|catName
argument_list|,
name|dbNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|expectedLocation
init|=
operator|new
name|File
argument_list|(
name|cat
operator|.
name|getLocationUri
argument_list|()
argument_list|,
name|dbNames
index|[
literal|0
index|]
operator|+
literal|".db"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedLocation
argument_list|,
name|fetched
operator|.
name|getLocationUri
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|String
name|db0Location
init|=
operator|new
name|URI
argument_list|(
name|fetched
operator|.
name|getLocationUri
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|db0Location
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
name|dir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getDatabase
argument_list|(
name|catName
argument_list|,
name|dbNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|db1Location
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|fetched
operator|.
name|getLocationUri
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|fetched
operator|.
name|getLocationUri
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
name|dir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fetchedDbs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fetchedDbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetchedDbs
operator|.
name|contains
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
name|fetchedDbs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fetchedDbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetchedDbs
operator|.
name|contains
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Intentionally using the deprecated method to make sure it returns correct results.
name|fetchedDbs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fetchedDbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetchedDbs
operator|.
name|contains
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|fetchedDbs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getDatabases
argument_list|(
name|catName
argument_list|,
literal|"d*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fetchedDbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetchedDbs
operator|.
name|contains
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
name|fetchedDbs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getDatabases
argument_list|(
literal|"d*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetchedDbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetchedDbs
operator|.
name|contains
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Intentionally using the deprecated method to make sure it returns correct results.
name|fetchedDbs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getDatabases
argument_list|(
literal|"d*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetchedDbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetchedDbs
operator|.
name|contains
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|fetchedDbs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getDatabases
argument_list|(
name|catName
argument_list|,
literal|"*1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetchedDbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetchedDbs
operator|.
name|contains
argument_list|(
name|dbNames
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fetchedDbs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*9"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fetchedDbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Intentionally using the deprecated method to make sure it returns correct results.
name|fetchedDbs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*9"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fetchedDbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fetchedDbs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getDatabases
argument_list|(
name|catName
argument_list|,
literal|"*x"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fetchedDbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that dropping database from wrong catalog fails
try|try
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbNames
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
comment|// Check that dropping database from wrong catalog fails
try|try
block|{
comment|// Intentionally using deprecated method
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbNames
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
comment|// Drop them from the proper catalog
name|client
operator|.
name|dropDatabase
argument_list|(
name|catName
argument_list|,
name|dbNames
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|File
argument_list|(
name|db0Location
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|catName
argument_list|,
name|dbNames
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|File
argument_list|(
name|db1Location
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|fetchedDbs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetchedDbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|createDatabaseInNonExistentCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"doomed"
argument_list|)
operator|.
name|setCatalogName
argument_list|(
literal|"nosuch"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|fetchDatabaseInNonExistentCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|client
operator|.
name|getDatabase
argument_list|(
literal|"nosuch"
argument_list|,
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|dropDatabaseInNonExistentCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"nosuch"
argument_list|,
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Database
name|getDatabaseWithAllParametersSet
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"dummy"
argument_list|)
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|)
operator|.
name|setOwnerName
argument_list|(
literal|"owner"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/database_location"
argument_list|)
operator|.
name|setDescription
argument_list|(
literal|"dummy description"
argument_list|)
operator|.
name|addParam
argument_list|(
literal|"param_key_1"
argument_list|,
literal|"param_value_1"
argument_list|)
operator|.
name|addParam
argument_list|(
literal|"param_key_2"
argument_list|,
literal|"param_value_2"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

