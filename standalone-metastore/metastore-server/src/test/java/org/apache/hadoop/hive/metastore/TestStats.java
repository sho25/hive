begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BinaryColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DateColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DoubleColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SetPartitionsStatsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StringColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|CatalogBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestStats
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStats
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NO_CAT
init|=
literal|"DO_NOT_USE_A_CATALOG!"
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|MetaException
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|AGGREGATE_STATS_CACHE_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Get new client
name|client
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|TException
block|{
comment|// Drop any left over catalogs
name|List
argument_list|<
name|String
argument_list|>
name|catalogs
init|=
name|client
operator|.
name|getCatalogs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|catName
range|:
name|catalogs
control|)
block|{
if|if
condition|(
operator|!
name|catName
operator|.
name|equalsIgnoreCase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
condition|)
block|{
comment|// First drop any databases in catalog
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|client
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|db
range|:
name|databases
control|)
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|catName
argument_list|,
name|db
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropCatalog
argument_list|(
name|catName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|client
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|db
range|:
name|databases
control|)
block|{
if|if
condition|(
operator|!
name|db
operator|.
name|equalsIgnoreCase
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
condition|)
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|catName
argument_list|,
name|db
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|buildAllColumns
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|Column
index|[]
name|cols
init|=
block|{
operator|new
name|BinaryColumn
argument_list|()
block|,
operator|new
name|BooleanColumn
argument_list|()
block|,
operator|new
name|DateColumn
argument_list|()
block|,
operator|new
name|DoubleColumn
argument_list|()
block|,
operator|new
name|LongColumn
argument_list|()
block|,
operator|new
name|StringColumn
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|Column
name|c
range|:
name|cols
control|)
name|colMap
operator|.
name|put
argument_list|(
name|c
operator|.
name|colName
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|colMap
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createMetadata
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partKey
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
parameter_list|)
throws|throws
name|TException
block|{
if|if
condition|(
operator|!
name|DEFAULT_CATALOG_NAME
operator|.
name|equals
argument_list|(
name|catName
argument_list|)
operator|&&
operator|!
name|NO_CAT
operator|.
name|equals
argument_list|(
name|catName
argument_list|)
condition|)
block|{
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|catName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
block|}
name|Database
name|db
decl_stmt|;
if|if
condition|(
operator|!
name|DEFAULT_DATABASE_NAME
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
name|DatabaseBuilder
name|dbBuilder
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|NO_CAT
operator|.
name|equals
argument_list|(
name|catName
argument_list|)
condition|)
name|dbBuilder
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|db
operator|=
name|dbBuilder
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|db
operator|=
name|client
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
block|}
name|TableBuilder
name|tb
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|Column
name|col
range|:
name|colMap
operator|.
name|values
argument_list|()
control|)
name|tb
operator|.
name|addCol
argument_list|(
name|col
operator|.
name|colName
argument_list|,
name|col
operator|.
name|colType
argument_list|)
expr_stmt|;
if|if
condition|(
name|partKey
operator|!=
literal|null
condition|)
block|{
assert|assert
name|partVals
operator|!=
literal|null
operator|&&
operator|!
name|partVals
operator|.
name|isEmpty
argument_list|()
operator|:
literal|"Must provide partition values for partitioned table"
assert|;
name|tb
operator|.
name|addPartCol
argument_list|(
name|partKey
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
name|tb
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|partKey
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|partVal
range|:
name|partVals
control|)
block|{
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
operator|.
name|addValue
argument_list|(
name|partVal
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
name|SetPartitionsStatsRequest
name|rqst
init|=
operator|new
name|SetPartitionsStatsRequest
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|partKey
operator|==
literal|null
condition|)
block|{
name|rqst
operator|.
name|addToColStats
argument_list|(
name|buildStatsForOneTableOrPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|colMap
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|partVal
range|:
name|partVals
control|)
block|{
name|String
name|partName
init|=
name|partKey
operator|+
literal|"="
operator|+
name|partVal
decl_stmt|;
name|rqst
operator|.
name|addToColStats
argument_list|(
name|buildStatsForOneTableOrPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|colMap
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|partName
argument_list|)
expr_stmt|;
block|}
block|}
name|client
operator|.
name|setPartitionColumnStatistics
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
return|return
name|partNames
return|;
block|}
specifier|private
name|ColumnStatistics
name|buildStatsForOneTableOrPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|Collection
argument_list|<
name|Column
argument_list|>
name|cols
parameter_list|)
block|{
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
name|partName
operator|==
literal|null
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|NO_CAT
operator|.
name|equals
argument_list|(
name|catName
argument_list|)
condition|)
name|desc
operator|.
name|setCatName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
if|if
condition|(
name|partName
operator|!=
literal|null
condition|)
name|desc
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|objs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Column
name|col
range|:
name|cols
control|)
name|objs
operator|.
name|add
argument_list|(
name|col
operator|.
name|generate
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ColumnStatistics
argument_list|(
name|desc
argument_list|,
name|objs
argument_list|)
return|;
block|}
specifier|private
name|void
name|dropStats
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|TException
block|{
for|for
control|(
name|String
name|colName
range|:
name|colNames
control|)
block|{
if|if
condition|(
name|partName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|NO_CAT
operator|.
name|equals
argument_list|(
name|catName
argument_list|)
condition|)
name|client
operator|.
name|deleteTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colName
argument_list|)
expr_stmt|;
else|else
name|client
operator|.
name|deleteTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|NO_CAT
operator|.
name|equals
argument_list|(
name|catName
argument_list|)
condition|)
name|client
operator|.
name|deletePartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|colName
argument_list|)
expr_stmt|;
else|else
name|client
operator|.
name|deletePartitionColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|compareStatsForTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
parameter_list|)
throws|throws
name|TException
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|objs
init|=
name|catName
operator|.
name|equals
argument_list|(
name|NO_CAT
argument_list|)
condition|?
name|client
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|colMap
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
else|:
name|client
operator|.
name|getTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|colMap
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|compareStatsForOneTableOrPartition
argument_list|(
name|objs
argument_list|,
literal|0
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
comment|// Test the statistics obtained through getTable call.
name|Table
name|table
init|=
name|catName
operator|.
name|equals
argument_list|(
name|NO_CAT
argument_list|)
condition|?
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
else|:
name|client
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|table
operator|.
name|isSetColStats
argument_list|()
argument_list|)
expr_stmt|;
name|compareStatsForOneTableOrPartition
argument_list|(
name|table
operator|.
name|getColStats
argument_list|()
operator|.
name|getStatsObj
argument_list|()
argument_list|,
literal|0
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
comment|// Test that getTable call doesn't get the statistics when not explicitly requested.
name|table
operator|=
name|catName
operator|.
name|equals
argument_list|(
name|NO_CAT
argument_list|)
condition|?
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
else|:
name|client
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|table
operator|.
name|isSetColStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compareStatsForPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
parameter_list|)
throws|throws
name|TException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|partObjs
init|=
name|catName
operator|.
name|equals
argument_list|(
name|NO_CAT
argument_list|)
condition|?
name|client
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|colMap
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
else|:
name|client
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|colMap
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|compareStatsForOneTableOrPartition
argument_list|(
name|partObjs
operator|.
name|get
argument_list|(
name|partNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|i
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
block|}
name|AggrStats
name|aggr
init|=
name|catName
operator|.
name|equals
argument_list|(
name|NO_CAT
argument_list|)
condition|?
name|client
operator|.
name|getAggrColStatsFor
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|colMap
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|partNames
argument_list|)
else|:
name|client
operator|.
name|getAggrColStatsFor
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|colMap
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|partNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partNames
operator|.
name|size
argument_list|()
argument_list|,
name|aggr
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colMap
operator|.
name|size
argument_list|()
argument_list|,
name|aggr
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|aggr
operator|.
name|getColStats
argument_list|()
operator|.
name|forEach
argument_list|(
name|cso
lambda|->
name|colMap
operator|.
name|get
argument_list|(
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
operator|.
name|compareAggr
argument_list|(
name|cso
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test column stats obtained through getPartitions call
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|partName
init|=
name|partNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|catName
operator|.
name|equals
argument_list|(
name|NO_CAT
argument_list|)
condition|?
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partName
argument_list|)
argument_list|,
literal|true
argument_list|)
else|:
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partName
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Partition
name|partition
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|compareStatsForOneTableOrPartition
argument_list|(
name|partition
operator|.
name|getColStats
argument_list|()
operator|.
name|getStatsObj
argument_list|()
argument_list|,
name|i
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
comment|// Also test that we do not get statistics when not requested
name|partitions
operator|=
name|catName
operator|.
name|equals
argument_list|(
name|NO_CAT
argument_list|)
condition|?
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partName
argument_list|)
argument_list|,
literal|true
argument_list|)
else|:
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partName
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|partition
operator|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|partition
operator|.
name|isSetColStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|compareStatsForOneTableOrPartition
parameter_list|(
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|objs
parameter_list|,
specifier|final
name|int
name|partOffset
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
parameter_list|)
throws|throws
name|TException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|objs
operator|.
name|size
argument_list|()
argument_list|,
name|colMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|objs
operator|.
name|forEach
argument_list|(
name|cso
lambda|->
name|colMap
operator|.
name|get
argument_list|(
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|cso
argument_list|,
name|partOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tableInHiveCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"db_table_stats"
decl_stmt|;
name|String
name|tableName
init|=
literal|"table_in_default_db_stats"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|createMetadata
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
name|compareStatsForTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
name|dropStats
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|colMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"HIVE-19509: Disable tests that are failing continuously"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|partitionedTableInHiveCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"db_part_stats"
decl_stmt|;
name|String
name|tableName
init|=
literal|"partitioned_table_in_default_db_stats"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|createMetadata
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|"pk"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a1"
argument_list|,
literal|"a2"
argument_list|,
literal|"a3"
argument_list|)
argument_list|,
name|colMap
argument_list|)
decl_stmt|;
name|compareStatsForPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|dropStats
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|colMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|tableOtherCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|catName
init|=
literal|"cat_table_stats"
decl_stmt|;
name|String
name|dbName
init|=
literal|"other_cat_db_table_stats"
decl_stmt|;
name|String
name|tableName
init|=
literal|"table_in_default_db_stats"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|createMetadata
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
name|compareStatsForTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
name|dropStats
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|colMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"HIVE-19509: Disable tests that are failing continuously"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|partitionedTableOtherCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|catName
init|=
literal|"cat_table_stats"
decl_stmt|;
name|String
name|dbName
init|=
literal|"other_cat_db_part_stats"
decl_stmt|;
name|String
name|tableName
init|=
literal|"partitioned_table_in_default_db_stats"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|createMetadata
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|"pk"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a1"
argument_list|,
literal|"a2"
argument_list|,
literal|"a3"
argument_list|)
argument_list|,
name|colMap
argument_list|)
decl_stmt|;
name|compareStatsForPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|dropStats
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|colMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|tableDeprecatedCalls
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"old_db_table_stats"
decl_stmt|;
name|String
name|tableName
init|=
literal|"table_in_default_db_stats"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|createMetadata
argument_list|(
name|NO_CAT
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
name|compareStatsForTable
argument_list|(
name|NO_CAT
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
name|dropStats
argument_list|(
name|NO_CAT
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|colMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"HIVE-19509: Disable tests that are failing continuously"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|partitionedTableDeprecatedCalls
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"old_db_part_stats"
decl_stmt|;
name|String
name|tableName
init|=
literal|"partitioned_table_in_default_db_stats"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|createMetadata
argument_list|(
name|NO_CAT
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|"pk"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a1"
argument_list|,
literal|"a2"
argument_list|,
literal|"a3"
argument_list|)
argument_list|,
name|colMap
argument_list|)
decl_stmt|;
name|compareStatsForPartitions
argument_list|(
name|NO_CAT
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|dropStats
argument_list|(
name|NO_CAT
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|colMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|abstract
class|class
name|Column
block|{
specifier|final
name|String
name|colName
decl_stmt|;
specifier|final
name|String
name|colType
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|maxLens
decl_stmt|,
name|numNulls
decl_stmt|,
name|numDvs
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|avgLens
decl_stmt|;
specifier|public
name|Column
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|colType
parameter_list|)
block|{
name|this
operator|.
name|colName
operator|=
name|colName
expr_stmt|;
name|this
operator|.
name|colType
operator|=
name|colType
expr_stmt|;
name|maxLens
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|numNulls
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|avgLens
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|numDvs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|abstract
name|ColumnStatisticsObj
name|generate
parameter_list|()
function_decl|;
specifier|abstract
name|void
name|compare
parameter_list|(
name|ColumnStatisticsData
name|colstats
parameter_list|,
name|int
name|offset
parameter_list|)
function_decl|;
name|void
name|compare
parameter_list|(
name|ColumnStatisticsObj
name|obj
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|compareCommon
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|obj
operator|.
name|getStatsData
argument_list|()
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
specifier|abstract
name|void
name|compareAggr
parameter_list|(
name|ColumnStatisticsObj
name|obj
parameter_list|)
function_decl|;
name|void
name|compareCommon
parameter_list|(
name|ColumnStatisticsObj
name|obj
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colName
argument_list|,
name|obj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colType
argument_list|,
name|obj
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|compareCommon
parameter_list|(
name|FieldSchema
name|col
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colName
argument_list|,
name|col
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|colType
argument_list|,
name|col
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|genMaxLen
parameter_list|()
block|{
return|return
name|genPositiveLong
argument_list|(
name|maxLens
argument_list|)
return|;
block|}
name|long
name|getMaxLen
parameter_list|()
block|{
return|return
name|maxLong
argument_list|(
name|maxLens
argument_list|)
return|;
block|}
name|long
name|genNumNulls
parameter_list|()
block|{
return|return
name|genPositiveLong
argument_list|(
name|numNulls
argument_list|)
return|;
block|}
name|long
name|genNumDvs
parameter_list|()
block|{
return|return
name|genPositiveLong
argument_list|(
name|numDvs
argument_list|)
return|;
block|}
name|long
name|getNumNulls
parameter_list|()
block|{
return|return
name|sumLong
argument_list|(
name|numNulls
argument_list|)
return|;
block|}
name|long
name|getNumDvs
parameter_list|()
block|{
return|return
name|maxLong
argument_list|(
name|numDvs
argument_list|)
return|;
block|}
name|double
name|genAvgLens
parameter_list|()
block|{
return|return
name|genDouble
argument_list|(
name|avgLens
argument_list|)
return|;
block|}
name|double
name|getAvgLen
parameter_list|()
block|{
return|return
name|maxDouble
argument_list|(
name|avgLens
argument_list|)
return|;
block|}
specifier|protected
name|long
name|genNegativeLong
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|addTo
parameter_list|)
block|{
name|long
name|val
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|>
literal|0
condition|)
name|val
operator|*=
operator|-
literal|1
expr_stmt|;
name|addTo
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
specifier|protected
name|long
name|genPositiveLong
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|addTo
parameter_list|)
block|{
name|long
name|val
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|val
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|val
argument_list|)
operator|+
literal|1
expr_stmt|;
comment|// make sure it isn't 0
name|addTo
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
specifier|protected
name|long
name|maxLong
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|maxOf
parameter_list|)
block|{
name|long
name|max
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|long
name|maybe
range|:
name|maxOf
control|)
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|maybe
argument_list|)
expr_stmt|;
return|return
name|max
return|;
block|}
specifier|protected
name|long
name|sumLong
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|sumOf
parameter_list|)
block|{
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|element
range|:
name|sumOf
control|)
name|sum
operator|+=
name|element
expr_stmt|;
return|return
name|sum
return|;
block|}
specifier|protected
name|double
name|genDouble
parameter_list|(
name|List
argument_list|<
name|Double
argument_list|>
name|addTo
parameter_list|)
block|{
name|double
name|val
init|=
name|rand
operator|.
name|nextDouble
argument_list|()
operator|*
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|addTo
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
specifier|protected
name|double
name|maxDouble
parameter_list|(
name|List
argument_list|<
name|Double
argument_list|>
name|maxOf
parameter_list|)
block|{
name|double
name|max
init|=
name|Double
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|double
name|maybe
range|:
name|maxOf
control|)
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|maybe
argument_list|)
expr_stmt|;
return|return
name|max
return|;
block|}
block|}
specifier|private
class|class
name|BinaryColumn
extends|extends
name|Column
block|{
specifier|public
name|BinaryColumn
parameter_list|()
block|{
name|super
argument_list|(
literal|"bincol"
argument_list|,
name|ColumnType
operator|.
name|BINARY_TYPE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|ColumnStatisticsObj
name|generate
parameter_list|()
block|{
name|BinaryColumnStatsData
name|binData
init|=
operator|new
name|BinaryColumnStatsData
argument_list|(
name|genMaxLen
argument_list|()
argument_list|,
name|genAvgLens
argument_list|()
argument_list|,
name|genNumNulls
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBinaryStats
argument_list|(
name|binData
argument_list|)
expr_stmt|;
return|return
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colName
argument_list|,
name|colType
argument_list|,
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|compare
parameter_list|(
name|ColumnStatisticsData
name|colstats
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"binary max length"
argument_list|,
name|maxLens
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"binary min length"
argument_list|,
name|avgLens
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|colstats
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"binary num nulls"
argument_list|,
name|numNulls
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|compareAggr
parameter_list|(
name|ColumnStatisticsObj
name|obj
parameter_list|)
block|{
name|compareCommon
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr binary max length"
argument_list|,
name|getMaxLen
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr binary min length"
argument_list|,
name|getAvgLen
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr binary num nulls"
argument_list|,
name|getNumNulls
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|BooleanColumn
extends|extends
name|Column
block|{
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|numTrues
decl_stmt|,
name|numFalses
decl_stmt|;
specifier|public
name|BooleanColumn
parameter_list|()
block|{
name|super
argument_list|(
literal|"boolcol"
argument_list|,
name|ColumnType
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
expr_stmt|;
name|numTrues
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|numFalses
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|ColumnStatisticsObj
name|generate
parameter_list|()
block|{
name|BooleanColumnStatsData
name|boolData
init|=
operator|new
name|BooleanColumnStatsData
argument_list|(
name|genNumTrues
argument_list|()
argument_list|,
name|genNumFalses
argument_list|()
argument_list|,
name|genNumNulls
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
name|boolData
argument_list|)
expr_stmt|;
return|return
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colName
argument_list|,
name|colType
argument_list|,
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|compare
parameter_list|(
name|ColumnStatisticsData
name|colstats
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"boolean num trues"
argument_list|,
name|numTrues
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"boolean num falses"
argument_list|,
name|numFalses
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"boolean num nulls"
argument_list|,
name|numNulls
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|compareAggr
parameter_list|(
name|ColumnStatisticsObj
name|obj
parameter_list|)
block|{
name|compareCommon
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr boolean num trues"
argument_list|,
name|getNumTrues
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr boolean num falses"
argument_list|,
name|getNumFalses
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr boolean num nulls"
argument_list|,
name|getNumNulls
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|genNumTrues
parameter_list|()
block|{
return|return
name|genPositiveLong
argument_list|(
name|numTrues
argument_list|)
return|;
block|}
specifier|private
name|long
name|genNumFalses
parameter_list|()
block|{
return|return
name|genPositiveLong
argument_list|(
name|numFalses
argument_list|)
return|;
block|}
specifier|private
name|long
name|getNumTrues
parameter_list|()
block|{
return|return
name|sumLong
argument_list|(
name|numTrues
argument_list|)
return|;
block|}
specifier|private
name|long
name|getNumFalses
parameter_list|()
block|{
return|return
name|sumLong
argument_list|(
name|numFalses
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|DateColumn
extends|extends
name|Column
block|{
specifier|private
name|List
argument_list|<
name|Date
argument_list|>
name|lowVals
decl_stmt|,
name|highVals
decl_stmt|;
specifier|public
name|DateColumn
parameter_list|()
block|{
name|super
argument_list|(
literal|"datecol"
argument_list|,
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|)
expr_stmt|;
name|lowVals
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|highVals
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|ColumnStatisticsObj
name|generate
parameter_list|()
block|{
name|DateColumnStatsData
name|dateData
init|=
operator|new
name|DateColumnStatsData
argument_list|(
name|genNumNulls
argument_list|()
argument_list|,
name|genNumDvs
argument_list|()
argument_list|)
decl_stmt|;
name|dateData
operator|.
name|setLowValue
argument_list|(
name|genLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|dateData
operator|.
name|setHighValue
argument_list|(
name|genHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setDateStats
argument_list|(
name|dateData
argument_list|)
expr_stmt|;
return|return
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colName
argument_list|,
name|colType
argument_list|,
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|compare
parameter_list|(
name|ColumnStatisticsData
name|colstats
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"date num nulls"
argument_list|,
name|numNulls
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getDateStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"date num dvs"
argument_list|,
name|numDvs
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getDateStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"date low val"
argument_list|,
name|lowVals
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|colstats
operator|.
name|getDateStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"date high val"
argument_list|,
name|highVals
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|colstats
operator|.
name|getDateStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|compareAggr
parameter_list|(
name|ColumnStatisticsObj
name|obj
parameter_list|)
block|{
name|compareCommon
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr date num nulls"
argument_list|,
name|getNumNulls
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr date num dvs"
argument_list|,
name|getNumDvs
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr date low val"
argument_list|,
name|getLowVal
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr date high val"
argument_list|,
name|getHighVal
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Date
name|genLowValue
parameter_list|()
block|{
name|Date
name|d
init|=
operator|new
name|Date
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|*
operator|-
literal|1
argument_list|)
decl_stmt|;
name|lowVals
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
specifier|private
name|Date
name|genHighValue
parameter_list|()
block|{
name|Date
name|d
init|=
operator|new
name|Date
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
argument_list|)
decl_stmt|;
name|highVals
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
specifier|private
name|Date
name|getLowVal
parameter_list|()
block|{
name|long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|Date
name|d
range|:
name|lowVals
control|)
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|d
operator|.
name|getDaysSinceEpoch
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Date
argument_list|(
name|min
argument_list|)
return|;
block|}
specifier|private
name|Date
name|getHighVal
parameter_list|()
block|{
name|long
name|max
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|Date
name|d
range|:
name|highVals
control|)
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|d
operator|.
name|getDaysSinceEpoch
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Date
argument_list|(
name|max
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|DoubleColumn
extends|extends
name|Column
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|lowVals
decl_stmt|,
name|highVals
decl_stmt|;
specifier|public
name|DoubleColumn
parameter_list|()
block|{
name|super
argument_list|(
literal|"doublecol"
argument_list|,
name|ColumnType
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
expr_stmt|;
name|lowVals
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|highVals
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|ColumnStatisticsObj
name|generate
parameter_list|()
block|{
name|DoubleColumnStatsData
name|doubleData
init|=
operator|new
name|DoubleColumnStatsData
argument_list|(
name|genNumNulls
argument_list|()
argument_list|,
name|genNumDvs
argument_list|()
argument_list|)
decl_stmt|;
name|doubleData
operator|.
name|setLowValue
argument_list|(
name|genLowVal
argument_list|()
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setHighValue
argument_list|(
name|genHighVal
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setDoubleStats
argument_list|(
name|doubleData
argument_list|)
expr_stmt|;
return|return
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colName
argument_list|,
name|colType
argument_list|,
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|compare
parameter_list|(
name|ColumnStatisticsData
name|colstats
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"double num nulls"
argument_list|,
name|numNulls
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"double num dvs"
argument_list|,
name|numDvs
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"double low val"
argument_list|,
name|lowVals
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|colstats
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"double high val"
argument_list|,
name|highVals
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|colstats
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|compareAggr
parameter_list|(
name|ColumnStatisticsObj
name|obj
parameter_list|)
block|{
name|compareCommon
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr double num nulls"
argument_list|,
name|getNumNulls
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr double num dvs"
argument_list|,
name|getNumDvs
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr double low val"
argument_list|,
name|getLowVal
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr double high val"
argument_list|,
name|getHighVal
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
specifier|private
name|double
name|genLowVal
parameter_list|()
block|{
return|return
name|genDouble
argument_list|(
name|lowVals
argument_list|)
return|;
block|}
specifier|private
name|double
name|genHighVal
parameter_list|()
block|{
return|return
name|genDouble
argument_list|(
name|highVals
argument_list|)
return|;
block|}
specifier|private
name|double
name|getLowVal
parameter_list|()
block|{
name|double
name|min
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|Double
name|d
range|:
name|lowVals
control|)
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|min
return|;
block|}
specifier|private
name|double
name|getHighVal
parameter_list|()
block|{
return|return
name|maxDouble
argument_list|(
name|highVals
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|LongColumn
extends|extends
name|Column
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|lowVals
decl_stmt|,
name|highVals
decl_stmt|;
specifier|public
name|LongColumn
parameter_list|()
block|{
name|super
argument_list|(
literal|"bigintcol"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|lowVals
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|highVals
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|ColumnStatisticsObj
name|generate
parameter_list|()
block|{
name|LongColumnStatsData
name|longData
init|=
operator|new
name|LongColumnStatsData
argument_list|(
name|genNumNulls
argument_list|()
argument_list|,
name|genNumDvs
argument_list|()
argument_list|)
decl_stmt|;
name|longData
operator|.
name|setLowValue
argument_list|(
name|genLowVal
argument_list|()
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setHighValue
argument_list|(
name|genHighVal
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|longData
argument_list|)
expr_stmt|;
return|return
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colName
argument_list|,
name|colType
argument_list|,
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|compare
parameter_list|(
name|ColumnStatisticsData
name|colstats
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"long num nulls"
argument_list|,
name|numNulls
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"long num dvs"
argument_list|,
name|numDvs
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"long low val"
argument_list|,
operator|(
name|long
operator|)
name|lowVals
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|colstats
operator|.
name|getLongStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"long high val"
argument_list|,
operator|(
name|long
operator|)
name|highVals
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|colstats
operator|.
name|getLongStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|compareAggr
parameter_list|(
name|ColumnStatisticsObj
name|obj
parameter_list|)
block|{
name|compareCommon
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr long num nulls"
argument_list|,
name|getNumNulls
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr long num dvs"
argument_list|,
name|getNumDvs
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr long low val"
argument_list|,
name|getLowVal
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr long high val"
argument_list|,
name|getHighVal
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|genLowVal
parameter_list|()
block|{
return|return
name|genNegativeLong
argument_list|(
name|lowVals
argument_list|)
return|;
block|}
specifier|private
name|long
name|genHighVal
parameter_list|()
block|{
return|return
name|genPositiveLong
argument_list|(
name|highVals
argument_list|)
return|;
block|}
specifier|private
name|long
name|getLowVal
parameter_list|()
block|{
name|long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|Long
name|val
range|:
name|lowVals
control|)
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|min
return|;
block|}
specifier|private
name|long
name|getHighVal
parameter_list|()
block|{
return|return
name|maxLong
argument_list|(
name|highVals
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|StringColumn
extends|extends
name|Column
block|{
specifier|public
name|StringColumn
parameter_list|()
block|{
name|super
argument_list|(
literal|"strcol"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|ColumnStatisticsObj
name|generate
parameter_list|()
block|{
name|StringColumnStatsData
name|strData
init|=
operator|new
name|StringColumnStatsData
argument_list|(
name|genMaxLen
argument_list|()
argument_list|,
name|genAvgLens
argument_list|()
argument_list|,
name|genNumNulls
argument_list|()
argument_list|,
name|genNumDvs
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setStringStats
argument_list|(
name|strData
argument_list|)
expr_stmt|;
return|return
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colName
argument_list|,
name|colType
argument_list|,
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|compare
parameter_list|(
name|ColumnStatisticsData
name|colstats
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"str num nulls"
argument_list|,
name|numNulls
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"str num dvs"
argument_list|,
name|numDvs
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|colstats
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"str low val"
argument_list|,
operator|(
name|long
operator|)
name|maxLens
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|colstats
operator|.
name|getStringStats
argument_list|()
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"str high val"
argument_list|,
name|avgLens
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|colstats
operator|.
name|getStringStats
argument_list|()
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|compareAggr
parameter_list|(
name|ColumnStatisticsObj
name|obj
parameter_list|)
block|{
name|compareCommon
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr str num nulls"
argument_list|,
name|getNumNulls
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr str num dvs"
argument_list|,
name|getNumDvs
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr str low val"
argument_list|,
name|getMaxLen
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aggr str high val"
argument_list|,
name|getAvgLen
argument_list|()
argument_list|,
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

