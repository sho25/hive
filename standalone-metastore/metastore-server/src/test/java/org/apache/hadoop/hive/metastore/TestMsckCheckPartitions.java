begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetastoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMsckCheckPartitions
block|{
comment|/**    * Test counts the number of listStatus calls in the msck core method of    * listing sub-directories. This is important to check since it unnecessary    * listStatus calls could cause performance degradation in remote filesystems    * like S3. The test creates a mock FileSystem object and a mock directory structure    * to simulate a table which has 2 partition keys and 2 partition values at each level.    * In the end it counts how many times the listStatus is called on the mock filesystem    * and confirm its equal to the current theoretical value.    *    * @throws IOException    * @throws MetastoreException    */
annotation|@
name|Test
specifier|public
name|void
name|testNumberOfListStatusCalls
parameter_list|()
throws|throws
name|IOException
throws|,
name|MetastoreException
block|{
name|LocalFileSystem
name|mockFs
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|LocalFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|tableLocation
init|=
operator|new
name|Path
argument_list|(
literal|"mock:///tmp/testTable"
argument_list|)
decl_stmt|;
name|Path
name|countryUS
init|=
operator|new
name|Path
argument_list|(
name|tableLocation
argument_list|,
literal|"country=US"
argument_list|)
decl_stmt|;
name|Path
name|countryIND
init|=
operator|new
name|Path
argument_list|(
name|tableLocation
argument_list|,
literal|"country=IND"
argument_list|)
decl_stmt|;
name|Path
name|cityPA
init|=
operator|new
name|Path
argument_list|(
name|countryUS
argument_list|,
literal|"city=PA"
argument_list|)
decl_stmt|;
name|Path
name|citySF
init|=
operator|new
name|Path
argument_list|(
name|countryUS
argument_list|,
literal|"city=SF"
argument_list|)
decl_stmt|;
name|Path
name|cityBOM
init|=
operator|new
name|Path
argument_list|(
name|countryIND
argument_list|,
literal|"city=BOM"
argument_list|)
decl_stmt|;
name|Path
name|cityDEL
init|=
operator|new
name|Path
argument_list|(
name|countryIND
argument_list|,
literal|"city=DEL"
argument_list|)
decl_stmt|;
name|Path
name|paData
init|=
operator|new
name|Path
argument_list|(
name|cityPA
argument_list|,
literal|"datafile"
argument_list|)
decl_stmt|;
name|Path
name|sfData
init|=
operator|new
name|Path
argument_list|(
name|citySF
argument_list|,
literal|"datafile"
argument_list|)
decl_stmt|;
name|Path
name|bomData
init|=
operator|new
name|Path
argument_list|(
name|cityBOM
argument_list|,
literal|"datafile"
argument_list|)
decl_stmt|;
name|Path
name|delData
init|=
operator|new
name|Path
argument_list|(
name|cityDEL
argument_list|,
literal|"datafile"
argument_list|)
decl_stmt|;
comment|//level 1 listing
name|FileStatus
index|[]
name|allCountries
init|=
name|getMockFileStatus
argument_list|(
name|countryUS
argument_list|,
name|countryIND
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|tableLocation
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allCountries
argument_list|)
expr_stmt|;
comment|//level 2 listing
name|FileStatus
index|[]
name|filesInUS
init|=
name|getMockFileStatus
argument_list|(
name|cityPA
argument_list|,
name|citySF
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|countryUS
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|filesInUS
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|filesInInd
init|=
name|getMockFileStatus
argument_list|(
name|cityBOM
argument_list|,
name|cityDEL
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|countryIND
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|filesInInd
argument_list|)
expr_stmt|;
comment|//level 3 listing
name|FileStatus
index|[]
name|paFiles
init|=
name|getMockFileStatus
argument_list|(
name|paData
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|cityPA
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|paFiles
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|sfFiles
init|=
name|getMockFileStatus
argument_list|(
name|sfData
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|citySF
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sfFiles
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|bomFiles
init|=
name|getMockFileStatus
argument_list|(
name|bomData
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|cityBOM
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|bomFiles
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|delFiles
init|=
name|getMockFileStatus
argument_list|(
name|delData
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|cityDEL
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|delFiles
argument_list|)
expr_stmt|;
name|HiveMetaStoreChecker
name|checker
init|=
operator|new
name|HiveMetaStoreChecker
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|IMetaStoreClient
operator|.
name|class
argument_list|)
argument_list|,
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|checker
operator|.
name|checkPartitionDirs
argument_list|(
name|executorService
argument_list|,
name|tableLocation
argument_list|,
name|result
argument_list|,
name|mockFs
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"country"
argument_list|,
literal|"city"
argument_list|)
argument_list|)
expr_stmt|;
comment|// if there are n partition columns, then number of times listStatus should be called
comment|// must be equal
comment|// to (numDirsAtLevel1) + (numDirsAtLevel2) + ... + (numDirAtLeveln-1)
comment|// in this case it should 1 (table level) + 2 (US, IND)
name|verify
argument_list|(
name|mockFs
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|listStatus
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|PathFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"msck should have found 4 unknown partitions"
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FileStatus
index|[]
name|getMockFileStatus
parameter_list|(
name|Path
modifier|...
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|result
init|=
operator|new
name|FileStatus
index|[
name|paths
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|paths
control|)
block|{
name|result
index|[
name|i
operator|++
index|]
operator|=
name|createMockFileStatus
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|FileStatus
name|createMockFileStatus
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|FileStatus
name|mock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"datafile"
argument_list|)
condition|)
block|{
name|when
argument_list|(
name|mock
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|when
argument_list|(
name|mock
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|mock
return|;
block|}
block|}
end_class

end_unit

