begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|schematool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Testing SchemaToolTaskDrop.  */
end_comment

begin_class
specifier|public
class|class
name|TestSchemaToolTaskDrop
block|{
specifier|private
name|SchemaToolTaskDrop
name|uut
decl_stmt|;
specifier|private
name|Statement
name|stmtMock
decl_stmt|;
specifier|private
specifier|final
name|InputStream
name|stdin
init|=
name|System
operator|.
name|in
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|uut
operator|=
operator|new
name|SchemaToolTaskDrop
argument_list|()
expr_stmt|;
name|uut
operator|.
name|schemaTool
operator|=
name|mock
argument_list|(
name|MetastoreSchemaTool
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setIn
argument_list|(
name|stdin
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|mockPromptWith
parameter_list|(
name|String
name|answer
parameter_list|)
block|{
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
name|answer
operator|+
literal|"\n"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|setIn
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpTwoDatabases
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connMock
init|=
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
decl_stmt|;
name|stmtMock
operator|=
name|mock
argument_list|(
name|Statement
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Return two databases: `mydb` and `default`
name|ResultSet
name|databasesResult
init|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|databasesResult
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|databasesResult
operator|.
name|getString
argument_list|(
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"mydb"
argument_list|,
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
comment|// Return two tables: `table1` and `table2`
name|ResultSet
name|tablesResult
init|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tablesResult
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tablesResult
operator|.
name|getString
argument_list|(
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"table1"
argument_list|,
literal|"table2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|stmtMock
operator|.
name|executeQuery
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|databasesResult
argument_list|,
name|tablesResult
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connMock
operator|.
name|createStatement
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stmtMock
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|uut
operator|.
name|schemaTool
operator|.
name|getConnectionToMetastore
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExecutePromptYes
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpTwoDatabases
argument_list|()
expr_stmt|;
name|mockPromptWith
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|uut
operator|.
name|execute
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|stmtMock
argument_list|)
operator|.
name|execute
argument_list|(
literal|"DROP DATABASE `mydb` CASCADE"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|stmtMock
argument_list|)
operator|.
name|execute
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"DROP TABLE `%s`.`table1`"
argument_list|,
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|stmtMock
argument_list|)
operator|.
name|execute
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"DROP TABLE `%s`.`table2`"
argument_list|,
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|stmtMock
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExecutePromptNo
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpTwoDatabases
argument_list|()
expr_stmt|;
name|mockPromptWith
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
name|uut
operator|.
name|execute
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|stmtMock
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExecuteDryRun
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpTwoDatabases
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|uut
operator|.
name|schemaTool
operator|.
name|isDryRun
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|uut
operator|.
name|execute
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|stmtMock
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExecuteWithYes
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpTwoDatabases
argument_list|()
expr_stmt|;
name|uut
operator|.
name|yes
operator|=
literal|true
expr_stmt|;
name|uut
operator|.
name|execute
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|stmtMock
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

