begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRemoteHiveMetaStoreCustomAuth
extends|extends
name|TestRemoteHiveMetaStore
block|{
specifier|private
specifier|static
name|String
name|correctUser
init|=
literal|"correct_user"
decl_stmt|;
specifier|private
specifier|static
name|String
name|correctPassword
init|=
literal|"correct_passwd"
decl_stmt|;
specifier|private
specifier|static
name|String
name|wrongPassword
init|=
literal|"wrong_password"
decl_stmt|;
specifier|private
specifier|static
name|String
name|wrongUser
init|=
literal|"wrong_user"
decl_stmt|;
specifier|private
specifier|static
name|String
name|testDataDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|TestRemoteHiveMetaStoreCustomAuth
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestDir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTests
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|testDataDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|initConf
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|THRIFT_METASTORE_AUTHENTICATION
argument_list|,
literal|"CUSTOM"
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_CUSTOM_AUTHENTICATION_CLASS
argument_list|,
literal|"org.apache.hadoop.hive.metastore.TestRemoteHiveMetaStoreCustomAuth$SimpleAuthenticationProviderImpl"
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|EXECUTE_SET_UGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|createTestDir
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|testDataDir
argument_list|)
operator|.
name|mkdirs
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create "
operator|+
name|testDataDir
argument_list|)
throw|;
block|}
block|}
comment|// The function creates a JCEKS file with given userName as key and passWord as alias and
comment|// returns its provider path.
specifier|private
name|String
name|createCredFile
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|passWord
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
literal|"hms_auth_"
operator|+
name|userName
operator|+
literal|"_"
operator|+
name|passWord
operator|+
literal|"."
operator|+
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
decl_stmt|;
name|String
name|credUrl
init|=
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|testDataDir
operator|+
name|File
operator|.
name|separator
operator|+
name|fileName
decl_stmt|;
name|Configuration
name|credConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|credConf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|credUrl
argument_list|)
expr_stmt|;
name|CredentialProvider
name|provider
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|credConf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|userName
argument_list|,
name|passWord
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|credUrl
return|;
block|}
annotation|@
name|Override
specifier|protected
name|HiveMetaStoreClient
name|createClient
parameter_list|()
throws|throws
name|Exception
block|{
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|THRIFT_URIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|port
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_CLIENT_AUTH_MODE
argument_list|,
literal|"PLAIN"
argument_list|)
expr_stmt|;
comment|// Trying to log in using correct username but wrong password should fail
name|String
name|credsCUWP
init|=
name|createCredFile
argument_list|(
name|correctUser
argument_list|,
name|wrongPassword
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|credsCUWP
argument_list|)
expr_stmt|;
name|String
name|exceptionMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_CLIENT_PLAIN_USERNAME
argument_list|,
name|correctUser
argument_list|)
expr_stmt|;
name|HiveMetaStoreClient
name|tmpClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|exceptionMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|exceptionMessage
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exceptionMessage
operator|.
name|contains
argument_list|(
literal|"Error validating the login"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Trying to log in with a user whose credentials do not exist in the given file should fail.
name|exceptionMessage
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_CLIENT_PLAIN_USERNAME
argument_list|,
name|wrongUser
argument_list|)
expr_stmt|;
name|HiveMetaStoreClient
name|tmpClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|exceptionMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|exceptionMessage
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exceptionMessage
operator|.
name|contains
argument_list|(
literal|"No password found for user"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Trying to login with a use who does not exist but whose password is found in credential
comment|// file should fail. It doesn't matter what the password is since the user doesn't exist
name|exceptionMessage
operator|=
literal|null
expr_stmt|;
name|String
name|credsWUWP
init|=
name|createCredFile
argument_list|(
name|wrongUser
argument_list|,
name|wrongPassword
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|credsWUWP
argument_list|)
expr_stmt|;
try|try
block|{
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_CLIENT_PLAIN_USERNAME
argument_list|,
name|wrongUser
argument_list|)
expr_stmt|;
name|HiveMetaStoreClient
name|tmpClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|exceptionMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|exceptionMessage
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exceptionMessage
operator|.
name|contains
argument_list|(
literal|"Error validating the login"
argument_list|)
argument_list|)
expr_stmt|;
comment|// correct_user and correct_password creds file
name|String
name|credsCUCP
init|=
name|createCredFile
argument_list|(
name|correctUser
argument_list|,
name|correctPassword
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|credsCUCP
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_CLIENT_PLAIN_USERNAME
argument_list|,
name|correctUser
argument_list|)
expr_stmt|;
return|return
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|SimpleAuthenticationProviderImpl
implements|implements
name|MetaStorePasswdAuthenticationProvider
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|SimpleAuthenticationProviderImpl
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
name|userMap
operator|.
name|put
argument_list|(
name|correctUser
argument_list|,
name|correctPassword
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|Authenticate
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|AuthenticationException
block|{
if|if
condition|(
operator|!
name|userMap
operator|.
name|containsKey
argument_list|(
name|user
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Invalid user : "
operator|+
name|user
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|userMap
operator|.
name|get
argument_list|(
name|user
argument_list|)
operator|.
name|equals
argument_list|(
name|password
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Invalid passwd : "
operator|+
name|password
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

