begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ndv
operator|.
name|hll
operator|.
name|HyperLogLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Deadline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BinaryColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Decimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|utils
operator|.
name|DecimalUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|DateColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|DecimalColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|DoubleColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|LongColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|StringColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_comment
comment|/**  * Unit tests for CachedStore  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCachedStore
block|{
comment|// cs_db1
name|Database
name|db1
decl_stmt|;
comment|// cs_db2
name|Database
name|db2
decl_stmt|;
comment|// cs_db1_unptntbl1
name|Table
name|db1Utbl1
decl_stmt|;
comment|// cs_db1_ptntbl1
name|Table
name|db1Ptbl1
decl_stmt|;
comment|// cs_db2_unptntbl1
name|Table
name|db2Utbl1
decl_stmt|;
comment|// cs_db2_ptntbl1
name|Table
name|db2Ptbl1
decl_stmt|;
comment|// Partitions for cs_db1_ptntbl1 (a/1, a/2 ... e/4, e/5)
name|List
argument_list|<
name|Partition
argument_list|>
name|db1Ptbl1Ptns
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db1Ptbl1PtnNames
decl_stmt|;
comment|// Partitions for cs_db2_ptntbl1 (a/1, a/2 ... e/4, e/5)
name|List
argument_list|<
name|Partition
argument_list|>
name|db2Ptbl1Ptns
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Ptbl1PtnNames
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Deadline
operator|.
name|registerIfNot
argument_list|(
literal|10000000
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|new
name|ObjectStore
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Create the 'hive' catalog
name|HiveMetaStore
operator|.
name|HMSHandler
operator|.
name|createDefaultCatalog
argument_list|(
name|objectStore
argument_list|,
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create 2 database objects
name|db1
operator|=
name|createDatabaseObject
argument_list|(
literal|"cs_db1"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db1
argument_list|)
expr_stmt|;
name|db2
operator|=
name|createDatabaseObject
argument_list|(
literal|"cs_db2"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db2
argument_list|)
expr_stmt|;
comment|// For each database object, create one partitioned and one unpartitioned table
name|db1Utbl1
operator|=
name|createUnpartitionedTableObject
argument_list|(
name|db1
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|db1Utbl1
argument_list|)
expr_stmt|;
name|db1Ptbl1
operator|=
name|createPartitionedTableObject
argument_list|(
name|db1
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|db1Ptbl1
argument_list|)
expr_stmt|;
name|db2Utbl1
operator|=
name|createUnpartitionedTableObject
argument_list|(
name|db2
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|db2Utbl1
argument_list|)
expr_stmt|;
name|db2Ptbl1
operator|=
name|createPartitionedTableObject
argument_list|(
name|db2
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|db2Ptbl1
argument_list|)
expr_stmt|;
comment|// Create partitions for cs_db1's partitioned table
name|db1Ptbl1Ptns
operator|=
name|createPartitionObjects
argument_list|(
name|db1Ptbl1
argument_list|)
operator|.
name|getPartitions
argument_list|()
expr_stmt|;
name|db1Ptbl1PtnNames
operator|=
name|createPartitionObjects
argument_list|(
name|db1Ptbl1
argument_list|)
operator|.
name|getPartitionNames
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|addPartitions
argument_list|(
name|db1Ptbl1
operator|.
name|getCatName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
name|db1Ptbl1Ptns
argument_list|)
expr_stmt|;
comment|// Create partitions for cs_db2's partitioned table
name|db2Ptbl1Ptns
operator|=
name|createPartitionObjects
argument_list|(
name|db2Ptbl1
argument_list|)
operator|.
name|getPartitions
argument_list|()
expr_stmt|;
name|db2Ptbl1PtnNames
operator|=
name|createPartitionObjects
argument_list|(
name|db2Ptbl1
argument_list|)
operator|.
name|getPartitionNames
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|addPartitions
argument_list|(
name|db2Ptbl1
operator|.
name|getCatName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
name|db2Ptbl1Ptns
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|new
name|ObjectStore
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
name|db1Ptbl1PtnNames
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
name|db2Ptbl1PtnNames
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**********************************************************************************************    * Methods that test CachedStore    *********************************************************************************************/
annotation|@
name|Test
specifier|public
name|void
name|testPrewarm
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allDatabases
init|=
name|cachedStore
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allDatabases
operator|.
name|contains
argument_list|(
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allDatabases
operator|.
name|contains
argument_list|(
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db1Tables
operator|.
name|contains
argument_list|(
name|db1Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db1Tables
operator|.
name|contains
argument_list|(
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Tables
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db2Tables
operator|.
name|contains
argument_list|(
name|db2Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db2Tables
operator|.
name|contains
argument_list|(
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// cs_db1_ptntbl1
name|List
argument_list|<
name|Partition
argument_list|>
name|db1Ptbl1Partitions
init|=
name|cachedStore
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|db1Ptbl1Partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|db1Ptbl1PartitionsOS
init|=
name|objectStore
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db1Ptbl1Partitions
operator|.
name|containsAll
argument_list|(
name|db1Ptbl1PartitionsOS
argument_list|)
argument_list|)
expr_stmt|;
comment|// cs_db2_ptntbl1
name|List
argument_list|<
name|Partition
argument_list|>
name|db2Ptbl1Partitions
init|=
name|cachedStore
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|db2Ptbl1Partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|db2Ptbl1PartitionsOS
init|=
name|objectStore
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db2Ptbl1Partitions
operator|.
name|containsAll
argument_list|(
name|db2Ptbl1PartitionsOS
argument_list|)
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrewarmBlackList
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
comment|// Don't cache tables from hive.cs_db2
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHED_OBJECTS_BLACKLIST
argument_list|,
literal|"hive.cs_db2.*"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|CachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
comment|// cachedStore.getAllTables falls back to objectStore when whitelist/blacklist is set
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Tables
init|=
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrewarmWhiteList
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
comment|// Only cache tables from hive.cs_db1
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHED_OBJECTS_WHITELIST
argument_list|,
literal|"hive.cs_db1.*"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|CachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
comment|// cachedStore.getAllTables falls back to objectStore when whitelist/blacklist is set
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Tables
init|=
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|//@Test
comment|// Note: the 44Kb approximation has been determined based on trial/error.
comment|// If this starts failing on different env, might need another look.
specifier|public
name|void
name|testPrewarmMemoryEstimation
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"44Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|CachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Tables
init|=
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
comment|// Drop basedb1's unpartitioned table
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// Drop a partitions of basedb1's partitioned table
name|objectStore
operator|.
name|dropPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
name|db1Ptbl1PtnNames
argument_list|)
expr_stmt|;
comment|// Update SharedCache
name|updateCache
argument_list|(
name|cachedStore
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allDatabases
init|=
name|cachedStore
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allDatabases
operator|.
name|contains
argument_list|(
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allDatabases
operator|.
name|contains
argument_list|(
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// cs_db1_ptntbl1
name|List
argument_list|<
name|String
argument_list|>
name|db1Tbls
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|db1Tbls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db1Tbls
operator|.
name|contains
argument_list|(
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|db1Ptns
init|=
name|cachedStore
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db1Ptns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// cs_db2_ptntbl1
name|List
argument_list|<
name|String
argument_list|>
name|db2Tbls
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db2Tbls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db2Tbls
operator|.
name|contains
argument_list|(
name|db2Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db2Tbls
operator|.
name|contains
argument_list|(
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|db2Ptns
init|=
name|cachedStore
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|db2Ptns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|db2PtnsOS
init|=
name|objectStore
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db2Ptns
operator|.
name|containsAll
argument_list|(
name|db2PtnsOS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a new unpartitioned table under basedb1
name|Table
name|db1Utbl2
init|=
name|createUnpartitionedTableObject
argument_list|(
name|db1
argument_list|)
decl_stmt|;
name|db1Utbl2
operator|.
name|setTableName
argument_list|(
name|db1
operator|.
name|getName
argument_list|()
operator|+
literal|"_unptntbl2"
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|db1Utbl2
argument_list|)
expr_stmt|;
comment|// Add a new partition to db1PartitionedTable
comment|// Create partitions for cs_db1's partitioned table
name|db1Ptbl1Ptns
operator|=
name|createPartitionObjects
argument_list|(
name|db1Ptbl1
argument_list|)
operator|.
name|getPartitions
argument_list|()
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|addPartition
argument_list|(
name|db1Ptbl1Ptns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|addPartition
argument_list|(
name|db1Ptbl1Ptns
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|addPartition
argument_list|(
name|db1Ptbl1Ptns
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|addPartition
argument_list|(
name|db1Ptbl1Ptns
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|addPartition
argument_list|(
name|db1Ptbl1Ptns
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|cachedStore
argument_list|)
expr_stmt|;
name|allDatabases
operator|=
name|cachedStore
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allDatabases
operator|.
name|contains
argument_list|(
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allDatabases
operator|.
name|contains
argument_list|(
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|db1Tbls
operator|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tbls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db1Tbls
operator|.
name|contains
argument_list|(
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db1Tbls
operator|.
name|contains
argument_list|(
name|db1Utbl2
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|db2Tbls
operator|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db2Tbls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db2Tbls
operator|.
name|contains
argument_list|(
name|db2Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db2Tbls
operator|.
name|contains
argument_list|(
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// cs_db1_ptntbl1
name|db1Ptns
operator|=
name|cachedStore
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|db1Ptns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// cs_db2_ptntbl1
name|db2Ptns
operator|=
name|cachedStore
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|db2Ptns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|db2PtnsOS
operator|=
name|objectStore
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|db2Ptns
operator|.
name|containsAll
argument_list|(
name|db2PtnsOS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clean up
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl2
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateAndGetDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Add a db via ObjectStore
name|String
name|dbName
init|=
literal|"testCreateAndGetDatabase"
decl_stmt|;
name|String
name|dbOwner
init|=
literal|"user1"
decl_stmt|;
name|Database
name|db
init|=
name|createDatabaseObject
argument_list|(
name|dbName
argument_list|,
name|dbOwner
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
comment|// Read database via CachedStore
name|Database
name|dbRead
init|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allDatabases
init|=
name|cachedStore
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add another db via CachedStore
name|String
name|dbName1
init|=
literal|"testCreateAndGetDatabase1"
decl_stmt|;
name|Database
name|localDb1
init|=
name|createDatabaseObject
argument_list|(
name|dbName1
argument_list|,
name|dbOwner
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|createDatabase
argument_list|(
name|localDb1
argument_list|)
expr_stmt|;
name|localDb1
operator|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName1
argument_list|)
expr_stmt|;
comment|// Read db via ObjectStore
name|dbRead
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|localDb1
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
name|allDatabases
operator|=
name|cachedStore
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clean up
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName1
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Add a db via ObjectStore
name|String
name|dbName
init|=
literal|"testDropDatabase"
decl_stmt|;
name|String
name|dbOwner
init|=
literal|"user1"
decl_stmt|;
name|Database
name|db
init|=
name|createDatabaseObject
argument_list|(
name|dbName
argument_list|,
name|dbOwner
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
comment|// Read database via CachedStore
name|Database
name|dbRead
init|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allDatabases
init|=
name|cachedStore
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Drop db via CachedStore
name|cachedStore
operator|.
name|dropDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
comment|// Read via ObjectStore
name|allDatabases
operator|=
name|objectStore
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create another db via CachedStore and drop via ObjectStore
name|String
name|dbName1
init|=
literal|"testDropDatabase1"
decl_stmt|;
name|Database
name|localDb1
init|=
name|createDatabaseObject
argument_list|(
name|dbName1
argument_list|,
name|dbOwner
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|createDatabase
argument_list|(
name|localDb1
argument_list|)
expr_stmt|;
name|localDb1
operator|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName1
argument_list|)
expr_stmt|;
comment|// Read db via ObjectStore
name|dbRead
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|localDb1
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
name|allDatabases
operator|=
name|cachedStore
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName1
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|cachedStore
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|cachedStore
argument_list|)
expr_stmt|;
name|allDatabases
operator|=
name|cachedStore
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
comment|// Read database via CachedStore
name|List
argument_list|<
name|String
argument_list|>
name|allDatabases
init|=
name|cachedStore
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Alter the db via CachedStore (can only alter owner or parameters)
name|String
name|dbOwner
init|=
literal|"user2"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|db1
argument_list|)
decl_stmt|;
name|db
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|db1
operator|.
name|getName
argument_list|()
decl_stmt|;
name|cachedStore
operator|.
name|alterDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
comment|// Read db via ObjectStore
name|Database
name|dbRead
init|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
comment|// Alter db via ObjectStore
name|dbOwner
operator|=
literal|"user3"
expr_stmt|;
name|db
operator|=
operator|new
name|Database
argument_list|(
name|db1
argument_list|)
expr_stmt|;
name|db
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|alterDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|cachedStore
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|cachedStore
argument_list|)
expr_stmt|;
comment|// Read db via CachedStore
name|dbRead
operator|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dbRead
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateAndGetTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
comment|// Read database via CachedStore
name|List
argument_list|<
name|String
argument_list|>
name|allDatabases
init|=
name|cachedStore
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Tables
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a new table to db1 via CachedStore
comment|// Create a new unpartitioned table under db1
name|Table
name|db1Utbl2
init|=
name|createUnpartitionedTableObject
argument_list|(
name|db1
argument_list|)
decl_stmt|;
name|db1Utbl2
operator|.
name|setTableName
argument_list|(
name|db1
operator|.
name|getName
argument_list|()
operator|+
literal|"_unptntbl2"
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|createTable
argument_list|(
name|db1Utbl2
argument_list|)
expr_stmt|;
name|db1Tables
operator|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|db1Utbl2
operator|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl2
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tblRead
init|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl2
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl2
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db1Utbl2
argument_list|,
name|tblRead
argument_list|)
expr_stmt|;
comment|// Create a new unpartitioned table under basedb2 via ObjectStore
name|Table
name|db2Utbl2
init|=
name|createUnpartitionedTableObject
argument_list|(
name|db2
argument_list|)
decl_stmt|;
name|db2Utbl2
operator|.
name|setTableName
argument_list|(
name|db2
operator|.
name|getName
argument_list|()
operator|+
literal|"_unptntbl2"
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|db2Utbl2
argument_list|)
expr_stmt|;
name|db2Utbl2
operator|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl2
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|cachedStore
argument_list|)
expr_stmt|;
name|db2Tables
operator|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tblRead
operator|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl2
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db2Utbl2
argument_list|,
name|tblRead
argument_list|)
expr_stmt|;
comment|// Clean up
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl2
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|db1Utbl2
operator|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl2
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl2
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Note: the 44Kb approximation has been determined based on trial/error.
comment|// If this starts failing on different env, might need another look.
specifier|public
name|void
name|testGetAllTablesPrewarmMemoryLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"44Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|CachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Tables
init|=
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The CachedStore call should fall back to ObjectStore in case of partial metadata caching
name|List
argument_list|<
name|String
argument_list|>
name|db2TablesCS
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db2TablesCS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAllTablesBlacklist
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
comment|// Don't cache tables from hive.cs_db2
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHED_OBJECTS_BLACKLIST
argument_list|,
literal|"hive.cs_db2.*"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|CachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
comment|// cachedStore.getAllTables falls back to objectStore when whitelist/blacklist is set
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Tables
init|=
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2TablesCS
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db2TablesCS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAllTablesWhitelist
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
comment|// Only cache tables from hive.cs_db1
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHED_OBJECTS_WHITELIST
argument_list|,
literal|"hive.cs_db1.*"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|CachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
comment|// cachedStore.getAllTables falls back to objectStore when whitelist/blacklist is set
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Tables
init|=
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2TablesCS
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db2TablesCS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableByPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|cachedStore
operator|.
name|getTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|,
literal|"cs_db1.*"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|db1Tables
operator|=
name|cachedStore
operator|.
name|getTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|,
literal|"cs_db1.un*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|db1Tables
operator|=
name|cachedStore
operator|.
name|getTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|,
literal|".*tbl1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|db1Tables
operator|=
name|cachedStore
operator|.
name|getTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|,
literal|".*tbl1"
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|db1Tables
operator|=
name|cachedStore
operator|.
name|getTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|,
literal|".*tbl1"
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Tables
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Alter table db1Utbl1 via CachedStore and read via ObjectStore
name|Table
name|db1Utbl1Read
init|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|newOwner
init|=
literal|"newOwner"
decl_stmt|;
name|Table
name|db1Utbl1ReadAlt
init|=
operator|new
name|Table
argument_list|(
name|db1Utbl1Read
argument_list|)
decl_stmt|;
name|db1Utbl1ReadAlt
operator|.
name|setOwner
argument_list|(
name|newOwner
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|alterTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1Read
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1Read
operator|.
name|getTableName
argument_list|()
argument_list|,
name|db1Utbl1ReadAlt
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|db1Utbl1Read
operator|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1ReadAlt
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1ReadAlt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|db1Utbl1ReadOS
init|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1ReadAlt
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1ReadAlt
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db1Utbl1Read
argument_list|,
name|db1Utbl1ReadOS
argument_list|)
expr_stmt|;
comment|// Alter table db2Utbl1 via ObjectStore and read via CachedStore
name|Table
name|db2Utbl1Read
init|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|db2Utbl1ReadAlt
init|=
operator|new
name|Table
argument_list|(
name|db2Utbl1Read
argument_list|)
decl_stmt|;
name|db2Utbl1ReadAlt
operator|.
name|setOwner
argument_list|(
name|newOwner
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|alterTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl1Read
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl1Read
operator|.
name|getTableName
argument_list|()
argument_list|,
name|db2Utbl1ReadAlt
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|cachedStore
argument_list|)
expr_stmt|;
name|db2Utbl1Read
operator|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl1ReadAlt
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl1ReadAlt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|d21Utbl1ReadCS
init|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl1ReadAlt
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl1ReadAlt
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db2Utbl1Read
argument_list|,
name|d21Utbl1ReadCS
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Tables
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Drop table db1Utbl1 via CachedStore and read via ObjectStore
name|Table
name|db1Utbl1Read
init|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1Read
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1Read
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|db1Tables
operator|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|db1Utbl1ReadOS
init|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1Read
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1Read
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|db1Utbl1ReadOS
argument_list|)
expr_stmt|;
comment|// Drop table db2Utbl1 via ObjectStore and read via CachedStore
name|Table
name|db2Utbl1Read
init|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl1Read
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl1Read
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|db2Tables
operator|=
name|objectStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|cachedStore
argument_list|)
expr_stmt|;
name|db2Tables
operator|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|db2Utbl1ReadCS
init|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl1Read
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl1Read
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|db2Utbl1ReadCS
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**********************************************************************************************    * Methods that test SharedCache    * @throws MetaException    * @throws NoSuchObjectException    *********************************************************************************************/
annotation|@
name|Test
specifier|public
name|void
name|testSharedStoreDb
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|CachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
name|Database
name|localDb1
init|=
name|createDatabaseObject
argument_list|(
literal|"db1"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|Database
name|localDb2
init|=
name|createDatabaseObject
argument_list|(
literal|"db2"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|Database
name|localDb3
init|=
name|createDatabaseObject
argument_list|(
literal|"db3"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|Database
name|newDb1
init|=
name|createDatabaseObject
argument_list|(
literal|"newdb1"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addDatabaseToCache
argument_list|(
name|localDb1
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addDatabaseToCache
argument_list|(
name|localDb2
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addDatabaseToCache
argument_list|(
name|localDb3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getCachedDatabaseCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterDatabaseInCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"db1"
argument_list|,
name|newDb1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getCachedDatabaseCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeDatabaseFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"db2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getCachedDatabaseCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dbs
init|=
name|sharedCache
operator|.
name|listCachedDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dbs
operator|.
name|contains
argument_list|(
literal|"newdb1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dbs
operator|.
name|contains
argument_list|(
literal|"db3"
argument_list|)
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSharedStoreTable
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|CachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
name|Table
name|tbl1
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd1
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols1
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params1
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setCols
argument_list|(
name|cols1
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setParameters
argument_list|(
name|params1
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setLocation
argument_list|(
literal|"loc1"
argument_list|)
expr_stmt|;
name|tbl1
operator|.
name|setSd
argument_list|(
name|sd1
argument_list|)
expr_stmt|;
name|tbl1
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl2
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd2
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols2
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params2
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setCols
argument_list|(
name|cols2
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setParameters
argument_list|(
name|params2
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setLocation
argument_list|(
literal|"loc2"
argument_list|)
expr_stmt|;
name|tbl2
operator|.
name|setSd
argument_list|(
name|sd2
argument_list|)
expr_stmt|;
name|tbl2
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl3
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd3
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols3
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params3
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params3
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setCols
argument_list|(
name|cols3
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setParameters
argument_list|(
name|params3
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setLocation
argument_list|(
literal|"loc3"
argument_list|)
expr_stmt|;
name|tbl3
operator|.
name|setSd
argument_list|(
name|sd3
argument_list|)
expr_stmt|;
name|tbl3
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|newTbl1
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|newTbl1
operator|.
name|setDbName
argument_list|(
literal|"db2"
argument_list|)
expr_stmt|;
name|newTbl1
operator|.
name|setTableName
argument_list|(
literal|"tbl1"
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|newSd1
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|newCols1
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"newcol1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|newParams1
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setCols
argument_list|(
name|newCols1
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setParameters
argument_list|(
name|params1
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setLocation
argument_list|(
literal|"loc1"
argument_list|)
expr_stmt|;
name|newTbl1
operator|.
name|setSd
argument_list|(
name|newSd1
argument_list|)
expr_stmt|;
name|newTbl1
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"db1"
argument_list|,
literal|"tbl1"
argument_list|,
name|tbl1
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"db1"
argument_list|,
literal|"tbl2"
argument_list|,
name|tbl2
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"db1"
argument_list|,
literal|"tbl3"
argument_list|,
name|tbl3
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"db2"
argument_list|,
literal|"tbl1"
argument_list|,
name|tbl1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getCachedTableCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"db1"
argument_list|,
literal|"tbl1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"loc1"
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"db1"
argument_list|,
literal|"tbl1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getCachedTableCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterTableInCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"db2"
argument_list|,
literal|"tbl1"
argument_list|,
name|newTbl1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getCachedTableCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"db1"
argument_list|,
literal|"tbl2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getCachedTableCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSharedStorePartition
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|CachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
literal|"db1"
decl_stmt|;
name|String
name|tbl1Name
init|=
literal|"tbl1"
decl_stmt|;
name|String
name|tbl2Name
init|=
literal|"tbl2"
decl_stmt|;
name|String
name|owner
init|=
literal|"user1"
decl_stmt|;
name|Database
name|db
init|=
name|createDatabaseObject
argument_list|(
name|dbName
argument_list|,
name|owner
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addDatabaseToCache
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"integer column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"string"
argument_list|,
literal|"string column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col1
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ptnCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|tbl1
init|=
name|createTestTbl
argument_list|(
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|owner
argument_list|,
name|cols
argument_list|,
name|ptnCols
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|tbl1
argument_list|)
expr_stmt|;
name|Table
name|tbl2
init|=
name|createTestTbl
argument_list|(
name|dbName
argument_list|,
name|tbl2Name
argument_list|,
name|owner
argument_list|,
name|cols
argument_list|,
name|ptnCols
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl2Name
argument_list|,
name|tbl2
argument_list|)
expr_stmt|;
name|Partition
name|part1
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd1
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols1
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params1
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setCols
argument_list|(
name|cols1
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setParameters
argument_list|(
name|params1
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setLocation
argument_list|(
literal|"loc1"
argument_list|)
expr_stmt|;
name|part1
operator|.
name|setSd
argument_list|(
name|sd1
argument_list|)
expr_stmt|;
name|part1
operator|.
name|setValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part2
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd2
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols2
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params2
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setCols
argument_list|(
name|cols2
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setParameters
argument_list|(
name|params2
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setLocation
argument_list|(
literal|"loc2"
argument_list|)
expr_stmt|;
name|part2
operator|.
name|setSd
argument_list|(
name|sd2
argument_list|)
expr_stmt|;
name|part2
operator|.
name|setValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201702"
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part3
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd3
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols3
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params3
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params3
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setCols
argument_list|(
name|cols3
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setParameters
argument_list|(
name|params3
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setLocation
argument_list|(
literal|"loc3"
argument_list|)
expr_stmt|;
name|part3
operator|.
name|setSd
argument_list|(
name|sd3
argument_list|)
expr_stmt|;
name|part3
operator|.
name|setValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201703"
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|newPart1
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|newPart1
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|newPart1
operator|.
name|setTableName
argument_list|(
name|tbl1Name
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|newSd1
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|newCols1
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"newcol1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|newParams1
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setCols
argument_list|(
name|newCols1
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setParameters
argument_list|(
name|params1
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setLocation
argument_list|(
literal|"loc1new"
argument_list|)
expr_stmt|;
name|newPart1
operator|.
name|setSd
argument_list|(
name|newSd1
argument_list|)
expr_stmt|;
name|newPart1
operator|.
name|setValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|part1
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|part2
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|part3
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl2Name
argument_list|,
name|part1
argument_list|)
expr_stmt|;
name|Partition
name|t
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"loc1"
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removePartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl2Name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl2Name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterPartitionInCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|,
name|newPart1
argument_list|)
expr_stmt|;
name|t
operator|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"loc1new"
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|//@Test
specifier|public
name|void
name|testAggrStatsRepeatedRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
literal|"testTableColStatsOps"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl"
decl_stmt|;
name|String
name|colName
init|=
literal|"f1"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"some_location"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|colName
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|null
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partVals1
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partVals2
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|Partition
name|ptn1
init|=
operator|new
name|Partition
argument_list|(
name|partVals1
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|ptn1
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|addPartition
argument_list|(
name|ptn1
argument_list|)
expr_stmt|;
name|Partition
name|ptn2
init|=
operator|new
name|Partition
argument_list|(
name|partVals2
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|ptn2
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|addPartition
argument_list|(
name|ptn2
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
literal|"col"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatObjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|colStats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colName
argument_list|,
literal|"int"
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|LongColumnStatsDataInspector
name|longStats
init|=
operator|new
name|LongColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|longStats
operator|.
name|setLowValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setHighValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumNulls
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|longStats
argument_list|)
expr_stmt|;
name|colStatObjs
operator|.
name|add
argument_list|(
name|colStats
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsObj
argument_list|(
name|colStatObjs
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
operator|.
name|deepCopy
argument_list|()
argument_list|,
name|partVals1
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
operator|.
name|deepCopy
argument_list|()
argument_list|,
name|partVals2
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aggrPartVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|aggrPartVals
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|aggrPartVals
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStats
init|=
name|cachedStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrPartVals
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|aggrStats
operator|=
name|cachedStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrPartVals
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|deletePartitionColumnStatistics
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partVals1
argument_list|)
argument_list|,
name|partVals1
argument_list|,
name|colName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|deletePartitionColumnStatistics
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partVals2
argument_list|)
argument_list|,
name|partVals2
argument_list|,
name|colName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropPartition
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partVals1
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropPartition
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partVals2
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|//@Test
specifier|public
name|void
name|testPartitionAggrStats
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"testTableColStatsOps1"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl1"
decl_stmt|;
name|String
name|colName
init|=
literal|"f1"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
literal|"some_location"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|db
operator|.
name|setCatalogName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|colName
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|null
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partVals1
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partVals2
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|Partition
name|ptn1
init|=
operator|new
name|Partition
argument_list|(
name|partVals1
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|ptn1
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|addPartition
argument_list|(
name|ptn1
argument_list|)
expr_stmt|;
name|Partition
name|ptn2
init|=
operator|new
name|Partition
argument_list|(
name|partVals2
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|ptn2
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|addPartition
argument_list|(
name|ptn2
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
literal|"col"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatObjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|colStats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colName
argument_list|,
literal|"int"
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|LongColumnStatsDataInspector
name|longStats
init|=
operator|new
name|LongColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|longStats
operator|.
name|setLowValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setHighValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumNulls
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|longStats
argument_list|)
expr_stmt|;
name|colStatObjs
operator|.
name|add
argument_list|(
name|colStats
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsObj
argument_list|(
name|colStatObjs
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
operator|.
name|deepCopy
argument_list|()
argument_list|,
name|partVals1
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
operator|.
name|deepCopy
argument_list|()
argument_list|,
name|partVals2
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aggrPartVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|aggrPartVals
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|aggrPartVals
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStats
init|=
name|cachedStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrPartVals
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|aggrStats
operator|=
name|cachedStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrPartVals
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|//@Test
specifier|public
name|void
name|testPartitionAggrStatsBitVector
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"testTableColStatsOps2"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl2"
decl_stmt|;
name|String
name|colName
init|=
literal|"f1"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
literal|"some_location"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|db
operator|.
name|setCatalogName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|colName
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|null
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partVals1
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partVals2
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|Partition
name|ptn1
init|=
operator|new
name|Partition
argument_list|(
name|partVals1
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|ptn1
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|addPartition
argument_list|(
name|ptn1
argument_list|)
expr_stmt|;
name|Partition
name|ptn2
init|=
operator|new
name|Partition
argument_list|(
name|partVals2
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|ptn2
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|addPartition
argument_list|(
name|ptn2
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
literal|"col"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatObjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|colStats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colName
argument_list|,
literal|"int"
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|LongColumnStatsDataInspector
name|longStats
init|=
operator|new
name|LongColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|longStats
operator|.
name|setLowValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setHighValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumNulls
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|HyperLogLog
name|hll
init|=
name|HyperLogLog
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setBitVectors
argument_list|(
name|hll
operator|.
name|serialize
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|longStats
argument_list|)
expr_stmt|;
name|colStatObjs
operator|.
name|add
argument_list|(
name|colStats
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsObj
argument_list|(
name|colStatObjs
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
operator|.
name|deepCopy
argument_list|()
argument_list|,
name|partVals1
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|hll
operator|=
name|HyperLogLog
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setBitVectors
argument_list|(
name|hll
operator|.
name|serialize
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
operator|.
name|deepCopy
argument_list|()
argument_list|,
name|partVals2
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aggrPartVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|aggrPartVals
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|aggrPartVals
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStats
init|=
name|cachedStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrPartVals
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|aggrStats
operator|=
name|cachedStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrPartVals
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiThreadedSharedCacheOps
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"-1Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|CachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"db1"
argument_list|,
literal|"db2"
argument_list|,
literal|"db3"
argument_list|,
literal|"db4"
argument_list|,
literal|"db5"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|50
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
name|Executors
operator|.
name|defaultThreadFactory
argument_list|()
operator|.
name|newThread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Create 5 dbs
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
block|{
name|Callable
argument_list|<
name|Object
argument_list|>
name|c
init|=
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
block|{
name|Database
name|db
init|=
name|createDatabaseObject
argument_list|(
name|dbName
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addDatabaseToCache
argument_list|(
name|db
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
block|{
name|Database
name|db
init|=
name|sharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Created 5 tables under "db1"
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"tbl1"
argument_list|,
literal|"tbl2"
argument_list|,
literal|"tbl3"
argument_list|,
literal|"tbl4"
argument_list|,
literal|"tbl5"
argument_list|)
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"integer column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"string"
argument_list|,
literal|"string column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col1
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col2
argument_list|)
expr_stmt|;
name|FieldSchema
name|ptnCol1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"part1"
argument_list|,
literal|"string"
argument_list|,
literal|"string partition column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ptnCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|ptnCols
operator|.
name|add
argument_list|(
name|ptnCol1
argument_list|)
expr_stmt|;
name|Callable
argument_list|<
name|Object
argument_list|>
name|c
init|=
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
block|{
name|Table
name|tbl
init|=
name|createTestTbl
argument_list|(
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|,
literal|"user1"
argument_list|,
name|cols
argument_list|,
name|ptnCols
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
name|Table
name|tbl
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tblName
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add 5 partitions to all tables
name|List
argument_list|<
name|String
argument_list|>
name|ptnVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|,
literal|"ccc"
argument_list|,
literal|"ddd"
argument_list|,
literal|"eee"
argument_list|)
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
name|Table
name|tbl
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ptnVal
range|:
name|ptnVals
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Callable
argument_list|<
name|Object
argument_list|>
name|c
init|=
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
block|{
name|Partition
name|ptn
init|=
operator|new
name|Partition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnVal
argument_list|)
argument_list|,
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|,
name|ptn
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|executor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
for|for
control|(
name|String
name|ptnVal
range|:
name|ptnVals
control|)
block|{
name|Partition
name|ptn
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnVal
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ptn
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tblName
argument_list|,
name|ptn
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tblName
argument_list|,
name|ptn
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnVal
argument_list|)
argument_list|,
name|ptn
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Drop all partitions from "tbl1", "tbl2", "tbl3" and add 2 new partitions to "tbl4" and "tbl5"
name|List
argument_list|<
name|String
argument_list|>
name|newPtnVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"fff"
argument_list|,
literal|"ggg"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dropPtnTblNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"tbl1"
argument_list|,
literal|"tbl2"
argument_list|,
literal|"tbl3"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addPtnTblNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"tbl4"
argument_list|,
literal|"tbl5"
argument_list|)
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|dropPtnTblNames
control|)
block|{
for|for
control|(
name|String
name|ptnVal
range|:
name|ptnVals
control|)
block|{
name|Callable
argument_list|<
name|Object
argument_list|>
name|c
init|=
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
block|{
name|sharedCache
operator|.
name|removePartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnVal
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|tblName
range|:
name|addPtnTblNames
control|)
block|{
name|Table
name|tbl
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ptnVal
range|:
name|newPtnVals
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Callable
argument_list|<
name|Object
argument_list|>
name|c
init|=
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
block|{
name|Partition
name|ptn
init|=
operator|new
name|Partition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnVal
argument_list|)
argument_list|,
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|,
name|ptn
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|executor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|addPtnTblNames
control|)
block|{
for|for
control|(
name|String
name|ptnVal
range|:
name|newPtnVals
control|)
block|{
name|Partition
name|ptn
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnVal
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ptn
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tblName
argument_list|,
name|ptn
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tblName
argument_list|,
name|ptn
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnVal
argument_list|)
argument_list|,
name|ptn
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|tblName
range|:
name|dropPtnTblNames
control|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|ptns
init|=
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tblName
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ptns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionSize
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"5Kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTestExceptSharedCache
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"db1"
decl_stmt|;
name|String
name|tbl1Name
init|=
literal|"tbl1"
decl_stmt|;
name|String
name|tbl2Name
init|=
literal|"tbl2"
decl_stmt|;
name|String
name|owner
init|=
literal|"user1"
decl_stmt|;
name|Database
name|db
init|=
name|createDatabaseObject
argument_list|(
name|dbName
argument_list|,
name|owner
argument_list|)
decl_stmt|;
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"integer column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"string"
argument_list|,
literal|"string column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col1
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ptnCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|tbl1
init|=
name|createTestTbl
argument_list|(
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|owner
argument_list|,
name|cols
argument_list|,
name|ptnCols
argument_list|)
decl_stmt|;
name|Table
name|tbl2
init|=
name|createTestTbl
argument_list|(
name|dbName
argument_list|,
name|tbl2Name
argument_list|,
name|owner
argument_list|,
name|cols
argument_list|,
name|ptnCols
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|tableSizeMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|tbl1Key
init|=
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|)
decl_stmt|;
name|String
name|tbl2Key
init|=
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl2Name
argument_list|)
decl_stmt|;
name|tableSizeMap
operator|.
name|put
argument_list|(
name|tbl1Key
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|tableSizeMap
operator|.
name|put
argument_list|(
name|tbl2Key
argument_list|,
literal|4500
argument_list|)
expr_stmt|;
name|Partition
name|part1
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd1
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols1
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params1
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setCols
argument_list|(
name|cols1
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setParameters
argument_list|(
name|params1
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setLocation
argument_list|(
literal|"loc1"
argument_list|)
expr_stmt|;
name|part1
operator|.
name|setSd
argument_list|(
name|sd1
argument_list|)
expr_stmt|;
name|part1
operator|.
name|setValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part2
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd2
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols2
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params2
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setCols
argument_list|(
name|cols2
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setParameters
argument_list|(
name|params2
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setLocation
argument_list|(
literal|"loc2"
argument_list|)
expr_stmt|;
name|part2
operator|.
name|setSd
argument_list|(
name|sd2
argument_list|)
expr_stmt|;
name|part2
operator|.
name|setValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201702"
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part3
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd3
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols3
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params3
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params3
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setCols
argument_list|(
name|cols3
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setParameters
argument_list|(
name|params3
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setLocation
argument_list|(
literal|"loc3"
argument_list|)
expr_stmt|;
name|part3
operator|.
name|setSd
argument_list|(
name|sd3
argument_list|)
expr_stmt|;
name|part3
operator|.
name|setValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201703"
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|newPart1
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|newPart1
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|newPart1
operator|.
name|setTableName
argument_list|(
name|tbl1Name
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|newSd1
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|newCols1
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"newcol1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|newParams1
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setCols
argument_list|(
name|newCols1
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setParameters
argument_list|(
name|params1
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setLocation
argument_list|(
literal|"loc1new"
argument_list|)
expr_stmt|;
name|newPart1
operator|.
name|setSd
argument_list|(
name|newSd1
argument_list|)
expr_stmt|;
name|newPart1
operator|.
name|setValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|cachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
name|sharedCache
operator|.
name|setConcurrencyLevel
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|setTableSizeMap
argument_list|(
name|tableSizeMap
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addDatabaseToCache
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|tbl1
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl2Name
argument_list|,
name|tbl2
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|part1
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|part2
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|part3
argument_list|)
expr_stmt|;
name|Partition
name|p
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl1Name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl2Name
argument_list|,
name|newPart1
argument_list|)
expr_stmt|;
name|p
operator|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tbl2Name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShowTables
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"5kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTestExceptSharedCache
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|//set up table size map
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|tableSizeMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|db1Utbl1TblKey
init|=
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|db1Ptbl1TblKey
init|=
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|db2Utbl1TblKey
init|=
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|db2Ptbl1TblKey
init|=
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|tableSizeMap
operator|.
name|put
argument_list|(
name|db1Utbl1TblKey
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|tableSizeMap
operator|.
name|put
argument_list|(
name|db1Ptbl1TblKey
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|tableSizeMap
operator|.
name|put
argument_list|(
name|db2Utbl1TblKey
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|tableSizeMap
operator|.
name|put
argument_list|(
name|db2Ptbl1TblKey
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|SharedCache
name|sc
init|=
name|cachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
name|sc
operator|.
name|setConcurrencyLevel
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setTableSizeMap
argument_list|(
name|tableSizeMap
argument_list|)
expr_stmt|;
name|sc
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Prewarm CachedStore
name|CachedStore
operator|.
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Tables
init|=
name|cachedStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableEviction
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|,
literal|"5kb"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
name|cachedStore
init|=
operator|new
name|CachedStore
argument_list|()
decl_stmt|;
name|CachedStore
operator|.
name|clearSharedCache
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConfForTestExceptSharedCache
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|(
name|ObjectStore
operator|)
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
comment|//set up table size map
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|tableSizeMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|db1Utbl1TblKey
init|=
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|db1Ptbl1TblKey
init|=
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|db2Utbl1TblKey
init|=
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|db2Ptbl1TblKey
init|=
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|tableSizeMap
operator|.
name|put
argument_list|(
name|db1Utbl1TblKey
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|tableSizeMap
operator|.
name|put
argument_list|(
name|db1Ptbl1TblKey
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|tableSizeMap
operator|.
name|put
argument_list|(
name|db2Utbl1TblKey
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|tableSizeMap
operator|.
name|put
argument_list|(
name|db2Ptbl1TblKey
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|Table
name|tblDb1Utbl1
init|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|tblDb1Ptbl1
init|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|tblDb2Utbl1
init|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|tblDb2Ptbl1
init|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|SharedCache
name|sc
init|=
name|cachedStore
operator|.
name|getSharedCache
argument_list|()
decl_stmt|;
name|sc
operator|.
name|setConcurrencyLevel
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setTableSizeMap
argument_list|(
name|tableSizeMap
argument_list|)
expr_stmt|;
name|sc
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|sc
operator|.
name|addDatabaseToCache
argument_list|(
name|db1
argument_list|)
expr_stmt|;
name|sc
operator|.
name|addDatabaseToCache
argument_list|(
name|db2
argument_list|)
expr_stmt|;
name|sc
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblDb1Utbl1
argument_list|)
expr_stmt|;
name|sc
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db1Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblDb1Ptbl1
argument_list|)
expr_stmt|;
name|sc
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Utbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Utbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblDb2Utbl1
argument_list|)
expr_stmt|;
name|sc
operator|.
name|addTableToCache
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2Ptbl1
operator|.
name|getDbName
argument_list|()
argument_list|,
name|db2Ptbl1
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblDb2Ptbl1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db1Tables
init|=
name|sc
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db1Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|db2Tables
init|=
name|sc
operator|.
name|listCachedTableNames
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|db2Tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Table
name|createTestTbl
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|tblOwner
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ptnCols
parameter_list|)
block|{
name|String
name|serdeLocation
init|=
literal|"file:/tmp"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|SerDeInfo
name|serdeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
name|serdeLocation
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serdeInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|serdeParams
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
name|tblOwner
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|ptnCols
argument_list|,
name|tblParams
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|Database
name|createDatabaseObject
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|dbOwner
parameter_list|)
block|{
name|String
name|dbDescription
init|=
name|dbName
decl_stmt|;
name|String
name|dbLocation
init|=
literal|"file:/tmp"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
name|dbDescription
argument_list|,
name|dbLocation
argument_list|,
name|dbParams
argument_list|)
decl_stmt|;
name|db
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|db
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|db
operator|.
name|setCatalogName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|db
operator|.
name|setCreateTime
argument_list|(
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|db
return|;
block|}
comment|/**    * Create an unpartitoned table object for the given db.    * The table has 9 types of columns    * @param db    * @return    */
specifier|private
name|Table
name|createUnpartitionedTableObject
parameter_list|(
name|Database
name|db
parameter_list|)
block|{
name|String
name|dbName
init|=
name|db
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|owner
init|=
name|db
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|serdeLocation
init|=
literal|"file:/tmp"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|SerDeInfo
name|serdeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"binary"
argument_list|,
literal|"binary column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"boolean"
argument_list|,
literal|"boolean column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col3
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
literal|"date"
argument_list|,
literal|"date column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col4
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col4"
argument_list|,
literal|"decimal"
argument_list|,
literal|"decimal column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col5
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col5"
argument_list|,
literal|"double"
argument_list|,
literal|"double column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col6
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col6"
argument_list|,
literal|"float"
argument_list|,
literal|"float column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col7
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col7"
argument_list|,
literal|"int"
argument_list|,
literal|"int column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col8
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col8"
argument_list|,
literal|"string"
argument_list|,
literal|"string column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|,
name|col3
argument_list|,
name|col4
argument_list|,
name|col5
argument_list|,
name|col6
argument_list|,
name|col7
argument_list|,
name|col8
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
name|serdeLocation
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serdeInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|serdeParams
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|dbName
operator|+
literal|"_unptntbl1"
argument_list|,
name|dbName
argument_list|,
name|owner
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|tblParams
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setWriteId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|TableAndColStats
name|createUnpartitionedTableObjectWithColStats
parameter_list|(
name|Database
name|db
parameter_list|)
block|{
name|String
name|dbName
init|=
name|db
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|owner
init|=
name|db
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|serdeLocation
init|=
literal|"file:/tmp"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|SerDeInfo
name|serdeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"binary"
argument_list|,
literal|"binary column"
argument_list|)
decl_stmt|;
comment|// Stats values for col1
name|long
name|col1MaxColLength
init|=
literal|500
decl_stmt|;
name|double
name|col1AvgColLength
init|=
literal|225.5
decl_stmt|;
name|long
name|col1Nulls
init|=
literal|10
decl_stmt|;
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"boolean"
argument_list|,
literal|"boolean column"
argument_list|)
decl_stmt|;
name|long
name|col2NumTrues
init|=
literal|100
decl_stmt|;
name|long
name|col2NumFalses
init|=
literal|30
decl_stmt|;
name|long
name|col2Nulls
init|=
literal|10
decl_stmt|;
name|FieldSchema
name|col3
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
literal|"date"
argument_list|,
literal|"date column"
argument_list|)
decl_stmt|;
name|Date
name|col3LowVal
init|=
operator|new
name|Date
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Date
name|col3HighVal
init|=
operator|new
name|Date
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
name|long
name|col3Nulls
init|=
literal|10
decl_stmt|;
name|long
name|col3DV
init|=
literal|20
decl_stmt|;
name|FieldSchema
name|col4
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col4"
argument_list|,
literal|"decimal"
argument_list|,
literal|"decimal column"
argument_list|)
decl_stmt|;
name|Decimal
name|col4LowVal
init|=
name|DecimalUtils
operator|.
name|getDecimal
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Decimal
name|col4HighVal
init|=
name|DecimalUtils
operator|.
name|getDecimal
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|long
name|col4Nulls
init|=
literal|10
decl_stmt|;
name|long
name|col4DV
init|=
literal|20
decl_stmt|;
name|FieldSchema
name|col5
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col5"
argument_list|,
literal|"double"
argument_list|,
literal|"double column"
argument_list|)
decl_stmt|;
name|double
name|col5LowVal
init|=
literal|10.5
decl_stmt|;
name|double
name|col5HighVal
init|=
literal|550.5
decl_stmt|;
name|long
name|col5Nulls
init|=
literal|10
decl_stmt|;
name|long
name|col5DV
init|=
literal|20
decl_stmt|;
name|FieldSchema
name|col6
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col6"
argument_list|,
literal|"float"
argument_list|,
literal|"float column"
argument_list|)
decl_stmt|;
name|float
name|col6LowVal
init|=
literal|10.5f
decl_stmt|;
name|float
name|col6HighVal
init|=
literal|550.5f
decl_stmt|;
name|long
name|col6Nulls
init|=
literal|10
decl_stmt|;
name|long
name|col6DV
init|=
literal|20
decl_stmt|;
name|FieldSchema
name|col7
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col7"
argument_list|,
literal|"int"
argument_list|,
literal|"int column"
argument_list|)
decl_stmt|;
name|int
name|col7LowVal
init|=
literal|10
decl_stmt|;
name|int
name|col7HighVal
init|=
literal|550
decl_stmt|;
name|long
name|col7Nulls
init|=
literal|10
decl_stmt|;
name|long
name|col7DV
init|=
literal|20
decl_stmt|;
name|FieldSchema
name|col8
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col8"
argument_list|,
literal|"string"
argument_list|,
literal|"string column"
argument_list|)
decl_stmt|;
name|long
name|col8MaxColLen
init|=
literal|100
decl_stmt|;
name|double
name|col8AvgColLen
init|=
literal|45.5
decl_stmt|;
name|long
name|col8Nulls
init|=
literal|5
decl_stmt|;
name|long
name|col8DV
init|=
literal|40
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|,
name|col3
argument_list|,
name|col4
argument_list|,
name|col5
argument_list|,
name|col6
argument_list|,
name|col7
argument_list|,
name|col8
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
name|serdeLocation
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serdeInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|serdeParams
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|dbName
operator|+
literal|"_unptntbl1"
argument_list|,
name|dbName
argument_list|,
name|owner
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|tblParams
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setWriteId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatObjList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Col1
name|ColumnStatisticsData
name|data1
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|col1Stats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|col1
operator|.
name|getName
argument_list|()
argument_list|,
name|col1
operator|.
name|getType
argument_list|()
argument_list|,
name|data1
argument_list|)
decl_stmt|;
name|BinaryColumnStatsData
name|binaryStats
init|=
operator|new
name|BinaryColumnStatsData
argument_list|()
decl_stmt|;
name|binaryStats
operator|.
name|setMaxColLen
argument_list|(
name|col1MaxColLength
argument_list|)
expr_stmt|;
name|binaryStats
operator|.
name|setAvgColLen
argument_list|(
name|col1AvgColLength
argument_list|)
expr_stmt|;
name|binaryStats
operator|.
name|setNumNulls
argument_list|(
name|col1Nulls
argument_list|)
expr_stmt|;
name|data1
operator|.
name|setBinaryStats
argument_list|(
name|binaryStats
argument_list|)
expr_stmt|;
name|colStatObjList
operator|.
name|add
argument_list|(
name|col1Stats
argument_list|)
expr_stmt|;
comment|// Col2
name|ColumnStatisticsData
name|data2
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|col2Stats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|col2
operator|.
name|getName
argument_list|()
argument_list|,
name|col2
operator|.
name|getType
argument_list|()
argument_list|,
name|data2
argument_list|)
decl_stmt|;
name|BooleanColumnStatsData
name|booleanStats
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|booleanStats
operator|.
name|setNumTrues
argument_list|(
name|col2NumTrues
argument_list|)
expr_stmt|;
name|booleanStats
operator|.
name|setNumFalses
argument_list|(
name|col2NumFalses
argument_list|)
expr_stmt|;
name|booleanStats
operator|.
name|setNumNulls
argument_list|(
name|col2Nulls
argument_list|)
expr_stmt|;
name|colStatObjList
operator|.
name|add
argument_list|(
name|col2Stats
argument_list|)
expr_stmt|;
comment|// Col3
name|ColumnStatisticsData
name|data3
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|col3Stats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|col3
operator|.
name|getName
argument_list|()
argument_list|,
name|col3
operator|.
name|getType
argument_list|()
argument_list|,
name|data3
argument_list|)
decl_stmt|;
name|DateColumnStatsDataInspector
name|dateStats
init|=
operator|new
name|DateColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|dateStats
operator|.
name|setLowValue
argument_list|(
name|col3LowVal
argument_list|)
expr_stmt|;
name|dateStats
operator|.
name|setHighValue
argument_list|(
name|col3HighVal
argument_list|)
expr_stmt|;
name|dateStats
operator|.
name|setNumNulls
argument_list|(
name|col3Nulls
argument_list|)
expr_stmt|;
name|dateStats
operator|.
name|setNumDVs
argument_list|(
name|col3DV
argument_list|)
expr_stmt|;
name|colStatObjList
operator|.
name|add
argument_list|(
name|col3Stats
argument_list|)
expr_stmt|;
comment|// Col4
name|ColumnStatisticsData
name|data4
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|col4Stats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|col4
operator|.
name|getName
argument_list|()
argument_list|,
name|col4
operator|.
name|getType
argument_list|()
argument_list|,
name|data4
argument_list|)
decl_stmt|;
name|DecimalColumnStatsDataInspector
name|decimalStats
init|=
operator|new
name|DecimalColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|decimalStats
operator|.
name|setLowValue
argument_list|(
name|col4LowVal
argument_list|)
expr_stmt|;
name|decimalStats
operator|.
name|setHighValue
argument_list|(
name|col4HighVal
argument_list|)
expr_stmt|;
name|decimalStats
operator|.
name|setNumNulls
argument_list|(
name|col4Nulls
argument_list|)
expr_stmt|;
name|decimalStats
operator|.
name|setNumDVs
argument_list|(
name|col4DV
argument_list|)
expr_stmt|;
name|colStatObjList
operator|.
name|add
argument_list|(
name|col4Stats
argument_list|)
expr_stmt|;
comment|// Col5
name|ColumnStatisticsData
name|data5
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|col5Stats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|col5
operator|.
name|getName
argument_list|()
argument_list|,
name|col5
operator|.
name|getType
argument_list|()
argument_list|,
name|data5
argument_list|)
decl_stmt|;
name|DoubleColumnStatsDataInspector
name|doubleStats
init|=
operator|new
name|DoubleColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|doubleStats
operator|.
name|setLowValue
argument_list|(
name|col5LowVal
argument_list|)
expr_stmt|;
name|doubleStats
operator|.
name|setHighValue
argument_list|(
name|col5HighVal
argument_list|)
expr_stmt|;
name|doubleStats
operator|.
name|setNumNulls
argument_list|(
name|col5Nulls
argument_list|)
expr_stmt|;
name|doubleStats
operator|.
name|setNumDVs
argument_list|(
name|col5DV
argument_list|)
expr_stmt|;
name|colStatObjList
operator|.
name|add
argument_list|(
name|col5Stats
argument_list|)
expr_stmt|;
comment|// Col6
name|ColumnStatisticsData
name|data6
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|col6Stats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|col6
operator|.
name|getName
argument_list|()
argument_list|,
name|col6
operator|.
name|getType
argument_list|()
argument_list|,
name|data6
argument_list|)
decl_stmt|;
name|DoubleColumnStatsDataInspector
name|floatStats
init|=
operator|new
name|DoubleColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|floatStats
operator|.
name|setLowValue
argument_list|(
name|col6LowVal
argument_list|)
expr_stmt|;
name|floatStats
operator|.
name|setHighValue
argument_list|(
name|col6HighVal
argument_list|)
expr_stmt|;
name|floatStats
operator|.
name|setNumNulls
argument_list|(
name|col6Nulls
argument_list|)
expr_stmt|;
name|floatStats
operator|.
name|setNumDVs
argument_list|(
name|col6DV
argument_list|)
expr_stmt|;
name|colStatObjList
operator|.
name|add
argument_list|(
name|col6Stats
argument_list|)
expr_stmt|;
comment|// Col7
name|ColumnStatisticsData
name|data7
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|col7Stats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|col7
operator|.
name|getName
argument_list|()
argument_list|,
name|col7
operator|.
name|getType
argument_list|()
argument_list|,
name|data7
argument_list|)
decl_stmt|;
name|LongColumnStatsDataInspector
name|longStats
init|=
operator|new
name|LongColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|longStats
operator|.
name|setLowValue
argument_list|(
name|col7LowVal
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setHighValue
argument_list|(
name|col7HighVal
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumNulls
argument_list|(
name|col7Nulls
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
name|col7DV
argument_list|)
expr_stmt|;
name|colStatObjList
operator|.
name|add
argument_list|(
name|col7Stats
argument_list|)
expr_stmt|;
comment|// Col8
name|ColumnStatisticsData
name|data8
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|col8Stats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|col8
operator|.
name|getName
argument_list|()
argument_list|,
name|col8
operator|.
name|getType
argument_list|()
argument_list|,
name|data8
argument_list|)
decl_stmt|;
name|StringColumnStatsDataInspector
name|stringStats
init|=
operator|new
name|StringColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|stringStats
operator|.
name|setMaxColLen
argument_list|(
name|col8MaxColLen
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setAvgColLen
argument_list|(
name|col8AvgColLen
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setNumNulls
argument_list|(
name|col8Nulls
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setNumDVs
argument_list|(
name|col8DV
argument_list|)
expr_stmt|;
name|colStatObjList
operator|.
name|add
argument_list|(
name|col8Stats
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsObj
argument_list|(
name|colStatObjList
argument_list|)
expr_stmt|;
return|return
operator|new
name|TableAndColStats
argument_list|(
name|tbl
argument_list|,
name|stats
argument_list|)
return|;
block|}
class|class
name|TableAndColStats
block|{
specifier|private
name|Table
name|table
decl_stmt|;
specifier|private
name|ColumnStatistics
name|colStats
decl_stmt|;
name|TableAndColStats
parameter_list|(
name|Table
name|table
parameter_list|,
name|ColumnStatistics
name|colStats
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|colStats
operator|=
name|colStats
expr_stmt|;
block|}
block|}
comment|/**    * Create a partitoned table object for the given db.    * The table has 9 types of columns.    * The partition columns are string and integer    * @param db    * @return    */
specifier|private
name|Table
name|createPartitionedTableObject
parameter_list|(
name|Database
name|db
parameter_list|)
block|{
name|FieldSchema
name|ptnCol1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"partCol1"
argument_list|,
literal|"string"
argument_list|,
literal|"string partition column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|ptnCol2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"partCol2"
argument_list|,
literal|"int"
argument_list|,
literal|"integer partition column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ptnCols
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnCol1
argument_list|,
name|ptnCol2
argument_list|)
decl_stmt|;
name|Table
name|tbl
init|=
name|createUnpartitionedTableObject
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|db
operator|.
name|getName
argument_list|()
operator|+
literal|"_ptntbl1"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartitionKeys
argument_list|(
name|ptnCols
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
comment|/**    * Create 25 partition objects for table returned by createPartitionedTableObject    * Partitions are: a/1, a/2, ... e/4, e/5    * @param table    * @return    */
specifier|private
name|PartitionObjectsAndNames
name|createPartitionObjects
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|partColNames
operator|.
name|add
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|ptns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ptnNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|table
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|table
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
name|table
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ptnCol1Vals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ptnCol2Vals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ptnCol1Val
range|:
name|ptnCol1Vals
control|)
block|{
for|for
control|(
name|String
name|ptnCol2Val
range|:
name|ptnCol2Vals
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnCol1Val
argument_list|,
name|ptnCol2Val
argument_list|)
decl_stmt|;
name|Partition
name|ptn
init|=
operator|new
name|Partition
argument_list|(
name|partVals
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|ptn
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|ptns
operator|.
name|add
argument_list|(
name|ptn
argument_list|)
expr_stmt|;
name|ptnNames
operator|.
name|add
argument_list|(
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|partColNames
argument_list|,
name|partVals
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PartitionObjectsAndNames
argument_list|(
name|ptns
argument_list|,
name|ptnNames
argument_list|)
return|;
block|}
class|class
name|PartitionObjectsAndNames
block|{
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|ptns
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|ptnNames
decl_stmt|;
name|PartitionObjectsAndNames
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|ptns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ptnNames
parameter_list|)
block|{
name|this
operator|.
name|ptns
operator|=
name|ptns
expr_stmt|;
name|this
operator|.
name|ptnNames
operator|=
name|ptnNames
expr_stmt|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|()
block|{
return|return
name|ptns
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|getPartitionNames
parameter_list|()
block|{
return|return
name|ptnNames
return|;
block|}
block|}
comment|// This method will return only after the cache has updated once
specifier|private
name|void
name|updateCache
parameter_list|(
name|CachedStore
name|cachedStore
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|maxTries
init|=
literal|100
decl_stmt|;
name|long
name|updateCountBefore
init|=
name|cachedStore
operator|.
name|getCacheUpdateCount
argument_list|()
decl_stmt|;
comment|// Start the CachedStore update service
name|CachedStore
operator|.
name|startCacheUpdateService
argument_list|(
name|cachedStore
operator|.
name|getConf
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|cachedStore
operator|.
name|getCacheUpdateCount
argument_list|()
operator|!=
operator|(
name|updateCountBefore
operator|+
literal|1
operator|)
operator|)
operator|&&
operator|(
name|maxTries
operator|--
operator|>
literal|0
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxTries
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to update SharedCache in 100 attempts; possibly some bug"
argument_list|)
throw|;
block|}
name|CachedStore
operator|.
name|stopCacheUpdateService
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

