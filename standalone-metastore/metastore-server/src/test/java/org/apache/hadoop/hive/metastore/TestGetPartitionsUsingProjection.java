begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|beanutils
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetPartitionsFilterSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetPartitionsProjectionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetPartitionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetPartitionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionListComposingSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionSpecWithSharedSD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionWithoutSD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|HadoopThriftAuthBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ColumnType
operator|.
name|SERIALIZATION_FORMAT
import|;
end_import

begin_comment
comment|/**  * Tests for getPartitionsWithSpecs metastore API. This test create some partitions and makes sure  * that getPartitionsWithSpecs returns results which are comparable with the get_partitions API when  * various combinations of projection spec are set. Also checks the JDO code path in addition to  * directSQL code path  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestGetPartitionsUsingProjection
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestGetPartitionsUsingProjection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|port
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|dbName
init|=
literal|"test_projection_db"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tblName
init|=
literal|"test_projection_table"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|origPartitions
decl_stmt|;
specifier|private
name|Table
name|tbl
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXCLUDE_KEY_PREFIX
init|=
literal|"exclude"
decl_stmt|;
specifier|private
name|HiveMetaStoreClient
name|client
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startMetaStoreServer
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hive.in.test"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|BATCH_RETRIEVE_MAX
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LIMIT_PARTITION_REQUEST
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|port
operator|=
name|MetaStoreTestUtils
operator|.
name|startMetaStoreWithRetry
argument_list|(
name|HadoopThriftAuthBridge
operator|.
name|getBridge
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting MetaStore Server on port "
operator|+
name|port
argument_list|)
expr_stmt|;
try|try
init|(
name|HiveMetaStoreClient
name|client
init|=
name|createClient
argument_list|()
init|)
block|{
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|HiveMetaStoreClient
name|client
init|=
name|createClient
argument_list|()
init|)
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|TException
block|{
comment|// This is default case with setugi off for both client and server
name|client
operator|=
name|createClient
argument_list|()
expr_stmt|;
name|createTestTables
argument_list|()
expr_stmt|;
name|origPartitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// set directSQL to true explicitly
name|client
operator|.
name|setMetaConf
argument_list|(
name|ConfVars
operator|.
name|TRY_DIRECT_SQL
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|client
operator|.
name|setMetaConf
argument_list|(
name|ConfVars
operator|.
name|TRY_DIRECT_SQL_DDL
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|dropTestTables
argument_list|()
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|dropTestTables
parameter_list|()
block|{
try|try
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
comment|// ignored
block|}
block|}
specifier|private
name|void
name|createTestTables
parameter_list|()
throws|throws
name|TException
block|{
if|if
condition|(
name|client
operator|.
name|tableExists
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Table is already existing. Dropping it and then recreating"
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setCols
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"string"
argument_list|,
literal|"c1 comment"
argument_list|)
argument_list|,
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"int"
argument_list|,
literal|"c2 comment"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setPartCols
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"state"
argument_list|,
literal|"string"
argument_list|,
literal|"state comment"
argument_list|)
argument_list|,
operator|new
name|FieldSchema
argument_list|(
literal|"city"
argument_list|,
literal|"string"
argument_list|,
literal|"city comment"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setTableParams
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
block|{
block|{
name|put
argument_list|(
literal|"tableparam1"
argument_list|,
literal|"tableval1"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"tableparam2"
argument_list|,
literal|"tableval2"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|setBucketCols
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
operator|.
name|addSortCol
argument_list|(
literal|"col2"
argument_list|,
literal|1
argument_list|)
operator|.
name|addSerdeParam
argument_list|(
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSerdeName
argument_list|(
name|tblName
argument_list|)
operator|.
name|setSerdeLib
argument_list|(
literal|"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe"
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.HiveInputFormat"
argument_list|)
operator|.
name|setOutputFormat
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.HiveOutputFormat"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" does not exist"
argument_list|,
name|client
operator|.
name|tableExists
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|createPartition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CA"
argument_list|,
literal|"SanFrancisco"
argument_list|)
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|createPartition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CA"
argument_list|,
literal|"PaloAlto"
argument_list|)
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|createPartition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"WA"
argument_list|,
literal|"Seattle"
argument_list|)
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|createPartition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"AZ"
argument_list|,
literal|"Phoenix"
argument_list|)
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Partition
name|createPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|vals
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
operator|.
name|setValues
argument_list|(
name|vals
argument_list|)
operator|.
name|addPartParam
argument_list|(
literal|"key1"
argument_list|,
literal|"S1"
argument_list|)
operator|.
name|addPartParam
argument_list|(
literal|"key2"
argument_list|,
literal|"S2"
argument_list|)
operator|.
name|addPartParam
argument_list|(
name|EXCLUDE_KEY_PREFIX
operator|+
literal|"key1"
argument_list|,
literal|"e1"
argument_list|)
operator|.
name|addPartParam
argument_list|(
name|EXCLUDE_KEY_PREFIX
operator|+
literal|"key2"
argument_list|,
literal|"e2"
argument_list|)
operator|.
name|setBucketCols
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
argument_list|)
operator|.
name|setSortCols
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSortCols
argument_list|()
argument_list|)
operator|.
name|setSerdeName
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setSerdeLib
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
operator|.
name|setSerdeParams
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HiveMetaStoreClient
name|createClient
parameter_list|()
throws|throws
name|MetaException
block|{
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|THRIFT_URIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|port
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|EXECUTE_SET_UGI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPartitions
parameter_list|()
throws|throws
name|TException
block|{
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|GetPartitionsResponse
name|response
init|=
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|validateBasic
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionProjectionEmptySpec
parameter_list|()
throws|throws
name|Throwable
block|{
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|GetPartitionsProjectionSpec
name|projectSpec
init|=
name|request
operator|.
name|getProjectionSpec
argument_list|()
decl_stmt|;
name|projectSpec
operator|.
name|setFieldList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|projectSpec
operator|.
name|setExcludeParamKeyPattern
argument_list|(
literal|"exclude%"
argument_list|)
expr_stmt|;
name|GetPartitionsResponse
name|response
decl_stmt|;
name|response
operator|=
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionSpec
name|partitionSpec
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
name|partitionSpec
operator|.
name|getSharedSDPartitionSpec
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sharedSD
init|=
name|partitionSpecWithSharedSD
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sharedSD
argument_list|)
expr_stmt|;
comment|// everything except location in sharedSD should be same
name|StorageDescriptor
name|origSd
init|=
name|origPartitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|origSd
operator|.
name|unsetLocation
argument_list|()
expr_stmt|;
name|StorageDescriptor
name|sharedSDCopy
init|=
name|sharedSD
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|sharedSDCopy
operator|.
name|unsetLocation
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|origSd
argument_list|,
name|sharedSDCopy
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitionWithoutSDS
init|=
name|partitionSpecWithSharedSD
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|partitionWithoutSDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of partitions returned"
argument_list|,
name|origPartitions
operator|.
name|size
argument_list|()
argument_list|,
name|partitionWithoutSDS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|origPartitions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Partition
name|origPartition
init|=
name|origPartitions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PartitionWithoutSD
name|retPartition
init|=
name|partitionWithoutSDS
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|origPartition
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|retPartition
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|origPartition
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|retPartition
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getLocation
argument_list|()
operator|+
name|retPartition
operator|.
name|getRelativePath
argument_list|()
argument_list|)
expr_stmt|;
name|validateMap
argument_list|(
name|origPartition
operator|.
name|getParameters
argument_list|()
argument_list|,
name|retPartition
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|validateList
argument_list|(
name|origPartition
operator|.
name|getValues
argument_list|()
argument_list|,
name|retPartition
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionProjectionAllSingleValuedFields
parameter_list|()
throws|throws
name|Throwable
block|{
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|GetPartitionsProjectionSpec
name|projectSpec
init|=
name|request
operator|.
name|getProjectionSpec
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|projectedFields
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"dbName"
argument_list|,
literal|"tableName"
argument_list|,
literal|"createTime"
argument_list|,
literal|"lastAccessTime"
argument_list|,
literal|"sd.location"
argument_list|,
literal|"sd.inputFormat"
argument_list|,
literal|"sd.outputFormat"
argument_list|,
literal|"sd.compressed"
argument_list|,
literal|"sd.numBuckets"
argument_list|,
literal|"sd.serdeInfo.name"
argument_list|,
literal|"sd.serdeInfo.serializationLib"
comment|/*, "sd.serdeInfo.serdeType"*/
argument_list|)
decl_stmt|;
comment|//TODO directSQL does not support serdeType, serializerClass and deserializerClass in serdeInfo
name|projectSpec
operator|.
name|setFieldList
argument_list|(
name|projectedFields
argument_list|)
expr_stmt|;
name|GetPartitionsResponse
name|response
init|=
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionSpec
name|partitionSpec
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"DbName is not set"
argument_list|,
name|partitionSpec
operator|.
name|isSetDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"tableName is not set"
argument_list|,
name|partitionSpec
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
name|partitionSpec
operator|.
name|getSharedSDPartitionSpec
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sharedSD
init|=
name|partitionSpecWithSharedSD
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sharedSD
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitionWithoutSDS
init|=
name|partitionSpecWithSharedSD
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|partitionWithoutSDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partitionWithoutSDS
operator|.
name|size
argument_list|()
argument_list|,
name|origPartitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|comparePartitionForSingleValuedFields
argument_list|(
name|projectedFields
argument_list|,
name|sharedSD
argument_list|,
name|partitionWithoutSDS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProjectionUsingJDO
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// disable direct SQL to make sure
name|client
operator|.
name|setMetaConf
argument_list|(
name|ConfVars
operator|.
name|TRY_DIRECT_SQL
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|GetPartitionsProjectionSpec
name|projectSpec
init|=
name|request
operator|.
name|getProjectionSpec
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|projectedFields
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"sd.location"
argument_list|)
decl_stmt|;
name|projectSpec
operator|.
name|setFieldList
argument_list|(
name|projectedFields
argument_list|)
expr_stmt|;
name|GetPartitionsResponse
name|response
init|=
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionSpec
name|partitionSpec
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"DbName is not set"
argument_list|,
name|partitionSpec
operator|.
name|isSetDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"tableName is not set"
argument_list|,
name|partitionSpec
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
name|partitionSpec
operator|.
name|getSharedSDPartitionSpec
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sharedSD
init|=
name|partitionSpecWithSharedSD
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sharedSD
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitionWithoutSDS
init|=
name|partitionSpecWithSharedSD
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|partitionWithoutSDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partitionWithoutSDS
operator|.
name|size
argument_list|()
argument_list|,
name|origPartitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|comparePartitionForSingleValuedFields
argument_list|(
name|projectedFields
argument_list|,
name|sharedSD
argument_list|,
name|partitionWithoutSDS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// set all the single-valued fields and try using JDO
name|request
operator|=
name|getGetPartitionsRequest
argument_list|()
expr_stmt|;
name|projectSpec
operator|=
name|request
operator|.
name|getProjectionSpec
argument_list|()
expr_stmt|;
name|projectedFields
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"dbName"
argument_list|,
literal|"tableName"
argument_list|,
literal|"createTime"
argument_list|,
literal|"lastAccessTime"
argument_list|,
literal|"sd.location"
argument_list|,
literal|"sd.inputFormat"
argument_list|,
literal|"sd.outputFormat"
argument_list|,
literal|"sd.compressed"
argument_list|,
literal|"sd.numBuckets"
argument_list|,
literal|"sd.serdeInfo.name"
argument_list|,
literal|"sd.serdeInfo.serializationLib"
argument_list|,
literal|"sd.serdeInfo.serdeType"
argument_list|,
literal|"sd.serdeInfo.serializerClass"
argument_list|,
literal|"sd.serdeInfo.deserializerClass"
argument_list|)
expr_stmt|;
name|projectSpec
operator|.
name|setFieldList
argument_list|(
name|projectedFields
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|partitionSpec
operator|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"DbName is not set"
argument_list|,
name|partitionSpec
operator|.
name|isSetDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"tableName is not set"
argument_list|,
name|partitionSpec
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
name|partitionSpecWithSharedSD
operator|=
name|partitionSpec
operator|.
name|getSharedSDPartitionSpec
argument_list|()
expr_stmt|;
name|sharedSD
operator|=
name|partitionSpecWithSharedSD
operator|.
name|getSd
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sharedSD
argument_list|)
expr_stmt|;
name|partitionWithoutSDS
operator|=
name|partitionSpecWithSharedSD
operator|.
name|getPartitions
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|partitionWithoutSDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partitionWithoutSDS
operator|.
name|size
argument_list|()
argument_list|,
name|origPartitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|comparePartitionForSingleValuedFields
argument_list|(
name|projectedFields
argument_list|,
name|sharedSD
argument_list|,
name|partitionWithoutSDS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Confirms if the partitionWithoutSD object at partitionWithoutSDSIndex index has all the    * projected fields set to values which are same as the ones set in origPartitions    * @param projectedFields    * @param sharedSD    * @param partitionWithoutSDS    * @param partitionWithoutSDSIndex    * @throws IllegalAccessException    * @throws InvocationTargetException    * @throws NoSuchMethodException    */
specifier|private
name|void
name|comparePartitionForSingleValuedFields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|projectedFields
parameter_list|,
name|StorageDescriptor
name|sharedSD
parameter_list|,
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitionWithoutSDS
parameter_list|,
name|int
name|partitionWithoutSDSIndex
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvocationTargetException
throws|,
name|NoSuchMethodException
block|{
for|for
control|(
name|Partition
name|origPart
range|:
name|origPartitions
control|)
block|{
for|for
control|(
name|String
name|projectField
range|:
name|projectedFields
control|)
block|{
comment|// dbname, tableName and catName is not stored in partition
if|if
condition|(
name|projectField
operator|.
name|equals
argument_list|(
literal|"dbName"
argument_list|)
operator|||
name|projectField
operator|.
name|equals
argument_list|(
literal|"tableName"
argument_list|)
operator|||
name|projectField
operator|.
name|equals
argument_list|(
literal|"catName"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|projectField
operator|.
name|startsWith
argument_list|(
literal|"sd"
argument_list|)
condition|)
block|{
name|String
name|sdPropertyName
init|=
name|projectField
operator|.
name|substring
argument_list|(
name|projectField
operator|.
name|indexOf
argument_list|(
literal|"sd."
argument_list|)
operator|+
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|sdPropertyName
operator|.
name|equals
argument_list|(
literal|"location"
argument_list|)
condition|)
block|{
comment|// in case of location sharedSD has the base location and partition has relative location
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Location does not match"
argument_list|,
name|origPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getLocation
argument_list|()
operator|+
name|partitionWithoutSDS
operator|.
name|get
argument_list|(
name|partitionWithoutSDSIndex
argument_list|)
operator|.
name|getRelativePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PropertyUtils
operator|.
name|getNestedProperty
argument_list|(
name|origPart
argument_list|,
name|projectField
argument_list|)
argument_list|,
name|PropertyUtils
operator|.
name|getNestedProperty
argument_list|(
name|sharedSD
argument_list|,
name|sdPropertyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PropertyUtils
operator|.
name|getNestedProperty
argument_list|(
name|origPart
argument_list|,
name|projectField
argument_list|)
argument_list|,
name|PropertyUtils
operator|.
name|getNestedProperty
argument_list|(
name|partitionWithoutSDS
operator|.
name|get
argument_list|(
name|partitionWithoutSDSIndex
argument_list|)
argument_list|,
name|projectField
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|partitionWithoutSDSIndex
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionProjectionAllMultiValuedFields
parameter_list|()
throws|throws
name|Throwable
block|{
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|GetPartitionsProjectionSpec
name|projectSpec
init|=
name|request
operator|.
name|getProjectionSpec
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|projectedFields
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"values"
argument_list|,
literal|"parameters"
argument_list|,
literal|"sd.cols"
argument_list|,
literal|"sd.bucketCols"
argument_list|,
literal|"sd.sortCols"
argument_list|,
literal|"sd.parameters"
argument_list|,
literal|"sd.skewedInfo"
argument_list|,
literal|"sd.serdeInfo.parameters"
argument_list|)
decl_stmt|;
name|projectSpec
operator|.
name|setFieldList
argument_list|(
name|projectedFields
argument_list|)
expr_stmt|;
name|GetPartitionsResponse
name|response
init|=
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionSpec
name|partitionSpec
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
name|partitionSpec
operator|.
name|getSharedSDPartitionSpec
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|origPartitions
operator|.
name|size
argument_list|()
argument_list|,
name|partitionSpecWithSharedSD
operator|.
name|getPartitions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sharedSD
init|=
name|partitionSpecWithSharedSD
operator|.
name|getSd
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|origPartitions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Partition
name|origPartition
init|=
name|origPartitions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PartitionWithoutSD
name|retPartition
init|=
name|partitionSpecWithSharedSD
operator|.
name|getPartitions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|projectedField
range|:
name|projectedFields
control|)
block|{
switch|switch
condition|(
name|projectedField
condition|)
block|{
case|case
literal|"values"
case|:
name|validateList
argument_list|(
name|origPartition
operator|.
name|getValues
argument_list|()
argument_list|,
name|retPartition
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"parameters"
case|:
name|validateMap
argument_list|(
name|origPartition
operator|.
name|getParameters
argument_list|()
argument_list|,
name|retPartition
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"sd.cols"
case|:
name|validateList
argument_list|(
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"sd.bucketCols"
case|:
name|validateList
argument_list|(
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getBucketCols
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"sd.sortCols"
case|:
name|validateList
argument_list|(
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getSortCols
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getSortCols
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"sd.parameters"
case|:
name|validateMap
argument_list|(
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"sd.skewedInfo"
case|:
if|if
condition|(
operator|!
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|validateList
argument_list|(
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColNames
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i1
init|=
literal|0
init|;
name|i1
operator|<
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValuesSize
argument_list|()
condition|;
name|i1
operator|++
control|)
block|{
name|validateList
argument_list|(
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValues
argument_list|()
operator|.
name|get
argument_list|(
name|i1
argument_list|)
argument_list|,
name|sharedSD
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValues
argument_list|()
operator|.
name|get
argument_list|(
name|i1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|validateMap
argument_list|(
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|"sd.serdeInfo.parameters"
case|:
name|validateMap
argument_list|(
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid field "
operator|+
name|projectedField
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionProjectionIncludeParameters
parameter_list|()
throws|throws
name|Throwable
block|{
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|GetPartitionsProjectionSpec
name|projectSpec
init|=
name|request
operator|.
name|getProjectionSpec
argument_list|()
decl_stmt|;
name|projectSpec
operator|.
name|setFieldList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"dbName"
argument_list|,
literal|"tableName"
argument_list|,
literal|"catName"
argument_list|,
literal|"parameters"
argument_list|,
literal|"values"
argument_list|)
argument_list|)
expr_stmt|;
name|projectSpec
operator|.
name|setIncludeParamKeyPattern
argument_list|(
name|EXCLUDE_KEY_PREFIX
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|GetPartitionsResponse
name|response
init|=
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSharedSDPartitionSpec
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"All the partitions should be returned in sharedSD spec"
argument_list|,
name|partitionSpecWithSharedSD
argument_list|)
expr_stmt|;
name|PartitionListComposingSpec
name|partitionListComposingSpec
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartitionList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Partition list composing spec should be null since all the "
operator|+
literal|"partitions are expected to be in sharedSD spec"
argument_list|,
name|partitionListComposingSpec
argument_list|)
expr_stmt|;
for|for
control|(
name|PartitionWithoutSD
name|retPartion
range|:
name|partitionSpecWithSharedSD
operator|.
name|getPartitions
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"included parameter key is not found in the response"
argument_list|,
name|retPartion
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|EXCLUDE_KEY_PREFIX
operator|+
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"included parameter key is not found in the response"
argument_list|,
name|retPartion
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|EXCLUDE_KEY_PREFIX
operator|+
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Additional parameters returned other than inclusion keys"
argument_list|,
literal|2
argument_list|,
name|retPartion
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionProjectionIncludeExcludeParameters
parameter_list|()
throws|throws
name|Throwable
block|{
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|GetPartitionsProjectionSpec
name|projectSpec
init|=
name|request
operator|.
name|getProjectionSpec
argument_list|()
decl_stmt|;
name|projectSpec
operator|.
name|setFieldList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"dbName"
argument_list|,
literal|"tableName"
argument_list|,
literal|"catName"
argument_list|,
literal|"parameters"
argument_list|,
literal|"values"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test parameter key inclusion using setIncludeParamKeyPattern
name|projectSpec
operator|.
name|setIncludeParamKeyPattern
argument_list|(
name|EXCLUDE_KEY_PREFIX
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|projectSpec
operator|.
name|setExcludeParamKeyPattern
argument_list|(
literal|"%key1%"
argument_list|)
expr_stmt|;
name|GetPartitionsResponse
name|response
init|=
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSharedSDPartitionSpec
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"All the partitions should be returned in sharedSD spec"
argument_list|,
name|partitionSpecWithSharedSD
argument_list|)
expr_stmt|;
name|PartitionListComposingSpec
name|partitionListComposingSpec
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartitionList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Partition list composing spec should be null since all the "
operator|+
literal|"partitions are expected to be in sharedSD spec"
argument_list|,
name|partitionListComposingSpec
argument_list|)
expr_stmt|;
for|for
control|(
name|PartitionWithoutSD
name|retPartion
range|:
name|partitionSpecWithSharedSD
operator|.
name|getPartitions
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"excluded parameter key is found in the response"
argument_list|,
name|retPartion
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|EXCLUDE_KEY_PREFIX
operator|+
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"included parameter key is not found in the response"
argument_list|,
name|retPartion
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|EXCLUDE_KEY_PREFIX
operator|+
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Additional parameters returned other than inclusion keys"
argument_list|,
literal|1
argument_list|,
name|retPartion
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionProjectionExcludeParameters
parameter_list|()
throws|throws
name|Throwable
block|{
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|GetPartitionsProjectionSpec
name|projectSpec
init|=
name|request
operator|.
name|getProjectionSpec
argument_list|()
decl_stmt|;
name|projectSpec
operator|.
name|setFieldList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"dbName"
argument_list|,
literal|"tableName"
argument_list|,
literal|"catName"
argument_list|,
literal|"parameters"
argument_list|,
literal|"values"
argument_list|)
argument_list|)
expr_stmt|;
name|projectSpec
operator|.
name|setExcludeParamKeyPattern
argument_list|(
name|EXCLUDE_KEY_PREFIX
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|GetPartitionsResponse
name|response
init|=
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSharedSDPartitionSpec
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"All the partitions should be returned in sharedSD spec"
argument_list|,
name|partitionSpecWithSharedSD
argument_list|)
expr_stmt|;
name|PartitionListComposingSpec
name|partitionListComposingSpec
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartitionList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Partition list composing spec should be null"
argument_list|,
name|partitionListComposingSpec
argument_list|)
expr_stmt|;
for|for
control|(
name|PartitionWithoutSD
name|retPartion
range|:
name|partitionSpecWithSharedSD
operator|.
name|getPartitions
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"excluded parameter key is found in the response"
argument_list|,
name|retPartion
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|EXCLUDE_KEY_PREFIX
operator|+
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"excluded parameter key is found in the response"
argument_list|,
name|retPartion
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|EXCLUDE_KEY_PREFIX
operator|+
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedMultiValuedFieldProjection
parameter_list|()
throws|throws
name|TException
block|{
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|GetPartitionsProjectionSpec
name|projectSpec
init|=
name|request
operator|.
name|getProjectionSpec
argument_list|()
decl_stmt|;
name|projectSpec
operator|.
name|setFieldList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"sd.cols.name"
argument_list|,
literal|"sd.cols.type"
argument_list|)
argument_list|)
expr_stmt|;
name|GetPartitionsResponse
name|response
init|=
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSharedSDPartitionSpec
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sharedSD
init|=
name|partitionSpecWithSharedSD
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"sd.cols were requested but was not returned"
argument_list|,
name|sharedSD
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|sharedSD
operator|.
name|getCols
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"sd.cols.name was requested but was not returned"
argument_list|,
name|col
operator|.
name|isSetName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"sd.cols.type was requested but was not returned"
argument_list|,
name|col
operator|.
name|isSetType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"sd.cols.comment was not requested but was returned"
argument_list|,
name|col
operator|.
name|isSetComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParameterExpansion
parameter_list|()
throws|throws
name|TException
block|{
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|GetPartitionsProjectionSpec
name|projectSpec
init|=
name|request
operator|.
name|getProjectionSpec
argument_list|()
decl_stmt|;
name|projectSpec
operator|.
name|setFieldList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"sd.cols"
argument_list|,
literal|"sd.serdeInfo"
argument_list|)
argument_list|)
expr_stmt|;
name|GetPartitionsResponse
name|response
init|=
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSharedSDPartitionSpec
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sharedSD
init|=
name|partitionSpecWithSharedSD
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"sd.cols were requested but was not returned"
argument_list|,
name|sharedSD
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Returned serdeInfo does not match with original serdeInfo"
argument_list|,
name|origPartitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"sd.serdeInfo were requested but was not returned"
argument_list|,
name|sharedSD
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Returned serdeInfo does not match with original serdeInfo"
argument_list|,
name|origPartitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonStandardPartitions
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|testTblName
init|=
literal|"test_non_standard"
decl_stmt|;
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|testTblName
argument_list|)
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"ns_c1"
argument_list|,
literal|"string"
argument_list|,
literal|"comment 1"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"ns_c2"
argument_list|,
literal|"int"
argument_list|,
literal|"comment 2"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"part"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"city"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|addBucketCol
argument_list|(
literal|"ns_c1"
argument_list|)
operator|.
name|addSortCol
argument_list|(
literal|"ns_c2"
argument_list|,
literal|1
argument_list|)
operator|.
name|addTableParam
argument_list|(
literal|"tblparamKey"
argument_list|,
literal|"Partitions of this table are not located within table directory"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|testTblName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unable to create a test table "
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|createPartition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p1"
argument_list|,
literal|"SanFrancisco"
argument_list|)
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|createPartition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p1"
argument_list|,
literal|"PaloAlto"
argument_list|)
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|createPartition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p2"
argument_list|,
literal|"Seattle"
argument_list|)
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|createPartition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p2"
argument_list|,
literal|"Phoenix"
argument_list|)
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
comment|// change locations of two of the partitions outside table directory
name|List
argument_list|<
name|Partition
argument_list|>
name|testPartitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|testTblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|testPartitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|p1
init|=
name|testPartitions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|p1
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
literal|"/tmp/some_other_location/part=p2/city=Seattle"
argument_list|)
expr_stmt|;
name|Partition
name|p2
init|=
name|testPartitions
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|p2
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
literal|"/tmp/some_other_location/part=p2/city=Phoenix"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_partitions
argument_list|(
name|dbName
argument_list|,
name|testTblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|getProjectionSpec
argument_list|()
operator|.
name|setFieldList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"values"
argument_list|,
literal|"sd"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTblName
argument_list|(
name|testTblName
argument_list|)
expr_stmt|;
name|GetPartitionsResponse
name|response
init|=
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Response should have returned partition specs"
argument_list|,
name|response
operator|.
name|getPartitionSpec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"We should have two partition specs"
argument_list|,
literal|2
argument_list|,
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"One SharedSD spec is expected"
argument_list|,
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSharedSDPartitionSpec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"One composing spec is expected"
argument_list|,
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPartitionList
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSharedSDPartitionSpec
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"sd was requested but not returned"
argument_list|,
name|partitionSpecWithSharedSD
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"shared SD should have table location"
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|partitionSpecWithSharedSD
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expectedVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|expectedVals
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p1"
argument_list|,
literal|"PaloAlto"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedVals
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p1"
argument_list|,
literal|"SanFrancisco"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionSpecWithSharedSD
operator|.
name|getPartitions
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PartitionWithoutSD
name|retPartition
init|=
name|partitionSpecWithSharedSD
operator|.
name|getPartitions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|retPartition
operator|.
name|getValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|validateList
argument_list|(
name|expectedVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|retPartition
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"parameters were not requested so should have been null"
argument_list|,
name|retPartition
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PartitionListComposingSpec
name|composingSpec
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPartitionList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"composing spec should have returned 2 partitions"
argument_list|,
name|composingSpec
operator|.
name|getPartitions
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"composing spec should have returned 2 partitions"
argument_list|,
literal|2
argument_list|,
name|composingSpec
operator|.
name|getPartitionsSize
argument_list|()
argument_list|)
expr_stmt|;
name|expectedVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedVals
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p2"
argument_list|,
literal|"Phoenix"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedVals
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p2"
argument_list|,
literal|"Seattle"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|composingSpec
operator|.
name|getPartitions
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Partition
name|partition
init|=
name|composingSpec
operator|.
name|getPartitions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partition
operator|.
name|getValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|validateList
argument_list|(
name|expectedVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"parameters were not requested so should have been null"
argument_list|,
name|partition
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidProjectFieldNames
parameter_list|()
throws|throws
name|TException
block|{
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|GetPartitionsProjectionSpec
name|projectSpec
init|=
name|request
operator|.
name|getProjectionSpec
argument_list|()
decl_stmt|;
name|projectSpec
operator|.
name|setFieldList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"values"
argument_list|,
literal|"invalid.field.name"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidProjectFieldNames2
parameter_list|()
throws|throws
name|TException
block|{
name|GetPartitionsRequest
name|request
init|=
name|getGetPartitionsRequest
argument_list|()
decl_stmt|;
name|GetPartitionsProjectionSpec
name|projectSpec
init|=
name|request
operator|.
name|getProjectionSpec
argument_list|()
decl_stmt|;
name|projectSpec
operator|.
name|setFieldList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|getPartitionsWithSpecs
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateBasic
parameter_list|(
name|GetPartitionsResponse
name|response
parameter_list|)
throws|throws
name|TException
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Response is null"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Returned partition spec is null"
argument_list|,
name|response
operator|.
name|getPartitionSpec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getPartitionSpecSize
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
name|response
operator|.
name|getPartitionSpec
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSharedSDPartitionSpec
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|partitionSpecWithSharedSD
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sharedSD
init|=
name|partitionSpecWithSharedSD
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Root location should be set to table location"
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitionWithoutSDS
init|=
name|partitionSpecWithSharedSD
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|origPartitions
operator|.
name|size
argument_list|()
argument_list|,
name|partitionWithoutSDS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|origPartitions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Partition
name|origPartition
init|=
name|origPartitions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PartitionWithoutSD
name|returnedPartitionWithoutSD
init|=
name|partitionWithoutSDS
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Location returned for Partition %d is not correct"
argument_list|,
name|i
argument_list|)
argument_list|,
name|origPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|sharedSD
operator|.
name|getLocation
argument_list|()
operator|+
name|returnedPartitionWithoutSD
operator|.
name|getRelativePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|GetPartitionsRequest
name|getGetPartitionsRequest
parameter_list|()
block|{
name|GetPartitionsRequest
name|request
init|=
operator|new
name|GetPartitionsRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setProjectionSpec
argument_list|(
operator|new
name|GetPartitionsProjectionSpec
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setFilterSpec
argument_list|(
operator|new
name|GetPartitionsFilterSpec
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTblName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
specifier|private
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|validateMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|aMap
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|bMap
parameter_list|)
block|{
if|if
condition|(
operator|(
name|aMap
operator|==
literal|null
operator|||
name|aMap
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|bMap
operator|==
literal|null
operator|||
name|bMap
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
comment|// Equality is verified here because metastore updates stats automatically
comment|// and adds them in the returned partition. So the returned partition will
comment|// have parameters + some more parameters for the basic stats
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bMap
operator|.
name|size
argument_list|()
operator|>=
name|aMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entries
range|:
name|aMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|entries
operator|.
name|getKey
argument_list|()
operator|+
literal|" is missing from the map"
argument_list|,
name|bMap
operator|.
name|containsKey
argument_list|(
name|entries
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected value to be "
operator|+
name|aMap
operator|.
name|get
argument_list|(
name|entries
operator|.
name|getKey
argument_list|()
argument_list|)
operator|+
literal|" found"
operator|+
name|bMap
operator|.
name|get
argument_list|(
name|entries
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|aMap
operator|.
name|get
argument_list|(
name|entries
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|bMap
operator|.
name|get
argument_list|(
name|entries
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|validateList
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|aList
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|bList
parameter_list|)
block|{
if|if
condition|(
operator|(
name|aList
operator|==
literal|null
operator|||
name|aList
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|bList
operator|==
literal|null
operator|||
name|bList
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aList
operator|.
name|size
argument_list|()
argument_list|,
name|bList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|T
argument_list|>
name|origValuesIt
init|=
name|aList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|T
argument_list|>
name|retValuesIt
init|=
name|bList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|origValuesIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retValuesIt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|origValuesIt
operator|.
name|next
argument_list|()
argument_list|,
name|retValuesIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

