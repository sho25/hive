begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|dbinstall
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|schematool
operator|.
name|MetastoreSchemaTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
import|;
end_import

begin_comment
comment|/**  * JUnit TestRule for Derby.  */
end_comment

begin_class
specifier|public
class|class
name|Derby
extends|extends
name|DatabaseRule
block|{
annotation|@
name|Override
specifier|public
name|String
name|getDockerImageName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getDockerAdditionalArgs
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDbType
parameter_list|()
block|{
return|return
literal|"derby"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDbRootUser
parameter_list|()
block|{
return|return
literal|"APP"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHiveUser
parameter_list|()
block|{
return|return
literal|"APP"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDbRootPassword
parameter_list|()
block|{
return|return
literal|"mine"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHivePassword
parameter_list|()
block|{
return|return
literal|"mine"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJdbcDriver
parameter_list|()
block|{
return|return
literal|"org.apache.derby.jdbc.EmbeddedDriver"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJdbcUrl
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"jdbc:derby:memory:%s/%s;create=true"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
argument_list|,
name|getDb
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getInitialJdbcUrl
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"jdbc:derby:memory:%s/%s;create=true"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
argument_list|,
name|getDb
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDb
parameter_list|()
block|{
return|return
name|MetaStoreServerUtils
operator|.
name|JUNIT_DATABASE_PREFIX
return|;
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isContainerReady
parameter_list|(
name|String
name|logOutput
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|MetastoreSchemaTool
operator|.
name|setHomeDirForTesting
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
block|{
comment|// no-op, no need for docker container for derby
block|}
annotation|@
name|Override
specifier|public
name|int
name|createUser
parameter_list|()
block|{
return|return
literal|0
return|;
comment|// no-op
block|}
block|}
end_class

end_unit

