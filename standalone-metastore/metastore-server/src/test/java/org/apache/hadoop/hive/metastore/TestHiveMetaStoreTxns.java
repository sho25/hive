begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidReadTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DataOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HeartbeatTxnRangeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link org.apache.hadoop.hive.metastore.HiveMetaStoreClient}.  For now this just has  * transaction and locking tests.  The goal here is not to test all  * functionality possible through the interface, as all permutations of DB  * operations should be tested in the appropriate DB handler classes.  The  * goal is to test that we can properly pass the messages through the thrift  * service.  *  * This is in the ql directory rather than the metastore directory because it  * required the hive-exec jar, and hive-exec jar already depends on  * hive-metastore jar, thus I can't make hive-metastore depend on hive-exec.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHiveMetaStoreTxns
block|{
specifier|private
specifier|final
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|Connection
name|conn
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testTxns
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|tids
init|=
name|client
operator|.
name|openTxns
argument_list|(
literal|"me"
argument_list|,
literal|3
argument_list|)
operator|.
name|getTxn_ids
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
operator|(
name|long
operator|)
name|tids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2L
argument_list|,
operator|(
name|long
operator|)
name|tids
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3L
argument_list|,
operator|(
name|long
operator|)
name|tids
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|rollbackTxn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|client
operator|.
name|commitTxn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ValidTxnList
name|validTxns
init|=
name|client
operator|.
name|getValidTxns
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|validTxns
operator|.
name|isTxnValid
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|validTxns
operator|.
name|isTxnValid
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|validTxns
operator|.
name|isTxnValid
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|validTxns
operator|.
name|isTxnValid
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpenTxnNotExcluded
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|tids
init|=
name|client
operator|.
name|openTxns
argument_list|(
literal|"me"
argument_list|,
literal|3
argument_list|)
operator|.
name|getTxn_ids
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
operator|(
name|long
operator|)
name|tids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2L
argument_list|,
operator|(
name|long
operator|)
name|tids
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3L
argument_list|,
operator|(
name|long
operator|)
name|tids
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|rollbackTxn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|client
operator|.
name|commitTxn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ValidTxnList
name|validTxns
init|=
name|client
operator|.
name|getValidTxns
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|validTxns
operator|.
name|isTxnValid
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|validTxns
operator|.
name|isTxnValid
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|validTxns
operator|.
name|isTxnValid
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|validTxns
operator|.
name|isTxnValid
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTxNWithKeyValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stm
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
literal|"mydbKeyValue"
decl_stmt|;
name|String
name|tblName
init|=
literal|"mytable"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|db
operator|.
name|unsetCatalogName
argument_list|()
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|setType
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|stm
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO TABLE_PARAMS(TBL_ID, PARAM_KEY)"
operator|+
literal|" VALUES("
operator|+
name|tbl
operator|.
name|getId
argument_list|()
operator|+
name|String
operator|.
name|format
argument_list|(
literal|", '%smykey')"
argument_list|,
name|TxnStore
operator|.
name|TXN_KEY_START
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|tids
init|=
name|client
operator|.
name|openTxns
argument_list|(
literal|"me"
argument_list|,
literal|1
argument_list|)
operator|.
name|getTxn_ids
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
operator|(
name|long
operator|)
name|tids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|commitTxnWithKeyValue
argument_list|(
literal|1
argument_list|,
name|tbl
operator|.
name|getId
argument_list|()
argument_list|,
name|TxnStore
operator|.
name|TXN_KEY_START
operator|+
literal|"mykey"
argument_list|,
literal|"myvalue"
argument_list|)
expr_stmt|;
name|ValidTxnList
name|validTxns
init|=
name|client
operator|.
name|getValidTxns
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|validTxns
operator|.
name|isTxnValid
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stm
operator|.
name|executeQuery
argument_list|(
literal|"SELECT TBL_ID, PARAM_KEY, PARAM_VALUE"
operator|+
literal|" FROM TABLE_PARAMS WHERE TBL_ID = "
operator|+
name|tbl
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
argument_list|,
name|tbl
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|TxnStore
operator|.
name|TXN_KEY_START
operator|+
literal|"mykey"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"myvalue"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|stm
operator|.
name|execute
argument_list|(
literal|"DELETE FROM TABLE_PARAMS WHERE TBL_ID = "
operator|+
name|tbl
operator|.
name|getId
argument_list|()
operator|+
name|String
operator|.
name|format
argument_list|(
literal|" AND PARAM_KEY = '%smykey'"
argument_list|,
name|TxnStore
operator|.
name|TXN_KEY_START
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTxNWithKeyValueNoTableId
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|tids
init|=
name|client
operator|.
name|openTxns
argument_list|(
literal|"me"
argument_list|,
literal|1
argument_list|)
operator|.
name|getTxn_ids
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
operator|(
name|long
operator|)
name|tids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|commitTxnWithKeyValue
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
name|TxnStore
operator|.
name|TXN_KEY_START
operator|+
literal|"mykey"
argument_list|,
literal|"myvalue"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should have raised exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"key="
operator|+
name|TxnStore
operator|.
name|TXN_KEY_START
operator|+
literal|"mykey"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"value=myvalue"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Only one row should have been affected but"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ValidTxnList
name|validTxns
init|=
name|client
operator|.
name|getValidTxns
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|validTxns
operator|.
name|isTxnValid
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTxNWithKeyWrongPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"mydbKeyValueWrongPrefix"
decl_stmt|;
name|String
name|tblName
init|=
literal|"mytable"
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|tids
init|=
name|client
operator|.
name|openTxns
argument_list|(
literal|"me"
argument_list|,
literal|1
argument_list|)
operator|.
name|getTxn_ids
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
operator|(
name|long
operator|)
name|tids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|db
operator|.
name|unsetCatalogName
argument_list|()
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|setType
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|client
operator|.
name|commitTxnWithKeyValue
argument_list|(
literal|1
argument_list|,
name|tbl
operator|.
name|getId
argument_list|()
argument_list|,
literal|"mykey"
argument_list|,
literal|"myvalue"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should have raised exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"key=mykey"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"value=myvalue"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"key should start with"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
name|ValidTxnList
name|validTxns
init|=
name|client
operator|.
name|getValidTxns
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|validTxns
operator|.
name|isTxnValid
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocks
parameter_list|()
throws|throws
name|Exception
block|{
name|LockRequestBuilder
name|rqstBuilder
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|rqstBuilder
operator|.
name|addLockComponent
argument_list|(
operator|new
name|LockComponentBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"mydb"
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"mytable"
argument_list|)
operator|.
name|setPartitionName
argument_list|(
literal|"mypartition"
argument_list|)
operator|.
name|setExclusive
argument_list|()
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|NO_TXN
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|rqstBuilder
operator|.
name|addLockComponent
argument_list|(
operator|new
name|LockComponentBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"mydb"
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"yourtable"
argument_list|)
operator|.
name|setSemiShared
argument_list|()
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|NO_TXN
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|rqstBuilder
operator|.
name|addLockComponent
argument_list|(
operator|new
name|LockComponentBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"yourdb"
argument_list|)
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|NO_TXN
argument_list|)
operator|.
name|setShared
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|rqstBuilder
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockResponse
name|res
init|=
name|client
operator|.
name|lock
argument_list|(
name|rqstBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|res
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockState
operator|.
name|ACQUIRED
argument_list|,
name|res
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|client
operator|.
name|checkLock
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|res
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockState
operator|.
name|ACQUIRED
argument_list|,
name|res
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|heartbeat
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|client
operator|.
name|unlock
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocksWithTxn
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|txnid
init|=
name|client
operator|.
name|openTxn
argument_list|(
literal|"me"
argument_list|)
decl_stmt|;
name|LockRequestBuilder
name|rqstBuilder
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|rqstBuilder
operator|.
name|setTransactionId
argument_list|(
name|txnid
argument_list|)
operator|.
name|addLockComponent
argument_list|(
operator|new
name|LockComponentBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"mydb"
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"mytable"
argument_list|)
operator|.
name|setPartitionName
argument_list|(
literal|"mypartition"
argument_list|)
operator|.
name|setSemiShared
argument_list|()
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addLockComponent
argument_list|(
operator|new
name|LockComponentBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"mydb"
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"yourtable"
argument_list|)
operator|.
name|setSemiShared
argument_list|()
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addLockComponent
argument_list|(
operator|new
name|LockComponentBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
literal|"yourdb"
argument_list|)
operator|.
name|setShared
argument_list|()
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|SELECT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockResponse
name|res
init|=
name|client
operator|.
name|lock
argument_list|(
name|rqstBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|res
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockState
operator|.
name|ACQUIRED
argument_list|,
name|res
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|client
operator|.
name|checkLock
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|res
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockState
operator|.
name|ACQUIRED
argument_list|,
name|res
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|heartbeat
argument_list|(
name|txnid
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|client
operator|.
name|commitTxn
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringifyValidTxns
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test with just high water mark
name|ValidTxnList
name|validTxns
init|=
operator|new
name|ValidReadTxnList
argument_list|(
literal|"1:"
operator|+
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|"::"
argument_list|)
decl_stmt|;
name|String
name|asString
init|=
name|validTxns
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1:"
operator|+
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|"::"
argument_list|,
name|asString
argument_list|)
expr_stmt|;
name|validTxns
operator|=
operator|new
name|ValidReadTxnList
argument_list|(
name|asString
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|validTxns
operator|.
name|getHighWatermark
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|validTxns
operator|.
name|getInvalidTransactions
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|validTxns
operator|.
name|getInvalidTransactions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|asString
operator|=
name|validTxns
operator|.
name|toString
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1:"
operator|+
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|"::"
argument_list|,
name|asString
argument_list|)
expr_stmt|;
name|validTxns
operator|=
operator|new
name|ValidReadTxnList
argument_list|(
name|asString
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|validTxns
operator|.
name|getHighWatermark
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|validTxns
operator|.
name|getInvalidTransactions
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|validTxns
operator|.
name|getInvalidTransactions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Test with open transactions
name|validTxns
operator|=
operator|new
name|ValidReadTxnList
argument_list|(
literal|"10:3:5:3"
argument_list|)
expr_stmt|;
name|asString
operator|=
name|validTxns
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|asString
operator|.
name|equals
argument_list|(
literal|"10:3:3:5"
argument_list|)
operator|&&
operator|!
name|asString
operator|.
name|equals
argument_list|(
literal|"10:3:5:3"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected string value "
operator|+
name|asString
argument_list|)
expr_stmt|;
block|}
name|validTxns
operator|=
operator|new
name|ValidReadTxnList
argument_list|(
name|asString
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|validTxns
operator|.
name|getHighWatermark
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|validTxns
operator|.
name|getInvalidTransactions
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|validTxns
operator|.
name|getInvalidTransactions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|boolean
name|sawThree
init|=
literal|false
decl_stmt|,
name|sawFive
init|=
literal|false
decl_stmt|;
for|for
control|(
name|long
name|tid
range|:
name|validTxns
operator|.
name|getInvalidTransactions
argument_list|()
control|)
block|{
if|if
condition|(
name|tid
operator|==
literal|3
condition|)
name|sawThree
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|tid
operator|==
literal|5
condition|)
name|sawFive
operator|=
literal|true
expr_stmt|;
else|else
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected value "
operator|+
name|tid
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawThree
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawFive
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpenTxnWithType
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|txnId
init|=
name|client
operator|.
name|openTxn
argument_list|(
literal|"me"
argument_list|,
name|TxnType
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|client
operator|.
name|commitTxn
argument_list|(
name|txnId
argument_list|)
expr_stmt|;
name|ValidTxnList
name|validTxns
init|=
name|client
operator|.
name|getValidTxns
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|validTxns
operator|.
name|isTxnValid
argument_list|(
name|txnId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|ConfVars
operator|.
name|HIVE_IN_TEST
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|connectionStr
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECT_URL_KEY
argument_list|)
decl_stmt|;
name|conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectionStr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

