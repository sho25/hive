begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|CatalogBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|HadoopThriftAuthBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestPartitionManagement
block|{
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EXPRESSION_PROXY_CLASS
operator|.
name|getVarname
argument_list|()
argument_list|,
name|MsckPartitionExpressionProxy
operator|.
name|class
argument_list|,
name|PartitionExpressionProxy
operator|.
name|class
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|MULTITHREADED
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|startMetaStoreWithRetry
argument_list|(
name|HadoopThriftAuthBridge
operator|.
name|getBridge
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
comment|// Drop any left over catalogs
name|List
argument_list|<
name|String
argument_list|>
name|catalogs
init|=
name|client
operator|.
name|getCatalogs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|catName
range|:
name|catalogs
control|)
block|{
if|if
condition|(
operator|!
name|catName
operator|.
name|equalsIgnoreCase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
condition|)
block|{
comment|// First drop any databases in catalog
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|client
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|db
range|:
name|databases
control|)
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|catName
argument_list|,
name|db
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropCatalog
argument_list|(
name|catName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|client
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|db
range|:
name|databases
control|)
block|{
if|if
condition|(
operator|!
name|db
operator|.
name|equalsIgnoreCase
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
condition|)
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|catName
argument_list|,
name|db
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|buildAllColumns
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|Column
index|[]
name|cols
init|=
block|{
operator|new
name|Column
argument_list|(
literal|"b"
argument_list|,
literal|"binary"
argument_list|)
block|,
operator|new
name|Column
argument_list|(
literal|"bo"
argument_list|,
literal|"boolean"
argument_list|)
block|,
operator|new
name|Column
argument_list|(
literal|"d"
argument_list|,
literal|"date"
argument_list|)
block|,
operator|new
name|Column
argument_list|(
literal|"do"
argument_list|,
literal|"double"
argument_list|)
block|,
operator|new
name|Column
argument_list|(
literal|"l"
argument_list|,
literal|"bigint"
argument_list|)
block|,
operator|new
name|Column
argument_list|(
literal|"s"
argument_list|,
literal|"string"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|Column
name|c
range|:
name|cols
control|)
block|{
name|colMap
operator|.
name|put
argument_list|(
name|c
operator|.
name|colName
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|colMap
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createMetadata
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partKeys
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partKeyTypes
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
parameter_list|,
name|boolean
name|isOrc
parameter_list|)
throws|throws
name|TException
block|{
if|if
condition|(
operator|!
name|DEFAULT_CATALOG_NAME
operator|.
name|equals
argument_list|(
name|catName
argument_list|)
condition|)
block|{
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|catName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
block|}
name|Database
name|db
decl_stmt|;
if|if
condition|(
operator|!
name|DEFAULT_DATABASE_NAME
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
name|DatabaseBuilder
name|dbBuilder
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|dbBuilder
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|db
operator|=
name|dbBuilder
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|db
operator|=
name|client
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
block|}
name|TableBuilder
name|tb
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOrc
condition|)
block|{
name|tb
operator|.
name|setInputFormat
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat"
argument_list|)
operator|.
name|setOutputFormat
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Column
name|col
range|:
name|colMap
operator|.
name|values
argument_list|()
control|)
block|{
name|tb
operator|.
name|addCol
argument_list|(
name|col
operator|.
name|colName
argument_list|,
name|col
operator|.
name|colType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partKeys
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|partKeyTypes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"partKeyTypes cannot be null when partKeys is non-null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|partKeys
operator|.
name|size
argument_list|()
operator|!=
name|partKeyTypes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"partKeys and partKeyTypes size should be same"
argument_list|)
throw|;
block|}
if|if
condition|(
name|partVals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"partVals cannot be empty for patitioned table"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partKeys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|tb
operator|.
name|addPartCol
argument_list|(
name|partKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|partKeyTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Table
name|table
init|=
name|tb
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|partKeys
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|partVal
range|:
name|partVals
control|)
block|{
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
operator|.
name|setValues
argument_list|(
name|partVal
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|partKeys
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partKeys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|partKey
init|=
name|partKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|partVal
range|:
name|partVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
control|)
block|{
name|String
name|partName
init|=
name|partKey
operator|+
literal|"="
operator|+
name|partVal
decl_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|partName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|client
operator|.
name|flushCache
argument_list|()
expr_stmt|;
return|return
name|partNames
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionDiscoveryDisabledByDefault
parameter_list|()
throws|throws
name|TException
throws|,
name|IOException
block|{
name|String
name|dbName
init|=
literal|"db1"
decl_stmt|;
name|String
name|tableName
init|=
literal|"tbl1"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"state"
argument_list|,
literal|"dt"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeyTypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"string"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"__HIVE_DEFAULT_PARTITION__"
argument_list|,
literal|"1990-01-01"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"CA"
argument_list|,
literal|"1986-04-28"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"MN"
argument_list|,
literal|"2018-11-31"
argument_list|)
argument_list|)
decl_stmt|;
name|createMetadata
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partKeys
argument_list|,
name|partKeyTypes
argument_list|,
name|partVals
argument_list|,
name|colMap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLocation
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|URI
name|location
init|=
name|URI
operator|.
name|create
argument_list|(
name|tableLocation
argument_list|)
decl_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|location
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=WA/dt=2018-12-01"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=UT/dt=2018-12-02"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|tablePath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// partition discovery is not enabled via table property, so nothing should change on this table
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// table property is set to false, so no change expected
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|PartitionManagementTask
operator|.
name|DISCOVER_PARTITIONS_TBLPROPERTY
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionDiscoveryEnabledBothTableTypes
parameter_list|()
throws|throws
name|TException
throws|,
name|IOException
block|{
name|String
name|dbName
init|=
literal|"db2"
decl_stmt|;
name|String
name|tableName
init|=
literal|"tbl2"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"state"
argument_list|,
literal|"dt"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeyTypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"string"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"__HIVE_DEFAULT_PARTITION__"
argument_list|,
literal|"1990-01-01"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"CA"
argument_list|,
literal|"1986-04-28"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"MN"
argument_list|,
literal|"2018-11-31"
argument_list|)
argument_list|)
decl_stmt|;
name|createMetadata
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partKeys
argument_list|,
name|partKeyTypes
argument_list|,
name|partVals
argument_list|,
name|colMap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLocation
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|URI
name|location
init|=
name|URI
operator|.
name|create
argument_list|(
name|tableLocation
argument_list|)
decl_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|location
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|newPart1
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=WA/dt=2018-12-01"
argument_list|)
decl_stmt|;
name|Path
name|newPart2
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=UT/dt=2018-12-02"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|tablePath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// table property is set to true, we expect 5 partitions
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|PartitionManagementTask
operator|.
name|DISCOVER_PARTITIONS_TBLPROPERTY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// change table type to external, delete a partition directory and make sure partition discovery works
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|boolean
name|deleted
init|=
name|fs
operator|.
name|delete
argument_list|(
name|newPart1
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|tablePath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove external tables from partition discovery and expect no changes even after partition is deleted
name|conf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PARTITION_MANAGEMENT_TABLE_TYPES
operator|.
name|getVarname
argument_list|()
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|deleted
operator|=
name|fs
operator|.
name|delete
argument_list|(
name|newPart2
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|tablePath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// this doesn't remove partition because table is still external and we have remove external table type from
comment|// partition discovery
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// no table types specified, msck will not select any tables
name|conf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PARTITION_MANAGEMENT_TABLE_TYPES
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// only EXTERNAL table type, msck should drop a partition now
name|conf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PARTITION_MANAGEMENT_TABLE_TYPES
operator|.
name|getVarname
argument_list|()
argument_list|,
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionDiscoveryNonDefaultCatalog
parameter_list|()
throws|throws
name|TException
throws|,
name|IOException
block|{
name|String
name|catName
init|=
literal|"cat3"
decl_stmt|;
name|String
name|dbName
init|=
literal|"db3"
decl_stmt|;
name|String
name|tableName
init|=
literal|"tbl3"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"state"
argument_list|,
literal|"dt"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeyTypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"string"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"__HIVE_DEFAULT_PARTITION__"
argument_list|,
literal|"1990-01-01"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"CA"
argument_list|,
literal|"1986-04-28"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"MN"
argument_list|,
literal|"2018-11-31"
argument_list|)
argument_list|)
decl_stmt|;
name|createMetadata
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partKeys
argument_list|,
name|partKeyTypes
argument_list|,
name|partVals
argument_list|,
name|colMap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLocation
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|URI
name|location
init|=
name|URI
operator|.
name|create
argument_list|(
name|tableLocation
argument_list|)
decl_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|location
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|newPart1
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=WA/dt=2018-12-01"
argument_list|)
decl_stmt|;
name|Path
name|newPart2
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=UT/dt=2018-12-02"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|tablePath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|PartitionManagementTask
operator|.
name|DISCOVER_PARTITIONS_TBLPROPERTY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
comment|// default catalog in conf is 'hive' but we are using 'cat3' as catName for this test, so msck should not fix
comment|// anything for this one
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// using the correct catalog name, we expect msck to fix partitions
name|conf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PARTITION_MANAGEMENT_CATALOG_NAME
operator|.
name|getVarname
argument_list|()
argument_list|,
name|catName
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionDiscoveryDBPattern
parameter_list|()
throws|throws
name|TException
throws|,
name|IOException
block|{
name|String
name|dbName
init|=
literal|"db4"
decl_stmt|;
name|String
name|tableName
init|=
literal|"tbl4"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"state"
argument_list|,
literal|"dt"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeyTypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"string"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"__HIVE_DEFAULT_PARTITION__"
argument_list|,
literal|"1990-01-01"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"CA"
argument_list|,
literal|"1986-04-28"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"MN"
argument_list|,
literal|"2018-11-31"
argument_list|)
argument_list|)
decl_stmt|;
name|createMetadata
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partKeys
argument_list|,
name|partKeyTypes
argument_list|,
name|partVals
argument_list|,
name|colMap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLocation
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|URI
name|location
init|=
name|URI
operator|.
name|create
argument_list|(
name|tableLocation
argument_list|)
decl_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|location
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|newPart1
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=WA/dt=2018-12-01"
argument_list|)
decl_stmt|;
name|Path
name|newPart2
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=UT/dt=2018-12-02"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|tablePath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|PartitionManagementTask
operator|.
name|DISCOVER_PARTITIONS_TBLPROPERTY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
comment|// no match for this db pattern, so we will see only 3 partitions
name|conf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PARTITION_MANAGEMENT_DATABASE_PATTERN
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"*dbfoo*"
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// matching db pattern, we will see all 5 partitions now
name|conf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PARTITION_MANAGEMENT_DATABASE_PATTERN
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"*db4*"
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionDiscoveryTablePattern
parameter_list|()
throws|throws
name|TException
throws|,
name|IOException
block|{
name|String
name|dbName
init|=
literal|"db5"
decl_stmt|;
name|String
name|tableName
init|=
literal|"tbl5"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"state"
argument_list|,
literal|"dt"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeyTypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"string"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"__HIVE_DEFAULT_PARTITION__"
argument_list|,
literal|"1990-01-01"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"CA"
argument_list|,
literal|"1986-04-28"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"MN"
argument_list|,
literal|"2018-11-31"
argument_list|)
argument_list|)
decl_stmt|;
name|createMetadata
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partKeys
argument_list|,
name|partKeyTypes
argument_list|,
name|partVals
argument_list|,
name|colMap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLocation
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|URI
name|location
init|=
name|URI
operator|.
name|create
argument_list|(
name|tableLocation
argument_list|)
decl_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|location
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|newPart1
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=WA/dt=2018-12-01"
argument_list|)
decl_stmt|;
name|Path
name|newPart2
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=UT/dt=2018-12-02"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|tablePath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|PartitionManagementTask
operator|.
name|DISCOVER_PARTITIONS_TBLPROPERTY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
comment|// no match for this table pattern, so we will see only 3 partitions
name|conf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PARTITION_MANAGEMENT_TABLE_PATTERN
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"*tblfoo*"
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// matching table pattern, we will see all 5 partitions now
name|conf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PARTITION_MANAGEMENT_TABLE_PATTERN
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"tbl5*"
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionDiscoveryTransactionalTable
parameter_list|()
throws|throws
name|TException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|String
name|dbName
init|=
literal|"db6"
decl_stmt|;
name|String
name|tableName
init|=
literal|"tbl6"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"state"
argument_list|,
literal|"dt"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeyTypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"string"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"__HIVE_DEFAULT_PARTITION__"
argument_list|,
literal|"1990-01-01"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"CA"
argument_list|,
literal|"1986-04-28"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"MN"
argument_list|,
literal|"2018-11-31"
argument_list|)
argument_list|)
decl_stmt|;
name|createMetadata
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partKeys
argument_list|,
name|partKeyTypes
argument_list|,
name|partVals
argument_list|,
name|colMap
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLocation
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|URI
name|location
init|=
name|URI
operator|.
name|create
argument_list|(
name|tableLocation
argument_list|)
decl_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|location
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|newPart1
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=WA/dt=2018-12-01"
argument_list|)
decl_stmt|;
name|Path
name|newPart2
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=UT/dt=2018-12-02"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|tablePath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|PartitionManagementTask
operator|.
name|DISCOVER_PARTITIONS_TBLPROPERTY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_TRANSACTIONAL_PROPERTIES
argument_list|,
name|TransactionalValidationListener
operator|.
name|INSERTONLY_TRANSACTIONAL_PROPERTY
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// only one partition discovery task is running, there will be no skipped attempts
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|PartitionManagementTask
operator|.
name|getSkippedAttempts
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete a partition from fs, and submit 3 tasks at the same time each of them trying to acquire X lock on the
comment|// same table, only one of them will run other attempts will be skipped
name|boolean
name|deleted
init|=
name|fs
operator|.
name|delete
argument_list|(
name|newPart1
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|tablePath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// 3 tasks are submitted at the same time, only one will eventually lock the table and only one get to run at a time
comment|// This is to simulate, skipping partition discovery task attempt when previous attempt is still incomplete
name|PartitionManagementTask
name|partitionDiscoveryTask1
init|=
operator|new
name|PartitionManagementTask
argument_list|()
decl_stmt|;
name|partitionDiscoveryTask1
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|PartitionManagementTask
name|partitionDiscoveryTask2
init|=
operator|new
name|PartitionManagementTask
argument_list|()
decl_stmt|;
name|partitionDiscoveryTask2
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|PartitionManagementTask
name|partitionDiscoveryTask3
init|=
operator|new
name|PartitionManagementTask
argument_list|()
decl_stmt|;
name|partitionDiscoveryTask3
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionManagementTask
argument_list|>
name|tasks
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionDiscoveryTask1
argument_list|,
name|partitionDiscoveryTask2
argument_list|,
name|partitionDiscoveryTask3
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|int
name|successBefore
init|=
name|PartitionManagementTask
operator|.
name|getCompletedAttempts
argument_list|()
decl_stmt|;
name|int
name|skippedBefore
init|=
name|PartitionManagementTask
operator|.
name|getSkippedAttempts
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PartitionManagementTask
name|task
range|:
name|tasks
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|executorService
operator|.
name|submit
argument_list|(
name|task
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|?
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|int
name|successAfter
init|=
name|PartitionManagementTask
operator|.
name|getCompletedAttempts
argument_list|()
decl_stmt|;
name|int
name|skippedAfter
init|=
name|PartitionManagementTask
operator|.
name|getSkippedAttempts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|successAfter
operator|-
name|successBefore
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|skippedAfter
operator|-
name|skippedBefore
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionRetention
parameter_list|()
throws|throws
name|TException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|dbName
init|=
literal|"db7"
decl_stmt|;
name|String
name|tableName
init|=
literal|"tbl7"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"state"
argument_list|,
literal|"dt"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeyTypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"string"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"__HIVE_DEFAULT_PARTITION__"
argument_list|,
literal|"1990-01-01"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"CA"
argument_list|,
literal|"1986-04-28"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"MN"
argument_list|,
literal|"2018-11-31"
argument_list|)
argument_list|)
decl_stmt|;
name|createMetadata
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partKeys
argument_list|,
name|partKeyTypes
argument_list|,
name|partVals
argument_list|,
name|colMap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLocation
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|URI
name|location
init|=
name|URI
operator|.
name|create
argument_list|(
name|tableLocation
argument_list|)
decl_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|location
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|newPart1
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=WA/dt=2018-12-01"
argument_list|)
decl_stmt|;
name|Path
name|newPart2
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=UT/dt=2018-12-02"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|tablePath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|PartitionManagementTask
operator|.
name|DISCOVER_PARTITIONS_TBLPROPERTY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|PartitionManagementTask
operator|.
name|PARTITION_RETENTION_PERIOD_TBLPROPERTY
argument_list|,
literal|"20000ms"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// after 30s all partitions should have been gone
name|Thread
operator|.
name|sleep
argument_list|(
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionDiscoverySkipInvalidPath
parameter_list|()
throws|throws
name|TException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|dbName
init|=
literal|"db8"
decl_stmt|;
name|String
name|tableName
init|=
literal|"tbl8"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|colMap
init|=
name|buildAllColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"state"
argument_list|,
literal|"dt"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partKeyTypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"string"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"__HIVE_DEFAULT_PARTITION__"
argument_list|,
literal|"1990-01-01"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"CA"
argument_list|,
literal|"1986-04-28"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"MN"
argument_list|,
literal|"2018-11-31"
argument_list|)
argument_list|)
decl_stmt|;
name|createMetadata
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partKeys
argument_list|,
name|partKeyTypes
argument_list|,
name|partVals
argument_list|,
name|colMap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLocation
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|URI
name|location
init|=
name|URI
operator|.
name|create
argument_list|(
name|tableLocation
argument_list|)
decl_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|location
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|newPart1
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=WA/dt=2018-12-01"
argument_list|)
decl_stmt|;
name|Path
name|newPart2
init|=
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
literal|"state=UT/dt="
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newPart2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|tablePath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|PartitionManagementTask
operator|.
name|DISCOVER_PARTITIONS_TBLPROPERTY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// empty retention period basically means disabled
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|PartitionManagementTask
operator|.
name|PARTITION_RETENTION_PERIOD_TBLPROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
comment|// there is one partition with invalid path which will get skipped
name|runPartitionManagementTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runPartitionManagementTask
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|PartitionManagementTask
name|task
init|=
operator|new
name|PartitionManagementTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|Column
block|{
specifier|private
name|String
name|colName
decl_stmt|;
specifier|private
name|String
name|colType
decl_stmt|;
specifier|public
name|Column
parameter_list|(
specifier|final
name|String
name|colName
parameter_list|,
specifier|final
name|String
name|colType
parameter_list|)
block|{
name|this
operator|.
name|colName
operator|=
name|colName
expr_stmt|;
name|this
operator|.
name|colType
operator|=
name|colType
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

