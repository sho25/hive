begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test the filtering behavior at HMS client and HMS server. The configuration at each test  * changes, and therefore HMS client and server are created for each test case  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestFilterHooks
block|{
specifier|public
specifier|static
class|class
name|DummyMetaStoreFilterHookImpl
implements|implements
name|MetaStoreFilterHook
block|{
specifier|private
specifier|static
name|boolean
name|blockResults
init|=
literal|false
decl_stmt|;
specifier|public
name|DummyMetaStoreFilterHookImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|filterDatabases
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dbList
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|blockResults
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
return|return
name|dbList
return|;
block|}
annotation|@
name|Override
specifier|public
name|Database
name|filterDatabase
parameter_list|(
name|Database
name|dataBase
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
if|if
condition|(
name|blockResults
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Blocked access"
argument_list|)
throw|;
block|}
return|return
name|dataBase
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|filterTableNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableList
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|blockResults
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
return|return
name|tableList
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|filterTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
if|if
condition|(
name|blockResults
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Blocked access"
argument_list|)
throw|;
block|}
return|return
name|table
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|filterTables
parameter_list|(
name|List
argument_list|<
name|Table
argument_list|>
name|tableList
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|blockResults
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
return|return
name|tableList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableMeta
argument_list|>
name|filterTableMetas
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|TableMeta
argument_list|>
name|tableMetas
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|tableMetas
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|filterPartitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionList
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|blockResults
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
return|return
name|partitionList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|filterPartitionSpecs
parameter_list|(
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|partitionSpecList
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|blockResults
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
return|return
name|partitionSpecList
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|filterPartition
parameter_list|(
name|Partition
name|partition
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
if|if
condition|(
name|blockResults
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Blocked access"
argument_list|)
throw|;
block|}
return|return
name|partition
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|filterPartitionNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|blockResults
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
return|return
name|partitionNames
return|;
block|}
block|}
specifier|protected
specifier|static
name|HiveMetaStoreClient
name|client
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|static
name|Warehouse
name|warehouse
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_LIMIT_PARTITION_REQUEST
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
name|String
name|DBNAME1
init|=
literal|"testdb1"
decl_stmt|;
specifier|private
specifier|static
name|String
name|DBNAME2
init|=
literal|"testdb2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TAB1
init|=
literal|"tab1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TAB2
init|=
literal|"tab2"
decl_stmt|;
specifier|protected
name|HiveMetaStoreClient
name|createClient
parameter_list|(
name|Configuration
name|metaStoreConf
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
operator|new
name|HiveMetaStoreClient
argument_list|(
name|metaStoreConf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to open the metastore"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyMetaStoreFilterHookImpl
operator|.
name|blockResults
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUpForTest
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|THRIFT_CONNECTION_RETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setClass
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|FILTER_HOOK
argument_list|,
name|DummyMetaStoreFilterHookImpl
operator|.
name|class
argument_list|,
name|MetaStoreFilterHook
operator|.
name|class
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METRICS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.key2"
argument_list|,
literal|"http://www.example.com"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.key3"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.key4"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"datanucleus.autoCreateTables"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.in.test"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|BATCH_RETRIEVE_MAX
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LIMIT_PARTITION_REQUEST
argument_list|,
name|DEFAULT_LIMIT_PARTITION_REQUEST
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|STORAGE_SCHEMA_READER_IMPL
argument_list|,
literal|"no.such.class"
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|warehouse
operator|=
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This is called in each test after the configuration is set in each test case    * @throws Exception    */
specifier|protected
name|void
name|creatEnv
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|client
operator|=
name|createClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|DBNAME1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|DBNAME2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Database
name|db1
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|DBNAME1
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Database
name|db2
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|DBNAME2
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DBNAME1
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TAB1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Table
name|tab2
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DBNAME1
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TAB2
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|tab2
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"value1"
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|tab2
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"value2"
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|compact2
argument_list|(
name|DBNAME1
argument_list|,
name|TAB1
argument_list|,
literal|null
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|compact2
argument_list|(
name|DBNAME1
argument_list|,
name|TAB2
argument_list|,
literal|"name=value1"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * The default configuration should be disable filtering at HMS server    * Disable the HMS client side filtering in order to see HMS server filtering behavior    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testHMSServerWithoutFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_CLIENT_FILTER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DBNAME1
operator|=
literal|"db_testHMSServerWithoutFilter_1"
expr_stmt|;
name|DBNAME2
operator|=
literal|"db_testHMSServerWithoutFilter_2"
expr_stmt|;
name|creatEnv
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|client
operator|.
name|getTable
argument_list|(
name|DBNAME1
argument_list|,
name|TAB1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|client
operator|.
name|getTables
argument_list|(
name|DBNAME1
argument_list|,
literal|"*"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|client
operator|.
name|getAllTables
argument_list|(
name|DBNAME1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|getTables
argument_list|(
name|DBNAME1
argument_list|,
name|TAB2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getAllTables
argument_list|(
name|DBNAME2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|client
operator|.
name|getDatabase
argument_list|(
name|DBNAME1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*testHMSServerWithoutFilter*"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|getDatabases
argument_list|(
name|DBNAME1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPartition
argument_list|(
name|DBNAME1
argument_list|,
name|TAB2
argument_list|,
literal|"name=value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|DBNAME1
argument_list|,
name|TAB2
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"name=value1"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|client
operator|.
name|showCompactions
argument_list|()
operator|.
name|getCompacts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enable the HMS server side filtering    * Disable the HMS client side filtering in order to see HMS server filtering behavior    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testHMSServerWithFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_CLIENT_FILTER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_SERVER_FILTER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DBNAME1
operator|=
literal|"db_testHMSServerWithFilter_1"
expr_stmt|;
name|DBNAME2
operator|=
literal|"db_testHMSServerWithFilter_2"
expr_stmt|;
name|creatEnv
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testFilterForDb
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testFilterForTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testFilterForPartition
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testFilterForCompaction
argument_list|()
expr_stmt|;
block|}
comment|/**    * Disable filtering at HMS client    * By default, the HMS server side filtering is disabled, so we can see HMS client filtering behavior    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testHMSClientWithoutFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_CLIENT_FILTER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DBNAME1
operator|=
literal|"db_testHMSClientWithoutFilter_1"
expr_stmt|;
name|DBNAME2
operator|=
literal|"db_testHMSClientWithoutFilter_2"
expr_stmt|;
name|creatEnv
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|client
operator|.
name|getTable
argument_list|(
name|DBNAME1
argument_list|,
name|TAB1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|client
operator|.
name|getTables
argument_list|(
name|DBNAME1
argument_list|,
literal|"*"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|client
operator|.
name|getAllTables
argument_list|(
name|DBNAME1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|getTables
argument_list|(
name|DBNAME1
argument_list|,
name|TAB2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getAllTables
argument_list|(
name|DBNAME2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|client
operator|.
name|getDatabase
argument_list|(
name|DBNAME1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*testHMSClientWithoutFilter*"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|getDatabases
argument_list|(
name|DBNAME1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPartition
argument_list|(
name|DBNAME1
argument_list|,
name|TAB2
argument_list|,
literal|"name=value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|DBNAME1
argument_list|,
name|TAB2
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"name=value1"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|client
operator|.
name|showCompactions
argument_list|()
operator|.
name|getCompacts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * By default, the HMS Client side filtering is enabled    * Disable the HMS server side filtering in order to see HMS client filtering behavior    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testHMSClientWithFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_SERVER_FILTER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DBNAME1
operator|=
literal|"db_testHMSClientWithFilter_1"
expr_stmt|;
name|DBNAME2
operator|=
literal|"db_testHMSClientWithFilter_2"
expr_stmt|;
name|creatEnv
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testFilterForDb
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testFilterForTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testFilterForPartition
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testFilterForCompaction
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|testFilterForDb
parameter_list|(
name|boolean
name|filterAtServer
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Skip this call when testing filter hook at HMS server because HMS server calls authorization
comment|// API for getDatabase(), and does not call filter hook
if|if
condition|(
operator|!
name|filterAtServer
condition|)
block|{
try|try
block|{
name|assertNotNull
argument_list|(
name|client
operator|.
name|getDatabase
argument_list|(
name|DBNAME1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"getDatabase() should fail with blocking mode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// Excepted
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getAllDatabases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getDatabases
argument_list|(
name|DBNAME1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testFilterForTables
parameter_list|(
name|boolean
name|filterAtServer
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Skip this call when testing filter hook at HMS server because HMS server calls authorization
comment|// API for getTable(), and does not call filter hook
if|if
condition|(
operator|!
name|filterAtServer
condition|)
block|{
try|try
block|{
name|client
operator|.
name|getTable
argument_list|(
name|DBNAME1
argument_list|,
name|TAB1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"getTable() should fail with blocking mode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// Excepted
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getTables
argument_list|(
name|DBNAME1
argument_list|,
literal|"*"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getTables
argument_list|(
name|DBNAME1
argument_list|,
literal|"*"
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getAllTables
argument_list|(
name|DBNAME1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getTables
argument_list|(
name|DBNAME1
argument_list|,
name|TAB2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testFilterForPartition
parameter_list|(
name|boolean
name|filterAtServer
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPartition
argument_list|(
name|DBNAME1
argument_list|,
name|TAB2
argument_list|,
literal|"name=value1"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"getPartition() should fail with blocking mode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// Excepted
block|}
if|if
condition|(
name|filterAtServer
condition|)
block|{
comment|// at HMS server, the table of the partitions should be filtered out and result in
comment|// NoSuchObjectException
try|try
block|{
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|DBNAME1
argument_list|,
name|TAB2
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"name=value1"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"getPartitionsByNames() should fail with blocking mode at server side"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// Excepted
block|}
block|}
else|else
block|{
comment|// at HMS client, we cannot filter the table of the partitions due to
comment|// HIVE-21227: HIVE-20776 causes view access regression
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|DBNAME1
argument_list|,
name|TAB2
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"name=value1"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|testFilterForCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|showCompactions
argument_list|()
operator|.
name|getCompacts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

