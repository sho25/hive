begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|CatalogBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tests that catalogs are properly cached.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCatalogCaching
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CAT1_NAME
init|=
literal|"cat1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CAT2_NAME
init|=
literal|"cat2"
decl_stmt|;
specifier|private
name|ObjectStore
name|objectStore
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|CachedStore
name|cachedStore
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createObjectStore
parameter_list|()
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|objectStore
operator|=
operator|new
name|ObjectStore
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Create three catalogs
name|HiveMetaStore
operator|.
name|HMSHandler
operator|.
name|createDefaultCatalog
argument_list|(
name|objectStore
argument_list|,
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Catalog
name|cat1
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|CAT1_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"/tmp/cat1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createCatalog
argument_list|(
name|cat1
argument_list|)
expr_stmt|;
name|Catalog
name|cat2
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|CAT2_NAME
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"/tmp/cat2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createCatalog
argument_list|(
name|cat2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|clearCatalogCache
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|catalogs
init|=
name|objectStore
operator|.
name|getCatalogs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|catalog
range|:
name|catalogs
control|)
name|objectStore
operator|.
name|dropCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|defaultHiveOnly
parameter_list|()
throws|throws
name|Exception
block|{
comment|// By default just the Hive catalog should be cached.
name|cachedStore
operator|=
operator|new
name|CachedStore
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|stopCacheUpdateService
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|resetCatalogCache
argument_list|()
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
comment|// Only the hive catalog should be cached
name|List
argument_list|<
name|String
argument_list|>
name|cachedCatalogs
init|=
name|cachedStore
operator|.
name|getCatalogs
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cachedCatalogs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
argument_list|,
name|cachedCatalogs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cacheAll
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set the config value to empty string, which should result in all catalogs being cached.
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|newConf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CATALOGS_TO_CACHE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|cachedStore
operator|=
operator|new
name|CachedStore
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConf
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|stopCacheUpdateService
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|setConf
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
comment|// have to override it with the new conf since this is where
comment|// prewarm gets the conf object
name|cachedStore
operator|.
name|resetCatalogCache
argument_list|()
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
comment|// All the catalogs should be cached
name|List
argument_list|<
name|String
argument_list|>
name|cachedCatalogs
init|=
name|cachedStore
operator|.
name|getCatalogs
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cachedCatalogs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cachedCatalogs
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|naturalOrder
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CAT1_NAME
argument_list|,
name|cachedCatalogs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CAT2_NAME
argument_list|,
name|cachedCatalogs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
argument_list|,
name|cachedCatalogs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cacheSome
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set the config value to 2 catalogs other than hive
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|newConf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CATALOGS_TO_CACHE
argument_list|,
name|CAT1_NAME
operator|+
literal|","
operator|+
name|CAT2_NAME
argument_list|)
expr_stmt|;
name|cachedStore
operator|=
operator|new
name|CachedStore
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConf
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|CachedStore
operator|.
name|stopCacheUpdateService
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|setConf
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
comment|// have to override it with the new conf since this is where
comment|// prewarm gets the conf object
name|cachedStore
operator|.
name|resetCatalogCache
argument_list|()
expr_stmt|;
name|CachedStore
operator|.
name|prewarm
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
comment|// All the catalogs should be cached
name|List
argument_list|<
name|String
argument_list|>
name|cachedCatalogs
init|=
name|cachedStore
operator|.
name|getCatalogs
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cachedCatalogs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cachedCatalogs
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|naturalOrder
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CAT1_NAME
argument_list|,
name|cachedCatalogs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CAT2_NAME
argument_list|,
name|cachedCatalogs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

