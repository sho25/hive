begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|MiniHMS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Factory for creating specific  * {@link org.apache.hadoop.hive.metastore.minihms.AbstractMetaStoreService} implementations for  * tests.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MetaStoreFactoryForTests
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_LIMIT_PARTITION_REQUEST
init|=
literal|100
decl_stmt|;
specifier|private
name|MetaStoreFactoryForTests
parameter_list|()
block|{}
comment|/**    * We would like to run the tests with 2 MetaStore configurations    * - Embedded - Where the MetaStore is running in the same thread, and does not use Thrift    * - Remote - Where the MetaStore is started in a different thread, and uses Thrift for    * communication    *    * Or if the test.hms.client.configs system property is set, it would return a single test    * MetaStoreService which uses these configs. In this case the MetaStore should be created    * manually or by an external application.    * @return The list of the test MetaStoreService implementations usable by @Parameterized    * .Parameters    */
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|getMetaStores
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|metaStores
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
comment|// set some values to use for getting conf. vars
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METRICS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|BATCH_RETRIEVE_MAX
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|BATCH_RETRIEVE_OBJECTS_MAX
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|LIMIT_PARTITION_REQUEST
argument_list|,
name|DEFAULT_LIMIT_PARTITION_REQUEST
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Do this only on your own peril, and never in the production code
name|conf
operator|.
name|set
argument_list|(
literal|"datanucleus.autoCreateTables"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// Example for using cluster configuration xml-s
comment|// -Dtest.hms.client.configs=/tmp/conf/core-site.xml,/tmp/conf/hive-site.xml
name|String
name|testHMSClientConfiguration
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.hms.client.configs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|testHMSClientConfiguration
operator|!=
literal|null
condition|)
block|{
name|Configuration
name|clusterConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Loading the extra configuration options
name|String
index|[]
name|configurationFiles
init|=
name|testHMSClientConfiguration
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|configurationFile
range|:
name|configurationFiles
control|)
block|{
name|clusterConf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|configurationFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Using MetaStore running in an existing cluster
name|AbstractMetaStoreService
name|cluster
init|=
operator|new
name|MiniHMS
operator|.
name|Builder
argument_list|()
operator|.
name|setConf
argument_list|(
name|clusterConf
argument_list|)
operator|.
name|setType
argument_list|(
name|MiniHMS
operator|.
name|MiniHMSType
operator|.
name|CLUSTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|metaStores
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"Cluster"
block|,
name|cluster
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Create Embedded MetaStore
name|conf
operator|.
name|set
argument_list|(
literal|"javax.jdo.option.ConnectionURL"
argument_list|,
literal|"jdbc:derby:memory:${test.tmp.dir}/junit_metastore_db1;create=true"
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|TRY_DIRECT_SQL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AbstractMetaStoreService
name|embedded
init|=
operator|new
name|MiniHMS
operator|.
name|Builder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setType
argument_list|(
name|MiniHMS
operator|.
name|MiniHMSType
operator|.
name|EMBEDDED
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|metaStores
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"Embedded"
block|,
name|embedded
block|}
argument_list|)
expr_stmt|;
comment|// Create Remote MetaStore
name|conf
operator|.
name|set
argument_list|(
literal|"javax.jdo.option.ConnectionURL"
argument_list|,
literal|"jdbc:derby:memory:${test.tmp.dir}/junit_metastore_db2;create=true"
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|TRY_DIRECT_SQL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AbstractMetaStoreService
name|remote
init|=
operator|new
name|MiniHMS
operator|.
name|Builder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setType
argument_list|(
name|MiniHMS
operator|.
name|MiniHMSType
operator|.
name|REMOTE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|metaStores
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"Remote"
block|,
name|remote
block|}
argument_list|)
expr_stmt|;
return|return
name|metaStores
return|;
block|}
block|}
end_class

end_unit

