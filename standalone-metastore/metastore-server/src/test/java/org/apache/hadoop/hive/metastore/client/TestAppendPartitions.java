begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|CatalogBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Tests for appending partitions.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestAppendPartitions
extends|extends
name|MetaStoreClientTest
block|{
specifier|private
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"test_append_part_db"
decl_stmt|;
specifier|private
specifier|static
name|Table
name|tableWithPartitions
decl_stmt|;
specifier|private
specifier|static
name|Table
name|externalTable
decl_stmt|;
specifier|private
specifier|static
name|Table
name|tableNoPartColumns
decl_stmt|;
specifier|private
specifier|static
name|Table
name|tableView
decl_stmt|;
specifier|public
name|TestAppendPartitions
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Clean up the database
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|metaStore
operator|.
name|cleanWarehouseDirs
argument_list|()
expr_stmt|;
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|tableWithPartitions
operator|=
name|createTableWithPartitions
argument_list|()
expr_stmt|;
name|externalTable
operator|=
name|createExternalTable
argument_list|()
expr_stmt|;
name|tableNoPartColumns
operator|=
name|createTableNoPartitionColumns
argument_list|()
expr_stmt|;
name|tableView
operator|=
name|createView
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// HIVE-19729: Shallow the exceptions based on the discussion in the Jira
block|}
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// Tests for Partition appendPartition(String tableName, String dbName, List<String> partVals) method
annotation|@
name|Test
specifier|public
name|void
name|testAppendPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|Partition
name|appendedPart
init|=
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appendedPart
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|)
decl_stmt|;
name|appendedPart
operator|.
name|setWriteId
argument_list|(
name|partition
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partition
argument_list|,
name|appendedPart
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|partition
argument_list|,
name|table
argument_list|,
name|partitionValues
argument_list|,
literal|"year=2017/month=may"
argument_list|)
expr_stmt|;
name|verifyPartitionNames
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"year=2017/month=march"
argument_list|,
literal|"year=2017/month=april"
argument_list|,
literal|"year=2018/month=march"
argument_list|,
literal|"year=2017/month=may"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendPartitionToExternalTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|externalTable
decl_stmt|;
name|Partition
name|appendedPart
init|=
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appendedPart
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|)
decl_stmt|;
name|appendedPart
operator|.
name|setWriteId
argument_list|(
name|partition
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partition
argument_list|,
name|appendedPart
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|partition
argument_list|,
name|table
argument_list|,
name|partitionValues
argument_list|,
literal|"year=2017/month=may"
argument_list|)
expr_stmt|;
name|verifyPartitionNames
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"year=2017/month=may"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendPartitionMultiplePartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues1
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2018"
argument_list|,
literal|"may"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues3
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"june"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues1
argument_list|)
expr_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues2
argument_list|)
expr_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues3
argument_list|)
expr_stmt|;
name|verifyPartitionNames
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"year=2017/month=may"
argument_list|,
literal|"year=2018/month=may"
argument_list|,
literal|"year=2017/month=june"
argument_list|,
literal|"year=2017/month=march"
argument_list|,
literal|"year=2017/month=april"
argument_list|,
literal|"year=2018/month=march"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionToTableWithoutPartCols
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|tableNoPartColumns
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionToView
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|tableView
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"april"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionNonExistingDB
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
literal|"nonexistingdb"
argument_list|,
name|tableWithPartitions
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionNonExistingTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|tableWithPartitions
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"nonexistingtable"
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionEmptyDB
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
literal|""
argument_list|,
name|tableWithPartitions
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionEmptyTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|tableWithPartitions
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|""
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionNullDB
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
literal|null
argument_list|,
name|tableWithPartitions
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionNullTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|tableWithPartitions
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionEmptyPartValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionNullPartValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendPartitionLessPartValues
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2019"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
try|try
block|{
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
name|verifyPartitionNames
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"year=2017/month=march"
argument_list|,
literal|"year=2017/month=april"
argument_list|,
literal|"year=2018/month=march"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|partitionLocation
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/year=2019"
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|partitionLocation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendPartitionMorePartValues
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2019"
argument_list|,
literal|"march"
argument_list|,
literal|"12"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
try|try
block|{
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
name|verifyPartitionNames
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"year=2017/month=march"
argument_list|,
literal|"year=2017/month=april"
argument_list|,
literal|"year=2018/month=march"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|partitionLocation
init|=
name|tableWithPartitions
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/year=2019"
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|partitionLocation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Tests for Partition appendPartition(String tableName, String dbName, String name) method
annotation|@
name|Test
specifier|public
name|void
name|testAppendPart
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|String
name|partitionName
init|=
literal|"year=2017/month=may"
decl_stmt|;
name|Partition
name|appendedPart
init|=
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appendedPart
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|getPartitionValues
argument_list|(
name|partitionName
argument_list|)
argument_list|)
decl_stmt|;
name|appendedPart
operator|.
name|setWriteId
argument_list|(
name|partition
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partition
argument_list|,
name|appendedPart
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|partition
argument_list|,
name|table
argument_list|,
name|getPartitionValues
argument_list|(
name|partitionName
argument_list|)
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
name|verifyPartitionNames
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"year=2017/month=march"
argument_list|,
literal|"year=2017/month=april"
argument_list|,
literal|"year=2018/month=march"
argument_list|,
name|partitionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendPartToExternalTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|externalTable
decl_stmt|;
name|String
name|partitionName
init|=
literal|"year=2017/month=may"
decl_stmt|;
name|Partition
name|appendedPart
init|=
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appendedPart
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|getPartitionValues
argument_list|(
name|partitionName
argument_list|)
argument_list|)
decl_stmt|;
name|appendedPart
operator|.
name|setWriteId
argument_list|(
name|partition
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partition
argument_list|,
name|appendedPart
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|partition
argument_list|,
name|table
argument_list|,
name|getPartitionValues
argument_list|(
name|partitionName
argument_list|)
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
name|verifyPartitionNames
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendPartMultiplePartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName1
init|=
literal|"year=2017/month=may"
decl_stmt|;
name|String
name|partitionName2
init|=
literal|"year=2018/month=may"
decl_stmt|;
name|String
name|partitionName3
init|=
literal|"year=2017/month=june"
decl_stmt|;
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName1
argument_list|)
expr_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName2
argument_list|)
expr_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName3
argument_list|)
expr_stmt|;
name|verifyPartitionNames
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionName1
argument_list|,
name|partitionName2
argument_list|,
name|partitionName3
argument_list|,
literal|"year=2017/month=march"
argument_list|,
literal|"year=2017/month=april"
argument_list|,
literal|"year=2018/month=march"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartToTableWithoutPartCols
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"year=2017/month=may"
decl_stmt|;
name|Table
name|table
init|=
name|tableNoPartColumns
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartToView
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"year=2017/month=may"
decl_stmt|;
name|Table
name|table
init|=
name|tableView
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"year=2017/month=april"
decl_stmt|;
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartNonExistingDB
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"year=2017/month=april"
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
literal|"nonexistingdb"
argument_list|,
name|tableWithPartitions
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartNonExistingTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"year=2017/month=april"
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|tableWithPartitions
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"nonexistingtable"
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartEmptyDB
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"year=2017/month=april"
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
literal|""
argument_list|,
name|tableWithPartitions
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartEmptyTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"year=2017/month=april"
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|tableWithPartitions
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|""
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartNullDB
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"year=2017/month=april"
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
literal|null
argument_list|,
name|tableWithPartitions
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartNullTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"year=2017/month=april"
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|tableWithPartitions
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartEmptyPartName
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartNullPartName
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartLessPartValues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"year=2019"
decl_stmt|;
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendPartMorePartValues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"year=2019/month=march/day=12"
decl_stmt|;
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartInvalidPartName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"invalidpartname"
decl_stmt|;
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartWrongColumnInPartName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|partitionName
init|=
literal|"year=2019/honap=march"
decl_stmt|;
name|Table
name|table
init|=
name|tableWithPartitions
decl_stmt|;
name|client
operator|.
name|appendPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|otherCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|catName
init|=
literal|"append_partition_catalog"
decl_stmt|;
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|catName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"append_partition_database_in_other_catalog"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"table_in_other_catalog"
decl_stmt|;
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"partcol"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|created
init|=
name|client
operator|.
name|appendPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|created
operator|.
name|getValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a1"
argument_list|,
name|created
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|fetched
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
decl_stmt|;
name|created
operator|.
name|setWriteId
argument_list|(
name|fetched
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|created
argument_list|,
name|fetched
argument_list|)
expr_stmt|;
name|created
operator|=
name|client
operator|.
name|appendPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|"partcol=a2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|created
operator|.
name|getValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a2"
argument_list|,
name|created
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a2"
argument_list|)
argument_list|)
expr_stmt|;
name|created
operator|.
name|setWriteId
argument_list|(
name|fetched
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|created
argument_list|,
name|fetched
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionBogusCatalog
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|appendPartition
argument_list|(
literal|"nosuch"
argument_list|,
name|DB_NAME
argument_list|,
name|tableWithPartitions
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAppendPartitionByNameBogusCatalog
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|appendPartition
argument_list|(
literal|"nosuch"
argument_list|,
name|DB_NAME
argument_list|,
name|tableWithPartitions
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|"year=2017/month=april"
argument_list|)
expr_stmt|;
block|}
comment|// Helper methods
specifier|private
name|Table
name|createTableWithPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|(
literal|"test_append_part_table_with_parts"
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|name
argument_list|()
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/test_append_part_table_with_parts"
argument_list|)
decl_stmt|;
name|createPartition
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"march"
argument_list|)
argument_list|)
expr_stmt|;
name|createPartition
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"april"
argument_list|)
argument_list|)
expr_stmt|;
name|createPartition
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2018"
argument_list|,
literal|"march"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|private
name|Table
name|createTableNoPartitionColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|(
literal|"test_append_part_table_no_part_columns"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"MANAGED_TABLE"
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/test_append_part_table_no_part_columns"
argument_list|)
decl_stmt|;
return|return
name|table
return|;
block|}
specifier|private
name|Table
name|createExternalTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|createTable
argument_list|(
literal|"test_append_part_external_table"
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
name|tableParams
argument_list|,
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|name
argument_list|()
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/test_append_part_external_table"
argument_list|)
decl_stmt|;
return|return
name|table
return|;
block|}
specifier|private
name|Table
name|createView
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|(
literal|"test_append_part_table_view"
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|name
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|table
return|;
block|}
specifier|private
name|Table
name|createTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
parameter_list|,
name|String
name|tableType
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|setPartCols
argument_list|(
name|partCols
argument_list|)
operator|.
name|setTableParams
argument_list|(
name|tableParams
argument_list|)
operator|.
name|setType
argument_list|(
name|tableType
argument_list|)
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|getTable
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|private
name|void
name|createPartition
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
operator|.
name|setValues
argument_list|(
name|values
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getYearAndMonthPartCols
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"year"
argument_list|,
literal|"string"
argument_list|,
literal|"year part col"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"month"
argument_list|,
literal|"string"
argument_list|,
literal|"month part col"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cols
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getPartitionValues
parameter_list|(
name|String
name|partitionsName
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|partitionsName
argument_list|)
condition|)
block|{
return|return
name|values
return|;
block|}
name|values
operator|=
name|Arrays
operator|.
name|stream
argument_list|(
name|partitionsName
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
name|v
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
index|[
literal|1
index|]
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
specifier|private
name|void
name|verifyPartition
parameter_list|(
name|Partition
name|partition
parameter_list|,
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expectedPartValues
parameter_list|,
name|String
name|partitionName
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partition
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|partition
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPartValues
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|0
argument_list|,
name|partition
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|partition
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partition
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partition
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"transient_lastDdlTime"
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|partitionSD
init|=
name|partition
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/"
operator|+
name|partitionName
argument_list|,
name|partitionSD
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|,
name|partitionSD
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|partitionSD
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyPartitionNames
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expectedPartNames
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPartNames
operator|.
name|size
argument_list|()
argument_list|,
name|partitionNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partitionNames
operator|.
name|containsAll
argument_list|(
name|expectedPartNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

