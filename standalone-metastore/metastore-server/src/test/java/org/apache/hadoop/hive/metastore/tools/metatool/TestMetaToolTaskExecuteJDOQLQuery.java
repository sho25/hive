begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|metatool
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/** Unit tests for MetaToolTaskExecuteJDOQLQuery. */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMetaToolTaskExecuteJDOQLQuery
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
name|OutputStream
name|os
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|os
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|os
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|selectQuery
init|=
literal|"select a from b"
decl_stmt|;
name|String
name|entry1
init|=
literal|"abc"
decl_stmt|;
name|String
name|entry2
init|=
literal|"def"
decl_stmt|;
name|ObjectStore
name|mockObjectStore
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ObjectStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|entry1
argument_list|,
name|entry2
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockObjectStore
argument_list|)
operator|.
name|executeJDOQLSelect
argument_list|(
name|eq
argument_list|(
name|selectQuery
argument_list|)
argument_list|,
name|any
argument_list|(
name|ObjectStore
operator|.
name|QueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MetaToolTaskExecuteJDOQLQuery
name|t
init|=
operator|new
name|MetaToolTaskExecuteJDOQLQuery
argument_list|()
decl_stmt|;
name|t
operator|.
name|setCommandLine
argument_list|(
operator|new
name|HiveMetaToolCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-executeJDOQL"
block|,
name|selectQuery
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|setObjectStore
argument_list|(
name|mockObjectStore
argument_list|)
expr_stmt|;
name|t
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|os
operator|.
name|toString
argument_list|()
operator|+
literal|" doesn't contain "
operator|+
name|entry1
argument_list|,
name|os
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|entry1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|os
operator|.
name|toString
argument_list|()
operator|+
literal|" doesn't contain "
operator|+
name|entry2
argument_list|,
name|os
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|entry2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateQuerySuccessful
parameter_list|()
throws|throws
name|Exception
block|{
name|testUpdateQuery
argument_list|(
literal|1L
argument_list|,
literal|"Number of records updated: 1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateQueryNotSuccessful
parameter_list|()
throws|throws
name|Exception
block|{
name|testUpdateQuery
argument_list|(
operator|-
literal|1L
argument_list|,
literal|"Encountered error during executeJDOQL - commit of JDO transaction failed."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testUpdateQuery
parameter_list|(
name|long
name|ret
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|updateQuery
init|=
literal|"update a set b = 'c'"
decl_stmt|;
name|ObjectStore
name|mockObjectStore
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ObjectStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockObjectStore
operator|.
name|executeJDOQLUpdate
argument_list|(
name|updateQuery
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|MetaToolTaskExecuteJDOQLQuery
name|t
init|=
operator|new
name|MetaToolTaskExecuteJDOQLQuery
argument_list|()
decl_stmt|;
name|t
operator|.
name|setCommandLine
argument_list|(
operator|new
name|HiveMetaToolCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-executeJDOQL"
block|,
name|updateQuery
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|setObjectStore
argument_list|(
name|mockObjectStore
argument_list|)
expr_stmt|;
name|t
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|os
operator|.
name|toString
argument_list|()
operator|+
literal|"doesn't contain "
operator|+
name|expected
argument_list|,
name|os
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"HiveMetaTool:Unsupported statement type, only select and update supported"
argument_list|)
expr_stmt|;
name|String
name|illegalQuery
init|=
literal|"abcde"
decl_stmt|;
name|MetaToolTaskExecuteJDOQLQuery
name|t
init|=
operator|new
name|MetaToolTaskExecuteJDOQLQuery
argument_list|()
decl_stmt|;
name|t
operator|.
name|setCommandLine
argument_list|(
operator|new
name|HiveMetaToolCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-executeJDOQL"
block|,
name|illegalQuery
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

