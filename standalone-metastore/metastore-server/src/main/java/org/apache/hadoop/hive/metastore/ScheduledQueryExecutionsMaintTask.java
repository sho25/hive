begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Metastore task to remove old scheduled query executions.  */
end_comment

begin_class
specifier|public
class|class
name|ScheduledQueryExecutionsMaintTask
implements|implements
name|MetastoreTaskThread
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScheduledQueryExecutionsMaintTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|initialDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
comment|// no delay before the first execution;
comment|// after an ungracefull shutdown it might take time to notice that in-flight scheduled queries are not running anymore
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|runFrequency
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|SCHEDULED_QUERIES_EXECUTION_MAINT_TASK_FREQUENCY
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|conf
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|!
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|SCHEDULED_QUERIES_ENABLED
argument_list|)
condition|)
block|{
return|return;
block|}
name|RawStore
name|ms
init|=
name|HiveMetaStore
operator|.
name|HMSHandler
operator|.
name|getMSForConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|timeoutSecs
init|=
operator|(
name|int
operator|)
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|SCHEDULED_QUERIES_EXECUTION_PROGRESS_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|int
name|timedOutCnt
init|=
name|ms
operator|.
name|markScheduledExecutionsTimedOut
argument_list|(
name|timeoutSecs
argument_list|)
decl_stmt|;
if|if
condition|(
name|timedOutCnt
operator|>
literal|0L
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of timed out scheduled query executions:"
operator|+
name|timedOutCnt
argument_list|)
expr_stmt|;
block|}
name|int
name|maxRetainSecs
init|=
operator|(
name|int
operator|)
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|SCHEDULED_QUERIES_EXECUTION_MAX_AGE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|int
name|deleteCnt
init|=
name|ms
operator|.
name|deleteScheduledExecutions
argument_list|(
name|maxRetainSecs
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteCnt
operator|>
literal|0L
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of deleted entries: "
operator|+
name|deleteCnt
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while trying to delete: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

