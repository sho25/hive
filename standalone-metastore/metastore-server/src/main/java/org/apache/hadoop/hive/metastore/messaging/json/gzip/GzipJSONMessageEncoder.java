begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|gzip
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageSerializer
import|;
end_import

begin_comment
comment|/**  * This implementation gzips and then Base64 encodes the message before writing it out.  * This MessageEncoder will break the backward compatibility for hive replication v1 which uses webhcat endpoints.  */
end_comment

begin_class
specifier|public
class|class
name|GzipJSONMessageEncoder
implements|implements
name|MessageEncoder
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FORMAT
init|=
literal|"gzip(json-2.0)"
decl_stmt|;
static|static
block|{
name|MessageFactory
operator|.
name|register
argument_list|(
name|FORMAT
argument_list|,
name|GzipJSONMessageEncoder
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|DeSerializer
name|deSerializer
init|=
operator|new
name|DeSerializer
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Serializer
name|serializer
init|=
operator|new
name|Serializer
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|MessageEncoder
name|instance
decl_stmt|;
specifier|public
specifier|static
name|MessageEncoder
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|GzipJSONMessageEncoder
operator|.
name|class
init|)
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|GzipJSONMessageEncoder
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageDeserializer
name|getDeserializer
parameter_list|()
block|{
return|return
name|deSerializer
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageSerializer
name|getSerializer
parameter_list|()
block|{
return|return
name|serializer
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMessageFormat
parameter_list|()
block|{
return|return
name|FORMAT
return|;
block|}
block|}
end_class

end_unit

