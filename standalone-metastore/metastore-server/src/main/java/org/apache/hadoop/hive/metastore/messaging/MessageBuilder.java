begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|ObjectNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLNotNullConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLUniqueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnToWriteId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AcidWriteEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONAbortTxnMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONAcidWriteMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONAddForeignKeyMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONAddNotNullConstraintMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONAddPartitionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONAddPrimaryKeyMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONAddUniqueConstraintMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONAllocWriteIdMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONAlterCatalogMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONAlterDatabaseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONAlterPartitionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONAlterTableMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONCommitTxnMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONCreateCatalogMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONCreateDatabaseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONCreateFunctionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONCreateTableMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONDropCatalogMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONDropConstraintMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONDropDatabaseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONDropFunctionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONDropPartitionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONDropTableMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONInsertMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONOpenTxnMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONUpdateTableColumnStatMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONUpdatePartitionColumnStatMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONDeleteTableColumnStatMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONDeletePartitionColumnStatMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TJSONProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|filterMapkeys
import|;
end_import

begin_class
specifier|public
class|class
name|MessageBuilder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MessageBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADD_PARTITION_EVENT
init|=
literal|"ADD_PARTITION"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ALTER_PARTITION_EVENT
init|=
literal|"ALTER_PARTITION"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DROP_PARTITION_EVENT
init|=
literal|"DROP_PARTITION"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_TABLE_EVENT
init|=
literal|"CREATE_TABLE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ALTER_TABLE_EVENT
init|=
literal|"ALTER_TABLE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DROP_TABLE_EVENT
init|=
literal|"DROP_TABLE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_DATABASE_EVENT
init|=
literal|"CREATE_DATABASE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ALTER_DATABASE_EVENT
init|=
literal|"ALTER_DATABASE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DROP_DATABASE_EVENT
init|=
literal|"DROP_DATABASE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INSERT_EVENT
init|=
literal|"INSERT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_FUNCTION_EVENT
init|=
literal|"CREATE_FUNCTION"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DROP_FUNCTION_EVENT
init|=
literal|"DROP_FUNCTION"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADD_PRIMARYKEY_EVENT
init|=
literal|"ADD_PRIMARYKEY"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADD_FOREIGNKEY_EVENT
init|=
literal|"ADD_FOREIGNKEY"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADD_UNIQUECONSTRAINT_EVENT
init|=
literal|"ADD_UNIQUECONSTRAINT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADD_NOTNULLCONSTRAINT_EVENT
init|=
literal|"ADD_NOTNULLCONSTRAINT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DROP_CONSTRAINT_EVENT
init|=
literal|"DROP_CONSTRAINT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_ISCHEMA_EVENT
init|=
literal|"CREATE_ISCHEMA"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ALTER_ISCHEMA_EVENT
init|=
literal|"ALTER_ISCHEMA"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DROP_ISCHEMA_EVENT
init|=
literal|"DROP_ISCHEMA"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADD_SCHEMA_VERSION_EVENT
init|=
literal|"ADD_SCHEMA_VERSION"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ALTER_SCHEMA_VERSION_EVENT
init|=
literal|"ALTER_SCHEMA_VERSION"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DROP_SCHEMA_VERSION_EVENT
init|=
literal|"DROP_SCHEMA_VERSION"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_CATALOG_EVENT
init|=
literal|"CREATE_CATALOG"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DROP_CATALOG_EVENT
init|=
literal|"DROP_CATALOG"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPEN_TXN_EVENT
init|=
literal|"OPEN_TXN"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMMIT_TXN_EVENT
init|=
literal|"COMMIT_TXN"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ABORT_TXN_EVENT
init|=
literal|"ABORT_TXN"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ALLOC_WRITE_ID_EVENT
init|=
literal|"ALLOC_WRITE_ID_EVENT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ALTER_CATALOG_EVENT
init|=
literal|"ALTER_CATALOG"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACID_WRITE_EVENT
init|=
literal|"ACID_WRITE_EVENT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_TBL_COL_STAT_EVENT
init|=
literal|"UPDATE_TBL_COL_STAT_EVENT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELETE_TBL_COL_STAT_EVENT
init|=
literal|"DELETE_TBL_COL_STAT_EVENT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_PART_COL_STAT_EVENT
init|=
literal|"UPDATE_PART_COL_STAT_EVENT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELETE_PART_COL_STAT_EVENT
init|=
literal|"DELETE_PART_COL_STAT_EVENT"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MS_SERVER_URL
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|THRIFT_URIS
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MS_SERVICE_PRINCIPAL
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|KERBEROS_PRINCIPAL
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|MessageBuilder
name|instance
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|MessageBuilder
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|MessageBuilder
argument_list|()
expr_stmt|;
name|instance
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|instance
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|>
name|paramsFilter
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|excludePatterns
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|MetastoreConf
operator|.
name|getTrimmedStringsVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_NOTIFICATION_PARAMETERS_EXCLUDE_PATTERNS
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|paramsFilter
operator|=
name|MetaStoreUtils
operator|.
name|compilePatternsToPredicates
argument_list|(
name|excludePatterns
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Regex pattern compilation failed. Verify that "
operator|+
literal|"metastore.notification.parameters.exclude.patterns has valid patterns."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Regex pattern compilation failed. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|CreateDatabaseMessage
name|buildCreateDatabaseMessage
parameter_list|(
name|Database
name|db
parameter_list|)
block|{
return|return
operator|new
name|JSONCreateDatabaseMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|db
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AlterDatabaseMessage
name|buildAlterDatabaseMessage
parameter_list|(
name|Database
name|beforeDb
parameter_list|,
name|Database
name|afterDb
parameter_list|)
block|{
return|return
operator|new
name|JSONAlterDatabaseMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|beforeDb
argument_list|,
name|afterDb
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|DropDatabaseMessage
name|buildDropDatabaseMessage
parameter_list|(
name|Database
name|db
parameter_list|)
block|{
return|return
operator|new
name|JSONDropDatabaseMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|CreateTableMessage
name|buildCreateTableMessage
parameter_list|(
name|Table
name|table
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|fileIter
parameter_list|)
block|{
return|return
operator|new
name|JSONCreateTableMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|table
argument_list|,
name|fileIter
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AlterTableMessage
name|buildAlterTableMessage
parameter_list|(
name|Table
name|before
parameter_list|,
name|Table
name|after
parameter_list|,
name|boolean
name|isTruncateOp
parameter_list|,
name|Long
name|writeId
parameter_list|)
block|{
return|return
operator|new
name|JSONAlterTableMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|before
argument_list|,
name|after
argument_list|,
name|isTruncateOp
argument_list|,
name|writeId
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|DropTableMessage
name|buildDropTableMessage
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
operator|new
name|JSONDropTableMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|table
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AddPartitionMessage
name|buildAddPartitionMessage
parameter_list|(
name|Table
name|table
parameter_list|,
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|partitionsIterator
parameter_list|,
name|Iterator
argument_list|<
name|PartitionFiles
argument_list|>
name|partitionFileIter
parameter_list|)
block|{
return|return
operator|new
name|JSONAddPartitionMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|table
argument_list|,
name|partitionsIterator
argument_list|,
name|partitionFileIter
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AlterPartitionMessage
name|buildAlterPartitionMessage
parameter_list|(
name|Table
name|table
parameter_list|,
name|Partition
name|before
parameter_list|,
name|Partition
name|after
parameter_list|,
name|boolean
name|isTruncateOp
parameter_list|,
name|Long
name|writeId
parameter_list|)
block|{
return|return
operator|new
name|JSONAlterPartitionMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|table
argument_list|,
name|before
argument_list|,
name|after
argument_list|,
name|isTruncateOp
argument_list|,
name|writeId
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|DropPartitionMessage
name|buildDropPartitionMessage
parameter_list|(
name|Table
name|table
parameter_list|,
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|partitionsIterator
parameter_list|)
block|{
return|return
operator|new
name|JSONDropPartitionMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|table
argument_list|,
name|getPartitionKeyValues
argument_list|(
name|table
argument_list|,
name|partitionsIterator
argument_list|)
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|CreateFunctionMessage
name|buildCreateFunctionMessage
parameter_list|(
name|Function
name|fn
parameter_list|)
block|{
return|return
operator|new
name|JSONCreateFunctionMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|fn
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|DropFunctionMessage
name|buildDropFunctionMessage
parameter_list|(
name|Function
name|fn
parameter_list|)
block|{
return|return
operator|new
name|JSONDropFunctionMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|fn
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|InsertMessage
name|buildInsertMessage
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|Partition
name|partObj
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|fileIter
parameter_list|)
block|{
return|return
operator|new
name|JSONInsertMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|tableObj
argument_list|,
name|partObj
argument_list|,
name|replace
argument_list|,
name|fileIter
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AddPrimaryKeyMessage
name|buildAddPrimaryKeyMessage
parameter_list|(
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pks
parameter_list|)
block|{
return|return
operator|new
name|JSONAddPrimaryKeyMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|pks
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AddForeignKeyMessage
name|buildAddForeignKeyMessage
parameter_list|(
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fks
parameter_list|)
block|{
return|return
operator|new
name|JSONAddForeignKeyMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|fks
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AddUniqueConstraintMessage
name|buildAddUniqueConstraintMessage
parameter_list|(
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uks
parameter_list|)
block|{
return|return
operator|new
name|JSONAddUniqueConstraintMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|uks
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AddNotNullConstraintMessage
name|buildAddNotNullConstraintMessage
parameter_list|(
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|nns
parameter_list|)
block|{
return|return
operator|new
name|JSONAddNotNullConstraintMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|nns
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|DropConstraintMessage
name|buildDropConstraintMessage
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|constraintName
parameter_list|)
block|{
return|return
operator|new
name|JSONDropConstraintMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|constraintName
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|CreateCatalogMessage
name|buildCreateCatalogMessage
parameter_list|(
name|Catalog
name|catalog
parameter_list|)
block|{
return|return
operator|new
name|JSONCreateCatalogMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|catalog
operator|.
name|getName
argument_list|()
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AlterCatalogMessage
name|buildAlterCatalogMessage
parameter_list|(
name|Catalog
name|beforeCat
parameter_list|,
name|Catalog
name|afterCat
parameter_list|)
block|{
return|return
operator|new
name|JSONAlterCatalogMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|beforeCat
argument_list|,
name|afterCat
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|DropCatalogMessage
name|buildDropCatalogMessage
parameter_list|(
name|Catalog
name|catalog
parameter_list|)
block|{
return|return
operator|new
name|JSONDropCatalogMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|catalog
operator|.
name|getName
argument_list|()
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|OpenTxnMessage
name|buildOpenTxnMessage
parameter_list|(
name|Long
name|fromTxnId
parameter_list|,
name|Long
name|toTxnId
parameter_list|)
block|{
return|return
operator|new
name|JSONOpenTxnMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|fromTxnId
argument_list|,
name|toTxnId
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|CommitTxnMessage
name|buildCommitTxnMessage
parameter_list|(
name|Long
name|txnId
parameter_list|)
block|{
return|return
operator|new
name|JSONCommitTxnMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|txnId
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AbortTxnMessage
name|buildAbortTxnMessage
parameter_list|(
name|Long
name|txnId
parameter_list|)
block|{
return|return
operator|new
name|JSONAbortTxnMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|txnId
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AllocWriteIdMessage
name|buildAllocWriteIdMessage
parameter_list|(
name|List
argument_list|<
name|TxnToWriteId
argument_list|>
name|txnToWriteIdList
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|JSONAllocWriteIdMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|txnToWriteIdList
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AcidWriteMessage
name|buildAcidWriteMessage
parameter_list|(
name|AcidWriteEvent
name|acidWriteEvent
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
block|{
return|return
operator|new
name|JSONAcidWriteMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|now
argument_list|()
argument_list|,
name|acidWriteEvent
argument_list|,
name|files
argument_list|)
return|;
block|}
specifier|public
name|JSONUpdateTableColumnStatMessage
name|buildUpdateTableColumnStatMessage
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|,
name|String
name|validWriteIds
parameter_list|,
name|long
name|writeId
parameter_list|)
block|{
return|return
operator|new
name|JSONUpdateTableColumnStatMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|now
argument_list|()
argument_list|,
name|colStats
argument_list|,
name|parameters
argument_list|,
name|validWriteIds
argument_list|,
name|writeId
argument_list|)
return|;
block|}
specifier|public
name|JSONDeleteTableColumnStatMessage
name|buildDeleteTableColumnStatMessage
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
return|return
operator|new
name|JSONDeleteTableColumnStatMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|now
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|colName
argument_list|)
return|;
block|}
specifier|public
name|JSONUpdatePartitionColumnStatMessage
name|buildUpdatePartitionColumnStatMessage
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|,
name|String
name|validWriteIds
parameter_list|,
name|long
name|writeId
parameter_list|)
block|{
return|return
operator|new
name|JSONUpdatePartitionColumnStatMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|now
argument_list|()
argument_list|,
name|colStats
argument_list|,
name|partVals
argument_list|,
name|parameters
argument_list|,
name|validWriteIds
argument_list|,
name|writeId
argument_list|)
return|;
block|}
specifier|public
name|JSONDeletePartitionColumnStatMessage
name|buildDeletePartitionColumnStatMessage
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|colName
parameter_list|,
name|String
name|partName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|)
block|{
return|return
operator|new
name|JSONDeletePartitionColumnStatMessage
argument_list|(
name|MS_SERVER_URL
argument_list|,
name|MS_SERVICE_PRINCIPAL
argument_list|,
name|now
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|colName
argument_list|,
name|partName
argument_list|,
name|partValues
argument_list|)
return|;
block|}
specifier|private
name|long
name|now
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
return|;
block|}
specifier|public
specifier|static
name|String
name|createPrimaryKeyObjJson
parameter_list|(
name|SQLPrimaryKey
name|primaryKeyObj
parameter_list|)
throws|throws
name|TException
block|{
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|serializer
operator|.
name|toString
argument_list|(
name|primaryKeyObj
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|createForeignKeyObjJson
parameter_list|(
name|SQLForeignKey
name|foreignKeyObj
parameter_list|)
throws|throws
name|TException
block|{
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|serializer
operator|.
name|toString
argument_list|(
name|foreignKeyObj
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|createUniqueConstraintObjJson
parameter_list|(
name|SQLUniqueConstraint
name|uniqueConstraintObj
parameter_list|)
throws|throws
name|TException
block|{
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|serializer
operator|.
name|toString
argument_list|(
name|uniqueConstraintObj
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|createNotNullConstraintObjJson
parameter_list|(
name|SQLNotNullConstraint
name|notNullConstaintObj
parameter_list|)
throws|throws
name|TException
block|{
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|serializer
operator|.
name|toString
argument_list|(
name|notNullConstaintObj
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|createDatabaseObjJson
parameter_list|(
name|Database
name|dbObj
parameter_list|)
throws|throws
name|TException
block|{
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|serializer
operator|.
name|toString
argument_list|(
name|dbObj
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|createCatalogObjJson
parameter_list|(
name|Catalog
name|catObj
parameter_list|)
throws|throws
name|TException
block|{
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|serializer
operator|.
name|toString
argument_list|(
name|catObj
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|createTableObjJson
parameter_list|(
name|Table
name|tableObj
parameter_list|)
throws|throws
name|TException
block|{
comment|//Note: The parameters of the Table object will be removed in the filter if it matches
comment|// any pattern provided through EVENT_NOTIFICATION_PARAMETERS_EXCLUDE_PATTERNS
name|filterMapkeys
argument_list|(
name|tableObj
operator|.
name|getParameters
argument_list|()
argument_list|,
name|paramsFilter
argument_list|)
expr_stmt|;
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|serializer
operator|.
name|toString
argument_list|(
name|tableObj
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|createPartitionObjJson
parameter_list|(
name|Partition
name|partitionObj
parameter_list|)
throws|throws
name|TException
block|{
comment|//Note: The parameters of the Partition object will be removed in the filter if it matches
comment|// any pattern provided through EVENT_NOTIFICATION_PARAMETERS_EXCLUDE_PATTERNS
name|filterMapkeys
argument_list|(
name|partitionObj
operator|.
name|getParameters
argument_list|()
argument_list|,
name|paramsFilter
argument_list|)
expr_stmt|;
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|serializer
operator|.
name|toString
argument_list|(
name|partitionObj
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|createFunctionObjJson
parameter_list|(
name|Function
name|functionObj
parameter_list|)
throws|throws
name|TException
block|{
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|serializer
operator|.
name|toString
argument_list|(
name|functionObj
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Table
name|getTableObj
parameter_list|(
name|ObjectNode
name|jsonTree
parameter_list|)
throws|throws
name|Exception
block|{
name|TDeserializer
name|deSerializer
init|=
operator|new
name|TDeserializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|tableObj
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|String
name|tableJson
init|=
name|jsonTree
operator|.
name|get
argument_list|(
literal|"tableObjJson"
argument_list|)
operator|.
name|asText
argument_list|()
decl_stmt|;
name|deSerializer
operator|.
name|deserialize
argument_list|(
name|tableObj
argument_list|,
name|tableJson
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
name|tableObj
return|;
block|}
specifier|public
specifier|static
name|String
name|createTableColumnStatJson
parameter_list|(
name|ColumnStatistics
name|tableColumnStat
parameter_list|)
throws|throws
name|TException
block|{
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|serializer
operator|.
name|toString
argument_list|(
name|tableColumnStat
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
comment|/*    * TODO: Some thoughts here : We have a current todo to move some of these methods over to    * MessageFactory instead of being here, so we can override them, but before we move them over,    * we should keep the following in mind:    *    * a) We should return Iterables, not Lists. That makes sure that we can be memory-safe when    * implementing it rather than forcing ourselves down a path wherein returning List is part of    * our interface, and then people use .size() or somesuch which makes us need to materialize    * the entire list and not change. Also, returning Iterables allows us to do things like    * Iterables.transform for some of these.    * b) We should not have "magic" names like "tableObjJson", because that breaks expectation of a    * couple of things - firstly, that of serialization format, although that is fine for this    * JSONMessageEncoder, and secondly, that makes us just have a number of mappings, one for each    * obj type, and sometimes, as the case is with alter, have multiples. Also, any event-specific    * item belongs in that event message / event itself, as opposed to in the factory. It's okay to    * have utility accessor methods here that are used by each of the messages to provide accessors.    * I'm adding a couple of those here.    *    */
specifier|public
specifier|static
name|TBase
name|getTObj
parameter_list|(
name|String
name|tSerialized
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TBase
argument_list|>
name|objClass
parameter_list|)
throws|throws
name|Exception
block|{
name|TDeserializer
name|thriftDeSerializer
init|=
operator|new
name|TDeserializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
name|TBase
name|obj
init|=
name|objClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|thriftDeSerializer
operator|.
name|deserialize
argument_list|(
name|obj
argument_list|,
name|tSerialized
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
specifier|public
specifier|static
name|Iterable
argument_list|<
name|?
extends|extends
name|TBase
argument_list|>
name|getTObjs
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|objRefStrs
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|TBase
argument_list|>
name|objClass
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|objRefStrs
argument_list|,
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
argument_list|<
name|String
argument_list|,
name|TBase
argument_list|>
argument_list|()
block|{
specifier|public
name|TBase
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|objStr
parameter_list|)
block|{
try|try
block|{
return|return
name|getTObj
argument_list|(
name|objStr
argument_list|,
name|objClass
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
comment|// We have to add this bit of exception handling here, because Function.apply does not allow us to throw
comment|// the actual exception that might be a checked exception, so we wind up needing to throw a RuntimeException
comment|// with the previously thrown exception as its cause. However, since RuntimeException.getCause() returns
comment|// a throwable instead of an Exception, we have to account for the possibility that the underlying code
comment|// might have thrown a Throwable that we wrapped instead, in which case, continuing to throw the
comment|// RuntimeException is the best thing we can do.
name|Throwable
name|t
init|=
name|re
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|t
throw|;
block|}
else|else
block|{
throw|throw
name|re
throw|;
block|}
block|}
block|}
comment|// If we do not need this format of accessor using ObjectNode, this is a candidate for removal as well
specifier|public
specifier|static
name|Iterable
argument_list|<
name|?
extends|extends
name|TBase
argument_list|>
name|getTObjs
parameter_list|(
name|ObjectNode
name|jsonTree
parameter_list|,
name|String
name|objRefListName
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|TBase
argument_list|>
name|objClass
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterable
argument_list|<
name|JsonNode
argument_list|>
name|jsonArrayIterator
init|=
name|jsonTree
operator|.
name|get
argument_list|(
name|objRefListName
argument_list|)
decl_stmt|;
return|return
name|getTObjs
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|jsonArrayIterator
argument_list|,
name|JsonNode
operator|::
name|asText
argument_list|)
argument_list|,
name|objClass
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartitionKeyValues
parameter_list|(
name|Table
name|table
parameter_list|,
name|Partition
name|partition
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionKeys
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|getPartitionKeysSize
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|partitionKeys
operator|.
name|put
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|partitionKeys
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getPartitionKeyValues
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|iterator
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterators
operator|.
name|transform
argument_list|(
name|iterator
argument_list|,
name|partition
lambda|->
name|getPartitionKeyValues
argument_list|(
name|table
argument_list|,
name|partition
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

