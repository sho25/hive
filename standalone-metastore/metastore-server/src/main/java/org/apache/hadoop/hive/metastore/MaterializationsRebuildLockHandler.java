begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * This is a lock handler implementation for the materializations rebuild.  * It is lightweight: it does not persist any information to metastore db.  * Its states are as follows:  * 1) request lock -&gt; 2) ACQUIRED -&gt; 4) COMMIT_READY -&gt; 6) release lock  *                                -&gt; 5) EXPIRED      -&gt;  *                 -&gt; 3) NOT_ACQUIRED  * First, the rebuild operation will ACQUIRE the lock. If other rebuild  * operation for the same operation is already running, we lock status  * will be NOT_ACQUIRED.  * Before committing the rebuild, the txn handler will signal the handler  * that it is ready to commit the resource (move state to COMMIT_READY).  * We make sure the lock is still available before moving to the new state.  * A lock will not be able to expire when it is in COMMIT_READY state.  * The unlock method is always call by the txn handler, no matter whether  * the transaction succeeds or not, e.g., due to an Exception.  * From ACQUIRED, locks can be also moved to EXPIRED state when they  * expire. From EXPIRED, they can only be released.  */
end_comment

begin_class
specifier|public
class|class
name|MaterializationsRebuildLockHandler
block|{
comment|/* Singleton */
specifier|private
specifier|static
specifier|final
name|MaterializationsRebuildLockHandler
name|SINGLETON
init|=
operator|new
name|MaterializationsRebuildLockHandler
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ResourceLock
argument_list|>
name|locks
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|MaterializationsRebuildLockHandler
parameter_list|()
block|{   }
comment|/**    * Get instance of MaterializationsRebuildLockHandler.    *    * @return the singleton    */
specifier|public
specifier|static
name|MaterializationsRebuildLockHandler
name|get
parameter_list|()
block|{
return|return
name|SINGLETON
return|;
block|}
comment|/**    * Lock materialized view (first step for rebuild). Response contains a lock id    * that corresponds to the input transaction id, and whether the lock was    * ACQUIRED or NOT_ACQUIRED.    * @param dbName the db name of the materialization    * @param tableName the table name of the materialization    * @param txnId the transaction id for the rebuild    * @return the response to the lock request    */
specifier|public
name|LockResponse
name|lockResource
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|long
name|txnId
parameter_list|)
block|{
specifier|final
name|ResourceLock
name|prevResourceLock
init|=
name|locks
operator|.
name|putIfAbsent
argument_list|(
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
operator|new
name|ResourceLock
argument_list|(
name|txnId
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|State
operator|.
name|ACQUIRED
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevResourceLock
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|LockResponse
argument_list|(
name|txnId
argument_list|,
name|LockState
operator|.
name|NOT_ACQUIRED
argument_list|)
return|;
block|}
return|return
operator|new
name|LockResponse
argument_list|(
name|txnId
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|)
return|;
block|}
comment|/**    * Moves from ACQUIRED state to COMMIT_READY.    * @param dbName the db name of the materialization    * @param tableName the table name of the materialization    * @param txnId the transaction id for the rebuild    * @return true if the lock was still active and we could move the materialization    * to COMMIT_READY state, false otherwise    */
specifier|public
name|boolean
name|readyToCommitResource
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|long
name|txnId
parameter_list|)
block|{
specifier|final
name|ResourceLock
name|prevResourceLock
init|=
name|locks
operator|.
name|get
argument_list|(
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevResourceLock
operator|==
literal|null
operator|||
name|prevResourceLock
operator|.
name|txnId
operator|!=
name|txnId
condition|)
block|{
comment|// Lock was outdated and it was removed (then maybe another transaction picked it up)
return|return
literal|false
return|;
block|}
return|return
name|prevResourceLock
operator|.
name|state
operator|.
name|compareAndSet
argument_list|(
name|State
operator|.
name|ACQUIRED
argument_list|,
name|State
operator|.
name|COMMIT_READY
argument_list|)
return|;
block|}
comment|/**    * Heartbeats a certain lock and refreshes its timer.    * @param dbName the db name of the materialization    * @param tableName the table name of the materialization    * @param txnId the transaction id for the rebuild    */
specifier|public
name|boolean
name|refreshLockResource
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|long
name|txnId
parameter_list|)
block|{
specifier|final
name|ResourceLock
name|prevResourceLock
init|=
name|locks
operator|.
name|get
argument_list|(
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevResourceLock
operator|==
literal|null
operator|||
name|prevResourceLock
operator|.
name|txnId
operator|!=
name|txnId
operator|||
name|prevResourceLock
operator|.
name|state
operator|.
name|get
argument_list|()
operator|!=
name|State
operator|.
name|ACQUIRED
condition|)
block|{
comment|// Lock was outdated and it was removed (then maybe another transaction picked it up)
comment|// or changed its state
return|return
literal|false
return|;
block|}
name|prevResourceLock
operator|.
name|lastHeartBeatTime
operator|.
name|set
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Releases a certain lock.    * @param dbName the db name of the materialization    * @param tableName the table name of the materialization    * @param txnId the transaction id for the rebuild    * @return true if the lock could be released properly, false otherwise    */
specifier|public
name|boolean
name|unlockResource
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|long
name|txnId
parameter_list|)
block|{
specifier|final
name|String
name|fullyQualifiedName
init|=
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|ResourceLock
name|prevResourceLock
init|=
name|locks
operator|.
name|get
argument_list|(
name|fullyQualifiedName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevResourceLock
operator|==
literal|null
operator|||
name|prevResourceLock
operator|.
name|txnId
operator|!=
name|txnId
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|locks
operator|.
name|remove
argument_list|(
name|fullyQualifiedName
argument_list|,
name|prevResourceLock
argument_list|)
return|;
block|}
comment|/**    * Method that removes from the handler those locks that have expired.    * @param timeout time after which we consider the locks to have expired    */
specifier|public
name|long
name|cleanupResourceLocks
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|long
name|removed
init|=
literal|0L
decl_stmt|;
specifier|final
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ResourceLock
argument_list|>
argument_list|>
name|it
init|=
name|locks
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|ResourceLock
name|resourceLock
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTime
operator|-
name|resourceLock
operator|.
name|lastHeartBeatTime
operator|.
name|get
argument_list|()
operator|>
name|timeout
condition|)
block|{
if|if
condition|(
name|resourceLock
operator|.
name|state
operator|.
name|compareAndSet
argument_list|(
name|State
operator|.
name|ACQUIRED
argument_list|,
name|State
operator|.
name|EXPIRED
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|removed
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|removed
return|;
block|}
comment|/**    * This class represents a lock that consists of transaction id,    * last refresh time, and state.    */
specifier|private
class|class
name|ResourceLock
block|{
specifier|final
name|long
name|txnId
decl_stmt|;
specifier|final
name|AtomicLong
name|lastHeartBeatTime
decl_stmt|;
specifier|final
name|AtomicStateEnum
name|state
decl_stmt|;
name|ResourceLock
parameter_list|(
name|long
name|txnId
parameter_list|,
name|long
name|lastHeartBeatTime
parameter_list|,
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|txnId
operator|=
name|txnId
expr_stmt|;
name|this
operator|.
name|lastHeartBeatTime
operator|=
operator|new
name|AtomicLong
argument_list|(
name|lastHeartBeatTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|state
operator|=
operator|new
name|AtomicStateEnum
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
enum|enum
name|State
block|{
comment|// This is the initial state for a lock
name|ACQUIRED
block|,
comment|// This means that the lock is being committed at this instant, hence
comment|// the cleaner should not remove it even if it times out. If transaction
comment|// fails, the finally clause will remove the lock
name|COMMIT_READY
block|,
comment|// This means that the lock is ready to be cleaned, hence it cannot
comment|// be committed anymore
name|EXPIRED
block|;   }
comment|/**    * Wrapper class around State enum to make its operations atomic.    */
specifier|private
class|class
name|AtomicStateEnum
block|{
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|State
argument_list|>
name|ref
decl_stmt|;
specifier|public
name|AtomicStateEnum
parameter_list|(
specifier|final
name|State
name|initialValue
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|=
operator|new
name|AtomicReference
argument_list|<
name|State
argument_list|>
argument_list|(
name|initialValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
specifier|final
name|State
name|newValue
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|.
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|State
name|get
parameter_list|()
block|{
return|return
name|this
operator|.
name|ref
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|State
name|getAndSet
parameter_list|(
specifier|final
name|State
name|newValue
parameter_list|)
block|{
return|return
name|this
operator|.
name|ref
operator|.
name|getAndSet
argument_list|(
name|newValue
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|compareAndSet
parameter_list|(
specifier|final
name|State
name|expect
parameter_list|,
specifier|final
name|State
name|update
parameter_list|)
block|{
return|return
name|this
operator|.
name|ref
operator|.
name|compareAndSet
argument_list|(
name|expect
argument_list|,
name|update
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

