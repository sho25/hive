begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|schematool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|normalizeIdentifier
import|;
end_import

begin_class
specifier|public
class|class
name|SchemaToolTaskMergeCatalog
extends|extends
name|SchemaToolTask
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|schematool
operator|.
name|SchemaToolTaskMergeCatalog
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|fromCatalog
decl_stmt|;
specifier|private
name|String
name|toCatalog
decl_stmt|;
annotation|@
name|Override
name|void
name|setCommandLineArguments
parameter_list|(
name|SchemaToolCommandLine
name|cl
parameter_list|)
block|{
name|fromCatalog
operator|=
name|normalizeIdentifier
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"mergeCatalog"
argument_list|)
argument_list|)
expr_stmt|;
name|toCatalog
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"toCatalog"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DB_CONFLICTS_STMT
init|=
literal|"SELECT d.<q>NAME<q> as DB, d.<q>CTLG_NAME<q>, d2.<q>CTLG_NAME<q> FROM<q>DBS<q> d,<q>DBS<q> d2 "
operator|+
literal|"WHERE d.<q>NAME<q> = d2.<q>NAME<q> AND "
operator|+
literal|"d.<q>CTLG_NAME<q> = '%s' AND d2.<q>CTLG_NAME<q> = '%s'"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MERGE_CATALOG_STMT
init|=
literal|"UPDATE<q>DBS<q> "
operator|+
literal|" SET<q>CTLG_NAME<q> = '%s' "
operator|+
literal|" WHERE<q>CTLG_NAME<q> = '%s'"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONVERT_TABLE_TO_EXTERNAL
init|=
literal|"update<q>TBLS<q> set<q>TBL_TYPE<q> = '%s' where<q>TBL_ID<q> in ("
operator|+
literal|"select tid from (select<q>TBL_ID<q> as tid from<q>TBLS<q> t2,<q>DBS<q> d where t2.<q>TBL_TYPE<q> = '%s' and t2.<q>DB_ID<q> = d.<q>DB_ID<q> "
operator|+
literal|"and d.<q>CTLG_NAME<q> = '%s') c) "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UPDATE_CTLG_NAME_ON_DBS
init|=
literal|"update<q>DBS<q> d set d.<q>CTLG_NAME<q> = '%s' WHERE d.<q>CTLG_NAME<q> = '%s' "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ADD_PARAM_TO_TABLE
init|=
literal|"INSERT INTO<q>TABLE_PARAMS<q> (<q>TBL_ID<q>,<q>PARAM_KEY<q>,<q>PARAM_VALUE<q>) select<q>TBL_ID<q>, "
operator|+
literal|"'%s', '%s' from<q>TBLS<q> where<q>TBL_TYPE<q> = '%s' "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ADD_AUTOPURGE_TO_TABLE
init|=
literal|"INSERT INTO<q>TABLE_PARAMS<q> (<q>TBL_ID<q>,<q>PARAM_KEY<q>,<q>PARAM_VALUE<q>) select<q>TBL_ID<q>, "
operator|+
literal|"'%s', '%s' from<q>TBLS<q> t,<q>DBS<q> d,<q>CTLGS<q> c "
operator|+
literal|"where<q>TBL_TYPE<q> = '%s' and t.<q>DB_ID<q> = d.<q>DB_ID<q> and d.<q>CTLG_NAME<q> = c.<q>NAME<q> and c.<q>NAME<q> = '%s' "
decl_stmt|;
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|HiveMetaException
block|{
if|if
condition|(
name|fromCatalog
operator|==
literal|null
operator|||
name|toCatalog
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Merge catalog requires --mergeCatalog and --toCatalog arguments"
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Merging databases from "
operator|+
name|fromCatalog
operator|+
literal|" to "
operator|+
name|toCatalog
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|schemaTool
operator|.
name|getConnectionToMetastore
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|long
name|initTime
decl_stmt|,
name|prevTime
decl_stmt|,
name|curTime
decl_stmt|;
try|try
block|{
comment|// determine conflicts between catalogs first
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|initTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// TODO ensure both catalogs exist first.
comment|// Detect conflicting databases
name|String
name|conflicts
init|=
name|String
operator|.
name|format
argument_list|(
name|schemaTool
operator|.
name|quote
argument_list|(
name|DB_CONFLICTS_STMT
argument_list|)
argument_list|,
name|fromCatalog
argument_list|,
name|toCatalog
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Determining name conflicts between databases across catalogs"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[DB Conflicts] Executing SQL:"
operator|+
name|conflicts
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|conflicts
argument_list|)
decl_stmt|;
name|boolean
name|cleanMerge
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|cleanMerge
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Name conflict(s) between merging catalogs, database "
operator|+
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
operator|+
literal|" exists in catalogs "
operator|+
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
operator|+
literal|" and "
operator|+
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cleanMerge
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[ERROR] Please resolve the database name conflicts shown above manually and retry the mergeCatalog operation."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|conn
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|insert
init|=
name|String
operator|.
name|format
argument_list|(
name|schemaTool
operator|.
name|quote
argument_list|(
name|ADD_AUTOPURGE_TO_TABLE
argument_list|)
argument_list|,
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|,
literal|"MANAGED_TABLE"
argument_list|,
name|fromCatalog
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting external=true on all MANAGED tables in catalog "
operator|+
name|fromCatalog
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[external table property] Executing SQL:"
operator|+
name|insert
argument_list|)
expr_stmt|;
name|prevTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|int
name|count
init|=
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|insert
argument_list|)
decl_stmt|;
name|curTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Set external.table.purge on "
operator|+
name|count
operator|+
literal|" tables, time taken (ms):"
operator|+
operator|(
name|curTime
operator|-
name|prevTime
operator|)
argument_list|)
expr_stmt|;
name|insert
operator|=
name|String
operator|.
name|format
argument_list|(
name|schemaTool
operator|.
name|quote
argument_list|(
name|ADD_AUTOPURGE_TO_TABLE
argument_list|)
argument_list|,
literal|"external.table.purge"
argument_list|,
literal|"true"
argument_list|,
literal|"MANAGED_TABLE"
argument_list|,
name|fromCatalog
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting external.table.purge=true on all MANAGED tables in catalog "
operator|+
name|fromCatalog
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[external.table.purge] Executing SQL:"
operator|+
name|insert
argument_list|)
expr_stmt|;
name|prevTime
operator|=
name|curTime
expr_stmt|;
name|count
operator|=
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|insert
argument_list|)
expr_stmt|;
name|curTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Set external.table.purge on "
operator|+
name|count
operator|+
literal|" tables, time taken (ms):"
operator|+
operator|(
name|curTime
operator|-
name|prevTime
operator|)
argument_list|)
expr_stmt|;
name|String
name|update
init|=
name|String
operator|.
name|format
argument_list|(
name|schemaTool
operator|.
name|quote
argument_list|(
name|CONVERT_TABLE_TO_EXTERNAL
argument_list|)
argument_list|,
literal|"EXTERNAL_TABLE"
argument_list|,
literal|"MANAGED_TABLE"
argument_list|,
name|fromCatalog
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting tableType to EXTERNAL on all MANAGED tables in catalog "
operator|+
name|fromCatalog
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[tableType=EXTERNAL_TABLE] Executing SQL:"
operator|+
name|update
argument_list|)
expr_stmt|;
name|prevTime
operator|=
name|curTime
expr_stmt|;
name|count
operator|=
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|curTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Set tableType=EXTERNAL_TABLE on "
operator|+
name|count
operator|+
literal|" tables, time taken (ms):"
operator|+
operator|(
name|curTime
operator|-
name|prevTime
operator|)
argument_list|)
expr_stmt|;
name|String
name|merge
init|=
name|String
operator|.
name|format
argument_list|(
name|schemaTool
operator|.
name|quote
argument_list|(
name|MERGE_CATALOG_STMT
argument_list|)
argument_list|,
name|toCatalog
argument_list|,
name|fromCatalog
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting catalog names on all databases in catalog "
operator|+
name|fromCatalog
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[catalog name] Executing SQL:"
operator|+
name|merge
argument_list|)
expr_stmt|;
name|prevTime
operator|=
name|curTime
expr_stmt|;
name|count
operator|=
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|curTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Changed catalog names on "
operator|+
name|count
operator|+
literal|" databases, time taken (ms):"
operator|+
operator|(
name|curTime
operator|-
name|prevTime
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|count
operator|+
literal|" databases have been merged from catalog "
operator|+
name|fromCatalog
operator|+
literal|" into "
operator|+
name|toCatalog
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaTool
operator|.
name|isDryRun
argument_list|()
condition|)
block|{
name|conn
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Committed the changes. Total time taken (ms):"
operator|+
operator|(
name|curTime
operator|-
name|initTime
operator|)
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to merge catalog"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rolling back transaction"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Not really much we can do here.
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to rollback, everything will probably go bad from here."
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close connection."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

