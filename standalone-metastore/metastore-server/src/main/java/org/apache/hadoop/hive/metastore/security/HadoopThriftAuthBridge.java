begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthorizeCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmChoiceCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSaslClientTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSaslServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_comment
comment|/**  * Functions that bridge Thrift's SASL transports to Hadoop's  * SASL callback handlers and authentication classes.  * HIVE-11378 This class is not directly used anymore.  It now exists only as a shell to be  * extended by HadoopThriftAuthBridge23 in 0.23 shims.  I have made it abstract  * to avoid maintenance errors.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|HadoopThriftAuthBridge
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HadoopThriftAuthBridge
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// We want to have only one auth bridge.  In the past this was handled by ShimLoader, but since
comment|// we're no longer using that we'll do it here.
specifier|private
specifier|static
name|HadoopThriftAuthBridge
name|self
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|HadoopThriftAuthBridge
name|getBridge
parameter_list|()
block|{
if|if
condition|(
name|self
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|HadoopThriftAuthBridge
operator|.
name|class
init|)
block|{
if|if
condition|(
name|self
operator|==
literal|null
condition|)
name|self
operator|=
operator|new
name|HadoopThriftAuthBridge23
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|self
return|;
block|}
specifier|public
name|Client
name|createClient
parameter_list|()
block|{
return|return
operator|new
name|Client
argument_list|()
return|;
block|}
specifier|public
name|Client
name|createClientWithConf
parameter_list|(
name|String
name|authMethod
parameter_list|)
block|{
name|UserGroupInformation
name|ugi
decl_stmt|;
try|try
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to get current login user: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|loginUserHasCurrentAuthMethod
argument_list|(
name|ugi
argument_list|,
name|authMethod
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not setting UGI conf as passed-in authMethod of "
operator|+
name|authMethod
operator|+
literal|" = current."
argument_list|)
expr_stmt|;
return|return
operator|new
name|Client
argument_list|()
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting UGI conf as passed-in authMethod of "
operator|+
name|authMethod
operator|+
literal|" != current."
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
name|authMethod
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|Client
argument_list|()
return|;
block|}
block|}
specifier|public
name|Server
name|createServer
parameter_list|(
name|String
name|keytabFile
parameter_list|,
name|String
name|principalConf
parameter_list|,
name|String
name|clientConf
parameter_list|)
throws|throws
name|TTransportException
block|{
return|return
operator|new
name|Server
argument_list|(
name|keytabFile
argument_list|,
name|principalConf
argument_list|,
name|clientConf
argument_list|)
return|;
block|}
specifier|public
name|String
name|getServerPrincipal
parameter_list|(
name|String
name|principalConfig
parameter_list|,
name|String
name|host
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|serverPrincipal
init|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|principalConfig
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|String
name|names
index|[]
init|=
name|SaslRpcServer
operator|.
name|splitKerberosName
argument_list|(
name|serverPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Kerberos principal name does NOT have the expected hostname part: "
operator|+
name|serverPrincipal
argument_list|)
throw|;
block|}
return|return
name|serverPrincipal
return|;
block|}
comment|/**    * Method to get canonical-ized hostname, given a hostname (possibly a CNAME).    * This should allow for service-principals to use simplified CNAMEs.    * @param hostName The hostname to be canonical-ized.    * @return Given a CNAME, the canonical-ized hostname is returned. If not found, the original hostname is returned.    */
specifier|public
name|String
name|getCanonicalHostName
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
try|try
block|{
return|return
name|InetAddress
operator|.
name|getByName
argument_list|(
name|hostName
argument_list|)
operator|.
name|getCanonicalHostName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not retrieve canonical hostname for "
operator|+
name|hostName
argument_list|,
name|exception
argument_list|)
expr_stmt|;
return|return
name|hostName
return|;
block|}
block|}
specifier|public
name|UserGroupInformation
name|getCurrentUGIWithConf
parameter_list|(
name|String
name|authMethod
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
decl_stmt|;
try|try
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to get current user: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|loginUserHasCurrentAuthMethod
argument_list|(
name|ugi
argument_list|,
name|authMethod
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not setting UGI conf as passed-in authMethod of "
operator|+
name|authMethod
operator|+
literal|" = current."
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting UGI conf as passed-in authMethod of "
operator|+
name|authMethod
operator|+
literal|" != current."
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
name|authMethod
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
block|}
comment|/**    * Return true if the current login user is already using the given authMethod.    *    * Used above to ensure we do not create a new Configuration object and as such    * lose other settings such as the cluster to which the JVM is connected. Required    * for oozie since it does not have a core-site.xml see HIVE-7682    */
specifier|private
name|boolean
name|loginUserHasCurrentAuthMethod
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|String
name|sAuthMethod
parameter_list|)
block|{
name|AuthenticationMethod
name|authMethod
decl_stmt|;
try|try
block|{
comment|// based on SecurityUtil.getAuthenticationMethod()
name|authMethod
operator|=
name|Enum
operator|.
name|valueOf
argument_list|(
name|AuthenticationMethod
operator|.
name|class
argument_list|,
name|sAuthMethod
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid attribute value for "
operator|+
name|HADOOP_SECURITY_AUTHENTICATION
operator|+
literal|" of "
operator|+
name|sAuthMethod
argument_list|,
name|iae
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current authMethod = "
operator|+
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
operator|.
name|equals
argument_list|(
name|authMethod
argument_list|)
return|;
block|}
comment|/**    * Read and return Hadoop SASL configuration which can be configured using    * "hadoop.rpc.protection"    * @param conf    * @return Hadoop SASL configuration    */
specifier|public
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHadoopSaslProperties
parameter_list|(
name|Configuration
name|conf
parameter_list|)
function_decl|;
specifier|public
specifier|static
class|class
name|Client
block|{
comment|/**      * Create a client-side SASL transport that wraps an underlying transport.      *      * @param methodStr The authentication method to use. Currently only KERBEROS is      *               supported.      * @param principalConfig The Kerberos principal of the target server.      * @param underlyingTransport The underlying transport mechanism, usually a TSocket.      * @param saslProps the sasl properties to create the client with      */
specifier|public
name|TTransport
name|createClientTransport
parameter_list|(
name|String
name|principalConfig
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|methodStr
parameter_list|,
name|String
name|tokenStrForm
parameter_list|,
specifier|final
name|TTransport
name|underlyingTransport
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AuthMethod
name|method
init|=
name|AuthMethod
operator|.
name|valueOf
argument_list|(
name|AuthMethod
operator|.
name|class
argument_list|,
name|methodStr
argument_list|)
decl_stmt|;
name|TTransport
name|saslTransport
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|DIGEST
case|:
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|t
init|=
operator|new
name|Token
argument_list|<>
argument_list|()
decl_stmt|;
name|t
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
name|saslTransport
operator|=
operator|new
name|TSaslClientTransport
argument_list|(
name|method
operator|.
name|getMechanismName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|SaslRpcServer
operator|.
name|SASL_DEFAULT_REALM
argument_list|,
name|saslProps
argument_list|,
operator|new
name|SaslClientCallbackHandler
argument_list|(
name|t
argument_list|)
argument_list|,
name|underlyingTransport
argument_list|)
expr_stmt|;
return|return
operator|new
name|TUGIAssumingTransport
argument_list|(
name|saslTransport
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
return|;
case|case
name|KERBEROS
case|:
name|String
name|serverPrincipal
init|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|principalConfig
argument_list|,
name|host
argument_list|)
decl_stmt|;
specifier|final
name|String
name|names
index|[]
init|=
name|SaslRpcServer
operator|.
name|splitKerberosName
argument_list|(
name|serverPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Kerberos principal name does NOT have the expected hostname part: "
operator|+
name|serverPrincipal
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|TUGIAssumingTransport
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TUGIAssumingTransport
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|TTransport
name|saslTransport
init|=
operator|new
name|TSaslClientTransport
argument_list|(
name|method
operator|.
name|getMechanismName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|names
index|[
literal|0
index|]
argument_list|,
name|names
index|[
literal|1
index|]
argument_list|,
name|saslProps
argument_list|,
literal|null
argument_list|,
name|underlyingTransport
argument_list|)
decl_stmt|;
return|return
operator|new
name|TUGIAssumingTransport
argument_list|(
name|saslTransport
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|SaslException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not instantiate SASL transport"
argument_list|,
name|se
argument_list|)
throw|;
block|}
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported authentication method: "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SaslClientCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
specifier|private
specifier|final
name|char
index|[]
name|userPassword
decl_stmt|;
specifier|public
name|SaslClientCallbackHandler
parameter_list|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|encodeIdentifier
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|userPassword
operator|=
name|encodePassword
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|UnsupportedCallbackException
block|{
name|NameCallback
name|nc
init|=
literal|null
decl_stmt|;
name|PasswordCallback
name|pc
init|=
literal|null
decl_stmt|;
name|RealmCallback
name|rc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|RealmChoiceCallback
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
name|nc
operator|=
operator|(
name|NameCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
name|pc
operator|=
operator|(
name|PasswordCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|RealmCallback
condition|)
block|{
name|rc
operator|=
operator|(
name|RealmCallback
operator|)
name|callback
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|,
literal|"Unrecognized SASL client callback"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|nc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client callback: setting username: "
operator|+
name|userName
argument_list|)
expr_stmt|;
block|}
name|nc
operator|.
name|setName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client callback: setting userPassword"
argument_list|)
expr_stmt|;
block|}
name|pc
operator|.
name|setPassword
argument_list|(
name|userPassword
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client callback: setting realm: "
operator|+
name|rc
operator|.
name|getDefaultText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setText
argument_list|(
name|rc
operator|.
name|getDefaultText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|encodeIdentifier
parameter_list|(
name|byte
index|[]
name|identifier
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|identifier
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|char
index|[]
name|encodePassword
parameter_list|(
name|byte
index|[]
name|password
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|password
argument_list|)
argument_list|)
operator|.
name|toCharArray
argument_list|()
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|Server
block|{
specifier|public
enum|enum
name|ServerMode
block|{
name|HIVESERVER2
block|,
name|METASTORE
block|}
empty_stmt|;
specifier|protected
specifier|final
name|UserGroupInformation
name|realUgi
decl_stmt|;
specifier|protected
specifier|final
name|UserGroupInformation
name|clientValidationUGI
decl_stmt|;
specifier|protected
name|DelegationTokenSecretManager
name|secretManager
decl_stmt|;
specifier|public
name|Server
parameter_list|()
throws|throws
name|TTransportException
block|{
try|try
block|{
name|realUgi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|clientValidationUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|TTransportException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create a server with a kerberos keytab/principal.      */
specifier|protected
name|Server
parameter_list|(
name|String
name|keytabFile
parameter_list|,
name|String
name|principalConf
parameter_list|,
name|String
name|clientConf
parameter_list|)
throws|throws
name|TTransportException
block|{
if|if
condition|(
name|keytabFile
operator|==
literal|null
operator|||
name|keytabFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TTransportException
argument_list|(
literal|"No keytab specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|principalConf
operator|==
literal|null
operator|||
name|principalConf
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TTransportException
argument_list|(
literal|"No principal specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|clientConf
operator|==
literal|null
operator|||
name|clientConf
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Don't bust existing setups.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Client-facing principal not set. Using server-side setting: "
operator|+
name|principalConf
argument_list|)
expr_stmt|;
name|clientConf
operator|=
name|principalConf
expr_stmt|;
block|}
comment|// Login from the keytab
name|String
name|kerberosName
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Logging in via CLIENT based principal "
argument_list|)
expr_stmt|;
name|kerberosName
operator|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|clientConf
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|kerberosName
argument_list|,
name|keytabFile
argument_list|)
expr_stmt|;
name|clientValidationUGI
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
assert|assert
name|clientValidationUGI
operator|.
name|isFromKeytab
argument_list|()
assert|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Logging in via SERVER based principal "
argument_list|)
expr_stmt|;
name|kerberosName
operator|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|principalConf
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|kerberosName
argument_list|,
name|keytabFile
argument_list|)
expr_stmt|;
name|realUgi
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
assert|assert
name|realUgi
operator|.
name|isFromKeytab
argument_list|()
assert|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|TTransportException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setSecretManager
parameter_list|(
name|DelegationTokenSecretManager
name|secretManager
parameter_list|)
block|{
name|this
operator|.
name|secretManager
operator|=
name|secretManager
expr_stmt|;
block|}
comment|/**      * Create a TTransportFactory that, upon connection of a client socket,      * negotiates a Kerberized SASL transport. The resulting TTransportFactory      * can be passed as both the input and output transport factory when      * instantiating a TThreadPoolServer, for example.      *      * @param saslProps Map of SASL properties      */
specifier|public
name|TTransportFactory
name|createTransportFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|)
throws|throws
name|TTransportException
block|{
name|TSaslServerTransport
operator|.
name|Factory
name|transFactory
init|=
name|createSaslServerTransportFactory
argument_list|(
name|saslProps
argument_list|)
decl_stmt|;
return|return
operator|new
name|TUGIAssumingTransportFactory
argument_list|(
name|transFactory
argument_list|,
name|clientValidationUGI
argument_list|)
return|;
block|}
comment|/**      * Create a TSaslServerTransport.Factory that, upon connection of a client      * socket, negotiates a Kerberized SASL transport.      *      * @param saslProps Map of SASL properties      */
specifier|public
name|TSaslServerTransport
operator|.
name|Factory
name|createSaslServerTransportFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|)
throws|throws
name|TTransportException
block|{
comment|// Parse out the kerberos principal, host, realm.
name|String
name|kerberosName
init|=
name|clientValidationUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|names
index|[]
init|=
name|SaslRpcServer
operator|.
name|splitKerberosName
argument_list|(
name|kerberosName
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|TTransportException
argument_list|(
literal|"Kerberos principal should have 3 parts: "
operator|+
name|kerberosName
argument_list|)
throw|;
block|}
name|TSaslServerTransport
operator|.
name|Factory
name|transFactory
init|=
operator|new
name|TSaslServerTransport
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|transFactory
operator|.
name|addServerDefinition
argument_list|(
name|AuthMethod
operator|.
name|KERBEROS
operator|.
name|getMechanismName
argument_list|()
argument_list|,
name|names
index|[
literal|0
index|]
argument_list|,
name|names
index|[
literal|1
index|]
argument_list|,
comment|// two parts of kerberos principal
name|saslProps
argument_list|,
operator|new
name|SaslRpcServer
operator|.
name|SaslGssCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transFactory
operator|.
name|addServerDefinition
argument_list|(
name|AuthMethod
operator|.
name|DIGEST
operator|.
name|getMechanismName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SaslRpcServer
operator|.
name|SASL_DEFAULT_REALM
argument_list|,
name|saslProps
argument_list|,
operator|new
name|SaslDigestCallbackHandler
argument_list|(
name|secretManager
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|transFactory
return|;
block|}
comment|/**      * Wrap a TTransportFactory in such a way that, before processing any RPC, it      * assumes the UserGroupInformation of the user authenticated by      * the SASL transport.      */
specifier|public
name|TTransportFactory
name|wrapTransportFactory
parameter_list|(
name|TTransportFactory
name|transFactory
parameter_list|)
block|{
return|return
operator|new
name|TUGIAssumingTransportFactory
argument_list|(
name|transFactory
argument_list|,
name|realUgi
argument_list|)
return|;
block|}
comment|/**      * Wrap a TProcessor in such a way that, before processing any RPC, it      * assumes the UserGroupInformation of the user authenticated by      * the SASL transport.      */
specifier|public
name|TProcessor
name|wrapProcessor
parameter_list|(
name|TProcessor
name|processor
parameter_list|)
block|{
return|return
operator|new
name|TUGIAssumingProcessor
argument_list|(
name|processor
argument_list|,
name|secretManager
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Wrap a TProcessor to capture the client information like connecting userid, ip etc      */
specifier|public
name|TProcessor
name|wrapNonAssumingProcessor
parameter_list|(
name|TProcessor
name|processor
parameter_list|)
block|{
return|return
operator|new
name|TUGIAssumingProcessor
argument_list|(
name|processor
argument_list|,
name|secretManager
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|final
specifier|static
name|ThreadLocal
argument_list|<
name|InetAddress
argument_list|>
name|remoteAddress
init|=
operator|new
name|ThreadLocal
argument_list|<
name|InetAddress
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|InetAddress
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|InetAddress
name|getRemoteAddress
parameter_list|()
block|{
return|return
name|remoteAddress
operator|.
name|get
argument_list|()
return|;
block|}
specifier|final
specifier|static
name|ThreadLocal
argument_list|<
name|AuthenticationMethod
argument_list|>
name|authenticationMethod
init|=
operator|new
name|ThreadLocal
argument_list|<
name|AuthenticationMethod
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|AuthenticationMethod
name|initialValue
parameter_list|()
block|{
return|return
name|AuthenticationMethod
operator|.
name|TOKEN
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|String
argument_list|>
name|remoteUser
init|=
operator|new
name|ThreadLocal
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|String
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|String
name|getRemoteUser
parameter_list|()
block|{
return|return
name|remoteUser
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
specifier|final
specifier|static
name|ThreadLocal
argument_list|<
name|String
argument_list|>
name|userAuthMechanism
init|=
operator|new
name|ThreadLocal
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|String
name|initialValue
parameter_list|()
block|{
return|return
name|AuthMethod
operator|.
name|KERBEROS
operator|.
name|getMechanismName
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|String
name|getUserAuthMechanism
parameter_list|()
block|{
return|return
name|userAuthMechanism
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** CallbackHandler for SASL DIGEST-MD5 mechanism */
comment|// This code is pretty much completely based on Hadoop's
comment|// SaslRpcServer.SaslDigestCallbackHandler - the only reason we could not
comment|// use that Hadoop class as-is was because it needs a Server.Connection object
comment|// which is relevant in hadoop rpc but not here in the metastore - so the
comment|// code below does not deal with the Connection Server.object.
specifier|static
class|class
name|SaslDigestCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
specifier|final
name|DelegationTokenSecretManager
name|secretManager
decl_stmt|;
specifier|public
name|SaslDigestCallbackHandler
parameter_list|(
name|DelegationTokenSecretManager
name|secretManager
parameter_list|)
block|{
name|this
operator|.
name|secretManager
operator|=
name|secretManager
expr_stmt|;
block|}
specifier|private
name|char
index|[]
name|getPassword
parameter_list|(
name|DelegationTokenIdentifier
name|tokenid
parameter_list|)
throws|throws
name|InvalidToken
block|{
return|return
name|encodePassword
argument_list|(
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|tokenid
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|char
index|[]
name|encodePassword
parameter_list|(
name|byte
index|[]
name|password
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|password
argument_list|)
argument_list|)
operator|.
name|toCharArray
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|InvalidToken
throws|,
name|UnsupportedCallbackException
block|{
name|NameCallback
name|nc
init|=
literal|null
decl_stmt|;
name|PasswordCallback
name|pc
init|=
literal|null
decl_stmt|;
name|AuthorizeCallback
name|ac
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|AuthorizeCallback
condition|)
block|{
name|ac
operator|=
operator|(
name|AuthorizeCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
name|nc
operator|=
operator|(
name|NameCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
name|pc
operator|=
operator|(
name|PasswordCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|RealmCallback
condition|)
block|{
continue|continue;
comment|// realm is ignored
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|,
literal|"Unrecognized SASL DIGEST-MD5 Callback"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|DelegationTokenIdentifier
name|tokenIdentifier
init|=
name|SaslRpcServer
operator|.
name|getIdentifier
argument_list|(
name|nc
operator|.
name|getDefaultName
argument_list|()
argument_list|,
name|secretManager
argument_list|)
decl_stmt|;
name|char
index|[]
name|password
init|=
name|getPassword
argument_list|(
name|tokenIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL server DIGEST-MD5 callback: setting password "
operator|+
literal|"for client: "
operator|+
name|tokenIdentifier
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pc
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ac
operator|!=
literal|null
condition|)
block|{
name|String
name|authid
init|=
name|ac
operator|.
name|getAuthenticationID
argument_list|()
decl_stmt|;
name|String
name|authzid
init|=
name|ac
operator|.
name|getAuthorizationID
argument_list|()
decl_stmt|;
if|if
condition|(
name|authid
operator|.
name|equals
argument_list|(
name|authzid
argument_list|)
condition|)
block|{
name|ac
operator|.
name|setAuthorized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ac
operator|.
name|setAuthorized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ac
operator|.
name|isAuthorized
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|username
init|=
name|SaslRpcServer
operator|.
name|getIdentifier
argument_list|(
name|authzid
argument_list|,
name|secretManager
argument_list|)
operator|.
name|getUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL server DIGEST-MD5 callback: setting "
operator|+
literal|"canonicalized client ID: "
operator|+
name|username
argument_list|)
expr_stmt|;
block|}
name|ac
operator|.
name|setAuthorizedID
argument_list|(
name|authzid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Processor that pulls the SaslServer object out of the transport, and      * assumes the remote user's UGI before calling through to the original      * processor.      *      * This is used on the server side to set the UGI for each specific call.      */
specifier|protected
class|class
name|TUGIAssumingProcessor
implements|implements
name|TProcessor
block|{
specifier|final
name|TProcessor
name|wrapped
decl_stmt|;
name|DelegationTokenSecretManager
name|secretManager
decl_stmt|;
name|boolean
name|useProxy
decl_stmt|;
name|TUGIAssumingProcessor
parameter_list|(
name|TProcessor
name|wrapped
parameter_list|,
name|DelegationTokenSecretManager
name|secretManager
parameter_list|,
name|boolean
name|useProxy
parameter_list|)
block|{
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
name|this
operator|.
name|secretManager
operator|=
name|secretManager
expr_stmt|;
name|this
operator|.
name|useProxy
operator|=
name|useProxy
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|TProtocol
name|inProt
parameter_list|,
specifier|final
name|TProtocol
name|outProt
parameter_list|)
throws|throws
name|TException
block|{
name|TTransport
name|trans
init|=
name|inProt
operator|.
name|getTransport
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|trans
operator|instanceof
name|TSaslServerTransport
operator|)
condition|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
literal|"Unexpected non-SASL transport "
operator|+
name|trans
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|TSaslServerTransport
name|saslTrans
init|=
operator|(
name|TSaslServerTransport
operator|)
name|trans
decl_stmt|;
name|SaslServer
name|saslServer
init|=
name|saslTrans
operator|.
name|getSaslServer
argument_list|()
decl_stmt|;
name|String
name|authId
init|=
name|saslServer
operator|.
name|getAuthorizationID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"AUTH ID ======>"
operator|+
name|authId
argument_list|)
expr_stmt|;
name|String
name|endUser
init|=
name|authId
decl_stmt|;
name|Socket
name|socket
init|=
operator|(
call|(
name|TSocket
call|)
argument_list|(
name|saslTrans
operator|.
name|getUnderlyingTransport
argument_list|()
argument_list|)
operator|)
operator|.
name|getSocket
argument_list|()
decl_stmt|;
name|remoteAddress
operator|.
name|set
argument_list|(
name|socket
operator|.
name|getInetAddress
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|mechanismName
init|=
name|saslServer
operator|.
name|getMechanismName
argument_list|()
decl_stmt|;
name|userAuthMechanism
operator|.
name|set
argument_list|(
name|mechanismName
argument_list|)
expr_stmt|;
if|if
condition|(
name|AuthMethod
operator|.
name|PLAIN
operator|.
name|getMechanismName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|mechanismName
argument_list|)
condition|)
block|{
name|remoteUser
operator|.
name|set
argument_list|(
name|endUser
argument_list|)
expr_stmt|;
return|return
name|wrapped
operator|.
name|process
argument_list|(
name|inProt
argument_list|,
name|outProt
argument_list|)
return|;
block|}
name|authenticationMethod
operator|.
name|set
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
if|if
condition|(
name|AuthMethod
operator|.
name|TOKEN
operator|.
name|getMechanismName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|mechanismName
argument_list|)
condition|)
block|{
try|try
block|{
name|TokenIdentifier
name|tokenId
init|=
name|SaslRpcServer
operator|.
name|getIdentifier
argument_list|(
name|authId
argument_list|,
name|secretManager
argument_list|)
decl_stmt|;
name|endUser
operator|=
name|tokenId
operator|.
name|getUser
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|authenticationMethod
operator|.
name|set
argument_list|(
name|AuthenticationMethod
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|UserGroupInformation
name|clientUgi
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|useProxy
condition|)
block|{
name|clientUgi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|endUser
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
expr_stmt|;
name|remoteUser
operator|.
name|set
argument_list|(
name|clientUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set remoteUser :"
operator|+
name|remoteUser
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|clientUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|wrapped
operator|.
name|process
argument_list|(
name|inProt
argument_list|,
name|outProt
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
else|else
block|{
comment|// use the short user name for the request
name|UserGroupInformation
name|endUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|endUser
argument_list|)
decl_stmt|;
name|remoteUser
operator|.
name|set
argument_list|(
name|endUserUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set remoteUser :"
operator|+
name|remoteUser
operator|.
name|get
argument_list|()
operator|+
literal|", from endUser :"
operator|+
name|endUser
argument_list|)
expr_stmt|;
return|return
name|wrapped
operator|.
name|process
argument_list|(
name|inProt
argument_list|,
name|outProt
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rte
parameter_list|)
block|{
if|if
condition|(
name|rte
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|rte
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
name|rte
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
comment|// unexpected!
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
comment|// unexpected!
block|}
finally|finally
block|{
if|if
condition|(
name|clientUgi
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|FileSystem
operator|.
name|closeAllForUGI
argument_list|(
name|clientUgi
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not clean up file-system handles for UGI: "
operator|+
name|clientUgi
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * A TransportFactory that wraps another one, but assumes a specified UGI      * before calling through.      *      * This is used on the server side to assume the server's Principal when accepting      * clients.      */
specifier|static
class|class
name|TUGIAssumingTransportFactory
extends|extends
name|TTransportFactory
block|{
specifier|private
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
specifier|private
specifier|final
name|TTransportFactory
name|wrapped
decl_stmt|;
specifier|public
name|TUGIAssumingTransportFactory
parameter_list|(
name|TTransportFactory
name|wrapped
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
assert|assert
name|wrapped
operator|!=
literal|null
assert|;
assert|assert
name|ugi
operator|!=
literal|null
assert|;
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|ugi
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TTransport
name|getTransport
parameter_list|(
specifier|final
name|TTransport
name|trans
parameter_list|)
block|{
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|TTransport
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TTransport
name|run
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|getTransport
argument_list|(
name|trans
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

