begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|schematool
operator|.
name|HiveSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|schematool
operator|.
name|HiveSchemaHelper
operator|.
name|MetaStoreConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetastoreVersionInfo
import|;
end_import

begin_class
specifier|public
class|class
name|MetaStoreSchemaInfo
implements|implements
name|IMetaStoreSchemaInfo
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|UPGRADE_FILE_PREFIX
init|=
literal|"upgrade-"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|INIT_FILE_PREFIX
init|=
literal|"hive-schema-"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|VERSION_UPGRADE_LIST
init|=
literal|"upgrade.order"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PRE_UPGRADE_PREFIX
init|=
literal|"pre-"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|CREATE_USER_PREFIX
init|=
literal|"create-user"
decl_stmt|;
specifier|private
name|String
index|[]
name|hiveSchemaVersions
decl_stmt|;
specifier|private
specifier|final
name|String
name|metastoreHome
decl_stmt|;
specifier|protected
specifier|final
name|String
name|dbType
decl_stmt|;
comment|// Some version upgrades often don't change schema. So they are equivalent to
comment|// a version
comment|// that has a corresponding schema. eg "0.13.1" is equivalent to "0.13.0"
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|EQUIVALENT_VERSIONS
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"0.13.1"
argument_list|,
literal|"0.13.0"
argument_list|,
literal|"1.0.0"
argument_list|,
literal|"0.14.0"
argument_list|,
literal|"1.0.1"
argument_list|,
literal|"1.0.0"
argument_list|,
literal|"1.1.1"
argument_list|,
literal|"1.1.0"
argument_list|,
literal|"1.2.1"
argument_list|,
literal|"1.2.0"
argument_list|)
decl_stmt|;
specifier|public
name|MetaStoreSchemaInfo
parameter_list|(
name|String
name|metastoreHome
parameter_list|,
name|String
name|dbType
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|this
operator|.
name|metastoreHome
operator|=
name|metastoreHome
expr_stmt|;
name|this
operator|.
name|dbType
operator|=
name|dbType
expr_stmt|;
block|}
specifier|private
name|void
name|loadAllUpgradeScripts
parameter_list|(
name|String
name|dbType
parameter_list|)
throws|throws
name|HiveMetaException
block|{
comment|// load upgrade order for the given dbType
name|List
argument_list|<
name|String
argument_list|>
name|upgradeOrderList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|upgradeListFile
init|=
name|getMetaStoreScriptDir
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|VERSION_UPGRADE_LIST
operator|+
literal|"."
operator|+
name|dbType
decl_stmt|;
try|try
init|(
name|FileReader
name|fr
init|=
operator|new
name|FileReader
argument_list|(
name|upgradeListFile
argument_list|)
init|;
name|BufferedReader
name|bfReader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fr
argument_list|)
init|)
block|{
name|String
name|currSchemaVersion
decl_stmt|;
while|while
condition|(
operator|(
name|currSchemaVersion
operator|=
name|bfReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|upgradeOrderList
operator|.
name|add
argument_list|(
name|currSchemaVersion
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"File "
operator|+
name|upgradeListFile
operator|+
literal|"not found "
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Error reading "
operator|+
name|upgradeListFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|hiveSchemaVersions
operator|=
name|upgradeOrderList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/***    * Get the list of sql scripts required to upgrade from the give version to current    * @param fromVersion    * @return    * @throws HiveMetaException    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getUpgradeScripts
parameter_list|(
name|String
name|fromVersion
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|upgradeScriptList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// check if we are already at current schema level
if|if
condition|(
name|getHiveSchemaVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|fromVersion
argument_list|)
condition|)
block|{
return|return
name|upgradeScriptList
return|;
block|}
name|loadAllUpgradeScripts
argument_list|(
name|dbType
argument_list|)
expr_stmt|;
comment|// Find the list of scripts to execute for this upgrade
name|int
name|firstScript
init|=
name|hiveSchemaVersions
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hiveSchemaVersions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveSchemaVersions
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
name|fromVersion
argument_list|)
condition|)
block|{
name|firstScript
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|firstScript
operator|==
name|hiveSchemaVersions
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Unknown version specified for upgrade "
operator|+
name|fromVersion
operator|+
literal|" Metastore schema may be too old or newer"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
name|firstScript
init|;
name|i
operator|<
name|hiveSchemaVersions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|scriptFile
init|=
name|generateUpgradeFileName
argument_list|(
name|hiveSchemaVersions
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|upgradeScriptList
operator|.
name|add
argument_list|(
name|scriptFile
argument_list|)
expr_stmt|;
block|}
return|return
name|upgradeScriptList
return|;
block|}
comment|/***    * Get the name of the script to initialize the schema for given version    * @param toVersion Target version. If it's null, then the current server version is used    * @return    * @throws HiveMetaException    */
annotation|@
name|Override
specifier|public
name|String
name|generateInitFileName
parameter_list|(
name|String
name|toVersion
parameter_list|)
throws|throws
name|HiveMetaException
block|{
if|if
condition|(
name|toVersion
operator|==
literal|null
condition|)
block|{
name|toVersion
operator|=
name|getHiveSchemaVersion
argument_list|()
expr_stmt|;
block|}
name|String
name|initScriptName
init|=
name|INIT_FILE_PREFIX
operator|+
name|toVersion
operator|+
literal|"."
operator|+
name|dbType
operator|+
name|SQL_FILE_EXTENSION
decl_stmt|;
comment|// check if the file exists
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|getMetaStoreScriptDir
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|initScriptName
argument_list|)
operator|.
name|exists
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Unknown version specified for initialization: "
operator|+
name|toVersion
argument_list|)
throw|;
block|}
return|return
name|initScriptName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCreateUserScript
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|String
name|createScript
init|=
name|CREATE_USER_PREFIX
operator|+
literal|"."
operator|+
name|dbType
operator|+
name|SQL_FILE_EXTENSION
decl_stmt|;
comment|// check if the file exists
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|getMetaStoreScriptDir
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|createScript
argument_list|)
operator|.
name|exists
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Unable to find create user file, expected: "
operator|+
name|createScript
argument_list|)
throw|;
block|}
return|return
name|createScript
return|;
block|}
comment|/**    * Find the directory of metastore scripts    * @return    */
annotation|@
name|Override
specifier|public
name|String
name|getMetaStoreScriptDir
parameter_list|()
block|{
return|return
name|metastoreHome
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"scripts"
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"metastore"
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"upgrade"
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|dbType
return|;
block|}
comment|// format the upgrade script name eg upgrade-x-y-dbType.sql
specifier|private
name|String
name|generateUpgradeFileName
parameter_list|(
name|String
name|fileVersion
parameter_list|)
block|{
return|return
name|UPGRADE_FILE_PREFIX
operator|+
name|fileVersion
operator|+
literal|"."
operator|+
name|dbType
operator|+
name|SQL_FILE_EXTENSION
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPreUpgradeScriptName
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|upgradeScriptName
parameter_list|)
block|{
return|return
name|PRE_UPGRADE_PREFIX
operator|+
name|index
operator|+
literal|"-"
operator|+
name|upgradeScriptName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHiveSchemaVersion
parameter_list|()
block|{
name|String
name|hiveVersion
init|=
name|MetastoreVersionInfo
operator|.
name|getShortVersion
argument_list|()
decl_stmt|;
return|return
name|getEquivalentVersion
argument_list|(
name|hiveVersion
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getEquivalentVersion
parameter_list|(
name|String
name|hiveVersion
parameter_list|)
block|{
comment|// if there is an equivalent version, return that, else return this version
name|String
name|equivalentVersion
init|=
name|EQUIVALENT_VERSIONS
operator|.
name|get
argument_list|(
name|hiveVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|equivalentVersion
operator|!=
literal|null
condition|)
block|{
return|return
name|equivalentVersion
return|;
block|}
else|else
block|{
return|return
name|hiveVersion
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isVersionCompatible
parameter_list|(
name|String
name|hiveVersion
parameter_list|,
name|String
name|dbVersion
parameter_list|)
block|{
name|hiveVersion
operator|=
name|getEquivalentVersion
argument_list|(
name|hiveVersion
argument_list|)
expr_stmt|;
name|dbVersion
operator|=
name|getEquivalentVersion
argument_list|(
name|dbVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|hiveVersion
operator|.
name|equals
argument_list|(
name|dbVersion
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
index|[]
name|hiveVerParts
init|=
name|hiveVersion
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
index|[]
name|dbVerParts
init|=
name|dbVersion
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveVerParts
operator|.
name|length
operator|!=
literal|3
operator|||
name|dbVerParts
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
comment|// these are non standard version numbers. can't perform the
comment|// comparison on these, so assume that they are incompatible
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dbVerParts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|dbVerPart
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|dbVerParts
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|int
name|hiveVerPart
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|hiveVerParts
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbVerPart
operator|>
name|hiveVerPart
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|dbVerPart
operator|<
name|hiveVerPart
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
continue|continue;
comment|// compare next part
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMetaStoreSchemaVersion
parameter_list|(
name|MetaStoreConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|String
name|versionQuery
decl_stmt|;
name|boolean
name|needsQuotedIdentifier
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
name|connectionInfo
operator|.
name|getDbType
argument_list|()
argument_list|,
name|connectionInfo
operator|.
name|getMetaDbType
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|needsQuotedIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|needsQuotedIdentifier
condition|)
block|{
name|versionQuery
operator|=
literal|"select t.\"SCHEMA_VERSION\" from \"VERSION\" t"
expr_stmt|;
block|}
else|else
block|{
name|versionQuery
operator|=
literal|"select t.SCHEMA_VERSION from VERSION t"
expr_stmt|;
block|}
name|String
name|schema
init|=
operator|(
name|HiveSchemaHelper
operator|.
name|DB_HIVE
operator|.
name|equals
argument_list|(
name|connectionInfo
operator|.
name|getDbType
argument_list|()
argument_list|)
condition|?
literal|"SYS"
else|:
literal|null
operator|)
decl_stmt|;
try|try
init|(
name|Connection
name|metastoreDbConnection
init|=
name|HiveSchemaHelper
operator|.
name|getConnectionToMetastore
argument_list|(
name|connectionInfo
argument_list|,
name|schema
argument_list|)
init|;
name|Statement
name|stmt
operator|=
name|metastoreDbConnection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|versionQuery
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Could not find version info in metastore VERSION table."
argument_list|)
throw|;
block|}
name|String
name|currentSchemaVersion
init|=
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Multiple versions were found in metastore."
argument_list|)
throw|;
block|}
return|return
name|currentSchemaVersion
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to get schema version, Cause:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

