begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|DateColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|DecimalColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|DoubleColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|LongColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|TimestampColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|StringColumnStatsDataInspector
import|;
end_import

begin_comment
comment|/**  * Utils class for columnstats package.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ColumnsStatsUtils
block|{
specifier|private
name|ColumnsStatsUtils
parameter_list|()
block|{}
comment|/**    * Convertes to DateColumnStatsDataInspector if it's a DateColumnStatsData.    * @param cso ColumnStatisticsObj    * @return DateColumnStatsDataInspector    */
specifier|public
specifier|static
name|DateColumnStatsDataInspector
name|dateInspectorFromStats
parameter_list|(
name|ColumnStatisticsObj
name|cso
parameter_list|)
block|{
name|DateColumnStatsDataInspector
name|dateColumnStats
decl_stmt|;
if|if
condition|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|instanceof
name|DateColumnStatsDataInspector
condition|)
block|{
name|dateColumnStats
operator|=
call|(
name|DateColumnStatsDataInspector
call|)
argument_list|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dateColumnStats
operator|=
operator|new
name|DateColumnStatsDataInspector
argument_list|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dateColumnStats
return|;
block|}
comment|/**    * Convertes to TimestampColumnStatsDataInspector if it's a TimestampColumnStatsData.    * @param cso ColumnStatisticsObj    * @return TimestampColumnStatsDataInspector    */
specifier|public
specifier|static
name|TimestampColumnStatsDataInspector
name|timestampInspectorFromStats
parameter_list|(
name|ColumnStatisticsObj
name|cso
parameter_list|)
block|{
name|TimestampColumnStatsDataInspector
name|timestampColumnStats
decl_stmt|;
if|if
condition|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getTimestampStats
argument_list|()
operator|instanceof
name|TimestampColumnStatsDataInspector
condition|)
block|{
name|timestampColumnStats
operator|=
call|(
name|TimestampColumnStatsDataInspector
call|)
argument_list|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getTimestampStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timestampColumnStats
operator|=
operator|new
name|TimestampColumnStatsDataInspector
argument_list|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getTimestampStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|timestampColumnStats
return|;
block|}
comment|/**    * Convertes to StringColumnStatsDataInspector    * if it's a StringColumnStatsData.    * @param cso ColumnStatisticsObj    * @return StringColumnStatsDataInspector    */
specifier|public
specifier|static
name|StringColumnStatsDataInspector
name|stringInspectorFromStats
parameter_list|(
name|ColumnStatisticsObj
name|cso
parameter_list|)
block|{
name|StringColumnStatsDataInspector
name|columnStats
decl_stmt|;
if|if
condition|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|instanceof
name|StringColumnStatsDataInspector
condition|)
block|{
name|columnStats
operator|=
call|(
name|StringColumnStatsDataInspector
call|)
argument_list|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columnStats
operator|=
operator|new
name|StringColumnStatsDataInspector
argument_list|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|columnStats
return|;
block|}
comment|/**    * Convertes to LongColumnStatsDataInspector if it's a LongColumnStatsData.    * @param cso ColumnStatisticsObj    * @return LongColumnStatsDataInspector    */
specifier|public
specifier|static
name|LongColumnStatsDataInspector
name|longInspectorFromStats
parameter_list|(
name|ColumnStatisticsObj
name|cso
parameter_list|)
block|{
name|LongColumnStatsDataInspector
name|columnStats
decl_stmt|;
if|if
condition|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|instanceof
name|LongColumnStatsDataInspector
condition|)
block|{
name|columnStats
operator|=
call|(
name|LongColumnStatsDataInspector
call|)
argument_list|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columnStats
operator|=
operator|new
name|LongColumnStatsDataInspector
argument_list|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|columnStats
return|;
block|}
comment|/**    * Convertes to DoubleColumnStatsDataInspector    * if it's a DoubleColumnStatsData.    * @param cso ColumnStatisticsObj    * @return DoubleColumnStatsDataInspector    */
specifier|public
specifier|static
name|DoubleColumnStatsDataInspector
name|doubleInspectorFromStats
parameter_list|(
name|ColumnStatisticsObj
name|cso
parameter_list|)
block|{
name|DoubleColumnStatsDataInspector
name|columnStats
decl_stmt|;
if|if
condition|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|instanceof
name|DoubleColumnStatsDataInspector
condition|)
block|{
name|columnStats
operator|=
call|(
name|DoubleColumnStatsDataInspector
call|)
argument_list|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columnStats
operator|=
operator|new
name|DoubleColumnStatsDataInspector
argument_list|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|columnStats
return|;
block|}
comment|/**    * Convertes to DecimalColumnStatsDataInspector    * if it's a DecimalColumnStatsData.    * @param cso ColumnStatisticsObj    * @return DecimalColumnStatsDataInspector    */
specifier|public
specifier|static
name|DecimalColumnStatsDataInspector
name|decimalInspectorFromStats
parameter_list|(
name|ColumnStatisticsObj
name|cso
parameter_list|)
block|{
name|DecimalColumnStatsDataInspector
name|columnStats
decl_stmt|;
if|if
condition|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDecimalStats
argument_list|()
operator|instanceof
name|DecimalColumnStatsDataInspector
condition|)
block|{
name|columnStats
operator|=
call|(
name|DecimalColumnStatsDataInspector
call|)
argument_list|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDecimalStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columnStats
operator|=
operator|new
name|DecimalColumnStatsDataInspector
argument_list|(
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDecimalStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|columnStats
return|;
block|}
block|}
end_class

end_unit

