begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|schematool
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_comment
comment|/**  * {@link SchemaToolTaskDrop} drops all data from Hive. It invokes DROP TABLE on all  * tables of the default database and DROP DATABASE CASCADE on all other databases.  */
end_comment

begin_class
specifier|public
class|class
name|SchemaToolTaskDrop
extends|extends
name|SchemaToolTask
block|{
annotation|@
name|VisibleForTesting
name|boolean
name|yes
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
name|void
name|setCommandLineArguments
parameter_list|(
name|SchemaToolCommandLine
name|cmdLine
parameter_list|)
block|{
if|if
condition|(
name|cmdLine
operator|.
name|hasOption
argument_list|(
literal|"yes"
argument_list|)
condition|)
block|{
name|this
operator|.
name|yes
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|HiveMetaException
block|{
comment|// Need to confirm unless it's a dry run or specified -yes
if|if
condition|(
operator|!
name|schemaTool
operator|.
name|isDryRun
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|yes
condition|)
block|{
name|boolean
name|confirmed
init|=
name|promptToConfirm
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|confirmed
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Operation cancelled, exiting."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|Connection
name|conn
init|=
name|schemaTool
operator|.
name|getConnectionToMetastore
argument_list|(
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
specifier|final
name|String
name|def
init|=
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
decl_stmt|;
comment|// List databases
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SHOW DATABASES"
argument_list|)
init|)
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|databases
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Drop databases
for|for
control|(
name|String
name|database
range|:
name|databases
control|)
block|{
comment|// Don't try to drop 'default' database as it's not allowed
if|if
condition|(
operator|!
name|def
operator|.
name|equalsIgnoreCase
argument_list|(
name|database
argument_list|)
condition|)
block|{
if|if
condition|(
name|schemaTool
operator|.
name|isDryRun
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"would drop database "
operator|+
name|database
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logIfVerbose
argument_list|(
literal|"dropping database "
operator|+
name|database
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"DROP DATABASE `%s` CASCADE"
argument_list|,
name|database
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// List tables in 'default' database
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SHOW TABLES IN `%s`"
argument_list|,
name|def
argument_list|)
argument_list|)
init|)
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Drop tables in 'default' database
for|for
control|(
name|String
name|table
range|:
name|tables
control|)
block|{
if|if
condition|(
name|schemaTool
operator|.
name|isDryRun
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"would drop table "
operator|+
name|table
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logIfVerbose
argument_list|(
literal|"dropping table "
operator|+
name|table
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"DROP TABLE `%s`.`%s`"
argument_list|,
name|def
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to drop databases."
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * Display "are you sure? y/n" on command line and return what the user has chosen    * @return    */
specifier|private
name|boolean
name|promptToConfirm
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"This operation will delete ALL managed data in Hive. "
operator|+
literal|"Are you sure you want to continue (y/[n])?"
argument_list|)
expr_stmt|;
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|System
operator|.
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|String
name|input
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"y"
operator|.
name|equalsIgnoreCase
argument_list|(
name|input
argument_list|)
operator|||
literal|"yes"
operator|.
name|equalsIgnoreCase
argument_list|(
name|input
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|logIfVerbose
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|schemaTool
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

