begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|datasource
operator|.
name|DataSourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|datasource
operator|.
name|DataSourceProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MSerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MStorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|AbstractNucleusContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|ClassLoaderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|ClassLoaderResolverImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|NucleusContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|PropertyNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|api
operator|.
name|jdo
operator|.
name|JDOPersistenceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|api
operator|.
name|jdo
operator|.
name|JDOPersistenceManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|scostore
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|util
operator|.
name|WeakValueMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOCanRetryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOHelper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|PersistenceManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|PersistenceManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|datastore
operator|.
name|DataStoreCache
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * This class is a wrapper class around PersistenceManagerFactory and its properties  * These objects are static and need to be carefully modified together such that there are no  * race-conditions when updating them. Additionally, this class provides thread-safe methods  * to get PersistenceManager instances from the current PersistenceManagerFactory. The most  * common usage of this class is to create a PersistenceManager from existing PersistenceManagerFactory  * PersistenceManagerFactory properties are modified less often and hence the update pmf properties  * can make use of read/write locks such that it is only blocking when current properties change.  */
end_comment

begin_class
specifier|public
class|class
name|PersistenceManagerProvider
block|{
specifier|private
specifier|static
name|PersistenceManagerFactory
name|pmf
decl_stmt|;
specifier|private
specifier|static
name|Properties
name|prop
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ReentrantReadWriteLock
name|pmfLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Lock
name|pmfReadLock
init|=
name|pmfLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Lock
name|pmfWriteLock
init|=
name|pmfLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PersistenceManagerProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PINCLASSMAP
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|forTwoMetastoreTesting
decl_stmt|;
specifier|private
specifier|static
name|int
name|retryLimit
decl_stmt|;
specifier|private
specifier|static
name|long
name|retryInterval
decl_stmt|;
specifier|private
specifier|static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
argument_list|<
name|String
argument_list|>
name|passwordProvider
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|MTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"storagedescriptor"
argument_list|,
name|MStorageDescriptor
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"serdeinfo"
argument_list|,
name|MSerDeInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"partition"
argument_list|,
name|MPartition
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|MDatabase
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|MType
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"fieldschema"
argument_list|,
name|MFieldSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"order"
argument_list|,
name|MOrder
operator|.
name|class
argument_list|)
expr_stmt|;
name|PINCLASSMAP
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PersistenceManagerProvider
parameter_list|()
block|{
comment|// prevent instantiation
block|}
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
argument_list|>
name|retriableExceptionClasses
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|JDOCanRetryException
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Helper function for initialize to determine if we should retry an exception.    * We return true if the exception is of a known type of retriable exceptions, or if one    * of its recursive .getCause returns a known type of retriable exception.    */
specifier|private
specifier|static
name|boolean
name|isRetriableException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|retriableExceptionClasses
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
range|:
name|retriableExceptionClasses
control|)
block|{
if|if
condition|(
name|c
operator|.
name|isInstance
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|isRetriableException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * This method updates the PersistenceManagerFactory and its properties if the given    * configuration is different from its current set of properties. Most common case is that    * the persistenceManagerFactory properties do not change, and hence this method is optimized to    * be non-blocking in such cases. However, if the properties are different, this method blocks    * other threads until the properties are updated, current pmf is closed and    * a new pmf is re-initialized. Note that when a PersistenceManagerFactory is re-initialized all    * the PersistenceManagers which are instantiated using old factory become invalid and will throw    * JDOUserException. Hence it is recommended that this method is called in the setup/init phase    * of the Metastore service when there are no other active threads serving clients.    *    * @param conf Configuration which provides the datanucleus/datasource properties for comparison    */
specifier|public
specifier|static
name|void
name|updatePmfProperties
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// take a read lock to check if the datasource properties changed.
comment|// Most common case is that datasource properties do not change
name|Properties
name|propsFromConf
init|=
name|PersistenceManagerProvider
operator|.
name|getDataSourceProps
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|pmfReadLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// keep track of if the read-lock is acquired by this thread
comment|// so that we can unlock it before leaving this method
comment|// this is needed because pmf methods below could throw JDOException (unchecked exception)
comment|// which can lead to readLock not being acquired at the end of the inner try-finally
comment|// block below
name|boolean
name|readLockAcquired
init|=
literal|true
decl_stmt|;
try|try
block|{
comment|// if pmf properties change, need to update, release read lock and take write lock
if|if
condition|(
name|prop
operator|==
literal|null
operator|||
name|pmf
operator|==
literal|null
operator|||
operator|!
name|propsFromConf
operator|.
name|equals
argument_list|(
name|prop
argument_list|)
condition|)
block|{
name|pmfReadLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|readLockAcquired
operator|=
literal|false
expr_stmt|;
name|pmfWriteLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// check if we need to update pmf again here in case some other thread already did it
comment|// for us after releasing readlock and before acquiring write lock above
if|if
condition|(
name|prop
operator|==
literal|null
operator|||
name|pmf
operator|==
literal|null
operator|||
operator|!
name|propsFromConf
operator|.
name|equals
argument_list|(
name|prop
argument_list|)
condition|)
block|{
comment|// OK, now we really need to re-initialize pmf and pmf properties
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating the pmf due to property change"
argument_list|)
expr_stmt|;
if|if
condition|(
name|prop
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Current pmf properties are uninitialized"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|key
range|:
name|prop
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|equals
argument_list|(
name|propsFromConf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|MetastoreConf
operator|.
name|isPrintable
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// The jdbc connection url can contain sensitive information like username and password
comment|// which should be masked out before logging.
name|String
name|oldVal
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|newVal
init|=
name|propsFromConf
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|ConfVars
operator|.
name|CONNECT_URL_KEY
operator|.
name|getVarname
argument_list|()
argument_list|)
condition|)
block|{
name|oldVal
operator|=
name|MetaStoreServerUtils
operator|.
name|anonymizeConnectionURL
argument_list|(
name|oldVal
argument_list|)
expr_stmt|;
name|newVal
operator|=
name|MetaStoreServerUtils
operator|.
name|anonymizeConnectionURL
argument_list|(
name|newVal
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found {} to be different. Old val : {} : New Val : {}"
argument_list|,
name|key
argument_list|,
name|oldVal
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found masked property {} to be different"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|pmf
operator|!=
literal|null
condition|)
block|{
name|clearOutPmfClassLoaderCache
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|forTwoMetastoreTesting
condition|)
block|{
comment|// close the underlying connection pool to avoid leaks
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing PersistenceManagerFactory"
argument_list|)
expr_stmt|;
name|pmf
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"PersistenceManagerFactory closed"
argument_list|)
expr_stmt|;
block|}
name|pmf
operator|=
literal|null
expr_stmt|;
block|}
comment|// update the pmf properties object then initialize pmf using them
name|prop
operator|=
name|propsFromConf
expr_stmt|;
name|retryLimit
operator|=
name|MetastoreConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HMS_HANDLER_ATTEMPTS
argument_list|)
expr_stmt|;
name|retryInterval
operator|=
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HMS_HANDLER_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// init PMF with retry logic
name|retry
argument_list|(
parameter_list|()
lambda|->
block|{
name|initPMF
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|// downgrade by acquiring read lock before releasing write lock
name|pmfReadLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|readLockAcquired
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|pmfWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|readLockAcquired
condition|)
block|{
name|pmfReadLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|initPMF
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|DataSourceProvider
name|dsp
init|=
name|DataSourceProviderFactory
operator|.
name|tryGetDataSourceProviderOrNull
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|dsp
operator|==
literal|null
condition|)
block|{
name|pmf
operator|=
name|JDOHelper
operator|.
name|getPersistenceManagerFactory
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|DataSource
name|ds
init|=
name|dsp
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|dsProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Any preexisting datanucleus property should be passed along
name|dsProperties
operator|.
name|putAll
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|dsProperties
operator|.
name|put
argument_list|(
name|PropertyNames
operator|.
name|PROPERTY_CONNECTION_FACTORY
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|dsProperties
operator|.
name|put
argument_list|(
name|PropertyNames
operator|.
name|PROPERTY_CONNECTION_FACTORY2
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|dsProperties
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|MANAGER_FACTORY_CLASS
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"org.datanucleus.api.jdo.JDOPersistenceManagerFactory"
argument_list|)
expr_stmt|;
name|pmf
operator|=
name|JDOHelper
operator|.
name|getPersistenceManagerFactory
argument_list|(
name|dsProperties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not create PersistenceManagerFactory using "
operator|+
literal|"connection pool properties, will fall back"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|pmf
operator|=
name|JDOHelper
operator|.
name|getPersistenceManagerFactory
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
name|DataStoreCache
name|dsc
init|=
name|pmf
operator|.
name|getDataStoreCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|dsc
operator|!=
literal|null
condition|)
block|{
name|String
name|objTypes
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CACHE_PINOBJTYPES
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting MetaStore object pin classes with hive.metastore.cache.pinobjtypes=\"{}\""
argument_list|,
name|objTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|objTypes
argument_list|)
condition|)
block|{
name|String
index|[]
name|typeTokens
init|=
name|objTypes
operator|.
name|toLowerCase
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|typeTokens
control|)
block|{
name|type
operator|=
name|type
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|PINCLASSMAP
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|dsc
operator|.
name|pinAll
argument_list|(
literal|true
argument_list|,
name|PINCLASSMAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} is not one of the pinnable object types: {}"
argument_list|,
name|type
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
argument_list|(
name|PINCLASSMAP
operator|.
name|keySet
argument_list|()
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"PersistenceManagerFactory returned null DataStoreCache object. "
operator|+
literal|"Unable to initialize object pin types defined by hive.metastore.cache.pinobjtypes"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Removed cached classloaders from DataNucleus    * DataNucleus caches classloaders in NucleusContext.    * In UDFs, this can result in classloaders not getting GCed resulting in PermGen leaks.    * This is particularly an issue when using embedded metastore with HiveServer2,    * since the current classloader gets modified with each new add jar,    * becoming the classloader for downstream classes, which DataNucleus ends up using.    * The NucleusContext cache gets freed up only on calling a close on it.    * We're not closing NucleusContext since it does a bunch of other things which we don't want.    * We're not clearing the cache HashMap by calling HashMap#clear to avoid concurrency issues.    */
specifier|public
specifier|static
name|void
name|clearOutPmfClassLoaderCache
parameter_list|()
block|{
name|pmfWriteLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|pmf
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
operator|(
name|pmf
operator|instanceof
name|JDOPersistenceManagerFactory
operator|)
operator|)
condition|)
block|{
return|return;
block|}
comment|// NOTE : This is hacky, and this section of code is fragile depending on DN code varnames
comment|// so it's likely to stop working at some time in the future, especially if we upgrade DN
comment|// versions, so we actively need to find a better way to make sure the leak doesn't happen
comment|// instead of just clearing out the cache after every call.
name|JDOPersistenceManagerFactory
name|jdoPmf
init|=
operator|(
name|JDOPersistenceManagerFactory
operator|)
name|pmf
decl_stmt|;
name|NucleusContext
name|nc
init|=
name|jdoPmf
operator|.
name|getNucleusContext
argument_list|()
decl_stmt|;
try|try
block|{
name|Field
name|pmCache
init|=
name|pmf
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"pmCache"
argument_list|)
decl_stmt|;
name|pmCache
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|JDOPersistenceManager
argument_list|>
name|pmSet
init|=
operator|(
name|Set
argument_list|<
name|JDOPersistenceManager
argument_list|>
operator|)
name|pmCache
operator|.
name|get
argument_list|(
name|pmf
argument_list|)
decl_stmt|;
for|for
control|(
name|JDOPersistenceManager
name|pm
range|:
name|pmSet
control|)
block|{
name|org
operator|.
name|datanucleus
operator|.
name|ExecutionContext
name|ec
init|=
name|pm
operator|.
name|getExecutionContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ec
operator|instanceof
name|org
operator|.
name|datanucleus
operator|.
name|ExecutionContextThreadedImpl
condition|)
block|{
name|ClassLoaderResolver
name|clr
init|=
operator|(
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|ExecutionContextThreadedImpl
operator|)
name|ec
operator|)
operator|.
name|getClassLoaderResolver
argument_list|()
decl_stmt|;
name|clearClr
argument_list|(
name|clr
argument_list|)
expr_stmt|;
block|}
block|}
name|org
operator|.
name|datanucleus
operator|.
name|plugin
operator|.
name|PluginManager
name|pluginManager
init|=
name|jdoPmf
operator|.
name|getNucleusContext
argument_list|()
operator|.
name|getPluginManager
argument_list|()
decl_stmt|;
name|Field
name|registryField
init|=
name|pluginManager
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"registry"
argument_list|)
decl_stmt|;
name|registryField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|org
operator|.
name|datanucleus
operator|.
name|plugin
operator|.
name|PluginRegistry
name|registry
init|=
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|plugin
operator|.
name|PluginRegistry
operator|)
name|registryField
operator|.
name|get
argument_list|(
name|pluginManager
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|instanceof
name|org
operator|.
name|datanucleus
operator|.
name|plugin
operator|.
name|NonManagedPluginRegistry
condition|)
block|{
name|org
operator|.
name|datanucleus
operator|.
name|plugin
operator|.
name|NonManagedPluginRegistry
name|nRegistry
init|=
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|plugin
operator|.
name|NonManagedPluginRegistry
operator|)
name|registry
decl_stmt|;
name|Field
name|clrField
init|=
name|nRegistry
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"clr"
argument_list|)
decl_stmt|;
name|clrField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClassLoaderResolver
name|clr
init|=
operator|(
name|ClassLoaderResolver
operator|)
name|clrField
operator|.
name|get
argument_list|(
name|nRegistry
argument_list|)
decl_stmt|;
name|clearClr
argument_list|(
name|clr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nc
operator|instanceof
name|org
operator|.
name|datanucleus
operator|.
name|PersistenceNucleusContextImpl
condition|)
block|{
name|org
operator|.
name|datanucleus
operator|.
name|PersistenceNucleusContextImpl
name|pnc
init|=
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|PersistenceNucleusContextImpl
operator|)
name|nc
decl_stmt|;
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|types
operator|.
name|TypeManagerImpl
name|tm
init|=
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|types
operator|.
name|TypeManagerImpl
operator|)
name|pnc
operator|.
name|getTypeManager
argument_list|()
decl_stmt|;
name|Field
name|clrField
init|=
name|tm
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"clr"
argument_list|)
decl_stmt|;
name|clrField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClassLoaderResolver
name|clr
init|=
operator|(
name|ClassLoaderResolver
operator|)
name|clrField
operator|.
name|get
argument_list|(
name|tm
argument_list|)
decl_stmt|;
name|clearClr
argument_list|(
name|clr
argument_list|)
expr_stmt|;
name|Field
name|storeMgrField
init|=
name|pnc
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"storeMgr"
argument_list|)
decl_stmt|;
name|storeMgrField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|rdbms
operator|.
name|RDBMSStoreManager
name|storeMgr
init|=
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|rdbms
operator|.
name|RDBMSStoreManager
operator|)
name|storeMgrField
operator|.
name|get
argument_list|(
name|pnc
argument_list|)
decl_stmt|;
name|Field
name|backingStoreField
init|=
name|storeMgr
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"backingStoreByMemberName"
argument_list|)
decl_stmt|;
name|backingStoreField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Store
argument_list|>
name|backingStoreByMemberName
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Store
argument_list|>
operator|)
name|backingStoreField
operator|.
name|get
argument_list|(
name|storeMgr
argument_list|)
decl_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|backingStoreByMemberName
operator|.
name|values
argument_list|()
control|)
block|{
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|rdbms
operator|.
name|scostore
operator|.
name|BaseContainerStore
name|baseStore
init|=
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|rdbms
operator|.
name|scostore
operator|.
name|BaseContainerStore
operator|)
name|store
decl_stmt|;
name|clrField
operator|=
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|rdbms
operator|.
name|scostore
operator|.
name|BaseContainerStore
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"clr"
argument_list|)
expr_stmt|;
name|clrField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clr
operator|=
operator|(
name|ClassLoaderResolver
operator|)
name|clrField
operator|.
name|get
argument_list|(
name|baseStore
argument_list|)
expr_stmt|;
name|clearClr
argument_list|(
name|clr
argument_list|)
expr_stmt|;
block|}
block|}
name|Field
name|classLoaderResolverMap
init|=
name|AbstractNucleusContext
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"classLoaderResolverMap"
argument_list|)
decl_stmt|;
name|classLoaderResolverMap
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ClassLoaderResolver
argument_list|>
name|loaderMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|ClassLoaderResolver
argument_list|>
operator|)
name|classLoaderResolverMap
operator|.
name|get
argument_list|(
name|nc
argument_list|)
decl_stmt|;
for|for
control|(
name|ClassLoaderResolver
name|clr
range|:
name|loaderMap
operator|.
name|values
argument_list|()
control|)
block|{
name|clearClr
argument_list|(
name|clr
argument_list|)
expr_stmt|;
block|}
name|classLoaderResolverMap
operator|.
name|set
argument_list|(
name|nc
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ClassLoaderResolver
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removed cached classloaders from DataNucleus NucleusContext"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to remove cached classloaders from DataNucleus NucleusContext"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pmfWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|clearClr
parameter_list|(
name|ClassLoaderResolver
name|clr
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|clr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clr
operator|instanceof
name|ClassLoaderResolverImpl
condition|)
block|{
name|ClassLoaderResolverImpl
name|clri
init|=
operator|(
name|ClassLoaderResolverImpl
operator|)
name|clr
decl_stmt|;
name|long
name|resourcesCleared
init|=
name|clearFieldMap
argument_list|(
name|clri
argument_list|,
literal|"resources"
argument_list|)
decl_stmt|;
name|long
name|loadedClassesCleared
init|=
name|clearFieldMap
argument_list|(
name|clri
argument_list|,
literal|"loadedClasses"
argument_list|)
decl_stmt|;
name|long
name|unloadedClassesCleared
init|=
name|clearFieldMap
argument_list|(
name|clri
argument_list|,
literal|"unloadedClasses"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cleared ClassLoaderResolverImpl: {}, {}, {}"
argument_list|,
name|resourcesCleared
argument_list|,
name|loadedClassesCleared
argument_list|,
name|unloadedClassesCleared
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|long
name|clearFieldMap
parameter_list|(
name|ClassLoaderResolverImpl
name|clri
parameter_list|,
name|String
name|mapFieldName
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|mapField
init|=
name|ClassLoaderResolverImpl
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
name|mapFieldName
argument_list|)
decl_stmt|;
name|mapField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
operator|)
name|mapField
operator|.
name|get
argument_list|(
name|clri
argument_list|)
decl_stmt|;
name|long
name|sz
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|mapField
operator|.
name|set
argument_list|(
name|clri
argument_list|,
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|WeakValueMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
comment|/**    * creates a PersistenceManager instance for the current PersistenceManagerFactory. Note that this    * acquires a read-lock on PersistenceManagerFactory so that this method will block if any other    * thread is actively, (re-)initializing PersistenceManagerFactory when this method is called    * Note that this method throws a RuntimeException, if PersistenceManagerFactory is not yet initialized.    *    * @return PersistenceManager from the current PersistenceManagerFactory instance    */
specifier|public
specifier|static
name|PersistenceManager
name|getPersistenceManager
parameter_list|()
block|{
name|pmfReadLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|pmf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot create PersistenceManager. PersistenceManagerFactory is not yet initialized"
argument_list|)
throw|;
block|}
return|return
name|retry
argument_list|(
name|pmf
operator|::
name|getPersistenceManager
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pmfReadLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Properties specified in hive-default.xml override the properties specified    * in jpox.properties.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
specifier|static
name|Properties
name|getDataSourceProps
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Properties
name|prop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|correctAutoStartMechanism
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// First, go through and set all our values for datanucleus and javax.jdo parameters.  This
comment|// has to be a separate first step because we don't set the default values in the config object.
for|for
control|(
name|ConfVars
name|var
range|:
name|MetastoreConf
operator|.
name|dataNucleusAndJdoConfs
control|)
block|{
name|String
name|confVal
init|=
name|MetastoreConf
operator|.
name|getAsString
argument_list|(
name|conf
argument_list|,
name|var
argument_list|)
decl_stmt|;
name|String
name|varName
init|=
name|var
operator|.
name|getVarname
argument_list|()
decl_stmt|;
name|Object
name|prevVal
init|=
name|prop
operator|.
name|setProperty
argument_list|(
name|varName
argument_list|,
name|confVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|MetastoreConf
operator|.
name|isPrintable
argument_list|(
name|varName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Overriding {} value {} from jpox.properties with {}"
argument_list|,
name|varName
argument_list|,
name|prevVal
argument_list|,
name|confVal
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Now, we need to look for any values that the user set that MetastoreConf doesn't know about.
comment|// TODO Commenting this out for now, as it breaks because the conf values aren't getting properly
comment|// interpolated in case of variables.  See HIVE-17788.
comment|/*     for (Map.Entry<String, String> e : conf) {       if (e.getKey().startsWith("datanucleus.") || e.getKey().startsWith("javax.jdo.")) {         // We have to handle this differently depending on whether it is a value known to         // MetastoreConf or not.  If it is, we need to get the default value if a value isn't         // provided.  If not, we just set whatever the user has set.         Object prevVal = prop.setProperty(e.getKey(), e.getValue());         if (LOG.isDebugEnabled()&& MetastoreConf.isPrintable(e.getKey())) {           LOG.debug("Overriding " + e.getKey() + " value " + prevVal               + " from  jpox.properties with " + e.getValue());         }       }     }     */
comment|// Password may no longer be in the conf, use getPassword()
name|passwordProvider
operator|=
name|passwordProvider
operator|!=
literal|null
condition|?
name|passwordProvider
else|:
name|Suppliers
operator|.
name|memoize
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
return|return
name|MetastoreConf
operator|.
name|getPassword
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|PWD
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error getting metastore password: "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|passwd
init|=
name|passwordProvider
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|passwd
argument_list|)
condition|)
block|{
comment|// We can get away with the use of varname here because varname == hiveName for PWD
name|prop
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|PWD
operator|.
name|getVarname
argument_list|()
argument_list|,
name|passwd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|prop
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|MetastoreConf
operator|.
name|isPrintable
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} = {}"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|prop
return|;
block|}
comment|/**    * Update conf to set datanucleus.autoStartMechanismMode=ignored.    * This is necessary to able to use older version of hive against    * an upgraded but compatible metastore schema in db from new version    * of hive    *    * @param conf    */
specifier|private
specifier|static
name|void
name|correctAutoStartMechanism
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|String
name|autoStartKey
init|=
literal|"datanucleus.autoStartMechanismMode"
decl_stmt|;
specifier|final
name|String
name|autoStartIgnore
init|=
literal|"ignored"
decl_stmt|;
name|String
name|currentAutoStartVal
init|=
name|conf
operator|.
name|get
argument_list|(
name|autoStartKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentAutoStartVal
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuration {} is not set. Defaulting to '{}'"
argument_list|,
name|autoStartKey
argument_list|,
name|autoStartIgnore
argument_list|)
expr_stmt|;
name|currentAutoStartVal
operator|=
name|autoStartIgnore
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|autoStartIgnore
operator|.
name|equalsIgnoreCase
argument_list|(
name|currentAutoStartVal
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} is set to unsupported value {} . Setting it to value: {}"
argument_list|,
name|autoStartKey
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|autoStartKey
argument_list|)
argument_list|,
name|autoStartIgnore
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|autoStartKey
argument_list|,
name|autoStartIgnore
argument_list|)
expr_stmt|;
block|}
comment|/**    * To make possible to run multiple metastore in unit test    *    * @param twoMetastoreTesting if we are using multiple metastore in unit test    */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|void
name|setTwoMetastoreTesting
parameter_list|(
name|boolean
name|twoMetastoreTesting
parameter_list|)
block|{
name|forTwoMetastoreTesting
operator|=
name|twoMetastoreTesting
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|prop
operator|==
literal|null
condition|?
literal|null
else|:
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|retry
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|s
parameter_list|)
block|{
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
name|int
name|myRetryLimit
init|=
name|retryLimit
decl_stmt|;
while|while
condition|(
name|myRetryLimit
operator|>
literal|0
condition|)
block|{
try|try
block|{
return|return
name|s
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|myRetryLimit
operator|--
expr_stmt|;
name|boolean
name|retriable
init|=
name|isRetriableException
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|myRetryLimit
operator|>
literal|0
operator|&&
name|retriable
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Retriable exception while invoking method, retrying. {} attempts left"
argument_list|,
name|myRetryLimit
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|retryInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Restore the interrupted status, since we do not want to catch it.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while sleeping before retrying."
argument_list|,
name|ie
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|// If we're here, we'll proceed down the next while loop iteration.
block|}
else|else
block|{
comment|// we've reached our limit, throw the last one.
if|if
condition|(
name|retriable
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception retry limit reached, not retrying any longer."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Non-retriable exception."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ex
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

