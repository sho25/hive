begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tool to twiddle MetaStore delegation tokens.  */
end_comment

begin_class
specifier|public
class|class
name|DelegationTokenTool
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DelegationTokenTool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DelegationTokenStore
name|delegationTokenStore
decl_stmt|;
specifier|private
specifier|static
name|String
name|confLocation
decl_stmt|;
specifier|private
enum|enum
name|OpType
block|{
name|DELETE
block|,
name|LIST
block|}
specifier|private
name|OpType
name|opType
init|=
name|OpType
operator|.
name|LIST
decl_stmt|;
specifier|private
name|boolean
name|isDryRun
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|timeLimitMillis
decl_stmt|;
specifier|private
name|Predicate
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|selectForDeletion
init|=
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BATCH_SIZE_DEFAULT
init|=
literal|100
decl_stmt|;
specifier|private
name|int
name|batchSize
init|=
name|BATCH_SIZE_DEFAULT
decl_stmt|;
comment|// Number of tokens to drop, between sleep intervals;
specifier|private
specifier|static
specifier|final
name|long
name|SLEEP_TIME_MILLIS_DEFAULT
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
specifier|private
name|long
name|sleepTimeMillis
init|=
name|SLEEP_TIME_MILLIS_DEFAULT
decl_stmt|;
comment|// Sleep-time in milliseconds, between batches of delegation tokens dropped.
specifier|private
name|HadoopThriftAuthBridge
operator|.
name|Server
operator|.
name|ServerMode
name|serverMode
init|=
name|HadoopThriftAuthBridge
operator|.
name|Server
operator|.
name|ServerMode
operator|.
name|METASTORE
decl_stmt|;
specifier|private
name|DelegationTokenTool
parameter_list|()
block|{}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|exit
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DelegationTokenTool
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|args
operator|=
operator|new
name|GenericOptionsParser
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|args
argument_list|)
operator|.
name|getRemainingArgs
argument_list|()
expr_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"confLocation"
argument_list|,
literal|true
argument_list|,
literal|"Location of HCat/Hive Server's hive-site."
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"delete"
argument_list|,
literal|false
argument_list|,
literal|"Delete delegation token."
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"list"
argument_list|,
literal|false
argument_list|,
literal|"List delegation tokens."
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"olderThan"
argument_list|,
literal|true
argument_list|,
literal|"Filter for token's issue-date. (e.g. 3d, 1h or 4m)."
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"expired"
argument_list|,
literal|false
argument_list|,
literal|"Select expired delegation tokens for listing/deletion."
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"dryRun"
argument_list|,
literal|false
argument_list|,
literal|"Don't actually delete delegation tokens."
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"batchSize"
argument_list|,
literal|true
argument_list|,
literal|"Number of tokens to drop between sleep intervals."
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"sleepTime"
argument_list|,
literal|true
argument_list|,
literal|"Sleep-time in seconds, between batches of dropped delegation tokens."
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"serverMode"
argument_list|,
literal|true
argument_list|,
literal|"The service from which to read delegation tokens. Should be either of [METASTORE, HIVESERVER2]."
argument_list|)
argument_list|)
expr_stmt|;
name|CommandLine
name|commandLine
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|,
literal|false
comment|// Stop on non-existent option.
argument_list|)
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"confLocation"
argument_list|)
condition|)
block|{
name|confLocation
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"confLocation"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"list"
argument_list|)
condition|)
block|{
name|opType
operator|=
name|OpType
operator|.
name|LIST
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"delete"
argument_list|)
condition|)
block|{
name|opType
operator|=
name|OpType
operator|.
name|DELETE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Operation must be delete, list or get!"
argument_list|)
throw|;
block|}
name|isDryRun
operator|=
operator|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"dryRun"
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"expired"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Working on expired delegation tokens!"
argument_list|)
expr_stmt|;
name|timeLimitMillis
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|selectForDeletion
operator|=
operator|new
name|Predicate
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|DelegationTokenIdentifier
name|input
parameter_list|)
block|{
return|return
name|timeLimitMillis
operator|>
name|input
operator|.
name|getMaxDate
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"olderThan"
argument_list|)
condition|)
block|{
name|String
name|olderThanLimitString
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"olderThan"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|olderThanLimitString
operator|.
name|charAt
argument_list|(
name|olderThanLimitString
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'d'
case|:
case|case
literal|'D'
case|:
name|timeLimitMillis
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|olderThanLimitString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|olderThanLimitString
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'h'
case|:
case|case
literal|'H'
case|:
name|timeLimitMillis
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|olderThanLimitString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|olderThanLimitString
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'m'
case|:
case|case
literal|'M'
case|:
name|timeLimitMillis
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|60
operator|*
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|olderThanLimitString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|olderThanLimitString
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported time-limit: "
operator|+
name|olderThanLimitString
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Working on delegation tokens older than current-time ("
operator|+
name|timeLimitMillis
operator|+
literal|")."
argument_list|)
expr_stmt|;
name|selectForDeletion
operator|=
operator|new
name|Predicate
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|DelegationTokenIdentifier
name|input
parameter_list|)
block|{
return|return
name|timeLimitMillis
operator|>
name|input
operator|.
name|getIssueDate
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
comment|// Neither "expired" nor "olderThan" criteria selected. This better not be an attempt to delete tokens.
if|if
condition|(
name|opType
operator|==
name|OpType
operator|.
name|DELETE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attempting to delete tokens. "
operator|+
literal|"Specify deletion criteria (either expired or time-range)."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"batchSize"
argument_list|)
condition|)
block|{
name|String
name|batchSizeString
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"batchSize"
argument_list|)
decl_stmt|;
name|batchSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|batchSizeString
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchSize
operator|<
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid batch-size! ("
operator|+
name|batchSize
operator|+
literal|") Resetting to defaults."
argument_list|)
expr_stmt|;
name|batchSize
operator|=
name|BATCH_SIZE_DEFAULT
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Batch-size for drop == "
operator|+
name|batchSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"sleepTime"
argument_list|)
condition|)
block|{
name|String
name|sleepTimeString
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"sleepTime"
argument_list|)
decl_stmt|;
name|sleepTimeMillis
operator|=
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|sleepTimeString
argument_list|)
expr_stmt|;
if|if
condition|(
name|sleepTimeMillis
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid sleep-time! ("
operator|+
name|sleepTimeMillis
operator|+
literal|") Resetting to defaults."
argument_list|)
expr_stmt|;
name|sleepTimeMillis
operator|=
name|SLEEP_TIME_MILLIS_DEFAULT
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleep between drop-batches: "
operator|+
name|sleepTimeMillis
operator|+
literal|" milliseconds."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"serverMode"
argument_list|)
condition|)
block|{
name|String
name|serverModeString
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"serverMode"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|serverModeString
condition|)
block|{
case|case
literal|"metastore"
case|:
name|serverMode
operator|=
name|HadoopThriftAuthBridge
operator|.
name|Server
operator|.
name|ServerMode
operator|.
name|METASTORE
expr_stmt|;
break|break;
case|case
literal|"hiveserver2"
case|:
name|serverMode
operator|=
name|HadoopThriftAuthBridge
operator|.
name|Server
operator|.
name|ServerMode
operator|.
name|HIVESERVER2
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid value for for serverMode ("
operator|+
name|serverModeString
operator|+
literal|")"
operator|+
literal|"Should be either \"METASTORE\", or \"HIVESERVER2\""
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Running with serverMode == "
operator|+
name|serverMode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|confLocation
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|tokenStoreClassName
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|DELEGATION_TOKEN_STORE_CLS
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|tokenStoreClassName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Could not find Delegation TokenStore implementation."
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|DelegationTokenStore
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|tokenStoreClassName
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|DelegationTokenStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|delegationTokenStore
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|delegationTokenStore
operator|.
name|init
argument_list|(
literal|null
argument_list|,
name|serverMode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getAllDelegationTokenIDs
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|delegationTokenStore
operator|.
name|getAllDelegationTokenIdentifiers
argument_list|()
return|;
block|}
specifier|private
name|void
name|doList
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|DelegationTokenIdentifier
name|tokenId
range|:
name|Iterables
operator|.
name|filter
argument_list|(
name|getAllDelegationTokenIDs
argument_list|()
argument_list|,
name|selectForDeletion
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|tokenId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|nDeletedTokens
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|allDelegationTokenIDs
init|=
name|getAllDelegationTokenIDs
argument_list|()
decl_stmt|;
for|for
control|(
name|DelegationTokenIdentifier
name|tokenId
range|:
name|Iterables
operator|.
name|filter
argument_list|(
name|allDelegationTokenIDs
argument_list|,
name|selectForDeletion
argument_list|)
control|)
block|{
if|if
condition|(
operator|(
operator|++
name|nDeletedTokens
operator|%
name|batchSize
operator|)
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|nDeletedTokens
operator|+
literal|"/"
operator|+
name|allDelegationTokenIDs
operator|.
name|size
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
literal|100
operator|*
name|nDeletedTokens
argument_list|)
operator|)
operator|/
name|allDelegationTokenIDs
operator|.
name|size
argument_list|()
operator|)
operator|+
literal|"%). "
operator|+
literal|"Sleeping for "
operator|+
name|sleepTimeMillis
operator|+
literal|"ms..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTimeMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting token: "
operator|+
name|tokenId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDryRun
condition|)
block|{
name|delegationTokenStore
operator|.
name|removeToken
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|readArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|opType
condition|)
block|{
case|case
name|LIST
case|:
name|doList
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|doDelete
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception: "
argument_list|,
name|exception
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

