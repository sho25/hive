begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
operator|.
name|getAllPartitionsOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
operator|.
name|getDataLocation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
operator|.
name|getPartColNames
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
operator|.
name|getPartCols
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
operator|.
name|getPartition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
operator|.
name|getPartitionName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
operator|.
name|getPartitionSpec
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
operator|.
name|getPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
operator|.
name|isPartitioned
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetastoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Interner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Interners
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * Verify that the information in the metastore matches what is on the  * filesystem. Return a CheckResult object containing lists of missing and any  * unexpected tables and partitions.  */
end_comment

begin_class
specifier|public
class|class
name|HiveMetaStoreChecker
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveMetaStoreChecker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IMetaStoreClient
name|msc
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|long
name|partitionExpirySeconds
decl_stmt|;
specifier|private
specifier|final
name|Interner
argument_list|<
name|Path
argument_list|>
name|pathInterner
init|=
name|Interners
operator|.
name|newStrongInterner
argument_list|()
decl_stmt|;
specifier|public
name|HiveMetaStoreChecker
parameter_list|(
name|IMetaStoreClient
name|msc
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|msc
argument_list|,
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveMetaStoreChecker
parameter_list|(
name|IMetaStoreClient
name|msc
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|partitionExpirySeconds
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|msc
operator|=
name|msc
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|partitionExpirySeconds
operator|=
name|partitionExpirySeconds
expr_stmt|;
block|}
specifier|public
name|IMetaStoreClient
name|getMsc
parameter_list|()
block|{
return|return
name|msc
return|;
block|}
comment|/**    * Check the metastore for inconsistencies, data missing in either the    * metastore or on the dfs.    *    * @param catName    *          name of the catalog, if not specified default catalog will be used.    * @param dbName    *          name of the database, if not specified the default will be used.    * @param tableName    *          Table we want to run the check for. If null we'll check all the    *          tables in the database.    * @param partitions    *          List of partition name value pairs, if null or empty check all    *          partitions    * @param result    *          Fill this with the results of the check    * @throws MetastoreException    *           Failed to get required information from the metastore.    * @throws IOException    *           Most likely filesystem related    */
specifier|public
name|void
name|checkMetastore
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|partitions
parameter_list|,
name|CheckResult
name|result
parameter_list|)
throws|throws
name|MetastoreException
throws|,
name|IOException
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
operator|||
literal|""
operator|.
name|equalsIgnoreCase
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
name|dbName
operator|=
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
comment|// no table specified, check all tables and all partitions.
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|getMsc
argument_list|()
operator|.
name|getTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
literal|".*"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|currentTableName
range|:
name|tables
control|)
block|{
name|checkTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|currentTableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|findUnknownTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tables
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|partitions
operator|==
literal|null
operator|||
name|partitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// only one table, let's check all partitions
name|checkTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// check the specified partitions
name|checkTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitions
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of partitionsNotInMs="
operator|+
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
operator|+
literal|", partitionsNotOnFs="
operator|+
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
operator|+
literal|", tablesNotInMs="
operator|+
name|result
operator|.
name|getTablesNotInMs
argument_list|()
operator|+
literal|", tablesNotOnFs="
operator|+
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
operator|+
literal|", expiredPartitions="
operator|+
name|result
operator|.
name|getExpiredPartitions
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetastoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Check for table directories that aren't in the metastore.    *    * @param catName    *          name of the catalog, if not specified default catalog will be used.    * @param dbName    *          Name of the database    * @param tables    *          List of table names    * @param result    *          Add any found tables to this    * @throws IOException    *           Most likely filesystem related    * @throws MetaException    *           Failed to get required information from the metastore.    * @throws NoSuchObjectException    *           Failed to get required information from the metastore.    * @throws TException    *           Thrift communication error.    */
name|void
name|findUnknownTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tables
parameter_list|,
name|CheckResult
name|result
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|Set
argument_list|<
name|Path
argument_list|>
name|dbPaths
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|tables
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tables
control|)
block|{
name|Table
name|table
init|=
name|getMsc
argument_list|()
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
comment|// hack, instead figure out a way to get the db paths
name|String
name|isExternal
init|=
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|isExternal
argument_list|)
condition|)
block|{
name|Path
name|tablePath
init|=
name|getPath
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|tablePath
operator|!=
literal|null
condition|)
block|{
name|dbPaths
operator|.
name|add
argument_list|(
name|tablePath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Path
name|dbPath
range|:
name|dbPaths
control|)
block|{
name|FileSystem
name|fs
init|=
name|dbPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dbPath
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|statuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|isDir
argument_list|()
operator|&&
operator|!
name|tableNames
operator|.
name|contains
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|getTablesNotInMs
argument_list|()
operator|.
name|add
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Check the metastore for inconsistencies, data missing in either the    * metastore or on the dfs.    *    * @param catName    *          name of the catalog, if not specified default catalog will be used.    * @param dbName    *          Name of the database    * @param tableName    *          Name of the table    * @param partitions    *          Partitions to check, if null or empty get all the partitions.    * @param result    *          Result object    * @throws MetastoreException    *           Failed to get required information from the metastore.    * @throws IOException    *           Most likely filesystem related    * @throws MetaException    *           Failed to get required information from the metastore.    */
name|void
name|checkTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|partitions
parameter_list|,
name|CheckResult
name|result
parameter_list|)
throws|throws
name|MetaException
throws|,
name|IOException
throws|,
name|MetastoreException
block|{
name|Table
name|table
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getMsc
argument_list|()
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|result
operator|.
name|getTablesNotInMs
argument_list|()
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return;
block|}
name|PartitionIterable
name|parts
decl_stmt|;
name|boolean
name|findUnknownPartitions
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|isPartitioned
argument_list|(
name|table
argument_list|)
condition|)
block|{
if|if
condition|(
name|partitions
operator|==
literal|null
operator|||
name|partitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|batchSize
init|=
name|MetastoreConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|BATCH_RETRIEVE_MAX
argument_list|)
decl_stmt|;
if|if
condition|(
name|batchSize
operator|>
literal|0
condition|)
block|{
name|parts
operator|=
operator|new
name|PartitionIterable
argument_list|(
name|getMsc
argument_list|()
argument_list|,
name|table
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|loadedPartitions
init|=
name|getAllPartitionsOf
argument_list|(
name|getMsc
argument_list|()
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|parts
operator|=
operator|new
name|PartitionIterable
argument_list|(
name|loadedPartitions
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we're interested in specific partitions,
comment|// don't check for any others
name|findUnknownPartitions
operator|=
literal|false
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|loadedPartitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
range|:
name|partitions
control|)
block|{
name|Partition
name|part
init|=
name|getPartition
argument_list|(
name|getMsc
argument_list|()
argument_list|,
name|table
argument_list|,
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
name|CheckResult
operator|.
name|PartitionResult
name|pr
init|=
operator|new
name|CheckResult
operator|.
name|PartitionResult
argument_list|()
decl_stmt|;
name|pr
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setPartitionName
argument_list|(
name|Warehouse
operator|.
name|makePartPath
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loadedPartitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|parts
operator|=
operator|new
name|PartitionIterable
argument_list|(
name|loadedPartitions
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|parts
operator|=
operator|new
name|PartitionIterable
argument_list|(
name|Collections
operator|.
expr|<
name|Partition
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkTable
argument_list|(
name|table
argument_list|,
name|parts
argument_list|,
name|findUnknownPartitions
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check the metastore for inconsistencies, data missing in either the    * metastore or on the dfs.    *    * @param table    *          Table to check    * @param parts    *          Partitions to check    * @param result    *          Result object    * @param findUnknownPartitions    *          Should we try to find unknown partitions?    * @throws IOException    *           Could not get information from filesystem    * @throws MetastoreException    *           Could not create Partition object    */
name|void
name|checkTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|PartitionIterable
name|parts
parameter_list|,
name|boolean
name|findUnknownPartitions
parameter_list|,
name|CheckResult
name|result
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetastoreException
block|{
name|Path
name|tablePath
init|=
name|getPath
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|tablePath
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|FileSystem
name|fs
init|=
name|tablePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|tablePath
argument_list|)
condition|)
block|{
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
operator|.
name|add
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Set
argument_list|<
name|Path
argument_list|>
name|partPaths
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
comment|// check that the partition folders exist on disk
for|for
control|(
name|Partition
name|partition
range|:
name|parts
control|)
block|{
if|if
condition|(
name|partition
operator|==
literal|null
condition|)
block|{
comment|// most likely the user specified an invalid partition
continue|continue;
block|}
name|Path
name|partPath
init|=
name|getDataLocation
argument_list|(
name|table
argument_list|,
name|partition
argument_list|)
decl_stmt|;
if|if
condition|(
name|partPath
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|fs
operator|=
name|partPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|partPath
argument_list|)
condition|)
block|{
name|CheckResult
operator|.
name|PartitionResult
name|pr
init|=
operator|new
name|CheckResult
operator|.
name|PartitionResult
argument_list|()
decl_stmt|;
name|pr
operator|.
name|setPartitionName
argument_list|(
name|getPartitionName
argument_list|(
name|table
argument_list|,
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setTableName
argument_list|(
name|partition
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partitionExpirySeconds
operator|>
literal|0
condition|)
block|{
name|long
name|currentEpochSecs
init|=
name|Instant
operator|.
name|now
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
decl_stmt|;
name|long
name|createdTime
init|=
name|partition
operator|.
name|getCreateTime
argument_list|()
decl_stmt|;
name|long
name|partitionAgeSeconds
init|=
name|currentEpochSecs
operator|-
name|createdTime
decl_stmt|;
if|if
condition|(
name|partitionAgeSeconds
operator|>
name|partitionExpirySeconds
condition|)
block|{
name|CheckResult
operator|.
name|PartitionResult
name|pr
init|=
operator|new
name|CheckResult
operator|.
name|PartitionResult
argument_list|()
decl_stmt|;
name|pr
operator|.
name|setPartitionName
argument_list|(
name|getPartitionName
argument_list|(
name|table
argument_list|,
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setTableName
argument_list|(
name|partition
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|getExpiredPartitions
argument_list|()
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}.{}.{}.{} expired. createdAt: {} current: {} age: {}s expiry: {}s"
argument_list|,
name|partition
operator|.
name|getCatName
argument_list|()
argument_list|,
name|partition
operator|.
name|getDbName
argument_list|()
argument_list|,
name|partition
operator|.
name|getTableName
argument_list|()
argument_list|,
name|pr
operator|.
name|getPartitionName
argument_list|()
argument_list|,
name|createdTime
argument_list|,
name|currentEpochSecs
argument_list|,
name|partitionAgeSeconds
argument_list|,
name|partitionExpirySeconds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getPartitionSpec
argument_list|(
name|table
argument_list|,
name|partition
argument_list|)
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|qualifiedPath
init|=
name|partPath
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|pathInterner
operator|.
name|intern
argument_list|(
name|qualifiedPath
argument_list|)
expr_stmt|;
name|partPaths
operator|.
name|add
argument_list|(
name|qualifiedPath
argument_list|)
expr_stmt|;
name|partPath
operator|=
name|partPath
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|findUnknownPartitions
condition|)
block|{
name|findUnknownPartitions
argument_list|(
name|table
argument_list|,
name|partPaths
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Find partitions on the fs that are unknown to the metastore.    *    * @param table    *          Table where the partitions would be located    * @param partPaths    *          Paths of the partitions the ms knows about    * @param result    *          Result object    * @throws IOException    *           Thrown if we fail at fetching listings from the fs.    * @throws MetastoreException    */
name|void
name|findUnknownPartitions
parameter_list|(
name|Table
name|table
parameter_list|,
name|Set
argument_list|<
name|Path
argument_list|>
name|partPaths
parameter_list|,
name|CheckResult
name|result
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetastoreException
block|{
name|Path
name|tablePath
init|=
name|getPath
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|tablePath
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// now check the table folder and see if we find anything
comment|// that isn't in the metastore
name|Set
argument_list|<
name|Path
argument_list|>
name|allPartDirs
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|checkPartitionDirs
argument_list|(
name|tablePath
argument_list|,
name|allPartDirs
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|getPartColNames
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't want the table dir
name|allPartDirs
operator|.
name|remove
argument_list|(
name|tablePath
argument_list|)
expr_stmt|;
comment|// remove the partition paths we know about
name|allPartDirs
operator|.
name|removeAll
argument_list|(
name|partPaths
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|partColNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fSchema
range|:
name|getPartCols
argument_list|(
name|table
argument_list|)
control|)
block|{
name|partColNames
operator|.
name|add
argument_list|(
name|fSchema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we should now only have the unexpected folders left
for|for
control|(
name|Path
name|partPath
range|:
name|allPartDirs
control|)
block|{
name|FileSystem
name|fs
init|=
name|partPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|partitionName
init|=
name|getPartitionName
argument_list|(
name|fs
operator|.
name|makeQualified
argument_list|(
name|tablePath
argument_list|)
argument_list|,
name|partPath
argument_list|,
name|partColNames
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"PartitionName: "
operator|+
name|partitionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitionName
operator|!=
literal|null
condition|)
block|{
name|CheckResult
operator|.
name|PartitionResult
name|pr
init|=
operator|new
name|CheckResult
operator|.
name|PartitionResult
argument_list|()
decl_stmt|;
name|pr
operator|.
name|setPartitionName
argument_list|(
name|partitionName
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setTableName
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of partitions not in metastore : "
operator|+
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assume that depth is 2, i.e., partition columns are a and b    * tblPath/a=1  => throw exception    * tblPath/a=1/file => throw exception    * tblPath/a=1/b=2/file => return a=1/b=2    * tblPath/a=1/b=2/c=3 => return a=1/b=2    * tblPath/a=1/b=2/c=3/file => return a=1/b=2    *    * @param basePath    *          Start directory    * @param allDirs    *          This set will contain the leaf paths at the end.    * @param partColNames    *          Partition column names    * @throws IOException    *           Thrown if we can't get lists from the fs.    * @throws MetastoreException    */
specifier|private
name|void
name|checkPartitionDirs
parameter_list|(
name|Path
name|basePath
parameter_list|,
name|Set
argument_list|<
name|Path
argument_list|>
name|allDirs
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetastoreException
block|{
comment|// Here we just reuse the THREAD_COUNT configuration for
comment|// METASTORE_FS_HANDLER_THREADS_COUNT since this results in better performance
comment|// The number of missing partitions discovered are later added by metastore using a
comment|// threadpool of size METASTORE_FS_HANDLER_THREADS_COUNT. If we have different sized
comment|// pool here the smaller sized pool of the two becomes a bottleneck
name|int
name|poolSize
init|=
name|MetastoreConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|FS_HANDLER_THREADS_COUNT
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
decl_stmt|;
if|if
condition|(
name|poolSize
operator|<=
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using single-threaded version of MSCK-GetPaths"
argument_list|)
expr_stmt|;
name|executor
operator|=
name|MoreExecutors
operator|.
name|newDirectExecutorService
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using multi-threaded version of MSCK-GetPaths with number of threads "
operator|+
name|poolSize
argument_list|)
expr_stmt|;
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"MSCK-GetPaths-%d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|poolSize
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
block|}
name|checkPartitionDirs
argument_list|(
name|executor
argument_list|,
name|basePath
argument_list|,
name|allDirs
argument_list|,
name|basePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|partColNames
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|PathDepthInfoCallable
implements|implements
name|Callable
argument_list|<
name|Path
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|PathDepthInfo
argument_list|>
name|pendingPaths
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|throwException
decl_stmt|;
specifier|private
specifier|final
name|PathDepthInfo
name|pd
decl_stmt|;
specifier|private
name|PathDepthInfoCallable
parameter_list|(
name|PathDepthInfo
name|pd
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|ConcurrentLinkedQueue
argument_list|<
name|PathDepthInfo
argument_list|>
name|basePaths
parameter_list|)
block|{
name|this
operator|.
name|partColNames
operator|=
name|partColNames
expr_stmt|;
name|this
operator|.
name|pd
operator|=
name|pd
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|pendingPaths
operator|=
name|basePaths
expr_stmt|;
name|this
operator|.
name|throwException
operator|=
literal|"throw"
operator|.
name|equals
argument_list|(
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|MSCK_PATH_VALIDATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|processPathDepthInfo
argument_list|(
name|pd
argument_list|)
return|;
block|}
specifier|private
name|Path
name|processPathDepthInfo
parameter_list|(
specifier|final
name|PathDepthInfo
name|pd
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetastoreException
block|{
specifier|final
name|Path
name|currentPath
init|=
name|pd
operator|.
name|p
decl_stmt|;
specifier|final
name|int
name|currentDepth
init|=
name|pd
operator|.
name|depth
decl_stmt|;
if|if
condition|(
name|currentDepth
operator|==
name|partColNames
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|currentPath
return|;
block|}
name|FileStatus
index|[]
name|fileStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|currentPath
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
decl_stmt|;
comment|// found no files under a sub-directory under table base path; it is possible that the table
comment|// is empty and hence there are no partition sub-directories created under base path
if|if
condition|(
name|fileStatuses
operator|.
name|length
operator|==
literal|0
operator|&&
name|currentDepth
operator|>
literal|0
condition|)
block|{
comment|// since maxDepth is not yet reached, we are missing partition
comment|// columns in currentPath
name|logOrThrowExceptionWithMsg
argument_list|(
literal|"MSCK is missing partition columns under "
operator|+
name|currentPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// found files under currentPath add them to the queue if it is a directory
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|fileStatuses
control|)
block|{
if|if
condition|(
operator|!
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// found a file at depth which is less than number of partition keys
name|logOrThrowExceptionWithMsg
argument_list|(
literal|"MSCK finds a file rather than a directory when it searches for "
operator|+
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// found a sub-directory at a depth less than number of partition keys
comment|// validate if the partition directory name matches with the corresponding
comment|// partition colName at currentDepth
name|Path
name|nextPath
init|=
name|fileStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|nextPath
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|logOrThrowExceptionWithMsg
argument_list|(
literal|"Invalid partition name "
operator|+
name|nextPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|parts
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|partColNames
operator|.
name|get
argument_list|(
name|currentDepth
argument_list|)
argument_list|)
condition|)
block|{
name|logOrThrowExceptionWithMsg
argument_list|(
literal|"Unexpected partition key "
operator|+
name|parts
index|[
literal|0
index|]
operator|+
literal|" found at "
operator|+
name|nextPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add sub-directory to the work queue if maxDepth is not yet reached
name|pendingPaths
operator|.
name|add
argument_list|(
operator|new
name|PathDepthInfo
argument_list|(
name|nextPath
argument_list|,
name|currentDepth
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|logOrThrowExceptionWithMsg
parameter_list|(
name|String
name|msg
parameter_list|)
throws|throws
name|MetastoreException
block|{
if|if
condition|(
name|throwException
condition|)
block|{
throw|throw
operator|new
name|MetastoreException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|PathDepthInfo
block|{
specifier|private
specifier|final
name|Path
name|p
decl_stmt|;
specifier|private
specifier|final
name|int
name|depth
decl_stmt|;
name|PathDepthInfo
parameter_list|(
name|Path
name|p
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|void
name|checkPartitionDirs
parameter_list|(
specifier|final
name|ExecutorService
name|executor
parameter_list|,
specifier|final
name|Path
name|basePath
parameter_list|,
specifier|final
name|Set
argument_list|<
name|Path
argument_list|>
name|result
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
parameter_list|)
throws|throws
name|MetastoreException
block|{
try|try
block|{
name|Queue
argument_list|<
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|LinkedList
argument_list|<
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ConcurrentLinkedQueue
argument_list|<
name|PathDepthInfo
argument_list|>
name|nextLevel
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|nextLevel
operator|.
name|add
argument_list|(
operator|new
name|PathDepthInfo
argument_list|(
name|basePath
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//Uses level parallel implementation of a bfs. Recursive DFS implementations
comment|//have a issue where the number of threads can run out if the number of
comment|//nested sub-directories is more than the pool size.
comment|//Using a two queue implementation is simpler than one queue since then we will
comment|//have to add the complex mechanisms to let the free worker threads know when new levels are
comment|//discovered using notify()/wait() mechanisms which can potentially lead to bugs if
comment|//not done right
while|while
condition|(
operator|!
name|nextLevel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ConcurrentLinkedQueue
argument_list|<
name|PathDepthInfo
argument_list|>
name|tempQueue
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
comment|//process each level in parallel
while|while
condition|(
operator|!
name|nextLevel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|PathDepthInfoCallable
argument_list|(
name|nextLevel
operator|.
name|poll
argument_list|()
argument_list|,
name|partColNames
argument_list|,
name|fs
argument_list|,
name|tempQueue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|futures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|p
init|=
name|futures
operator|.
name|poll
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|//update the nextlevel with newly discovered sub-directories from the above
name|nextLevel
operator|=
name|tempQueue
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception received while listing partition directories"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MetastoreException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

