begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  Base class to add the batch process for DirectSQL or RawStore queries.  *  1. Provide the implementation of run() to process one batch  *  2. Call Batchable.runBatched() to process the whole dataset  *  *  I: input type, R: result type  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Batchable
parameter_list|<
name|I
parameter_list|,
name|R
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Batchable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NO_BATCHING
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Query
argument_list|>
name|queries
init|=
literal|null
decl_stmt|;
specifier|public
specifier|abstract
name|List
argument_list|<
name|R
argument_list|>
name|run
parameter_list|(
name|List
argument_list|<
name|I
argument_list|>
name|input
parameter_list|)
throws|throws
name|MetaException
function_decl|;
specifier|public
name|void
name|addQueryAfterUse
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|queries
operator|==
literal|null
condition|)
block|{
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|queries
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addQueryAfterUse
parameter_list|(
name|Batchable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|.
name|queries
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|queries
operator|==
literal|null
condition|)
block|{
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|queries
operator|.
name|addAll
argument_list|(
name|b
operator|.
name|queries
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|closeAllQueries
parameter_list|()
block|{
for|for
control|(
name|Query
name|q
range|:
name|queries
control|)
block|{
try|try
block|{
name|q
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close a query"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|R
parameter_list|>
name|List
argument_list|<
name|R
argument_list|>
name|runBatched
parameter_list|(
specifier|final
name|int
name|batchSize
parameter_list|,
name|List
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|Batchable
argument_list|<
name|I
argument_list|,
name|R
argument_list|>
name|runnable
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|batchSize
operator|==
name|NO_BATCHING
operator|||
name|batchSize
operator|>=
name|input
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|runnable
operator|.
name|run
argument_list|(
name|input
argument_list|)
return|;
block|}
name|List
argument_list|<
name|R
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|R
argument_list|>
argument_list|(
name|input
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fromIndex
init|=
literal|0
init|,
name|toIndex
init|=
literal|0
init|;
name|toIndex
operator|<
name|input
operator|.
name|size
argument_list|()
condition|;
name|fromIndex
operator|=
name|toIndex
control|)
block|{
name|toIndex
operator|=
name|Math
operator|.
name|min
argument_list|(
name|fromIndex
operator|+
name|batchSize
argument_list|,
name|input
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|I
argument_list|>
name|batchedInput
init|=
name|input
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|R
argument_list|>
name|batchedOutput
init|=
name|runnable
operator|.
name|run
argument_list|(
name|batchedInput
argument_list|)
decl_stmt|;
if|if
condition|(
name|batchedOutput
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|batchedOutput
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

