begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|EventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|getDefaultCatalog
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|normalizeIdentifier
import|;
end_import

begin_comment
comment|/**  * Hive specific implementation of alter  */
end_comment

begin_class
specifier|public
class|class
name|HiveAlterHandler
implements|implements
name|AlterHandler
block|{
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveAlterHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// hiveConf, getConf and setConf are in this class because AlterHandler extends Configurable.
comment|// Always use the configuration from HMS Handler.  Making AlterHandler not extend Configurable
comment|// is not in the scope of the fix for HIVE-17942.
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterTable
parameter_list|(
name|RawStore
name|msdb
parameter_list|,
name|Warehouse
name|wh
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|Table
name|newt
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|,
name|IHMSHandler
name|handler
parameter_list|,
name|String
name|writeIdList
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|dbname
operator|=
name|dbname
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|cascade
init|=
name|environmentContext
operator|!=
literal|null
operator|&&
name|environmentContext
operator|.
name|isSetProperties
argument_list|()
operator|&&
name|StatsSetupConst
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|environmentContext
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|CASCADE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|newt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"New table is null"
argument_list|)
throw|;
block|}
name|String
name|newTblName
init|=
name|newt
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|newDbName
init|=
name|newt
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|validateName
argument_list|(
name|newTblName
argument_list|,
name|handler
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|newTblName
operator|+
literal|" is not a valid object name"
argument_list|)
throw|;
block|}
name|String
name|validate
init|=
name|MetaStoreServerUtils
operator|.
name|validateTblColumns
argument_list|(
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|validate
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Invalid column "
operator|+
name|validate
argument_list|)
throw|;
block|}
name|Path
name|srcPath
init|=
literal|null
decl_stmt|;
name|FileSystem
name|srcFs
decl_stmt|;
name|Path
name|destPath
init|=
literal|null
decl_stmt|;
name|FileSystem
name|destFs
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|dataWasMoved
init|=
literal|false
decl_stmt|;
name|boolean
name|isPartitionedTable
init|=
literal|false
decl_stmt|;
name|Table
name|oldt
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|TransactionalMetaStoreEventListener
argument_list|>
name|transactionalListeners
init|=
name|handler
operator|.
name|getTransactionalListeners
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MetaStoreEventListener
argument_list|>
name|listeners
init|=
name|handler
operator|.
name|getListeners
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|txnAlterTableEventResponses
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|rename
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
decl_stmt|;
comment|// Switching tables between catalogs is not allowed.
if|if
condition|(
operator|!
name|catName
operator|.
name|equalsIgnoreCase
argument_list|(
name|newt
operator|.
name|getCatName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Tables cannot be moved between catalogs, old catalog"
operator|+
name|catName
operator|+
literal|", new catalog "
operator|+
name|newt
operator|.
name|getCatName
argument_list|()
argument_list|)
throw|;
block|}
comment|// check if table with the new name already exists
if|if
condition|(
operator|!
name|newTblName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
operator|!
name|newDbName
operator|.
name|equals
argument_list|(
name|dbname
argument_list|)
condition|)
block|{
if|if
condition|(
name|msdb
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|newDbName
argument_list|,
name|newTblName
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"new table "
operator|+
name|newDbName
operator|+
literal|"."
operator|+
name|newTblName
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|rename
operator|=
literal|true
expr_stmt|;
block|}
name|msdb
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
comment|// get old table
comment|// Note: we don't verify stats here; it's done below in alterTableUpdateTableColumnStats.
name|oldt
operator|=
name|msdb
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"table "
operator|+
name|TableName
operator|.
name|getQualified
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|oldt
operator|.
name|getPartitionKeysSize
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|isPartitionedTable
operator|=
literal|true
expr_stmt|;
block|}
comment|// Views derive the column type from the base table definition.  So the view definition
comment|// can be altered to change the column types.  The column type compatibility checks should
comment|// be done only for non-views.
if|if
condition|(
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|handler
operator|.
name|getConf
argument_list|()
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|DISALLOW_INCOMPATIBLE_COL_TYPE_CHANGES
argument_list|)
operator|&&
operator|!
name|oldt
operator|.
name|getTableType
argument_list|()
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
comment|// Throws InvalidOperationException if the new column types are not
comment|// compatible with the current column types.
name|checkColTypeChangeCompatible
argument_list|(
name|oldt
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|,
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//check that partition keys have not changed, except for virtual views
comment|//however, allow the partition comments to change
name|boolean
name|partKeysPartiallyEqual
init|=
name|checkPartialPartKeysEqual
argument_list|(
name|oldt
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|newt
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldt
operator|.
name|getTableType
argument_list|()
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|partKeysPartiallyEqual
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"partition keys can not be changed."
argument_list|)
throw|;
block|}
block|}
comment|// rename needs change the data location and move the data to the new location corresponding
comment|// to the new name if:
comment|// 1) the table is not a virtual view, and
comment|// 2) the table is not an external table, and
comment|// 3) the user didn't change the default location (or new location is empty), and
comment|// 4) the table was not initially created with a specified location
if|if
condition|(
name|rename
operator|&&
operator|!
name|oldt
operator|.
name|getTableType
argument_list|()
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
operator|(
name|oldt
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|compareTo
argument_list|(
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|==
literal|0
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|)
operator|&&
operator|!
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|oldt
argument_list|)
condition|)
block|{
name|Database
name|olddb
init|=
name|msdb
operator|.
name|getDatabase
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|)
decl_stmt|;
comment|// if a table was created in a user specified location using the DDL like
comment|// create table tbl ... location ...., it should be treated like an external table
comment|// in the table rename, its data location should not be changed. We can check
comment|// if the table directory was created directly under its database directory to tell
comment|// if it is such a table
name|srcPath
operator|=
operator|new
name|Path
argument_list|(
name|oldt
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|oldtRelativePath
init|=
operator|(
operator|new
name|Path
argument_list|(
name|olddb
operator|.
name|getLocationUri
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|)
operator|.
name|relativize
argument_list|(
name|srcPath
operator|.
name|toUri
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|tableInSpecifiedLoc
init|=
operator|!
name|oldtRelativePath
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
name|oldtRelativePath
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
operator|+
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tableInSpecifiedLoc
condition|)
block|{
name|srcFs
operator|=
name|wh
operator|.
name|getFs
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
comment|// get new location
name|Database
name|db
init|=
name|msdb
operator|.
name|getDatabase
argument_list|(
name|catName
argument_list|,
name|newDbName
argument_list|)
decl_stmt|;
name|Path
name|databasePath
init|=
name|constructRenamedPath
argument_list|(
name|wh
operator|.
name|getDatabasePath
argument_list|(
name|db
argument_list|)
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
name|destPath
operator|=
operator|new
name|Path
argument_list|(
name|databasePath
argument_list|,
name|newTblName
argument_list|)
expr_stmt|;
name|destFs
operator|=
name|wh
operator|.
name|getFs
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|destPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that destination does not exist otherwise we will be
comment|// overwriting data
comment|// check that src and dest are on the same file system
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|equalsFileSystem
argument_list|(
name|srcFs
argument_list|,
name|destFs
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"table new location "
operator|+
name|destPath
operator|+
literal|" is on a different file system than the old location "
operator|+
name|srcPath
operator|+
literal|". This operation is not supported"
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|destFs
operator|.
name|exists
argument_list|(
name|destPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"New location for this table "
operator|+
name|TableName
operator|.
name|getQualified
argument_list|(
name|catName
argument_list|,
name|newDbName
argument_list|,
name|newTblName
argument_list|)
operator|+
literal|" already exists : "
operator|+
name|destPath
argument_list|)
throw|;
block|}
comment|// check that src exists and also checks permissions necessary, rename src to dest
if|if
condition|(
name|srcFs
operator|.
name|exists
argument_list|(
name|srcPath
argument_list|)
operator|&&
name|wh
operator|.
name|renameDir
argument_list|(
name|srcPath
argument_list|,
name|destPath
argument_list|,
name|ReplChangeManager
operator|.
name|isSourceOfReplication
argument_list|(
name|olddb
argument_list|)
argument_list|)
condition|)
block|{
name|dataWasMoved
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Alter Table operation for "
operator|+
name|dbname
operator|+
literal|"."
operator|+
name|name
operator|+
literal|" failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Alter Table operation for "
operator|+
name|dbname
operator|+
literal|"."
operator|+
name|name
operator|+
literal|" failed to move data due to: '"
operator|+
name|getSimpleMessage
argument_list|(
name|e
argument_list|)
operator|+
literal|"' See hive log file for details."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|HiveMetaStore
operator|.
name|isRenameAllowed
argument_list|(
name|olddb
argument_list|,
name|db
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Alter Table operation for "
operator|+
name|TableName
operator|.
name|getQualified
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
operator|+
literal|"to new table = "
operator|+
name|TableName
operator|.
name|getQualified
argument_list|(
name|catName
argument_list|,
name|newDbName
argument_list|,
name|newTblName
argument_list|)
operator|+
literal|" failed "
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Alter table not allowed for table "
operator|+
name|TableName
operator|.
name|getQualified
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
operator|+
literal|"to new table = "
operator|+
name|TableName
operator|.
name|getQualified
argument_list|(
name|catName
argument_list|,
name|newDbName
argument_list|,
name|newTblName
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|isPartitionedTable
condition|)
block|{
name|String
name|oldTblLocPath
init|=
name|srcPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|newTblLocPath
init|=
name|dataWasMoved
condition|?
name|destPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
else|:
literal|null
decl_stmt|;
comment|// also the location field in partition
name|parts
operator|=
name|msdb
operator|.
name|getPartitions
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Partition
argument_list|,
name|ColumnStatistics
argument_list|>
name|columnStatsNeedUpdated
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|String
name|oldPartLoc
init|=
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataWasMoved
operator|&&
name|oldPartLoc
operator|.
name|contains
argument_list|(
name|oldTblLocPath
argument_list|)
condition|)
block|{
name|URI
name|oldUri
init|=
operator|new
name|Path
argument_list|(
name|oldPartLoc
argument_list|)
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|String
name|newPath
init|=
name|oldUri
operator|.
name|getPath
argument_list|()
operator|.
name|replace
argument_list|(
name|oldTblLocPath
argument_list|,
name|newTblLocPath
argument_list|)
decl_stmt|;
name|Path
name|newPartLocPath
init|=
operator|new
name|Path
argument_list|(
name|oldUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|oldUri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|newPath
argument_list|)
decl_stmt|;
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|newPartLocPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|part
operator|.
name|setDbName
argument_list|(
name|newDbName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTableName
argument_list|(
name|newTblName
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|colStats
init|=
name|updateOrGetPartitionColumnStats
argument_list|(
name|msdb
argument_list|,
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|,
name|oldt
argument_list|,
name|part
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
name|columnStatsNeedUpdated
operator|.
name|put
argument_list|(
name|part
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Do not verify stats parameters on a partitioned table.
name|msdb
operator|.
name|alterTable
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|newt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// alterPartition is only for changing the partition location in the table rename
if|if
condition|(
name|dataWasMoved
condition|)
block|{
name|int
name|partsToProcess
init|=
name|parts
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|partitionBatchSize
init|=
name|MetastoreConf
operator|.
name|getIntVar
argument_list|(
name|handler
operator|.
name|getConf
argument_list|()
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|BATCH_RETRIEVE_MAX
argument_list|)
decl_stmt|;
name|int
name|batchStart
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|partsToProcess
operator|>
literal|0
condition|)
block|{
name|int
name|batchEnd
init|=
name|Math
operator|.
name|min
argument_list|(
name|batchStart
operator|+
name|partitionBatchSize
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partBatch
init|=
name|parts
operator|.
name|subList
argument_list|(
name|batchStart
argument_list|,
name|batchEnd
argument_list|)
decl_stmt|;
name|int
name|partBatchSize
init|=
name|partBatch
operator|.
name|size
argument_list|()
decl_stmt|;
name|partsToProcess
operator|-=
name|partBatchSize
expr_stmt|;
name|batchStart
operator|+=
name|partBatchSize
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|partBatchSize
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|partBatch
control|)
block|{
name|partValues
operator|.
name|add
argument_list|(
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|msdb
operator|.
name|alterPartitions
argument_list|(
name|catName
argument_list|,
name|newDbName
argument_list|,
name|newTblName
argument_list|,
name|partValues
argument_list|,
name|partBatch
argument_list|,
name|newt
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|writeIdList
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|Partition
argument_list|,
name|ColumnStatistics
argument_list|>
name|partColStats
range|:
name|columnStatsNeedUpdated
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ColumnStatistics
name|newPartColStats
init|=
name|partColStats
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|newPartColStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|setDbName
argument_list|(
name|newDbName
argument_list|)
expr_stmt|;
name|newPartColStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|setTableName
argument_list|(
name|newTblName
argument_list|)
expr_stmt|;
name|msdb
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|newPartColStats
argument_list|,
name|partColStats
operator|.
name|getKey
argument_list|()
operator|.
name|getValues
argument_list|()
argument_list|,
name|writeIdList
argument_list|,
name|newt
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|alterTableUpdateTableColumnStats
argument_list|(
name|msdb
argument_list|,
name|oldt
argument_list|,
name|newt
argument_list|,
name|environmentContext
argument_list|,
name|writeIdList
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// operations other than table rename
if|if
condition|(
name|MetaStoreServerUtils
operator|.
name|requireCalStats
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|newt
argument_list|,
name|environmentContext
argument_list|)
operator|&&
operator|!
name|isPartitionedTable
condition|)
block|{
name|Database
name|db
init|=
name|msdb
operator|.
name|getDatabase
argument_list|(
name|catName
argument_list|,
name|newDbName
argument_list|)
decl_stmt|;
comment|// Update table stats. For partitioned table, we update stats in alterPartition()
name|MetaStoreServerUtils
operator|.
name|updateTableStatsSlow
argument_list|(
name|db
argument_list|,
name|newt
argument_list|,
name|wh
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|environmentContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isPartitionedTable
condition|)
block|{
comment|//Currently only column related changes can be cascaded in alter table
if|if
condition|(
operator|!
name|MetaStoreServerUtils
operator|.
name|areSameColumns
argument_list|(
name|oldt
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|,
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
condition|)
block|{
name|parts
operator|=
name|msdb
operator|.
name|getPartitions
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|Partition
name|oldPart
init|=
operator|new
name|Partition
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|oldCols
init|=
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|colStats
init|=
name|updateOrGetPartitionColumnStats
argument_list|(
name|msdb
argument_list|,
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|oldCols
argument_list|,
name|oldt
argument_list|,
name|part
argument_list|,
literal|null
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|colStats
operator|==
literal|null
operator|)
assert|;
if|if
condition|(
name|cascade
condition|)
block|{
name|msdb
operator|.
name|alterPartition
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|part
argument_list|,
name|writeIdList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// update changed properties (stats)
name|oldPart
operator|.
name|setParameters
argument_list|(
name|part
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|msdb
operator|.
name|alterPartition
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|oldPart
argument_list|,
name|writeIdList
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Don't validate table-level stats for a partitoned table.
name|msdb
operator|.
name|alterTable
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|newt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Alter table not cascaded to partitions."
argument_list|)
expr_stmt|;
name|alterTableUpdateTableColumnStats
argument_list|(
name|msdb
argument_list|,
name|oldt
argument_list|,
name|newt
argument_list|,
name|environmentContext
argument_list|,
name|writeIdList
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|alterTableUpdateTableColumnStats
argument_list|(
name|msdb
argument_list|,
name|oldt
argument_list|,
name|newt
argument_list|,
name|environmentContext
argument_list|,
name|writeIdList
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|transactionalListeners
operator|!=
literal|null
operator|&&
operator|!
name|transactionalListeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|txnAlterTableEventResponses
operator|=
name|MetaStoreListenerNotifier
operator|.
name|notifyEvent
argument_list|(
name|transactionalListeners
argument_list|,
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_TABLE
argument_list|,
operator|new
name|AlterTableEvent
argument_list|(
name|oldt
argument_list|,
name|newt
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|handler
argument_list|)
argument_list|,
name|environmentContext
argument_list|)
expr_stmt|;
block|}
comment|// commit the changes
name|success
operator|=
name|msdb
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to get object from Metastore "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Unable to change partition or table."
operator|+
literal|" Check metastore logs for detailed stack."
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Accessing Metastore failed due to invalid input "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Unable to change partition or table."
operator|+
literal|" Check metastore logs for detailed stack."
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Object not found in metastore "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Unable to change partition or table. Object "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" does not exist."
operator|+
literal|" Check metastore logs for detailed stack."
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to alter table "
operator|+
name|TableName
operator|.
name|getQualified
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|msdb
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|dataWasMoved
condition|)
block|{
try|try
block|{
if|if
condition|(
name|destFs
operator|.
name|exists
argument_list|(
name|destPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|destFs
operator|.
name|rename
argument_list|(
name|destPath
argument_list|,
name|srcPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to restore data from "
operator|+
name|destPath
operator|+
literal|" to "
operator|+
name|srcPath
operator|+
literal|" in alter table failure. Manual restore is needed."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to restore data from "
operator|+
name|destPath
operator|+
literal|" to "
operator|+
name|srcPath
operator|+
literal|" in alter table failure. Manual restore is needed."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// I don't think event notifications in case of failures are necessary, but other HMS operations
comment|// make this call whether the event failed or succeeded. To make this behavior consistent,
comment|// this call is made for failed events also.
name|MetaStoreListenerNotifier
operator|.
name|notifyEvent
argument_list|(
name|listeners
argument_list|,
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_TABLE
argument_list|,
operator|new
name|AlterTableEvent
argument_list|(
name|oldt
argument_list|,
name|newt
argument_list|,
literal|false
argument_list|,
name|success
argument_list|,
name|handler
argument_list|)
argument_list|,
name|environmentContext
argument_list|,
name|txnAlterTableEventResponses
argument_list|,
name|msdb
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * MetaException that encapsulates error message from RemoteException from hadoop RPC which wrap    * the stack trace into e.getMessage() which makes logs/stack traces confusing.    * @param ex    * @return    */
name|String
name|getSimpleMessage
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|MetaException
condition|)
block|{
name|String
name|msg
init|=
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
operator|||
operator|!
name|msg
operator|.
name|contains
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
return|return
name|msg
return|;
block|}
return|return
name|msg
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|msg
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
return|;
block|}
return|return
name|ex
operator|.
name|getMessage
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|alterPartition
parameter_list|(
specifier|final
name|RawStore
name|msdb
parameter_list|,
name|Warehouse
name|wh
parameter_list|,
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|Partition
name|new_part
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
return|return
name|alterPartition
argument_list|(
name|msdb
argument_list|,
name|wh
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|part_vals
argument_list|,
name|new_part
argument_list|,
name|environmentContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|alterPartition
parameter_list|(
name|RawStore
name|msdb
parameter_list|,
name|Warehouse
name|wh
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|Partition
name|new_part
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|,
name|IHMSHandler
name|handler
parameter_list|,
name|String
name|validWriteIds
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Partition
name|oldPart
decl_stmt|;
name|List
argument_list|<
name|TransactionalMetaStoreEventListener
argument_list|>
name|transactionalListeners
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|transactionalListeners
operator|=
name|handler
operator|.
name|getTransactionalListeners
argument_list|()
expr_stmt|;
block|}
comment|// Set DDL time to now if not specified
if|if
condition|(
name|new_part
operator|.
name|getParameters
argument_list|()
operator|==
literal|null
operator|||
name|new_part
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|)
operator|==
literal|null
operator|||
name|Integer
operator|.
name|parseInt
argument_list|(
name|new_part
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|new_part
operator|.
name|putToParameters
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//alter partition
if|if
condition|(
name|part_vals
operator|==
literal|null
operator|||
name|part_vals
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|msdb
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|Table
name|tbl
init|=
name|msdb
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to alter partition because table or database does not exist."
argument_list|)
throw|;
block|}
name|oldPart
operator|=
name|msdb
operator|.
name|getPartition
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|MetaStoreServerUtils
operator|.
name|requireCalStats
argument_list|(
name|oldPart
argument_list|,
name|new_part
argument_list|,
name|tbl
argument_list|,
name|environmentContext
argument_list|)
condition|)
block|{
comment|// if stats are same, no need to update
if|if
condition|(
name|MetaStoreServerUtils
operator|.
name|isFastStatsSame
argument_list|(
name|oldPart
argument_list|,
name|new_part
argument_list|)
condition|)
block|{
name|MetaStoreServerUtils
operator|.
name|updateBasicState
argument_list|(
name|environmentContext
argument_list|,
name|new_part
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MetaStoreServerUtils
operator|.
name|updatePartitionStatsFast
argument_list|(
name|new_part
argument_list|,
name|tbl
argument_list|,
name|wh
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|environmentContext
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// PartitionView does not have SD. We do not need update its column stats
if|if
condition|(
name|oldPart
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|updateOrGetPartitionColumnStats
argument_list|(
name|msdb
argument_list|,
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|,
name|oldPart
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|,
name|tbl
argument_list|,
name|new_part
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|msdb
operator|.
name|alterPartition
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|,
name|new_part
argument_list|,
name|validWriteIds
argument_list|)
expr_stmt|;
if|if
condition|(
name|transactionalListeners
operator|!=
literal|null
operator|&&
operator|!
name|transactionalListeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MetaStoreListenerNotifier
operator|.
name|notifyEvent
argument_list|(
name|transactionalListeners
argument_list|,
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_PARTITION
argument_list|,
operator|new
name|AlterPartitionEvent
argument_list|(
name|oldPart
argument_list|,
name|new_part
argument_list|,
name|tbl
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|handler
argument_list|)
argument_list|,
name|environmentContext
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|msdb
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Alter failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"alter is not possible: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|//old partition does not exist
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"alter is not possible: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|msdb
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|oldPart
return|;
block|}
comment|//rename partition
name|String
name|oldPartLoc
decl_stmt|;
name|String
name|newPartLoc
decl_stmt|;
name|Path
name|srcPath
init|=
literal|null
decl_stmt|;
name|Path
name|destPath
init|=
literal|null
decl_stmt|;
name|FileSystem
name|srcFs
decl_stmt|;
name|FileSystem
name|destFs
init|=
literal|null
decl_stmt|;
name|boolean
name|dataWasMoved
init|=
literal|false
decl_stmt|;
name|Database
name|db
decl_stmt|;
try|try
block|{
name|msdb
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|Table
name|tbl
init|=
name|msdb
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to alter partition because table or database does not exist."
argument_list|)
throw|;
block|}
try|try
block|{
name|oldPart
operator|=
name|msdb
operator|.
name|getPartition
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// this means there is no existing partition
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to rename partition because old partition does not exist"
argument_list|)
throw|;
block|}
name|Partition
name|check_part
decl_stmt|;
try|try
block|{
name|check_part
operator|=
name|msdb
operator|.
name|getPartition
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// this means there is no existing partition
name|check_part
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|check_part
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Partition already exists:"
operator|+
name|dbname
operator|+
literal|"."
operator|+
name|name
operator|+
literal|"."
operator|+
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|)
throw|;
block|}
comment|// when renaming a partition, we should update
comment|// 1) partition SD Location
comment|// 2) partition column stats if there are any because of part_name field in HMS table PART_COL_STATS
comment|// 3) rename the partition directory if it is not an external table
if|if
condition|(
operator|!
name|tbl
operator|.
name|getTableType
argument_list|()
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO: refactor this into a separate method after master merge, this one is too big.
try|try
block|{
name|db
operator|=
name|msdb
operator|.
name|getDatabase
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|)
expr_stmt|;
comment|// if tbl location is available use it
comment|// else derive the tbl location from database location
name|destPath
operator|=
name|wh
operator|.
name|getPartitionPath
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|,
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|destPath
operator|=
name|constructRenamedPath
argument_list|(
name|destPath
argument_list|,
operator|new
name|Path
argument_list|(
name|new_part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Didn't find object in metastore "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Unable to change partition or table. Database "
operator|+
name|dbname
operator|+
literal|" does not exist"
operator|+
literal|" Check metastore logs for detailed stack."
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|destPath
operator|!=
literal|null
condition|)
block|{
name|newPartLoc
operator|=
name|destPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|oldPartLoc
operator|=
name|oldPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"srcPath:"
operator|+
name|oldPartLoc
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"descPath:"
operator|+
name|newPartLoc
argument_list|)
expr_stmt|;
name|srcPath
operator|=
operator|new
name|Path
argument_list|(
name|oldPartLoc
argument_list|)
expr_stmt|;
name|srcFs
operator|=
name|wh
operator|.
name|getFs
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|destFs
operator|=
name|wh
operator|.
name|getFs
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
comment|// check that src and dest are on the same file system
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|equalsFileSystem
argument_list|(
name|srcFs
argument_list|,
name|destFs
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"New table location "
operator|+
name|destPath
operator|+
literal|" is on a different file system than the old location "
operator|+
name|srcPath
operator|+
literal|". This operation is not supported."
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|srcFs
operator|.
name|exists
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|newPartLoc
operator|.
name|compareTo
argument_list|(
name|oldPartLoc
argument_list|)
operator|!=
literal|0
operator|&&
name|destFs
operator|.
name|exists
argument_list|(
name|destPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"New location for this table "
operator|+
name|tbl
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
operator|+
literal|" already exists : "
operator|+
name|destPath
argument_list|)
throw|;
block|}
comment|//if destPath's parent path doesn't exist, we should mkdir it
name|Path
name|destParentPath
init|=
name|destPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|destParentPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to create path "
operator|+
name|destParentPath
argument_list|)
throw|;
block|}
comment|//rename the data directory
name|wh
operator|.
name|renameDir
argument_list|(
name|srcPath
argument_list|,
name|destPath
argument_list|,
name|ReplChangeManager
operator|.
name|isSourceOfReplication
argument_list|(
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Partition directory rename from "
operator|+
name|srcPath
operator|+
literal|" to "
operator|+
name|destPath
operator|+
literal|" done."
argument_list|)
expr_stmt|;
name|dataWasMoved
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot rename partition directory from "
operator|+
name|srcPath
operator|+
literal|" to "
operator|+
name|destPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Unable to access src or dest location for partition "
operator|+
name|tbl
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
operator|+
literal|" "
operator|+
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot rename partition directory from "
operator|+
name|srcPath
operator|+
literal|" to "
operator|+
name|destPath
argument_list|,
name|me
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
name|new_part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|newPartLoc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|new_part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|oldPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MetaStoreServerUtils
operator|.
name|requireCalStats
argument_list|(
name|oldPart
argument_list|,
name|new_part
argument_list|,
name|tbl
argument_list|,
name|environmentContext
argument_list|)
condition|)
block|{
name|MetaStoreServerUtils
operator|.
name|updatePartitionStatsFast
argument_list|(
name|new_part
argument_list|,
name|tbl
argument_list|,
name|wh
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|environmentContext
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|String
name|newPartName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnStatistics
name|cs
init|=
name|updateOrGetPartitionColumnStats
argument_list|(
name|msdb
argument_list|,
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|oldPart
operator|.
name|getValues
argument_list|()
argument_list|,
name|oldPart
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|,
name|tbl
argument_list|,
name|new_part
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|msdb
operator|.
name|alterPartition
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|part_vals
argument_list|,
name|new_part
argument_list|,
name|validWriteIds
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|setPartName
argument_list|(
name|newPartName
argument_list|)
expr_stmt|;
try|try
block|{
name|msdb
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|,
name|validWriteIds
argument_list|,
name|new_part
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidInputException
name|iie
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Unable to update partition stats in table rename."
operator|+
name|iie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|nsoe
parameter_list|)
block|{
comment|// It is ok, ignore
block|}
block|}
if|if
condition|(
name|transactionalListeners
operator|!=
literal|null
operator|&&
operator|!
name|transactionalListeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MetaStoreListenerNotifier
operator|.
name|notifyEvent
argument_list|(
name|transactionalListeners
argument_list|,
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_PARTITION
argument_list|,
operator|new
name|AlterPartitionEvent
argument_list|(
name|oldPart
argument_list|,
name|new_part
argument_list|,
name|tbl
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|handler
argument_list|)
argument_list|,
name|environmentContext
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|msdb
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to rename a partition. Rollback transaction"
argument_list|)
expr_stmt|;
name|msdb
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|dataWasMoved
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Revert the data move in renaming a partition."
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|destFs
operator|.
name|exists
argument_list|(
name|destPath
argument_list|)
condition|)
block|{
name|wh
operator|.
name|renameDir
argument_list|(
name|destPath
argument_list|,
name|srcPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to restore partition data from "
operator|+
name|destPath
operator|+
literal|" to "
operator|+
name|srcPath
operator|+
literal|" in alter partition failure. Manual restore is needed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to restore partition data from "
operator|+
name|destPath
operator|+
literal|" to "
operator|+
name|srcPath
operator|+
literal|" in alter partition failure. Manual restore is needed."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|oldPart
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|alterPartitions
parameter_list|(
specifier|final
name|RawStore
name|msdb
parameter_list|,
name|Warehouse
name|wh
parameter_list|,
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|Partition
argument_list|>
name|new_parts
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
return|return
name|alterPartitions
argument_list|(
name|msdb
argument_list|,
name|wh
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|new_parts
argument_list|,
name|environmentContext
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|alterPartitions
parameter_list|(
specifier|final
name|RawStore
name|msdb
parameter_list|,
name|Warehouse
name|wh
parameter_list|,
specifier|final
name|String
name|catName
parameter_list|,
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|Partition
argument_list|>
name|new_parts
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|,
name|String
name|writeIdList
parameter_list|,
name|long
name|writeId
parameter_list|,
name|IHMSHandler
name|handler
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|oldParts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TransactionalMetaStoreEventListener
argument_list|>
name|transactionalListeners
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|transactionalListeners
operator|=
name|handler
operator|.
name|getTransactionalListeners
argument_list|()
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|msdb
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
comment|// Note: should we pass in write ID here? We only update stats on parts so probably not.
name|Table
name|tbl
init|=
name|msdb
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to alter partitions because table or database does not exist."
argument_list|)
throw|;
block|}
for|for
control|(
name|Partition
name|tmpPart
range|:
name|new_parts
control|)
block|{
comment|// Set DDL time to now if not specified
if|if
condition|(
name|tmpPart
operator|.
name|getParameters
argument_list|()
operator|==
literal|null
operator|||
name|tmpPart
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|)
operator|==
literal|null
operator|||
name|Integer
operator|.
name|parseInt
argument_list|(
name|tmpPart
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|tmpPart
operator|.
name|putToParameters
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Partition
name|oldTmpPart
init|=
name|msdb
operator|.
name|getPartition
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|tmpPart
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|oldParts
operator|.
name|add
argument_list|(
name|oldTmpPart
argument_list|)
expr_stmt|;
name|partValsList
operator|.
name|add
argument_list|(
name|tmpPart
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|MetaStoreServerUtils
operator|.
name|requireCalStats
argument_list|(
name|oldTmpPart
argument_list|,
name|tmpPart
argument_list|,
name|tbl
argument_list|,
name|environmentContext
argument_list|)
condition|)
block|{
comment|// Check if stats are same, no need to update
if|if
condition|(
name|MetaStoreServerUtils
operator|.
name|isFastStatsSame
argument_list|(
name|oldTmpPart
argument_list|,
name|tmpPart
argument_list|)
condition|)
block|{
name|MetaStoreServerUtils
operator|.
name|updateBasicState
argument_list|(
name|environmentContext
argument_list|,
name|tmpPart
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MetaStoreServerUtils
operator|.
name|updatePartitionStatsFast
argument_list|(
name|tmpPart
argument_list|,
name|tbl
argument_list|,
name|wh
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|environmentContext
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// PartitionView does not have SD and we do not need to update its column stats
if|if
condition|(
name|oldTmpPart
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|updateOrGetPartitionColumnStats
argument_list|(
name|msdb
argument_list|,
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|oldTmpPart
operator|.
name|getValues
argument_list|()
argument_list|,
name|oldTmpPart
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|,
name|tbl
argument_list|,
name|tmpPart
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|msdb
operator|.
name|alterPartitions
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|partValsList
argument_list|,
name|new_parts
argument_list|,
name|writeId
argument_list|,
name|writeIdList
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|oldPartsIt
init|=
name|oldParts
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|newPart
range|:
name|new_parts
control|)
block|{
name|Partition
name|oldPart
decl_stmt|;
if|if
condition|(
name|oldPartsIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|oldPart
operator|=
name|oldPartsIt
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Missing old partition corresponding to new partition "
operator|+
literal|"when invoking MetaStoreEventListener for alterPartitions event."
argument_list|)
throw|;
block|}
if|if
condition|(
name|transactionalListeners
operator|!=
literal|null
operator|&&
operator|!
name|transactionalListeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MetaStoreListenerNotifier
operator|.
name|notifyEvent
argument_list|(
name|transactionalListeners
argument_list|,
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_PARTITION
argument_list|,
operator|new
name|AlterPartitionEvent
argument_list|(
name|oldPart
argument_list|,
name|newPart
argument_list|,
name|tbl
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|handler
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|success
operator|=
name|msdb
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Alter partition operation failed: "
operator|+
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|msdb
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|oldParts
return|;
block|}
specifier|private
name|boolean
name|checkPartialPartKeysEqual
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|oldPartKeys
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newPartKeys
parameter_list|)
block|{
comment|//return true if both are null, or false if one is null and the other isn't
if|if
condition|(
name|newPartKeys
operator|==
literal|null
operator|||
name|oldPartKeys
operator|==
literal|null
condition|)
block|{
return|return
name|oldPartKeys
operator|==
name|newPartKeys
return|;
block|}
if|if
condition|(
name|oldPartKeys
operator|.
name|size
argument_list|()
operator|!=
name|newPartKeys
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|oldPartKeysIter
init|=
name|oldPartKeys
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|newPartKeysIter
init|=
name|newPartKeys
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|FieldSchema
name|oldFs
decl_stmt|;
name|FieldSchema
name|newFs
decl_stmt|;
while|while
condition|(
name|oldPartKeysIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|oldFs
operator|=
name|oldPartKeysIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|newFs
operator|=
name|newPartKeysIter
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// Alter table can change the type of partition key now.
comment|// So check the column name only.
if|if
condition|(
operator|!
name|oldFs
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|newFs
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Uses the scheme and authority of the object's current location and the path constructed    * using the object's new name to construct a path for the object's new location.    */
specifier|private
name|Path
name|constructRenamedPath
parameter_list|(
name|Path
name|defaultNewPath
parameter_list|,
name|Path
name|currentPath
parameter_list|)
block|{
name|URI
name|currentUri
init|=
name|currentPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|currentUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|currentUri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|defaultNewPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
name|void
name|alterTableUpdateTableColumnStats
parameter_list|(
name|RawStore
name|msdb
parameter_list|,
name|Table
name|oldTable
parameter_list|,
name|Table
name|newTable
parameter_list|,
name|EnvironmentContext
name|ec
parameter_list|,
name|String
name|validWriteIds
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|String
name|catName
init|=
name|normalizeIdentifier
argument_list|(
name|oldTable
operator|.
name|isSetCatName
argument_list|()
condition|?
name|oldTable
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|oldTable
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|normalizeIdentifier
argument_list|(
name|oldTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|newDbName
init|=
name|newTable
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|newTableName
init|=
name|normalizeIdentifier
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|oldCols
init|=
name|oldTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols
init|=
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|newStatsObjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ColumnStatistics
name|colStats
init|=
literal|null
decl_stmt|;
name|boolean
name|updateColumnStats
init|=
operator|!
name|newDbName
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
operator|||
operator|!
name|newTableName
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
operator|||
operator|!
name|MetaStoreServerUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|oldCols
argument_list|,
name|newCols
argument_list|)
decl_stmt|;
comment|// Don't bother in the case of ACID conversion.
name|updateColumnStats
operator|=
name|updateColumnStats
operator|&&
operator|(
name|TxnUtils
operator|.
name|isAcidTable
argument_list|(
name|oldTable
argument_list|)
operator|==
name|TxnUtils
operator|.
name|isAcidTable
argument_list|(
name|newTable
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|updateColumnStats
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|oldColNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|oldCols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|oldCol
range|:
name|oldCols
control|)
block|{
name|oldColNames
operator|.
name|add
argument_list|(
name|oldCol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: this doesn't check stats being compliant, but the alterTable call below does.
comment|//       The worst we can do is delete the stats.
comment|// Collect column stats which need to be rewritten and remove old stats.
name|colStats
operator|=
name|msdb
operator|.
name|getTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|oldColNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|colStats
operator|==
literal|null
condition|)
block|{
name|updateColumnStats
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
name|colStats
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
if|if
condition|(
name|statsObjs
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|deletedCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|statsObj
range|:
name|statsObjs
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FieldSchema
name|newCol
range|:
name|newCols
control|)
block|{
if|if
condition|(
name|statsObj
operator|.
name|getColName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|newCol
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|statsObj
operator|.
name|getColType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|newCol
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
if|if
condition|(
operator|!
name|newDbName
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
operator|||
operator|!
name|newTableName
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|msdb
operator|.
name|deleteTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|newStatsObjs
operator|.
name|add
argument_list|(
name|statsObj
argument_list|)
expr_stmt|;
name|deletedCols
operator|.
name|add
argument_list|(
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|msdb
operator|.
name|deleteTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|deletedCols
operator|.
name|add
argument_list|(
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|StatsSetupConst
operator|.
name|removeColumnStatsState
argument_list|(
name|newTable
operator|.
name|getParameters
argument_list|()
argument_list|,
name|deletedCols
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Change to new table and append stats for the new table
name|msdb
operator|.
name|alterTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|newTable
argument_list|,
name|validWriteIds
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateColumnStats
operator|&&
operator|!
name|newStatsObjs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ColumnStatisticsDesc
name|statsDesc
init|=
name|colStats
operator|.
name|getStatsDesc
argument_list|()
decl_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|newDbName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|newTableName
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setStatsObj
argument_list|(
name|newStatsObjs
argument_list|)
expr_stmt|;
name|msdb
operator|.
name|updateTableColumnStatistics
argument_list|(
name|colStats
argument_list|,
name|validWriteIds
argument_list|,
name|newTable
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|nsoe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not find db entry."
operator|+
name|nsoe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidInputException
name|e
parameter_list|)
block|{
comment|//should not happen since the input were verified before passed in
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Invalid inputs to update table column stats: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ColumnStatistics
name|updateOrGetPartitionColumnStats
parameter_list|(
name|RawStore
name|msdb
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|tblname
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|oldCols
parameter_list|,
name|Table
name|table
parameter_list|,
name|Partition
name|part
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|ColumnStatistics
name|newPartsColStats
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// if newCols are not specified, use default ones.
if|if
condition|(
name|newCols
operator|==
literal|null
condition|)
block|{
name|newCols
operator|=
name|part
operator|.
name|getSd
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<>
argument_list|()
else|:
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
expr_stmt|;
block|}
name|String
name|oldPartName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|String
name|newPartName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|rename
init|=
operator|!
name|part
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|dbname
argument_list|)
operator|||
operator|!
name|part
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tblname
argument_list|)
operator|||
operator|!
name|oldPartName
operator|.
name|equals
argument_list|(
name|newPartName
argument_list|)
decl_stmt|;
comment|// do not need to update column stats if alter partition is not for rename or changing existing columns
if|if
condition|(
operator|!
name|rename
operator|&&
name|MetaStoreServerUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|oldCols
argument_list|,
name|newCols
argument_list|)
condition|)
block|{
return|return
name|newPartsColStats
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|oldColNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|oldCols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|oldCol
range|:
name|oldCols
control|)
block|{
name|oldColNames
operator|.
name|add
argument_list|(
name|oldCol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|oldPartNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|oldPartName
argument_list|)
decl_stmt|;
comment|// TODO: doesn't take txn stats into account. This method can only remove stats.
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|partsColStats
init|=
name|msdb
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|tblname
argument_list|,
name|oldPartNames
argument_list|,
name|oldColNames
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|partsColStats
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|)
assert|;
for|for
control|(
name|ColumnStatistics
name|partColStats
range|:
name|partsColStats
control|)
block|{
comment|//actually only at most one loop
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|newStatsObjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
name|partColStats
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|deletedCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|statsObj
range|:
name|statsObjs
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FieldSchema
name|newCol
range|:
name|newCols
control|)
block|{
if|if
condition|(
name|statsObj
operator|.
name|getColName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|newCol
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|statsObj
operator|.
name|getColType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|newCol
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
if|if
condition|(
name|rename
condition|)
block|{
name|msdb
operator|.
name|deletePartitionColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|tblname
argument_list|,
name|partColStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getPartName
argument_list|()
argument_list|,
name|partVals
argument_list|,
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|newStatsObjs
operator|.
name|add
argument_list|(
name|statsObj
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|msdb
operator|.
name|deletePartitionColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|tblname
argument_list|,
name|partColStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getPartName
argument_list|()
argument_list|,
name|partVals
argument_list|,
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|deletedCols
operator|.
name|add
argument_list|(
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|StatsSetupConst
operator|.
name|removeColumnStatsState
argument_list|(
name|part
operator|.
name|getParameters
argument_list|()
argument_list|,
name|deletedCols
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newStatsObjs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|partColStats
operator|.
name|setStatsObj
argument_list|(
name|newStatsObjs
argument_list|)
expr_stmt|;
name|newPartsColStats
operator|=
name|partColStats
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|nsoe
parameter_list|)
block|{
comment|// ignore this exception, actually this exception won't be thrown from getPartitionColumnStatistics
block|}
catch|catch
parameter_list|(
name|InvalidInputException
name|iie
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Invalid input to delete partition column stats."
operator|+
name|iie
argument_list|)
throw|;
block|}
return|return
name|newPartsColStats
return|;
block|}
specifier|private
name|void
name|checkColTypeChangeCompatible
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|oldCols
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols
parameter_list|)
throws|throws
name|InvalidOperationException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|incompatibleCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|maxCols
init|=
name|Math
operator|.
name|min
argument_list|(
name|oldCols
operator|.
name|size
argument_list|()
argument_list|,
name|newCols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxCols
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|ColumnType
operator|.
name|areColTypesCompatible
argument_list|(
name|ColumnType
operator|.
name|getTypeName
argument_list|(
name|oldCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|ColumnType
operator|.
name|getTypeName
argument_list|(
name|newCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|incompatibleCols
operator|.
name|add
argument_list|(
name|newCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|incompatibleCols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"The following columns have types incompatible with the existing "
operator|+
literal|"columns in their respective positions :\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
argument_list|(
name|incompatibleCols
argument_list|,
literal|','
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

