begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|ColStatsObjWithSourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_interface
specifier|public
interface|interface
name|RawStore
extends|extends
name|Configurable
block|{
comment|/***    * Annotation to skip retries    */
annotation|@
name|Target
argument_list|(
name|value
operator|=
name|ElementType
operator|.
name|METHOD
argument_list|)
annotation|@
name|Retention
argument_list|(
name|value
operator|=
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation_defn|@interface
name|CanNotRetry
block|{   }
name|void
name|shutdown
parameter_list|()
function_decl|;
comment|/**    * Opens a new one or the one already created Every call of this function must    * have corresponding commit or rollback function call    *    * @return an active transaction    */
name|boolean
name|openTransaction
parameter_list|()
function_decl|;
comment|/**    * if this is the commit of the first open call then an actual commit is    * called.    *    * @return true or false    */
annotation|@
name|CanNotRetry
name|boolean
name|commitTransaction
parameter_list|()
function_decl|;
name|boolean
name|isActiveTransaction
parameter_list|()
function_decl|;
comment|/**    * Rolls back the current transaction if it is active    */
annotation|@
name|CanNotRetry
name|void
name|rollbackTransaction
parameter_list|()
function_decl|;
comment|/**    * Create a new catalog.    * @param cat Catalog to create.    * @throws MetaException if something goes wrong, usually in storing it to the database.    */
name|void
name|createCatalog
parameter_list|(
name|Catalog
name|cat
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Alter an existing catalog.  Only description and location can be changed, and the change of    * location is for internal use only.    * @param catName name of the catalog to alter.    * @param cat new version of the catalog.    * @throws MetaException something went wrong, usually in the database.    * @throws InvalidOperationException attempt to change something about the catalog that is not    * changeable, like the name.    */
name|void
name|alterCatalog
parameter_list|(
name|String
name|catName
parameter_list|,
name|Catalog
name|cat
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
function_decl|;
comment|/**    * Get a catalog.    * @param catalogName name of the catalog.    * @return The catalog.    * @throws NoSuchObjectException no catalog of this name exists.    * @throws MetaException if something goes wrong, usually in reading it from the database.    */
name|Catalog
name|getCatalog
parameter_list|(
name|String
name|catalogName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Get all the catalogs.    * @return list of names of all catalogs in the system    * @throws MetaException if something goes wrong, usually in reading from the database.    */
name|List
argument_list|<
name|String
argument_list|>
name|getCatalogs
parameter_list|()
throws|throws
name|MetaException
function_decl|;
comment|/**    * Drop a catalog.  The catalog must be empty.    * @param catalogName name of the catalog to drop.    * @throws NoSuchObjectException no catalog of this name exists.    * @throws MetaException could mean the catalog isn't empty, could mean general database error.    */
name|void
name|dropCatalog
parameter_list|(
name|String
name|catalogName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Create a database.    * @param db database to create.    * @throws InvalidObjectException not sure it actually ever throws this.    * @throws MetaException if something goes wrong, usually in writing it to the database.    */
name|void
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Get a database.    * @param catalogName catalog the database is in.    * @param name name of the database.    * @return the database.    * @throws NoSuchObjectException if no such database exists.    */
name|Database
name|getDatabase
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
function_decl|;
comment|/**    * Drop a database.    * @param catalogName catalog the database is in.    * @param dbname name of the database.    * @return true if the database was dropped, pretty much always returns this if it returns.    * @throws NoSuchObjectException no database in this catalog of this name to drop    * @throws MetaException something went wrong, usually with the database.    */
name|boolean
name|dropDatabase
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|dbname
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Alter a database.    * @param catalogName name of the catalog the database is in.    * @param dbname name of the database to alter    * @param db new version of the database.  This should be complete as it will fully replace the    *          existing db object.    * @return true if the change succeeds, could fail due to db constraint violations.    * @throws NoSuchObjectException no database of this name exists to alter.    * @throws MetaException something went wrong, usually with the database.    */
name|boolean
name|alterDatabase
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Get all database in a catalog having names that match a pattern.    * @param catalogName name of the catalog to search for databases in    * @param pattern pattern names should match    * @return list of matching database names.    * @throws MetaException something went wrong, usually with the database.    */
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get names of all the databases in a catalog.    * @param catalogName name of the catalog to search for databases in    * @return list of names of all databases in the catalog    * @throws MetaException something went wrong, usually with the database.    */
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|(
name|String
name|catalogName
parameter_list|)
throws|throws
name|MetaException
function_decl|;
name|boolean
name|createType
parameter_list|(
name|Type
name|type
parameter_list|)
function_decl|;
name|Type
name|getType
parameter_list|(
name|String
name|typeName
parameter_list|)
function_decl|;
name|boolean
name|dropType
parameter_list|(
name|String
name|typeName
parameter_list|)
function_decl|;
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Drop a table.    * @param catalogName catalog the table is in    * @param dbName database the table is in    * @param tableName table name    * @return true if the table was dropped    * @throws MetaException something went wrong, usually in the RDBMS or storage    * @throws NoSuchObjectException No table of this name    * @throws InvalidObjectException Don't think this is ever actually thrown    * @throws InvalidInputException Don't think this is ever actually thrown    */
name|boolean
name|dropTable
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Get a table object.    * @param catalogName catalog the table is in.    * @param dbName database the table is in.    * @param tableName table name.    * @return table object, or null if no such table exists (wow it would be nice if we either    * consistently returned null or consistently threw NoSuchObjectException).    * @throws MetaException something went wrong in the RDBMS    */
name|Table
name|getTable
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get a table object.    * @param catalogName catalog the table is in.    * @param dbName database the table is in.    * @param tableName table name.    * @param txnId transaction id of the calling transaction    * @param writeIdList string format of valid writeId transaction list    * @return table object, or null if no such table exists (wow it would be nice if we either    * consistently returned null or consistently threw NoSuchObjectException).    * @throws MetaException something went wrong in the RDBMS    */
name|Table
name|getTable
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|long
name|txnId
parameter_list|,
name|String
name|writeIdList
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Add a partition.    * @param part partition to add    * @return true if the partition was successfully added.    * @throws InvalidObjectException the provided partition object is not valid.    * @throws MetaException error writing to the RDBMS.    */
name|boolean
name|addPartition
parameter_list|(
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Add a list of partitions to a table.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param parts list of partitions to be added.    * @return true if the operation succeeded.    * @throws InvalidObjectException never throws this AFAICT    * @throws MetaException the partitions don't belong to the indicated table or error writing to    * the RDBMS.    */
name|boolean
name|addPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Add a list of partitions to a table.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param partitionSpec specification for the partition    * @param ifNotExists whether it is in an error if the partition already exists.  If true, then    *                   it is not an error if the partition exists, if false, it is.    * @return whether the partition was created.    * @throws InvalidObjectException The passed in partition spec or table specification is invalid.    * @throws MetaException error writing to RDBMS.    */
name|boolean
name|addPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|PartitionSpecProxy
name|partitionSpec
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Get a partition.    * @param catName catalog name.    * @param dbName database name.    * @param tableName table name.    * @param part_vals partition values for this table.    * @return the partition.    * @throws MetaException error reading from RDBMS.    * @throws NoSuchObjectException no partition matching this specification exists.    */
name|Partition
name|getPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get a partition.    * @param catName catalog name.    * @param dbName database name.    * @param tableName table name.    * @param part_vals partition values for this table.    * @param txnId transaction id of the calling transaction    * @param writeIdList string format of valid writeId transaction list    * @return the partition.    * @throws MetaException error reading from RDBMS.    * @throws NoSuchObjectException no partition matching this specification exists.    */
name|Partition
name|getPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|long
name|txnId
parameter_list|,
name|String
name|writeIdList
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Check whether a partition exists.    * @param catName catalog name.    * @param dbName database name.    * @param tableName table name.    * @param partKeys list of partition keys used to generate the partition name.    * @param part_vals list of partition values.    * @return true if the partition exists, false otherwise.    * @throws MetaException failure reading RDBMS    * @throws NoSuchObjectException this is never thrown.    */
name|boolean
name|doesPartitionExist
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Drop a partition.    * @param catName catalog name.    * @param dbName database name.    * @param tableName table name.    * @param part_vals list of partition values.    * @return true if the partition was dropped.    * @throws MetaException Error accessing the RDBMS.    * @throws NoSuchObjectException no partition matching this description exists    * @throws InvalidObjectException error dropping the statistics for the partition    * @throws InvalidInputException error dropping the statistics for the partition    */
name|boolean
name|dropPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Get some or all partitions for a table.    * @param catName catalog name.    * @param dbName database name.    * @param tableName table name    * @param max maximum number of partitions, or -1 to get all partitions.    * @return list of partitions    * @throws MetaException error access the RDBMS.    * @throws NoSuchObjectException no such table exists    */
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get the location for every partition of a given table. If a partition location is a child of    * baseLocationToNotShow then the partitionName is returned, but the only null location is    * returned.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param baseLocationToNotShow Partition locations which are child of this path are omitted, and    *     null value returned instead.    * @param max The maximum number of partition locations returned, or -1 for all    * @return The map of the partitionName, location pairs    */
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartitionLocations
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|baseLocationToNotShow
parameter_list|,
name|int
name|max
parameter_list|)
function_decl|;
comment|/**    * Alter a table.    * @param catName catalog the table is in.    * @param dbname database the table is in.    * @param name name of the table.    * @param newTable New table object.  Which parts of the table can be altered are    *                 implementation specific.    * @throws InvalidObjectException The new table object is invalid.    * @throws MetaException something went wrong, usually in the RDBMS or storage.    */
name|void
name|alterTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|Table
name|newTable
parameter_list|,
name|long
name|queryTxnId
parameter_list|,
name|String
name|queryValidWriteIds
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Update creation metadata for a materialized view.    * @param catName catalog name.    * @param dbname database name.    * @param tablename table name.    * @param cm new creation metadata    * @throws MetaException error accessing the RDBMS.    */
name|void
name|updateCreationMetadata
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|tablename
parameter_list|,
name|CreationMetadata
name|cm
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get table names that match a pattern.    * @param catName catalog to search in    * @param dbName database to search in    * @param pattern pattern to match    * @return list of table names, if any    * @throws MetaException failure in querying the RDBMS    */
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get table names that match a pattern.    * @param catName catalog to search in    * @param dbName database to search in    * @param pattern pattern to match    * @param tableType type of table to look for    * @return list of table names, if any    * @throws MetaException failure in querying the RDBMS    */
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|,
name|TableType
name|tableType
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get list of materialized views in a database.    * @param catName catalog name    * @param dbName database name    * @return names of all materialized views in the database    * @throws MetaException error querying the RDBMS    * @throws NoSuchObjectException no such database    */
name|List
argument_list|<
name|String
argument_list|>
name|getMaterializedViewsForRewriting
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**     * @param catName catalog name to search in. Search must be confined to one catalog.    * @param dbNames databases to search in.    * @param tableNames names of tables to select.    * @param tableTypes types of tables to look for.    * @return list of matching table meta information.    * @throws MetaException failure in querying the RDBMS.    */
name|List
argument_list|<
name|TableMeta
argument_list|>
name|getTableMeta
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbNames
parameter_list|,
name|String
name|tableNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * @param catName catalog name    * @param dbname    *        The name of the database from which to retrieve the tables    * @param tableNames    *        The names of the tables to retrieve.    * @return A list of the tables retrievable from the database    *          whose names are in the list tableNames.    *         If there are duplicate names, only one instance of the table will be returned    * @throws MetaException failure in querying the RDBMS.    */
name|List
argument_list|<
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get all tables in a database.    * @param catName catalog name.    * @param dbName database name.    * @return list of table names    * @throws MetaException failure in querying the RDBMS.    */
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Gets a list of tables based on a filter string and filter type.    * @param catName catalog name    * @param dbName    *          The name of the database from which you will retrieve the table names    * @param filter    *          The filter string    * @param max_tables    *          The maximum number of tables returned    * @return  A list of table names that match the desired filter    * @throws MetaException    * @throws UnknownDBException    */
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_tables
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get a partial or complete list of names for partitions of a table.    * @param catName catalog name.    * @param db_name database name.    * @param tbl_name table name.    * @param max_parts maximum number of partitions to retrieve, -1 for all.    * @return list of partition names.    * @throws MetaException there was an error accessing the RDBMS    */
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get a list of partition values as one big struct.    * @param catName catalog name.    * @param db_name database name.    * @param tbl_name table name.    * @param cols partition key columns    * @param applyDistinct whether to apply distinct to the list    * @param filter filter to apply to the partition names    * @param ascending whether to put in ascending order    * @param order whether to order    * @param maxParts maximum number of parts to return, or -1 for all    * @return struct with all of the partition value information    * @throws MetaException error access the RDBMS    */
name|PartitionValuesResponse
name|listPartitionValues
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|boolean
name|applyDistinct
parameter_list|,
name|String
name|filter
parameter_list|,
name|boolean
name|ascending
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|order
parameter_list|,
name|long
name|maxParts
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Alter a partition.    * @param catName catalog name.    * @param db_name database name.    * @param tbl_name table name.    * @param part_vals partition values that describe the partition.    * @param new_part new partition object.  This should be a complete copy of the old with    *                 changes values, not just the parts to update.    * @throws InvalidObjectException No such partition.    * @throws MetaException error accessing the RDBMS.    */
name|void
name|alterPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|Partition
name|new_part
parameter_list|,
name|long
name|queryTxnId
parameter_list|,
name|String
name|queryValidWriteIds
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Alter a set of partitions.    * @param catName catalog name.    * @param db_name database name.    * @param tbl_name table name.    * @param part_vals_list list of list of partition values.  Each outer list describes one    *                       partition (with its list of partition values).    * @param new_parts list of new partitions.  The order must match the old partitions described in    *                  part_vals_list.  Each of these should be a complete copy of the new    *                  partition, not just the pieces to update.    * @param txnId transaction id of the transaction that called this method.    * @param writeIdList valid write id list of the transaction on the current table    * @param writeid write id of the transaction for the table    * @throws InvalidObjectException One of the indicated partitions does not exist.    * @throws MetaException error accessing the RDBMS.    */
name|void
name|alterPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|part_vals_list
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|new_parts
parameter_list|,
name|long
name|writeId
parameter_list|,
name|long
name|queryTxnId
parameter_list|,
name|String
name|queryValidWriteIds
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Get partitions with a filter.  This is a portion of the SQL where clause.    * @param catName catalog name    * @param dbName database name    * @param tblName table name    * @param filter SQL where clause filter    * @param maxParts maximum number of partitions to return, or -1 for all.    * @return list of partition objects matching the criteria    * @throws MetaException Error accessing the RDBMS or processing the filter.    * @throws NoSuchObjectException no such table.    */
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get partitions using an already parsed expression.    * @param catName catalog name.    * @param dbName database name    * @param tblName table name    * @param expr an already parsed Hive expression    * @param defaultPartitionName default name of a partition    * @param maxParts maximum number of partitions to return, or -1 for all    * @param result list to place resulting partitions in    * @return true if the result contains unknown partitions.    * @throws TException error executing the expression    */
name|boolean
name|getPartitionsByExpr
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get the number of partitions that match a provided SQL filter.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param filter filter from Hive's SQL where clause    * @return number of matching partitions.    * @throws MetaException error accessing the RDBMS or executing the filter    * @throws NoSuchObjectException no such table    */
name|int
name|getNumPartitionsByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get the number of partitions that match an already parsed expression.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param expr an already parsed Hive expression    * @return number of matching partitions.    * @throws MetaException error accessing the RDBMS or working with the expression.    * @throws NoSuchObjectException no such table.    */
name|int
name|getNumPartitionsByExpr
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get partitions by name.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param partNames list of partition names.  These are names not values, so they will include    *                  both the key and the value.    * @return list of matching partitions    * @throws MetaException error accessing the RDBMS.    * @throws NoSuchObjectException No such table.    */
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
name|Table
name|markPartitionForEvent
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partVals
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
function_decl|;
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
function_decl|;
name|boolean
name|addRole
parameter_list|(
name|String
name|rowName
parameter_list|,
name|String
name|ownerName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
name|boolean
name|removeRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
name|boolean
name|grantRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
function_decl|;
name|boolean
name|revokeRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
name|PrincipalPrivilegeSet
name|getUserPrivilegeSet
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Get privileges for a database for a user.    * @param catName catalog name    * @param dbName database name    * @param userName user name    * @param groupNames list of groups the user is in    * @return privileges for that user on indicated database    * @throws InvalidObjectException no such database    * @throws MetaException error accessing the RDBMS    */
name|PrincipalPrivilegeSet
name|getDBPrivilegeSet
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Get privileges for a table for a user.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param userName user name    * @param groupNames list of groups the user is in    * @return privileges for that user on indicated table    * @throws InvalidObjectException no such table    * @throws MetaException error accessing the RDBMS    */
name|PrincipalPrivilegeSet
name|getTablePrivilegeSet
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Get privileges for a partition for a user.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param partition partition name    * @param userName user name    * @param groupNames list of groups the user is in    * @return privileges for that user on indicated partition    * @throws InvalidObjectException no such partition    * @throws MetaException error accessing the RDBMS    */
name|PrincipalPrivilegeSet
name|getPartitionPrivilegeSet
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partition
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Get privileges for a column in a table or partition for a user.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param partitionName partition name, or null for table level column permissions    * @param columnName column name    * @param userName user name    * @param groupNames list of groups the user is in    * @return privileges for that user on indicated column in the table or partition    * @throws InvalidObjectException no such table, partition, or column    * @throws MetaException error accessing the RDBMS    */
name|PrincipalPrivilegeSet
name|getColumnPrivilegeSet
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalGlobalGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
function_decl|;
comment|/**    * For a given principal name and type, list the DB Grants    * @param principalName principal name    * @param principalType type    * @param catName catalog name    * @param dbName database name    * @return list of privileges for that principal on the specified database.    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalDBGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
function_decl|;
comment|/**    * For a given principal name and type, list the Table Grants    * @param principalName principal name    * @param principalType type    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @return list of privileges for that principal on the specified database.    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listAllTableGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
function_decl|;
comment|/**    * For a given principal name and type, list the Table Grants    * @param principalName principal name    * @param principalType type    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param partName partition name (not value)    * @return list of privileges for that principal on the specified database.    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|String
name|partName
parameter_list|)
function_decl|;
comment|/**    * For a given principal name and type, list the Table Grants    * @param principalName principal name    * @param principalType type    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param columnName column name    * @return list of privileges for that principal on the specified database.    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
function_decl|;
comment|/**    * For a given principal name and type, list the Table Grants    * @param principalName principal name    * @param principalType type    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param partName partition name (not value)    * @param columnName column name    * @return list of privileges for that principal on the specified database.    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|columnName
parameter_list|)
function_decl|;
name|boolean
name|grantPrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
name|boolean
name|revokePrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
name|boolean
name|refreshPrivileges
parameter_list|(
name|HiveObjectRef
name|objToRefresh
parameter_list|,
name|String
name|authorizer
parameter_list|,
name|PrivilegeBag
name|grantPrivileges
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
name|getRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|NoSuchObjectException
function_decl|;
name|List
argument_list|<
name|String
argument_list|>
name|listRoleNames
parameter_list|()
function_decl|;
name|List
argument_list|<
name|Role
argument_list|>
name|listRoles
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
function_decl|;
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|listRolesWithGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
function_decl|;
comment|/**    * Get the role to principal grant mapping for given role    * @param roleName    * @return    */
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|listRoleMembers
parameter_list|(
name|String
name|roleName
parameter_list|)
function_decl|;
comment|/**    * Fetch a partition along with privilege information for a particular user.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param partVals partition values    * @param user_name user to get privilege information for.    * @param group_names groups to get privilege information for.    * @return a partition    * @throws MetaException error accessing the RDBMS.    * @throws NoSuchObjectException no such partition exists    * @throws InvalidObjectException error fetching privilege information    */
name|Partition
name|getPartitionWithAuth
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|user_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
function_decl|;
comment|/**    * Fetch some or all partitions for a table, along with privilege information for a particular    * user.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param maxParts maximum number of partitions to fetch, -1 for all partitions.    * @param userName user to get privilege information for.    * @param groupNames groups to get privilege information for.    * @return list of partitions.    * @throws MetaException error access the RDBMS.    * @throws NoSuchObjectException no such table exists    * @throws InvalidObjectException error fetching privilege information.    */
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsWithAuth
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
function_decl|;
comment|/**    * Lists partition names that match a given partial specification    * @param catName catalog name.    * @param db_name    *          The name of the database which has the partitions    * @param tbl_name    *          The name of the table which has the partitions    * @param part_vals    *          A partial list of values for partitions in order of the table's partition keys.    *          Entries can be empty if you only want to specify latter partitions.    * @param max_parts    *          The maximum number of partitions to return    * @return A list of partition names that match the partial spec.    * @throws MetaException error accessing RDBMS    * @throws NoSuchObjectException No such table exists    */
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNamesPs
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Lists partitions that match a given partial specification and sets their auth privileges.    *   If userName and groupNames null, then no auth privileges are set.    * @param catName catalog name.    * @param db_name    *          The name of the database which has the partitions    * @param tbl_name    *          The name of the table which has the partitions    * @param part_vals    *          A partial list of values for partitions in order of the table's partition keys    *          Entries can be empty if you need to specify latter partitions.    * @param max_parts    *          The maximum number of partitions to return    * @param userName    *          The user name for the partition for authentication privileges    * @param groupNames    *          The groupNames for the partition for authentication privileges    * @return A list of partitions that match the partial spec.    * @throws MetaException error access RDBMS    * @throws NoSuchObjectException No such table exists    * @throws InvalidObjectException error access privilege information    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsPsWithAuth
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/** Persists the given column statistics object to the metastore    * @param colStats object to persist    * @return Boolean indicating the outcome of the operation    * @throws NoSuchObjectException No such table.    * @throws MetaException error accessing the RDBMS.    * @throws InvalidObjectException the stats object is invalid    * @throws InvalidInputException unable to record the stats for the table    */
name|boolean
name|updateTableColumnStatistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|,
name|long
name|txnId
parameter_list|,
name|String
name|validWriteIds
parameter_list|,
name|long
name|writeId
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
function_decl|;
comment|/** Persists the given column statistics object to the metastore    * @param statsObj object to persist    * @param partVals partition values to persist the stats for    * @return Boolean indicating the outcome of the operation    * @throws NoSuchObjectException No such table.    * @throws MetaException error accessing the RDBMS.    * @throws InvalidObjectException the stats object is invalid    * @throws InvalidInputException unable to record the stats for the table    * @throws TException    */
name|boolean
name|updatePartitionColumnStatistics
parameter_list|(
name|ColumnStatistics
name|statsObj
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|long
name|txnId
parameter_list|,
name|String
name|validWriteIds
parameter_list|,
name|long
name|writeId
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Returns the relevant column statistics for a given column in a given table in a given database    * if such statistics exist.    * @param catName catalog name.    * @param dbName name of the database, defaults to current database    * @param tableName name of the table    * @param colName names of the columns for which statistics is requested    * @return Relevant column statistics for the column for the given table    * @throws NoSuchObjectException No such table    * @throws MetaException error accessing the RDBMS    *    */
name|ColumnStatistics
name|getTableColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Returns the relevant column statistics for a given column in a given table in a given database    * if such statistics exist.    * @param catName catalog name.    * @param dbName name of the database, defaults to current database    * @param tableName name of the table    * @param colName names of the columns for which statistics is requested    * @param txnId transaction id of the calling transaction    * @param writeIdList string format of valid writeId transaction list    * @return Relevant column statistics for the column for the given table    * @throws NoSuchObjectException No such table    * @throws MetaException error accessing the RDBMS    *    */
name|ColumnStatistics
name|getTableColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colName
parameter_list|,
name|long
name|txnId
parameter_list|,
name|String
name|writeIdList
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get statistics for a partition for a set of columns.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param partNames list of partition names.  These are names so must be key1=val1[/key2=val2...]    * @param colNames list of columns to get stats for    * @return list of statistics objects    * @throws MetaException error accessing the RDBMS    * @throws NoSuchObjectException no such partition.    */
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get statistics for a partition for a set of columns.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param partNames list of partition names.  These are names so must be key1=val1[/key2=val2...]    * @param colNames list of columns to get stats for    * @param txnId transaction id of the calling transaction    * @param writeIdList string format of valid writeId transaction list    * @return list of statistics objects    * @throws MetaException error accessing the RDBMS    * @throws NoSuchObjectException no such partition.    */
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|long
name|txnId
parameter_list|,
name|String
name|writeIdList
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Deletes column statistics if present associated with a given db, table, partition and col. If    * null is passed instead of a colName, stats when present for all columns associated    * with a given db, table and partition are deleted.    * @param catName catalog name.    * @param dbName database name.    * @param tableName table name.    * @param partName partition name.    * @param partVals partition values.    * @param colName column name.    * @return Boolean indicating the outcome of the operation    * @throws NoSuchObjectException no such partition    * @throws MetaException error access the RDBMS    * @throws InvalidObjectException error dropping the stats    * @throws InvalidInputException bad input, such as null table or database name.    */
name|boolean
name|deletePartitionColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Delete statistics for a single column or all columns in a table.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param colName column name.  Null to delete stats for all columns in the table.    * @return true if the statistics were deleted.    * @throws NoSuchObjectException no such table or column.    * @throws MetaException error access the RDBMS.    * @throws InvalidObjectException error dropping the stats    * @throws InvalidInputException bad inputs, such as null table name.    */
name|boolean
name|deleteTableColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
function_decl|;
name|long
name|cleanupEvents
parameter_list|()
function_decl|;
name|boolean
name|addToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|,
name|String
name|delegationToken
parameter_list|)
function_decl|;
name|boolean
name|removeToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
function_decl|;
name|String
name|getToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
function_decl|;
name|List
argument_list|<
name|String
argument_list|>
name|getAllTokenIdentifiers
parameter_list|()
function_decl|;
name|int
name|addMasterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
function_decl|;
name|void
name|updateMasterKey
parameter_list|(
name|Integer
name|seqNo
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
name|boolean
name|removeMasterKey
parameter_list|(
name|Integer
name|keySeq
parameter_list|)
function_decl|;
name|String
index|[]
name|getMasterKeys
parameter_list|()
function_decl|;
name|void
name|verifySchema
parameter_list|()
throws|throws
name|MetaException
function_decl|;
name|String
name|getMetaStoreSchemaVersion
parameter_list|()
throws|throws
name|MetaException
function_decl|;
specifier|abstract
name|void
name|setMetaStoreSchemaVersion
parameter_list|(
name|String
name|version
parameter_list|,
name|String
name|comment
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Drop a list of partitions.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name    * @param partNames list of partition names.    * @throws MetaException error access RDBMS or storage.    * @throws NoSuchObjectException One or more of the partitions does not exist.    */
name|void
name|dropPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * List all DB grants for a given principal.    * @param principalName principal name    * @param principalType type    * @return all DB grants for this principal    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalDBGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
function_decl|;
comment|/**    * List all Table grants for a given principal    * @param principalName principal name    * @param principalType type    * @return all Table grants for this principal    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
function_decl|;
comment|/**    * List all Partition grants for a given principal    * @param principalName principal name    * @param principalType type    * @return all Partition grants for this principal    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
function_decl|;
comment|/**    * List all Table column grants for a given principal    * @param principalName principal name    * @param principalType type    * @return all Table column grants for this principal    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableColumnGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
function_decl|;
comment|/**    * List all Partition column grants for a given principal    * @param principalName principal name    * @param principalType type    * @return all Partition column grants for this principal    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
function_decl|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listGlobalGrantsAll
parameter_list|()
function_decl|;
comment|/**    * Find all the privileges for a given database.    * @param catName catalog name    * @param dbName database name    * @return list of all privileges.    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listDBGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
function_decl|;
comment|/**    * Find all of the privileges for a given column in a given partition.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param partitionName partition name (not value)    * @param columnName column name    * @return all privileges on this column in this partition    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPartitionColumnGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|)
function_decl|;
comment|/**    * Find all of the privileges for a given table    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @return all privileges on this table    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Find all of the privileges for a given partition.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param partitionName partition name (not value)    * @return all privileges on this partition    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPartitionGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|)
function_decl|;
comment|/**    * Find all of the privileges for a given column in a given table.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param columnName column name    * @return all privileges on this column in this table    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableColumnGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
function_decl|;
comment|/**    * Register a user-defined function based on the function specification passed in.    * @param func function to create    * @throws InvalidObjectException incorrectly specified function    * @throws MetaException error accessing the RDBMS    */
name|void
name|createFunction
parameter_list|(
name|Function
name|func
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Alter function based on new function specs.    * @param dbName database name    * @param funcName function name    * @param newFunction new function specification    * @throws InvalidObjectException no such function, or incorrectly specified new function    * @throws MetaException incorrectly specified function    */
name|void
name|alterFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|,
name|Function
name|newFunction
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Drop a function definition.    * @param dbName database name    * @param funcName function name    * @throws MetaException incorrectly specified function    * @throws NoSuchObjectException no such function    * @throws InvalidObjectException not sure when this is thrown    * @throws InvalidInputException not sure when this is thrown    */
name|void
name|dropFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Retrieve function by name.    * @param dbName database name    * @param funcName function name    * @return the function    * @throws MetaException incorrectly specified function    */
name|Function
name|getFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Retrieve all functions.    * @return all functions in a catalog    * @throws MetaException incorrectly specified function    */
name|List
argument_list|<
name|Function
argument_list|>
name|getAllFunctions
parameter_list|(
name|String
name|catName
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Retrieve list of function names based on name pattern.    * @param dbName database name    * @param pattern pattern to match    * @return functions that match the pattern    * @throws MetaException incorrectly specified function    */
name|List
argument_list|<
name|String
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get aggregated stats for a table or partition(s).    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param partNames list of partition names.  These are the names of the partitions, not    *                  values.    * @param colNames list of column names    * @return aggregated stats    * @throws MetaException error accessing RDBMS    * @throws NoSuchObjectException no such table or partition    */
name|AggrStats
name|get_aggr_stats_for
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get aggregated stats for a table or partition(s).    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param partNames list of partition names.  These are the names of the partitions, not    *                  values.    * @param colNames list of column names    * @param txnId transaction id of the calling transaction    * @param writeIdList string format of valid writeId transaction list    * @return aggregated stats    * @throws MetaException error accessing RDBMS    * @throws NoSuchObjectException no such table or partition    */
name|AggrStats
name|get_aggr_stats_for
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|long
name|txnId
parameter_list|,
name|String
name|writeIdList
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get column stats for all partitions of all tables in the database    * @param catName catalog name    * @param dbName database name    * @return List of column stats objects for all partitions of all tables in the database    * @throws MetaException error accessing RDBMS    * @throws NoSuchObjectException no such database    */
name|List
argument_list|<
name|ColStatsObjWithSourceInfo
argument_list|>
name|getPartitionColStatsForDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get the next notification event.    * @param rqst Request containing information on the last processed notification.    * @return list of notifications, sorted by eventId    */
name|NotificationEventResponse
name|getNextNotification
parameter_list|(
name|NotificationEventRequest
name|rqst
parameter_list|)
function_decl|;
comment|/**    * Add a notification entry.  This should only be called from inside the metastore    * @param event the notification to add    * @throws MetaException error accessing RDBMS    */
name|void
name|addNotificationEvent
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Remove older notification events.    * @param olderThan Remove any events older than a given number of seconds    */
name|void
name|cleanNotificationEvents
parameter_list|(
name|int
name|olderThan
parameter_list|)
function_decl|;
comment|/**    * Get the last issued notification event id.  This is intended for use by the export command    * so that users can determine the state of the system at the point of the export,    * and determine which notification events happened before or after the export.    * @return    */
name|CurrentNotificationEventId
name|getCurrentNotificationEventId
parameter_list|()
function_decl|;
comment|/**    * Get the number of events corresponding to given database with fromEventId.    * This is intended for use by the repl commands to track the progress of incremental dump.    * @return    */
name|NotificationEventsCountResponse
name|getNotificationEventsCount
parameter_list|(
name|NotificationEventsCountRequest
name|rqst
parameter_list|)
function_decl|;
comment|/*    * Flush any catalog objects held by the metastore implementation.  Note that this does not    * flush statistics objects.  This should be called at the beginning of each query.    */
name|void
name|flushCache
parameter_list|()
function_decl|;
comment|/**    * @param fileIds List of file IDs from the filesystem.    * @return File metadata buffers from file metadata cache. The array is fileIds-sized, and    *         the entries (or nulls, if metadata is not in cache) correspond to fileIds in the list    */
name|ByteBuffer
index|[]
name|getFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * @param fileIds List of file IDs from the filesystem.    * @param metadata Metadata buffers corresponding to fileIds in the list.    * @param type The type; determines the class that can do additiona processing for metadata.    */
name|void
name|putFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|metadata
parameter_list|,
name|FileMetadataExprType
name|type
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * @return Whether file metadata cache is supported by this implementation.    */
name|boolean
name|isFileMetadataSupported
parameter_list|()
function_decl|;
comment|/**    * Gets file metadata from cache after applying a format-specific expression that can    * produce additional information based on file metadata and also filter the file list.    * @param fileIds List of file IDs from the filesystem.    * @param expr Format-specific serialized expression applicable to the files' metadatas.    * @param type Expression type; used to determine the class that handles the metadata.    * @param metadatas Output parameter; fileIds-sized array to receive the metadatas    *                  for corresponding files, if any.    * @param exprResults Output parameter; fileIds-sized array to receive the format-specific    *                    expression results for the corresponding files.    * @param eliminated Output parameter; fileIds-sized array to receive the indication of whether    *                   the corresponding files are entirely eliminated by the expression.    */
name|void
name|getFileMetadataByExpr
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|FileMetadataExprType
name|type
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|ByteBuffer
index|[]
name|metadatas
parameter_list|,
name|ByteBuffer
index|[]
name|exprResults
parameter_list|,
name|boolean
index|[]
name|eliminated
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/** Gets file metadata handler for the corresponding type. */
name|FileMetadataHandler
name|getFileMetadataHandler
parameter_list|(
name|FileMetadataExprType
name|type
parameter_list|)
function_decl|;
comment|/**    * Gets total number of tables.    */
annotation|@
name|InterfaceStability
operator|.
name|Evolving
name|int
name|getTableCount
parameter_list|()
throws|throws
name|MetaException
function_decl|;
comment|/**    * Gets total number of partitions.    */
annotation|@
name|InterfaceStability
operator|.
name|Evolving
name|int
name|getPartitionCount
parameter_list|()
throws|throws
name|MetaException
function_decl|;
comment|/**    * Gets total number of databases.    */
annotation|@
name|InterfaceStability
operator|.
name|Evolving
name|int
name|getDatabaseCount
parameter_list|()
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get the primary associated with a table.  Strangely enough each SQLPrimaryKey is actually a    * column in they key, not the key itself.  Thus the list.    * @param catName catalog name    * @param db_name database name    * @param tbl_name table name    * @return list of primary key columns or an empty list if the table does not have a primary key    * @throws MetaException error accessing the RDBMS    */
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeys
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get the foreign keys for a table.  All foreign keys for a particular table can be fetched by    * passing null for the last two arguments.    * @param catName catalog name.    * @param parent_db_name Database the table referred to is in.  This can be null to match all    *                       databases.    * @param parent_tbl_name Table that is referred to.  This can be null to match all tables.    * @param foreign_db_name Database the table with the foreign key is in.    * @param foreign_tbl_name Table with the foreign key.    * @return List of all matching foreign key columns.  Note that if more than one foreign key    * matches the arguments the results here will be all mixed together into a single list.    * @throws MetaException error access the RDBMS.    */
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeys
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|parent_db_name
parameter_list|,
name|String
name|parent_tbl_name
parameter_list|,
name|String
name|foreign_db_name
parameter_list|,
name|String
name|foreign_tbl_name
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get unique constraints associated with a table.    * @param catName catalog name.    * @param db_name database name.    * @param tbl_name table name.    * @return list of unique constraints    * @throws MetaException error access the RDBMS.    */
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getUniqueConstraints
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get not null constraints on a table.    * @param catName catalog name.    * @param db_name database name.    * @param tbl_name table name.    * @return list of not null constraints    * @throws MetaException error accessing the RDBMS.    */
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getNotNullConstraints
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get default values for columns in a table.    * @param catName catalog name    * @param db_name database name    * @param tbl_name table name    * @return list of default values defined on the table.    * @throws MetaException error accessing the RDBMS    */
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|getDefaultConstraints
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get check constraints for columns in a table.    * @param catName catalog name.    * @param db_name database name    * @param tbl_name table name    * @return ccheck constraints for this table    * @throws MetaException error accessing the RDBMS    */
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|getCheckConstraints
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Create a table with constraints    * @param tbl table definition    * @param primaryKeys primary key definition, or null    * @param foreignKeys foreign key definition, or null    * @param uniqueConstraints unique constraints definition, or null    * @param notNullConstraints not null constraints definition, or null    * @param defaultConstraints default values definition, or null    * @return list of constraint names    * @throws InvalidObjectException one of the provided objects is malformed.    * @throws MetaException error accessing the RDBMS    */
name|List
argument_list|<
name|String
argument_list|>
name|createTableWithConstraints
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|,
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
parameter_list|,
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
parameter_list|,
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|defaultConstraints
parameter_list|,
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|checkConstraints
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Drop a constraint, any constraint.  I have no idea why add and get each have separate    * methods for each constraint type but drop has only one.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param constraintName name of the constraint    * @throws NoSuchObjectException no constraint of this name exists    */
specifier|default
name|void
name|dropConstraint
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|constraintName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|dropConstraint
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|constraintName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drop a constraint, any constraint.  I have no idea why add and get each have separate    * methods for each constraint type but drop has only one.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param constraintName name of the constraint    * @param missingOk if true, it is not an error if there is no constraint of this name.  If    *                  false and there is no constraint of this name an exception will be thrown.    * @throws NoSuchObjectException no constraint of this name exists and missingOk = false    */
name|void
name|dropConstraint
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|constraintName
parameter_list|,
name|boolean
name|missingOk
parameter_list|)
throws|throws
name|NoSuchObjectException
function_decl|;
comment|/**    * Add a primary key to a table.    * @param pks Columns in the primary key.    * @return the name of the constraint, as a list of strings.    * @throws InvalidObjectException The SQLPrimaryKeys list is malformed    * @throws MetaException error accessing the RDMBS    */
name|List
argument_list|<
name|String
argument_list|>
name|addPrimaryKeys
parameter_list|(
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Add a foreign key to a table.    * @param fks foreign key specification    * @return foreign key name.    * @throws InvalidObjectException the specification is malformed.    * @throws MetaException error accessing the RDBMS.    */
name|List
argument_list|<
name|String
argument_list|>
name|addForeignKeys
parameter_list|(
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Add unique constraints to a table.    * @param uks unique constraints specification    * @return unique constraint names.    * @throws InvalidObjectException the specification is malformed.    * @throws MetaException error accessing the RDBMS.    */
name|List
argument_list|<
name|String
argument_list|>
name|addUniqueConstraints
parameter_list|(
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Add not null constraints to a table.    * @param nns not null constraint specifications    * @return constraint names.    * @throws InvalidObjectException the specification is malformed.    * @throws MetaException error accessing the RDBMS.    */
name|List
argument_list|<
name|String
argument_list|>
name|addNotNullConstraints
parameter_list|(
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|nns
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Add default values to a table definition    * @param dv list of default values    * @return constraint names    * @throws InvalidObjectException the specification is malformed.    * @throws MetaException error accessing the RDBMS.    */
name|List
argument_list|<
name|String
argument_list|>
name|addDefaultConstraints
parameter_list|(
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|dv
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Add check constraints to a table    * @param cc check constraints to add    * @return list of constraint names    * @throws InvalidObjectException the specification is malformed    * @throws MetaException error accessing the RDBMS    */
name|List
argument_list|<
name|String
argument_list|>
name|addCheckConstraints
parameter_list|(
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|cc
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Gets the unique id of the backing datastore for the metadata    * @return    * @throws MetaException    */
name|String
name|getMetastoreDbUuid
parameter_list|()
throws|throws
name|MetaException
function_decl|;
name|void
name|createResourcePlan
parameter_list|(
name|WMResourcePlan
name|resourcePlan
parameter_list|,
name|String
name|copyFrom
parameter_list|,
name|int
name|defaultPoolSize
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
function_decl|;
name|WMFullResourcePlan
name|getResourcePlan
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
name|List
argument_list|<
name|WMResourcePlan
argument_list|>
name|getAllResourcePlans
parameter_list|()
throws|throws
name|MetaException
function_decl|;
name|WMFullResourcePlan
name|alterResourcePlan
parameter_list|(
name|String
name|name
parameter_list|,
name|WMNullableResourcePlan
name|resourcePlan
parameter_list|,
name|boolean
name|canActivateDisabled
parameter_list|,
name|boolean
name|canDeactivate
parameter_list|,
name|boolean
name|isReplace
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
function_decl|;
name|WMFullResourcePlan
name|getActiveResourcePlan
parameter_list|()
throws|throws
name|MetaException
function_decl|;
name|WMValidateResourcePlanResponse
name|validateResourcePlan
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
function_decl|;
name|void
name|dropResourcePlan
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
name|void
name|createWMTrigger
parameter_list|(
name|WMTrigger
name|trigger
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
function_decl|;
name|void
name|alterWMTrigger
parameter_list|(
name|WMTrigger
name|trigger
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
function_decl|;
name|void
name|dropWMTrigger
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
function_decl|;
name|List
argument_list|<
name|WMTrigger
argument_list|>
name|getTriggersForResourcePlan
parameter_list|(
name|String
name|resourcePlanName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
name|void
name|createPool
parameter_list|(
name|WMPool
name|pool
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
function_decl|;
name|void
name|alterPool
parameter_list|(
name|WMNullablePool
name|pool
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
function_decl|;
name|void
name|dropWMPool
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
function_decl|;
name|void
name|createOrUpdateWMMapping
parameter_list|(
name|WMMapping
name|mapping
parameter_list|,
name|boolean
name|update
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
function_decl|;
name|void
name|dropWMMapping
parameter_list|(
name|WMMapping
name|mapping
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
function_decl|;
name|void
name|createWMTriggerToPoolMapping
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
function_decl|;
name|void
name|dropWMTriggerToPoolMapping
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
function_decl|;
comment|/**    * Create a new ISchema.    * @param schema schema to create    * @throws AlreadyExistsException there's already a schema with this name    * @throws MetaException general database exception    */
name|void
name|createISchema
parameter_list|(
name|ISchema
name|schema
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Alter an existing ISchema.  This assumes the caller has already checked that such a schema    * exists.    * @param schemaName name of the schema    * @param newSchema new schema object    * @throws NoSuchObjectException no function with this name exists    * @throws MetaException general database exception    */
name|void
name|alterISchema
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|,
name|ISchema
name|newSchema
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Get an ISchema by name.    * @param schemaName schema descriptor    * @return ISchema    * @throws MetaException general database exception    */
name|ISchema
name|getISchema
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Drop an ISchema.  This does not check whether there are valid versions of the schema in    * existence, it assumes the caller has already done that.    * @param schemaName schema descriptor    * @throws NoSuchObjectException no schema of this name exists    * @throws MetaException general database exception    */
name|void
name|dropISchema
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Create a new version of an existing schema.    * @param schemaVersion version number    * @throws AlreadyExistsException a version of the schema with the same version number already    * exists.    * @throws InvalidObjectException the passed in SchemaVersion object has problems.    * @throws NoSuchObjectException no schema with the passed in name exists.    * @throws MetaException general database exception    */
name|void
name|addSchemaVersion
parameter_list|(
name|SchemaVersion
name|schemaVersion
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Alter a schema version.  Note that the Thrift interface only supports changing the serde    * mapping and states.  This method does not guarantee it will check anymore than that.  This    * method does not understand the state transitions and just assumes that the new state it is    * passed is reasonable.    * @param version version descriptor for the schema    * @param newVersion altered SchemaVersion    * @throws NoSuchObjectException no such version of the named schema exists    * @throws MetaException general database exception    */
name|void
name|alterSchemaVersion
parameter_list|(
name|SchemaVersionDescriptor
name|version
parameter_list|,
name|SchemaVersion
name|newVersion
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Get a specific schema version.    * @param version version descriptor for the schema    * @return the SchemaVersion    * @throws MetaException general database exception    */
name|SchemaVersion
name|getSchemaVersion
parameter_list|(
name|SchemaVersionDescriptor
name|version
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get the latest version of a schema.    * @param schemaName name of the schema    * @return latest version of the schema    * @throws MetaException general database exception    */
name|SchemaVersion
name|getLatestSchemaVersion
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Get all of the versions of a schema    * @param schemaName name of the schema    * @return all versions of the schema    * @throws MetaException general database exception    */
name|List
argument_list|<
name|SchemaVersion
argument_list|>
name|getAllSchemaVersion
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Find all SchemaVersion objects that match a query.  The query will select all SchemaVersions    * that are equal to all of the non-null passed in arguments.  That is, if arguments    * colName='name', colNamespace=null, type='string' are passed in, then all schemas that have    * a column with colName 'name' and type 'string' will be returned.    * @param colName column name.  Null is ok, which will cause this field to not be used in the    *                query.    * @param colNamespace column namespace.   Null is ok, which will cause this field to not be    *                     used in the query.    * @param type column type.   Null is ok, which will cause this field to not be used in the    *             query.    * @return List of all SchemaVersions that match.  Note that there is no expectation that these    * SchemaVersions derive from the same ISchema.  The list will be empty if there are no    * matching SchemaVersions.    * @throws MetaException general database exception    */
name|List
argument_list|<
name|SchemaVersion
argument_list|>
name|getSchemaVersionsByColumns
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|colNamespace
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Drop a version of the schema.    * @param version version descriptor for the schema    * @throws NoSuchObjectException no such version of the named schema exists    * @throws MetaException general database exception    */
name|void
name|dropSchemaVersion
parameter_list|(
name|SchemaVersionDescriptor
name|version
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Get serde information    * @param serDeName name of the SerDe    * @return the SerDe, or null if there is no such serde    * @throws NoSuchObjectException no serde with this name exists    * @throws MetaException general database exception    */
name|SerDeInfo
name|getSerDeInfo
parameter_list|(
name|String
name|serDeName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
function_decl|;
comment|/**    * Add a serde    * @param serde serde to add    * @throws AlreadyExistsException a serde of this name already exists    * @throws MetaException general database exception    */
name|void
name|addSerde
parameter_list|(
name|SerDeInfo
name|serde
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
function_decl|;
comment|/** Adds a RuntimeStat for persistence. */
name|void
name|addRuntimeStat
parameter_list|(
name|RuntimeStat
name|stat
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/** Reads runtime statistic entries. */
name|List
argument_list|<
name|RuntimeStat
argument_list|>
name|getRuntimeStats
parameter_list|(
name|int
name|maxEntries
parameter_list|,
name|int
name|maxCreateTime
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/** Removes outdated statistics. */
name|int
name|deleteRuntimeStats
parameter_list|(
name|int
name|maxRetainSecs
parameter_list|)
throws|throws
name|MetaException
function_decl|;
name|List
argument_list|<
name|TableName
argument_list|>
name|getTableNamesWithStats
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
name|List
argument_list|<
name|TableName
argument_list|>
name|getAllTableNamesForStats
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPartitionColsWithStats
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Remove older notification events.    * @param olderThan Remove any events older than a given number of seconds    */
name|void
name|cleanWriteNotificationEvents
parameter_list|(
name|int
name|olderThan
parameter_list|)
function_decl|;
comment|/**    * Get all write events for a specific transaction .    * @param txnId get all the events done by this transaction    * @param dbName the name of db for which dump is being taken    * @param tableName the name of the table for which the dump is being taken    */
name|List
argument_list|<
name|WriteEventInfo
argument_list|>
name|getAllWriteEventInfo
parameter_list|(
name|long
name|txnId
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
function_decl|;
block|}
end_interface

end_unit

