begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|schematool
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|normalizeIdentifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Print Hive version and schema version.  */
end_comment

begin_class
class|class
name|SchemaToolTaskMoveDatabase
extends|extends
name|SchemaToolTask
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SchemaToolTaskMoveDatabase
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|fromCatName
decl_stmt|;
specifier|private
name|String
name|toCatName
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
annotation|@
name|Override
name|void
name|setCommandLineArguments
parameter_list|(
name|SchemaToolCommandLine
name|cl
parameter_list|)
block|{
name|fromCatName
operator|=
name|normalizeIdentifier
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"fromCatalog"
argument_list|)
argument_list|)
expr_stmt|;
name|toCatName
operator|=
name|normalizeIdentifier
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"toCatalog"
argument_list|)
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"moveDatabase"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Moving database %s from catalog %s to catalog %s"
argument_list|,
name|dbName
argument_list|,
name|fromCatName
argument_list|,
name|toCatName
argument_list|)
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|schemaTool
operator|.
name|getConnectionToMetastore
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|updateCatalogNameInTable
argument_list|(
name|stmt
argument_list|,
literal|"DBS"
argument_list|,
literal|"CTLG_NAME"
argument_list|,
literal|"NAME"
argument_list|,
name|fromCatName
argument_list|,
name|toCatName
argument_list|,
name|dbName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateCatalogNameInTable
argument_list|(
name|stmt
argument_list|,
literal|"TAB_COL_STATS"
argument_list|,
literal|"CAT_NAME"
argument_list|,
literal|"DB_NAME"
argument_list|,
name|fromCatName
argument_list|,
name|toCatName
argument_list|,
name|dbName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateCatalogNameInTable
argument_list|(
name|stmt
argument_list|,
literal|"PART_COL_STATS"
argument_list|,
literal|"CAT_NAME"
argument_list|,
literal|"DB_NAME"
argument_list|,
name|fromCatName
argument_list|,
name|toCatName
argument_list|,
name|dbName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateCatalogNameInTable
argument_list|(
name|stmt
argument_list|,
literal|"PARTITION_EVENTS"
argument_list|,
literal|"CAT_NAME"
argument_list|,
literal|"DB_NAME"
argument_list|,
name|fromCatName
argument_list|,
name|toCatName
argument_list|,
name|dbName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateCatalogNameInTable
argument_list|(
name|stmt
argument_list|,
literal|"NOTIFICATION_LOG"
argument_list|,
literal|"CAT_NAME"
argument_list|,
literal|"DB_NAME"
argument_list|,
name|fromCatName
argument_list|,
name|toCatName
argument_list|,
name|dbName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to move database"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|conn
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Not really much we can do here.
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to rollback, everything will probably go bad from here."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|UPDATE_CATALOG_NAME_STMT
init|=
literal|"update<q>%s<q> "
operator|+
literal|"   set<q>%s<q> = '%s' "
operator|+
literal|" where<q>%s<q> = '%s' "
operator|+
literal|"   and<q>%s<q> = '%s'"
decl_stmt|;
specifier|private
name|void
name|updateCatalogNameInTable
parameter_list|(
name|Statement
name|stmt
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|catColName
parameter_list|,
name|String
name|dbColName
parameter_list|,
name|String
name|fromCatName
parameter_list|,
name|String
name|toCatName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|boolean
name|zeroUpdatesOk
parameter_list|)
throws|throws
name|HiveMetaException
throws|,
name|SQLException
block|{
name|String
name|update
init|=
name|String
operator|.
name|format
argument_list|(
name|schemaTool
operator|.
name|quote
argument_list|(
name|UPDATE_CATALOG_NAME_STMT
argument_list|)
argument_list|,
name|tableName
argument_list|,
name|catColName
argument_list|,
name|toCatName
argument_list|,
name|catColName
argument_list|,
name|fromCatName
argument_list|,
name|dbColName
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to run "
operator|+
name|update
argument_list|)
expr_stmt|;
name|int
name|numUpdated
init|=
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|numUpdated
operator|!=
literal|1
operator|&&
operator|!
operator|(
name|zeroUpdatesOk
operator|&&
name|numUpdated
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to properly update the "
operator|+
name|tableName
operator|+
literal|" table.  Expected to update 1 row but instead updated "
operator|+
name|numUpdated
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

