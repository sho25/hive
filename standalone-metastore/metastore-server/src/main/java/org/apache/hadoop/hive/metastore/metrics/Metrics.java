begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|ConsoleReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|JmxReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|ScheduledReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Slf4jReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Slf4jReporter
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|jvm
operator|.
name|BufferPoolMetricSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|jvm
operator|.
name|ClassLoadingGaugeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|jvm
operator|.
name|GarbageCollectorMetricSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|jvm
operator|.
name|MemoryUsageGaugeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|jvm
operator|.
name|ThreadStatesGaugeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|joshelser
operator|.
name|dropwizard
operator|.
name|metrics
operator|.
name|hadoop
operator|.
name|HadoopMetrics2Reporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|Metrics
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Metrics
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Metrics
name|self
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|singletonAtomicInteger
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Counter
name|dummyCounter
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MetricRegistry
name|registry
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Reporter
argument_list|>
name|reporters
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ScheduledReporter
argument_list|>
name|scheduledReporters
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|gaugeAtomics
decl_stmt|;
specifier|private
name|boolean
name|hadoopMetricsStarted
decl_stmt|;
specifier|public
specifier|static
specifier|synchronized
name|Metrics
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|self
operator|==
literal|null
condition|)
block|{
name|self
operator|=
operator|new
name|Metrics
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|self
return|;
block|}
specifier|public
specifier|static
name|MetricRegistry
name|getRegistry
parameter_list|()
block|{
if|if
condition|(
name|self
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|self
operator|.
name|registry
return|;
block|}
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|self
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ScheduledReporter
name|reporter
range|:
name|self
operator|.
name|scheduledReporters
control|)
block|{
name|reporter
operator|.
name|stop
argument_list|()
expr_stmt|;
name|reporter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|self
operator|.
name|hadoopMetricsStarted
condition|)
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|self
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Get an existing counter or create a new one if the requested one does not yet exist.  Creation    * is synchronized to assure that only one instance of the counter is created.    * @param name name of the counter    * @return new Counter, or existing one if it already exists.  This will return null if the    * metrics have not been initialized.    */
specifier|public
specifier|static
name|Counter
name|getOrCreateCounter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|self
operator|==
literal|null
condition|)
return|return
name|dummyCounter
return|;
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|counters
init|=
name|self
operator|.
name|registry
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|Counter
name|counter
init|=
name|counters
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|!=
literal|null
condition|)
return|return
name|counter
return|;
comment|// Looks like it doesn't exist.  Lock so that two threads don't create it at once.
synchronized|synchronized
init|(
name|Metrics
operator|.
name|class
init|)
block|{
comment|// Recheck to make sure someone didn't create it while we waited.
name|counters
operator|=
name|self
operator|.
name|registry
operator|.
name|getCounters
argument_list|()
expr_stmt|;
name|counter
operator|=
name|counters
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|!=
literal|null
condition|)
return|return
name|counter
return|;
return|return
name|self
operator|.
name|registry
operator|.
name|counter
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
comment|/**    * Get an existing timer or create a new one if the requested one does not yet exist.  Creation    * is synchronized to assure that only one instance of the counter is created.    * @param name timer name    * @return new Timer, or existing one if it already exists, null if the metrics have not been    * initialized.    */
specifier|public
specifier|static
name|Timer
name|getOrCreateTimer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|self
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Map
argument_list|<
name|String
argument_list|,
name|Timer
argument_list|>
name|timers
init|=
name|self
operator|.
name|registry
operator|.
name|getTimers
argument_list|()
decl_stmt|;
name|Timer
name|timer
init|=
name|timers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|timer
operator|!=
literal|null
condition|)
return|return
name|timer
return|;
synchronized|synchronized
init|(
name|Metrics
operator|.
name|class
init|)
block|{
name|timers
operator|=
name|self
operator|.
name|registry
operator|.
name|getTimers
argument_list|()
expr_stmt|;
name|timer
operator|=
name|timers
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|timer
operator|!=
literal|null
condition|)
return|return
name|timer
return|;
return|return
name|self
operator|.
name|registry
operator|.
name|timer
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
comment|/**    * Get the AtomicInteger behind an existing gauge, or create a new gauge if it does not already    * exist.    * @param name Name of gauge.  This should come from MetricConstants    * @return AtomicInteger underlying this gauge.    */
specifier|public
specifier|static
name|AtomicInteger
name|getOrCreateGauge
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// We return a garbage value if metrics haven't been initialized so that callers don't have
comment|// to keep checking if the resulting value is null.
if|if
condition|(
name|self
operator|==
literal|null
condition|)
return|return
name|singletonAtomicInteger
return|;
name|AtomicInteger
name|ai
init|=
name|self
operator|.
name|gaugeAtomics
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ai
operator|!=
literal|null
condition|)
return|return
name|ai
return|;
synchronized|synchronized
init|(
name|Metrics
operator|.
name|class
init|)
block|{
name|ai
operator|=
name|self
operator|.
name|gaugeAtomics
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|ai
operator|!=
literal|null
condition|)
return|return
name|ai
return|;
name|ai
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
specifier|final
name|AtomicInteger
name|forGauge
init|=
name|ai
decl_stmt|;
name|self
operator|.
name|gaugeAtomics
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ai
argument_list|)
expr_stmt|;
name|self
operator|.
name|registry
operator|.
name|register
argument_list|(
name|name
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|forGauge
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|ai
return|;
block|}
block|}
specifier|public
specifier|static
name|Counter
name|getOpenConnectionsCounter
parameter_list|()
block|{
return|return
name|getOrCreateCounter
argument_list|(
name|MetricsConstants
operator|.
name|OPEN_CONNECTIONS
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|List
argument_list|<
name|Reporter
argument_list|>
name|getReporters
parameter_list|()
block|{
return|return
name|self
operator|.
name|reporters
return|;
block|}
specifier|private
name|Metrics
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|registry
operator|=
operator|new
name|MetricRegistry
argument_list|()
expr_stmt|;
comment|// this is the same logic as implemented in CodahaleMetrics in hive-common package,
comment|// but standalone-metastore project doesn't depend on that
name|registerAll
argument_list|(
literal|"gc"
argument_list|,
operator|new
name|GarbageCollectorMetricSet
argument_list|()
argument_list|)
expr_stmt|;
name|registerAll
argument_list|(
literal|"buffers"
argument_list|,
operator|new
name|BufferPoolMetricSet
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|registerAll
argument_list|(
literal|"memory"
argument_list|,
operator|new
name|MemoryUsageGaugeSet
argument_list|()
argument_list|)
expr_stmt|;
name|registerAll
argument_list|(
literal|"threads"
argument_list|,
operator|new
name|ThreadStatesGaugeSet
argument_list|()
argument_list|)
expr_stmt|;
name|registerAll
argument_list|(
literal|"classLoading"
argument_list|,
operator|new
name|ClassLoadingGaugeSet
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * This is little complicated.  First we look for our own config values on this.  If those      * aren't set we use the Hive ones.  But Hive also has multiple ways to do this, so we need to      * look in both of theirs as well.  We can't use theirs directly because they wrap the      * codahale reporters in their own and we do not.      */
comment|// Check our config value first.  I'm explicitly avoiding getting the default value for now,
comment|// as I don't want our default to override a Hive set value.
name|String
name|reportersToStart
init|=
name|conf
operator|.
name|get
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METRICS_REPORTERS
operator|.
name|getVarname
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reportersToStart
operator|==
literal|null
condition|)
block|{
comment|// Now look in the current Hive config value.  Again, avoiding getting defaults
name|reportersToStart
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_CODAHALE_METRICS_REPORTER_CLASSES
operator|.
name|getHiveName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reportersToStart
operator|==
literal|null
condition|)
block|{
comment|// Last chance, look in the old Hive config value.  Still avoiding defaults.
name|reportersToStart
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_METRICS_REPORTER
operator|.
name|getHiveName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reportersToStart
operator|==
literal|null
condition|)
block|{
comment|// Alright fine, we'll use our defaults
name|reportersToStart
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METRICS_REPORTERS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|reporters
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|scheduledReporters
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|reportersToStart
operator|!=
literal|null
operator|&&
name|reportersToStart
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|reporterNames
init|=
name|reportersToStart
operator|.
name|toLowerCase
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|reporterName
range|:
name|reporterNames
control|)
block|{
if|if
condition|(
name|reporterName
operator|.
name|equals
argument_list|(
literal|"console"
argument_list|)
operator|||
name|reporterName
operator|.
name|endsWith
argument_list|(
literal|"consolemetricsreporter"
argument_list|)
condition|)
block|{
name|ConsoleReporter
name|reporter
init|=
name|ConsoleReporter
operator|.
name|forRegistry
argument_list|(
name|registry
argument_list|)
operator|.
name|convertRatesTo
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|convertDurationsTo
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|reporter
operator|.
name|start
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|reporters
operator|.
name|add
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
name|scheduledReporters
operator|.
name|add
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reporterName
operator|.
name|equals
argument_list|(
literal|"jmx"
argument_list|)
operator|||
name|reporterName
operator|.
name|endsWith
argument_list|(
literal|"jmxmetricsreporter"
argument_list|)
condition|)
block|{
name|JmxReporter
name|reporter
init|=
name|JmxReporter
operator|.
name|forRegistry
argument_list|(
name|registry
argument_list|)
operator|.
name|convertRatesTo
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|convertDurationsTo
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|reporter
operator|.
name|start
argument_list|()
expr_stmt|;
name|reporters
operator|.
name|add
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reporterName
operator|.
name|startsWith
argument_list|(
literal|"json"
argument_list|)
operator|||
name|reporterName
operator|.
name|endsWith
argument_list|(
literal|"jsonfilemetricsreporter"
argument_list|)
condition|)
block|{
comment|// We have to initialize the thread pool before we start this one, as it uses it
name|JsonReporter
name|reporter
init|=
name|JsonReporter
operator|.
name|forRegistry
argument_list|(
name|registry
argument_list|,
name|conf
argument_list|)
operator|.
name|convertRatesTo
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|convertDurationsTo
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|reporter
operator|.
name|start
argument_list|(
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METRICS_JSON_FILE_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|reporters
operator|.
name|add
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
name|scheduledReporters
operator|.
name|add
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reporterName
operator|.
name|startsWith
argument_list|(
literal|"hadoop"
argument_list|)
operator|||
name|reporterName
operator|.
name|endsWith
argument_list|(
literal|"metrics2reporter"
argument_list|)
condition|)
block|{
name|String
name|applicationName
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METRICS_HADOOP2_COMPONENT_NAME
argument_list|)
decl_stmt|;
name|HadoopMetrics2Reporter
name|reporter
init|=
name|HadoopMetrics2Reporter
operator|.
name|forRegistry
argument_list|(
name|registry
argument_list|)
operator|.
name|convertRatesTo
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|convertDurationsTo
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
name|applicationName
argument_list|)
argument_list|,
name|applicationName
argument_list|,
literal|"Runtime metadata"
operator|+
literal|" catalog"
argument_list|,
literal|"General"
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|start
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|reporters
operator|.
name|add
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
name|scheduledReporters
operator|.
name|add
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
name|hadoopMetricsStarted
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reporterName
operator|.
name|startsWith
argument_list|(
literal|"slf4j"
argument_list|)
condition|)
block|{
specifier|final
name|String
name|level
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METRICS_SLF4J_LOG_LEVEL
argument_list|)
decl_stmt|;
specifier|final
name|Slf4jReporter
name|reporter
init|=
name|Slf4jReporter
operator|.
name|forRegistry
argument_list|(
name|registry
argument_list|)
operator|.
name|outputTo
argument_list|(
name|LOGGER
argument_list|)
operator|.
name|convertRatesTo
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|convertDurationsTo
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|withLoggingLevel
argument_list|(
name|LoggingLevel
operator|.
name|valueOf
argument_list|(
name|level
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|reporter
operator|.
name|start
argument_list|(
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METRICS_SLF4J_LOG_FREQUENCY_MINS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|reporters
operator|.
name|add
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
name|scheduledReporters
operator|.
name|add
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown metric type "
operator|+
name|reporterName
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"No metrics reporters configured."
argument_list|)
expr_stmt|;
block|}
comment|// Create map for tracking gauges
name|gaugeAtomics
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|registerAll
parameter_list|(
name|String
name|prefix
parameter_list|,
name|MetricSet
name|metricSet
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|entry
range|:
name|metricSet
operator|.
name|getMetrics
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|MetricSet
condition|)
block|{
name|registerAll
argument_list|(
name|prefix
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|MetricSet
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|registry
operator|.
name|register
argument_list|(
name|prefix
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

