begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|metatool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class provides Hive admins a tool. The following can be done with it:  * - list the file system root  * - execute JDOQL against the metastore using DataNucleus  * - perform HA name node upgrade  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HiveMetaTool
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveMetaTool
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|HiveMetaTool
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"HiveMetaTool should not be instantiated"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|HiveMetaToolCommandLine
name|cl
init|=
name|HiveMetaToolCommandLine
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|ObjectStore
name|objectStore
init|=
operator|new
name|ObjectStore
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|setConf
argument_list|(
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
argument_list|)
expr_stmt|;
name|MetaToolTask
name|task
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|cl
operator|.
name|isListFSRoot
argument_list|()
condition|)
block|{
name|task
operator|=
operator|new
name|MetaToolTaskListFSRoot
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|isExecuteJDOQL
argument_list|()
condition|)
block|{
name|task
operator|=
operator|new
name|MetaToolTaskExecuteJDOQLQuery
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|isUpdateLocation
argument_list|()
condition|)
block|{
name|task
operator|=
operator|new
name|MetaToolTaskUpdateLocation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No task was specified!"
argument_list|)
throw|;
block|}
name|task
operator|.
name|setObjectStore
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|task
operator|.
name|setCommandLine
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|task
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Exception occured"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|objectStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

