begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|schematool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaException
import|;
end_import

begin_comment
comment|/** Generate and run script to create logs table in the SYS schema at the specified location. */
end_comment

begin_class
specifier|public
class|class
name|SchemaToolTaskCreateLogsTable
extends|extends
name|SchemaToolTask
block|{
comment|/** Path of the warehouse/compute logs directory. */
specifier|private
name|String
name|logPath
decl_stmt|;
specifier|private
name|String
name|retentionPeriod
decl_stmt|;
annotation|@
name|Override
name|void
name|setCommandLineArguments
parameter_list|(
name|SchemaToolCommandLine
name|cl
parameter_list|)
block|{
name|logPath
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"createLogsTable"
argument_list|)
expr_stmt|;
name|retentionPeriod
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"retentionPeriod"
argument_list|)
operator|==
literal|null
condition|?
literal|"7d"
else|:
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"retentionPeriod"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|schemaTool
operator|.
name|testConnectionToMetastore
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting creation of logs table"
argument_list|)
expr_stmt|;
name|File
name|scriptFile
init|=
name|generateLogsTableScript
argument_list|()
decl_stmt|;
name|String
name|initScriptDir
init|=
name|scriptFile
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|initScriptFile
init|=
name|scriptFile
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Initialization script "
operator|+
name|initScriptFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|schemaTool
operator|.
name|isDryRun
argument_list|()
condition|)
block|{
name|schemaTool
operator|.
name|execSql
argument_list|(
name|initScriptDir
argument_list|,
name|initScriptFile
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Initialization script completed"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Logs table creation FAILED!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|File
name|generateLogsTableScript
parameter_list|()
throws|throws
name|HiveMetaException
block|{
try|try
block|{
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"schematool"
argument_list|,
literal|".sql"
argument_list|)
decl_stmt|;
name|tmpFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FileWriter
name|fstream
init|=
operator|new
name|FileWriter
argument_list|(
name|tmpFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|out
init|=
operator|new
name|BufferedWriter
argument_list|(
name|fstream
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"USE SYS;"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"CREATE EXTERNAL TABLE logs"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|" (facility STRING, severity STRING,"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|" version STRING, ts TIMESTAMP, hostname STRING, app_name STRING,"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|" proc_id STRING, msg_id STRING, structured_data map<STRING,STRING>, msg BINARY,"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|" unmatched BINARY)"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|" PARTITIONED BY (dt DATE, ns STRING, app STRING)"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|" STORED BY 'org.apache.hadoop.hive.ql.log.syslog.SyslogStorageHandler'"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|" LOCATION '"
operator|+
name|logPath
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|" TBLPROPERTIES (\"partition.retention.period\"=\""
operator|+
name|retentionPeriod
operator|+
literal|"\");"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tmpFile
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Error generating logs table script"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

