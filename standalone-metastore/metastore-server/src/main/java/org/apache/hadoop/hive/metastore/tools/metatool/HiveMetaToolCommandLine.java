begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|metatool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|TerminalFactory
import|;
end_import

begin_class
class|class
name|HiveMetaToolCommandLine
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveMetaToolCommandLine
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|LIST_FS_ROOT
init|=
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"print the current FS root locations"
argument_list|)
operator|.
name|create
argument_list|(
literal|"listFSRoot"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|EXECUTE_JDOQL
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"query-string"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"execute the given JDOQL query"
argument_list|)
operator|.
name|create
argument_list|(
literal|"executeJDOQL"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|UPDATE_LOCATION
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"new-loc> "
operator|+
literal|"<old-loc"
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Update FS root location in the metastore to new location.Both new-loc and old-loc should "
operator|+
literal|"be valid URIs with valid host names and schemes. When run with the dryRun option changes are displayed "
operator|+
literal|"but are not persisted. When run with the serdepropKey/tablePropKey option updateLocation looks for the "
operator|+
literal|"serde-prop-key/table-prop-key that is specified and updates its value if found."
argument_list|)
operator|.
name|create
argument_list|(
literal|"updateLocation"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|DRY_RUN
init|=
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"Perform a dry run of updateLocation changes.When run with the dryRun option updateLocation "
operator|+
literal|"changes are displayed but not persisted. dryRun is valid only with the updateLocation option."
argument_list|)
operator|.
name|create
argument_list|(
literal|"dryRun"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|SERDE_PROP_KEY
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"serde-prop-key"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Specify the key for serde property to be updated. serdePropKey option is valid only with "
operator|+
literal|"updateLocation option."
argument_list|)
operator|.
name|create
argument_list|(
literal|"serdePropKey"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|TABLE_PROP_KEY
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"table-prop-key"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Specify the key for table property to be updated. tablePropKey option is valid only with "
operator|+
literal|"updateLocation option."
argument_list|)
operator|.
name|create
argument_list|(
literal|"tablePropKey"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|HELP
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Print help information"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"help"
argument_list|)
operator|.
name|create
argument_list|(
literal|'h'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Options
name|OPTIONS
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
static|static
block|{
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|LIST_FS_ROOT
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|EXECUTE_JDOQL
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|UPDATE_LOCATION
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|DRY_RUN
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|SERDE_PROP_KEY
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|TABLE_PROP_KEY
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|HELP
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|listFSRoot
decl_stmt|;
specifier|private
name|String
name|jdoqlQuery
decl_stmt|;
specifier|private
name|String
index|[]
name|updateLocationParams
decl_stmt|;
specifier|private
name|boolean
name|dryRun
decl_stmt|;
specifier|private
name|String
name|serdePropKey
decl_stmt|;
specifier|private
name|String
name|tablePropKey
decl_stmt|;
specifier|private
name|boolean
name|help
decl_stmt|;
specifier|public
specifier|static
name|HiveMetaToolCommandLine
name|parseArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|HiveMetaToolCommandLine
name|cl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cl
operator|=
operator|new
name|HiveMetaToolCommandLine
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Parsing the command line arguments failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|isHelp
argument_list|()
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|cl
return|;
block|}
name|HiveMetaToolCommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Hive Meta Tool invoked with arguments = {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|parseCommandLine
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|printArguments
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|parseCommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|CommandLine
name|cl
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|OPTIONS
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|listFSRoot
operator|=
name|cl
operator|.
name|hasOption
argument_list|(
name|LIST_FS_ROOT
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|jdoqlQuery
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
name|EXECUTE_JDOQL
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|updateLocationParams
operator|=
name|cl
operator|.
name|getOptionValues
argument_list|(
name|UPDATE_LOCATION
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|dryRun
operator|=
name|cl
operator|.
name|hasOption
argument_list|(
name|DRY_RUN
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|serdePropKey
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
name|SERDE_PROP_KEY
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|tablePropKey
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
name|TABLE_PROP_KEY
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|help
operator|=
name|cl
operator|.
name|hasOption
argument_list|(
name|HELP
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|commandCount
init|=
operator|(
name|isListFSRoot
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|isExecuteJDOQL
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|isUpdateLocation
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|commandCount
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"exectly one of -listFSRoot, -executeJDOQL, -updateLocation must be set"
argument_list|)
throw|;
block|}
if|if
condition|(
name|updateLocationParams
operator|!=
literal|null
operator|&&
name|updateLocationParams
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"HiveMetaTool:updateLocation takes in 2 arguments but was passed "
operator|+
name|updateLocationParams
operator|.
name|length
operator|+
literal|" arguments"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|dryRun
operator|||
name|serdePropKey
operator|!=
literal|null
operator|||
name|tablePropKey
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|isUpdateLocation
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"-dryRun, -serdePropKey, -tablePropKey may be used only for the "
operator|+
literal|"-updateLocation command"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|HelpFormatter
name|hf
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|width
init|=
name|hf
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|jlineWidth
init|=
name|TerminalFactory
operator|.
name|get
argument_list|()
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|width
operator|=
name|Math
operator|.
name|min
argument_list|(
literal|160
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|jlineWidth
argument_list|,
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|hf
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
name|hf
operator|.
name|printHelp
argument_list|(
literal|"metatool"
argument_list|,
name|OPTIONS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printArguments
parameter_list|()
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Hive Meta Tool is running with the following parsed arguments: \n"
operator|+
literal|"\tlistFSRoot    : "
operator|+
name|listFSRoot
operator|+
literal|"\n"
operator|+
literal|"\tjdoqlQuery    : "
operator|+
name|jdoqlQuery
operator|+
literal|"\n"
operator|+
literal|"\tupdateLocation: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|updateLocationParams
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"\tdryRun        : "
operator|+
name|dryRun
operator|+
literal|"\n"
operator|+
literal|"\tserdePropKey  : "
operator|+
name|serdePropKey
operator|+
literal|"\n"
operator|+
literal|"\ttablePropKey  : "
operator|+
name|tablePropKey
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isListFSRoot
parameter_list|()
block|{
return|return
name|listFSRoot
return|;
block|}
name|boolean
name|isExecuteJDOQL
parameter_list|()
block|{
return|return
name|jdoqlQuery
operator|!=
literal|null
return|;
block|}
name|String
name|getJDOQLQuery
parameter_list|()
block|{
return|return
name|jdoqlQuery
return|;
block|}
name|boolean
name|isUpdateLocation
parameter_list|()
block|{
return|return
name|updateLocationParams
operator|!=
literal|null
return|;
block|}
name|String
index|[]
name|getUpddateLocationParams
parameter_list|()
block|{
return|return
name|updateLocationParams
return|;
block|}
name|boolean
name|isDryRun
parameter_list|()
block|{
return|return
name|dryRun
return|;
block|}
name|String
name|getSerdePropKey
parameter_list|()
block|{
return|return
name|serdePropKey
return|;
block|}
name|String
name|getTablePropKey
parameter_list|()
block|{
return|return
name|tablePropKey
return|;
block|}
specifier|private
name|boolean
name|isHelp
parameter_list|()
block|{
return|return
name|help
return|;
block|}
block|}
end_class

end_unit

