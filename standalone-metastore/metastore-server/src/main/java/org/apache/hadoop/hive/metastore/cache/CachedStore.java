begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EmptyStackException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|exception
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|DatabaseName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Deadline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|FileMetadataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartFilterExprUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartitionExpressionProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|RawStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveAlterHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
operator|.
name|SharedCache
operator|.
name|StatsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|aggr
operator|.
name|ColumnStatsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|aggr
operator|.
name|ColumnStatsAggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AlterDatabaseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|CreateDatabaseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|CreateTableMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|DropTableMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AlterTableMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AddPartitionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AlterPartitionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|DropPartitionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|UpdateTableColumnStatMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|DeleteTableColumnStatMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|UpdatePartitionColumnStatMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|DeletePartitionColumnStatMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreServerUtils
operator|.
name|ColStatsObjWithSourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|getDefaultCatalog
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|normalizeIdentifier
import|;
end_import

begin_comment
comment|// TODO filter->expr
end_comment

begin_comment
comment|// TODO functionCache
end_comment

begin_comment
comment|// TODO constraintCache
end_comment

begin_comment
comment|// TODO need sd nested copy?
end_comment

begin_comment
comment|// TODO String intern
end_comment

begin_comment
comment|// TODO monitor event queue
end_comment

begin_comment
comment|// TODO initial load slow?
end_comment

begin_comment
comment|// TODO size estimation
end_comment

begin_class
specifier|public
class|class
name|CachedStore
implements|implements
name|RawStore
implements|,
name|Configurable
block|{
specifier|private
specifier|static
name|ScheduledExecutorService
name|cacheUpdateMaster
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|Pattern
argument_list|>
name|whitelistPatterns
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|Pattern
argument_list|>
name|blacklistPatterns
init|=
literal|null
decl_stmt|;
comment|// Default value set to 100 milliseconds for test purpose
specifier|private
specifier|static
name|long
name|DEFAULT_CACHE_REFRESH_PERIOD
init|=
literal|100
decl_stmt|;
comment|// Time after which metastore cache is updated from metastore DB by the background update thread
specifier|private
specifier|static
name|long
name|cacheRefreshPeriodMS
init|=
name|DEFAULT_CACHE_REFRESH_PERIOD
decl_stmt|;
specifier|private
specifier|static
name|int
name|MAX_RETRIES
init|=
literal|10
decl_stmt|;
comment|// This is set to true only after prewarm is complete
specifier|private
specifier|static
name|AtomicBoolean
name|isCachePrewarmed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// This is set to true only if we were able to cache all the metadata.
comment|// We may not be able to cache all metadata if we hit CACHED_RAW_STORE_MAX_CACHE_MEMORY limit.
specifier|private
specifier|static
name|AtomicBoolean
name|isCachedAllMetadata
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|TablesPendingPrewarm
name|tblsPendingPrewarm
init|=
operator|new
name|TablesPendingPrewarm
argument_list|()
decl_stmt|;
specifier|private
name|RawStore
name|rawStore
init|=
literal|null
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|areTxnStatsSupported
decl_stmt|;
specifier|private
name|PartitionExpressionProxy
name|expressionProxy
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|SharedCache
name|sharedCache
init|=
operator|new
name|SharedCache
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|canUseEvents
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|long
name|lastEventId
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CachedStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConfInternal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|initBlackListWhiteList
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|initSharedCache
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|startCacheUpdateService
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Similar to setConf but used from within the tests    * This does start the background thread for prewarm and update    * @param conf    */
name|void
name|setConfForTest
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConfInternal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|initBlackListWhiteList
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|initSharedCache
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
specifier|private
specifier|static
name|void
name|triggerUpdateUsingEvent
parameter_list|(
name|RawStore
name|rawStore
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isCachePrewarmed
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"cache update should be done only after prewarm"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cache update should be done only after prewarm"
argument_list|)
throw|;
block|}
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|preEventId
init|=
name|lastEventId
decl_stmt|;
try|try
block|{
name|lastEventId
operator|=
name|updateUsingNotificationEvents
argument_list|(
name|rawStore
argument_list|,
name|lastEventId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|" cache update failed for start event id "
operator|+
name|lastEventId
operator|+
literal|" with error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|long
name|endTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time taken in updateUsingNotificationEvents for num events : "
operator|+
operator|(
name|lastEventId
operator|-
name|preEventId
operator|)
operator|+
literal|" = "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|/
literal|1000000
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|synchronized
specifier|private
specifier|static
name|void
name|triggerPreWarm
parameter_list|(
name|RawStore
name|rawStore
parameter_list|)
block|{
name|lastEventId
operator|=
name|rawStore
operator|.
name|getCurrentNotificationEventId
argument_list|()
operator|.
name|getEventId
argument_list|()
expr_stmt|;
name|prewarm
argument_list|(
name|rawStore
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setConfInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_CACHE_CAN_USE_EVENT
argument_list|)
condition|)
block|{
name|canUseEvents
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|canUseEvents
operator|=
literal|false
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"canUseEvents is set to "
operator|+
name|canUseEvents
operator|+
literal|" in cached Store"
argument_list|)
expr_stmt|;
name|String
name|rawStoreClassName
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CACHED_RAW_STORE_IMPL
argument_list|,
name|ObjectStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rawStore
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|rawStore
operator|=
operator|(
name|JavaUtils
operator|.
name|getClass
argument_list|(
name|rawStoreClassName
argument_list|,
name|RawStore
operator|.
name|class
argument_list|)
operator|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot instantiate "
operator|+
name|rawStoreClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|rawStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Configuration
name|oldConf
init|=
name|this
operator|.
name|conf
decl_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|areTxnStatsSupported
operator|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_TXN_STATS_ENABLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|expressionProxy
operator|!=
literal|null
operator|&&
name|conf
operator|!=
name|oldConf
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected setConf when we were already configured"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expressionProxy
operator|=
name|PartFilterExprUtil
operator|.
name|createExpressionProxy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initSharedCache
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|maxSharedCacheSizeInBytes
init|=
name|MetastoreConf
operator|.
name|getSizeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CACHED_RAW_STORE_MAX_CACHE_MEMORY
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|initialize
argument_list|(
name|maxSharedCacheSizeInBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxSharedCacheSizeInBytes
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Maximum memory that the cache will use: {} KB"
argument_list|,
name|maxSharedCacheSizeInBytes
operator|/
operator|(
literal|1024
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|SharedCache
name|getSharedCache
parameter_list|()
block|{
return|return
name|sharedCache
return|;
block|}
specifier|static
specifier|private
name|ColumnStatistics
name|updateStatsForAlterPart
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|Table
name|before
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Partition
name|part
parameter_list|)
throws|throws
name|Exception
block|{
name|ColumnStatistics
name|colStats
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|deletedCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|colStats
operator|=
name|HiveAlterHandler
operator|.
name|updateOrGetPartitionColumnStats
argument_list|(
name|rawStore
argument_list|,
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|,
name|before
argument_list|,
name|part
argument_list|,
literal|null
argument_list|,
name|deletedCols
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|column
range|:
name|deletedCols
control|)
block|{
name|sharedCache
operator|.
name|removePartitionColStatsFromCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
name|sharedCache
operator|.
name|alterPartitionAndStatsInCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
argument_list|,
name|colStats
operator|.
name|getStatsObj
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|colStats
return|;
block|}
specifier|static
specifier|private
name|void
name|updateStatsForAlterTable
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|Table
name|tblBefore
parameter_list|,
name|Table
name|tblAfter
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|ColumnStatistics
name|colStats
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|deletedCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|tblBefore
operator|.
name|isSetPartitionKeys
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|colStats
operator|=
name|updateStatsForAlterPart
argument_list|(
name|rawStore
argument_list|,
name|tblBefore
argument_list|,
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statisticsObjs
init|=
name|HiveAlterHandler
operator|.
name|alterTableUpdateTableColumnStats
argument_list|(
name|rawStore
argument_list|,
name|tblBefore
argument_list|,
name|tblAfter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|rawStore
operator|.
name|getConf
argument_list|()
argument_list|,
name|deletedCols
argument_list|)
decl_stmt|;
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
name|sharedCache
operator|.
name|alterTableAndStatsInCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|tblAfter
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|statisticsObjs
argument_list|,
name|tblAfter
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|column
range|:
name|deletedCols
control|)
block|{
name|sharedCache
operator|.
name|removeTableColStatsFromCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|long
name|updateUsingNotificationEvents
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|long
name|lastEventId
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"updating cache using notification events starting from event id "
operator|+
name|lastEventId
argument_list|)
expr_stmt|;
name|NotificationEventRequest
name|rqst
init|=
operator|new
name|NotificationEventRequest
argument_list|(
name|lastEventId
argument_list|)
decl_stmt|;
comment|//Add the events which are not related to metadata update
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|INSERT_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|OPEN_TXN_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|COMMIT_TXN_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|ABORT_TXN_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|ALLOC_WRITE_ID_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|ACID_WRITE_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|CREATE_FUNCTION_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|DROP_FUNCTION_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|ADD_PRIMARYKEY_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|ADD_FOREIGNKEY_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|ADD_UNIQUECONSTRAINT_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|ADD_NOTNULLCONSTRAINT_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|DROP_CONSTRAINT_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|CREATE_ISCHEMA_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|ALTER_ISCHEMA_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|DROP_ISCHEMA_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|ADD_SCHEMA_VERSION_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|ALTER_SCHEMA_VERSION_EVENT
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|addToEventTypeSkipList
argument_list|(
name|MessageBuilder
operator|.
name|DROP_SCHEMA_VERSION_EVENT
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getNextNotification"
argument_list|)
expr_stmt|;
name|NotificationEventResponse
name|resp
init|=
name|rawStore
operator|.
name|getNextNotification
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
if|if
condition|(
name|resp
operator|==
literal|null
operator|||
name|resp
operator|.
name|getEvents
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"no events to process"
argument_list|)
expr_stmt|;
return|return
name|lastEventId
return|;
block|}
name|List
argument_list|<
name|NotificationEvent
argument_list|>
name|eventList
init|=
name|resp
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"num events to process"
operator|+
name|eventList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NotificationEvent
name|event
range|:
name|eventList
control|)
block|{
name|long
name|eventId
init|=
name|event
operator|.
name|getEventId
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventId
operator|<=
name|lastEventId
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Event id is not valid "
operator|+
name|lastEventId
operator|+
literal|" : "
operator|+
name|eventId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|" event id is not valid "
operator|+
name|lastEventId
operator|+
literal|" : "
operator|+
name|eventId
argument_list|)
throw|;
block|}
name|lastEventId
operator|=
name|eventId
expr_stmt|;
name|String
name|message
init|=
name|event
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Event to process "
operator|+
name|event
argument_list|)
expr_stmt|;
name|MessageDeserializer
name|deserializer
init|=
name|MessageFactory
operator|.
name|getInstance
argument_list|(
name|event
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
operator|.
name|getDeserializer
argument_list|()
decl_stmt|;
name|String
name|catalogName
init|=
name|event
operator|.
name|getCatName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|event
operator|.
name|getCatName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|event
operator|.
name|getDbName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|event
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|event
operator|.
name|getTableName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|event
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
continue|continue;
block|}
switch|switch
condition|(
name|event
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|MessageBuilder
operator|.
name|ADD_PARTITION_EVENT
case|:
name|AddPartitionMessage
name|addPartMessage
init|=
name|deserializer
operator|.
name|getAddPartitionMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addPartitionsToCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|addPartMessage
operator|.
name|getPartitionObjs
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MessageBuilder
operator|.
name|ALTER_PARTITION_EVENT
case|:
name|AlterPartitionMessage
name|alterPartitionMessage
init|=
name|deserializer
operator|.
name|getAlterPartitionMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|alterPartitionInCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|alterPartitionMessage
operator|.
name|getPtnObjBefore
argument_list|()
operator|.
name|getValues
argument_list|()
argument_list|,
name|alterPartitionMessage
operator|.
name|getPtnObjAfter
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO : Use the stat object stored in the alter table message to update the stats in cache.
name|updateStatsForAlterPart
argument_list|(
name|rawStore
argument_list|,
name|alterPartitionMessage
operator|.
name|getTableObj
argument_list|()
argument_list|,
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|alterPartitionMessage
operator|.
name|getPtnObjAfter
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MessageBuilder
operator|.
name|DROP_PARTITION_EVENT
case|:
name|DropPartitionMessage
name|dropPartitionMessage
init|=
name|deserializer
operator|.
name|getDropPartitionMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partMap
range|:
name|dropPartitionMessage
operator|.
name|getPartitions
argument_list|()
control|)
block|{
name|sharedCache
operator|.
name|removePartitionFromCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|partMap
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MessageBuilder
operator|.
name|CREATE_TABLE_EVENT
case|:
name|CreateTableMessage
name|createTableMessage
init|=
name|deserializer
operator|.
name|getCreateTableMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|createTableMessage
operator|.
name|getTableObj
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MessageBuilder
operator|.
name|ALTER_TABLE_EVENT
case|:
name|AlterTableMessage
name|alterTableMessage
init|=
name|deserializer
operator|.
name|getAlterTableMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|alterTableInCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|alterTableMessage
operator|.
name|getTableObjAfter
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO : Use the stat object stored in the alter table message to update the stats in cache.
name|updateStatsForAlterTable
argument_list|(
name|rawStore
argument_list|,
name|alterTableMessage
operator|.
name|getTableObjBefore
argument_list|()
argument_list|,
name|alterTableMessage
operator|.
name|getTableObjAfter
argument_list|()
argument_list|,
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
break|break;
case|case
name|MessageBuilder
operator|.
name|DROP_TABLE_EVENT
case|:
name|DropTableMessage
name|dropTableMessage
init|=
name|deserializer
operator|.
name|getDropTableMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|int
name|batchSize
init|=
name|MetastoreConf
operator|.
name|getIntVar
argument_list|(
name|rawStore
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|BATCH_RETRIEVE_OBJECTS_MAX
argument_list|)
decl_stmt|;
name|String
name|tableDnsPath
init|=
literal|null
decl_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|dropTableMessage
operator|.
name|getTableObj
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tablePath
operator|!=
literal|null
condition|)
block|{
name|tableDnsPath
operator|=
operator|new
name|Warehouse
argument_list|(
name|rawStore
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|getDnsPath
argument_list|(
name|tablePath
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionLocations
init|=
name|rawStore
operator|.
name|getPartitionLocations
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|tableDnsPath
argument_list|,
name|batchSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionLocations
operator|==
literal|null
operator|||
name|partitionLocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|sharedCache
operator|.
name|removePartitionFromCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|partitionLocations
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sharedCache
operator|.
name|removeTableFromCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
break|break;
case|case
name|MessageBuilder
operator|.
name|CREATE_DATABASE_EVENT
case|:
name|CreateDatabaseMessage
name|createDatabaseMessage
init|=
name|deserializer
operator|.
name|getCreateDatabaseMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addDatabaseToCache
argument_list|(
name|createDatabaseMessage
operator|.
name|getDatabaseObject
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MessageBuilder
operator|.
name|ALTER_DATABASE_EVENT
case|:
name|AlterDatabaseMessage
name|alterDatabaseMessage
init|=
name|deserializer
operator|.
name|getAlterDatabaseMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|alterDatabaseInCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|alterDatabaseMessage
operator|.
name|getDbObjAfter
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MessageBuilder
operator|.
name|DROP_DATABASE_EVENT
case|:
name|sharedCache
operator|.
name|removeDatabaseFromCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
break|break;
case|case
name|MessageBuilder
operator|.
name|CREATE_CATALOG_EVENT
case|:
case|case
name|MessageBuilder
operator|.
name|DROP_CATALOG_EVENT
case|:
case|case
name|MessageBuilder
operator|.
name|ALTER_CATALOG_EVENT
case|:
comment|// TODO : Need to add cache invalidation for catalog events
name|LOG
operator|.
name|error
argument_list|(
literal|"catalog Events are not supported for cache invalidation : "
operator|+
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MessageBuilder
operator|.
name|UPDATE_TBL_COL_STAT_EVENT
case|:
name|UpdateTableColumnStatMessage
name|msg
init|=
name|deserializer
operator|.
name|getUpdateTableColumnStatMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|alterTableAndStatsInCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|msg
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|msg
operator|.
name|getColumnStatistics
argument_list|()
operator|.
name|getStatsObj
argument_list|()
argument_list|,
name|msg
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MessageBuilder
operator|.
name|DELETE_TBL_COL_STAT_EVENT
case|:
name|DeleteTableColumnStatMessage
name|msgDel
init|=
name|deserializer
operator|.
name|getDeleteTableColumnStatMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|removeTableColStatsFromCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|msgDel
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MessageBuilder
operator|.
name|UPDATE_PART_COL_STAT_EVENT
case|:
name|UpdatePartitionColumnStatMessage
name|msgPartUpdate
init|=
name|deserializer
operator|.
name|getUpdatePartitionColumnStatMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|alterPartitionAndStatsInCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|msgPartUpdate
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|msgPartUpdate
operator|.
name|getPartVals
argument_list|()
argument_list|,
name|msgPartUpdate
operator|.
name|getParameters
argument_list|()
argument_list|,
name|msgPartUpdate
operator|.
name|getColumnStatistics
argument_list|()
operator|.
name|getStatsObj
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MessageBuilder
operator|.
name|DELETE_PART_COL_STAT_EVENT
case|:
name|DeletePartitionColumnStatMessage
name|msgPart
init|=
name|deserializer
operator|.
name|getDeletePartitionColumnStatMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|removePartitionColStatsFromCache
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|msgPart
operator|.
name|getPartValues
argument_list|()
argument_list|,
name|msgPart
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Event is not supported for cache invalidation : "
operator|+
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lastEventId
return|;
block|}
annotation|@
name|VisibleForTesting
comment|/**    * This initializes the caches in SharedCache by getting the objects from Metastore DB via    * ObjectStore and populating the respective caches    */
specifier|static
name|void
name|prewarm
parameter_list|(
name|RawStore
name|rawStore
parameter_list|)
block|{
if|if
condition|(
name|isCachePrewarmed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Prewarming CachedStore"
argument_list|)
expr_stmt|;
name|long
name|sleepTime
init|=
literal|100
decl_stmt|;
while|while
condition|(
operator|!
name|isCachePrewarmed
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Prevents throwing exceptions in our raw store calls since we're not using RawStoreProxy
name|Deadline
operator|.
name|registerIfNot
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|catalogsToCache
decl_stmt|;
try|try
block|{
name|catalogsToCache
operator|=
name|catalogsToCache
argument_list|(
name|rawStore
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to cache catalogs: "
operator|+
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
argument_list|(
name|catalogsToCache
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Catalog
argument_list|>
name|catalogs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|catalogsToCache
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|catName
range|:
name|catalogsToCache
control|)
block|{
name|catalogs
operator|.
name|add
argument_list|(
name|rawStore
operator|.
name|getCatalog
argument_list|(
name|catName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sharedCache
operator|.
name|populateCatalogsInCache
argument_list|(
name|catalogs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to populate catalogs in cache, going to try again"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|sleepTime
operator|=
name|sleepTime
operator|*
literal|2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|timerEx
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sleep interrupted"
argument_list|,
name|timerEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// try again
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished prewarming catalogs, starting on databases"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Database
argument_list|>
name|databases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|catName
range|:
name|catalogsToCache
control|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
name|rawStore
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of databases to prewarm in catalog {}: {}"
argument_list|,
name|catName
argument_list|,
name|dbNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
block|{
try|try
block|{
name|databases
operator|.
name|add
argument_list|(
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// Continue with next database
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cache database "
operator|+
name|DatabaseName
operator|.
name|getQualified
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
operator|+
literal|", moving on"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cache databases in catalog "
operator|+
name|catName
operator|+
literal|", moving on"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|sharedCache
operator|.
name|populateDatabasesInCache
argument_list|(
name|databases
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Databases cache is now prewarmed. Now adding tables, partitions and statistics to the cache"
argument_list|)
expr_stmt|;
name|int
name|numberOfDatabasesCachedSoFar
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Database
name|db
range|:
name|databases
control|)
block|{
name|String
name|catName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
decl_stmt|;
try|try
block|{
name|tblNames
operator|=
name|rawStore
operator|.
name|getAllTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cache tables for database "
operator|+
name|DatabaseName
operator|.
name|getQualified
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
operator|+
literal|", moving on"
argument_list|)
expr_stmt|;
comment|// Continue with next database
continue|continue;
block|}
name|tblsPendingPrewarm
operator|.
name|addTableNamesForPrewarming
argument_list|(
name|tblNames
argument_list|)
expr_stmt|;
name|int
name|totalTablesToCache
init|=
name|tblNames
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numberOfTablesCachedSoFar
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tblsPendingPrewarm
operator|.
name|hasMoreTablesToPrewarm
argument_list|()
condition|)
block|{
try|try
block|{
name|String
name|tblName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblsPendingPrewarm
operator|.
name|getNextTableNameToPrewarm
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Table
name|table
decl_stmt|;
try|try
block|{
name|table
operator|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
comment|// It is possible the table is deleted during fetching tables of the database,
comment|// in that case, continue with the next table
continue|continue;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|MetaStoreUtils
operator|.
name|getColumnNamesForTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
name|ColumnStatistics
name|tableColStats
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|partitionColStats
init|=
literal|null
decl_stmt|;
name|AggrStats
name|aggrStatsAllPartitions
init|=
literal|null
decl_stmt|;
name|AggrStats
name|aggrStatsAllButDefaultPartition
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitions"
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|rawStore
operator|.
name|getPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|p
range|:
name|partitions
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|partNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Get partition column stats for this table
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitionColumnStatistics"
argument_list|)
expr_stmt|;
name|partitionColStats
operator|=
name|rawStore
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
comment|// Get aggregate stats for all partitions of a table and for all but default
comment|// partition
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getAggrPartitionColumnStatistics"
argument_list|)
expr_stmt|;
name|aggrStatsAllPartitions
operator|=
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
comment|// Remove default partition from partition names and get aggregate
comment|// stats again
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|table
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|String
name|defaultPartitionValue
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|rawStore
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|partKeys
control|)
block|{
name|partCols
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|defaultPartitionValue
argument_list|)
expr_stmt|;
block|}
name|String
name|defaultPartitionName
init|=
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|partCols
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|partNames
operator|.
name|remove
argument_list|(
name|defaultPartitionName
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getAggrPartitionColumnStatistics"
argument_list|)
expr_stmt|;
name|aggrStatsAllButDefaultPartition
operator|=
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getTableColumnStatistics"
argument_list|)
expr_stmt|;
name|tableColStats
operator|=
name|rawStore
operator|.
name|getTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
block|}
comment|// If the table could not cached due to memory limit, stop prewarm
name|boolean
name|isSuccess
init|=
name|sharedCache
operator|.
name|populateTableInCache
argument_list|(
name|table
argument_list|,
name|tableColStats
argument_list|,
name|partitions
argument_list|,
name|partitionColStats
argument_list|,
name|aggrStatsAllPartitions
argument_list|,
name|aggrStatsAllButDefaultPartition
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSuccess
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cached Database: {}'s Table: {}."
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to cache Database: {}'s Table: {}, since the cache memory is full. "
operator|+
literal|"Will stop attempting to cache any more tables."
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|completePrewarm
argument_list|(
name|startTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
comment|// Continue with next table
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processed database: {}'s table: {}. Cached {} / {}  tables so far."
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|++
name|numberOfTablesCachedSoFar
argument_list|,
name|totalTablesToCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EmptyStackException
name|e
parameter_list|)
block|{
comment|// We've prewarmed this database, continue with the next one
continue|continue;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processed database: {}. Cached {} / {} databases so far."
argument_list|,
name|dbName
argument_list|,
operator|++
name|numberOfDatabasesCachedSoFar
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sharedCache
operator|.
name|clearDirtyFlags
argument_list|()
expr_stmt|;
name|completePrewarm
argument_list|(
name|startTime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|void
name|clearSharedCache
parameter_list|()
block|{
name|sharedCache
operator|=
operator|new
name|SharedCache
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|completePrewarm
parameter_list|(
name|long
name|startTime
parameter_list|,
name|boolean
name|cachedAllMetadata
parameter_list|)
block|{
name|isCachePrewarmed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|isCachedAllMetadata
operator|.
name|set
argument_list|(
name|cachedAllMetadata
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CachedStore initialized"
argument_list|)
expr_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time taken in prewarming = "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|/
literal|1000000
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|completeTableCachePrewarm
argument_list|()
expr_stmt|;
block|}
specifier|static
class|class
name|TablesPendingPrewarm
block|{
specifier|private
name|Stack
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|synchronized
name|void
name|addTableNamesForPrewarming
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
parameter_list|)
block|{
name|tableNames
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|tblNames
operator|!=
literal|null
condition|)
block|{
name|tableNames
operator|.
name|addAll
argument_list|(
name|tblNames
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|boolean
name|hasMoreTablesToPrewarm
parameter_list|()
block|{
return|return
operator|!
name|tableNames
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|private
specifier|synchronized
name|String
name|getNextTableNameToPrewarm
parameter_list|()
block|{
return|return
name|tableNames
operator|.
name|pop
argument_list|()
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|prioritizeTableForPrewarm
parameter_list|(
name|String
name|tblName
parameter_list|)
block|{
comment|// If the table is in the pending prewarm list, move it to the top
if|if
condition|(
name|tableNames
operator|.
name|remove
argument_list|(
name|tblName
argument_list|)
condition|)
block|{
name|tableNames
operator|.
name|push
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|void
name|setCachePrewarmedState
parameter_list|(
name|boolean
name|state
parameter_list|)
block|{
name|isCachePrewarmed
operator|.
name|set
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|initBlackListWhiteList
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|whitelistPatterns
operator|=
name|createPatterns
argument_list|(
name|MetastoreConf
operator|.
name|getAsString
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHED_OBJECTS_WHITELIST
argument_list|)
argument_list|)
expr_stmt|;
name|blacklistPatterns
operator|=
name|createPatterns
argument_list|(
name|MetastoreConf
operator|.
name|getAsString
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHED_OBJECTS_BLACKLIST
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|catalogsToCache
parameter_list|(
name|RawStore
name|rs
parameter_list|)
throws|throws
name|MetaException
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|confValue
init|=
name|MetastoreConf
operator|.
name|getStringCollection
argument_list|(
name|rs
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|CATALOGS_TO_CACHE
argument_list|)
decl_stmt|;
if|if
condition|(
name|confValue
operator|==
literal|null
operator|||
name|confValue
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|confValue
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|confValue
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
operator|)
condition|)
block|{
return|return
name|rs
operator|.
name|getCatalogs
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|confValue
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
comment|/**    * This starts a background thread, which initially populates the SharedCache and later    * periodically gets updates from the metastore db    *    * @param conf    * @param runOnlyOnce    * @param shouldRunPrewarm    */
specifier|static
specifier|synchronized
name|void
name|startCacheUpdateService
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|runOnlyOnce
parameter_list|,
name|boolean
name|shouldRunPrewarm
parameter_list|)
block|{
if|if
condition|(
name|cacheUpdateMaster
operator|==
literal|null
condition|)
block|{
name|initBlackListWhiteList
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
condition|)
block|{
name|cacheRefreshPeriodMS
operator|=
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHE_UPDATE_FREQUENCY
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"CachedStore: starting cache update service (run every {} ms)"
argument_list|,
name|cacheRefreshPeriodMS
argument_list|)
expr_stmt|;
name|cacheUpdateMaster
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
name|Executors
operator|.
name|defaultThreadFactory
argument_list|()
operator|.
name|newThread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
literal|"CachedStore-CacheUpdateService: Thread-"
operator|+
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runOnlyOnce
condition|)
block|{
name|cacheUpdateMaster
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|CacheUpdateMasterWork
argument_list|(
name|conf
argument_list|,
name|shouldRunPrewarm
argument_list|)
argument_list|,
literal|0
argument_list|,
name|cacheRefreshPeriodMS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|runOnlyOnce
condition|)
block|{
comment|// Some tests control the execution of the background update thread
name|cacheUpdateMaster
operator|.
name|schedule
argument_list|(
operator|new
name|CacheUpdateMasterWork
argument_list|(
name|conf
argument_list|,
name|shouldRunPrewarm
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
specifier|synchronized
name|boolean
name|stopCacheUpdateService
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|boolean
name|tasksStoppedBeforeShutdown
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cacheUpdateMaster
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CachedStore: shutting down cache update service"
argument_list|)
expr_stmt|;
try|try
block|{
name|tasksStoppedBeforeShutdown
operator|=
name|cacheUpdateMaster
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CachedStore: cache update service was interrupted while waiting for tasks to "
operator|+
literal|"complete before shutting down. Will make a hard stop now."
argument_list|)
expr_stmt|;
block|}
name|cacheUpdateMaster
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|cacheUpdateMaster
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|tasksStoppedBeforeShutdown
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|void
name|setCacheRefreshPeriod
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|cacheRefreshPeriodMS
operator|=
name|time
expr_stmt|;
block|}
specifier|static
class|class
name|CacheUpdateMasterWork
implements|implements
name|Runnable
block|{
specifier|private
name|boolean
name|shouldRunPrewarm
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|RawStore
name|rawStore
decl_stmt|;
name|CacheUpdateMasterWork
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|shouldRunPrewarm
parameter_list|)
block|{
name|this
operator|.
name|shouldRunPrewarm
operator|=
name|shouldRunPrewarm
expr_stmt|;
name|String
name|rawStoreClassName
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CACHED_RAW_STORE_IMPL
argument_list|,
name|ObjectStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|rawStore
operator|=
name|JavaUtils
operator|.
name|getClass
argument_list|(
name|rawStoreClassName
argument_list|,
name|RawStore
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|rawStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|MetaException
name|e
parameter_list|)
block|{
comment|// MetaException here really means ClassNotFound (see the utility method).
comment|// So, if any of these happen, that means we can never succeed.
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot instantiate "
operator|+
name|rawStoreClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|shouldRunPrewarm
condition|)
block|{
if|if
condition|(
name|canUseEvents
condition|)
block|{
try|try
block|{
name|triggerUpdateUsingEvent
argument_list|(
name|rawStore
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to update cache using events "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// TODO: prewarm and update can probably be merged.
try|try
block|{
name|update
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"periodical refresh fail "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|triggerPreWarm
argument_list|(
name|rawStore
argument_list|)
expr_stmt|;
name|shouldRunPrewarm
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Prewarm failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|void
name|update
parameter_list|()
block|{
name|Deadline
operator|.
name|registerIfNot
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached objects. Shared cache has been update {} times so far."
argument_list|,
name|sharedCache
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|String
name|catName
range|:
name|catalogsToCache
argument_list|(
name|rawStore
argument_list|)
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
name|rawStore
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
decl_stmt|;
comment|// Update the database in cache
name|updateDatabases
argument_list|(
name|rawStore
argument_list|,
name|catName
argument_list|,
name|dbNames
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
block|{
comment|// Update the tables in cache
name|updateTables
argument_list|(
name|rawStore
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
decl_stmt|;
try|try
block|{
name|tblNames
operator|=
name|rawStore
operator|.
name|getAllTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
comment|// Continue with next database
continue|continue;
block|}
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Update the table column stats for a table in cache
name|updateTableColStats
argument_list|(
name|rawStore
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// Update the partitions for a table in cache
name|updateTablePartitions
argument_list|(
name|rawStore
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// Update the partition col stats for a table in cache
name|updateTablePartitionColStats
argument_list|(
name|rawStore
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// Update aggregate partition column stats for a table in cache
name|updateTableAggregatePartitionColStats
argument_list|(
name|rawStore
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sharedCache
operator|.
name|incrementUpdateCount
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updated cached objects. Shared cache update count is: {}"
argument_list|,
name|sharedCache
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Updating CachedStore: error happen when refresh; skipping this iteration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateDatabases
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|String
name|catName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached database objects for catalog: {}"
argument_list|,
name|catName
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
comment|// Try MAX_RETRIES times, then move to next method
name|int
name|maxTries
init|=
name|MAX_RETRIES
decl_stmt|;
while|while
condition|(
operator|!
name|success
operator|&&
operator|(
name|maxTries
operator|--
operator|>
literal|0
operator|)
condition|)
block|{
comment|// Prepare the list of databases
name|List
argument_list|<
name|Database
argument_list|>
name|databases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
block|{
name|Database
name|db
decl_stmt|;
try|try
block|{
name|db
operator|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|databases
operator|.
name|add
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating CachedStore: database: "
operator|+
name|catName
operator|+
literal|"."
operator|+
name|dbName
operator|+
literal|" does not exist."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|success
operator|=
name|sharedCache
operator|.
name|refreshDatabasesInCache
argument_list|(
name|databases
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updated cached database objects for catalog: {}"
argument_list|,
name|catName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateTables
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached table objects for catalog: {}, database: {}"
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
comment|// Try MAX_RETRIES times, then move to next method
name|int
name|maxTries
init|=
name|MAX_RETRIES
decl_stmt|;
while|while
condition|(
operator|!
name|success
operator|&&
operator|(
name|maxTries
operator|--
operator|>
literal|0
operator|)
condition|)
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
init|=
name|rawStore
operator|.
name|getAllTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Table
name|table
init|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|tables
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|sharedCache
operator|.
name|refreshTablesInCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tables
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updated cached table objects for catalog: {}, database: {}"
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to refresh cached tables for database: "
operator|+
name|dbName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateTableColStats
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached table col stats objects for catalog: {}, database: {}"
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|rawStore
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
operator|&&
operator|!
name|table
operator|.
name|isSetPartitionKeys
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|MetaStoreUtils
operator|.
name|getColumnNamesForTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getTableColumnStatistics"
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|tableColStats
init|=
name|rawStore
operator|.
name|getTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
if|if
condition|(
name|tableColStats
operator|!=
literal|null
condition|)
block|{
name|sharedCache
operator|.
name|refreshTableColStatsInCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|tableColStats
operator|.
name|getStatsObj
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update the table to get consistent stats state.
name|sharedCache
operator|.
name|alterTableInCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
name|committed
operator|=
name|rawStore
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updated cached table col stats objects for catalog: {}, database: {}"
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to refresh table column stats for table: "
operator|+
name|tblName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|sharedCache
operator|.
name|removeAllTableColStatsFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|rawStore
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateTablePartitions
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached partition objects for catalog: {}, database: {}, table: {}"
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
try|try
block|{
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitions"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|rawStore
operator|.
name|getPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
name|sharedCache
operator|.
name|refreshPartitionsInCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|partitions
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updated cached partition objects for catalog: {}, database: {}, table: {}"
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating CachedStore: unable to read partitions of table: "
operator|+
name|tblName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateTablePartitionColStats
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached partition col stats objects for catalog: {}, database: {}, table: {}"
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|rawStore
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|MetaStoreUtils
operator|.
name|getColumnNamesForTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|rawStore
operator|.
name|listPartitionNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Get partition column stats for this table
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitionColumnStatistics"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|partitionColStats
init|=
name|rawStore
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
name|sharedCache
operator|.
name|refreshPartitionColStatsInCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionColStats
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitionsByNames"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|rawStore
operator|.
name|getPartitionsByNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
comment|// Also save partitions for consistency as they have the stats state.
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|sharedCache
operator|.
name|alterPartitionInCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|committed
operator|=
name|rawStore
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updated cached partition col stats objects for catalog: {}, database: {}, table: {}"
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating CachedStore: unable to read partitions of table: "
operator|+
name|tblName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|sharedCache
operator|.
name|removeAllPartitionColStatsFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|rawStore
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Update cached aggregate stats for all partitions of a table and for all
comment|// but default partition
specifier|private
specifier|static
name|void
name|updateTableAggregatePartitionColStats
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached aggregate partition col stats objects for catalog: {}, database: {}, table: {}"
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|rawStore
operator|.
name|listPartitionNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|MetaStoreUtils
operator|.
name|getColumnNamesForTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|partNames
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|partNames
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getAggregareStatsForAllPartitions"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStatsAllPartitions
init|=
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
comment|// Remove default partition from partition names and get aggregate stats again
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|table
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|String
name|defaultPartitionValue
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|rawStore
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|partKeys
control|)
block|{
name|partCols
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|defaultPartitionValue
argument_list|)
expr_stmt|;
block|}
name|String
name|defaultPartitionName
init|=
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|partCols
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|partNames
operator|.
name|remove
argument_list|(
name|defaultPartitionName
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getAggregareStatsForAllPartitionsExceptDefault"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStatsAllButDefaultPartition
init|=
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
name|sharedCache
operator|.
name|refreshAggregateStatsInCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|aggrStatsAllPartitions
argument_list|,
name|aggrStatsAllButDefaultPartition
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updated cached aggregate partition col stats objects for catalog: {}, database: {}, table: {}"
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating CachedStore: unable to read aggregate column stats of table: "
operator|+
name|tblName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|getConf
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|rawStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|openTransaction
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|openTransaction
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commitTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|rawStore
operator|.
name|commitTransaction
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// In case of event based update, shared cache is not updated directly to avoid inconsistency.
comment|// For example, if metastore B add a partition, then metastore A drop a partition later. However, on metastore A,
comment|// it first get drop partition request, then from notification, create the partition. If there's no tombstone
comment|// entry in partition cache to tell drop is after creation, we end up consumes the creation request. Though
comment|// eventually there's drop partition notification, but during the interim, later event takes precedence.
comment|// So we will not update the cache during raw store operation but wait during commit transaction to make sure that
comment|// the event related to the current transactions are updated in the cache and thus we can support strong
comment|// consistency in case there is only one metastore.
if|if
condition|(
name|canUseEvents
condition|)
block|{
try|try
block|{
name|triggerUpdateUsingEvent
argument_list|(
name|rawStore
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//TODO : Not sure how to handle it as the commit is already done in the object store.
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to update cache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isActiveTransaction
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackTransaction
parameter_list|()
block|{
name|rawStore
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createCatalog
parameter_list|(
name|Catalog
name|cat
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
comment|// in case of event based cache update, cache will not be updated for catalog.
if|if
condition|(
operator|!
name|canUseEvents
condition|)
block|{
name|sharedCache
operator|.
name|addCatalogToCache
argument_list|(
name|cat
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterCatalog
parameter_list|(
name|String
name|catName
parameter_list|,
name|Catalog
name|cat
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
block|{
name|rawStore
operator|.
name|alterCatalog
argument_list|(
name|catName
argument_list|,
name|cat
argument_list|)
expr_stmt|;
comment|// in case of event based cache update, cache will not be updated for catalog.
if|if
condition|(
operator|!
name|canUseEvents
condition|)
block|{
name|sharedCache
operator|.
name|alterCatalogInCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|cat
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Catalog
name|getCatalog
parameter_list|(
name|String
name|catalogName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
comment|// in case of event based cache update, cache will not be updated for catalog.
if|if
condition|(
operator|!
name|sharedCache
operator|.
name|isCatalogCachePrewarmed
argument_list|()
operator|||
name|canUseEvents
condition|)
block|{
return|return
name|rawStore
operator|.
name|getCatalog
argument_list|(
name|catalogName
argument_list|)
return|;
block|}
name|Catalog
name|cat
init|=
name|sharedCache
operator|.
name|getCatalogFromCache
argument_list|(
name|normalizeIdentifier
argument_list|(
name|catalogName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|()
throw|;
block|}
return|return
name|cat
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCatalogs
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// in case of event based cache update, cache will not be updated for catalog.
if|if
condition|(
operator|!
name|sharedCache
operator|.
name|isCatalogCachePrewarmed
argument_list|()
operator|||
name|canUseEvents
condition|)
block|{
return|return
name|rawStore
operator|.
name|getCatalogs
argument_list|()
return|;
block|}
return|return
name|sharedCache
operator|.
name|listCachedCatalogs
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropCatalog
parameter_list|(
name|String
name|catalogName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropCatalog
argument_list|(
name|catalogName
argument_list|)
expr_stmt|;
comment|// in case of event based cache update, cache will not be updated for catalog.
if|if
condition|(
operator|!
name|canUseEvents
condition|)
block|{
name|catalogName
operator|=
name|catalogName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|sharedCache
operator|.
name|removeCatalogFromCache
argument_list|(
name|catalogName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
comment|// in case of event based cache update, cache will be updated during commit.
if|if
condition|(
operator|!
name|canUseEvents
condition|)
block|{
name|sharedCache
operator|.
name|addDatabaseToCache
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Database
name|getDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
comment|// in case of  event based cache update, cache will be updated during commit. So within active transaction, read
comment|// directly from rawStore to avoid reading stale data as the data updated during same transaction will not be
comment|// updated in the cache.
if|if
condition|(
operator|!
name|sharedCache
operator|.
name|isDatabaseCachePrewarmed
argument_list|()
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
return|;
block|}
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|Database
name|db
init|=
name|sharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|()
throw|;
block|}
return|return
name|db
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|dropDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
operator|&&
operator|!
name|canUseEvents
condition|)
block|{
comment|// in case of event based cache update, cache will be updated during commit.
name|sharedCache
operator|.
name|removeDatabaseFromCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|alterDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|alterDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
operator|&&
operator|!
name|canUseEvents
condition|)
block|{
comment|// in case of event based cache update, cache will be updated during commit.
name|sharedCache
operator|.
name|alterDatabaseInCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|sharedCache
operator|.
name|isDatabaseCachePrewarmed
argument_list|()
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getDatabases
argument_list|(
name|catName
argument_list|,
name|pattern
argument_list|)
return|;
block|}
return|return
name|sharedCache
operator|.
name|listCachedDatabases
argument_list|(
name|catName
argument_list|,
name|pattern
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|(
name|String
name|catName
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|sharedCache
operator|.
name|isDatabaseCachePrewarmed
argument_list|()
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
return|;
block|}
return|return
name|sharedCache
operator|.
name|listCachedDatabases
argument_list|(
name|catName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|createType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|createType
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getType
argument_list|(
name|typeName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|dropType
argument_list|(
name|typeName
argument_list|)
return|;
block|}
specifier|private
name|void
name|validateTableType
parameter_list|(
name|Table
name|tbl
parameter_list|)
block|{
comment|// If the table has property EXTERNAL set, update table type
comment|// accordingly
name|String
name|tableType
init|=
name|tbl
operator|.
name|getTableType
argument_list|()
decl_stmt|;
name|boolean
name|isExternal
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
if|if
condition|(
name|isExternal
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isExternal
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|tbl
operator|.
name|setTableType
argument_list|(
name|tableType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
comment|// in case of event based cache update, cache will be updated during commit.
if|if
condition|(
name|canUseEvents
condition|)
block|{
return|return;
block|}
name|String
name|catName
init|=
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getCatName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return;
block|}
name|validateTableType
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|dropTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
comment|// in case of event based cache update, cache will be updated during commit.
if|if
condition|(
name|succ
operator|&&
operator|!
name|canUseEvents
condition|)
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|sharedCache
operator|.
name|removeTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|validWriteIds
parameter_list|)
throws|throws
name|MetaException
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|validWriteIds
argument_list|)
return|;
block|}
name|Table
name|tbl
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
comment|// This table is not yet loaded in cache
comment|// If the prewarm thread is working on this table's database,
comment|// let's move this table to the top of tblNamesBeingPrewarmed stack,
comment|// so that it gets loaded to the cache faster and is available for subsequent requests
name|tblsPendingPrewarm
operator|.
name|prioritizeTableForPrewarm
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
return|return
name|rawStore
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|validWriteIds
argument_list|)
return|;
block|}
if|if
condition|(
name|validWriteIds
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setParameters
argument_list|(
name|adjustStatsParamsForGet
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tbl
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|validWriteIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|unsetPrivileges
argument_list|()
expr_stmt|;
name|tbl
operator|.
name|setRewriteEnabled
argument_list|(
name|tbl
operator|.
name|isRewriteEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// getTable call from ObjectStore returns an empty list
name|tbl
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|tableType
init|=
name|tbl
operator|.
name|getTableType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableType
operator|==
literal|null
condition|)
block|{
comment|// for backwards compatibility with old metastore persistence
if|if
condition|(
name|tbl
operator|.
name|getViewOriginalText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"TRUE"
operator|.
name|equals
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
argument_list|)
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tableType
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|tbl
operator|.
name|setTableType
argument_list|(
name|tableType
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartition
parameter_list|(
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
decl_stmt|;
comment|// in case of event based cache update, cache will be updated during commit.
if|if
condition|(
name|succ
operator|&&
operator|!
name|canUseEvents
condition|)
block|{
name|String
name|dbName
init|=
name|normalizeIdentifier
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|normalizeIdentifier
argument_list|(
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|catName
init|=
name|part
operator|.
name|isSetCatName
argument_list|()
condition|?
name|normalizeIdentifier
argument_list|(
name|part
operator|.
name|getCatName
argument_list|()
argument_list|)
else|:
name|DEFAULT_CATALOG_NAME
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|addPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|parts
argument_list|)
decl_stmt|;
comment|// in case of event based cache update, cache will be updated during commit.
if|if
condition|(
name|succ
operator|&&
operator|!
name|canUseEvents
condition|)
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|sharedCache
operator|.
name|addPartitionsToCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|parts
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|PartitionSpecProxy
name|partitionSpec
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|addPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionSpec
argument_list|,
name|ifNotExists
argument_list|)
decl_stmt|;
comment|// in case of event based cache update, cache will be updated during commit.
if|if
condition|(
name|succ
operator|&&
operator|!
name|canUseEvents
condition|)
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|PartitionSpecProxy
operator|.
name|PartitionIterator
name|iterator
init|=
name|partitionSpec
operator|.
name|getPartitionIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Partition
name|part
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|String
name|validWriteIds
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|,
name|validWriteIds
argument_list|)
return|;
block|}
name|Partition
name|part
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
comment|// The table containing the partition is not yet loaded in cache
return|return
name|rawStore
operator|.
name|getPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|,
name|validWriteIds
argument_list|)
return|;
block|}
if|if
condition|(
name|validWriteIds
operator|!=
literal|null
condition|)
block|{
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// The table containing the partition is not yet loaded in cache
return|return
name|rawStore
operator|.
name|getPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|,
name|validWriteIds
argument_list|)
return|;
block|}
name|part
operator|.
name|setParameters
argument_list|(
name|adjustStatsParamsForGet
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
argument_list|,
name|part
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|validWriteIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|part
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|doesPartitionExist
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|doesPartitionExist
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partKeys
argument_list|,
name|part_vals
argument_list|)
return|;
block|}
name|Table
name|tbl
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
comment|// The table containing the partition is not yet loaded in cache
return|return
name|rawStore
operator|.
name|doesPartitionExist
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partKeys
argument_list|,
name|part_vals
argument_list|)
return|;
block|}
return|return
name|sharedCache
operator|.
name|existPartitionFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|dropPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
comment|// in case of event based cache update, cache will be updated during commit.
if|if
condition|(
name|succ
operator|&&
operator|!
name|canUseEvents
condition|)
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|sharedCache
operator|.
name|removePartitionFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|rawStore
operator|.
name|dropPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
comment|// in case of event based cache update, cache will be updated during commit.
if|if
condition|(
name|canUseEvents
condition|)
block|{
return|return;
block|}
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|partVals
operator|.
name|add
argument_list|(
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sharedCache
operator|.
name|removePartitionsFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
return|;
block|}
name|Table
name|tbl
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
comment|// The table containing the partitions is not yet loaded in cache
return|return
name|rawStore
operator|.
name|getPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
decl_stmt|;
return|return
name|parts
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartitionLocations
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|baseLocationToNotShow
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getPartitionLocations
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|baseLocationToNotShow
argument_list|,
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|alterTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|newTable
parameter_list|,
name|String
name|validWriteIds
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|newTable
operator|=
name|rawStore
operator|.
name|alterTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newTable
argument_list|,
name|validWriteIds
argument_list|)
expr_stmt|;
comment|// in case of event based cache update, cache will be updated during commit.
if|if
condition|(
name|canUseEvents
condition|)
block|{
return|return
name|newTable
return|;
block|}
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|String
name|newTblName
init|=
name|normalizeIdentifier
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|&&
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|newTblName
argument_list|)
condition|)
block|{
return|return
name|newTable
return|;
block|}
name|Table
name|tbl
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
comment|// The table is not yet loaded in cache
return|return
name|newTable
return|;
block|}
if|if
condition|(
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|&&
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|newTblName
argument_list|)
condition|)
block|{
comment|// If old table is in the cache and the new table can also be cached
name|sharedCache
operator|.
name|alterTableInCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|&&
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|newTblName
argument_list|)
condition|)
block|{
comment|// If old table is *not* in the cache but the new table can be cached
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|newTblName
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|&&
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|newTblName
argument_list|)
condition|)
block|{
comment|// If old table is in the cache but the new table *cannot* be cached
name|sharedCache
operator|.
name|removeTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|newTable
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateCreationMetadata
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|tablename
parameter_list|,
name|CreationMetadata
name|cm
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|updateCreationMetadata
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|tablename
argument_list|,
name|cm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|isBlacklistWhitelistEmpty
argument_list|(
name|conf
argument_list|)
operator|||
operator|!
name|isCachePrewarmed
operator|.
name|get
argument_list|()
operator|||
operator|!
name|isCachedAllMetadata
operator|.
name|get
argument_list|()
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|pattern
argument_list|)
return|;
block|}
return|return
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|pattern
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|,
name|TableType
name|tableType
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|isBlacklistWhitelistEmpty
argument_list|(
name|conf
argument_list|)
operator|||
operator|!
name|isCachePrewarmed
operator|.
name|get
argument_list|()
operator|||
operator|!
name|isCachedAllMetadata
operator|.
name|get
argument_list|()
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|pattern
argument_list|,
name|tableType
argument_list|)
return|;
block|}
return|return
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|pattern
argument_list|,
name|tableType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|getAllMaterializedViewObjectsForRewriting
parameter_list|(
name|String
name|catName
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO fucntionCache
return|return
name|rawStore
operator|.
name|getAllMaterializedViewObjectsForRewriting
argument_list|(
name|catName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMaterializedViewsForRewriting
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getMaterializedViewsForRewriting
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableMeta
argument_list|>
name|getTableMeta
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbNames
parameter_list|,
name|String
name|tableNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO Check if all required tables are allowed, if so, get it from cache
if|if
condition|(
operator|!
name|isBlacklistWhitelistEmpty
argument_list|(
name|conf
argument_list|)
operator|||
operator|!
name|isCachePrewarmed
operator|.
name|get
argument_list|()
operator|||
operator|!
name|isCachedAllMetadata
operator|.
name|get
argument_list|()
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTableMeta
argument_list|(
name|catName
argument_list|,
name|dbNames
argument_list|,
name|tableNames
argument_list|,
name|tableTypes
argument_list|)
return|;
block|}
return|return
name|sharedCache
operator|.
name|getTableMeta
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbNames
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tableNames
argument_list|)
argument_list|,
name|tableTypes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
block|{
if|if
condition|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTableObjectsByName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblNames
argument_list|)
return|;
block|}
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|boolean
name|missSomeInCache
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
name|tblName
operator|=
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
name|missSomeInCache
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isCachePrewarmed
operator|.
name|get
argument_list|()
operator|||
name|missSomeInCache
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTableObjectsByName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblNames
argument_list|)
return|;
block|}
name|Database
name|db
init|=
name|sharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownDBException
argument_list|(
literal|"Could not find database "
operator|+
name|dbName
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
name|tblName
operator|=
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
name|tbl
operator|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tbl
operator|!=
literal|null
condition|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|tables
operator|.
name|add
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
return|return
name|tables
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|isBlacklistWhitelistEmpty
argument_list|(
name|conf
argument_list|)
operator|||
operator|!
name|isCachePrewarmed
operator|.
name|get
argument_list|()
operator|||
operator|!
name|isCachedAllMetadata
operator|.
name|get
argument_list|()
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getAllTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
return|;
block|}
return|return
name|sharedCache
operator|.
name|listCachedTableNames
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// TODO: implement using SharedCache
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_tables
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
block|{
return|return
name|rawStore
operator|.
name|listTableNamesByFilter
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|filter
argument_list|,
name|max_tables
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
block|{
name|catName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|listPartitionNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max_parts
argument_list|)
return|;
block|}
name|Table
name|tbl
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
comment|// The table is not yet loaded in cache
return|return
name|rawStore
operator|.
name|listPartitionNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max_parts
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max_parts
argument_list|)
control|)
block|{
if|if
condition|(
name|max_parts
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|max_parts
condition|)
block|{
name|partitionNames
operator|.
name|add
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitionNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|PartitionValuesResponse
name|listPartitionValues
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|boolean
name|applyDistinct
parameter_list|,
name|String
name|filter
parameter_list|,
name|boolean
name|ascending
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|order
parameter_list|,
name|long
name|maxParts
parameter_list|)
throws|throws
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|alterPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|Partition
name|newPart
parameter_list|,
name|String
name|validWriteIds
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|newPart
operator|=
name|rawStore
operator|.
name|alterPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|newPart
argument_list|,
name|validWriteIds
argument_list|)
expr_stmt|;
comment|// in case of event based cache update, cache will be updated during commit.
if|if
condition|(
name|canUseEvents
condition|)
block|{
return|return
name|newPart
return|;
block|}
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|newPart
return|;
block|}
name|sharedCache
operator|.
name|alterPartitionInCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
return|return
name|newPart
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|alterPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValsList
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|,
name|long
name|writeId
parameter_list|,
name|String
name|validWriteIds
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|newParts
operator|=
name|rawStore
operator|.
name|alterPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partValsList
argument_list|,
name|newParts
argument_list|,
name|writeId
argument_list|,
name|validWriteIds
argument_list|)
expr_stmt|;
comment|// in case of event based cache update, cache will be updated during commit.
if|if
condition|(
name|canUseEvents
condition|)
block|{
return|return
name|newParts
return|;
block|}
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|newParts
return|;
block|}
name|sharedCache
operator|.
name|alterPartitionsInCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partValsList
argument_list|,
name|newParts
argument_list|)
expr_stmt|;
return|return
name|newParts
return|;
block|}
specifier|private
name|boolean
name|getPartitionNamesPrunedByExprNoTxn
parameter_list|(
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|result
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|maxParts
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultPartName
operator|==
literal|null
operator|||
name|defaultPartName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|defaultPartName
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
expr_stmt|;
block|}
return|return
name|expressionProxy
operator|.
name|filterPartitionsByExpr
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|expr
argument_list|,
name|defaultPartName
argument_list|,
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// TODO: implement using SharedCache
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getPartitionsByFilter
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|,
name|maxParts
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|/**    * getPartitionSpecsByFilterAndProjection interface is currently non-cacheable.    */
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionSpecsByFilterAndProjection
parameter_list|(
name|Table
name|table
parameter_list|,
name|GetPartitionsProjectionSpec
name|projectionSpec
parameter_list|,
name|GetPartitionsFilterSpec
name|filterSpec
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getPartitionSpecsByFilterAndProjection
argument_list|(
name|table
argument_list|,
name|projectionSpec
argument_list|,
name|filterSpec
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getPartitionsByExpr
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|)
throws|throws
name|TException
block|{
name|catName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartitionsByExpr
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|maxParts
argument_list|,
name|result
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// The table is not yet loaded in cache
return|return
name|rawStore
operator|.
name|getPartitionsByExpr
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|maxParts
argument_list|,
name|result
argument_list|)
return|;
block|}
name|boolean
name|hasUnknownPartitions
init|=
name|getPartitionNamesPrunedByExprNoTxn
argument_list|(
name|table
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|maxParts
argument_list|,
name|partNames
argument_list|,
name|sharedCache
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|Partition
name|part
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|)
decl_stmt|;
name|part
operator|.
name|unsetPrivileges
argument_list|()
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
return|return
name|hasUnknownPartitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumPartitionsByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumPartitionsByExpr
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getNumPartitionsByExpr
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|expr
argument_list|)
return|;
block|}
name|String
name|defaultPartName
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// The table is not yet loaded in cache
return|return
name|rawStore
operator|.
name|getNumPartitionsByExpr
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|expr
argument_list|)
return|;
block|}
name|getPartitionNamesPrunedByExprNoTxn
argument_list|(
name|table
argument_list|,
name|expr
argument_list|,
name|defaultPartName
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|,
name|partNames
argument_list|,
name|sharedCache
argument_list|)
expr_stmt|;
return|return
name|partNames
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|partNameToVals
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|kvp
init|=
name|name
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|kv
range|:
name|kvp
control|)
block|{
name|vals
operator|.
name|add
argument_list|(
name|FileUtils
operator|.
name|unescapePathName
argument_list|(
name|kv
operator|.
name|substring
argument_list|(
name|kv
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|vals
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|catName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartitionsByNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
return|;
block|}
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// The table is not yet loaded in cache
return|return
name|rawStore
operator|.
name|getPartitionsByNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|Partition
name|part
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|markPartitionForEvent
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partVals
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
return|return
name|rawStore
operator|.
name|markPartitionForEvent
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|evtType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
return|return
name|rawStore
operator|.
name|isPartitionMarkedForEvent
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|evtType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addRole
parameter_list|(
name|String
name|rowName
parameter_list|,
name|String
name|ownerName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|addRole
argument_list|(
name|rowName
argument_list|,
name|ownerName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|removeRole
argument_list|(
name|roleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grantRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
return|return
name|rawStore
operator|.
name|grantRole
argument_list|(
name|role
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revokeRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|revokeRole
argument_list|(
name|role
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getUserPrivilegeSet
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getUserPrivilegeSet
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getDBPrivilegeSet
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getDBPrivilegeSet
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getTablePrivilegeSet
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getTablePrivilegeSet
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getPartitionPrivilegeSet
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partition
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getPartitionPrivilegeSet
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partition
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getColumnPrivilegeSet
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getColumnPrivilegeSet
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalGlobalGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalDBGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalDBGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listAllTableGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listAllTableGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalPartitionGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
name|partName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalTableColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalPartitionColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
name|partName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grantPrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|grantPrivileges
argument_list|(
name|privileges
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revokePrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|revokePrivileges
argument_list|(
name|privileges
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|refreshPrivileges
parameter_list|(
name|HiveObjectRef
name|objToRefresh
parameter_list|,
name|String
name|authorizer
parameter_list|,
name|PrivilegeBag
name|grantPrivileges
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|refreshPrivileges
argument_list|(
name|objToRefresh
argument_list|,
name|authorizer
argument_list|,
name|grantPrivileges
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Role
name|getRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listRoleNames
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|listRoleNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Role
argument_list|>
name|listRoles
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listRoles
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|listRolesWithGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listRolesWithGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|listRoleMembers
parameter_list|(
name|String
name|roleName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listRoleMembers
argument_list|(
name|roleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartitionWithAuth
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|catName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartitionWithAuth
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// The table is not yet loaded in cache
return|return
name|rawStore
operator|.
name|getPartitionWithAuth
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
name|Partition
name|p
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|privs
init|=
name|getPartitionPrivilegeSet
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPrivileges
argument_list|(
name|privs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"partition values="
operator|+
name|partVals
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|p
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsWithAuth
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|catName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartitionsWithAuth
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// The table is not yet loaded in cache
return|return
name|rawStore
operator|.
name|getPartitionsWithAuth
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|)
control|)
block|{
if|if
condition|(
name|maxParts
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|maxParts
condition|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|privs
init|=
name|getPartitionPrivilegeSet
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|part
operator|.
name|setPrivileges
argument_list|(
name|privs
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNamesPs
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partSpecs
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|catName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|listPartitionNamesPs
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partSpecs
argument_list|,
name|maxParts
argument_list|)
return|;
block|}
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// The table is not yet loaded in cache
return|return
name|rawStore
operator|.
name|listPartitionNamesPs
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partSpecs
argument_list|,
name|maxParts
argument_list|)
return|;
block|}
name|String
name|partNameMatcher
init|=
name|getPartNameMatcher
argument_list|(
name|table
argument_list|,
name|partSpecs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|allPartitions
init|=
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|allPartitions
control|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|partName
operator|.
name|matches
argument_list|(
name|partNameMatcher
argument_list|)
operator|&&
operator|(
name|maxParts
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|maxParts
operator|)
condition|)
block|{
name|partitionNames
operator|.
name|add
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|partitionNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsPsWithAuth
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partSpecs
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
block|{
name|catName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|canUseEvents
operator|&&
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|listPartitionsPsWithAuth
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partSpecs
argument_list|,
name|maxParts
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// The table is not yet loaded in cache
return|return
name|rawStore
operator|.
name|listPartitionsPsWithAuth
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partSpecs
argument_list|,
name|maxParts
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
name|String
name|partNameMatcher
init|=
name|getPartNameMatcher
argument_list|(
name|table
argument_list|,
name|partSpecs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|allPartitions
init|=
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|allPartitions
control|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|partName
operator|.
name|matches
argument_list|(
name|partNameMatcher
argument_list|)
operator|&&
operator|(
name|maxParts
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|maxParts
operator|)
condition|)
block|{
name|PrincipalPrivilegeSet
name|privs
init|=
name|getPartitionPrivilegeSet
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|part
operator|.
name|setPrivileges
argument_list|(
name|privs
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
specifier|private
name|String
name|getPartNameMatcher
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partSpecs
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
name|table
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|int
name|numPartKeys
init|=
name|partCols
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|partSpecs
operator|.
name|size
argument_list|()
operator|>
name|numPartKeys
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Incorrect number of partition values."
operator|+
literal|" numPartKeys="
operator|+
name|numPartKeys
operator|+
literal|", partSpecs="
operator|+
name|partSpecs
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|partCols
operator|=
name|partCols
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|partSpecs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Construct a pattern of the form: partKey=partVal/partKey2=partVal2/...
comment|// where partVal is either the escaped partition value given as input,
comment|// or a regex of the form ".*"
comment|// This works because the "=" and "/" separating key names and partition key/values
comment|// are not escaped.
name|String
name|partNameMatcher
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|partCols
argument_list|,
name|partSpecs
argument_list|,
literal|".*"
argument_list|)
decl_stmt|;
comment|// add ".*" to the regex to match anything else afterwards the partial spec.
if|if
condition|(
name|partSpecs
operator|.
name|size
argument_list|()
operator|<
name|numPartKeys
condition|)
block|{
name|partNameMatcher
operator|+=
literal|".*"
expr_stmt|;
block|}
return|return
name|partNameMatcher
return|;
block|}
comment|// Note: ideally this should be above both CachedStore and ObjectStore.
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|adjustStatsParamsForGet
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|long
name|statsWriteId
parameter_list|,
name|String
name|validWriteIds
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|TxnUtils
operator|.
name|isTransactionalTable
argument_list|(
name|tableParams
argument_list|)
condition|)
return|return
name|params
return|;
comment|// Not a txn table.
if|if
condition|(
name|areTxnStatsSupported
operator|&&
operator|(
operator|(
name|validWriteIds
operator|==
literal|null
operator|)
operator|||
name|ObjectStore
operator|.
name|isCurrentStatsValidForTheQuery
argument_list|(
name|params
argument_list|,
name|statsWriteId
argument_list|,
name|validWriteIds
argument_list|,
literal|false
argument_list|)
operator|)
condition|)
block|{
comment|// Valid stats are supported for txn tables, and either no verification was requested by the
comment|// caller, or the verification has succeeded.
return|return
name|params
return|;
block|}
comment|// Clone the map to avoid affecting the cached value.
name|params
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|params
argument_list|,
name|StatsSetupConst
operator|.
name|FALSE
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
comment|// Note: ideally this should be above both CachedStore and ObjectStore.
specifier|public
specifier|static
name|ColumnStatistics
name|adjustColStatForGet
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
parameter_list|,
name|ColumnStatistics
name|colStat
parameter_list|,
name|long
name|statsWriteId
parameter_list|,
name|String
name|validWriteIds
parameter_list|,
name|boolean
name|areTxnStatsSupported
parameter_list|)
throws|throws
name|MetaException
block|{
name|colStat
operator|.
name|setIsStatsCompliant
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|TxnUtils
operator|.
name|isTransactionalTable
argument_list|(
name|tableParams
argument_list|)
condition|)
return|return
name|colStat
return|;
comment|// Not a txn table.
if|if
condition|(
name|areTxnStatsSupported
operator|&&
operator|(
operator|(
name|validWriteIds
operator|==
literal|null
operator|)
operator|||
name|ObjectStore
operator|.
name|isCurrentStatsValidForTheQuery
argument_list|(
name|tableParams
argument_list|,
name|statsWriteId
argument_list|,
name|validWriteIds
argument_list|,
literal|false
argument_list|)
operator|)
condition|)
block|{
comment|// Valid stats are supported for txn tables, and either no verification was requested by the
comment|// caller, or the verification has succeeded.
return|return
name|colStat
return|;
block|}
comment|// Don't clone; ColStats objects are not cached, only their parts.
name|colStat
operator|.
name|setIsStatsCompliant
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|colStat
return|;
block|}
specifier|private
specifier|static
name|void
name|updateTableColumnsStatsInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ColumnStatistics
name|colStats
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams
parameter_list|,
name|String
name|validWriteIds
parameter_list|,
name|long
name|writeId
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|catName
init|=
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isSetCatName
argument_list|()
condition|?
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return;
block|}
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// The table is not yet loaded in cache
return|return;
block|}
name|boolean
name|isTxn
init|=
name|TxnUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTxn
operator|&&
name|validWriteIds
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|areTxnStatsSupported
condition|)
block|{
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|newParams
argument_list|,
name|StatsSetupConst
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|errorMsg
init|=
name|ObjectStore
operator|.
name|verifyStatsChangeCtx
argument_list|(
name|TableName
operator|.
name|getDbTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|,
name|table
operator|.
name|getParameters
argument_list|()
argument_list|,
name|newParams
argument_list|,
name|writeId
argument_list|,
name|validWriteIds
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorMsg
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|ObjectStore
operator|.
name|isCurrentStatsValidForTheQuery
argument_list|(
name|newParams
argument_list|,
name|table
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|validWriteIds
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// Make sure we set the flag to invalid regardless of the current value.
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|newParams
argument_list|,
name|StatsSetupConst
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed COLUMN_STATS_ACCURATE from the parameters of the table "
operator|+
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|table
operator|.
name|setWriteId
argument_list|(
name|writeId
argument_list|)
expr_stmt|;
name|table
operator|.
name|setParameters
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterTableInCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|updateTableColStatsInCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colStats
operator|.
name|getStatsObj
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateTableColumnStatistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|,
name|String
name|validWriteIds
parameter_list|,
name|long
name|writeId
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams
init|=
name|rawStore
operator|.
name|updateTableColumnStatistics
argument_list|(
name|colStats
argument_list|,
name|validWriteIds
argument_list|,
name|writeId
argument_list|)
decl_stmt|;
comment|// in case of event based cache update, cache will be updated during commit.
if|if
condition|(
name|newParams
operator|!=
literal|null
operator|&&
operator|!
name|canUseEvents
condition|)
block|{
name|updateTableColumnsStatsInternal
argument_list|(
name|conf
argument_list|,
name|colStats
argument_list|,
name|newParams
argument_list|,
literal|null
argument_list|,
name|writeId
argument_list|)
expr_stmt|;
block|}
return|return
name|newParams
return|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnStatistics
name|getTableColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnStatistics
name|getTableColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|String
name|validWriteIds
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|catName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|,
name|validWriteIds
argument_list|)
return|;
block|}
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// The table is not yet loaded in cache
return|return
name|rawStore
operator|.
name|getTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|,
name|validWriteIds
argument_list|)
return|;
block|}
name|ColumnStatistics
name|columnStatistics
init|=
name|sharedCache
operator|.
name|getTableColStatsFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|,
name|validWriteIds
argument_list|,
name|areTxnStatsSupported
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnStatistics
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stat of Table {}.{} for column {} is not present in cache."
operator|+
literal|"Getting from raw store"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
return|return
name|rawStore
operator|.
name|getTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|,
name|validWriteIds
argument_list|)
return|;
block|}
return|return
name|columnStatistics
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteTableColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|deleteTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|)
decl_stmt|;
comment|// in case of event based cache update, cache is updated during commit txn
if|if
condition|(
name|succ
operator|&&
operator|!
name|canUseEvents
condition|)
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|sharedCache
operator|.
name|removeTableColStatsFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updatePartitionColumnStatistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|validWriteIds
parameter_list|,
name|long
name|writeId
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams
init|=
name|rawStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|colStats
argument_list|,
name|partVals
argument_list|,
name|validWriteIds
argument_list|,
name|writeId
argument_list|)
decl_stmt|;
comment|// in case of event based cache update, cache is updated during commit txn
if|if
condition|(
name|newParams
operator|!=
literal|null
operator|&&
operator|!
name|canUseEvents
condition|)
block|{
name|String
name|catName
init|=
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isSetCatName
argument_list|()
condition|?
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
else|:
name|DEFAULT_CATALOG_NAME
decl_stmt|;
name|String
name|dbName
init|=
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|newParams
return|;
block|}
name|Partition
name|part
init|=
name|getPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|part
operator|.
name|setParameters
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterPartitionInCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|part
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|updatePartitionColStatsInCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|colStats
operator|.
name|getStatsObj
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|newParams
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getPartitionColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|String
name|writeIdList
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
comment|// If writeIdList is not null, that means stats are requested within a txn context. So set stats compliant to false,
comment|// if areTxnStatsSupported is false or the write id which has updated the stats in not compatible with writeIdList.
comment|// This is done within table lock as the number of partitions may be more than one and we need a consistent view
comment|// for all the partitions.
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|columnStatistics
init|=
name|sharedCache
operator|.
name|getPartitionColStatsListFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
name|writeIdList
argument_list|,
name|areTxnStatsSupported
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnStatistics
operator|==
literal|null
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
name|writeIdList
argument_list|)
return|;
block|}
return|return
name|columnStatistics
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deletePartitionColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|partName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|deletePartitionColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|partVals
argument_list|,
name|colName
argument_list|)
decl_stmt|;
comment|// in case of event based cache update, cache is updated during commit txn.
if|if
condition|(
name|succ
operator|&&
operator|!
name|canUseEvents
condition|)
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|sharedCache
operator|.
name|removePartitionColStatsFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|AggrStats
name|get_aggr_stats_for
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|get_aggr_stats_for
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AggrStats
name|get_aggr_stats_for
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|String
name|writeIdList
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
decl_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
comment|// TODO: we currently cannot do transactional checks for stats here
comment|//       (incl. due to lack of sync w.r.t. the below rawStore call).
comment|// In case the cache is updated using events, aggregate is calculated locally and thus can be read from cache.
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|||
operator|(
name|writeIdList
operator|!=
literal|null
operator|&&
operator|!
name|canUseEvents
operator|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
name|writeIdList
argument_list|)
return|;
block|}
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// The table is not yet loaded in cache
return|return
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
name|writeIdList
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|allPartNames
init|=
name|rawStore
operator|.
name|listPartitionNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|StatsType
name|type
init|=
name|StatsType
operator|.
name|PARTIAL
decl_stmt|;
if|if
condition|(
name|partNames
operator|.
name|size
argument_list|()
operator|==
name|allPartNames
operator|.
name|size
argument_list|()
condition|)
block|{
name|colStats
operator|=
name|sharedCache
operator|.
name|getAggrStatsFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|,
name|StatsType
operator|.
name|ALL
argument_list|)
expr_stmt|;
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|AggrStats
argument_list|(
name|colStats
argument_list|,
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
name|type
operator|=
name|StatsType
operator|.
name|ALL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|partNames
operator|.
name|size
argument_list|()
operator|==
operator|(
name|allPartNames
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|String
name|defaultPartitionName
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|partNames
operator|.
name|contains
argument_list|(
name|defaultPartitionName
argument_list|)
condition|)
block|{
name|colStats
operator|=
name|sharedCache
operator|.
name|getAggrStatsFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|,
name|StatsType
operator|.
name|ALLBUTDEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|AggrStats
argument_list|(
name|colStats
argument_list|,
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
name|type
operator|=
name|StatsType
operator|.
name|ALLBUTDEFAULT
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Didn't find aggr stats in cache. Merging them. tblName= {}, parts= {}, cols= {}"
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|MergedColumnStatsForPartitions
name|mergedColStats
init|=
name|mergeColStatsForPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
name|sharedCache
argument_list|,
name|type
argument_list|,
name|writeIdList
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergedColStats
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Aggregate stats of partition "
operator|+
name|TableName
operator|.
name|getQualified
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|+
literal|"."
operator|+
name|partNames
operator|+
literal|" for columns "
operator|+
name|colNames
operator|+
literal|" is not present in cache. Getting it from raw store"
argument_list|)
expr_stmt|;
return|return
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
name|writeIdList
argument_list|)
return|;
block|}
return|return
operator|new
name|AggrStats
argument_list|(
name|mergedColStats
operator|.
name|getColStats
argument_list|()
argument_list|,
name|mergedColStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|MergedColumnStatsForPartitions
name|mergeColStatsForPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|,
name|StatsType
name|type
parameter_list|,
name|String
name|writeIdList
parameter_list|)
throws|throws
name|MetaException
block|{
specifier|final
name|boolean
name|useDensityFunctionForNDVEstimation
init|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|STATS_NDV_DENSITY_FUNCTION
argument_list|)
decl_stmt|;
specifier|final
name|double
name|ndvTuner
init|=
name|MetastoreConf
operator|.
name|getDoubleVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|STATS_NDV_TUNER
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ColumnStatsAggregator
argument_list|,
name|List
argument_list|<
name|ColStatsObjWithSourceInfo
argument_list|>
argument_list|>
name|colStatsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|partsFound
init|=
name|partNames
operator|.
name|size
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|Long
argument_list|>
name|partNameToWriteId
init|=
name|writeIdList
operator|!=
literal|null
condition|?
operator|new
name|HashMap
argument_list|<>
argument_list|()
else|:
literal|null
decl_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|colNames
control|)
block|{
name|long
name|partsFoundForColumn
init|=
literal|0
decl_stmt|;
name|ColumnStatsAggregator
name|colStatsAggregator
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ColStatsObjWithSourceInfo
argument_list|>
name|colStatsWithPartInfoList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partValue
init|=
name|partNameToVals
argument_list|(
name|partName
argument_list|)
decl_stmt|;
comment|// There are three possible result from getPartitionColStatsFromCache.
comment|// 1. The partition has valid stats and thus colStatsWriteId returned is valid non-null value
comment|// 2. Partition stat is missing from cache and thus colStatsWriteId returned is non-null but colstat
comment|//    info in it is null. In this case we just ignore the partition from aggregate calculation to keep
comment|//    the behavior same as object store.
comment|// 3. Partition is missing or its stat is updated by live(not yet committed) or aborted txn. In this case,
comment|//    colStatsWriteId is null. Thus null is returned to keep the behavior same as object store.
name|SharedCache
operator|.
name|ColumStatsWithWriteId
name|colStatsWriteId
init|=
name|sharedCache
operator|.
name|getPartitionColStatsFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partValue
argument_list|,
name|colName
argument_list|,
name|writeIdList
argument_list|)
decl_stmt|;
if|if
condition|(
name|colStatsWriteId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|colStatsWriteId
operator|.
name|getColumnStatisticsObj
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ColumnStatisticsObj
name|colStatsForPart
init|=
name|colStatsWriteId
operator|.
name|getColumnStatisticsObj
argument_list|()
decl_stmt|;
if|if
condition|(
name|partNameToWriteId
operator|!=
literal|null
condition|)
block|{
name|partNameToWriteId
operator|.
name|put
argument_list|(
name|partValue
argument_list|,
name|colStatsWriteId
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ColStatsObjWithSourceInfo
name|colStatsWithPartInfo
init|=
operator|new
name|ColStatsObjWithSourceInfo
argument_list|(
name|colStatsForPart
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
name|colStatsWithPartInfoList
operator|.
name|add
argument_list|(
name|colStatsWithPartInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|colStatsAggregator
operator|==
literal|null
condition|)
block|{
name|colStatsAggregator
operator|=
name|ColumnStatsAggregatorFactory
operator|.
name|getColumnStatsAggregator
argument_list|(
name|colStatsForPart
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|,
name|useDensityFunctionForNDVEstimation
argument_list|,
name|ndvTuner
argument_list|)
expr_stmt|;
block|}
name|partsFoundForColumn
operator|++
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stats not found in CachedStore for: dbName={} tblName={} partName={} colName={}"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|colStatsWithPartInfoList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|colStatsMap
operator|.
name|put
argument_list|(
name|colStatsAggregator
argument_list|,
name|colStatsWithPartInfoList
argument_list|)
expr_stmt|;
block|}
comment|// set partsFound to the min(partsFoundForColumn) for all columns. partsFound is the number of partitions, for
comment|// which stats for all columns are present in the cache.
if|if
condition|(
name|partsFoundForColumn
operator|<
name|partsFound
condition|)
block|{
name|partsFound
operator|=
name|partsFoundForColumn
expr_stmt|;
block|}
if|if
condition|(
name|colStatsMap
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No stats data found for: dbName={} tblName= {} partNames= {} colNames= "
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
return|return
operator|new
name|MergedColumnStatsForPartitions
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
comment|// Note that enableBitVector does not apply here because ColumnStatisticsObj
comment|// itself will tell whether bitvector is null or not and aggr logic can automatically apply.
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colAggrStats
init|=
name|MetaStoreServerUtils
operator|.
name|aggrPartitionStats
argument_list|(
name|colStatsMap
argument_list|,
name|partNames
argument_list|,
name|partsFound
operator|==
name|partNames
operator|.
name|size
argument_list|()
argument_list|,
name|useDensityFunctionForNDVEstimation
argument_list|,
name|ndvTuner
argument_list|)
decl_stmt|;
if|if
condition|(
name|canUseEvents
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|StatsType
operator|.
name|ALL
condition|)
block|{
name|sharedCache
operator|.
name|refreshAggregateStatsInCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
operator|new
name|AggrStats
argument_list|(
name|colAggrStats
argument_list|,
name|partsFound
argument_list|)
argument_list|,
literal|null
argument_list|,
name|partNameToWriteId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|StatsType
operator|.
name|ALLBUTDEFAULT
condition|)
block|{
name|sharedCache
operator|.
name|refreshAggregateStatsInCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|AggrStats
argument_list|(
name|colAggrStats
argument_list|,
name|partsFound
argument_list|)
argument_list|,
name|partNameToWriteId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MergedColumnStatsForPartitions
argument_list|(
name|colAggrStats
argument_list|,
name|partsFound
argument_list|)
return|;
block|}
class|class
name|MergedColumnStatsForPartitions
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|partsFound
decl_stmt|;
name|MergedColumnStatsForPartitions
parameter_list|(
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
parameter_list|,
name|long
name|partsFound
parameter_list|)
block|{
name|this
operator|.
name|colStats
operator|=
name|colStats
expr_stmt|;
name|this
operator|.
name|partsFound
operator|=
name|partsFound
expr_stmt|;
block|}
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getColStats
parameter_list|()
block|{
return|return
name|colStats
return|;
block|}
name|long
name|getPartsFound
parameter_list|()
block|{
return|return
name|partsFound
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|cleanupEvents
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|cleanupEvents
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|,
name|String
name|delegationToken
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|addToken
argument_list|(
name|tokenIdentifier
argument_list|,
name|delegationToken
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|removeToken
argument_list|(
name|tokenIdentifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getToken
argument_list|(
name|tokenIdentifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTokenIdentifiers
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|getAllTokenIdentifiers
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|addMasterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|addMasterKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMasterKey
parameter_list|(
name|Integer
name|seqNo
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|updateMasterKey
argument_list|(
name|seqNo
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeMasterKey
parameter_list|(
name|Integer
name|keySeq
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|removeMasterKey
argument_list|(
name|keySeq
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getMasterKeys
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|getMasterKeys
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verifySchema
parameter_list|()
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|verifySchema
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMetaStoreSchemaVersion
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getMetaStoreSchemaVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMetaStoreSchemaVersion
parameter_list|(
name|String
name|version
parameter_list|,
name|String
name|comment
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|setMetaStoreSchemaVersion
argument_list|(
name|version
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalDBGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalDBGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalTableGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalPartitionGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableColumnGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalTableColumnGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalPartitionColumnGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listGlobalGrantsAll
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|listGlobalGrantsAll
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listDBGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listDBGrantsAll
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPartitionColumnGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPartitionColumnGrantsAll
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listTableGrantsAll
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPartitionGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPartitionGrantsAll
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableColumnGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listTableColumnGrantsAll
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createFunction
parameter_list|(
name|Function
name|func
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO fucntionCache
name|rawStore
operator|.
name|createFunction
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|,
name|Function
name|newFunction
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO fucntionCache
name|rawStore
operator|.
name|alterFunction
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|funcName
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
comment|// TODO fucntionCache
name|rawStore
operator|.
name|dropFunction
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Function
name|getFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO fucntionCache
return|return
name|rawStore
operator|.
name|getFunction
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|funcName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Function
argument_list|>
name|getAllFunctions
parameter_list|(
name|String
name|catName
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO fucntionCache
return|return
name|rawStore
operator|.
name|getAllFunctions
argument_list|(
name|catName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO fucntionCache
return|return
name|rawStore
operator|.
name|getFunctions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|pattern
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NotificationEventResponse
name|getNextNotification
parameter_list|(
name|NotificationEventRequest
name|rqst
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getNextNotification
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNotificationEvent
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|addNotificationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanNotificationEvents
parameter_list|(
name|int
name|olderThan
parameter_list|)
block|{
name|rawStore
operator|.
name|cleanNotificationEvents
argument_list|(
name|olderThan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CurrentNotificationEventId
name|getCurrentNotificationEventId
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|getCurrentNotificationEventId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NotificationEventsCountResponse
name|getNotificationEventsCount
parameter_list|(
name|NotificationEventsCountRequest
name|rqst
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getNotificationEventsCount
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flushCache
parameter_list|()
block|{
name|rawStore
operator|.
name|flushCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
index|[]
name|getFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getFileMetadata
argument_list|(
name|fileIds
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|metadata
parameter_list|,
name|FileMetadataExprType
name|type
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|putFileMetadata
argument_list|(
name|fileIds
argument_list|,
name|metadata
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFileMetadataSupported
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|isFileMetadataSupported
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getFileMetadataByExpr
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|FileMetadataExprType
name|type
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|ByteBuffer
index|[]
name|metadatas
parameter_list|,
name|ByteBuffer
index|[]
name|exprResults
parameter_list|,
name|boolean
index|[]
name|eliminated
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|getFileMetadataByExpr
argument_list|(
name|fileIds
argument_list|,
name|type
argument_list|,
name|expr
argument_list|,
name|metadatas
argument_list|,
name|exprResults
argument_list|,
name|eliminated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FileMetadataHandler
name|getFileMetadataHandler
parameter_list|(
name|FileMetadataExprType
name|type
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getFileMetadataHandler
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTableCount
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getTableCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPartitionCount
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getPartitionCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDatabaseCount
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getDatabaseCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeys
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|getPrimaryKeys
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeys
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|parent_db_name
parameter_list|,
name|String
name|parent_tbl_name
parameter_list|,
name|String
name|foreign_db_name
parameter_list|,
name|String
name|foreign_tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|getForeignKeys
argument_list|(
name|catName
argument_list|,
name|parent_db_name
argument_list|,
name|parent_tbl_name
argument_list|,
name|foreign_db_name
argument_list|,
name|foreign_tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getUniqueConstraints
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|getUniqueConstraints
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getNotNullConstraints
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|getNotNullConstraints
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|getDefaultConstraints
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|getDefaultConstraints
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|getCheckConstraints
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|getCheckConstraints
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|createTableWithConstraints
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|,
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
parameter_list|,
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
parameter_list|,
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|defaultConstraints
parameter_list|,
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|checkConstraints
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
name|List
argument_list|<
name|String
argument_list|>
name|constraintNames
init|=
name|rawStore
operator|.
name|createTableWithConstraints
argument_list|(
name|tbl
argument_list|,
name|primaryKeys
argument_list|,
name|foreignKeys
argument_list|,
name|uniqueConstraints
argument_list|,
name|notNullConstraints
argument_list|,
name|defaultConstraints
argument_list|,
name|checkConstraints
argument_list|)
decl_stmt|;
comment|// in case of event based cache update, cache is updated during commit.
if|if
condition|(
name|canUseEvents
condition|)
block|{
return|return
name|constraintNames
return|;
block|}
name|String
name|dbName
init|=
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|catName
init|=
name|tbl
operator|.
name|isSetCatName
argument_list|()
condition|?
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getCatName
argument_list|()
argument_list|)
else|:
name|DEFAULT_CATALOG_NAME
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|constraintNames
return|;
block|}
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getCatName
argument_list|()
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
return|return
name|constraintNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropConstraint
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|constraintName
parameter_list|,
name|boolean
name|missingOk
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
comment|// TODO constraintCache
name|rawStore
operator|.
name|dropConstraint
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|constraintName
argument_list|,
name|missingOk
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addPrimaryKeys
parameter_list|(
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|addPrimaryKeys
argument_list|(
name|pks
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addForeignKeys
parameter_list|(
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|addForeignKeys
argument_list|(
name|fks
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addUniqueConstraints
parameter_list|(
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|addUniqueConstraints
argument_list|(
name|uks
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addNotNullConstraints
parameter_list|(
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|nns
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|addNotNullConstraints
argument_list|(
name|nns
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addDefaultConstraints
parameter_list|(
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|nns
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|addDefaultConstraints
argument_list|(
name|nns
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addCheckConstraints
parameter_list|(
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|nns
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|addCheckConstraints
argument_list|(
name|nns
argument_list|)
return|;
block|}
comment|// TODO - not clear if we should cache these or not.  For now, don't bother
annotation|@
name|Override
specifier|public
name|void
name|createISchema
parameter_list|(
name|ISchema
name|schema
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ColStatsObjWithSourceInfo
argument_list|>
name|getPartitionColStatsForDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getPartitionColStatsForDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterISchema
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|,
name|ISchema
name|newSchema
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterISchema
argument_list|(
name|schemaName
argument_list|,
name|newSchema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ISchema
name|getISchema
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getISchema
argument_list|(
name|schemaName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropISchema
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropISchema
argument_list|(
name|schemaName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addSchemaVersion
parameter_list|(
name|SchemaVersion
name|schemaVersion
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterSchemaVersion
parameter_list|(
name|SchemaVersionDescriptor
name|version
parameter_list|,
name|SchemaVersion
name|newVersion
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterSchemaVersion
argument_list|(
name|version
argument_list|,
name|newVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SchemaVersion
name|getSchemaVersion
parameter_list|(
name|SchemaVersionDescriptor
name|version
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getSchemaVersion
argument_list|(
name|version
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SchemaVersion
name|getLatestSchemaVersion
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getLatestSchemaVersion
argument_list|(
name|schemaName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SchemaVersion
argument_list|>
name|getAllSchemaVersion
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getAllSchemaVersion
argument_list|(
name|schemaName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SchemaVersion
argument_list|>
name|getSchemaVersionsByColumns
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|colNamespace
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getSchemaVersionsByColumns
argument_list|(
name|colName
argument_list|,
name|colNamespace
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropSchemaVersion
parameter_list|(
name|SchemaVersionDescriptor
name|version
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropSchemaVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeInfo
name|getSerDeInfo
parameter_list|(
name|String
name|serDeName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getSerDeInfo
argument_list|(
name|serDeName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addSerde
parameter_list|(
name|SerDeInfo
name|serde
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|addSerde
argument_list|(
name|serde
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RawStore
name|getRawStore
parameter_list|()
block|{
return|return
name|rawStore
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|setRawStore
parameter_list|(
name|RawStore
name|rawStore
parameter_list|)
block|{
name|this
operator|.
name|rawStore
operator|=
name|rawStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMetastoreDbUuid
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getMetastoreDbUuid
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createResourcePlan
parameter_list|(
name|WMResourcePlan
name|resourcePlan
parameter_list|,
name|String
name|copyFrom
parameter_list|,
name|int
name|defaultPoolSize
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|rawStore
operator|.
name|createResourcePlan
argument_list|(
name|resourcePlan
argument_list|,
name|copyFrom
argument_list|,
name|defaultPoolSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|WMFullResourcePlan
name|getResourcePlan
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|ns
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getResourcePlan
argument_list|(
name|name
argument_list|,
name|ns
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|WMResourcePlan
argument_list|>
name|getAllResourcePlans
parameter_list|(
name|String
name|ns
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getAllResourcePlans
argument_list|(
name|ns
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|WMFullResourcePlan
name|alterResourcePlan
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|ns
parameter_list|,
name|WMNullableResourcePlan
name|resourcePlan
parameter_list|,
name|boolean
name|canActivateDisabled
parameter_list|,
name|boolean
name|canDeactivate
parameter_list|,
name|boolean
name|isReplace
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|alterResourcePlan
argument_list|(
name|name
argument_list|,
name|ns
argument_list|,
name|resourcePlan
argument_list|,
name|canActivateDisabled
argument_list|,
name|canDeactivate
argument_list|,
name|isReplace
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|WMFullResourcePlan
name|getActiveResourcePlan
parameter_list|(
name|String
name|ns
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getActiveResourcePlan
argument_list|(
name|ns
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|WMValidateResourcePlanResponse
name|validateResourcePlan
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|ns
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|validateResourcePlan
argument_list|(
name|name
argument_list|,
name|ns
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropResourcePlan
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|ns
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropResourcePlan
argument_list|(
name|name
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createWMTrigger
parameter_list|(
name|WMTrigger
name|trigger
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
block|{
name|rawStore
operator|.
name|createWMTrigger
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterWMTrigger
parameter_list|(
name|WMTrigger
name|trigger
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterWMTrigger
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropWMTrigger
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|,
name|String
name|ns
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropWMTrigger
argument_list|(
name|resourcePlanName
argument_list|,
name|triggerName
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|WMTrigger
argument_list|>
name|getTriggersForResourcePlan
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|ns
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getTriggersForResourcePlan
argument_list|(
name|resourcePlanName
argument_list|,
name|ns
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createPool
parameter_list|(
name|WMPool
name|pool
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createPool
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterPool
parameter_list|(
name|WMNullablePool
name|pool
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterPool
argument_list|(
name|pool
argument_list|,
name|poolPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropWMPool
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|poolPath
parameter_list|,
name|String
name|ns
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropWMPool
argument_list|(
name|resourcePlanName
argument_list|,
name|poolPath
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createOrUpdateWMMapping
parameter_list|(
name|WMMapping
name|mapping
parameter_list|,
name|boolean
name|update
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createOrUpdateWMMapping
argument_list|(
name|mapping
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropWMMapping
parameter_list|(
name|WMMapping
name|mapping
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropWMMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createWMTriggerToPoolMapping
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|,
name|String
name|poolPath
parameter_list|,
name|String
name|ns
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createWMTriggerToPoolMapping
argument_list|(
name|resourcePlanName
argument_list|,
name|triggerName
argument_list|,
name|poolPath
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropWMTriggerToPoolMapping
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|,
name|String
name|poolPath
parameter_list|,
name|String
name|ns
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropWMTriggerToPoolMapping
argument_list|(
name|resourcePlanName
argument_list|,
name|triggerName
argument_list|,
name|poolPath
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getCacheUpdateCount
parameter_list|()
block|{
return|return
name|sharedCache
operator|.
name|getUpdateCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanWriteNotificationEvents
parameter_list|(
name|int
name|olderThan
parameter_list|)
block|{
name|rawStore
operator|.
name|cleanWriteNotificationEvents
argument_list|(
name|olderThan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|WriteEventInfo
argument_list|>
name|getAllWriteEventInfo
parameter_list|(
name|long
name|txnId
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getAllWriteEventInfo
argument_list|(
name|txnId
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isNotInBlackList
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|String
name|str
init|=
name|TableName
operator|.
name|getQualified
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
for|for
control|(
name|Pattern
name|pattern
range|:
name|blacklistPatterns
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to match: {} against blacklist pattern: {}"
argument_list|,
name|str
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found matcher group: {} at start index: {} and end index: {}"
argument_list|,
name|matcher
operator|.
name|group
argument_list|()
argument_list|,
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isInWhitelist
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|String
name|str
init|=
name|TableName
operator|.
name|getQualified
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
for|for
control|(
name|Pattern
name|pattern
range|:
name|whitelistPatterns
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to match: {} against whitelist pattern: {}"
argument_list|,
name|str
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found matcher group: {} at start index: {} and end index: {}"
argument_list|,
name|matcher
operator|.
name|group
argument_list|()
argument_list|,
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// For testing
specifier|static
name|void
name|setWhitelistPattern
parameter_list|(
name|List
argument_list|<
name|Pattern
argument_list|>
name|patterns
parameter_list|)
block|{
name|whitelistPatterns
operator|=
name|patterns
expr_stmt|;
block|}
comment|// For testing
specifier|static
name|void
name|setBlacklistPattern
parameter_list|(
name|List
argument_list|<
name|Pattern
argument_list|>
name|patterns
parameter_list|)
block|{
name|blacklistPatterns
operator|=
name|patterns
expr_stmt|;
block|}
comment|// Determines if we should cache a table (& its partitions, stats etc),
comment|// based on whitelist/blacklist
specifier|static
name|boolean
name|shouldCacheTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isNotInBlackList
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}.{} is in blacklist, skipping"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|isInWhitelist
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}.{} is not in whitelist, skipping"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|static
name|List
argument_list|<
name|Pattern
argument_list|>
name|createPatterns
parameter_list|(
name|String
name|configStr
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|patternStrs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|configStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pattern
argument_list|>
name|patterns
init|=
operator|new
name|ArrayList
argument_list|<
name|Pattern
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|patternStrs
control|)
block|{
name|patterns
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|patterns
return|;
block|}
specifier|static
name|boolean
name|isBlacklistWhitelistEmpty
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|MetastoreConf
operator|.
name|getAsString
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHED_OBJECTS_WHITELIST
argument_list|)
operator|.
name|equals
argument_list|(
literal|".*"
argument_list|)
operator|&&
name|MetastoreConf
operator|.
name|getAsString
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHED_OBJECTS_BLACKLIST
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
name|void
name|resetCatalogCache
parameter_list|()
block|{
name|sharedCache
operator|.
name|resetCatalogCache
argument_list|()
expr_stmt|;
name|setCachePrewarmedState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRuntimeStat
parameter_list|(
name|RuntimeStat
name|stat
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|addRuntimeStat
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RuntimeStat
argument_list|>
name|getRuntimeStats
parameter_list|(
name|int
name|maxEntries
parameter_list|,
name|int
name|maxCreateTime
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getRuntimeStats
argument_list|(
name|maxEntries
argument_list|,
name|maxCreateTime
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|deleteRuntimeStats
parameter_list|(
name|int
name|maxRetainSecs
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|deleteRuntimeStats
argument_list|(
name|maxRetainSecs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableName
argument_list|>
name|getTableNamesWithStats
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getTableNamesWithStats
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableName
argument_list|>
name|getAllTableNamesForStats
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getAllTableNamesForStats
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPartitionColsWithStats
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getPartitionColsWithStats
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

