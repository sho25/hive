begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * A utility class that can convert a HashMap of Properties into a colon separated string,  * and can take the same format of string and convert it to a HashMap of Properties.  */
end_comment

begin_class
specifier|public
class|class
name|StringableMap
extends|extends
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
block|{
specifier|public
name|StringableMap
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|s
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// read that many chars
name|int
name|numElements
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|s
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElements
condition|;
name|i
operator|++
control|)
block|{
name|parts
operator|=
name|s
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
name|key
operator|=
name|parts
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|parts
operator|=
name|parts
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
name|len
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|len
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
name|value
operator|=
name|parts
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|s
operator|=
name|parts
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|StringableMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
parameter_list|)
block|{
name|super
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entrySet
argument_list|()
control|)
block|{
name|int
name|length
init|=
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|length
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
name|buf
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|length
operator|=
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
name|buf
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Properties
name|toProperties
parameter_list|()
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
block|}
end_class

end_unit

