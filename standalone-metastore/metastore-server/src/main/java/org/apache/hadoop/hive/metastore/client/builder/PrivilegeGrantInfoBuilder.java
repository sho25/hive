begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Builder for {@link PrivilegeGrantInfo}.  The privilege is required.  If not provided the grantor  * is  * assumed to be the current user.  This is really intended for use by the  * {@link HiveObjectPrivilegeBuilder}.  */
end_comment

begin_class
specifier|public
class|class
name|PrivilegeGrantInfoBuilder
block|{
specifier|private
name|String
name|privilege
decl_stmt|,
name|grantor
decl_stmt|;
specifier|private
name|int
name|createTime
decl_stmt|;
specifier|private
name|PrincipalType
name|grantorType
decl_stmt|;
specifier|private
name|boolean
name|grantOption
decl_stmt|;
specifier|public
name|PrivilegeGrantInfoBuilder
parameter_list|()
block|{
name|createTime
operator|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|grantOption
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|PrivilegeGrantInfoBuilder
name|setPrivilege
parameter_list|(
name|String
name|privilege
parameter_list|)
block|{
name|this
operator|.
name|privilege
operator|=
name|privilege
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|PrivilegeGrantInfoBuilder
name|setGrantor
parameter_list|(
name|String
name|grantor
parameter_list|)
block|{
name|this
operator|.
name|grantor
operator|=
name|grantor
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|PrivilegeGrantInfoBuilder
name|setCreateTime
parameter_list|(
name|int
name|createTime
parameter_list|)
block|{
name|this
operator|.
name|createTime
operator|=
name|createTime
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|PrivilegeGrantInfoBuilder
name|setGrantorType
parameter_list|(
name|PrincipalType
name|grantorType
parameter_list|)
block|{
name|this
operator|.
name|grantorType
operator|=
name|grantorType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|PrivilegeGrantInfoBuilder
name|setGrantOption
parameter_list|(
name|boolean
name|grantOption
parameter_list|)
block|{
name|this
operator|.
name|grantOption
operator|=
name|grantOption
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|PrivilegeGrantInfo
name|build
parameter_list|()
throws|throws
name|MetaException
block|{
if|if
condition|(
name|privilege
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Privilege must be provided."
argument_list|)
throw|;
block|}
if|if
condition|(
name|grantor
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|grantor
operator|=
name|SecurityUtils
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|grantorType
operator|=
name|PrincipalType
operator|.
name|USER
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|MetaStoreUtils
operator|.
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|privilege
argument_list|,
name|createTime
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
block|}
end_class

end_unit

