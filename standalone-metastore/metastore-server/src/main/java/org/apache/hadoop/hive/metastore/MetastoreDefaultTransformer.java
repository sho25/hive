begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ACCESSTYPE_NONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ACCESSTYPE_READONLY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ACCESSTYPE_READWRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ACCESSTYPE_WRITEONLY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MetastoreDefaultTransformer
implements|implements
name|IMetaStoreMetadataTransformer
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetastoreDefaultTransformer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|IHMSHandler
name|hmsHandler
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONNECTORREAD
init|=
literal|"CONNECTORREAD"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONNECTORWRITE
init|=
literal|"CONNECTORWRITE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTWRITE
init|=
literal|"EXTWRITE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTREAD
init|=
literal|"EXTREAD"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEACIDWRITE
init|=
literal|"HIVEACIDWRITE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEBUCKET2
init|=
literal|"HIVEBUCKET2"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVECACHEINVALIDATE
init|=
literal|"HIVECACHEINVALIDATE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEFULLACIDREAD
init|=
literal|"HIVEFULLACIDREAD"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEFULLACIDWRITE
init|=
literal|"HIVEFULLACIDWRITE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEMANAGEDINSERTREAD
init|=
literal|"HIVEMANAGEDINSERTREAD"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEMANAGEDINSERTWRITE
init|=
literal|"HIVEMANAGEDINSERTWRITE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEMANAGESTATS
init|=
literal|"HIVEMANAGESTATS"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEMQT
init|=
literal|"HIVEMQT"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEONLYMQTWRITE
init|=
literal|"HIVEONLYMQTWRITE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVESQL
init|=
literal|"HIVESQL"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OBJCAPABILITIES
init|=
literal|"OBJCAPABILITIES"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|public
name|MetastoreDefaultTransformer
parameter_list|(
name|IHMSHandler
name|handler
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|this
operator|.
name|hmsHandler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|transform
parameter_list|(
name|List
argument_list|<
name|Table
argument_list|>
name|objects
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|processorCapabilities
parameter_list|,
name|String
name|processorId
parameter_list|)
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting translation for processor "
operator|+
name|processorId
operator|+
literal|" on list "
operator|+
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|objects
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|String
name|tableType
init|=
name|table
operator|.
name|getTableType
argument_list|()
decl_stmt|;
name|String
name|tCapabilities
init|=
name|params
operator|.
name|get
argument_list|(
name|OBJCAPABILITIES
argument_list|)
decl_stmt|;
name|int
name|numBuckets
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
decl_stmt|;
name|boolean
name|isBucketed
init|=
operator|(
name|numBuckets
operator|>
literal|0
operator|)
condition|?
literal|true
else|:
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|generated
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|",#bucket="
operator|+
name|numBuckets
operator|+
literal|",isBucketed:"
operator|+
name|isBucketed
operator|+
literal|",tableType="
operator|+
name|tableType
operator|+
literal|",tableCapabilities="
operator|+
name|tCapabilities
argument_list|)
expr_stmt|;
comment|// if the table has no tCapabilities, then generate default ones
if|if
condition|(
name|tCapabilities
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table has no specific required capabilities"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
literal|"EXTERNAL_TABLE"
case|:
name|Table
name|newTable
init|=
operator|new
name|Table
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|EXTREAD
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|EXTWRITE
argument_list|)
expr_stmt|;
if|if
condition|(
name|numBuckets
operator|>
literal|0
condition|)
block|{
name|generated
operator|.
name|add
argument_list|(
name|HIVEBUCKET2
argument_list|)
expr_stmt|;
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
condition|)
block|{
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|newSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newSd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove bucketing info
name|newTable
operator|.
name|setSd
argument_list|(
name|newSd
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Unbucketed, so RW for all
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
name|newTable
argument_list|,
name|generated
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"MANAGED_TABLE"
case|:
name|String
name|txnal
init|=
name|params
operator|.
name|get
argument_list|(
literal|"transactional"
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnal
operator|==
literal|null
operator|||
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
comment|// non-ACID MANAGED table
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
comment|// table does not require any capabilities for full RW
block|}
if|if
condition|(
name|txnal
operator|!=
literal|null
operator|&&
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRUE"
argument_list|)
condition|)
block|{
comment|// ACID table
if|if
condition|(
operator|!
operator|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDREAD
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMANAGEDINSERTREAD
argument_list|)
operator|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
comment|// clients have no access to ACID tables without capabilities
name|generated
operator|.
name|add
argument_list|(
name|CONNECTORREAD
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|CONNECTORWRITE
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|HIVECACHEINVALIDATE
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|HIVEMANAGESTATS
argument_list|)
expr_stmt|;
block|}
name|String
name|txntype
init|=
name|params
operator|.
name|get
argument_list|(
literal|"transactional_properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|txntype
operator|!=
literal|null
operator|&&
name|txntype
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"insert_only"
argument_list|)
condition|)
block|{
comment|// MICRO_MANAGED Tables
name|generated
operator|.
name|add
argument_list|(
name|HIVEMANAGEDINSERTREAD
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|HIVEMANAGEDINSERTWRITE
argument_list|)
expr_stmt|;
comment|// MGD table is insert only, not full ACID
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMANAGEDINSERTWRITE
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORWRITE
argument_list|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
comment|// clients have RW access to INSERT-ONLY ACID tables
block|}
elseif|else
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMANAGEDINSERTREAD
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
comment|// clients have RO access to INSERT-ONLY ACID tables
block|}
else|else
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
comment|// clients have NO access to INSERT-ONLY ACID tables
block|}
block|}
else|else
block|{
comment|// FULL ACID MANAGED TABLE
name|generated
operator|.
name|add
argument_list|(
name|HIVEFULLACIDWRITE
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|HIVEFULLACIDREAD
argument_list|)
expr_stmt|;
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDWRITE
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORWRITE
argument_list|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
comment|// clients have RW access to IUD ACID tables
block|}
elseif|else
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDREAD
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
comment|// clients have RO access to IUD ACID tables
block|}
else|else
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
comment|// clients have NO access to IUD ACID tables
block|}
block|}
block|}
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|generated
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"VIRTUAL_VIEW"
case|:
name|generated
operator|.
name|add
argument_list|(
literal|"HIVESQL"
argument_list|)
expr_stmt|;
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVESQL
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|generated
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"MATERIALIZED_VIEW"
case|:
name|generated
operator|.
name|add
argument_list|(
name|CONNECTORREAD
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|HIVEFULLACIDREAD
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|HIVEONLYMQTWRITE
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|HIVEMANAGESTATS
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|HIVEMQT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDREAD
argument_list|)
operator|)
operator|&&
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMQT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processor has one of the READ abilities and HIVEMQT, AccessType=RO"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processor has no READ abilities or HIVEMQT, AccessType=None"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|generated
argument_list|)
expr_stmt|;
break|break;
default|default:
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
break|break;
block|}
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|generated
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// WITH CAPABLITIES ON TABLE
name|tCapabilities
operator|=
name|tCapabilities
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
comment|// remove spaces between tCapabilities + toUppercase
name|List
argument_list|<
name|String
argument_list|>
name|requiredCapabilities
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tCapabilities
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
literal|"EXTERNAL_TABLE"
case|:
if|if
condition|(
name|processorCapabilities
operator|.
name|containsAll
argument_list|(
name|requiredCapabilities
argument_list|)
condition|)
block|{
comment|// AccessType is RW
name|LOG
operator|.
name|info
argument_list|(
literal|"Abilities for match: Table type="
operator|+
name|tableType
operator|+
literal|",accesstype is RW"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
break|break;
block|}
name|Table
name|newTable
init|=
operator|new
name|Table
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|boolean
name|removedBucketing
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
operator|&&
operator|!
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
condition|)
block|{
name|StorageDescriptor
name|newSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newSd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// removing bucketing if HIVEBUCKET2 isnt specified
name|newTable
operator|.
name|setSd
argument_list|(
name|newSd
argument_list|)
expr_stmt|;
name|removedBucketing
operator|=
literal|true
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed bucketing information from table"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|EXTWRITE
argument_list|)
operator|&&
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|EXTWRITE
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|removedBucketing
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"EXTWRITE Matches, accessType="
operator|+
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|EXTREAD
argument_list|)
operator|&&
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|EXTREAD
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"EXTREAD Matches, accessType="
operator|+
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No matches, accessType="
operator|+
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"setting required to "
operator|+
name|requiredCapabilities
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|newTable
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"MANAGED_TABLE"
case|:
if|if
condition|(
name|processorCapabilities
operator|.
name|containsAll
argument_list|(
name|requiredCapabilities
argument_list|)
condition|)
block|{
comment|// AccessType is RW
name|LOG
operator|.
name|info
argument_list|(
literal|"Abilities for match: Table type="
operator|+
name|tableType
operator|+
literal|",accesstype is RW"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|txnal
init|=
name|params
operator|.
name|get
argument_list|(
literal|"transactional"
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnal
operator|==
literal|null
operator|||
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
comment|// non-ACID MANAGED table
name|LOG
operator|.
name|info
argument_list|(
literal|"Table is non ACID: ,accesstype is RW"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
comment|// table does not require any capabilities for full RW
block|}
if|if
condition|(
name|txnal
operator|!=
literal|null
operator|&&
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRUE"
argument_list|)
condition|)
block|{
comment|// ACID table
name|String
name|txntype
init|=
name|params
operator|.
name|get
argument_list|(
literal|"transactional_properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|txntype
operator|!=
literal|null
operator|&&
name|txntype
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"insert_only"
argument_list|)
condition|)
block|{
comment|// MICRO_MANAGED Tables
name|LOG
operator|.
name|info
argument_list|(
literal|"Table is INSERTONLY ACID: ,accesstype is RW"
argument_list|)
expr_stmt|;
comment|// MGD table is insert only, not full ACID
if|if
condition|(
operator|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMANAGEDINSERTWRITE
argument_list|)
operator|&&
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMANAGEDINSERTWRITE
argument_list|)
operator|)
operator|||
operator|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORWRITE
argument_list|)
operator|&&
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORWRITE
argument_list|)
operator|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
comment|// clients have RW access to INSERT-ONLY ACID tables
block|}
elseif|else
if|if
condition|(
operator|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMANAGEDINSERTREAD
argument_list|)
operator|&&
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMANAGEDINSERTREAD
argument_list|)
operator|)
operator|||
operator|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
operator|&&
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
operator|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// MANAGED FULL ACID TABLES
name|LOG
operator|.
name|info
argument_list|(
literal|"Table is FULL ACID:"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDWRITE
argument_list|)
operator|&&
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDWRITE
argument_list|)
operator|)
operator|||
operator|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORWRITE
argument_list|)
operator|&&
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORWRITE
argument_list|)
operator|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
comment|// clients have RW access to IUD ACID tables
block|}
elseif|else
if|if
condition|(
operator|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDREAD
argument_list|)
operator|&&
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDREAD
argument_list|)
operator|)
operator|||
operator|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
operator|&&
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
operator|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
comment|// clients have RO access to IUD ACID tables
block|}
else|else
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
comment|// clients have NO access to IUD ACID tables
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"setting required to "
operator|+
name|requiredCapabilities
operator|+
literal|",MANAGED:Access="
operator|+
name|table
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"VIRTUAL_VIEW"
case|:
if|if
condition|(
name|processorCapabilities
operator|.
name|containsAll
argument_list|(
name|requiredCapabilities
argument_list|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"MATERIALIZED_VIEW"
case|:
if|if
condition|(
name|processorCapabilities
operator|.
name|containsAll
argument_list|(
name|requiredCapabilities
argument_list|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
break|break;
default|default:
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Transformer return list of "
operator|+
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|transformPartitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|objects
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|processorCapabilities
parameter_list|,
name|String
name|processorId
parameter_list|)
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting translation for partition for processor "
operator|+
name|processorId
operator|+
literal|" on list "
operator|+
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tableCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|tableBuckets
init|=
literal|0
decl_stmt|;
name|int
name|partBuckets
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|objects
control|)
block|{
name|String
name|tableName
init|=
name|partition
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|partition
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tableCache
operator|.
name|containsKey
argument_list|(
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
condition|)
block|{
name|table
operator|=
name|tableCache
operator|.
name|get
argument_list|(
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|table
operator|=
name|hmsHandler
operator|.
name|get_table_core
argument_list|(
name|MetaStoreUtils
operator|.
name|getDefaultCatalog
argument_list|(
literal|null
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Could not load table "
operator|+
name|tableName
operator|+
literal|":"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|tableCache
operator|.
name|put
argument_list|(
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|String
name|tableType
init|=
name|table
operator|.
name|getTableType
argument_list|()
decl_stmt|;
name|String
name|tCapabilities
init|=
name|params
operator|.
name|get
argument_list|(
name|OBJCAPABILITIES
argument_list|)
decl_stmt|;
name|tableBuckets
operator|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
expr_stmt|;
name|partBuckets
operator|=
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of original part buckets="
operator|+
name|partBuckets
argument_list|)
expr_stmt|;
if|if
condition|(
name|tCapabilities
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|" has no specific required capabilities"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
literal|"EXTERNAL_TABLE"
case|:
if|if
condition|(
name|partBuckets
operator|>
literal|0
operator|&&
operator|!
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
condition|)
block|{
name|Partition
name|newPartition
init|=
operator|new
name|Partition
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|newSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newSd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove bucketing info
name|newPartition
operator|.
name|setSd
argument_list|(
name|newSd
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|newPartition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|"MANAGED_TABLE"
case|:
name|String
name|txnal
init|=
name|params
operator|.
name|get
argument_list|(
literal|"transactional"
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnal
operator|==
literal|null
operator|||
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
comment|// non-ACID MANAGED table
if|if
condition|(
name|partBuckets
operator|>
literal|0
operator|&&
operator|!
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
condition|)
block|{
name|Partition
name|newPartition
init|=
operator|new
name|Partition
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|newSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newSd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove bucketing info
name|newPartition
operator|.
name|setSd
argument_list|(
name|newSd
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|newPartition
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// INSERT or FULL ACID table, bucketing info to be retained
name|ret
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
break|break;
default|default:
name|ret
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
comment|// table has capabilities
name|tCapabilities
operator|=
name|tCapabilities
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
comment|// remove spaces between tCapabilities + toUppercase
name|List
argument_list|<
name|String
argument_list|>
name|requiredCapabilities
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tCapabilities
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|partBuckets
operator|<=
literal|0
operator|||
name|processorCapabilities
operator|.
name|containsAll
argument_list|(
name|requiredCapabilities
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
literal|"EXTERNAL_TABLE"
case|:
if|if
condition|(
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
operator|&&
operator|!
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
condition|)
block|{
name|Partition
name|newPartition
init|=
operator|new
name|Partition
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|newSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newSd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// removing bucketing if HIVEBUCKET2 isnt specified
name|newPartition
operator|.
name|setSd
argument_list|(
name|newSd
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed bucketing information from partition"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|newPartition
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|"MANAGED_TABLE"
case|:
name|String
name|txnal
init|=
name|params
operator|.
name|get
argument_list|(
literal|"transactional"
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnal
operator|==
literal|null
operator|||
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
comment|// non-ACID MANAGED table
if|if
condition|(
operator|!
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
condition|)
block|{
name|Partition
name|newPartition
init|=
operator|new
name|Partition
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|newSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newSd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove bucketing info
name|newPartition
operator|.
name|setSd
argument_list|(
name|newSd
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|newPartition
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|ret
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
break|break;
default|default:
name|ret
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning partition set of size "
operator|+
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

