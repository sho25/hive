begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ACCESSTYPE_NONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ACCESSTYPE_READONLY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ACCESSTYPE_READWRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|TABLE_TRANSACTIONAL_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|EXTERNAL_TABLE_PURGE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MetastoreDefaultTransformer
implements|implements
name|IMetaStoreMetadataTransformer
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetastoreDefaultTransformer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|IHMSHandler
name|hmsHandler
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONNECTORREAD
init|=
literal|"CONNECTORREAD"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONNECTORWRITE
init|=
literal|"CONNECTORWRITE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTWRITE
init|=
literal|"EXTWRITE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTREAD
init|=
literal|"EXTREAD"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEBUCKET2
init|=
literal|"HIVEBUCKET2"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVECACHEINVALIDATE
init|=
literal|"HIVECACHEINVALIDATE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEFULLACIDREAD
init|=
literal|"HIVEFULLACIDREAD"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEFULLACIDWRITE
init|=
literal|"HIVEFULLACIDWRITE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEMANAGEDINSERTREAD
init|=
literal|"HIVEMANAGEDINSERTREAD"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEMANAGEDINSERTWRITE
init|=
literal|"HIVEMANAGEDINSERTWRITE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEMANAGESTATS
init|=
literal|"HIVEMANAGESTATS"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEMQT
init|=
literal|"HIVEMQT"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVEONLYMQTWRITE
init|=
literal|"HIVEONLYMQTWRITE"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVESQL
init|=
literal|"HIVESQL"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OBJCAPABILITIES
init|=
literal|"OBJCAPABILITIES"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MANAGERAWMETADATA
init|=
literal|"MANAGE_RAW_METADATA"
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ACIDCOMMONWRITELIST
init|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|HIVEMANAGESTATS
argument_list|,
name|HIVECACHEINVALIDATE
argument_list|,
name|CONNECTORWRITE
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|acidWriteList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|HIVEFULLACIDWRITE
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|insertOnlyWriteList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|HIVEMANAGEDINSERTWRITE
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|MQTLIST
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|HIVEFULLACIDREAD
argument_list|,
name|HIVEONLYMQTWRITE
argument_list|,
name|HIVEMANAGESTATS
argument_list|,
name|HIVEMQT
argument_list|,
name|CONNECTORREAD
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|acidList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|insertOnlyList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|MetastoreDefaultTransformer
parameter_list|(
name|IHMSHandler
name|handler
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|this
operator|.
name|hmsHandler
operator|=
name|handler
expr_stmt|;
name|acidWriteList
operator|.
name|addAll
argument_list|(
name|ACIDCOMMONWRITELIST
argument_list|)
expr_stmt|;
name|acidList
operator|.
name|addAll
argument_list|(
name|acidWriteList
argument_list|)
expr_stmt|;
name|acidList
operator|.
name|add
argument_list|(
name|HIVEFULLACIDREAD
argument_list|)
expr_stmt|;
name|acidList
operator|.
name|add
argument_list|(
name|CONNECTORREAD
argument_list|)
expr_stmt|;
name|insertOnlyWriteList
operator|.
name|addAll
argument_list|(
name|ACIDCOMMONWRITELIST
argument_list|)
expr_stmt|;
name|insertOnlyList
operator|.
name|addAll
argument_list|(
name|insertOnlyWriteList
argument_list|)
expr_stmt|;
name|insertOnlyList
operator|.
name|add
argument_list|(
name|HIVEMANAGEDINSERTREAD
argument_list|)
expr_stmt|;
name|insertOnlyList
operator|.
name|add
argument_list|(
name|CONNECTORREAD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|transform
parameter_list|(
name|List
argument_list|<
name|Table
argument_list|>
name|objects
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|processorCapabilities
parameter_list|,
name|String
name|processorId
parameter_list|)
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting translation for processor "
operator|+
name|processorId
operator|+
literal|" on list "
operator|+
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|objects
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|String
name|tableType
init|=
name|table
operator|.
name|getTableType
argument_list|()
decl_stmt|;
name|String
name|tCapabilities
init|=
name|params
operator|.
name|get
argument_list|(
name|OBJCAPABILITIES
argument_list|)
decl_stmt|;
name|int
name|numBuckets
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
decl_stmt|;
name|boolean
name|isBucketed
init|=
operator|(
name|numBuckets
operator|>
literal|0
operator|)
condition|?
literal|true
else|:
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|generated
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|requiredReads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|requiredWrites
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|",#bucket="
operator|+
name|numBuckets
operator|+
literal|",isBucketed:"
operator|+
name|isBucketed
operator|+
literal|",tableType="
operator|+
name|tableType
operator|+
literal|",tableCapabilities="
operator|+
name|tCapabilities
argument_list|)
expr_stmt|;
comment|// if the table has no tCapabilities, then generate default ones
if|if
condition|(
name|tCapabilities
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table has no specific required capabilities"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
literal|"EXTERNAL_TABLE"
case|:
name|Table
name|newTable
init|=
operator|new
name|Table
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|EXTREAD
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|EXTWRITE
argument_list|)
expr_stmt|;
if|if
condition|(
name|numBuckets
operator|>
literal|0
condition|)
block|{
name|generated
operator|.
name|add
argument_list|(
name|HIVEBUCKET2
argument_list|)
expr_stmt|;
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"External bucketed table with HB2 capability:RW"
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"External bucketed table without HB2 capability:RO"
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|requiredWrites
operator|.
name|add
argument_list|(
name|HIVEBUCKET2
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|newSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newSd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove bucketing info
name|newTable
operator|.
name|setSd
argument_list|(
name|newSd
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|requiredWrites
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bucketed table without HIVEBUCKET2 capability, removed bucketing info from table"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Unbucketed
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|EXTWRITE
argument_list|)
operator|&&
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|EXTREAD
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"External unbucketed table with EXTREAD/WRITE capability:RW"
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|EXTREAD
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"External unbucketed table with EXTREAD capability:RO"
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|requiredWrites
operator|.
name|add
argument_list|(
name|EXTWRITE
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|requiredWrites
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"External unbucketed table without EXTREAD/WRITE capability:NONE"
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
name|requiredReads
operator|.
name|add
argument_list|(
name|EXTREAD
argument_list|)
expr_stmt|;
name|requiredWrites
operator|.
name|add
argument_list|(
name|EXTWRITE
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|requiredWrites
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setRequiredReadCapabilities
argument_list|(
name|requiredReads
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|put
argument_list|(
name|newTable
argument_list|,
name|generated
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"MANAGED_TABLE"
case|:
name|String
name|txnal
init|=
name|params
operator|.
name|get
argument_list|(
name|TABLE_IS_TRANSACTIONAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnal
operator|==
literal|null
operator|||
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
comment|// non-ACID MANAGED table
name|LOG
operator|.
name|debug
argument_list|(
literal|"Managed non-acid table:RW"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
name|generated
operator|.
name|addAll
argument_list|(
name|acidWriteList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|txnal
operator|!=
literal|null
operator|&&
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRUE"
argument_list|)
condition|)
block|{
comment|// ACID table
name|String
name|txntype
init|=
name|params
operator|.
name|get
argument_list|(
name|TABLE_TRANSACTIONAL_PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|txntype
operator|!=
literal|null
operator|&&
name|txntype
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"insert_only"
argument_list|)
condition|)
block|{
comment|// MICRO_MANAGED Tables
comment|// MGD table is insert only, not full ACID
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMANAGEDINSERTWRITE
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORWRITE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Managed acid table with INSERTWRITE or CONNECTORWRITE capability:RW"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
comment|// clients have RW access to INSERT-ONLY ACID tables
name|processorCapabilities
operator|.
name|retainAll
argument_list|(
name|insertOnlyWriteList
argument_list|)
expr_stmt|;
name|generated
operator|.
name|addAll
argument_list|(
name|processorCapabilities
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processor has one of the write capabilities on insert-only, granting RW"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMANAGEDINSERTREAD
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Managed acid table with INSERTREAD or CONNECTORREAD capability:RO"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
comment|// clients have RO access to INSERT-ONLY ACID tables
name|generated
operator|.
name|addAll
argument_list|(
name|insertOnlyWriteList
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|insertOnlyWriteList
argument_list|)
expr_stmt|;
name|processorCapabilities
operator|.
name|retainAll
argument_list|(
name|getReads
argument_list|(
name|insertOnlyList
argument_list|)
argument_list|)
expr_stmt|;
name|generated
operator|.
name|addAll
argument_list|(
name|processorCapabilities
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processor has one of the read capabilities on insert-only, granting RO"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
comment|// clients have NO access to INSERT-ONLY ACID tables
name|generated
operator|.
name|addAll
argument_list|(
name|acidList
argument_list|)
expr_stmt|;
name|generated
operator|.
name|addAll
argument_list|(
name|insertOnlyList
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|insertOnlyWriteList
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredReadCapabilities
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|CONNECTORREAD
argument_list|,
name|HIVEMANAGEDINSERTREAD
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processor has no read or write capabilities on insert-only, NO access"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// FULL ACID MANAGED TABLE
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDWRITE
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORWRITE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Full acid table with ACIDWRITE or CONNECTORWRITE capability:RW"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
comment|// clients have RW access to IUD ACID tables
name|processorCapabilities
operator|.
name|retainAll
argument_list|(
name|acidWriteList
argument_list|)
expr_stmt|;
name|generated
operator|.
name|addAll
argument_list|(
name|processorCapabilities
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDREAD
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Full acid table with ACIDREAD or CONNECTORREAD capability:RO"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
comment|// clients have RO access to IUD ACID tables
name|generated
operator|.
name|addAll
argument_list|(
name|acidWriteList
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|acidWriteList
argument_list|)
expr_stmt|;
name|processorCapabilities
operator|.
name|retainAll
argument_list|(
name|getReads
argument_list|(
name|acidList
argument_list|)
argument_list|)
expr_stmt|;
name|generated
operator|.
name|addAll
argument_list|(
name|processorCapabilities
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Full acid table without ACIDREAD/WRITE or CONNECTORREAD/WRITE capability:NONE"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
comment|// clients have NO access to IUD ACID tables
name|table
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|acidWriteList
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredReadCapabilities
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|CONNECTORREAD
argument_list|,
name|HIVEFULLACIDREAD
argument_list|)
argument_list|)
expr_stmt|;
name|generated
operator|.
name|addAll
argument_list|(
name|acidList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|generated
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"VIRTUAL_VIEW"
case|:
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVESQL
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredReadCapabilities
argument_list|(
name|generated
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|HIVESQL
argument_list|)
expr_stmt|;
name|generated
operator|.
name|add
argument_list|(
name|CONNECTORREAD
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|generated
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"MATERIALIZED_VIEW"
case|:
if|if
condition|(
operator|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDREAD
argument_list|)
operator|)
operator|&&
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMQT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processor has one of the READ abilities and HIVEMQT, AccessType=RO"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|generated
operator|.
name|addAll
argument_list|(
name|diff
argument_list|(
name|MQTLIST
argument_list|,
name|processorCapabilities
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processor has no READ abilities or HIVEMQT, AccessType=None"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredReadCapabilities
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|CONNECTORREAD
argument_list|,
name|HIVEMQT
argument_list|)
argument_list|)
expr_stmt|;
name|generated
operator|.
name|addAll
argument_list|(
name|MQTLIST
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|generated
argument_list|)
expr_stmt|;
break|break;
default|default:
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|generated
argument_list|)
expr_stmt|;
break|break;
block|}
continue|continue;
block|}
comment|// WITH CAPABLITIES ON TABLE
name|tCapabilities
operator|=
name|tCapabilities
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
comment|// remove spaces between tCapabilities + toUppercase
name|List
argument_list|<
name|String
argument_list|>
name|requiredCapabilities
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tCapabilities
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
literal|"EXTERNAL_TABLE"
case|:
if|if
condition|(
name|processorCapabilities
operator|.
name|containsAll
argument_list|(
name|requiredCapabilities
argument_list|)
condition|)
block|{
comment|// AccessType is RW
name|LOG
operator|.
name|info
argument_list|(
literal|"Abilities for match: Table type="
operator|+
name|tableType
operator|+
literal|",accesstype is RW"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
break|break;
block|}
name|Table
name|newTable
init|=
operator|new
name|Table
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|boolean
name|removedBucketing
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
operator|&&
operator|!
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
condition|)
block|{
name|StorageDescriptor
name|newSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newSd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// removing bucketing if HIVEBUCKET2 isnt specified
name|newTable
operator|.
name|setSd
argument_list|(
name|newSd
argument_list|)
expr_stmt|;
name|removedBucketing
operator|=
literal|true
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding HIVEBUCKET2 to requiredWrites"
argument_list|)
expr_stmt|;
name|requiredWrites
operator|.
name|add
argument_list|(
name|HIVEBUCKET2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed bucketing information from table"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|EXTWRITE
argument_list|)
operator|&&
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|EXTWRITE
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|removedBucketing
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"EXTWRITE Matches, accessType="
operator|+
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|newTable
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|EXTREAD
argument_list|)
operator|&&
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|EXTREAD
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"EXTREAD Matches, accessType="
operator|+
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|requiredWrites
operator|.
name|add
argument_list|(
name|EXTWRITE
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|requiredWrites
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No matches, accessType="
operator|+
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
name|requiredReads
operator|.
name|add
argument_list|(
name|EXTREAD
argument_list|)
expr_stmt|;
name|requiredWrites
operator|.
name|addAll
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setRequiredReadCapabilities
argument_list|(
name|requiredReads
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|requiredWrites
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"setting required to "
operator|+
name|requiredCapabilities
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|newTable
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"MANAGED_TABLE"
case|:
if|if
condition|(
name|processorCapabilities
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// processor has no capabilities
name|LOG
operator|.
name|info
argument_list|(
literal|"Client has no capabilities for type "
operator|+
name|tableType
operator|+
literal|",accesstype is NONE"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredReadCapabilities
argument_list|(
name|getReads
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|processorCapabilities
operator|.
name|containsAll
argument_list|(
name|requiredCapabilities
argument_list|)
condition|)
block|{
comment|// AccessType is RW
name|LOG
operator|.
name|info
argument_list|(
literal|"Abilities for match: Table type="
operator|+
name|tableType
operator|+
literal|",accesstype is RW"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|txnal
init|=
name|params
operator|.
name|get
argument_list|(
name|TABLE_IS_TRANSACTIONAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnal
operator|==
literal|null
operator|||
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
comment|// non-ACID MANAGED table
name|LOG
operator|.
name|info
argument_list|(
literal|"Table is non ACID, accesstype is RO"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|missing
init|=
name|diff
argument_list|(
name|requiredCapabilities
argument_list|,
name|processorCapabilities
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|getWrites
argument_list|(
name|missing
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|missing
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|txnal
operator|!=
literal|null
operator|&&
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRUE"
argument_list|)
condition|)
block|{
comment|// ACID table
name|String
name|txntype
init|=
name|params
operator|.
name|get
argument_list|(
name|TABLE_TRANSACTIONAL_PROPERTIES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hintList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|txntype
operator|!=
literal|null
operator|&&
name|txntype
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"insert_only"
argument_list|)
condition|)
block|{
comment|// MICRO_MANAGED Tables
name|LOG
operator|.
name|info
argument_list|(
literal|"Table is INSERTONLY ACID"
argument_list|)
expr_stmt|;
comment|// MGD table is insert only, not full ACID
if|if
condition|(
name|processorCapabilities
operator|.
name|containsAll
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|)
comment|// contains all writes on table
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDWRITE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processor has all writes or full acid write, access is RW"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
comment|// clients have RW access to INSERT-ONLY ACID tables
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|hintList
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORWRITE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Managed acid table with CONNECTORWRITE capability:RW"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
comment|// clients have RW access to INSERT-ONLY ACID tables with CONNWRITE
name|hintList
operator|.
name|add
argument_list|(
name|CONNECTORWRITE
argument_list|)
expr_stmt|;
name|hintList
operator|.
name|addAll
argument_list|(
name|getReads
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|hintList
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|processorCapabilities
operator|.
name|containsAll
argument_list|(
name|getReads
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|)
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMANAGEDINSERTREAD
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Managed acid table with MANAGEDREAD capability:RO"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|diff
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|,
name|getWrites
argument_list|(
name|processorCapabilities
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hintList
operator|.
name|add
argument_list|(
name|HIVEMANAGEDINSERTWRITE
argument_list|)
expr_stmt|;
name|hintList
operator|.
name|addAll
argument_list|(
name|diff
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|,
name|processorCapabilities
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|hintList
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Managed acid table with CONNECTORREAD capability:RO"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|diff
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|,
name|getWrites
argument_list|(
name|processorCapabilities
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hintList
operator|.
name|add
argument_list|(
name|CONNECTORREAD
argument_list|)
expr_stmt|;
name|hintList
operator|.
name|addAll
argument_list|(
name|diff
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|,
name|processorCapabilities
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|hintList
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Managed acid table without any READ capability:NONE"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|diff
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|,
name|getWrites
argument_list|(
name|processorCapabilities
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredReadCapabilities
argument_list|(
name|diff
argument_list|(
name|getReads
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|,
name|getReads
argument_list|(
name|processorCapabilities
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
comment|// MANAGED FULL ACID TABLES
name|LOG
operator|.
name|info
argument_list|(
literal|"Table is FULLACID"
argument_list|)
expr_stmt|;
if|if
condition|(
name|processorCapabilities
operator|.
name|containsAll
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|)
comment|// contains all writes on table
operator|||
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDWRITE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processor has all writes or atleast "
operator|+
name|HIVEFULLACIDWRITE
operator|+
literal|", access is RW"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
comment|// clients have RW access to ACID tables
name|hintList
operator|.
name|add
argument_list|(
name|HIVEFULLACIDWRITE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|hintList
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORWRITE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Full acid table with CONNECTORWRITE capability:RW"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READWRITE
argument_list|)
expr_stmt|;
comment|// clients have RW access to IUD ACID tables
name|hintList
operator|.
name|add
argument_list|(
name|CONNECTORWRITE
argument_list|)
expr_stmt|;
name|hintList
operator|.
name|addAll
argument_list|(
name|getReads
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|hintList
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDREAD
argument_list|)
operator|||
operator|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|CONNECTORREAD
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Full acid table with CONNECTORREAD/ACIDREAD capability:RO"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
comment|// clients have RO access to IUD ACID tables
name|table
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|diff
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|,
name|getWrites
argument_list|(
name|processorCapabilities
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hintList
operator|.
name|add
argument_list|(
name|CONNECTORREAD
argument_list|)
expr_stmt|;
name|hintList
operator|.
name|addAll
argument_list|(
name|diff
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|,
name|processorCapabilities
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|hintList
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Full acid table without READ capability:RO"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
comment|// clients have NO access to IUD ACID tables
name|table
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|diff
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|,
name|getWrites
argument_list|(
name|processorCapabilities
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredReadCapabilities
argument_list|(
name|diff
argument_list|(
name|getReads
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|,
name|getReads
argument_list|(
name|processorCapabilities
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"setting required to "
operator|+
name|ret
operator|.
name|get
argument_list|(
name|table
argument_list|)
operator|+
literal|",MANAGED:Access="
operator|+
name|table
operator|.
name|getAccessType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"VIRTUAL_VIEW"
case|:
case|case
literal|"MATERIALIZED_VIEW"
case|:
if|if
condition|(
name|processorCapabilities
operator|.
name|containsAll
argument_list|(
name|requiredCapabilities
argument_list|)
condition|)
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_READONLY
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredReadCapabilities
argument_list|(
name|diff
argument_list|(
name|getReads
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|,
name|getReads
argument_list|(
name|processorCapabilities
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|table
operator|.
name|setAccessType
argument_list|(
name|ACCESSTYPE_NONE
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredReadCapabilities
argument_list|(
name|getReads
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRequiredWriteCapabilities
argument_list|(
name|getWrites
argument_list|(
name|requiredCapabilities
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|requiredCapabilities
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Transformer return list of "
operator|+
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|transformPartitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|objects
parameter_list|,
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|processorCapabilities
parameter_list|,
name|String
name|processorId
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|processorCapabilities
operator|!=
literal|null
operator|&&
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|MANAGERAWMETADATA
argument_list|)
condition|)
block|{
return|return
name|objects
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting translation for partition for processor "
operator|+
name|processorId
operator|+
literal|" on list "
operator|+
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|partBuckets
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|objects
control|)
block|{
name|String
name|tableName
init|=
name|partition
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|partition
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
name|params
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|String
name|tableType
init|=
name|table
operator|.
name|getTableType
argument_list|()
decl_stmt|;
name|String
name|tCapabilities
init|=
name|params
operator|.
name|get
argument_list|(
name|OBJCAPABILITIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|partition
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partBuckets
operator|=
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of original part buckets="
operator|+
name|partBuckets
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tCapabilities
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|" has no specific required capabilities"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
literal|"EXTERNAL_TABLE"
case|:
if|if
condition|(
name|partBuckets
operator|>
literal|0
operator|&&
operator|!
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
condition|)
block|{
name|Partition
name|newPartition
init|=
operator|new
name|Partition
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|newSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newSd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove bucketing info
name|newPartition
operator|.
name|setSd
argument_list|(
name|newSd
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|newPartition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|"MANAGED_TABLE"
case|:
name|String
name|txnal
init|=
name|params
operator|.
name|get
argument_list|(
name|TABLE_IS_TRANSACTIONAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnal
operator|==
literal|null
operator|||
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
comment|// non-ACID MANAGED table
if|if
condition|(
name|partBuckets
operator|>
literal|0
operator|&&
operator|!
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
condition|)
block|{
name|Partition
name|newPartition
init|=
operator|new
name|Partition
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|newSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newSd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove bucketing info
name|newPartition
operator|.
name|setSd
argument_list|(
name|newSd
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|newPartition
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// INSERT or FULL ACID table, bucketing info to be retained
name|ret
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
break|break;
default|default:
name|ret
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
comment|// table has capabilities
name|tCapabilities
operator|=
name|tCapabilities
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
comment|// remove spaces between tCapabilities + toUppercase
name|List
argument_list|<
name|String
argument_list|>
name|requiredCapabilities
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tCapabilities
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|partBuckets
operator|<=
literal|0
operator|||
name|processorCapabilities
operator|.
name|containsAll
argument_list|(
name|requiredCapabilities
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
literal|"EXTERNAL_TABLE"
case|:
if|if
condition|(
name|requiredCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
operator|&&
operator|!
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
condition|)
block|{
name|Partition
name|newPartition
init|=
operator|new
name|Partition
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|newSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newSd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// removing bucketing if HIVEBUCKET2 isnt specified
name|newPartition
operator|.
name|setSd
argument_list|(
name|newSd
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed bucketing information from partition"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|newPartition
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|"MANAGED_TABLE"
case|:
name|String
name|txnal
init|=
name|params
operator|.
name|get
argument_list|(
name|TABLE_IS_TRANSACTIONAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnal
operator|==
literal|null
operator|||
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
comment|// non-ACID MANAGED table
if|if
condition|(
operator|!
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEBUCKET2
argument_list|)
condition|)
block|{
name|Partition
name|newPartition
init|=
operator|new
name|Partition
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|newSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|newSd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove bucketing info
name|newPartition
operator|.
name|setSd
argument_list|(
name|newSd
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|newPartition
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|ret
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
break|break;
default|default:
name|ret
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning partition set of size "
operator|+
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|transformCreateTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|processorCapabilities
parameter_list|,
name|String
name|processorId
parameter_list|)
throws|throws
name|MetaException
block|{
name|Table
name|newTable
init|=
operator|new
name|Table
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting translation for CreateTable for processor "
operator|+
name|processorId
operator|+
literal|" with "
operator|+
name|processorCapabilities
operator|+
literal|" on table "
operator|+
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
name|params
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|String
name|tableType
init|=
name|newTable
operator|.
name|getTableType
argument_list|()
decl_stmt|;
name|String
name|txnal
init|=
literal|null
decl_stmt|;
name|String
name|txn_properties
init|=
literal|null
decl_stmt|;
name|boolean
name|isInsertAcid
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Table is a MANAGED_TABLE"
argument_list|)
expr_stmt|;
name|txnal
operator|=
name|params
operator|.
name|get
argument_list|(
name|TABLE_IS_TRANSACTIONAL
argument_list|)
expr_stmt|;
name|txn_properties
operator|=
name|params
operator|.
name|get
argument_list|(
name|TABLE_TRANSACTIONAL_PROPERTIES
argument_list|)
expr_stmt|;
name|isInsertAcid
operator|=
operator|(
name|txn_properties
operator|!=
literal|null
operator|&&
name|txn_properties
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"insert_only"
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
operator|(
name|txnal
operator|==
literal|null
operator|||
name|txnal
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
operator|)
operator|&&
operator|!
name|isInsertAcid
condition|)
block|{
comment|// non-ACID MANAGED TABLE
name|LOG
operator|.
name|info
argument_list|(
literal|"Converting "
operator|+
name|newTable
operator|.
name|getTableName
argument_list|()
operator|+
literal|" to EXTERNAL tableType for "
operator|+
name|processorId
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
name|TABLE_IS_TRANSACTIONAL
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
name|TABLE_TRANSACTIONAL_PROPERTIES
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|EXTERNAL_TABLE_PURGE
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"TRANSLATED_TO_EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Modified table params are:"
operator|+
name|params
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Path
name|newPath
init|=
name|hmsHandler
operator|.
name|getWh
argument_list|()
operator|.
name|getDefaultTablePath
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|newPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Modified location from null to "
operator|+
name|newPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception determining external table location:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// ACID table
if|if
condition|(
name|processorCapabilities
operator|==
literal|null
operator|||
name|processorCapabilities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Processor has no capabilities, cannot create an ACID table."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isInsertAcid
condition|)
block|{
comment|// MICRO_MANAGED Tables
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMANAGEDINSERTWRITE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processor has required capabilities to be able to create INSERT-only tables"
argument_list|)
expr_stmt|;
return|return
name|newTable
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Processor does not have capabilities to create a INSERT ACID table:"
operator|+
name|diff
argument_list|(
name|insertOnlyWriteList
argument_list|,
name|processorCapabilities
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// FULL-ACID table
if|if
condition|(
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDWRITE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processor has required capabilities to be able to create FULLACID tables."
argument_list|)
expr_stmt|;
return|return
name|newTable
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Processor does not have capabilities to create a FULL ACID table:"
operator|+
name|diff
argument_list|(
name|acidWriteList
argument_list|,
name|processorCapabilities
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Table to be created is of type "
operator|+
name|tableType
operator|+
literal|" but not "
operator|+
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Transformer returning table:"
operator|+
name|newTable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newTable
return|;
block|}
comment|/**    * Alter location of the database depending on whether or not the processor has ACID capabilities.    */
annotation|@
name|Override
specifier|public
name|Database
name|transformDatabase
parameter_list|(
name|Database
name|db
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|processorCapabilities
parameter_list|,
name|String
name|processorId
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|processorCapabilities
operator|!=
literal|null
operator|&&
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|MANAGERAWMETADATA
argument_list|)
condition|)
block|{
return|return
name|db
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting translation for transformDatabase for processor "
operator|+
name|processorId
operator|+
literal|" with "
operator|+
name|processorCapabilities
operator|+
literal|" on database "
operator|+
name|db
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|processorCapabilities
operator|==
literal|null
operator|||
operator|(
operator|!
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEMANAGEDINSERTWRITE
argument_list|)
operator|&&
operator|!
name|processorCapabilities
operator|.
name|contains
argument_list|(
name|HIVEFULLACIDWRITE
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processor does not have any of ACID write capabilities, changing current location from "
operator|+
name|db
operator|.
name|getLocationUri
argument_list|()
operator|+
literal|" to external warehouse location"
argument_list|)
expr_stmt|;
name|Path
name|extWhLocation
init|=
name|hmsHandler
operator|.
name|getWh
argument_list|()
operator|.
name|getDefaultExternalDatabasePath
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting DBLocation to "
operator|+
name|extWhLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|setLocationUri
argument_list|(
name|extWhLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Transformer returning database:"
operator|+
name|db
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|db
return|;
block|}
comment|// returns the elements contained in list1 but missing in list2
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|diff
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list1
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list2
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|diffList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|list2
operator|==
literal|null
operator|||
name|list2
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
name|list1
return|;
if|if
condition|(
name|list1
operator|==
literal|null
operator|||
name|list1
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
if|if
condition|(
name|list2
operator|.
name|containsAll
argument_list|(
name|list1
argument_list|)
condition|)
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
name|diffList
operator|.
name|addAll
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"diffList="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|diffList
operator|.
name|toArray
argument_list|()
argument_list|)
operator|+
literal|",master list="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|list1
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|diffList
operator|.
name|retainAll
argument_list|(
name|list1
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"diffList="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|diffList
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|diffList
operator|.
name|size
argument_list|()
operator|==
name|list1
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// lists match
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
comment|// return empty list indicating no missing elements
block|}
else|else
block|{
name|list1
operator|.
name|removeAll
argument_list|(
name|diffList
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"list1.size():"
operator|+
name|list1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|list1
return|;
block|}
block|}
else|else
block|{
name|list1
operator|.
name|removeAll
argument_list|(
name|diffList
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"diff returning "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|diffList
operator|.
name|toArray
argument_list|()
argument_list|)
operator|+
literal|",full list="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|list1
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list1
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getWrites
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|capabilities
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|writes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|capability
range|:
name|capabilities
control|)
block|{
if|if
condition|(
name|capability
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"WRITE"
argument_list|)
operator|||
name|capability
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"STATS"
argument_list|)
operator|||
name|capability
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"INVALIDATE"
argument_list|)
condition|)
block|{
name|writes
operator|.
name|add
argument_list|(
name|capability
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|writes
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getReads
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|capabilities
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|reads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|capability
range|:
name|capabilities
control|)
block|{
if|if
condition|(
name|capability
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"READ"
argument_list|)
operator|||
name|capability
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"SQL"
argument_list|)
condition|)
block|{
name|reads
operator|.
name|add
argument_list|(
name|capability
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|reads
return|;
block|}
block|}
end_class

end_unit

