begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|TUGIContainingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|HadoopThriftAuthBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|MetastoreDelegationTokenManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TFramedTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSaslServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class helps in some aspects of authentication. It creates the proper Thrift classes for the  * given configuration as well as helps with authenticating requests.  *  * This is copied from HiveAuthFactory and modified to be used for HMS. But we should see if we can  * use same code for both Hive and HMS.  */
end_comment

begin_class
specifier|public
class|class
name|AuthFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuthFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HadoopThriftAuthBridge
operator|.
name|Server
name|saslServer
decl_stmt|;
specifier|private
name|String
name|authTypeStr
decl_stmt|;
specifier|private
specifier|final
name|String
name|transportMode
decl_stmt|;
specifier|private
name|String
name|hadoopAuth
decl_stmt|;
specifier|private
name|MetastoreDelegationTokenManager
name|delegationTokenManager
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|useFramedTransport
decl_stmt|;
specifier|private
name|boolean
name|executeSetUGI
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|AuthFactory
parameter_list|(
name|HadoopThriftAuthBridge
name|bridge
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Object
name|baseHandler
parameter_list|)
throws|throws
name|HiveMetaException
throws|,
name|TTransportException
block|{
comment|// For now metastore only operates in binary mode. It would be good if we could model an HMS
comment|// as a ThriftCliService, but right now that's too much tied with HiveServer2.
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|transportMode
operator|=
literal|"binary"
expr_stmt|;
name|authTypeStr
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|THRIFT_METASTORE_AUTHENTICATION
argument_list|)
expr_stmt|;
name|useFramedTransport
operator|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|USE_THRIFT_FRAMED_TRANSPORT
argument_list|)
expr_stmt|;
name|executeSetUGI
operator|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|EXECUTE_SET_UGI
argument_list|)
expr_stmt|;
comment|// Secured mode communication with Hadoop
comment|// Blend this with THRIFT_METASTORE_AUTHENTICATION, for now they are separate. useSasl
comment|// should be set to true when authentication is anything other than NONE. Or we should use a
comment|// separate configuration for that?
comment|// In case of HS2, this is defined by configuration HADOOP_SECURITY_AUTHENTICATION, which
comment|// indicates the authentication used by underlying HDFS. In case of metastore SASL and hadoop
comment|// authentication seem to be tied up. But with password based SASL we might have to break
comment|// this coupling. Should we provide HADOOP_SECURITY_AUTHENTICATION for hadoop too, or use
comment|// USE_THRIFT_SASL itself to indicate that the underlying Hadoop is kerberized.
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|authTypeStr
argument_list|)
condition|)
block|{
name|authTypeStr
operator|=
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|NOSASL
operator|.
name|getAuthName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|USE_THRIFT_SASL
argument_list|)
condition|)
block|{
name|hadoopAuth
operator|=
literal|"kerberos"
expr_stmt|;
comment|// If SASL is enabled but no authentication method is specified, we use only kerberos as an
comment|// authentication mechanism.
if|if
condition|(
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|NOSASL
operator|.
name|getAuthName
argument_list|()
argument_list|)
condition|)
block|{
name|authTypeStr
operator|=
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|KERBEROS
operator|.
name|getAuthName
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|hadoopAuth
operator|=
literal|"simple"
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using authentication "
operator|+
name|authTypeStr
operator|+
literal|" with kerberos authentication "
operator|+
operator|(
name|isSASLWithKerberizedHadoop
argument_list|()
condition|?
literal|"enabled."
else|:
literal|"disabled"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSASLWithKerberizedHadoop
argument_list|()
condition|)
block|{
comment|// we are in secure mode.
if|if
condition|(
name|useFramedTransport
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Framed transport is not supported with SASL enabled."
argument_list|)
throw|;
block|}
name|saslServer
operator|=
name|bridge
operator|.
name|createServer
argument_list|(
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|KERBEROS_KEYTAB_FILE
argument_list|)
argument_list|,
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|KERBEROS_PRINCIPAL
argument_list|)
argument_list|,
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CLIENT_KERBEROS_PRINCIPAL
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start delegation token manager
name|delegationTokenManager
operator|=
operator|new
name|MetastoreDelegationTokenManager
argument_list|()
expr_stmt|;
try|try
block|{
name|delegationTokenManager
operator|.
name|startDelegationTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|baseHandler
argument_list|,
name|HadoopThriftAuthBridge
operator|.
name|Server
operator|.
name|ServerMode
operator|.
name|METASTORE
argument_list|)
expr_stmt|;
name|saslServer
operator|.
name|setSecretManager
argument_list|(
name|delegationTokenManager
operator|.
name|getSecretManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TTransportException
argument_list|(
literal|"Failed to start token manager"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|TTransportFactory
name|getAuthTransFactory
parameter_list|(
name|boolean
name|useSSL
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|LoginException
block|{
name|TTransportFactory
name|transportFactory
decl_stmt|;
name|TSaslServerTransport
operator|.
name|Factory
name|serverTransportFactory
decl_stmt|;
if|if
condition|(
name|isSASLWithKerberizedHadoop
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|useFramedTransport
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Framed transport is not supported with SASL enabled."
argument_list|)
throw|;
block|}
name|serverTransportFactory
operator|=
name|saslServer
operator|.
name|createSaslServerTransportFactory
argument_list|(
name|MetaStoreUtils
operator|.
name|getMetaStoreSaslProperties
argument_list|(
name|conf
argument_list|,
name|useSSL
argument_list|)
argument_list|)
expr_stmt|;
name|transportFactory
operator|=
name|saslServer
operator|.
name|wrapTransportFactoryInClientUGI
argument_list|(
name|serverTransportFactory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TTransportException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|KERBEROS
operator|.
name|getAuthName
argument_list|()
argument_list|)
condition|)
block|{
comment|// no-op
block|}
elseif|else
if|if
condition|(
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|NONE
operator|.
name|getAuthName
argument_list|()
argument_list|)
operator|||
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|LDAP
operator|.
name|getAuthName
argument_list|()
argument_list|)
operator|||
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|PAM
operator|.
name|getAuthName
argument_list|()
argument_list|)
operator|||
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|CUSTOM
operator|.
name|getAuthName
argument_list|()
argument_list|)
operator|||
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|CONFIG
operator|.
name|getAuthName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|MetaStorePlainSaslHelper
operator|.
name|init
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding server definition for PLAIN SaSL with authentication "
operator|+
name|authTypeStr
operator|+
literal|" to transport factory "
operator|+
name|serverTransportFactory
argument_list|)
expr_stmt|;
name|serverTransportFactory
operator|.
name|addServerDefinition
argument_list|(
literal|"PLAIN"
argument_list|,
name|authTypeStr
argument_list|,
literal|null
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|MetaStorePlainSaslHelper
operator|.
name|PlainServerCallbackHandler
argument_list|(
name|authTypeStr
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Error setting callback handler"
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Unsupported authentication type "
operator|+
name|authTypeStr
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|NONE
operator|.
name|getAuthName
argument_list|()
argument_list|)
operator|||
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|LDAP
operator|.
name|getAuthName
argument_list|()
argument_list|)
operator|||
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|PAM
operator|.
name|getAuthName
argument_list|()
argument_list|)
operator|||
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|CUSTOM
operator|.
name|getAuthName
argument_list|()
argument_list|)
operator|||
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|CONFIG
operator|.
name|getAuthName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|useFramedTransport
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Framed transport is not supported with password based "
operator|+
literal|"authentication enabled."
argument_list|)
throw|;
block|}
if|if
condition|(
name|executeSetUGI
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Setting "
operator|+
name|ConfVars
operator|.
name|EXECUTE_SET_UGI
operator|+
literal|" is not supported "
operator|+
literal|"with password based authentication enabled."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using plain SASL transport factory with "
operator|+
name|authTypeStr
operator|+
literal|" authentication"
argument_list|)
expr_stmt|;
name|transportFactory
operator|=
name|MetaStorePlainSaslHelper
operator|.
name|getPlainTransportFactory
argument_list|(
name|authTypeStr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|NOSASL
operator|.
name|getAuthName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|executeSetUGI
condition|)
block|{
name|transportFactory
operator|=
name|useFramedTransport
condition|?
operator|new
name|ChainedTTransportFactory
argument_list|(
operator|new
name|TFramedTransport
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|TUGIContainingTransport
operator|.
name|Factory
argument_list|()
argument_list|)
else|:
operator|new
name|TUGIContainingTransport
operator|.
name|Factory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|transportFactory
operator|=
name|useFramedTransport
condition|?
operator|new
name|TFramedTransport
operator|.
name|Factory
argument_list|()
else|:
operator|new
name|TTransportFactory
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Unsupported authentication type "
operator|+
name|authTypeStr
argument_list|)
throw|;
block|}
block|}
return|return
name|transportFactory
return|;
block|}
specifier|public
name|HadoopThriftAuthBridge
operator|.
name|Server
name|getSaslServer
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
operator|!
name|isSASLWithKerberizedHadoop
argument_list|()
operator|||
literal|null
operator|==
name|saslServer
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"SASL server is not setup"
argument_list|)
throw|;
block|}
return|return
name|saslServer
return|;
block|}
specifier|public
name|MetastoreDelegationTokenManager
name|getDelegationTokenManager
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
operator|!
name|isSASLWithKerberizedHadoop
argument_list|()
operator|||
literal|null
operator|==
name|saslServer
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"SASL server is not setup"
argument_list|)
throw|;
block|}
return|return
name|delegationTokenManager
return|;
block|}
specifier|public
name|boolean
name|isSASLWithKerberizedHadoop
parameter_list|()
block|{
return|return
literal|"kerberos"
operator|.
name|equalsIgnoreCase
argument_list|(
name|hadoopAuth
argument_list|)
operator|&&
operator|!
name|authTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|AuthConstants
operator|.
name|AuthTypes
operator|.
name|NOSASL
operator|.
name|getAuthName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ChainedTTransportFactory
extends|extends
name|TTransportFactory
block|{
specifier|private
specifier|final
name|TTransportFactory
name|parentTransFactory
decl_stmt|;
specifier|private
specifier|final
name|TTransportFactory
name|childTransFactory
decl_stmt|;
specifier|private
name|ChainedTTransportFactory
parameter_list|(
name|TTransportFactory
name|parentTransFactory
parameter_list|,
name|TTransportFactory
name|childTransFactory
parameter_list|)
block|{
name|this
operator|.
name|parentTransFactory
operator|=
name|parentTransFactory
expr_stmt|;
name|this
operator|.
name|childTransFactory
operator|=
name|childTransFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TTransport
name|getTransport
parameter_list|(
name|TTransport
name|trans
parameter_list|)
block|{
return|return
name|childTransFactory
operator|.
name|getTransport
argument_list|(
name|parentTransFactory
operator|.
name|getTransport
argument_list|(
name|trans
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

