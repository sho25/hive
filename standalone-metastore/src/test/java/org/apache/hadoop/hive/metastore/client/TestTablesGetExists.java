begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Test class for IMetaStoreClient API. Testing the Table related functions for metadata  * querying like getting one, or multiple tables, and table name lists.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTablesGetExists
block|{
comment|// Needed until there is no junit release with @BeforeParam, @AfterParam (junit 4.13)
comment|// https://github.com/junit-team/junit4/commit/1bf8438b65858565dbb64736bfe13aae9cfc1b5a
comment|// Then we should remove our own copy
specifier|private
specifier|static
name|Set
argument_list|<
name|AbstractMetaStoreService
argument_list|>
name|metaStoreServices
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DATABASE
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OTHER_DATABASE
init|=
literal|"dummy"
decl_stmt|;
specifier|private
specifier|final
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|Table
index|[]
name|testTables
init|=
operator|new
name|Table
index|[
literal|7
index|]
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|getMetaStoreToTest
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|MetaStoreFactoryForTests
operator|.
name|getMetaStores
argument_list|()
decl_stmt|;
name|metaStoreServices
operator|=
name|result
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|test
lambda|->
operator|(
name|AbstractMetaStoreService
operator|)
name|test
index|[
literal|1
index|]
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|TestTablesGetExists
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
name|this
operator|.
name|metaStore
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Needed until there is no junit release with @BeforeParam, @AfterParam (junit 4.13)
comment|// https://github.com/junit-team/junit4/commit/1bf8438b65858565dbb64736bfe13aae9cfc1b5a
comment|// Then we should move this to @AfterParam
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopMetaStores
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|AbstractMetaStoreService
name|metaStoreService
range|:
name|metaStoreServices
control|)
block|{
name|metaStoreService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Clean up the database
name|client
operator|.
name|dropDatabase
argument_list|(
name|OTHER_DATABASE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Drop every table in the default database
for|for
control|(
name|String
name|tableName
range|:
name|client
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
control|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Clean up trash
name|metaStore
operator|.
name|cleanWarehouseDirs
argument_list|()
expr_stmt|;
name|testTables
index|[
literal|0
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testTables
index|[
literal|1
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_view"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"VIEW"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testTables
index|[
literal|2
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table_to_find_1"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testTables
index|[
literal|3
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table_to_find_2"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"VIEW"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testTables
index|[
literal|4
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table_hidden_1"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|5
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testTables
index|[
literal|6
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table_to_find_3"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Create the tables in the MetaStore
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testTables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|client
operator|.
name|createTable
argument_list|(
name|testTables
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Reload tables from the MetaStore
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testTables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|testTables
index|[
name|i
index|]
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|testTables
index|[
name|i
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
name|i
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
comment|// Test in upper case
name|Table
name|resultUpper
init|=
name|client
operator|.
name|getTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing tables"
argument_list|,
name|table
argument_list|,
name|resultUpper
argument_list|)
expr_stmt|;
comment|// Test in mixed case
name|Table
name|resultMix
init|=
name|client
operator|.
name|getTable
argument_list|(
literal|"DeFaUlt"
argument_list|,
literal|"tEsT_TabLE"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing tables"
argument_list|,
name|table
argument_list|,
name|resultMix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetTableNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|client
operator|.
name|getTable
argument_list|(
literal|"no_such_database"
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetTableNoSuchTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|client
operator|.
name|getTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"no_such_table"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetTableNoSuchTableInTheDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|client
operator|.
name|getTable
argument_list|(
name|OTHER_DATABASE
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableNullDatabase
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|getTable
argument_list|(
literal|null
argument_list|,
name|OTHER_DATABASE
argument_list|)
expr_stmt|;
comment|// TODO: Should be checked on server side. On Embedded metastore it throws MetaException,
comment|// on Remote metastore it throws TProtocolException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an MetaException or TProtocolException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableNullTableName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|getTable
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// TODO: Should be checked on server side. On Embedded metastore it throws MetaException,
comment|// on Remote metastore it throws TProtocolException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an MetaException or TProtocolException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAllTables
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|client
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All tables size"
argument_list|,
literal|5
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|testTables
control|)
block|{
if|if
condition|(
name|table
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Checking table names"
argument_list|,
name|tables
operator|.
name|contains
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Drop one table, see what remains
name|client
operator|.
name|dropTable
argument_list|(
name|testTables
index|[
literal|1
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|1
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|tables
operator|=
name|client
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All tables size"
argument_list|,
literal|4
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|testTables
control|)
block|{
if|if
condition|(
name|table
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
operator|&&
operator|!
name|table
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|testTables
index|[
literal|1
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Checking table names"
argument_list|,
name|tables
operator|.
name|contains
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// No such database
name|tables
operator|=
name|client
operator|.
name|getAllTables
argument_list|(
literal|"no_such_database"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All tables size"
argument_list|,
literal|0
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetAllTablesInvalidData
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|getAllTables
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAllTablesCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check case insensitive search
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|client
operator|.
name|getAllTables
argument_list|(
literal|"dEFauLt"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found tables size"
argument_list|,
literal|5
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTables
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Find tables which name contains _to_find_ in the default database
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|client
operator|.
name|getTables
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"*_to_find_*"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All tables size"
argument_list|,
literal|2
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Comparing tablenames"
argument_list|,
name|tables
operator|.
name|contains
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Comparing tablenames"
argument_list|,
name|tables
operator|.
name|contains
argument_list|(
name|testTables
index|[
literal|3
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Find tables which name contains _to_find_ or _hidden_ in the default database
name|tables
operator|=
name|client
operator|.
name|getTables
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"*_to_find_*|*_hidden_*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All tables size"
argument_list|,
literal|3
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Comparing tablenames"
argument_list|,
name|tables
operator|.
name|contains
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Comparing tablenames"
argument_list|,
name|tables
operator|.
name|contains
argument_list|(
name|testTables
index|[
literal|3
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Comparing tablenames"
argument_list|,
name|tables
operator|.
name|contains
argument_list|(
name|testTables
index|[
literal|4
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Find table which name contains _to_find_ in the dummy database
name|tables
operator|=
name|client
operator|.
name|getTables
argument_list|(
name|OTHER_DATABASE
argument_list|,
literal|"*_to_find_*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found functions size"
argument_list|,
literal|1
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Comparing tablenames"
argument_list|,
name|tables
operator|.
name|contains
argument_list|(
name|testTables
index|[
literal|6
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Look for tables but do not find any
name|tables
operator|=
name|client
operator|.
name|getTables
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"*_not_such_function_*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No such table size"
argument_list|,
literal|0
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Look for tables without pattern
name|tables
operator|=
name|client
operator|.
name|getTables
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No such functions size"
argument_list|,
literal|5
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Look for tables with empty pattern
name|tables
operator|=
name|client
operator|.
name|getTables
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No such functions size"
argument_list|,
literal|0
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// No such database
name|tables
operator|=
name|client
operator|.
name|getTables
argument_list|(
literal|"no_such_database"
argument_list|,
name|OTHER_DATABASE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No such table size"
argument_list|,
literal|0
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTablesCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check case insensitive search
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|client
operator|.
name|getTables
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"*_tO_FiND*"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found tables size"
argument_list|,
literal|2
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Comparing tablenames"
argument_list|,
name|tables
operator|.
name|contains
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Comparing tablenames"
argument_list|,
name|tables
operator|.
name|contains
argument_list|(
name|testTables
index|[
literal|3
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetTablesNullDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|"*_tO_FiND*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableExists
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Using the second table, since a table called "test_table" exists in both databases
name|Table
name|table
init|=
name|testTables
index|[
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table exists"
argument_list|,
name|client
operator|.
name|tableExists
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Table not exists"
argument_list|,
name|client
operator|.
name|tableExists
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"non_existing_table"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No such database
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Table not exists"
argument_list|,
name|client
operator|.
name|tableExists
argument_list|(
literal|"no_such_database"
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// No such table in the given database
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Table not exists"
argument_list|,
name|client
operator|.
name|tableExists
argument_list|(
name|OTHER_DATABASE
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableExistsCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
comment|// Test in upper case
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table exists"
argument_list|,
name|client
operator|.
name|tableExists
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test in mixed case
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table exists"
argument_list|,
name|client
operator|.
name|tableExists
argument_list|(
literal|"DeFaUlt"
argument_list|,
literal|"tEsT_TabLE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableExistsNullDatabase
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|tableExists
argument_list|(
literal|null
argument_list|,
name|OTHER_DATABASE
argument_list|)
expr_stmt|;
comment|// TODO: Should be checked on server side. On Embedded metastore it throws MetaException,
comment|// on Remote metastore it throws TProtocolException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an MetaException or TProtocolException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableExistsNullTableName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|tableExists
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// TODO: Should be checked on server side. On Embedded metastore it throws MetaException,
comment|// on Remote metastore it throws TProtocolException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an MetaException or TProtocolException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableObjectsByName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|testTables
index|[
literal|1
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
name|client
operator|.
name|getTableObjectsByName
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
name|tableNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found tables"
argument_list|,
literal|2
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|tables
control|)
block|{
if|if
condition|(
name|table
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing tables"
argument_list|,
name|testTables
index|[
literal|0
index|]
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing tables"
argument_list|,
name|testTables
index|[
literal|1
index|]
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test with empty array
name|tables
operator|=
name|client
operator|.
name|getTableObjectsByName
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found tables"
argument_list|,
literal|0
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with table name which does not exists
name|tableNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
literal|"no_such_table"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getTableObjectsByName
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tableNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found tables"
argument_list|,
literal|0
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with table name which does not exists in the given database
name|tableNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|getTableObjectsByName
argument_list|(
name|OTHER_DATABASE
argument_list|,
name|tableNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found tables"
argument_list|,
literal|0
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableObjectsByNameCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
comment|// Test in upper case
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
name|client
operator|.
name|getTableObjectsByName
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|tableNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found tables"
argument_list|,
literal|1
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing tables"
argument_list|,
name|table
argument_list|,
name|tables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test in mixed case
name|tableNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
literal|"tEsT_TabLE"
argument_list|)
expr_stmt|;
name|tables
operator|=
name|client
operator|.
name|getTableObjectsByName
argument_list|(
literal|"DeFaUlt"
argument_list|,
name|tableNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found tables"
argument_list|,
literal|1
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing tables"
argument_list|,
name|table
argument_list|,
name|tables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnknownDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetTableObjectsByNameNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|getTableObjectsByName
argument_list|(
literal|"no_such_database"
argument_list|,
name|tableNames
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableObjectsByNameNullDatabase
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|OTHER_DATABASE
argument_list|)
expr_stmt|;
name|client
operator|.
name|getTableObjectsByName
argument_list|(
literal|null
argument_list|,
name|tableNames
argument_list|)
expr_stmt|;
comment|// TODO: Should be checked on server side. On Embedded metastore it throws MetaException,
comment|// on Remote metastore it throws TProtocolException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an UnknownDBException or TProtocolException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableObjectsByNameNullTableNameList
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|getTableObjectsByName
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// TODO: Should be checked on server side. On Embedded metastore it throws MetaException,
comment|// on Remote metastore it throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an InvalidOperationException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
block|}
end_class

end_unit

