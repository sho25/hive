begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CheckConstraintsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DefaultConstraintsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ForeignKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FunctionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotNullConstraintsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionValuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionValuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrimaryKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLCheckConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLDefaultConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLNotNullConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLUniqueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UniqueConstraintsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|FunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|SQLCheckConstraintBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|SQLDefaultConstraintBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|SQLForeignKeyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|SQLNotNullConstraintBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|SQLPrimaryKeyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|SQLUniqueConstraintBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_class
annotation|@
name|Ignore
specifier|public
specifier|abstract
class|class
name|TestNonCatCallsWithCatalog
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OTHER_DATABASE
init|=
literal|"non_cat_other_db"
decl_stmt|;
specifier|private
name|Table
index|[]
name|testTables
init|=
operator|new
name|Table
index|[
literal|6
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FUNCTION_CLASS
init|=
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFUpper"
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|protected
specifier|abstract
name|IMetaStoreClient
name|getClient
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|protected
specifier|abstract
name|String
name|expectedCatalog
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|String
name|expectedBaseDir
parameter_list|()
throws|throws
name|MetaException
function_decl|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Get new client
name|client
operator|=
name|getClient
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|client
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|db
range|:
name|databases
control|)
block|{
if|if
condition|(
operator|!
name|DEFAULT_DATABASE_NAME
operator|.
name|equals
argument_list|(
name|db
argument_list|)
condition|)
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|db
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Drop every table in the default database
for|for
control|(
name|String
name|tableName
range|:
name|client
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
control|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|testTables
index|[
literal|0
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"test_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col2"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col3"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|1
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"test_view"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col2"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col3"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"VIRTUAL_VIEW"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|2
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"test_table_to_find_1"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col2"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col3"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|3
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"test_partitioned_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col2"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"test_part_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|4
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"external_table_for_test"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
literal|"/external/table_dir"
argument_list|)
argument_list|)
operator|.
name|addTableParam
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"EXTERNAL_TABLE"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|5
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Create partitions for the partitioned table
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|testTables
index|[
literal|3
index|]
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|databases
parameter_list|()
throws|throws
name|TException
throws|,
name|URISyntaxException
block|{
name|String
index|[]
name|dbNames
init|=
block|{
literal|"db1"
block|,
literal|"db9"
block|}
decl_stmt|;
name|Database
index|[]
name|dbs
init|=
operator|new
name|Database
index|[
literal|2
index|]
decl_stmt|;
comment|// For this one don't specify a location to make sure it gets put in the catalog directory
name|dbs
index|[
literal|0
index|]
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// For the second one, explicitly set a location to make sure it ends up in the specified place.
name|String
name|db1Location
init|=
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|dbNames
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|dbs
index|[
literal|1
index|]
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbNames
index|[
literal|1
index|]
argument_list|)
operator|.
name|setLocation
argument_list|(
name|db1Location
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Database
name|fetched
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|dbNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|expectedLocation
init|=
operator|new
name|File
argument_list|(
name|expectedBaseDir
argument_list|()
argument_list|,
name|dbNames
index|[
literal|0
index|]
operator|+
literal|".db"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedLocation
argument_list|,
name|fetched
operator|.
name|getLocationUri
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|String
name|db0Location
init|=
operator|new
name|URI
argument_list|(
name|fetched
operator|.
name|getLocationUri
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|db0Location
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
name|dir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getDatabase
argument_list|(
name|dbNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|db1Location
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|fetched
operator|.
name|getLocationUri
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|fetched
operator|.
name|getLocationUri
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
name|dir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fetchedDbs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetchedDbs
operator|.
name|contains
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
name|fetchedDbs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getDatabases
argument_list|(
literal|"db*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fetchedDbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetchedDbs
operator|.
name|contains
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbNames
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|File
argument_list|(
name|db0Location
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbNames
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|File
argument_list|(
name|db1Location
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|fetchedDbs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetchedDbs
operator|.
name|contains
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tablesCreateDropAlterTruncate
parameter_list|()
throws|throws
name|TException
throws|,
name|URISyntaxException
block|{
name|String
name|dbName
init|=
literal|"db_in_other_catalog"
decl_stmt|;
comment|// For this one don't specify a location to make sure it gets put in the catalog directory
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|tableNames
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tableNames
index|[
name|i
index|]
operator|=
literal|"table_in_other_catalog_"
operator|+
name|i
expr_stmt|;
name|TableBuilder
name|builder
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col1_"
operator|+
name|i
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col2_"
operator|+
name|i
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
decl_stmt|;
comment|// Make one have a non-standard location
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|builder
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make one partitioned
if|if
condition|(
name|i
operator|==
literal|2
condition|)
name|builder
operator|.
name|addPartCol
argument_list|(
literal|"pcol1"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
comment|// Make one a materialized view
comment|/*       // TODO HIVE-18991       if (i == 3) {         builder.setType(TableType.MATERIALIZED_VIEW.name())             .setRewriteEnabled(true)             .addMaterializedViewReferencedTable(dbName + "." + tableNames[0]);       }       */
name|client
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add partitions for the partitioned table
name|String
index|[]
name|partVals
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|Table
name|partitionedTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partVals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|partVals
index|[
name|i
index|]
operator|=
literal|"part"
operator|+
name|i
expr_stmt|;
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|partitionedTable
argument_list|)
operator|.
name|addValue
argument_list|(
name|partVals
index|[
name|i
index|]
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// Get tables, make sure the locations are correct
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Table
name|t
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|t
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedLocation
init|=
operator|(
name|i
operator|<
literal|1
operator|)
condition|?
operator|new
name|File
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
else|:
operator|new
name|File
argument_list|(
name|expectedBaseDir
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|dbName
operator|+
literal|".db"
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedLocation
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
name|dir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Make sure getting table in the wrong catalog does not work
try|try
block|{
name|Table
name|t
init|=
name|client
operator|.
name|getTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
comment|// test getAllTables
name|Set
argument_list|<
name|String
argument_list|>
name|fetchedNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableNames
operator|.
name|length
argument_list|,
name|fetchedNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetchedNames
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|fetchedNames
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetchedNames
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// test getMaterializedViewsForRewriting
comment|/* TODO HIVE-18991     List<String> materializedViews = client.getMaterializedViewsForRewriting(dbName);     Assert.assertEquals(1, materializedViews.size());     Assert.assertEquals(tableNames[3], materializedViews.get(0));     */
name|fetchedNames
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getMaterializedViewsForRewriting
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetchedNames
operator|.
name|contains
argument_list|(
name|tableNames
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// test getTableObjectsByName
name|List
argument_list|<
name|Table
argument_list|>
name|fetchedTables
init|=
name|client
operator|.
name|getTableObjectsByName
argument_list|(
name|dbName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|tableNames
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fetchedTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|fetchedTables
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|fetchedTables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableNames
index|[
literal|1
index|]
argument_list|,
name|fetchedTables
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|fetchedTables
operator|=
name|client
operator|.
name|getTableObjectsByName
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|tableNames
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fetchedTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test altering the table
name|Table
name|t
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|t
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|t
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|deepCopy
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|t
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Alter a table in the wrong catalog
try|try
block|{
name|client
operator|.
name|alter_table
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
comment|// Update the metadata for the materialized view
comment|/* TODO HIVE-18991     CreationMetadata cm = client.getTable(dbName, tableNames[3]).getCreationMetadata();     cm.addToTablesUsed(dbName + "." + tableNames[1]);     client.updateCreationMetadata(dbName, tableNames[3], cm);     */
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partVal
range|:
name|partVals
control|)
name|partNames
operator|.
name|add
argument_list|(
literal|"pcol1="
operator|+
name|partVal
argument_list|)
expr_stmt|;
comment|// Truncate a table
name|client
operator|.
name|truncateTable
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
comment|// Have to do this in reverse order so that we drop the materialized view first.
for|for
control|(
name|int
name|i
init|=
name|tableNames
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|t
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|File
name|tableDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableDir
operator|.
name|exists
argument_list|()
operator|&&
name|tableDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableNames
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|tableNames
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableDir
operator|.
name|exists
argument_list|()
operator|&&
name|tableDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|tableDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tablesGetExists
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"db_in_other_catalog"
decl_stmt|;
comment|// For this one don't specify a location to make sure it gets put in the catalog directory
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|tableNames
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tableNames
index|[
name|i
index|]
operator|=
literal|"table_in_other_catalog_"
operator|+
name|i
expr_stmt|;
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col1_"
operator|+
name|i
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col2_"
operator|+
name|i
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|tables
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
literal|"*e_in_other_*"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tables
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fetchedNames
init|=
name|client
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
literal|"*_3"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetchedNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableNames
index|[
literal|3
index|]
argument_list|,
name|fetchedNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table exists"
argument_list|,
name|client
operator|.
name|tableExists
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Table not exists"
argument_list|,
name|client
operator|.
name|tableExists
argument_list|(
name|dbName
argument_list|,
literal|"non_existing_table"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tablesList
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"db_in_other_catalog"
decl_stmt|;
comment|// For this one don't specify a location to make sure it gets put in the catalog directory
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|tableNames
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tableNames
index|[
name|i
index|]
operator|=
literal|"table_in_other_catalog_"
operator|+
name|i
expr_stmt|;
name|TableBuilder
name|builder
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col1_"
operator|+
name|i
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col2_"
operator|+
name|i
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|builder
operator|.
name|addTableParam
argument_list|(
literal|"the_key"
argument_list|,
literal|"the_value"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|String
name|filter
init|=
name|hive_metastoreConstants
operator|.
name|HIVE_FILTER_FIELD_PARAMS
operator|+
literal|"the_key=\"the_value\""
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fetchedNames
init|=
name|client
operator|.
name|listTableNamesByFilter
argument_list|(
name|dbName
argument_list|,
name|filter
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetchedNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|fetchedNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTableMeta
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"db9"
decl_stmt|;
comment|// For this one don't specify a location to make sure it gets put in the catalog directory
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|tableNames
init|=
block|{
literal|"table_in_other_catalog_1"
block|,
literal|"table_in_other_catalog_2"
block|,
literal|"random_name"
block|}
decl_stmt|;
name|List
argument_list|<
name|TableMeta
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tableNames
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|client
operator|.
name|createTable
argument_list|(
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TableMeta
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TableMeta
argument_list|>
name|actual
init|=
name|client
operator|.
name|getTableMeta
argument_list|(
name|dbName
argument_list|,
literal|"*"
argument_list|,
name|types
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|expected
argument_list|)
argument_list|,
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
name|actual
operator|=
name|client
operator|.
name|getTableMeta
argument_list|(
literal|"*"
argument_list|,
literal|"table_*"
argument_list|,
name|types
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|actual
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addPartitions
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"add_partition_database_in_other_catalog"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"table_in_other_catalog"
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"partcol"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Partition
index|[]
name|parts
init|=
operator|new
name|Partition
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|add_partition
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|client
operator|.
name|add_partitions
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parts
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Partition
name|fetched
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|fetched
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|fetched
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPartitions
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"get_partition_database_in_other_catalog"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"table_in_other_catalog"
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"partcol"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|addTableParam
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Partition
index|[]
name|parts
init|=
operator|new
name|Partition
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|add_partitions
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parts
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|fetched
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a0"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a0"
argument_list|,
name|fetched
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|"partcol=a0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a0"
argument_list|,
name|fetched
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|fetchedParts
init|=
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"partcol=a0"
argument_list|,
literal|"partcol=a1"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fetchedParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|fetchedParts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|fetchedParts
control|)
name|vals
operator|.
name|add
argument_list|(
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vals
operator|.
name|contains
argument_list|(
literal|"a0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vals
operator|.
name|contains
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|listPartitions
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"list_partition_database_in_other_catalog"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"table_in_other_catalog"
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"partcol"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Partition
index|[]
name|parts
init|=
operator|new
name|Partition
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|add_partitions
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parts
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|fetched
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parts
operator|.
name|length
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a0"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|proxy
init|=
name|client
operator|.
name|listPartitionSpecs
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parts
operator|.
name|length
argument_list|,
name|proxy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|proxy
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|"partcol=\"a0\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|=
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|"partcol=\"a0\""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proxy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|proxy
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|"partcol=\"a0\""
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
literal|57
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parts
operator|.
name|length
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|names
operator|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a0"
argument_list|)
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionValuesRequest
name|rqst
init|=
operator|new
name|PartitionValuesRequest
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"partcol"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|PartitionValuesResponse
name|rsp
init|=
name|client
operator|.
name|listPartitionValues
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|rsp
operator|.
name|getPartitionValuesSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|alterPartitions
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"alter_partition_database_in_other_catalog"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"table_in_other_catalog"
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"partcol"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Partition
index|[]
name|parts
init|=
operator|new
name|Partition
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
literal|"b"
operator|+
name|i
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|add_partitions
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parts
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|newPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a0"
argument_list|)
argument_list|)
decl_stmt|;
name|newPart
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"test_key"
argument_list|,
literal|"test_value"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_partition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
name|Partition
name|fetched
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a0"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_value"
argument_list|,
name|fetched
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"test_key"
argument_list|)
argument_list|)
expr_stmt|;
name|newPart
operator|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
name|newPart
operator|.
name|setLastAccessTime
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Partition
name|newPart1
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a2"
argument_list|)
argument_list|)
decl_stmt|;
name|newPart1
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
literal|"somewhere"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_partitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newPart
argument_list|,
name|newPart1
argument_list|)
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|fetched
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|contains
argument_list|(
literal|"somewhere"
argument_list|)
argument_list|)
expr_stmt|;
name|newPart
operator|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a4"
argument_list|)
argument_list|)
expr_stmt|;
name|newPart
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"test_key"
argument_list|,
literal|"test_value"
argument_list|)
expr_stmt|;
name|EnvironmentContext
name|ec
init|=
operator|new
name|EnvironmentContext
argument_list|()
decl_stmt|;
name|ec
operator|.
name|setProperties
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_partition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|newPart
argument_list|,
name|ec
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a4"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_value"
argument_list|,
name|fetched
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"test_key"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropPartitions
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"drop_partition_database_in_other_catalog"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"table_in_other_catalog"
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"partcol"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Partition
index|[]
name|parts
init|=
operator|new
name|Partition
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|add_partitions
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parts
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|fetched
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parts
operator|.
name|length
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|client
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a0"
argument_list|)
argument_list|,
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
operator|.
name|ifExists
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|client
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|"partcol=a1"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|primaryKeyAndForeignKey
parameter_list|()
throws|throws
name|TException
block|{
name|Table
name|parentTable
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|Table
name|table
init|=
name|testTables
index|[
literal|3
index|]
decl_stmt|;
name|String
name|constraintName
init|=
literal|"othercatfk"
decl_stmt|;
comment|// Single column unnamed primary key in default catalog and database
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
operator|new
name|SQLPrimaryKeyBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|parentTable
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"test_col1"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|addPrimaryKey
argument_list|(
name|pk
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fk
init|=
operator|new
name|SQLForeignKeyBuilder
argument_list|()
operator|.
name|fromPrimaryKey
argument_list|(
name|pk
argument_list|)
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"test_col1"
argument_list|)
operator|.
name|setConstraintName
argument_list|(
name|constraintName
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|addForeignKey
argument_list|(
name|fk
argument_list|)
expr_stmt|;
name|PrimaryKeysRequest
name|pkRqst
init|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|parentTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|parentTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|pkRqst
operator|.
name|setCatName
argument_list|(
name|parentTable
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pkFetched
init|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|pkRqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pkFetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_col1"
argument_list|,
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentTable
operator|.
name|getCatName
argument_list|()
argument_list|,
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|ForeignKeysRequest
name|rqst
init|=
operator|new
name|ForeignKeysRequest
argument_list|(
name|parentTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|parentTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fetched
init|=
name|client
operator|.
name|getForeignKeys
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFktable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFktable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_col1"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFkcolumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPktable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPktable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_col1"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFkcolumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentTable
operator|.
name|getTableName
argument_list|()
operator|+
literal|"_primary_key"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPk_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|constraintName
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFk_name
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|table0FkName
init|=
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFk_name
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Drop a foreign key
name|client
operator|.
name|dropConstraint
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table0FkName
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|ForeignKeysRequest
argument_list|(
name|parentTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|parentTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getForeignKeys
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notNullConstraint
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|constraintName
init|=
literal|"ocuc"
decl_stmt|;
comment|// Table in non 'hive' catalog
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|nn
init|=
operator|new
name|SQLNotNullConstraintBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|testTables
index|[
literal|2
index|]
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"test_col1"
argument_list|)
operator|.
name|setConstraintName
argument_list|(
name|constraintName
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|addNotNullConstraint
argument_list|(
name|nn
argument_list|)
expr_stmt|;
name|NotNullConstraintsRequest
name|rqst
init|=
operator|new
name|NotNullConstraintsRequest
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|fetched
init|=
name|client
operator|.
name|getNotNullConstraints
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_col1"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|constraintName
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropConstraint
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
name|constraintName
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|NotNullConstraintsRequest
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getNotNullConstraints
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|uniqueConstraint
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|constraintName
init|=
literal|"ocuc"
decl_stmt|;
comment|// Table in non 'hive' catalog
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uc
init|=
operator|new
name|SQLUniqueConstraintBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|testTables
index|[
literal|2
index|]
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"test_col1"
argument_list|)
operator|.
name|setConstraintName
argument_list|(
name|constraintName
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|addUniqueConstraint
argument_list|(
name|uc
argument_list|)
expr_stmt|;
name|UniqueConstraintsRequest
name|rqst
init|=
operator|new
name|UniqueConstraintsRequest
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|fetched
init|=
name|client
operator|.
name|getUniqueConstraints
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_col1"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|constraintName
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUk_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropConstraint
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
name|constraintName
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|UniqueConstraintsRequest
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getUniqueConstraints
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|defaultConstraints
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|constraintName
init|=
literal|"ocdv"
decl_stmt|;
comment|// Table in non 'hive' catalog
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|dv
init|=
operator|new
name|SQLDefaultConstraintBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|testTables
index|[
literal|2
index|]
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"test_col1"
argument_list|)
operator|.
name|setConstraintName
argument_list|(
name|constraintName
argument_list|)
operator|.
name|setDefaultVal
argument_list|(
literal|"empty"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|addDefaultConstraint
argument_list|(
name|dv
argument_list|)
expr_stmt|;
name|DefaultConstraintsRequest
name|rqst
init|=
operator|new
name|DefaultConstraintsRequest
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|fetched
init|=
name|client
operator|.
name|getDefaultConstraints
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_col1"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"empty"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDefault_value
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|constraintName
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDc_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropConstraint
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
name|constraintName
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|DefaultConstraintsRequest
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getDefaultConstraints
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createTableWithConstraints
parameter_list|()
throws|throws
name|TException
block|{
name|Table
name|parentTable
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"table_in_other_catalog_with_constraints"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col2"
argument_list|,
literal|"varchar(32)"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col3"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col4"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col5"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col6"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|parentPk
init|=
operator|new
name|SQLPrimaryKeyBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|parentTable
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"test_col1"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|addPrimaryKey
argument_list|(
name|parentPk
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
operator|new
name|SQLPrimaryKeyBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col2"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fk
init|=
operator|new
name|SQLForeignKeyBuilder
argument_list|()
operator|.
name|fromPrimaryKey
argument_list|(
name|parentPk
argument_list|)
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col1"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|dv
init|=
operator|new
name|SQLDefaultConstraintBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col3"
argument_list|)
operator|.
name|setDefaultVal
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|nn
init|=
operator|new
name|SQLNotNullConstraintBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col4"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uc
init|=
operator|new
name|SQLUniqueConstraintBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col5"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|cc
init|=
operator|new
name|SQLCheckConstraintBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col6"
argument_list|)
operator|.
name|setCheckExpression
argument_list|(
literal|"> 0"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTableWithConstraints
argument_list|(
name|table
argument_list|,
name|pk
argument_list|,
name|fk
argument_list|,
name|uc
argument_list|,
name|nn
argument_list|,
name|dv
argument_list|,
name|cc
argument_list|)
expr_stmt|;
name|PrimaryKeysRequest
name|pkRqst
init|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|parentTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|parentTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|pkRqst
operator|.
name|setCatName
argument_list|(
name|parentTable
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pkFetched
init|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|pkRqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pkFetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test_col1"
argument_list|,
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentTable
operator|.
name|getCatName
argument_list|()
argument_list|,
name|pkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|ForeignKeysRequest
name|fkRqst
init|=
operator|new
name|ForeignKeysRequest
argument_list|(
name|parentTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|parentTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|fkRqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fkFetched
init|=
name|client
operator|.
name|getForeignKeys
argument_list|(
name|fkRqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fkFetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|fkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFktable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFktable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|fkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFkcolumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|fkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPktable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPktable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentTable
operator|.
name|getTableName
argument_list|()
operator|+
literal|"_primary_key"
argument_list|,
name|fkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPk_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|fkFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|NotNullConstraintsRequest
name|nnRqst
init|=
operator|new
name|NotNullConstraintsRequest
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|nnFetched
init|=
name|client
operator|.
name|getNotNullConstraints
argument_list|(
name|nnRqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nnFetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|nnFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|nnFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col4"
argument_list|,
name|nnFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|"_not_null_constraint"
argument_list|,
name|nnFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nnFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nnFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nnFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|nnFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|UniqueConstraintsRequest
name|ucRqst
init|=
operator|new
name|UniqueConstraintsRequest
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|ucFetched
init|=
name|client
operator|.
name|getUniqueConstraints
argument_list|(
name|ucRqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ucFetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|ucFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|ucFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col5"
argument_list|,
name|ucFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ucFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|"_unique_constraint"
argument_list|,
name|ucFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUk_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ucFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ucFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ucFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|ucFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultConstraintsRequest
name|dcRqst
init|=
operator|new
name|DefaultConstraintsRequest
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|dcFetched
init|=
name|client
operator|.
name|getDefaultConstraints
argument_list|(
name|dcRqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dcFetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|dcFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|dcFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|dcFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col3"
argument_list|,
name|dcFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|dcFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDefault_value
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|"_default_value"
argument_list|,
name|dcFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDc_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dcFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dcFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dcFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|dcFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|CheckConstraintsRequest
name|ccRqst
init|=
operator|new
name|CheckConstraintsRequest
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|ccFetched
init|=
name|client
operator|.
name|getCheckConstraints
argument_list|(
name|ccRqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ccFetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|ccFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|ccFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|ccFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col6"
argument_list|,
name|ccFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"> 0"
argument_list|,
name|ccFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCheck_expression
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|"_check_constraint"
argument_list|,
name|ccFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDc_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ccFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ccFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ccFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|ccFetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|functions
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"functions_other_catalog_db"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|functionName
init|=
literal|"test_function"
decl_stmt|;
name|Function
name|function
init|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setName
argument_list|(
name|functionName
argument_list|)
operator|.
name|setClass
argument_list|(
name|TEST_FUNCTION_CLASS
argument_list|)
operator|.
name|setFunctionType
argument_list|(
name|FunctionType
operator|.
name|JAVA
argument_list|)
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"owner"
argument_list|)
operator|.
name|setCreateTime
argument_list|(
literal|100
argument_list|)
operator|.
name|addResourceUri
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|JAR
argument_list|,
literal|"hdfs:///tmp/jar1.jar"
argument_list|)
argument_list|)
operator|.
name|addResourceUri
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|FILE
argument_list|,
literal|"hdfs:///tmp/file1.txt"
argument_list|)
argument_list|)
operator|.
name|addResourceUri
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|ARCHIVE
argument_list|,
literal|"hdfs:///tmp/archive1.tgz"
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Function
name|createdFunction
init|=
name|client
operator|.
name|getFunction
argument_list|(
name|dbName
argument_list|,
name|functionName
argument_list|)
decl_stmt|;
comment|// The createTime will be set on the server side, so the comparison should skip it
name|function
operator|.
name|setCreateTime
argument_list|(
name|createdFunction
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|function
argument_list|,
name|createdFunction
argument_list|)
expr_stmt|;
name|String
name|f2Name
init|=
literal|"testy_function2"
decl_stmt|;
name|Function
name|f2
init|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setName
argument_list|(
name|f2Name
argument_list|)
operator|.
name|setClass
argument_list|(
name|TEST_FUNCTION_CLASS
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|functions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getFunctions
argument_list|(
name|dbName
argument_list|,
literal|"test*"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|functions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|functions
operator|.
name|contains
argument_list|(
name|functionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|functions
operator|.
name|contains
argument_list|(
name|f2Name
argument_list|)
argument_list|)
expr_stmt|;
name|functions
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getFunctions
argument_list|(
name|dbName
argument_list|,
literal|"test_*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|functions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|functions
operator|.
name|contains
argument_list|(
name|functionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|functions
operator|.
name|contains
argument_list|(
name|f2Name
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropFunction
argument_list|(
name|function
operator|.
name|getDbName
argument_list|()
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getFunction
argument_list|(
name|function
operator|.
name|getDbName
argument_list|()
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NoSuchObjectException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
block|}
comment|// Run a test without the builders.  They make certain default assumptions about catalogs, etc.
comment|//  Make sure things still work without those assumptions.
annotation|@
name|Test
specifier|public
name|void
name|noBuilders
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"db_no_builder"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
literal|"bla"
argument_list|,
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|dbName
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Database
name|fetched
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetched
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
literal|"now_I_remember_why_I_made_those_builders"
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pk1"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|SerDeInfo
name|serdeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"lib"
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|null
argument_list|,
literal|"org.apache.hadoop.hive.ql.io.HiveInputFormat"
argument_list|,
literal|"org.apache.hadoop.hive.ql.io.HiveOutputFormat"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serdeInfo
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partKeys
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Table
name|fetchedTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetchedTable
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p1"
argument_list|)
decl_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|values
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Partition
name|fetchedPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCatalog
argument_list|()
argument_list|,
name|fetchedPart
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

