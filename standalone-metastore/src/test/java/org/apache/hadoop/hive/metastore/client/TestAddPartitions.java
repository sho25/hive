begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Tests for creating partitions.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestAddPartitions
block|{
comment|// Needed until there is no junit release with @BeforeParam, @AfterParam (junit 4.13)
comment|// https://github.com/junit-team/junit4/commit/1bf8438b65858565dbb64736bfe13aae9cfc1b5a
comment|// Then we should remove our own copy
specifier|private
specifier|static
name|Set
argument_list|<
name|AbstractMetaStoreService
argument_list|>
name|metaStoreServices
init|=
literal|null
decl_stmt|;
specifier|private
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"test_partition_db"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"test_partition_table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PARAM_VALUE
init|=
literal|"partparamvalue"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PARAM_KEY
init|=
literal|"partparamkey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_YEAR_VALUE
init|=
literal|"2017"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_COL_TYPE
init|=
literal|"string"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|YEAR_COL_NAME
init|=
literal|"year"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MONTH_COL_NAME
init|=
literal|"month"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|short
name|MAX
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|getMetaStoreToTest
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|MetaStoreFactoryForTests
operator|.
name|getMetaStores
argument_list|()
decl_stmt|;
name|metaStoreServices
operator|=
name|result
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|test
lambda|->
operator|(
name|AbstractMetaStoreService
operator|)
name|test
index|[
literal|1
index|]
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|TestAddPartitions
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
name|this
operator|.
name|metaStore
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Needed until there is no junit release with @BeforeParam, @AfterParam (junit 4.13)
comment|// https://github.com/junit-team/junit4/commit/1bf8438b65858565dbb64736bfe13aae9cfc1b5a
comment|// Then we should move this to @AfterParam
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopMetaStores
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|AbstractMetaStoreService
name|metaStoreService
range|:
name|metaStoreServices
control|)
block|{
name|metaStoreService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Clean up the database
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|metaStore
operator|.
name|cleanWarehouseDirs
argument_list|()
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// Tests for the Partition add_partition(Partition partition) method
annotation|@
name|Test
specifier|public
name|void
name|testAddPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Partition
name|resultPart
init|=
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|resultPart
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2017"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionTwoValues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
decl_stmt|;
name|Table
name|table
init|=
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
name|tableLocation
argument_list|)
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2017/month=march"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionWithDefaultAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"2017"
argument_list|)
operator|.
name|setCols
argument_list|(
name|getYearPartCol
argument_list|()
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
comment|// Check if the default values are set for all unfilled attributes
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_NAME
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB_NAME
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|addAll
argument_list|(
name|getYearPartCol
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cols
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPartitionAttributesDefaultValues
argument_list|(
name|part
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionUpperCase
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
decl_stmt|;
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|getMonthPartCol
argument_list|()
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"APRIL"
argument_list|)
argument_list|,
name|getMonthPartCol
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"month=APRIL"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_NAME
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB_NAME
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"APRIL"
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableLocation
operator|+
literal|"/month=APRIL"
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionNonExistingDb
parameter_list|()
throws|throws
name|Exception
block|{
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
literal|"nonexistingdb"
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionNonExistingTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
literal|"nonexistingtable"
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionNullDb
parameter_list|()
throws|throws
name|Exception
block|{
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionNullTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionEmptyDb
parameter_list|()
throws|throws
name|Exception
block|{
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionEmptyTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsWithSameNameCaseSensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|getMonthPartCol
argument_list|()
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"may"
argument_list|)
argument_list|,
name|getMonthPartCol
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"MAY"
argument_list|)
argument_list|,
name|getMonthPartCol
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"month=MAY"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DEFAULT_PARAM_VALUE
operator|+
literal|"2"
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|DEFAULT_PARAM_KEY
operator|+
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
operator|+
literal|"/month=MAY"
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionNullSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|setSd
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionNullColsInSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
comment|// TODO: Not sure that this is the correct behavior. It doesn't make sense to create the
comment|// partition without column info. This should be investigated later.
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionEmptyColsInSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
comment|// TODO: Not sure that this is the correct behavior. It doesn't make sense to create the
comment|// partition without column info. This should be investigated later.
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionNullColTypeInSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionNullColNameInSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionInvalidColTypeInSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setType
argument_list|(
literal|"xyz"
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
comment|// TODO: Not sure that this is the correct behavior. It doesn't make sense to create the
comment|// partition with column with invalid type. This should be investigated later.
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"xyz"
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionEmptySerdeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|setSerdeInfo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionNullLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/addparttest2"
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/addparttest2/year=2017"
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionEmptyLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/addparttest3"
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/addparttest3/year=2017"
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionNullLocationInTableToo
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/test_partition_db.db/test_partition_table/year=2017"
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionForView
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setType
argument_list|(
literal|"VIRTUAL_VIEW"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|addPartCol
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionForExternalTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"part_add_ext_table"
decl_stmt|;
name|String
name|tableLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|tableName
decl_stmt|;
name|String
name|partitionLocation
init|=
name|tableLocation
operator|+
literal|"/addparttest"
decl_stmt|;
name|createExternalTable
argument_list|(
name|tableName
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
name|partitionLocation
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Partition
name|resultPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|resultPart
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|resultPart
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partitionLocation
argument_list|,
name|resultPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionForExternalTableNullLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"part_add_ext_table"
decl_stmt|;
name|createExternalTable
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Partition
name|resultPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|resultPart
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|resultPart
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|defaultTableLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|DB_NAME
operator|+
literal|".db/"
operator|+
name|tableName
decl_stmt|;
name|String
name|defaulPartitionLocation
init|=
name|defaultTableLocation
operator|+
literal|"/year=2017"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaulPartitionLocation
argument_list|,
name|resultPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionTooManyValues
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionNoPartColOnTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|origTable
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|origTable
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionNoColInPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addValue
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/addparttest"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionDifferentNamesAndTypesInColAndTableCol
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"1000"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"time"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=1000"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_NAME
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1000"
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionNoValueInPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/addparttest"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionMorePartColInTable
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionNullPartition
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|add_partition
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TTransportException
decl||
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// TODO: NPE should not be thrown.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionNullValue
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// TODO: This works different in remote and embedded mode.
comment|// In embedded mode, no exception happens.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionEmptyValue
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|partitionNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partitionNames
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"year=__HIVE_DEFAULT_PARTITION__"
argument_list|,
name|partitionNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSetInvalidLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|"%^#$$%#$testlocation/part1"
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
comment|// Tests for int add_partitions(List<Partition> partitions) method
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2016"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2015"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
name|int
name|numberOfCreatedParts
init|=
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|numberOfCreatedParts
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2017"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2016"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2016"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2015"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2015"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsMultipleValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"june"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2016"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2017/month=march"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2017/month=june"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"june"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2016/month=march"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2016"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsWithDefaultAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"2017"
argument_list|)
operator|.
name|setCols
argument_list|(
name|getYearPartCol
argument_list|()
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check if the default values are set for all unfilled attributes
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"year=2017"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE_NAME
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB_NAME
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|addAll
argument_list|(
name|getYearPartCol
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cols
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPartitionAttributesDefaultValues
argument_list|(
name|part
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsNullList
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|add_partitions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TTransportException
decl||
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// TODO: NPE should not be thrown
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsEmptyList
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|add_partitions
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsDifferentTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName1
init|=
name|TABLE_NAME
operator|+
literal|"1"
decl_stmt|;
name|String
name|tableName2
init|=
name|TABLE_NAME
operator|+
literal|"2"
decl_stmt|;
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|tableName1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|tableName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName1
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName2
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName1
argument_list|,
literal|"2018"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsDifferentDBs
parameter_list|()
throws|throws
name|Exception
block|{
name|createDB
argument_list|(
literal|"parttestdb2"
argument_list|)
expr_stmt|;
name|createTable
argument_list|()
expr_stmt|;
name|createTable
argument_list|(
literal|"parttestdb2"
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
literal|"parttestdb2"
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2018"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MetaException should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"parttestdb2"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsDuplicateInTheList
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsWithSameNameInTheListCaseSensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"this"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"next"
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"THIS"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parts
operator|.
name|contains
argument_list|(
literal|"year=this"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parts
operator|.
name|contains
argument_list|(
literal|"year=next"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parts
operator|.
name|contains
argument_list|(
literal|"year=THIS"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2015"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsNonExistingTable
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
literal|"nonexistingtable"
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsNonExistingDb
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
literal|"nonexistingdb"
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsNullDb
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|partition2
operator|.
name|setDbName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsEmptyDb
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsNullTable
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|partition2
operator|.
name|setTableName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsEmptyTable
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsOneInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|String
name|tableLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
decl_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|,
name|tableLocation
operator|+
literal|"/year=2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|,
name|tableLocation
operator|+
literal|"/year=2017"
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2015"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|partition3
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|tableLocation
operator|+
literal|"/year=2015/month=march"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MetaException should have happened."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: This does not work correctly. None of the partitions is created, but the folder
comment|// for the first two is created. It is because in HiveMetaStore.add_partitions_core when
comment|// going through the partitions, the first two are already put and started in the thread
comment|// pool when the exception occurs in the third one. When the exception occurs, we go to
comment|// the finally part, but the map can be empty (it depends on the progress of the other
comment|// threads) so the folders won't be deleted.
comment|//    Assert.assertFalse(metaStore.isPathExists(new Path(tableLocation + "/year=2016")));
comment|//    Assert.assertFalse(metaStore.isPathExists(new Path(tableLocation + "/year=2017")));
name|Assert
operator|.
name|assertFalse
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|tableLocation
operator|+
literal|"/year=2015/month=march"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsNullSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|setSd
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsNullColsInSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Not sure that this is the correct behavior. It doesn't make sense to create the
comment|// partition without column info. This should be investigated later.
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsEmptyColsInSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Not sure that this is the correct behavior. It doesn't make sense to create the
comment|// partition without column info. This should be investigated later.
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsNullColTypeInSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsNullColNameInSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsInvalidColTypeInSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setType
argument_list|(
literal|"xyz"
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Not sure that this is the correct behavior. It doesn't make sense to create the
comment|// partition with column with invalid type. This should be investigated later.
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"xyz"
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsEmptySerdeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|setSerdeInfo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionNullAndEmptyLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/addparttest2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|Partition
name|part1
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/addparttest2/year=2017"
argument_list|,
name|part1
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part1
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part2
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2016"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/addparttest2/year=2016"
argument_list|,
name|part2
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part2
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsNullLocationInTableToo
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/test_partition_db.db/test_partition_table/year=2017"
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsForView
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setType
argument_list|(
literal|"VIRTUAL_VIEW"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|addPartCol
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsForExternalTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"part_add_ext_table"
decl_stmt|;
name|String
name|tableLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|tableName
decl_stmt|;
name|createExternalTable
argument_list|(
name|tableName
argument_list|,
name|tableLocation
argument_list|)
expr_stmt|;
name|String
name|location1
init|=
name|tableLocation
operator|+
literal|"/addparttest2017"
decl_stmt|;
name|String
name|location2
init|=
name|tableLocation
operator|+
literal|"/addparttest2018"
decl_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
literal|"2017"
argument_list|,
name|location1
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
literal|"2018"
argument_list|,
name|location2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition1
argument_list|,
name|partition2
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|resultParts
init|=
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"year=2017"
argument_list|,
literal|"year=2018"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|resultParts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resultParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"2017"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|location1
argument_list|,
name|resultParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|location2
argument_list|,
name|resultParts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|location2
argument_list|,
name|resultParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|location1
argument_list|,
name|resultParts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsForExternalTableNullLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"part_add_ext_table"
decl_stmt|;
name|createExternalTable
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
literal|"2017"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
literal|"2018"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition1
argument_list|,
name|partition2
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|resultParts
init|=
name|client
operator|.
name|getPartitionsByNames
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"year=2017"
argument_list|,
literal|"year=2018"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|resultParts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|defaultTableLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|DB_NAME
operator|+
literal|".db/"
operator|+
name|tableName
decl_stmt|;
name|String
name|defaultPartLocation1
init|=
name|defaultTableLocation
operator|+
literal|"/year=2017"
decl_stmt|;
name|String
name|defaultPartLocation2
init|=
name|defaultTableLocation
operator|+
literal|"/year=2018"
decl_stmt|;
if|if
condition|(
name|resultParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"2017"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultPartLocation1
argument_list|,
name|resultParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultPartLocation2
argument_list|,
name|resultParts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultPartLocation2
argument_list|,
name|resultParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultPartLocation1
argument_list|,
name|resultParts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsNoValueInPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/addparttest"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionsMorePartColInTable
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsNullPartition
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TTransportException
decl||
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// TODO: NPE should not be thrown
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsNullValue
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// TODO: This works different in remote and embedded mode.
comment|// In embedded mode, no exception happens.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsEmptyValue
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|partitionNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partitionNames
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"year=__HIVE_DEFAULT_PARTITION__"
argument_list|,
name|partitionNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Tests for List<Partition> add_partitions(List<Partition> partitions,
comment|// boolean ifNotExists, boolean needResults) method
annotation|@
name|Test
specifier|public
name|void
name|testAddParts
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2016"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2015"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|addedPartitions
init|=
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|addedPartitions
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2017"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2016"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2016"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2015"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2015"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartsMultipleValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"june"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2016"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|addedPartitions
init|=
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|addedPartitions
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|addedPartitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2017/month=march"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2017/month=june"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"june"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2016/month=march"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2016"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartsNullList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: NPE should not be thrown
name|client
operator|.
name|add_partitions
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartsEmptyList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|addedPartitions
init|=
name|client
operator|.
name|add_partitions
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|addedPartitions
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|addedPartitions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartsDifferentTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName1
init|=
name|TABLE_NAME
operator|+
literal|"1"
decl_stmt|;
name|String
name|tableName2
init|=
name|TABLE_NAME
operator|+
literal|"2"
decl_stmt|;
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|tableName1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|tableName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName1
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName2
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName1
argument_list|,
literal|"2018"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartsDifferentDBs
parameter_list|()
throws|throws
name|Exception
block|{
name|createDB
argument_list|(
literal|"parttestdb2"
argument_list|)
expr_stmt|;
name|createTable
argument_list|()
expr_stmt|;
name|createTable
argument_list|(
literal|"parttestdb2"
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
literal|"parttestdb2"
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2018"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MetaException should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"parttestdb2"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartsDuplicateInTheList
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartsAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2015"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartsAlreadyExistsIfExistsTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2015"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|addedPartitions
init|=
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|addedPartitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitionNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partitionNames
operator|.
name|contains
argument_list|(
literal|"year=2015"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partitionNames
operator|.
name|contains
argument_list|(
literal|"year=2016"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partitionNames
operator|.
name|contains
argument_list|(
literal|"year=2017"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartsNullPartition
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: NPE should not be thrown
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Helper methods
specifier|private
name|void
name|createDB
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|TException
block|{
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Table
name|createTable
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
argument_list|)
return|;
block|}
specifier|private
name|Table
name|createTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
name|location
argument_list|)
return|;
block|}
specifier|private
name|Table
name|createTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|addTableParam
argument_list|(
literal|"partTestTableParamKey"
argument_list|,
literal|"partTestTableParamValue"
argument_list|)
operator|.
name|setPartCols
argument_list|(
name|partCols
argument_list|)
operator|.
name|addStorageDescriptorParam
argument_list|(
literal|"partTestSDParamKey"
argument_list|,
literal|"partTestSDParamValue"
argument_list|)
operator|.
name|setSerdeName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
operator|.
name|addSerdeParam
argument_list|(
literal|"partTestSerdeParamKey"
argument_list|,
literal|"partTestSerdeParamValue"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|private
name|void
name|createExternalTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|addPartCol
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|)
operator|.
name|addTableParam
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Partition
name|buildPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|buildPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|value
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/addparttest"
argument_list|)
return|;
block|}
specifier|private
name|Partition
name|buildPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|MetaException
block|{
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addValue
argument_list|(
name|value
argument_list|)
operator|.
name|addCol
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|addPartParam
argument_list|(
name|DEFAULT_PARAM_KEY
argument_list|,
name|DEFAULT_PARAM_VALUE
argument_list|)
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|partition
return|;
block|}
specifier|private
name|Partition
name|buildPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|MetaException
block|{
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setValues
argument_list|(
name|values
argument_list|)
operator|.
name|addPartParam
argument_list|(
name|DEFAULT_PARAM_KEY
operator|+
name|index
argument_list|,
name|DEFAULT_PARAM_VALUE
operator|+
name|index
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"TestInputFormat"
operator|+
name|index
argument_list|)
operator|.
name|setOutputFormat
argument_list|(
literal|"TestOutputFormat"
operator|+
name|index
argument_list|)
operator|.
name|setSerdeName
argument_list|(
literal|"partserde"
operator|+
name|index
argument_list|)
operator|.
name|addStorageDescriptorParam
argument_list|(
literal|"partsdkey"
operator|+
name|index
argument_list|,
literal|"partsdvalue"
operator|+
name|index
argument_list|)
operator|.
name|setCols
argument_list|(
name|partCols
argument_list|)
operator|.
name|setCreateTime
argument_list|(
literal|123456
argument_list|)
operator|.
name|setLastAccessTime
argument_list|(
literal|123456
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|partition
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getYearAndMonthPartCols
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"year part col"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|MONTH_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"month part col"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cols
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getYearPartCol
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"year part col"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cols
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getMonthPartCol
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|MONTH_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"month part col"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cols
return|;
block|}
specifier|private
name|void
name|verifyPartition
parameter_list|(
name|Table
name|table
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The partition should not be null."
argument_list|,
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table name in the partition is not correct."
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partValues
init|=
name|part
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|partValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The partition has wrong values."
argument_list|,
name|partValues
operator|.
name|containsAll
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The DB name in the partition is not correct."
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The last access time is not correct."
argument_list|,
literal|123456
argument_list|,
name|part
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|123456
argument_list|,
name|part
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The partition's parameter map should contain the partparamkey - partparamvalue pair."
argument_list|,
name|DEFAULT_PARAM_VALUE
operator|+
name|index
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|DEFAULT_PARAM_KEY
operator|+
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
name|part
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The partition's storage descriptor must not be null."
argument_list|,
name|sd
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The input format is not correct."
argument_list|,
literal|"TestInputFormat"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The output format is not correct."
argument_list|,
literal|"TestOutputFormat"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The serdeInfo name is not correct."
argument_list|,
literal|"partserde"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The parameter map of the partition's storage descriptor should contain the partsdkey - partsdvalue pair."
argument_list|,
literal|"partsdvalue"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"partsdkey"
operator|+
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The parameter's location is not correct."
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
operator|+
literal|"/"
operator|+
name|name
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The parameter's location should exist on the file system."
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// If the 'metastore.partition.inherit.table.properties' property is set in the metastore
comment|// config, the partition inherits the listed table parameters.
comment|// This property is not set in this test, therefore the partition doesn't inherit the table
comment|// parameters.
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The partition should not inherit the table parameters."
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyPartitionAttributesDefaultValues
parameter_list|(
name|Partition
name|partition
parameter_list|,
name|String
name|tableLocation
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"The partition's last access time should be set."
argument_list|,
literal|0
argument_list|,
name|partition
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"The partition's create time should be set."
argument_list|,
literal|0
argument_list|,
name|partition
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The partition has to have the 'transient_lastDdlTime' parameter per default."
argument_list|,
literal|1
argument_list|,
name|partition
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The partition has to have the 'transient_lastDdlTime' parameter per default."
argument_list|,
name|partition
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"transient_lastDdlTime"
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
name|partition
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The storage descriptor of the partition must not be null."
argument_list|,
name|sd
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The partition location is not correct."
argument_list|,
name|tableLocation
operator|+
literal|"/year=2017"
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The input format doesn't have the default value."
argument_list|,
literal|"org.apache.hadoop.hive.ql.io.HiveInputFormat"
argument_list|,
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The output format doesn't have the default value."
argument_list|,
literal|"org.apache.hadoop.hive.ql.io.HiveOutputFormat"
argument_list|,
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The compressed attribute doesn't have the default value."
argument_list|,
name|sd
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The storedAsSubDirectories attribute doesn't have the default value."
argument_list|,
name|sd
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The numBuckets attribute doesn't have the default value."
argument_list|,
literal|0
argument_list|,
name|sd
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The default value of the attribute 'bucketCols' should be an empty list."
argument_list|,
name|sd
operator|.
name|getBucketCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The default value of the attribute 'sortCols' should be an empty list."
argument_list|,
name|sd
operator|.
name|getSortCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Per default the storage descriptor parameters should be empty."
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serdeInfo
init|=
name|sd
operator|.
name|getSerdeInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The serdeInfo attribute should not be null."
argument_list|,
name|serdeInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"The default value of the serde's name attribute should be null."
argument_list|,
name|serdeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The serde's 'serializationLib' attribute doesn't have the default value."
argument_list|,
literal|"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe"
argument_list|,
name|serdeInfo
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Per default the serde info parameters should be empty."
argument_list|,
name|serdeInfo
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|SkewedInfo
name|skewedInfo
init|=
name|sd
operator|.
name|getSkewedInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Per default the skewedInfo column names list should be empty."
argument_list|,
name|skewedInfo
operator|.
name|getSkewedColNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Per default the skewedInfo column value list should be empty."
argument_list|,
name|skewedInfo
operator|.
name|getSkewedColValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Per default the skewedInfo column value location map should be empty."
argument_list|,
name|skewedInfo
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

