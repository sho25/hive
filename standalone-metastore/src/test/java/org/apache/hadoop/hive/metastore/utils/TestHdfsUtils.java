begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
specifier|public
class|class
name|TestHdfsUtils
block|{
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|Path
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FsPermission
name|perms
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
operator|+
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Mary had a little lamb\nit's fleece was white as snow\nand anywhere that Mary "
operator|+
literal|"went\nthe lamb was sure to go\n"
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|p
argument_list|,
name|perms
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
specifier|private
name|Configuration
name|makeConf
parameter_list|()
block|{
comment|// Make sure that the user doesn't happen to be in the super group
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.permissions.supergroup"
argument_list|,
literal|"ubermensch"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
specifier|private
name|UserGroupInformation
name|ugiInvalidUserValidGroups
parameter_list|()
throws|throws
name|LoginException
throws|,
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"nosuchuser"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SecurityUtils
operator|.
name|getUGI
argument_list|()
operator|.
name|getGroupNames
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
specifier|private
name|UserGroupInformation
name|ugiInvalidUserInvalidGroups
parameter_list|()
block|{
name|UserGroupInformation
name|ugi
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"nosuchuser"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"nosuchgroup"
block|}
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|userReadWriteExecute
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|makeConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|SecurityUtils
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|userNoRead
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|makeConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|SecurityUtils
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|userNoWrite
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|makeConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|SecurityUtils
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|userNoExecute
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|makeConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|SecurityUtils
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|groupReadWriteExecute
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|makeConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|ugiInvalidUserValidGroups
argument_list|()
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|groupNoRead
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|makeConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|ugiInvalidUserValidGroups
argument_list|()
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|groupNoWrite
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|makeConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|ugiInvalidUserValidGroups
argument_list|()
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|groupNoExecute
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|makeConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|ugiInvalidUserValidGroups
argument_list|()
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|otherReadWriteExecute
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|makeConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|ugiInvalidUserInvalidGroups
argument_list|()
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|otherNoRead
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|makeConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|ugiInvalidUserInvalidGroups
argument_list|()
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|otherNoWrite
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|makeConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|ugiInvalidUserInvalidGroups
argument_list|()
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|otherNoExecute
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|makeConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|ugiInvalidUserInvalidGroups
argument_list|()
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rootReadWriteExecute
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|UserGroupInformation
name|ugi
init|=
name|SecurityUtils
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|old
init|=
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"dfs.permissions.supergroup"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"dfs.permissions.supergroup"
argument_list|,
name|ugi
operator|.
name|getPrimaryGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|HdfsUtils
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"dfs.permissions.supergroup"
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

