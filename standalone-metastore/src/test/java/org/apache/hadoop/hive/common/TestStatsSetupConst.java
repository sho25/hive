begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestStatsSetupConst
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSetBasicStatsState_missesUpgrade
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|,
literal|"FALSE"
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|params
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"BASIC_STATS\":\"true\"}"
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setColumnStatsState_camelcase
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|params
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|val1
init|=
name|params
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
decl_stmt|;
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|params
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|val2
init|=
name|params
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|val1
argument_list|,
name|val2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetBasicStatsState_none
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|params
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"BASIC_STATS\":\"true\"}"
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetBasicStatsState_falseIsAbsent
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|params
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|params
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// earlier implementation have quoted boolean values...so the new implementation should preserve this
annotation|@
name|Test
specifier|public
name|void
name|testStatColumnEntriesCompat
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params0
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|params0
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|params0
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"BASIC_STATS\":\"true\",\"COLUMN_STATS\":{\"Foo\":\"true\"}}"
argument_list|,
name|params0
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnEntries_orderIndependence
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params0
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|params0
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|params0
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"Foo"
argument_list|,
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|params1
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"Bar"
argument_list|,
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|params1
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|params0
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|,
name|params1
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnEntries_orderIndependence2
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params0
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// in case jackson is able to deserialize...it may use a different implementation for the map - which may not preserve order
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|params0
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|params0
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|params0
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"year"
argument_list|,
literal|"month"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|params1
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"month"
argument_list|,
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|params1
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|params0
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|params0
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|,
name|params1
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// FIXME: current objective is to keep the previous outputs...but this is possibly bad..
annotation|@
name|Test
specifier|public
name|void
name|testColumnEntries_areKept_whenBasicIsAbsent
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|params
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|params
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"COLUMN_STATS\":{\"Foo\":\"true\"}}"
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

