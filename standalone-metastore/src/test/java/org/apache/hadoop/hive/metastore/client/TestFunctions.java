begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FunctionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetAllFunctionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|FunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test class for IMetaStoreClient API. Testing the Function related functions.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestFunctions
extends|extends
name|MetaStoreClientTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DATABASE
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OTHER_DATABASE
init|=
literal|"dummy"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FUNCTION_CLASS
init|=
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFUpper"
decl_stmt|;
specifier|private
specifier|final
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|Function
index|[]
name|testFunctions
init|=
operator|new
name|Function
index|[
literal|4
index|]
decl_stmt|;
specifier|public
name|TestFunctions
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Clean up the database
name|client
operator|.
name|dropDatabase
argument_list|(
name|OTHER_DATABASE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Function
name|function
range|:
name|client
operator|.
name|getAllFunctions
argument_list|()
operator|.
name|getFunctions
argument_list|()
control|)
block|{
name|client
operator|.
name|dropFunction
argument_list|(
name|function
operator|.
name|getDbName
argument_list|()
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|testFunctions
index|[
literal|0
index|]
operator|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test_function_to_find_1"
argument_list|)
operator|.
name|setClass
argument_list|(
name|TEST_FUNCTION_CLASS
argument_list|)
operator|.
name|addResourceUri
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|JAR
argument_list|,
literal|"hdfs:///tmp/jar1.jar"
argument_list|)
argument_list|)
operator|.
name|addResourceUri
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|FILE
argument_list|,
literal|"hdfs:///tmp/file1.txt"
argument_list|)
argument_list|)
operator|.
name|addResourceUri
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|ARCHIVE
argument_list|,
literal|"hdfs:///tmp/archive1.tgz"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testFunctions
index|[
literal|1
index|]
operator|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test_function_to_find_2"
argument_list|)
operator|.
name|setClass
argument_list|(
name|TEST_FUNCTION_CLASS
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testFunctions
index|[
literal|2
index|]
operator|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test_function_hidden_1"
argument_list|)
operator|.
name|setClass
argument_list|(
name|TEST_FUNCTION_CLASS
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|testFunctions
index|[
literal|3
index|]
operator|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test_function_to_find_1"
argument_list|)
operator|.
name|setClass
argument_list|(
name|TEST_FUNCTION_CLASS
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Create the functions, and reload them from the MetaStore
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testFunctions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|client
operator|.
name|createFunction
argument_list|(
name|testFunctions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|testFunctions
index|[
name|i
index|]
operator|=
name|client
operator|.
name|getFunction
argument_list|(
name|testFunctions
index|[
name|i
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testFunctions
index|[
name|i
index|]
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * This test creates and queries a function and then drops it. Good for testing the happy path.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateGetDeleteFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test_function"
argument_list|)
operator|.
name|setClass
argument_list|(
name|TEST_FUNCTION_CLASS
argument_list|)
operator|.
name|setFunctionType
argument_list|(
name|FunctionType
operator|.
name|JAVA
argument_list|)
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"owner"
argument_list|)
operator|.
name|setCreateTime
argument_list|(
literal|100
argument_list|)
operator|.
name|addResourceUri
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|JAR
argument_list|,
literal|"hdfs:///tmp/jar1.jar"
argument_list|)
argument_list|)
operator|.
name|addResourceUri
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|FILE
argument_list|,
literal|"hdfs:///tmp/file1.txt"
argument_list|)
argument_list|)
operator|.
name|addResourceUri
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|ARCHIVE
argument_list|,
literal|"hdfs:///tmp/archive1.tgz"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|Function
name|createdFunction
init|=
name|client
operator|.
name|getFunction
argument_list|(
name|function
operator|.
name|getDbName
argument_list|()
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
decl_stmt|;
comment|// The createTime will be set on the server side, so the comparison should skip it
name|function
operator|.
name|setCreateTime
argument_list|(
name|createdFunction
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|function
argument_list|,
name|createdFunction
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropFunction
argument_list|(
name|function
operator|.
name|getDbName
argument_list|()
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getFunction
argument_list|(
name|function
operator|.
name|getDbName
argument_list|()
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NoSuchObjectException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFunctionDefaultValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
operator|new
name|Function
argument_list|()
decl_stmt|;
name|function
operator|.
name|setDbName
argument_list|(
name|OTHER_DATABASE
argument_list|)
expr_stmt|;
name|function
operator|.
name|setFunctionName
argument_list|(
literal|"test_function"
argument_list|)
expr_stmt|;
name|function
operator|.
name|setClassName
argument_list|(
name|TEST_FUNCTION_CLASS
argument_list|)
expr_stmt|;
name|function
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|function
operator|.
name|setFunctionType
argument_list|(
name|FunctionType
operator|.
name|JAVA
argument_list|)
expr_stmt|;
name|client
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|Function
name|createdFunction
init|=
name|client
operator|.
name|getFunction
argument_list|(
name|function
operator|.
name|getDbName
argument_list|()
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Comparing OwnerName"
argument_list|,
name|createdFunction
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing ResourceUris"
argument_list|,
literal|0
argument_list|,
name|createdFunction
operator|.
name|getResourceUris
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The create time is set
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Comparing CreateTime"
argument_list|,
literal|0
argument_list|,
name|createdFunction
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateFunctionNullClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
name|testFunctions
index|[
literal|0
index|]
decl_stmt|;
name|function
operator|.
name|setClassName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateFunctionInvalidName
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
name|testFunctions
index|[
literal|0
index|]
decl_stmt|;
name|function
operator|.
name|setFunctionName
argument_list|(
literal|"test_function_2;"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateFunctionEmptyName
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
name|testFunctions
index|[
literal|0
index|]
decl_stmt|;
name|function
operator|.
name|setFunctionName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|client
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFunctionNullFunctionName
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
name|testFunctions
index|[
literal|0
index|]
decl_stmt|;
name|function
operator|.
name|setFunctionName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFunctionNullDatabaseName
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
name|testFunctions
index|[
literal|0
index|]
decl_stmt|;
name|function
operator|.
name|setDbName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFunctionNullOwnerType
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
name|testFunctions
index|[
literal|0
index|]
decl_stmt|;
name|function
operator|.
name|setFunctionName
argument_list|(
literal|"test_function_2"
argument_list|)
expr_stmt|;
name|function
operator|.
name|setOwnerType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFunctionNullFunctionType
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
name|testFunctions
index|[
literal|0
index|]
decl_stmt|;
name|function
operator|.
name|setFunctionName
argument_list|(
literal|"test_function_2"
argument_list|)
expr_stmt|;
name|function
operator|.
name|setFunctionType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateFunctionNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
name|testFunctions
index|[
literal|0
index|]
decl_stmt|;
name|function
operator|.
name|setDbName
argument_list|(
literal|"no_such_database"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateFunctionAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
name|testFunctions
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFunctionCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
name|testFunctions
index|[
literal|0
index|]
decl_stmt|;
comment|// Test in upper case
name|Function
name|resultUpper
init|=
name|client
operator|.
name|getFunction
argument_list|(
name|function
operator|.
name|getDbName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|function
argument_list|,
name|resultUpper
argument_list|)
expr_stmt|;
comment|// Test in mixed case
name|Function
name|resultMix
init|=
name|client
operator|.
name|getFunction
argument_list|(
literal|"DeFaUlt"
argument_list|,
literal|"tEsT_FuncTION_tO_FinD_1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|function
argument_list|,
name|resultMix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetFunctionNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Choosing the 2nd function, since the 1st one is duplicated in the dummy database
name|Function
name|function
init|=
name|testFunctions
index|[
literal|1
index|]
decl_stmt|;
name|client
operator|.
name|getFunction
argument_list|(
literal|"no_such_database"
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetFunctionNoSuchFunction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Choosing the 2nd function, since the 1st one is duplicated in the dummy database
name|Function
name|function
init|=
name|testFunctions
index|[
literal|1
index|]
decl_stmt|;
name|client
operator|.
name|getFunction
argument_list|(
name|function
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"no_such_function"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetFunctionNoSuchFunctionInThisDatabase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Choosing the 2nd function, since the 1st one is duplicated in the dummy database
name|Function
name|function
init|=
name|testFunctions
index|[
literal|1
index|]
decl_stmt|;
name|client
operator|.
name|getFunction
argument_list|(
name|OTHER_DATABASE
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFunctionNullDatabase
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|getFunction
argument_list|(
literal|null
argument_list|,
name|OTHER_DATABASE
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws MetaException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or MetaException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|MetaException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetFunctionNullFunctionName
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|getFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropFunctionNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Choosing the 2nd function, since the 1st one is duplicated in the dummy database
name|Function
name|function
init|=
name|testFunctions
index|[
literal|1
index|]
decl_stmt|;
name|client
operator|.
name|dropFunction
argument_list|(
literal|"no_such_database"
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropFunctionNoSuchFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"no_such_function"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropFunctionNoSuchFunctionInThisDatabase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Choosing the 2nd function, since the 1st one is duplicated in the dummy database
name|Function
name|function
init|=
name|testFunctions
index|[
literal|1
index|]
decl_stmt|;
name|client
operator|.
name|dropFunction
argument_list|(
name|OTHER_DATABASE
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropFunctionNullDatabase
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|dropFunction
argument_list|(
literal|null
argument_list|,
literal|"no_such_function"
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropFunctionNullFunctionName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|dropFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropFunctionCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|function
init|=
name|testFunctions
index|[
literal|0
index|]
decl_stmt|;
comment|// Test in upper case
name|client
operator|.
name|dropFunction
argument_list|(
name|function
operator|.
name|getDbName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if the function is really removed
try|try
block|{
name|client
operator|.
name|getFunction
argument_list|(
name|function
operator|.
name|getDbName
argument_list|()
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NoSuchObjectException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
comment|// Test in mixed case
name|client
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropFunction
argument_list|(
literal|"DeFaUlt"
argument_list|,
literal|"tEsT_FuncTION_tO_FinD_1"
argument_list|)
expr_stmt|;
comment|// Check if the function is really removed
try|try
block|{
name|client
operator|.
name|getFunction
argument_list|(
name|function
operator|.
name|getDbName
argument_list|()
argument_list|,
name|function
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NoSuchObjectException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAllFunctions
parameter_list|()
throws|throws
name|Exception
block|{
name|GetAllFunctionsResponse
name|response
init|=
name|client
operator|.
name|getAllFunctions
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Function
argument_list|>
name|allFunctions
init|=
name|response
operator|.
name|getFunctions
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All functions size"
argument_list|,
literal|4
argument_list|,
name|allFunctions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Function
name|function
range|:
name|allFunctions
control|)
block|{
if|if
condition|(
name|function
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|OTHER_DATABASE
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|testFunctions
index|[
literal|3
index|]
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|.
name|getFunctionName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"test_function_hidden_1"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|testFunctions
index|[
literal|2
index|]
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|.
name|getFunctionName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"test_function_to_find_2"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|testFunctions
index|[
literal|1
index|]
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|testFunctions
index|[
literal|0
index|]
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Drop one function, see what remains
name|client
operator|.
name|dropFunction
argument_list|(
name|testFunctions
index|[
literal|1
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testFunctions
index|[
literal|1
index|]
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|getAllFunctions
argument_list|()
expr_stmt|;
name|allFunctions
operator|=
name|response
operator|.
name|getFunctions
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All functions size"
argument_list|,
literal|3
argument_list|,
name|allFunctions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Function
name|function
range|:
name|allFunctions
control|)
block|{
if|if
condition|(
name|function
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|OTHER_DATABASE
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|testFunctions
index|[
literal|3
index|]
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|.
name|getFunctionName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"test_function_hidden_1"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|testFunctions
index|[
literal|2
index|]
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|testFunctions
index|[
literal|0
index|]
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFunctions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Find functions which name contains _to_find_ in the default database
name|List
argument_list|<
name|String
argument_list|>
name|functions
init|=
name|client
operator|.
name|getFunctions
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"*_to_find_*"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found functions size"
argument_list|,
literal|2
argument_list|,
name|functions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|functions
operator|.
name|contains
argument_list|(
literal|"test_function_to_find_1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|functions
operator|.
name|contains
argument_list|(
literal|"test_function_to_find_2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Find functions which name contains _to_find_ or _hidden_ in the default database
name|functions
operator|=
name|client
operator|.
name|getFunctions
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"*_to_find_*|*_hidden_*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found functions size"
argument_list|,
literal|3
argument_list|,
name|functions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|functions
operator|.
name|contains
argument_list|(
literal|"test_function_to_find_1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|functions
operator|.
name|contains
argument_list|(
literal|"test_function_to_find_2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|functions
operator|.
name|contains
argument_list|(
literal|"test_function_hidden_1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Find functions which name contains _to_find_ in the dummy database
name|functions
operator|=
name|client
operator|.
name|getFunctions
argument_list|(
name|OTHER_DATABASE
argument_list|,
literal|"*_to_find_*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found functions size"
argument_list|,
literal|1
argument_list|,
name|functions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|functions
operator|.
name|contains
argument_list|(
literal|"test_function_to_find_1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Look for functions but do not find any
name|functions
operator|=
name|client
operator|.
name|getFunctions
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"*_not_such_function_*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No such functions size"
argument_list|,
literal|0
argument_list|,
name|functions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Look for functions without pattern
name|functions
operator|=
name|client
operator|.
name|getFunctions
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Search functions without pattern size"
argument_list|,
literal|3
argument_list|,
name|functions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Look for functions with empty pattern
name|functions
operator|=
name|client
operator|.
name|getFunctions
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Search functions with empty pattern"
argument_list|,
literal|0
argument_list|,
name|functions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// No such database
name|functions
operator|=
name|client
operator|.
name|getFunctions
argument_list|(
literal|"no_such_database"
argument_list|,
literal|"*_to_find_*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No such functions size"
argument_list|,
literal|0
argument_list|,
name|functions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFunctionsCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check case insensitive search
name|List
argument_list|<
name|String
argument_list|>
name|functions
init|=
name|client
operator|.
name|getFunctions
argument_list|(
literal|"deFAulT"
argument_list|,
literal|"*_tO_FiND*"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found functions size"
argument_list|,
literal|2
argument_list|,
name|functions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|functions
operator|.
name|contains
argument_list|(
literal|"test_function_to_find_1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|functions
operator|.
name|contains
argument_list|(
literal|"test_function_to_find_2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetFunctionsNullDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|getFunctions
argument_list|(
literal|null
argument_list|,
name|OTHER_DATABASE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|newFunction
init|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test_function_2"
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"Owner2"
argument_list|)
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|GROUP
argument_list|)
operator|.
name|setClass
argument_list|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFUpper2"
argument_list|)
operator|.
name|setFunctionType
argument_list|(
name|FunctionType
operator|.
name|JAVA
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|alterFunction
argument_list|(
name|testFunctions
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testFunctions
index|[
literal|0
index|]
operator|.
name|getFunctionName
argument_list|()
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
name|Function
name|alteredFunction
init|=
name|client
operator|.
name|getFunction
argument_list|(
name|newFunction
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newFunction
operator|.
name|getFunctionName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Currently this method only sets
comment|//  - Database
comment|//  - FunctionName
comment|//  - OwnerName
comment|//  - OwnerType
comment|//  - ClassName
comment|//  - FunctionType
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing Database"
argument_list|,
name|newFunction
operator|.
name|getDbName
argument_list|()
argument_list|,
name|alteredFunction
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing FunctionName"
argument_list|,
name|newFunction
operator|.
name|getFunctionName
argument_list|()
argument_list|,
name|alteredFunction
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing OwnerName"
argument_list|,
name|newFunction
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|alteredFunction
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing OwnerType"
argument_list|,
name|newFunction
operator|.
name|getOwnerType
argument_list|()
argument_list|,
name|alteredFunction
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing ClassName"
argument_list|,
name|newFunction
operator|.
name|getClassName
argument_list|()
argument_list|,
name|alteredFunction
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing FunctionType"
argument_list|,
name|newFunction
operator|.
name|getFunctionType
argument_list|()
argument_list|,
name|alteredFunction
operator|.
name|getFunctionType
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getFunction
argument_list|(
name|testFunctions
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testFunctions
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NoSuchObjectException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
comment|// Test that not changing the database and the function name, but only other parameters, like
comment|// function class will not cause Exception
name|newFunction
operator|=
name|testFunctions
index|[
literal|1
index|]
operator|.
name|deepCopy
argument_list|()
expr_stmt|;
name|newFunction
operator|.
name|setClassName
argument_list|(
literal|"NewClassName"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alterFunction
argument_list|(
name|testFunctions
index|[
literal|1
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testFunctions
index|[
literal|1
index|]
operator|.
name|getFunctionName
argument_list|()
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
name|alteredFunction
operator|=
name|client
operator|.
name|getFunction
argument_list|(
name|newFunction
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newFunction
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|newFunction
argument_list|,
name|alteredFunction
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Function
name|getNewFunction
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_function_2"
argument_list|)
operator|.
name|setClass
argument_list|(
name|TEST_FUNCTION_CLASS
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterFunctionNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Choosing the 2nd function, since the 1st one is duplicated in the dummy database
name|Function
name|originalFunction
init|=
name|testFunctions
index|[
literal|1
index|]
decl_stmt|;
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
name|client
operator|.
name|alterFunction
argument_list|(
literal|"no_such_database"
argument_list|,
name|originalFunction
operator|.
name|getFunctionName
argument_list|()
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterFunctionNoSuchFunction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Choosing the 2nd function, since the 1st one is duplicated in the dummy database
name|Function
name|originalFunction
init|=
name|testFunctions
index|[
literal|1
index|]
decl_stmt|;
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
name|client
operator|.
name|alterFunction
argument_list|(
name|originalFunction
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"no_such_function"
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterFunctionNoSuchFunctionInThisDatabase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Choosing the 2nd function, since the 1st one is duplicated in the dummy database
name|Function
name|originalFunction
init|=
name|testFunctions
index|[
literal|1
index|]
decl_stmt|;
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
name|client
operator|.
name|alterFunction
argument_list|(
name|OTHER_DATABASE
argument_list|,
name|originalFunction
operator|.
name|getFunctionName
argument_list|()
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunctionNullDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
try|try
block|{
name|client
operator|.
name|alterFunction
argument_list|(
literal|null
argument_list|,
name|OTHER_DATABASE
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunctionNullFunctionName
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
try|try
block|{
name|client
operator|.
name|alterFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|null
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunctionNullFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|originalFunction
init|=
name|testFunctions
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
name|client
operator|.
name|alterFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
name|originalFunction
operator|.
name|getFunctionName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunctionInvalidNameInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
name|newFunction
operator|.
name|setFunctionName
argument_list|(
literal|"test_function_2;"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|alterFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"test_function_to_find_2"
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// InvalidObjectException, remote throws TApplicationException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an InvalidObjectException or TApplicationException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TApplicationException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunctionEmptyNameInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
name|newFunction
operator|.
name|setFunctionName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|alterFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"test_function_to_find_2"
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// InvalidObjectException, remote throws TApplicationException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an InvalidObjectException or TApplicationException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TApplicationException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunctionNullClassInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
name|newFunction
operator|.
name|setClassName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|alterFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"test_function_to_find_2"
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// InvalidObjectException, remote throws TApplicationException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an InvalidObjectException or TApplicationException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TApplicationException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunctionNullFunctionNameInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
name|newFunction
operator|.
name|setFunctionName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|alterFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"test_function_to_find_2"
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunctionNullDatabaseNameInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
name|newFunction
operator|.
name|setDbName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|alterFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"test_function_to_find_2"
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunctionNullOwnerTypeInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
name|newFunction
operator|.
name|setOwnerType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|alterFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"test_function_to_find_2"
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunctionNullFunctionTypeInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
name|newFunction
operator|.
name|setFunctionType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|alterFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"test_function_to_find_2"
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// NullPointerException, remote throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunctionNoSuchDatabaseInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|newFunction
init|=
name|getNewFunction
argument_list|()
decl_stmt|;
name|newFunction
operator|.
name|setDbName
argument_list|(
literal|"no_such_database"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|alterFunction
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|"test_function_to_find_2"
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side. Embedded metastore throws
comment|// InvalidObjectException, remote throws TApplicationException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an InvalidObjectException or TApplicationException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TApplicationException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterFunctionAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|originalFunction
init|=
name|testFunctions
index|[
literal|0
index|]
decl_stmt|;
name|Function
name|newFunction
init|=
name|testFunctions
index|[
literal|1
index|]
decl_stmt|;
name|client
operator|.
name|alterFunction
argument_list|(
name|originalFunction
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalFunction
operator|.
name|getFunctionName
argument_list|()
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterFunctionCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
name|newFunction
init|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test_function_2"
argument_list|)
operator|.
name|setClass
argument_list|(
name|TEST_FUNCTION_CLASS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Function
name|originalFunction
init|=
name|testFunctions
index|[
literal|1
index|]
decl_stmt|;
comment|// Test in upper case
name|client
operator|.
name|alterFunction
argument_list|(
name|originalFunction
operator|.
name|getDbName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|originalFunction
operator|.
name|getFunctionName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
name|Function
name|alteredFunction
init|=
name|client
operator|.
name|getFunction
argument_list|(
name|newFunction
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newFunction
operator|.
name|getFunctionName
argument_list|()
argument_list|)
decl_stmt|;
comment|// The creation time is changed, so we do not check that
name|newFunction
operator|.
name|setCreateTime
argument_list|(
name|alteredFunction
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|newFunction
argument_list|,
name|alteredFunction
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getFunction
argument_list|(
name|originalFunction
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalFunction
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NoSuchObjectException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
comment|// Test in mixed case
name|originalFunction
operator|=
name|testFunctions
index|[
literal|2
index|]
expr_stmt|;
name|newFunction
operator|.
name|setFunctionName
argument_list|(
literal|"test_function_3"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alterFunction
argument_list|(
literal|"DeFaUlt"
argument_list|,
literal|"tEsT_FuncTION_HiDDEn_1"
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
name|alteredFunction
operator|=
name|client
operator|.
name|getFunction
argument_list|(
name|newFunction
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newFunction
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
comment|// The creation time is changed, so we do not check that
name|newFunction
operator|.
name|setCreateTime
argument_list|(
name|alteredFunction
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing functions"
argument_list|,
name|newFunction
argument_list|,
name|alteredFunction
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getFunction
argument_list|(
name|originalFunction
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalFunction
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NoSuchObjectException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
block|}
block|}
end_class

end_unit

