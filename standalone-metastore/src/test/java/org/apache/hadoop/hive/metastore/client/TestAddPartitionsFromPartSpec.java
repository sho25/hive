begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionListComposingSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionSpecWithSharedSD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionWithoutSD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Tests for creating partitions from partition spec.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestAddPartitionsFromPartSpec
extends|extends
name|MetaStoreClientTest
block|{
specifier|private
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"test_partition_db"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"test_partition_table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PARAM_VALUE
init|=
literal|"partparamvalue"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PARAM_KEY
init|=
literal|"partparamkey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_YEAR_VALUE
init|=
literal|"2017"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_COL_TYPE
init|=
literal|"string"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|YEAR_COL_NAME
init|=
literal|"year"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MONTH_COL_NAME
init|=
literal|"month"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CREATE_TIME
init|=
literal|123456
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|short
name|MAX
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|TestAddPartitionsFromPartSpec
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Clean up the database
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|metaStore
operator|.
name|cleanWarehouseDirs
argument_list|()
expr_stmt|;
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// Tests for int add_partitions_pspec(PartitionSpecProxy partitionSpec) method
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpec
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2013"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2014"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2012"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition1
argument_list|,
name|partition2
argument_list|,
name|partition3
argument_list|)
decl_stmt|;
name|String
name|rootPath
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/addpartspectest/"
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpec
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|rootPath
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpec
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2013"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2013"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2014"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2014"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2012"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2012"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecWithSharedSD
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|PartitionWithoutSD
name|partition1
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2013"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PartitionWithoutSD
name|partition2
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2014"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|PartitionWithoutSD
name|partition3
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2012"
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition1
argument_list|,
name|partition2
argument_list|,
name|partition3
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/sharedSDTest/"
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpecWithSharedSD
argument_list|(
name|partitions
argument_list|,
name|buildSD
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|verifyPartitionSharedSD
argument_list|(
name|table
argument_list|,
literal|"year=2013"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2013"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPartitionSharedSD
argument_list|(
name|table
argument_list|,
literal|"year=2014"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2014"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyPartitionSharedSD
argument_list|(
name|table
argument_list|,
literal|"year=2012"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2012"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecsMultipleValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2002"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2003"
argument_list|,
literal|"april"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|PartitionWithoutSD
name|partition3
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2004"
argument_list|,
literal|"june"
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|PartitionWithoutSD
name|partition4
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2005"
argument_list|,
literal|"may"
argument_list|)
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition1
argument_list|,
name|partition2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitionsWithoutSD
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition3
argument_list|,
name|partition4
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpec
init|=
name|buildPartitionSpec
argument_list|(
name|partitions
argument_list|,
name|partitionsWithoutSD
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpec
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2002/month=march"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2002"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPartition
argument_list|(
name|table
argument_list|,
literal|"year=2003/month=april"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2003"
argument_list|,
literal|"april"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyPartitionSharedSD
argument_list|(
name|table
argument_list|,
literal|"year=2004/month=june"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2004"
argument_list|,
literal|"june"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyPartitionSharedSD
argument_list|(
name|table
argument_list|,
literal|"year=2005/month=may"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2005"
argument_list|,
literal|"may"
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// TODO add tests for partitions in other catalogs
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecNullSpec
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|add_partitions_pspec
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecEmptyPartList
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpec
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecNullPartList
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
literal|null
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpec
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecNoDB
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecNoTable
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecNoDBAndTableInPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|setDbName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setTableName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecDBAndTableSetFromSpecProxy
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|setDbName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setTableName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|partitionSpecProxy
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|partitionSpecProxy
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Partition
name|resultPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|resultPart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecWithSharedSDDBAndTableSetFromSpecProxy
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|PartitionWithoutSD
name|partition
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
operator|+
literal|"/sharedSDTest/"
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpecWithSharedSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|,
name|buildSD
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|partitionSpecProxy
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|partitionSpecProxy
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Partition
name|resultPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|resultPart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecEmptyDB
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecEmptyTable
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecNonExistingDB
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
literal|"nonexistingdb"
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecNonExistingTable
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
literal|"nonexistingtable"
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecDiffDBName
parameter_list|()
throws|throws
name|Exception
block|{
name|createDB
argument_list|(
literal|"NewPartDB"
argument_list|)
expr_stmt|;
name|createTable
argument_list|()
expr_stmt|;
name|createTable
argument_list|(
literal|"NewPartDB"
argument_list|,
literal|"NewPartTable"
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
literal|"NewPartDB"
argument_list|,
literal|"NewPartTable"
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MetaException should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
finally|finally
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"NewPartDB"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecNullPart
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
literal|null
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition1
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition2
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecUnsupportedPartSpecType
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|PartitionSpec
name|partitionSpec
init|=
operator|new
name|PartitionSpec
argument_list|()
decl_stmt|;
name|partitionSpec
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setPartitionList
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setSharedSDPartitionSpec
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|PartitionSpecProxy
name|bubu
init|=
name|PartitionSpecProxy
operator|.
name|Factory
operator|.
name|get
argument_list|(
name|partitionSpec
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|bubu
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"AssertionError should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// Expected error
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecBothTypeSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2013"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PartitionWithoutSD
name|partitionWithoutSD
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2014"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|PartitionSpec
name|partitionSpec
init|=
operator|new
name|PartitionSpec
argument_list|()
decl_stmt|;
name|partitionSpec
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|PartitionListComposingSpec
name|partitionListComposingSpec
init|=
operator|new
name|PartitionListComposingSpec
argument_list|()
decl_stmt|;
name|partitionListComposingSpec
operator|.
name|setPartitions
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setPartitionList
argument_list|(
name|partitionListComposingSpec
argument_list|)
expr_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
operator|new
name|PartitionSpecWithSharedSD
argument_list|()
decl_stmt|;
name|partitionSpecWithSharedSD
operator|.
name|setPartitions
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionWithoutSD
argument_list|)
argument_list|)
expr_stmt|;
name|partitionSpecWithSharedSD
operator|.
name|setSd
argument_list|(
name|buildSD
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/sharedSDTest/"
argument_list|)
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setSharedSDPartitionSpec
argument_list|(
name|partitionSpecWithSharedSD
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|PartitionSpecProxy
operator|.
name|Factory
operator|.
name|get
argument_list|(
name|partitionSpec
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|partitionNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partitionNames
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"year=2013"
argument_list|,
name|partitionNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecSetRootPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|String
name|rootPath
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/addPartSpecRootPath/"
decl_stmt|;
name|String
name|rootPath1
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/someotherpath/"
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2007"
argument_list|,
name|rootPath
operator|+
literal|"part2007/"
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|rootPath1
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Partition
name|resultPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2007"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rootPath
operator|+
literal|"part2007"
argument_list|,
name|resultPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecChangeRootPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|String
name|rootPath
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/addPartSpecRootPath/"
decl_stmt|;
name|String
name|rootPath1
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/someotherpath/"
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2007"
argument_list|,
name|rootPath
operator|+
literal|"part2007/"
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|rootPath
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|partitionSpecProxy
operator|.
name|setRootLocation
argument_list|(
name|rootPath1
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Partition
name|resultPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2007"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rootPath1
operator|+
literal|"part2007"
argument_list|,
name|resultPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecChangeRootPathFromNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|String
name|rootPath
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/addPartSpecRootPath/"
decl_stmt|;
name|String
name|rootPath1
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/someotherpath/"
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2007"
argument_list|,
name|rootPath
operator|+
literal|"part2007/"
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|partitionSpecProxy
operator|.
name|setRootLocation
argument_list|(
name|rootPath1
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecChangeRootPathToNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|String
name|rootPath
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/addPartSpecRootPath/"
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2007"
argument_list|,
name|rootPath
operator|+
literal|"part2007/"
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|rootPath
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|partitionSpecProxy
operator|.
name|setRootLocation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecChangeRootPathDiffInSd
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|String
name|rootPath
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/addPartSpecRootPath/"
decl_stmt|;
name|String
name|rootPath1
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/addPartSdPath/"
decl_stmt|;
name|String
name|rootPath2
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/someotherpath/"
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2007"
argument_list|,
name|rootPath1
operator|+
literal|"part2007/"
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|rootPath
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|partitionSpecProxy
operator|.
name|setRootLocation
argument_list|(
name|rootPath2
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecWithSharedSDChangeRootPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|String
name|rootPath
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/addPartSpecRootPath/"
decl_stmt|;
name|String
name|rootPath1
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/someotherpath/"
decl_stmt|;
name|PartitionWithoutSD
name|partition
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2014"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpecWithSharedSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|,
name|buildSD
argument_list|(
name|rootPath
argument_list|)
argument_list|)
decl_stmt|;
name|partitionSpecProxy
operator|.
name|setRootLocation
argument_list|(
name|rootPath1
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Partition
name|resultPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2014"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rootPath1
operator|+
literal|"partwithoutsd0"
argument_list|,
name|resultPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecWithSharedSDWithoutRelativePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|PartitionWithoutSD
name|partition
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2014"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|partition
operator|.
name|setRelativePath
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|String
name|location
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/sharedSDTest/"
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpecWithSharedSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|,
name|buildSD
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2014"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/sharedSDTest/null"
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecPartAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|String
name|tableLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|,
name|tableLocation
operator|+
literal|"/year=2016a"
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|buildPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2014"
argument_list|,
literal|"2015"
argument_list|,
literal|"2016"
argument_list|,
literal|"2017"
argument_list|,
literal|"2018"
argument_list|)
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"AlreadyExistsException should have happened."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|partitions
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecPartDuplicateInSpec
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|buildPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2014"
argument_list|,
literal|"2015"
argument_list|,
literal|"2017"
argument_list|,
literal|"2017"
argument_list|,
literal|"2018"
argument_list|,
literal|"2019"
argument_list|)
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MetaException should have happened."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecPartDuplicateInSpecs
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2002"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PartitionWithoutSD
name|partitionWithoutSD
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2002"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionWithoutSD
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecNullSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|setSd
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecWithSharedSDNullSd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|PartitionWithoutSD
name|partition
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2002"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
literal|null
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpecWithSharedSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|,
name|sd
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecWithSharedSDNullLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|PartitionWithoutSD
name|partition
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2002"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|partition
operator|.
name|setRelativePath
argument_list|(
literal|"year2002"
argument_list|)
expr_stmt|;
name|String
name|location
init|=
literal|null
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpecWithSharedSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|,
name|buildSD
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecWithSharedSDEmptyLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|PartitionWithoutSD
name|partition
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2002"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|partition
operator|.
name|setRelativePath
argument_list|(
literal|"year2002"
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpecWithSharedSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|,
name|buildSD
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecWithSharedSDInvalidSD
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|PartitionWithoutSD
name|partition
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2002"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|partition
operator|.
name|setRelativePath
argument_list|(
literal|"year2002"
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|sd
operator|.
name|setLocation
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/nullLocationTest/"
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpecWithSharedSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|,
name|sd
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecNullLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Partition
name|resultPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/year=2017"
argument_list|,
name|resultPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|resultPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecEmptyLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Partition
name|resultPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/year=2017"
argument_list|,
name|resultPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|resultPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecEmptyLocationInTableToo
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Partition
name|resultPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/year=2017"
argument_list|,
name|resultPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|resultPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecForView
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"test_add_partition_view"
decl_stmt|;
name|createView
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecForViewNullPartLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"test_add_partition_view"
decl_stmt|;
name|createView
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
literal|"year=2017"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionsForViewNullPartSd
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"test_add_partition_view"
decl_stmt|;
name|createView
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|)
decl_stmt|;
name|partition
operator|.
name|setSd
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
literal|"year=2017"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecWithSharedSDNoValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|PartitionWithoutSD
name|partition
init|=
operator|new
name|PartitionWithoutSD
argument_list|()
decl_stmt|;
name|partition
operator|.
name|setRelativePath
argument_list|(
literal|"addpartspectest"
argument_list|)
expr_stmt|;
name|String
name|location
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/nullValueTest/"
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpecWithSharedSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|,
name|buildSD
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecNoValue
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/addpartspectest"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecNullValues
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|partition
operator|.
name|setValues
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecWithSharedSDEmptyValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|PartitionWithoutSD
name|partition
init|=
operator|new
name|PartitionWithoutSD
argument_list|()
decl_stmt|;
name|partition
operator|.
name|setRelativePath
argument_list|(
literal|"addpartspectest"
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setValues
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|location
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/nullValueTest/"
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpecWithSharedSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|,
name|buildSD
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|partitionNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partitionNames
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"year=__HIVE_DEFAULT_PARTITION__"
argument_list|,
name|partitionNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddPartitionSpecMoreValues
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecWithSharedSDNoRelativePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
name|PartitionWithoutSD
name|partition1
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2007"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|PartitionWithoutSD
name|partition2
init|=
name|buildPartitionWithoutSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2008"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|partition1
operator|.
name|setRelativePath
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|partition2
operator|.
name|setRelativePath
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|String
name|location
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/noRelativePath/"
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpecWithSharedSD
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition1
argument_list|,
name|partition2
argument_list|)
argument_list|,
name|buildSD
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Partition
name|resultPart1
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2007"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|location
operator|+
literal|"null"
argument_list|,
name|resultPart1
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|resultPart1
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|resultPart2
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2008"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|location
operator|+
literal|"null"
argument_list|,
name|resultPart2
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|resultPart2
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecOneInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|String
name|tableLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
decl_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2016"
argument_list|,
name|tableLocation
operator|+
literal|"/year=2016"
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2017"
argument_list|,
name|tableLocation
operator|+
literal|"/year=2017"
argument_list|)
decl_stmt|;
name|Partition
name|partition3
init|=
name|buildPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2015"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|partition3
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|tableLocation
operator|+
literal|"/year=2015/month=march"
argument_list|)
expr_stmt|;
name|Partition
name|partition4
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2018"
argument_list|,
name|tableLocation
operator|+
literal|"/year=2018"
argument_list|)
decl_stmt|;
name|Partition
name|partition5
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"2019"
argument_list|,
name|tableLocation
operator|+
literal|"/year=2019"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition1
argument_list|,
name|partition2
argument_list|,
name|partition3
argument_list|,
name|partition4
argument_list|,
name|partition5
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MetaException should have happened."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|partitions
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecInvalidLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|String
name|tableLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valuesAndLocations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|valuesAndLocations
operator|.
name|put
argument_list|(
literal|"2014"
argument_list|,
name|tableLocation
operator|+
literal|"/year=2014"
argument_list|)
expr_stmt|;
name|valuesAndLocations
operator|.
name|put
argument_list|(
literal|"2015"
argument_list|,
name|tableLocation
operator|+
literal|"/year=2015"
argument_list|)
expr_stmt|;
name|valuesAndLocations
operator|.
name|put
argument_list|(
literal|"2016"
argument_list|,
literal|"invalidhost:80000/wrongfolder"
argument_list|)
expr_stmt|;
name|valuesAndLocations
operator|.
name|put
argument_list|(
literal|"2017"
argument_list|,
name|tableLocation
operator|+
literal|"/year=2017"
argument_list|)
expr_stmt|;
name|valuesAndLocations
operator|.
name|put
argument_list|(
literal|"2018"
argument_list|,
name|tableLocation
operator|+
literal|"/year=2018"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|buildPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|valuesAndLocations
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MetaException should have happened."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
if|if
condition|(
operator|!
literal|"invalidhost:80000/wrongfolder"
operator|.
name|equals
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionSpecMoreThanThreadCountsOneFails
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|()
expr_stmt|;
name|String
name|tableLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|String
operator|.
name|valueOf
argument_list|(
literal|2000
operator|+
name|i
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|tableLocation
operator|+
literal|"/year="
operator|+
name|value
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|30
condition|)
block|{
name|location
operator|=
literal|"invalidhost:80000/wrongfolder"
expr_stmt|;
block|}
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|value
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|buildPartitionSpec
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpecProxy
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MetaException should have happened."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|parts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
if|if
condition|(
operator|!
literal|"invalidhost:80000/wrongfolder"
operator|.
name|equals
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Helper methods
specifier|private
name|void
name|createDB
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|TException
block|{
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Table
name|createTable
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
argument_list|)
return|;
block|}
specifier|private
name|Table
name|createTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|addTableParam
argument_list|(
literal|"partTestTableParamKey"
argument_list|,
literal|"partTestTableParamValue"
argument_list|)
operator|.
name|setPartCols
argument_list|(
name|partCols
argument_list|)
operator|.
name|addStorageDescriptorParam
argument_list|(
literal|"partTestSDParamKey"
argument_list|,
literal|"partTestSDParamValue"
argument_list|)
operator|.
name|setSerdeName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
operator|.
name|addSerdeParam
argument_list|(
literal|"partTestSerdeParamKey"
argument_list|,
literal|"partTestSerdeParamValue"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|private
name|Partition
name|buildPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|buildPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|value
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/addparttest"
argument_list|)
return|;
block|}
specifier|private
name|Partition
name|buildPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|MetaException
block|{
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addValue
argument_list|(
name|value
argument_list|)
operator|.
name|addCol
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|addPartParam
argument_list|(
name|DEFAULT_PARAM_KEY
argument_list|,
name|DEFAULT_PARAM_VALUE
argument_list|)
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|partition
return|;
block|}
specifier|private
name|Partition
name|buildPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|MetaException
block|{
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setValues
argument_list|(
name|values
argument_list|)
operator|.
name|addPartParam
argument_list|(
name|DEFAULT_PARAM_KEY
operator|+
name|index
argument_list|,
name|DEFAULT_PARAM_VALUE
operator|+
name|index
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"TestInputFormat"
operator|+
name|index
argument_list|)
operator|.
name|setOutputFormat
argument_list|(
literal|"TestOutputFormat"
operator|+
name|index
argument_list|)
operator|.
name|setSerdeName
argument_list|(
literal|"partserde"
operator|+
name|index
argument_list|)
operator|.
name|addStorageDescriptorParam
argument_list|(
literal|"partsdkey"
operator|+
name|index
argument_list|,
literal|"partsdvalue"
operator|+
name|index
argument_list|)
operator|.
name|setCols
argument_list|(
name|partCols
argument_list|)
operator|.
name|setCreateTime
argument_list|(
name|DEFAULT_CREATE_TIME
argument_list|)
operator|.
name|setLastAccessTime
argument_list|(
name|DEFAULT_CREATE_TIME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|partition
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getYearAndMonthPartCols
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"year part col"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|MONTH_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"month part col"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cols
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getYearPartCol
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"year part col"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cols
return|;
block|}
specifier|private
name|void
name|verifyPartition
parameter_list|(
name|Table
name|table
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The partition should not be null."
argument_list|,
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table name in the partition is not correct."
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partValues
init|=
name|part
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|partValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The partition has wrong values."
argument_list|,
name|partValues
operator|.
name|containsAll
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The DB name in the partition is not correct."
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The last access time is not correct."
argument_list|,
name|DEFAULT_CREATE_TIME
argument_list|,
name|part
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|DEFAULT_CREATE_TIME
argument_list|,
name|part
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The partition's parameter map should contain the partparamkey - partparamvalue pair."
argument_list|,
name|DEFAULT_PARAM_VALUE
operator|+
name|index
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|DEFAULT_PARAM_KEY
operator|+
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
name|part
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The partition's storage descriptor must not be null."
argument_list|,
name|sd
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The input format is not correct."
argument_list|,
literal|"TestInputFormat"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The output format is not correct."
argument_list|,
literal|"TestOutputFormat"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The serdeInfo name is not correct."
argument_list|,
literal|"partserde"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The parameter map of the partition's storage descriptor should contain the partsdkey - partsdvalue pair."
argument_list|,
literal|"partsdvalue"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"partsdkey"
operator|+
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The parameter's location is not correct."
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
operator|+
literal|"/"
operator|+
name|name
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The parameter's location should exist on the file system."
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// If the 'metastore.partition.inherit.table.properties' property is set in the metastore
comment|// config, the partition inherits the listed table parameters.
comment|// This property is not set in this test, therefore the partition doesn't inherit the table
comment|// parameters.
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The partition should not inherit the table parameters."
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PartitionWithoutSD
name|buildPartitionWithoutSD
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|MetaException
block|{
name|PartitionWithoutSD
name|partition
init|=
operator|new
name|PartitionWithoutSD
argument_list|()
decl_stmt|;
name|partition
operator|.
name|setCreateTime
argument_list|(
name|DEFAULT_CREATE_TIME
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setLastAccessTime
argument_list|(
name|DEFAULT_CREATE_TIME
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setValues
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|DEFAULT_PARAM_KEY
operator|+
name|index
argument_list|,
name|DEFAULT_PARAM_VALUE
operator|+
name|index
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setRelativePath
argument_list|(
literal|"partwithoutsd"
operator|+
name|index
argument_list|)
expr_stmt|;
return|return
name|partition
return|;
block|}
specifier|private
name|PartitionSpecProxy
name|buildPartitionSpec
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|rootPath
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
throws|throws
name|MetaException
block|{
name|PartitionSpec
name|partitionSpec
init|=
operator|new
name|PartitionSpec
argument_list|()
decl_stmt|;
name|partitionSpec
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setRootPath
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|PartitionListComposingSpec
name|partitionListComposingSpec
init|=
operator|new
name|PartitionListComposingSpec
argument_list|()
decl_stmt|;
name|partitionListComposingSpec
operator|.
name|setPartitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setPartitionList
argument_list|(
name|partitionListComposingSpec
argument_list|)
expr_stmt|;
return|return
name|PartitionSpecProxy
operator|.
name|Factory
operator|.
name|get
argument_list|(
name|partitionSpec
argument_list|)
return|;
block|}
specifier|private
name|StorageDescriptor
name|buildSD
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|sd
operator|.
name|setInputFormat
argument_list|(
literal|"TestInputFormat"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setOutputFormat
argument_list|(
literal|"TestOutputFormat"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|getYearPartCol
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCompressed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"testSDParamKey"
argument_list|,
literal|"testSDParamValue"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serdeInfo
init|=
operator|new
name|SerDeInfo
argument_list|()
decl_stmt|;
name|serdeInfo
operator|.
name|setName
argument_list|(
literal|"sharedSDPartSerde"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
name|serdeInfo
argument_list|)
expr_stmt|;
return|return
name|sd
return|;
block|}
specifier|private
name|PartitionSpecProxy
name|buildPartitionSpecWithSharedSD
parameter_list|(
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitions
parameter_list|,
name|StorageDescriptor
name|sd
parameter_list|)
throws|throws
name|MetaException
block|{
name|PartitionSpec
name|partitionSpec
init|=
operator|new
name|PartitionSpec
argument_list|()
decl_stmt|;
name|partitionSpec
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|PartitionSpecWithSharedSD
name|partitionList
init|=
operator|new
name|PartitionSpecWithSharedSD
argument_list|()
decl_stmt|;
name|partitionList
operator|.
name|setPartitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|partitionList
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setSharedSDPartitionSpec
argument_list|(
name|partitionList
argument_list|)
expr_stmt|;
return|return
name|PartitionSpecProxy
operator|.
name|Factory
operator|.
name|get
argument_list|(
name|partitionSpec
argument_list|)
return|;
block|}
specifier|private
name|PartitionSpecProxy
name|buildPartitionSpec
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|,
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitionsWithoutSD
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|partitionSpecs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|PartitionSpec
name|partitionSpec
init|=
operator|new
name|PartitionSpec
argument_list|()
decl_stmt|;
name|partitionSpec
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|PartitionListComposingSpec
name|partitionListComposingSpec
init|=
operator|new
name|PartitionListComposingSpec
argument_list|()
decl_stmt|;
name|partitionListComposingSpec
operator|.
name|setPartitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|partitionSpec
operator|.
name|setPartitionList
argument_list|(
name|partitionListComposingSpec
argument_list|)
expr_stmt|;
name|PartitionSpec
name|partitionSpecSharedSD
init|=
operator|new
name|PartitionSpec
argument_list|()
decl_stmt|;
name|partitionSpecSharedSD
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|partitionSpecSharedSD
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|PartitionSpecWithSharedSD
name|partitionSpecWithSharedSD
init|=
operator|new
name|PartitionSpecWithSharedSD
argument_list|()
decl_stmt|;
name|partitionSpecWithSharedSD
operator|.
name|setPartitions
argument_list|(
name|partitionsWithoutSD
argument_list|)
expr_stmt|;
name|partitionSpecWithSharedSD
operator|.
name|setSd
argument_list|(
name|buildSD
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
operator|+
literal|"/sharedSDTest/"
argument_list|)
argument_list|)
expr_stmt|;
name|partitionSpecSharedSD
operator|.
name|setSharedSDPartitionSpec
argument_list|(
name|partitionSpecWithSharedSD
argument_list|)
expr_stmt|;
name|partitionSpecs
operator|.
name|add
argument_list|(
name|partitionSpec
argument_list|)
expr_stmt|;
name|partitionSpecs
operator|.
name|add
argument_list|(
name|partitionSpecSharedSD
argument_list|)
expr_stmt|;
return|return
name|PartitionSpecProxy
operator|.
name|Factory
operator|.
name|get
argument_list|(
name|partitionSpecs
argument_list|)
return|;
block|}
specifier|private
name|void
name|verifyPartitionSharedSD
parameter_list|(
name|Table
name|table
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|Partition
name|part
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partValues
init|=
name|part
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|partValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partValues
operator|.
name|containsAll
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DEFAULT_CREATE_TIME
argument_list|,
name|part
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DEFAULT_PARAM_VALUE
operator|+
name|index
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|DEFAULT_PARAM_KEY
operator|+
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|part
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
name|part
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TestInputFormat"
argument_list|,
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TestOutputFormat"
argument_list|,
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"sharedSDPartSerde"
argument_list|,
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testSDParamValue"
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"testSDParamKey"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
operator|+
literal|"/sharedSDTest/partwithoutsd"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|buildPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|tableLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|tableName
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|value
argument_list|,
name|tableLocation
operator|+
literal|"/year="
operator|+
name|value
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
return|return
name|partitions
return|;
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|buildPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valuesAndLocations
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueAndLocation
range|:
name|valuesAndLocations
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|valueAndLocation
operator|.
name|getKey
argument_list|()
argument_list|,
name|valueAndLocation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
return|return
name|partitions
return|;
block|}
specifier|private
name|void
name|createView
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setType
argument_list|(
literal|"VIRTUAL_VIEW"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|addPartCol
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|null
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

