begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreEventContext
import|;
end_import

begin_comment
comment|/**  *  * AlternateFailurePreListener.  *  * An implementation of MetaStorePreEventListener which fails every other time it's invoked,  * starting with the first time.  *  * It also records and makes available the number of times it's been invoked.  */
end_comment

begin_class
specifier|public
class|class
name|AlternateFailurePreListener
extends|extends
name|MetaStorePreEventListener
block|{
specifier|private
specifier|static
name|int
name|callCount
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|throwException
init|=
literal|true
decl_stmt|;
specifier|public
name|AlternateFailurePreListener
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|PreEventContext
name|context
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
block|{
name|callCount
operator|++
expr_stmt|;
if|if
condition|(
name|throwException
condition|)
block|{
name|throwException
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|JDOException
argument_list|()
throw|;
block|}
name|throwException
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
specifier|static
name|int
name|getCallCount
parameter_list|()
block|{
return|return
name|callCount
return|;
block|}
block|}
end_class

end_unit

