begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|FunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|IndexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Test class for IMetaStoreClient API. Testing the Database related functions.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestDatabases
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDatabases
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Needed until there is no junit release with @BeforeParam, @AfterParam (junit 4.13)
comment|// https://github.com/junit-team/junit4/commit/1bf8438b65858565dbb64736bfe13aae9cfc1b5a
comment|// Then we should remove our own copy
specifier|private
specifier|static
name|Set
argument_list|<
name|AbstractMetaStoreService
argument_list|>
name|metaStoreServices
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DATABASE
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|final
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|Database
index|[]
name|testDatabases
init|=
operator|new
name|Database
index|[
literal|4
index|]
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|getMetaStoreToTest
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|MetaStoreFactoryForTests
operator|.
name|getMetaStores
argument_list|()
decl_stmt|;
name|metaStoreServices
operator|=
name|result
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|test
lambda|->
operator|(
name|AbstractMetaStoreService
operator|)
name|test
index|[
literal|1
index|]
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|TestDatabases
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
name|this
operator|.
name|metaStore
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Needed until there is no junit release with @BeforeParam, @AfterParam (junit 4.13)
comment|// https://github.com/junit-team/junit4/commit/1bf8438b65858565dbb64736bfe13aae9cfc1b5a
comment|// Then we should move this to @AfterParam
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopMetaStores
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|AbstractMetaStoreService
name|metaStoreService
range|:
name|metaStoreServices
control|)
block|{
try|try
block|{
name|metaStoreService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Catch the exceptions, so every other metastore could be stopped as well
comment|// Log it, so at least there is a slight possibility we find out about this :)
name|LOG
operator|.
name|error
argument_list|(
literal|"Error stopping MetaStoreService"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Clean up the databases
for|for
control|(
name|String
name|databaseName
range|:
name|client
operator|.
name|getAllDatabases
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|databaseName
operator|.
name|equals
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
condition|)
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|databaseName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|testDatabases
index|[
literal|0
index|]
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_database_1"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testDatabases
index|[
literal|1
index|]
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_database_to_find_1"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testDatabases
index|[
literal|2
index|]
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_database_to_find_2"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|testDatabases
index|[
literal|3
index|]
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_database_hidden_1"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Create the databases, and reload them from the MetaStore
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDatabases
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|client
operator|.
name|createDatabase
argument_list|(
name|testDatabases
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|testDatabases
index|[
name|i
index|]
operator|=
name|client
operator|.
name|getDatabase
argument_list|(
name|testDatabases
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * This test creates and queries a database and then drops it. Good for testing the happy path.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateGetDeleteDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|getDatabaseWithAllParametersSet
argument_list|()
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Database
name|createdDatabase
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// The createTime will be set on the server side, so the comparison should skip it
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing databases"
argument_list|,
name|database
argument_list|,
name|createdDatabase
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The directory should be created"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The directory should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NoSuchObjectException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateDatabaseDefaultValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|database
operator|.
name|setName
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Database
name|createdDatabase
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Comparing description"
argument_list|,
name|createdDatabase
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing location"
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|createdDatabase
operator|.
name|getName
argument_list|()
operator|+
literal|".db"
argument_list|,
name|createdDatabase
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing parameters"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|createdDatabase
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Comparing privileges"
argument_list|,
name|createdDatabase
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Comparing owner name"
argument_list|,
name|createdDatabase
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing owner type"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|createdDatabase
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateDatabaseNullName
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
comment|// Missing class setting field
name|database
operator|.
name|setName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
comment|// Throwing InvalidObjectException would be more appropriate, but we do not change the API
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateDatabaseInvalidName
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
comment|// Invalid character in new database name
name|database
operator|.
name|setName
argument_list|(
literal|"test_database_1;"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateDatabaseEmptyName
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
comment|// Empty new database name
name|database
operator|.
name|setName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
comment|// Throwing InvalidObjectException would be more appropriate, but we do not change the API
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateDatabaseAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
comment|// Already existing database
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultDatabaseData
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default database name"
argument_list|,
literal|"default"
argument_list|,
name|database
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default database description"
argument_list|,
literal|"Default Hive database"
argument_list|,
name|database
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default database location"
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default database parameters"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|database
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default database owner"
argument_list|,
literal|"public"
argument_list|,
name|database
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default database owner type"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|database
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Default database privileges"
argument_list|,
name|database
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDatabaseCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
comment|// Test in upper case
name|Database
name|resultUpper
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing databases"
argument_list|,
name|database
argument_list|,
name|resultUpper
argument_list|)
expr_stmt|;
comment|// Test in mixed case
name|Database
name|resultMix
init|=
name|client
operator|.
name|getDatabase
argument_list|(
literal|"teST_dAtABase_1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing databases"
argument_list|,
name|database
argument_list|,
name|resultMix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetDatabaseNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|getDatabase
argument_list|(
literal|"no_such_database"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDatabaseNullName
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Missing database name in the query
try|try
block|{
name|client
operator|.
name|getDatabase
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// TODO: Should have a check on the server side.
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropDatabaseNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"no_such_database"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseNullName
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Missing database in the query
try|try
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// TODO: Should be checked on server side
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseDefaultDatabase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check if it is possible to drop default database
try|try
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
expr_stmt|;
comment|// TODO: Should be checked on server side
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an MetaException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
comment|// Test in upper case
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allDatabases
init|=
name|client
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All databases size"
argument_list|,
literal|4
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test in mixed case
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"TesT_DatABaSe_1"
argument_list|)
expr_stmt|;
name|allDatabases
operator|=
name|client
operator|.
name|getAllDatabases
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All databases size"
argument_list|,
literal|4
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseDeleteData
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/dataFile"
argument_list|)
decl_stmt|;
name|metaStore
operator|.
name|createFile
argument_list|(
name|dataFile
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
comment|// Do not delete the data
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Check that the data still exist
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The data file should still exist"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Recreate the database
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The data file should still exist"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the data
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Check that the data is removed
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The data file should not exist"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropDatabaseIgnoreUnknownFalse
parameter_list|()
throws|throws
name|Exception
block|{
comment|// No such database
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"no_such_database"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseIgnoreUnknownTrue
parameter_list|()
throws|throws
name|Exception
block|{
comment|// No such database
name|client
operator|.
name|dropDatabase
argument_list|(
literal|"no_such_database"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropDatabaseWithTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|testTable
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|testTable
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseWithTableCascade
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|testTable
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|testTable
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The directory should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropDatabaseWithFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Function
name|testFunction
init|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test_function"
argument_list|)
operator|.
name|setClass
argument_list|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFUpper"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createFunction
argument_list|(
name|testFunction
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseWithFunctionCascade
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Function
name|testFunction
init|=
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test_function"
argument_list|)
operator|.
name|setClass
argument_list|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFUpper"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createFunction
argument_list|(
name|testFunction
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The directory should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an index in the given database for testing purposes.    * @param databaseName The database name in which the index should be creatd    * @throws TException If there is an error during the index creation    */
specifier|private
name|void
name|createIndex
parameter_list|(
name|String
name|databaseName
parameter_list|)
throws|throws
name|TException
block|{
name|Table
name|testTable
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|databaseName
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Index
name|testIndex
init|=
operator|new
name|IndexBuilder
argument_list|()
operator|.
name|setIndexName
argument_list|(
literal|"test_index"
argument_list|)
operator|.
name|setIndexTableName
argument_list|(
literal|"test_index_table"
argument_list|)
operator|.
name|setDbAndTableName
argument_list|(
name|testTable
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Table
name|testIndexTable
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|databaseName
argument_list|)
operator|.
name|setType
argument_list|(
name|TableType
operator|.
name|INDEX_TABLE
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_index_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Drop database with index
name|client
operator|.
name|createTable
argument_list|(
name|testTable
argument_list|)
expr_stmt|;
name|client
operator|.
name|createIndex
argument_list|(
name|testIndex
argument_list|,
name|testIndexTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseWithIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|createIndex
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: Known error, should be fixed
comment|// client.dropDatabase(database.getName(), true, true, true);
comment|// Need to drop index to clean up the mess
try|try
block|{
comment|// Without cascade
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an InvalidOperationException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
name|client
operator|.
name|dropIndex
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test_table"
argument_list|,
literal|"test_index"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// TODO: End index hack
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabaseWithIndexCascade
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|createIndex
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// With cascade
comment|// TODO: Known error, should be fixed
comment|// client.dropDatabase(database.getName(), true, true, true);
comment|// Need to drop index to clean up the mess
name|client
operator|.
name|dropIndex
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test_table"
argument_list|,
literal|"test_index"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The directory should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAllDatabases
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|allDatabases
init|=
name|client
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All databases size"
argument_list|,
literal|5
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Database
name|database
range|:
name|testDatabases
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Checking database names"
argument_list|,
name|allDatabases
operator|.
name|contains
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Checnking that default database is returned"
argument_list|,
name|allDatabases
operator|.
name|contains
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Drop one database, see what remains
name|client
operator|.
name|dropDatabase
argument_list|(
name|testDatabases
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|allDatabases
operator|=
name|client
operator|.
name|getAllDatabases
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All databases size"
argument_list|,
literal|4
argument_list|,
name|allDatabases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Database
name|database
range|:
name|testDatabases
control|)
block|{
if|if
condition|(
operator|!
name|database
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|testDatabases
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Checking database names"
argument_list|,
name|allDatabases
operator|.
name|contains
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Checnking that default database is returned"
argument_list|,
name|allDatabases
operator|.
name|contains
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Checking that the deleted database is not returned"
argument_list|,
name|allDatabases
operator|.
name|contains
argument_list|(
name|testDatabases
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDatabases
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Find databases which name contains _to_find_
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*_to_find_*"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found databases size"
argument_list|,
literal|2
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_to_find_1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_to_find_2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Find databases which name contains _to_find_ or _hidden_
name|databases
operator|=
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*_to_find_*|*_hidden_*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found databases size"
argument_list|,
literal|3
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_to_find_1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_to_find_2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_hidden_1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Look for databases but do not find any
name|databases
operator|=
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*_not_such_database_*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No such databases size"
argument_list|,
literal|0
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Look for databases without pattern
name|databases
operator|=
name|client
operator|.
name|getDatabases
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Search databases without pattern size"
argument_list|,
literal|5
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDatabasesCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check case insensitive search
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|client
operator|.
name|getDatabases
argument_list|(
literal|"*_tO_FiND*"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Found databases size"
argument_list|,
literal|2
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_to_find_1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain"
argument_list|,
name|databases
operator|.
name|contains
argument_list|(
literal|"test_database_to_find_2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|originalDatabase
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Database
name|newDatabase
init|=
operator|new
name|DatabaseBuilder
argument_list|()
comment|// The database name is not changed during alter
operator|.
name|setName
argument_list|(
name|originalDatabase
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|GROUP
argument_list|)
operator|.
name|setOwnerName
argument_list|(
literal|"owner2"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/database_location_2"
argument_list|)
operator|.
name|setDescription
argument_list|(
literal|"dummy description 2"
argument_list|)
operator|.
name|addParam
argument_list|(
literal|"param_key_1"
argument_list|,
literal|"param_value_1_2"
argument_list|)
operator|.
name|addParam
argument_list|(
literal|"param_key_2_3"
argument_list|,
literal|"param_value_2_3"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|alterDatabase
argument_list|(
name|originalDatabase
operator|.
name|getName
argument_list|()
argument_list|,
name|newDatabase
argument_list|)
expr_stmt|;
name|Database
name|alteredDatabase
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|newDatabase
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing Databases"
argument_list|,
name|newDatabase
argument_list|,
name|alteredDatabase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterDatabaseNotNullableFields
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|getDatabaseWithAllParametersSet
argument_list|()
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Database
name|originalDatabase
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Database
name|newDatabase
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|newDatabase
operator|.
name|setName
argument_list|(
literal|"new_name"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alterDatabase
argument_list|(
name|originalDatabase
operator|.
name|getName
argument_list|()
argument_list|,
name|newDatabase
argument_list|)
expr_stmt|;
comment|// The name should not be changed, so reload the db with the original name
name|Database
name|alteredDatabase
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|originalDatabase
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Database name should not change"
argument_list|,
name|originalDatabase
operator|.
name|getName
argument_list|()
argument_list|,
name|alteredDatabase
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Database description should not change"
argument_list|,
name|originalDatabase
operator|.
name|getDescription
argument_list|()
argument_list|,
name|alteredDatabase
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Database location should not change"
argument_list|,
name|originalDatabase
operator|.
name|getLocationUri
argument_list|()
argument_list|,
name|alteredDatabase
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Database parameters should be empty"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|alteredDatabase
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Database owner should be empty"
argument_list|,
name|alteredDatabase
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Database owner type should not change"
argument_list|,
name|originalDatabase
operator|.
name|getOwnerType
argument_list|()
argument_list|,
name|alteredDatabase
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Database privileges should be empty"
argument_list|,
name|alteredDatabase
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterDatabaseNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|newDatabase
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test_database_altered"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|alterDatabase
argument_list|(
literal|"no_such_database"
argument_list|,
name|newDatabase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterDatabaseCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Database
name|originalDatabase
init|=
name|testDatabases
index|[
literal|0
index|]
decl_stmt|;
name|Database
name|newDatabase
init|=
name|originalDatabase
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newDatabase
operator|.
name|setDescription
argument_list|(
literal|"Altered database"
argument_list|)
expr_stmt|;
comment|// Test in upper case
name|client
operator|.
name|alterDatabase
argument_list|(
name|originalDatabase
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|newDatabase
argument_list|)
expr_stmt|;
name|Database
name|alteredDatabase
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|newDatabase
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing databases"
argument_list|,
name|newDatabase
argument_list|,
name|alteredDatabase
argument_list|)
expr_stmt|;
comment|// Test in mixed case
name|originalDatabase
operator|=
name|testDatabases
index|[
literal|2
index|]
expr_stmt|;
name|newDatabase
operator|=
name|originalDatabase
operator|.
name|deepCopy
argument_list|()
expr_stmt|;
name|newDatabase
operator|.
name|setDescription
argument_list|(
literal|"Altered database 2"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alterDatabase
argument_list|(
literal|"TeST_daTAbaSe_TO_FiNd_2"
argument_list|,
name|newDatabase
argument_list|)
expr_stmt|;
name|alteredDatabase
operator|=
name|client
operator|.
name|getDatabase
argument_list|(
name|newDatabase
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing databases"
argument_list|,
name|newDatabase
argument_list|,
name|alteredDatabase
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Database
name|getDatabaseWithAllParametersSet
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"dummy"
argument_list|)
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|)
operator|.
name|setOwnerName
argument_list|(
literal|"owner"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/database_location"
argument_list|)
operator|.
name|setDescription
argument_list|(
literal|"dummy description"
argument_list|)
operator|.
name|addParam
argument_list|(
literal|"param_key_1"
argument_list|,
literal|"param_value_1"
argument_list|)
operator|.
name|addParam
argument_list|(
literal|"param_key_2"
argument_list|,
literal|"param_value_2"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

