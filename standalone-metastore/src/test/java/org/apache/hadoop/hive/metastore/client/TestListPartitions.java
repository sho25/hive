begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionValuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionValuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionValuesRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * API tests for HMS client's listPartitions methods.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestListPartitions
extends|extends
name|MetaStoreClientTest
block|{
specifier|private
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"testpartdb"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"testparttable"
decl_stmt|;
specifier|public
name|TestListPartitions
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Clean up the database
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createDB
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createDB
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|TException
block|{
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Table
name|createTestTable
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partCols
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createTestTable
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partCols
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Table
name|createTestTable
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partCols
parameter_list|,
name|boolean
name|setPartitionLevelPrivilages
parameter_list|)
throws|throws
name|Exception
block|{
name|TableBuilder
name|builder
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"name"
argument_list|,
literal|"string"
argument_list|)
decl_stmt|;
name|partCols
operator|.
name|forEach
argument_list|(
name|col
lambda|->
name|builder
operator|.
name|addPartCol
argument_list|(
name|col
argument_list|,
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|setPartitionLevelPrivilages
condition|)
block|{
name|table
operator|.
name|putToParameters
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|private
specifier|static
name|void
name|addPartition
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
throws|throws
name|TException
block|{
name|PartitionBuilder
name|partitionBuilder
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|fromTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|values
operator|.
name|forEach
argument_list|(
name|val
lambda|->
name|partitionBuilder
operator|.
name|addValue
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partitionBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|createTable3PartCols1PartGeneric
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|boolean
name|authOn
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|createTestTable
argument_list|(
name|client
argument_list|,
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"yyyy"
argument_list|,
literal|"mm"
argument_list|,
literal|"dd"
argument_list|)
argument_list|,
name|authOn
argument_list|)
decl_stmt|;
name|addPartition
argument_list|(
name|client
argument_list|,
name|t
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1997"
argument_list|,
literal|"05"
argument_list|,
literal|"16"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|createTable3PartCols1Part
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|createTable3PartCols1PartGeneric
argument_list|(
name|client
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|createTable4PartColsPartsGeneric
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|boolean
name|authOn
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|createTestTable
argument_list|(
name|client
argument_list|,
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"yyyy"
argument_list|,
literal|"mm"
argument_list|,
literal|"dd"
argument_list|)
argument_list|,
name|authOn
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1999"
argument_list|,
literal|"01"
argument_list|,
literal|"02"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2009"
argument_list|,
literal|"02"
argument_list|,
literal|"10"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"10"
argument_list|,
literal|"26"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"11"
argument_list|,
literal|"27"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|vals
range|:
name|testValues
control|)
block|{
name|addPartition
argument_list|(
name|client
argument_list|,
name|t
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
return|return
name|testValues
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|createTable4PartColsParts
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createTable4PartColsPartsGeneric
argument_list|(
name|client
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|createTable4PartColsPartsAuthOn
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createTable4PartColsPartsGeneric
argument_list|(
name|client
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertAuthInfoReturned
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|group
parameter_list|,
name|Partition
name|partition
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|partition
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|,
name|partition
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|,
name|partition
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getGroupPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|,
name|partition
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
literal|"public"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertPartitionsHaveCorrectValues
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|testValues
operator|.
name|size
argument_list|()
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|testValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertCorrectPartitionNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partCols
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|testValues
operator|.
name|size
argument_list|()
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectedKVPairs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|partCols
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|expectedKVPairs
operator|.
name|add
argument_list|(
name|partCols
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|+
literal|"="
operator|+
name|testValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedKVPairs
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|,
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertPartitionsSpecProxy
parameter_list|(
name|PartitionSpecProxy
name|partSpecProxy
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|testValues
operator|.
name|size
argument_list|()
argument_list|,
name|partSpecProxy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|partitionSpecs
init|=
name|partSpecProxy
operator|.
name|toPartitionSpec
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|partitionSpecs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartitionList
argument_list|()
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|testValues
operator|.
name|size
argument_list|()
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|testValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertCorrectPartitionValuesResponse
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
parameter_list|,
name|PartitionValuesResponse
name|resp
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|testValues
operator|.
name|size
argument_list|()
argument_list|,
name|resp
operator|.
name|getPartitionValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionValuesRow
argument_list|>
name|rowList
init|=
name|resp
operator|.
name|getPartitionValues
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|PartitionValuesRow
name|pvr
init|=
name|rowList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|pvr
operator|.
name|getRow
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|assertEquals
argument_list|(
name|testValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Testing listPartitions(String,String,short) ->    *         get_partitions(String,String,short).    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsAll
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|testValues
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|testValues
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsAllHighMaxParts
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable3PartCols1Part
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
literal|101
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsAllNoParts
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|createTestTable
argument_list|(
name|client
argument_list|,
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"yyyy"
argument_list|,
literal|"mm"
argument_list|,
literal|"dd"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsAllNoTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsAllNoDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsAllNoDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable3PartCols1Part
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitions
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsAllNoTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable3PartCols1Part
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsAllNullTblName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable3PartCols1Part
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsAllNullDbName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable3PartCols1Part
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitions
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
comment|/**    * Testing listPartitions(String,String,List(String),short) ->    *         get_partitions(String,String,List(String),short).    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsByValues
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testValues
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testValues
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"11"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testValues
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"20177"
argument_list|,
literal|"11"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByValuesNoVals
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable3PartCols1Part
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByValuesTooManyVals
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable3PartCols1Part
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByValuesNoDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable3PartCols1Part
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitions
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1999"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByValuesNoTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable3PartCols1Part
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1999"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByValuesNoTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1999"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByValuesNoDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1999"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByValuesNullDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable3PartCols1Part
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitions
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1999"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByValuesNullTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable3PartCols1Part
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1999"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByValuesNullValues
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable3PartCols1Part
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Testing listPartitionSpecs(String,String,int) ->    *         get_partitions_pspec(String,String,int).    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionSpecs
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partSpecProxy
init|=
name|client
operator|.
name|listPartitionSpecs
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertPartitionsSpecProxy
argument_list|(
name|partSpecProxy
argument_list|,
name|testValues
argument_list|)
expr_stmt|;
name|partSpecProxy
operator|=
name|client
operator|.
name|listPartitionSpecs
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertPartitionsSpecProxy
argument_list|(
name|partSpecProxy
argument_list|,
name|testValues
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|partSpecProxy
operator|=
name|client
operator|.
name|listPartitionSpecs
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertPartitionsSpecProxy
argument_list|(
name|partSpecProxy
argument_list|,
name|testValues
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsNoTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|listPartitionSpecs
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsNoDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecs
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsHighMaxParts
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecs
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|101
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsNoDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecs
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsNoTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecs
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionSpecsNullDbName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecs
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionSpecsNullTblName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecs
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
comment|/**    * Testing listPartitionsWithAuthInfo(String,String,short,String,List(String)) ->    *         get_partitions_with_auth(String,String,short,String,List(String)).    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsWithAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValues
init|=
name|createTable4PartColsPartsAuthOn
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|String
name|user
init|=
literal|"user0"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"group0"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
name|user
argument_list|,
name|groups
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|forEach
argument_list|(
name|partition
lambda|->
name|assertAuthInfoReturned
argument_list|(
name|user
argument_list|,
name|groups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|user
argument_list|,
name|groups
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|forEach
argument_list|(
name|partition
lambda|->
name|assertAuthInfoReturned
argument_list|(
name|user
argument_list|,
name|groups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|partition
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthHighMaxParts
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
literal|101
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsWithAuthNoPrivilegesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValues
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|forEach
argument_list|(
name|partition
lambda|->
name|assertNull
argument_list|(
name|partition
operator|.
name|getPrivileges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthNoDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthNoTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthNoTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthNoDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthNullDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsWithAuthNullTblName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsWithAuthNullUser
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsPartsAuthOn
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsWithAuthNullGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsPartsAuthOn
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|"user0"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Testing listPartitionsWithAuthInfo(String,String,List(String),short,String,List(String)) ->    *         get_partitions_ps_with_auth(String,String,List(String),short,String,List(String)).    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsWithAuthByValues
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValues
init|=
name|createTable4PartColsPartsAuthOn
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|String
name|user
init|=
literal|"user0"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"group0"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"11"
argument_list|,
literal|"27"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
name|user
argument_list|,
name|groups
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
operator|.
name|subList
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|forEach
argument_list|(
name|partition
lambda|->
name|assertAuthInfoReturned
argument_list|(
name|user
argument_list|,
name|groups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
name|user
argument_list|,
name|groups
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|forEach
argument_list|(
name|partition
lambda|->
name|assertAuthInfoReturned
argument_list|(
name|user
argument_list|,
name|groups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|user
argument_list|,
name|groups
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|forEach
argument_list|(
name|partition
lambda|->
name|assertAuthInfoReturned
argument_list|(
name|user
argument_list|,
name|groups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2013"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
name|user
argument_list|,
name|groups
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthByValuesNoVals
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsPartsAuthOn
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthByValuesTooManyVals
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsPartsAuthOn
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsWithAuthByValuesHighMaxParts
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValues
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
comment|//This doesn't throw MetaException when setting to high max part count
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|101
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
decl_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthByValuesTooManyValsHighMaxParts
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|101
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsWithAuthByValuesNoPrivilegesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValues
init|=
name|createTable4PartColsPartsAuthOn
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|String
name|user
init|=
literal|"user0"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"group0"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"11"
argument_list|,
literal|"27"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
name|user
argument_list|,
name|groups
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
operator|.
name|subList
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|forEach
argument_list|(
name|partition
lambda|->
name|assertAuthInfoReturned
argument_list|(
name|user
argument_list|,
name|groups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|partition
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthByValuesNoDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"11"
argument_list|,
literal|"27"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthByValuesNoTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"11"
argument_list|,
literal|"27"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthByValuesNoTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"11"
argument_list|,
literal|"27"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthByValuesNoDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"11"
argument_list|,
literal|"27"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsWithAuthByValuesNullDbName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"11"
argument_list|,
literal|"27"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsWithAuthByValuesNullTblName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"11"
argument_list|,
literal|"27"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsWithAuthByValuesNullValues
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsWithAuthByValuesNullUser
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValues
init|=
name|createTable4PartColsPartsAuthOn
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"11"
argument_list|,
literal|"27"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
decl_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
operator|.
name|subList
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsWithAuthByValuesNullGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValues
init|=
name|createTable4PartColsPartsAuthOn
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitionsWithAuthInfo
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"11"
argument_list|,
literal|"27"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
operator|.
name|subList
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Testing listPartitionsByFilter(String,String,String,short) ->    *         get_partitions_by_filter(String,String,String,short).    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsByFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValues
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\" OR "
operator|+
literal|"mm=\"02\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\" OR "
operator|+
literal|"mm=\"02\""
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\" OR "
operator|+
literal|"mm=\"02\""
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yYyY=\"2017\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertPartitionsHaveCorrectValues
argument_list|(
name|partitions
argument_list|,
name|partValues
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\" AND mm=\"99\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByFilterInvalidFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyy=\"2017\""
argument_list|,
operator|(
name|short
operator|)
literal|101
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByFilterHighMaxParts
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|(
name|short
operator|)
literal|101
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByFilterNoTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByFilterNoDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByFilterNoTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionsByFilterNoDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsByFilterNullTblName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsByFilterNullDbName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsByFilterNullFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsByFilterEmptyFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Testing listPartitionSpecsByFilter(String,String,String,int) ->    *         get_part_specs_by_filter(String,String,String,int).    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionsSpecsByFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|partSpecProxy
init|=
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\" OR "
operator|+
literal|"mm=\"02\""
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertPartitionsSpecProxy
argument_list|(
name|partSpecProxy
argument_list|,
name|testValues
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|partSpecProxy
operator|=
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\" OR "
operator|+
literal|"mm=\"02\""
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertPartitionsSpecProxy
argument_list|(
name|partSpecProxy
argument_list|,
name|testValues
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|partSpecProxy
operator|=
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\" OR "
operator|+
literal|"mm=\"02\""
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertPartitionsSpecProxy
argument_list|(
name|partSpecProxy
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|partSpecProxy
operator|=
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"20177\""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertPartitionsSpecProxy
argument_list|(
name|partSpecProxy
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|partSpecProxy
operator|=
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yYyY=\"2017\""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertPartitionsSpecProxy
argument_list|(
name|partSpecProxy
argument_list|,
name|testValues
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|partSpecProxy
operator|=
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\" AND mm=\"99\""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertPartitionsSpecProxy
argument_list|(
name|partSpecProxy
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsByFilterInvalidFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyy=\"2017\""
argument_list|,
literal|101
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsByFilterHighMaxParts
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
literal|101
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsByFilterNoTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsByFilterNoDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsByFilterNoTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsByFilterNoDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsByFilterNullTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionSpecsByFilterNullDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionSpecsByFilterNullFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|values
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|pproxy
init|=
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertPartitionsSpecProxy
argument_list|(
name|pproxy
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionSpecsByFilterEmptyFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|values
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
name|pproxy
init|=
name|client
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|""
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertPartitionsSpecProxy
argument_list|(
name|pproxy
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
comment|/**    * Testing getNumPartitionsByFilter(String,String,String) ->    *         get_num_partitions_by_filter(String,String,String).    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testGetNumPartitionsByFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\" OR "
operator|+
literal|"mm=\"02\""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|n
operator|=
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|n
operator|=
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"20177\""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|n
operator|=
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yYyY=\"2017\""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|n
operator|=
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\" AND mm=\"99\""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetNumPartitionsByFilterInvalidFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyy=\"2017\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetNumPartitionsByFilterNoTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
literal|"yyyy=\"2017\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetNumPartitionsByFilterNoDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetNumPartitionsByFilterNoTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetNumPartitionsByFilterNoDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNumPartitionsByFilterNullTblName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
literal|"yyyy=\"2017\""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetNumPartitionsByFilterNullDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"yyyy=\"2017\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNumPartitionsByFilterNullFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|client
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
comment|/**    * Testing listPartitionNames(String,String,short) ->    *         get_partition_names(String,String,short).    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionNames
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertCorrectPartitionNames
argument_list|(
name|partitionNames
argument_list|,
name|testValues
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"yyyy"
argument_list|,
literal|"mm"
argument_list|,
literal|"dd"
argument_list|)
argument_list|)
expr_stmt|;
name|partitionNames
operator|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|assertCorrectPartitionNames
argument_list|(
name|partitionNames
argument_list|,
name|testValues
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"yyyy"
argument_list|,
literal|"mm"
argument_list|,
literal|"dd"
argument_list|)
argument_list|)
expr_stmt|;
name|partitionNames
operator|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitionNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|//This method does not depend on MetastoreConf.LIMIT_PARTITION_REQUEST setting:
name|partitionNames
operator|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
literal|101
argument_list|)
expr_stmt|;
name|assertCorrectPartitionNames
argument_list|(
name|partitionNames
argument_list|,
name|testValues
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"yyyy"
argument_list|,
literal|"mm"
argument_list|,
literal|"dd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionNamesNoDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionNamesNoTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionNamesNoTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionNamesNoDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionNamesNullDbName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionNamesNullTblName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
comment|/**    * Testing listPartitionNames(String,String,List(String),short) ->    *         get_partition_names_ps(String,String,List(String),short).    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionNamesByValues
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertCorrectPartitionNames
argument_list|(
name|partitionNames
argument_list|,
name|testValues
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"yyyy"
argument_list|,
literal|"mm"
argument_list|,
literal|"dd"
argument_list|)
argument_list|)
expr_stmt|;
name|partitionNames
operator|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|101
argument_list|)
expr_stmt|;
name|assertCorrectPartitionNames
argument_list|(
name|partitionNames
argument_list|,
name|testValues
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"yyyy"
argument_list|,
literal|"mm"
argument_list|,
literal|"dd"
argument_list|)
argument_list|)
expr_stmt|;
name|partitionNames
operator|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertCorrectPartitionNames
argument_list|(
name|partitionNames
argument_list|,
name|testValues
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"yyyy"
argument_list|,
literal|"mm"
argument_list|,
literal|"dd"
argument_list|)
argument_list|)
expr_stmt|;
name|partitionNames
operator|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitionNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|partitionNames
operator|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"10"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertCorrectPartitionNames
argument_list|(
name|partitionNames
argument_list|,
name|testValues
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"yyyy"
argument_list|,
literal|"mm"
argument_list|,
literal|"dd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionNamesByValuesMaxPartCountUnlimited
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
comment|//TODO: due to value 101 this probably should throw an exception
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|101
argument_list|)
decl_stmt|;
name|assertCorrectPartitionNames
argument_list|(
name|partitionNames
argument_list|,
name|testValues
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"yyyy"
argument_list|,
literal|"mm"
argument_list|,
literal|"dd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionNamesByValuesNoPartVals
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionNamesByValuesTooManyVals
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionNamesByValuesNoDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionNamesByValuesNoTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionNamesByValuesNoTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionNamesByValuesNoDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionNamesByValuesNullDbName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionNamesByValuesNullTblName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionNamesByValuesNullValues
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionNames
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Testing listPartitionValues(PartitionValuesRequest) ->    *         get_partition_values(PartitionValuesRequest).    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionValues
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionSchema
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"yyyy"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|FieldSchema
argument_list|(
literal|"mm"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|PartitionValuesRequest
name|request
init|=
operator|new
name|PartitionValuesRequest
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|partitionSchema
argument_list|)
decl_stmt|;
name|PartitionValuesResponse
name|response
init|=
name|client
operator|.
name|listPartitionValues
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertCorrectPartitionValuesResponse
argument_list|(
name|testValues
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionValuesEmptySchema
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|testValues
init|=
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionSchema
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|PartitionValuesRequest
name|request
init|=
operator|new
name|PartitionValuesRequest
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|partitionSchema
argument_list|)
decl_stmt|;
name|client
operator|.
name|listPartitionValues
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionValuesNoDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionSchema
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"yyyy"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|FieldSchema
argument_list|(
literal|"mm"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|PartitionValuesRequest
name|request
init|=
operator|new
name|PartitionValuesRequest
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
name|partitionSchema
argument_list|)
decl_stmt|;
name|client
operator|.
name|listPartitionValues
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionValuesNoTblName
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionSchema
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"yyyy"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|FieldSchema
argument_list|(
literal|"mm"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|PartitionValuesRequest
name|request
init|=
operator|new
name|PartitionValuesRequest
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
name|partitionSchema
argument_list|)
decl_stmt|;
name|client
operator|.
name|listPartitionValues
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionValuesNoTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionSchema
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"yyyy"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|FieldSchema
argument_list|(
literal|"mm"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|PartitionValuesRequest
name|request
init|=
operator|new
name|PartitionValuesRequest
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|partitionSchema
argument_list|)
decl_stmt|;
name|client
operator|.
name|listPartitionValues
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListPartitionValuesNoDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionSchema
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"yyyy"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|FieldSchema
argument_list|(
literal|"mm"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|PartitionValuesRequest
name|request
init|=
operator|new
name|PartitionValuesRequest
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|partitionSchema
argument_list|)
decl_stmt|;
name|client
operator|.
name|listPartitionValues
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionValuesNullDbName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionSchema
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"yyyy"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|FieldSchema
argument_list|(
literal|"mm"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|PartitionValuesRequest
name|request
init|=
operator|new
name|PartitionValuesRequest
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
name|partitionSchema
argument_list|)
decl_stmt|;
name|client
operator|.
name|listPartitionValues
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TProtocolException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionValuesNullTblName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionSchema
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"yyyy"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|FieldSchema
argument_list|(
literal|"mm"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|PartitionValuesRequest
name|request
init|=
operator|new
name|PartitionValuesRequest
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
name|partitionSchema
argument_list|)
decl_stmt|;
name|client
operator|.
name|listPartitionValues
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TProtocolException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionValuesNullSchema
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|PartitionValuesRequest
name|request
init|=
operator|new
name|PartitionValuesRequest
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|client
operator|.
name|listPartitionValues
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TProtocolException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPartitionValuesNullRequest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createTable4PartColsParts
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|listPartitionValues
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|TTransportException
name|e
parameter_list|)
block|{
comment|//TODO: should not throw different exceptions for different HMS deployment types
block|}
block|}
block|}
end_class

end_unit

