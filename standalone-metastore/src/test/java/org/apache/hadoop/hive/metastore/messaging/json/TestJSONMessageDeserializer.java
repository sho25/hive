begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|skyscreamer
operator|.
name|jsonassert
operator|.
name|JSONAssert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestJSONMessageDeserializer
block|{
specifier|public
specifier|static
class|class
name|MyClass
block|{
annotation|@
name|JsonProperty
specifier|private
name|int
name|a
decl_stmt|;
annotation|@
name|JsonProperty
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
decl_stmt|;
specifier|private
name|long
name|l
decl_stmt|;
specifier|private
name|String
name|shouldNotSerialize
init|=
literal|"shouldNotSerialize"
decl_stmt|;
comment|//for jackson to instantiate
name|MyClass
parameter_list|()
block|{     }
name|MyClass
parameter_list|(
name|int
name|a
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|long
name|l
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|l
operator|=
name|l
expr_stmt|;
block|}
annotation|@
name|JsonProperty
name|long
name|getL
parameter_list|()
block|{
return|return
name|l
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|MyClass
name|myClass
init|=
operator|(
name|MyClass
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|myClass
operator|.
name|a
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|l
operator|!=
name|myClass
operator|.
name|l
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|map
operator|.
name|equals
argument_list|(
name|myClass
operator|.
name|map
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|shouldNotSerialize
operator|.
name|equals
argument_list|(
name|myClass
operator|.
name|shouldNotSerialize
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|a
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|map
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|l
operator|^
operator|(
name|l
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|shouldNotSerialize
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldNotSerializePropertiesNotAnnotated
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|MyClass
name|obj
init|=
operator|new
name|MyClass
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|JSONMessageDeserializer
operator|.
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|JSONAssert
operator|.
name|assertEquals
argument_list|(
literal|"{\"a\":2147483647,\"map\":{\"b\":\"b\",\"a\":\"a\"},\"l\":9223372036854775807}"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldDeserializeJsonStringToObject
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\"a\":47,\"map\":{\"a\":\"a\",\"b\":\"a value for b\"},\"l\":98}"
decl_stmt|;
name|MyClass
name|actual
init|=
name|JSONMessageDeserializer
operator|.
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|MyClass
operator|.
name|class
argument_list|)
decl_stmt|;
name|MyClass
name|expected
init|=
operator|new
name|MyClass
argument_list|(
literal|47
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"a value for b"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|98L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

