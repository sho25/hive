begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ISchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ISchemaName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaCompatibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaValidation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaVersionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaVersionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|CatalogBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|ISchemaBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|SchemaVersionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestObjectStoreSchemaMethods
block|{
specifier|private
name|RawStore
name|objectStore
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EXPRESSION_PROXY_CLASS
argument_list|,
name|DefaultPartitionExpressionProxy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|=
operator|new
name|ObjectStore
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|iSchema
parameter_list|()
throws|throws
name|TException
block|{
name|Database
name|db
init|=
name|createUniqueDatabaseForTest
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
name|objectStore
operator|.
name|getISchema
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
literal|"no.such.schema"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|String
name|schemaName
init|=
literal|"schema1"
decl_stmt|;
name|String
name|schemaGroup
init|=
literal|"group1"
decl_stmt|;
name|String
name|description
init|=
literal|"This is a description"
decl_stmt|;
name|schema
operator|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setCompatibility
argument_list|(
name|SchemaCompatibility
operator|.
name|FORWARD
argument_list|)
operator|.
name|setValidationLevel
argument_list|(
name|SchemaValidation
operator|.
name|LATEST
argument_list|)
operator|.
name|setCanEvolve
argument_list|(
literal|false
argument_list|)
operator|.
name|setSchemaGroup
argument_list|(
name|schemaGroup
argument_list|)
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|=
name|objectStore
operator|.
name|getISchema
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|,
name|schema
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaCompatibility
operator|.
name|FORWARD
argument_list|,
name|schema
operator|.
name|getCompatibility
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaValidation
operator|.
name|LATEST
argument_list|,
name|schema
operator|.
name|getValidationLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|schema
operator|.
name|isCanEvolve
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaGroup
argument_list|,
name|schema
operator|.
name|getSchemaGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|schema
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|schemaGroup
operator|=
literal|"new group"
expr_stmt|;
name|description
operator|=
literal|"new description"
expr_stmt|;
name|schema
operator|.
name|setCompatibility
argument_list|(
name|SchemaCompatibility
operator|.
name|BOTH
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setValidationLevel
argument_list|(
name|SchemaValidation
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setCanEvolve
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setSchemaGroup
argument_list|(
name|schemaGroup
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|alterISchema
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|=
name|objectStore
operator|.
name|getISchema
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|,
name|schema
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaCompatibility
operator|.
name|BOTH
argument_list|,
name|schema
operator|.
name|getCompatibility
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaValidation
operator|.
name|ALL
argument_list|,
name|schema
operator|.
name|getValidationLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schema
operator|.
name|isCanEvolve
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaGroup
argument_list|,
name|schema
operator|.
name|getSchemaGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|schema
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropISchema
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|=
name|objectStore
operator|.
name|getISchema
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|schemaWithInvalidDatabase
parameter_list|()
throws|throws
name|MetaException
throws|,
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
block|{
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"thisSchemaDoesntHaveADb"
argument_list|)
operator|.
name|setDbName
argument_list|(
literal|"no.such.database"
argument_list|)
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|schemaAlreadyExists
parameter_list|()
throws|throws
name|TException
block|{
name|Database
name|db
init|=
name|createUniqueDatabaseForTest
argument_list|()
decl_stmt|;
name|String
name|schemaName
init|=
literal|"schema2"
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|HIVE
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|=
name|objectStore
operator|.
name|getISchema
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaType
operator|.
name|HIVE
argument_list|,
name|schema
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaCompatibility
operator|.
name|BACKWARD
argument_list|,
name|schema
operator|.
name|getCompatibility
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaValidation
operator|.
name|ALL
argument_list|,
name|schema
operator|.
name|getValidationLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schema
operator|.
name|isCanEvolve
argument_list|()
argument_list|)
expr_stmt|;
comment|// This second attempt to create it should throw
name|objectStore
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|alterNonExistentSchema
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|String
name|schemaName
init|=
literal|"noSuchSchema"
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|HIVE
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|setDescription
argument_list|(
literal|"a new description"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|alterISchema
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|)
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|dropNonExistentSchema
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|objectStore
operator|.
name|dropISchema
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"no_such_schema"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|createVersionOfNonExistentSchema
parameter_list|()
throws|throws
name|MetaException
throws|,
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|setSchemaName
argument_list|(
literal|"noSchemaOfThisNameExists"
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSchemaVersion
parameter_list|()
throws|throws
name|TException
block|{
name|Database
name|db
init|=
name|createUniqueDatabaseForTest
argument_list|()
decl_stmt|;
name|String
name|schemaName
init|=
literal|"schema37"
decl_stmt|;
name|int
name|version
init|=
literal|1
decl_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
name|objectStore
operator|.
name|getSchemaVersion
argument_list|(
operator|new
name|SchemaVersionDescriptor
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|,
name|version
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|String
name|description
init|=
literal|"very descriptive"
decl_stmt|;
name|String
name|schemaText
init|=
literal|"this should look like json, but oh well"
decl_stmt|;
name|String
name|fingerprint
init|=
literal|"this should be an md5 string"
decl_stmt|;
name|String
name|versionName
init|=
literal|"why would I name a version?"
decl_stmt|;
name|long
name|creationTime
init|=
literal|10
decl_stmt|;
name|String
name|serdeName
init|=
literal|"serde_for_schema37"
decl_stmt|;
name|String
name|serializer
init|=
literal|"org.apache.hadoop.hive.metastore.test.Serializer"
decl_stmt|;
name|String
name|deserializer
init|=
literal|"org.apache.hadoop.hive.metastore.test.Deserializer"
decl_stmt|;
name|String
name|serdeDescription
init|=
literal|"how do you describe a serde?"
decl_stmt|;
name|schemaVersion
operator|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
name|ColumnType
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
operator|.
name|setCreatedAt
argument_list|(
name|creationTime
argument_list|)
operator|.
name|setState
argument_list|(
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|)
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
operator|.
name|setSchemaText
argument_list|(
name|schemaText
argument_list|)
operator|.
name|setFingerprint
argument_list|(
name|fingerprint
argument_list|)
operator|.
name|setName
argument_list|(
name|versionName
argument_list|)
operator|.
name|setSerdeName
argument_list|(
name|serdeName
argument_list|)
operator|.
name|setSerdeSerializerClass
argument_list|(
name|serializer
argument_list|)
operator|.
name|setSerdeDeserializerClass
argument_list|(
name|deserializer
argument_list|)
operator|.
name|setSerdeDescription
argument_list|(
name|serdeDescription
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|objectStore
operator|.
name|getSchemaVersion
argument_list|(
operator|new
name|SchemaVersionDescriptor
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|version
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|creationTime
argument_list|,
name|schemaVersion
operator|.
name|getCreatedAt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|,
name|schemaVersion
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|schemaVersion
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaText
argument_list|,
name|schemaVersion
operator|.
name|getSchemaText
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fingerprint
argument_list|,
name|schemaVersion
operator|.
name|getFingerprint
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|versionName
argument_list|,
name|schemaVersion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serdeName
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serializer
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getSerializerClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|deserializer
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getDeserializerClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serdeDescription
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schemaVersion
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|schemaVersion
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|FLOAT_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropSchemaVersion
argument_list|(
operator|new
name|SchemaVersionDescriptor
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|objectStore
operator|.
name|getSchemaVersion
argument_list|(
operator|new
name|SchemaVersionDescriptor
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
block|}
comment|// Test that adding multiple versions of the same schema
annotation|@
name|Test
specifier|public
name|void
name|multipleSchemaVersions
parameter_list|()
throws|throws
name|TException
block|{
name|Database
name|db
init|=
name|createUniqueDatabaseForTest
argument_list|()
decl_stmt|;
name|String
name|schemaName
init|=
literal|"schema195"
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|2
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|3
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"c"
argument_list|,
name|ColumnType
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|objectStore
operator|.
name|getLatestSchemaVersion
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schemaVersion
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|schemaVersion
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|objectStore
operator|.
name|getLatestSchemaVersion
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
literal|"no.such.schema.with.this.name"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SchemaVersion
argument_list|>
name|versions
init|=
name|objectStore
operator|.
name|getAllSchemaVersion
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
literal|"there.really.isnt.a.schema.named.this"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|versions
argument_list|)
expr_stmt|;
name|versions
operator|=
name|objectStore
operator|.
name|getAllSchemaVersion
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|versions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|versions
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|SchemaVersion
operator|::
name|getVersion
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|=
name|versions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCols
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|=
name|versions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCols
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|addDuplicateSchemaVersion
parameter_list|()
throws|throws
name|TException
block|{
name|Database
name|db
init|=
name|createUniqueDatabaseForTest
argument_list|()
decl_stmt|;
name|String
name|schemaName
init|=
literal|"schema1234"
decl_stmt|;
name|int
name|version
init|=
literal|1
decl_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
name|objectStore
operator|.
name|getSchemaVersion
argument_list|(
operator|new
name|SchemaVersionDescriptor
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|,
name|version
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
name|ColumnType
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|alterSchemaVersion
parameter_list|()
throws|throws
name|TException
block|{
name|Database
name|db
init|=
name|createUniqueDatabaseForTest
argument_list|()
decl_stmt|;
name|String
name|schemaName
init|=
literal|"schema371234"
decl_stmt|;
name|int
name|version
init|=
literal|1
decl_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
name|objectStore
operator|.
name|getSchemaVersion
argument_list|(
operator|new
name|SchemaVersionDescriptor
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|,
name|version
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
name|ColumnType
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
operator|.
name|setState
argument_list|(
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|objectStore
operator|.
name|getSchemaVersion
argument_list|(
operator|new
name|SchemaVersionDescriptor
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|version
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|,
name|schemaVersion
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|schemaVersion
operator|.
name|setState
argument_list|(
name|SchemaVersionState
operator|.
name|REVIEWED
argument_list|)
expr_stmt|;
name|String
name|serdeName
init|=
literal|"serde for "
operator|+
name|schemaName
decl_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
name|serdeName
argument_list|,
literal|""
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|serializer
init|=
literal|"org.apache.hadoop.hive.metastore.test.Serializer"
decl_stmt|;
name|String
name|deserializer
init|=
literal|"org.apache.hadoop.hive.metastore.test.Deserializer"
decl_stmt|;
name|serde
operator|.
name|setSerializerClass
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
name|serde
operator|.
name|setDeserializerClass
argument_list|(
name|deserializer
argument_list|)
expr_stmt|;
name|schemaVersion
operator|.
name|setSerDe
argument_list|(
name|serde
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|alterSchemaVersion
argument_list|(
operator|new
name|SchemaVersionDescriptor
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|,
name|version
argument_list|)
argument_list|,
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|objectStore
operator|.
name|getSchemaVersion
argument_list|(
operator|new
name|SchemaVersionDescriptor
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaName
argument_list|)
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|version
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaVersionState
operator|.
name|REVIEWED
argument_list|,
name|schemaVersion
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serdeName
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serializer
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getSerializerClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|deserializer
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getDeserializerClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|alterNonExistentSchemaVersion
parameter_list|()
throws|throws
name|MetaException
throws|,
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
block|{
name|String
name|schemaName
init|=
literal|"schema3723asdflj"
decl_stmt|;
name|int
name|version
init|=
literal|37
decl_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|setSchemaName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|setDbName
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
name|ColumnType
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
operator|.
name|setState
argument_list|(
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|alterSchemaVersion
argument_list|(
operator|new
name|SchemaVersionDescriptor
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|)
argument_list|,
name|version
argument_list|)
argument_list|,
name|schemaVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|dropNonExistentSchemaVersion
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|objectStore
operator|.
name|dropSchemaVersion
argument_list|(
operator|new
name|SchemaVersionDescriptor
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"ther is no schema named this"
argument_list|)
argument_list|,
literal|23
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|schemaQuery
parameter_list|()
throws|throws
name|TException
block|{
name|Database
name|db
init|=
name|createUniqueDatabaseForTest
argument_list|()
decl_stmt|;
name|String
name|schemaName1
init|=
literal|"a_schema1"
decl_stmt|;
name|ISchema
name|schema1
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName1
argument_list|)
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createISchema
argument_list|(
name|schema1
argument_list|)
expr_stmt|;
name|String
name|schemaName2
init|=
literal|"a_schema2"
decl_stmt|;
name|ISchema
name|schema2
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName2
argument_list|)
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createISchema
argument_list|(
name|schema2
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion1_1
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema1
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"alpha"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"beta"
argument_list|,
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion1_1
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion1_2
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema1
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|2
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"alpha"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"beta"
argument_list|,
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"gamma"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
literal|"namespace=x"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion1_2
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion2_1
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema2
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"ALPHA"
argument_list|,
name|ColumnType
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"delta"
argument_list|,
name|ColumnType
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion2_1
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion2_2
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema2
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|2
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"ALPHA"
argument_list|,
name|ColumnType
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"delta"
argument_list|,
name|ColumnType
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"epsilon"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|"namespace=x"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion2_2
argument_list|)
expr_stmt|;
comment|// Query that should return nothing
name|List
argument_list|<
name|SchemaVersion
argument_list|>
name|results
init|=
name|objectStore
operator|.
name|getSchemaVersionsByColumns
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query that should fetch one column
name|results
operator|=
name|objectStore
operator|.
name|getSchemaVersionsByColumns
argument_list|(
literal|"gamma"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// fetch 2 in same schema
name|results
operator|=
name|objectStore
operator|.
name|getSchemaVersionsByColumns
argument_list|(
literal|"beta"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// fetch across schemas
name|results
operator|=
name|objectStore
operator|.
name|getSchemaVersionsByColumns
argument_list|(
literal|"alpha"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// fetch by namespace
name|results
operator|=
name|objectStore
operator|.
name|getSchemaVersionsByColumns
argument_list|(
literal|null
argument_list|,
literal|"namespace=x"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// fetch by name and type
name|results
operator|=
name|objectStore
operator|.
name|getSchemaVersionsByColumns
argument_list|(
literal|"alpha"
argument_list|,
literal|null
argument_list|,
name|ColumnType
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure matching name but wrong type doesn't return
name|results
operator|=
name|objectStore
operator|.
name|getSchemaVersionsByColumns
argument_list|(
literal|"alpha"
argument_list|,
literal|null
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|schemaVersionQueryNoNameOrNamespace
parameter_list|()
throws|throws
name|MetaException
block|{
name|objectStore
operator|.
name|getSchemaVersionsByColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|dbNum
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|Database
name|createUniqueDatabaseForTest
parameter_list|()
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|String
name|catName
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.5
condition|)
block|{
name|catName
operator|=
literal|"unique_cat_for_test_"
operator|+
name|dbNum
operator|++
expr_stmt|;
name|objectStore
operator|.
name|createCatalog
argument_list|(
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"there"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|catName
operator|=
name|DEFAULT_CATALOG_NAME
expr_stmt|;
block|}
name|String
name|dbName
init|=
literal|"uniquedbfortest"
operator|+
name|dbNum
operator|++
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"somewhere"
argument_list|)
operator|.
name|setDescription
argument_list|(
literal|"descriptive"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
return|return
name|db
return|;
block|}
block|}
end_class

end_unit

