begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tests for LockRequestBuilder.  */
end_comment

begin_class
specifier|public
class|class
name|TestLockRequestBuilder
block|{
comment|// Test failure if user not set
annotation|@
name|Test
specifier|public
name|void
name|noUser
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|boolean
name|caughtException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cannot build a lock without giving a user"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|caughtException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|caughtException
argument_list|)
expr_stmt|;
block|}
comment|// Test that database and table don't coalesce.
annotation|@
name|Test
specifier|public
name|void
name|testDbTable
parameter_list|()
throws|throws
name|Exception
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"fred"
argument_list|,
name|req
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|req
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that database and table don't coalesce.
annotation|@
name|Test
specifier|public
name|void
name|testTablePartition
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"unknown"
argument_list|,
name|req
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that 2 separate databases don't coalesce.
annotation|@
name|Test
specifier|public
name|void
name|testTwoSeparateDbs
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"yourdb"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that 2 exclusive db locks coalesce to one
annotation|@
name|Test
specifier|public
name|void
name|testExExDb
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing exclusive db with new shared_write coalesces to
comment|// exclusive
annotation|@
name|Test
specifier|public
name|void
name|testExSWDb
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing exclusive db with new shared_read coalesces to
comment|// exclusive
annotation|@
name|Test
specifier|public
name|void
name|testExSRDb
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_write db with new exclusive coalesces to
comment|// exclusive
annotation|@
name|Test
specifier|public
name|void
name|testSWExDb
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_write db with new shared_write coalesces to
comment|// shared_write
annotation|@
name|Test
specifier|public
name|void
name|testSWSWDb
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_write db with new shared_read coalesces to
comment|// shared_write
annotation|@
name|Test
specifier|public
name|void
name|testSWSRDb
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_read db with new exclusive coalesces to
comment|// exclusive
annotation|@
name|Test
specifier|public
name|void
name|testSRExDb
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_read db with new shared_write coalesces to
comment|// shared_write
annotation|@
name|Test
specifier|public
name|void
name|testSRSWDb
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_read db with new shared_read coalesces to
comment|// shared_read
annotation|@
name|Test
specifier|public
name|void
name|testSRSRDb
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that 2 separate tables don't coalesce.
annotation|@
name|Test
specifier|public
name|void
name|testTwoSeparateTables
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"yourtable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that 2 exclusive table locks coalesce to one
annotation|@
name|Test
specifier|public
name|void
name|testExExTable
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing exclusive table with new shared_write coalesces to
comment|// exclusive
annotation|@
name|Test
specifier|public
name|void
name|testExSWTable
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing exclusive table with new shared_read coalesces to
comment|// exclusive
annotation|@
name|Test
specifier|public
name|void
name|testExSRTable
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_write table with new exclusive coalesces to
comment|// exclusive
annotation|@
name|Test
specifier|public
name|void
name|testSWExTable
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_write table with new shared_write coalesces to
comment|// shared_write
annotation|@
name|Test
specifier|public
name|void
name|testSWSWTable
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_write table with new shared_read coalesces to
comment|// shared_write
annotation|@
name|Test
specifier|public
name|void
name|testSWSRTable
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_read table with new exclusive coalesces to
comment|// exclusive
annotation|@
name|Test
specifier|public
name|void
name|testSRExTable
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_read table with new shared_write coalesces to
comment|// shared_write
annotation|@
name|Test
specifier|public
name|void
name|testSRSWTable
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_read table with new shared_read coalesces to
comment|// shared_read
annotation|@
name|Test
specifier|public
name|void
name|testSRSRTable
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that 2 separate partitions don't coalesce.
annotation|@
name|Test
specifier|public
name|void
name|testTwoSeparatePartitions
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"yourpart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that 2 exclusive partition locks coalesce to one
annotation|@
name|Test
specifier|public
name|void
name|testExExPart
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing exclusive partition with new shared_write coalesces to
comment|// exclusive
annotation|@
name|Test
specifier|public
name|void
name|testExSWPart
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing exclusive partition with new shared_read coalesces to
comment|// exclusive
annotation|@
name|Test
specifier|public
name|void
name|testExSRPart
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_write partition with new exclusive coalesces to
comment|// exclusive
annotation|@
name|Test
specifier|public
name|void
name|testSWExPart
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_write partition with new shared_write coalesces to
comment|// shared_write
annotation|@
name|Test
specifier|public
name|void
name|testSWSWPart
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_write partition with new shared_read coalesces to
comment|// shared_write
annotation|@
name|Test
specifier|public
name|void
name|testSWSRPart
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_read partition with new exclusive coalesces to
comment|// exclusive
annotation|@
name|Test
specifier|public
name|void
name|testSRExPart
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_read partition with new shared_write coalesces to
comment|// shared_write
annotation|@
name|Test
specifier|public
name|void
name|testSRSWPart
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that existing shared_read partition with new shared_read coalesces to
comment|// shared_read
annotation|@
name|Test
specifier|public
name|void
name|testSRSRPart
parameter_list|()
block|{
name|LockRequestBuilder
name|bldr
init|=
operator|new
name|LockRequestBuilder
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypart"
argument_list|)
expr_stmt|;
name|bldr
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
name|bldr
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|locks
init|=
name|req
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

