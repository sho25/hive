begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|IndexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Tests for getting and listing indexes.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestGetListIndexes
block|{
comment|// Needed until there is no junit release with @BeforeParam, @AfterParam (junit 4.13)
comment|// https://github.com/junit-team/junit4/commit/1bf8438b65858565dbb64736bfe13aae9cfc1b5a
comment|// Then we should remove our own copy
specifier|private
specifier|static
name|Set
argument_list|<
name|AbstractMetaStoreService
argument_list|>
name|metaStoreServices
init|=
literal|null
decl_stmt|;
specifier|private
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME_1
init|=
literal|"testindexdb_1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME_2
init|=
literal|"testindexdb_2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ORIG_TABLE_NAME_1
init|=
literal|"testindextable_1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ORIG_TABLE_NAME_2
init|=
literal|"testindextable_2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ORIG_TABLE_NAME_3
init|=
literal|"testindextable_3"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_NAME_1
init|=
literal|"testindexname_1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_NAME_2
init|=
literal|"testindexname_2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_NAME_3
init|=
literal|"testindexname_3"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_NAME_4
init|=
literal|"testindexname_4"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_NAME_5
init|=
literal|"testindexname_4"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Index
index|[]
name|INDEXES
init|=
operator|new
name|Index
index|[
literal|5
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|short
name|MAX
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|getMetaStoreToTest
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|MetaStoreFactoryForTests
operator|.
name|getMetaStores
argument_list|()
decl_stmt|;
name|metaStoreServices
operator|=
name|result
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|test
lambda|->
operator|(
name|AbstractMetaStoreService
operator|)
name|test
index|[
literal|1
index|]
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|TestGetListIndexes
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
name|this
operator|.
name|metaStore
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Needed until there is no junit release with @BeforeParam, @AfterParam (junit 4.13)
comment|// https://github.com/junit-team/junit4/commit/1bf8438b65858565dbb64736bfe13aae9cfc1b5a
comment|// Then we should move this to @AfterParam
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopMetaStores
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|AbstractMetaStoreService
name|metaStoreService
range|:
name|metaStoreServices
control|)
block|{
name|metaStoreService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Clean up the database
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME_1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME_2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|metaStore
operator|.
name|cleanWarehouseDirs
argument_list|()
expr_stmt|;
name|createDB
argument_list|(
name|DB_NAME_1
argument_list|)
expr_stmt|;
name|createDB
argument_list|(
name|DB_NAME_2
argument_list|)
expr_stmt|;
name|Table
name|origTable1
init|=
name|createTable
argument_list|(
name|DB_NAME_1
argument_list|,
name|ORIG_TABLE_NAME_1
argument_list|)
decl_stmt|;
name|Table
name|origTable2
init|=
name|createTable
argument_list|(
name|DB_NAME_1
argument_list|,
name|ORIG_TABLE_NAME_2
argument_list|)
decl_stmt|;
name|Table
name|origTable3
init|=
name|createTable
argument_list|(
name|DB_NAME_2
argument_list|,
name|ORIG_TABLE_NAME_1
argument_list|)
decl_stmt|;
name|createTable
argument_list|(
name|DB_NAME_1
argument_list|,
name|ORIG_TABLE_NAME_3
argument_list|)
expr_stmt|;
name|INDEXES
index|[
literal|0
index|]
operator|=
name|createIndex
argument_list|(
name|origTable1
argument_list|,
name|INDEX_NAME_1
argument_list|)
expr_stmt|;
name|INDEXES
index|[
literal|1
index|]
operator|=
name|createIndex
argument_list|(
name|origTable1
argument_list|,
name|INDEX_NAME_2
argument_list|)
expr_stmt|;
name|INDEXES
index|[
literal|2
index|]
operator|=
name|createIndex
argument_list|(
name|origTable1
argument_list|,
name|INDEX_NAME_3
argument_list|)
expr_stmt|;
name|INDEXES
index|[
literal|3
index|]
operator|=
name|createIndex
argument_list|(
name|origTable2
argument_list|,
name|INDEX_NAME_4
argument_list|)
expr_stmt|;
name|INDEXES
index|[
literal|4
index|]
operator|=
name|createIndex
argument_list|(
name|origTable3
argument_list|,
name|INDEX_NAME_5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
for|for
control|(
name|Index
name|index
range|:
name|INDEXES
control|)
block|{
name|client
operator|.
name|dropIndex
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// Get index tests
specifier|public
name|void
name|testGetIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|indexToGet
init|=
name|INDEXES
index|[
literal|0
index|]
decl_stmt|;
name|Index
name|index
init|=
name|client
operator|.
name|getIndex
argument_list|(
name|indexToGet
operator|.
name|getDbName
argument_list|()
argument_list|,
name|indexToGet
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|indexToGet
operator|.
name|getIndexName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|indexToGet
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|indexToGet
operator|=
name|INDEXES
index|[
literal|4
index|]
expr_stmt|;
name|index
operator|=
name|client
operator|.
name|getIndex
argument_list|(
name|indexToGet
operator|.
name|getDbName
argument_list|()
argument_list|,
name|indexToGet
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|indexToGet
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|indexToGet
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetNonExistingIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
name|INDEXES
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|getIndex
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
literal|"nonexisingindex"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetIndexNonExistingTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
name|INDEXES
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|getIndex
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"nonexistingtable"
argument_list|,
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetIndexNonExistingDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
name|INDEXES
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|getIndex
argument_list|(
literal|"nonexistingdb"
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetIndexNullName
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
name|INDEXES
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|getIndex
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetIndexNullTableName
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
name|INDEXES
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|getIndex
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetIndexNullDBName
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
name|INDEXES
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|getIndex
argument_list|(
literal|null
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetIndexEmptyName
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
name|INDEXES
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|getIndex
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetIndexEmptyTableName
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
name|INDEXES
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|getIndex
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|""
argument_list|,
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetIndexEmptyDBName
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
name|INDEXES
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|getIndex
argument_list|(
literal|""
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// List index tests
annotation|@
name|Test
specifier|public
name|void
name|testListIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
name|client
operator|.
name|listIndexes
argument_list|(
name|DB_NAME_1
argument_list|,
name|ORIG_TABLE_NAME_1
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|indexes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Index
name|index
range|:
name|indexes
control|)
block|{
if|if
condition|(
name|INDEX_NAME_1
operator|.
name|equals
argument_list|(
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|INDEXES
index|[
literal|0
index|]
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|INDEX_NAME_2
operator|.
name|equals
argument_list|(
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|INDEXES
index|[
literal|1
index|]
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|INDEXES
index|[
literal|2
index|]
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
name|indexes
operator|=
name|client
operator|.
name|listIndexes
argument_list|(
name|DB_NAME_1
argument_list|,
name|ORIG_TABLE_NAME_2
argument_list|,
name|MAX
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|INDEXES
index|[
literal|3
index|]
argument_list|,
name|indexes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|indexes
operator|=
name|client
operator|.
name|listIndexes
argument_list|(
name|DB_NAME_2
argument_list|,
name|ORIG_TABLE_NAME_1
argument_list|,
name|MAX
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|INDEXES
index|[
literal|4
index|]
argument_list|,
name|indexes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListIndexesEmptyList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
name|client
operator|.
name|listIndexes
argument_list|(
name|DB_NAME_1
argument_list|,
name|ORIG_TABLE_NAME_3
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|indexes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListIndexesInvalidDb
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
name|client
operator|.
name|listIndexes
argument_list|(
literal|"nonexistingdb"
argument_list|,
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|indexes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListIndexesInvalidTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
name|client
operator|.
name|listIndexes
argument_list|(
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"nonexsitingtable"
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|indexes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListIndexesNullDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|listIndexes
argument_list|(
literal|null
argument_list|,
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|MAX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListIndexesNullTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|listIndexes
argument_list|(
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|MAX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListIndexesEmptyDb
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
name|client
operator|.
name|listIndexes
argument_list|(
literal|""
argument_list|,
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|indexes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListIndexesEmptyTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
name|client
operator|.
name|listIndexes
argument_list|(
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|""
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|indexes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListIndexesWithDifferentNums
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
name|INDEXES
index|[
literal|0
index|]
decl_stmt|;
name|checkListIndexes
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|checkListIndexes
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|checkListIndexes
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|checkListIndexes
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// List index names tests
annotation|@
name|Test
specifier|public
name|void
name|testListIndexNames
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|indexNames
init|=
name|client
operator|.
name|listIndexNames
argument_list|(
name|DB_NAME_1
argument_list|,
name|ORIG_TABLE_NAME_1
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|indexNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedIndexNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|INDEXES
index|[
literal|1
index|]
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|INDEXES
index|[
literal|2
index|]
operator|.
name|getIndexName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedIndexNames
argument_list|,
name|indexNames
argument_list|)
expr_stmt|;
name|indexNames
operator|=
name|client
operator|.
name|listIndexNames
argument_list|(
name|DB_NAME_1
argument_list|,
name|ORIG_TABLE_NAME_2
argument_list|,
name|MAX
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|INDEXES
index|[
literal|3
index|]
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|indexNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|indexNames
operator|=
name|client
operator|.
name|listIndexNames
argument_list|(
name|DB_NAME_2
argument_list|,
name|ORIG_TABLE_NAME_1
argument_list|,
name|MAX
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|INDEXES
index|[
literal|4
index|]
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|indexNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListIndexNamesEmptyList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|indexes
init|=
name|client
operator|.
name|listIndexNames
argument_list|(
name|DB_NAME_1
argument_list|,
name|ORIG_TABLE_NAME_3
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|indexes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListIndexNamesInvalidDb
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|indexes
init|=
name|client
operator|.
name|listIndexNames
argument_list|(
literal|"nonexistingdb"
argument_list|,
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|indexes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListIndexNamesInvalidTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|indexes
init|=
name|client
operator|.
name|listIndexNames
argument_list|(
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"nonexsitingtable"
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|indexes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListIndexNamesNullDb
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|listIndexNames
argument_list|(
literal|null
argument_list|,
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|MAX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testListIndexNamesNullTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|listIndexNames
argument_list|(
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|MAX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListIndexNamesEmptyDb
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|indexes
init|=
name|client
operator|.
name|listIndexNames
argument_list|(
literal|""
argument_list|,
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|indexes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListIndexNamesEmptyTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|indexes
init|=
name|client
operator|.
name|listIndexNames
argument_list|(
name|INDEXES
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|""
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|indexes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListIndexNamesWithDifferentNums
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
name|INDEXES
index|[
literal|0
index|]
decl_stmt|;
name|checkListIndexNames
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|checkListIndexNames
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|checkListIndexNames
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|checkListIndexNames
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Helper methods
specifier|private
name|Table
name|createTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|buildTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|private
name|Table
name|buildTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|addStorageDescriptorParam
argument_list|(
literal|"testSDParamKey"
argument_list|,
literal|"testSDParamValue"
argument_list|)
operator|.
name|setSerdeName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
operator|.
name|addSerdeParam
argument_list|(
literal|"testSerdeParamKey"
argument_list|,
literal|"testSerdeParamValue"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|table
return|;
block|}
specifier|private
name|Index
name|createIndex
parameter_list|(
name|Table
name|origTable
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
name|origTable
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|origTableName
init|=
name|origTable
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|indexTableName
init|=
name|origTableName
operator|+
literal|"__"
operator|+
name|indexName
operator|+
literal|"__"
decl_stmt|;
name|Index
name|index
init|=
name|buildIndex
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|indexName
argument_list|,
name|indexTableName
argument_list|)
decl_stmt|;
name|client
operator|.
name|createIndex
argument_list|(
name|index
argument_list|,
name|buildTable
argument_list|(
name|dbName
argument_list|,
name|indexTableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|getIndex
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|indexName
argument_list|)
return|;
block|}
specifier|private
name|Index
name|buildIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|String
name|indexName
parameter_list|,
name|String
name|indexTableName
parameter_list|)
throws|throws
name|MetaException
block|{
name|Index
name|index
init|=
operator|new
name|IndexBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|origTableName
argument_list|)
operator|.
name|setIndexName
argument_list|(
name|indexName
argument_list|)
operator|.
name|setIndexTableName
argument_list|(
name|indexTableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|addIndexParam
argument_list|(
literal|"test_get_index_param_key"
argument_list|,
literal|"test_get_index_param_value"
argument_list|)
operator|.
name|setDeferredRebuild
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|index
return|;
block|}
specifier|private
name|void
name|createDB
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|TException
block|{
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkListIndexNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|short
name|num
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|indexNames
init|=
name|client
operator|.
name|listIndexNames
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|num
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexNames
argument_list|)
expr_stmt|;
comment|// TODO: The num parameter doesn't have any effect
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|indexNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkListIndexes
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|short
name|num
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
name|client
operator|.
name|listIndexes
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|num
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
comment|// TODO: The num parameter doesn't have any effect
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|indexes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

