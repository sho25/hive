begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_comment
comment|/**  * Mini HMS implementation, which can be used to run tests against different HMS configurations.  * Currently it supports 3 types:  *  - EMBEDDED - MetaStore running in embedded mode  *  - REMOTE - MetaStore running in the same process but in a dedicated thread and accessed  *  through the Thrift interface  *  - CLUSTER - In this case the MiniHMS is only a wrapper around the HMS running on a cluster,  *  so the same tests could be run against a real cluster  */
end_comment

begin_class
specifier|public
class|class
name|MiniHMS
block|{
specifier|public
enum|enum
name|MiniHMSType
block|{
name|EMBEDDED
block|,
name|REMOTE
block|,
name|CLUSTER
block|}
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|Configuration
name|metaStoreConf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
specifier|private
name|MiniHMSType
name|miniHMSType
init|=
name|MiniHMSType
operator|.
name|EMBEDDED
decl_stmt|;
specifier|public
name|Builder
parameter_list|()
block|{     }
specifier|public
name|Builder
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|metaStoreConf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setType
parameter_list|(
name|MiniHMSType
name|type
parameter_list|)
block|{
name|this
operator|.
name|miniHMSType
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AbstractMetaStoreService
name|build
parameter_list|()
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|miniHMSType
condition|)
block|{
case|case
name|REMOTE
case|:
return|return
operator|new
name|RemoteMetaStoreForTests
argument_list|(
name|metaStoreConf
argument_list|)
return|;
case|case
name|EMBEDDED
case|:
return|return
operator|new
name|EmbeddedMetaStoreForTests
argument_list|(
name|metaStoreConf
argument_list|)
return|;
case|case
name|CLUSTER
case|:
return|return
operator|new
name|ClusterMetaStoreForTests
argument_list|(
name|metaStoreConf
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected miniHMSType: "
operator|+
name|miniHMSType
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

