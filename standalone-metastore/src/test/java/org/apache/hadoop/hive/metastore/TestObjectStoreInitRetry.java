begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOCanRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestObjectStoreInitRetry
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestObjectStoreInitRetry
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|injectConnectFailure
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|void
name|setInjectConnectFailure
parameter_list|(
name|int
name|x
parameter_list|)
block|{
name|injectConnectFailure
operator|=
name|x
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|getInjectConnectFailure
parameter_list|()
block|{
return|return
name|injectConnectFailure
return|;
block|}
specifier|private
specifier|static
name|void
name|decrementInjectConnectFailure
parameter_list|()
block|{
name|injectConnectFailure
operator|--
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|oneTimeSetup
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// dummy instantiation to make sure any static/ctor code blocks of that
comment|// driver are loaded and ready to go.
name|DriverManager
operator|.
name|registerDriver
argument_list|(
operator|new
name|FakeDerby
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|oneTimeTearDown
parameter_list|()
throws|throws
name|SQLException
block|{
name|DriverManager
operator|.
name|deregisterDriver
argument_list|(
operator|new
name|FakeDerby
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|misbehave
parameter_list|()
throws|throws
name|RuntimeException
block|{
name|TestObjectStoreInitRetry
operator|.
name|debugTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|TestObjectStoreInitRetry
operator|.
name|getInjectConnectFailure
argument_list|()
operator|>
literal|0
condition|)
block|{
name|TestObjectStoreInitRetry
operator|.
name|decrementInjectConnectFailure
argument_list|()
expr_stmt|;
name|RuntimeException
name|re
init|=
operator|new
name|JDOCanRetryException
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"MISBEHAVE:"
operator|+
name|TestObjectStoreInitRetry
operator|.
name|getInjectConnectFailure
argument_list|()
argument_list|,
name|re
argument_list|)
expr_stmt|;
throw|throw
name|re
throw|;
block|}
block|}
comment|// debug instrumenter - useful in finding which fns get called, and how often
specifier|static
name|void
name|debugTrace
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"."
operator|+
name|e
operator|.
name|getStackTrace
argument_list|()
index|[
literal|1
index|]
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|":"
operator|+
name|TestObjectStoreInitRetry
operator|.
name|getInjectConnectFailure
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testObjStoreRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HMSHANDLERATTEMPTS
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HMSHANDLERINTERVAL
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CONNECTION_DRIVER
argument_list|,
name|FakeDerby
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|TRY_DIRECT_SQL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|jdbcUrl
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CONNECTURLKEY
argument_list|)
decl_stmt|;
name|jdbcUrl
operator|=
name|jdbcUrl
operator|.
name|replace
argument_list|(
literal|"derby"
argument_list|,
literal|"fderby"
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CONNECTURLKEY
argument_list|,
name|jdbcUrl
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FakeDerby
name|fd
init|=
operator|new
name|FakeDerby
argument_list|()
decl_stmt|;
name|ObjectStore
name|objStore
init|=
operator|new
name|ObjectStore
argument_list|()
decl_stmt|;
name|Exception
name|savE
init|=
literal|null
decl_stmt|;
try|try
block|{
name|setInjectConnectFailure
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|objStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|savE
operator|=
name|e
expr_stmt|;
block|}
comment|/*      * A note on retries.      *      * We've configured a total of 4 attempts.      * 5 - 4 == 1 connect failure simulation count left after this.      */
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getInjectConnectFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|savE
argument_list|)
expr_stmt|;
name|setInjectConnectFailure
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|objStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getInjectConnectFailure
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

