begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrimaryKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|CatalogBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|SQLPrimaryKeyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestPrimaryKey
extends|extends
name|MetaStoreClientTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OTHER_DATABASE
init|=
literal|"test_constraints_other_database"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OTHER_CATALOG
init|=
literal|"test_constraints_other_catalog"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATABASE_IN_OTHER_CATALOG
init|=
literal|"test_constraints_database_in_other_catalog"
decl_stmt|;
specifier|private
specifier|final
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|Table
index|[]
name|testTables
init|=
operator|new
name|Table
index|[
literal|3
index|]
decl_stmt|;
specifier|private
name|Database
name|inOtherCatalog
decl_stmt|;
specifier|public
name|TestPrimaryKey
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
name|this
operator|.
name|metaStore
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Clean up the database
name|client
operator|.
name|dropDatabase
argument_list|(
name|OTHER_DATABASE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Drop every table in the default database
for|for
control|(
name|String
name|tableName
range|:
name|client
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
control|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropDatabase
argument_list|(
name|OTHER_CATALOG
argument_list|,
name|DATABASE_IN_OTHER_CATALOG
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|dropCatalog
argument_list|(
name|OTHER_CATALOG
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
comment|// Clean up trash
name|metaStore
operator|.
name|cleanWarehouseDirs
argument_list|()
expr_stmt|;
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|OTHER_CATALOG
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|OTHER_CATALOG
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
comment|// For this one don't specify a location to make sure it gets put in the catalog directory
name|inOtherCatalog
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|DATABASE_IN_OTHER_CATALOG
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|OTHER_CATALOG
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|0
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"test_table_1"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col2"
argument_list|,
literal|"varchar(32)"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|1
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table_2"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col2"
argument_list|,
literal|"varchar(32)"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|2
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|inOtherCatalog
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table_3"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col2"
argument_list|,
literal|"varchar(32)"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reload tables from the MetaStore
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testTables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|testTables
index|[
name|i
index|]
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|testTables
index|[
name|i
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|testTables
index|[
name|i
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
name|i
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|createGetDrop
parameter_list|()
throws|throws
name|TException
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
comment|// Make sure get on a table with no key returns empty list
name|PrimaryKeysRequest
name|rqst
init|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|fetched
init|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Single column unnamed primary key in default catalog and database
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
operator|new
name|SQLPrimaryKeyBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col1"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|addPrimaryKey
argument_list|(
name|pk
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|"_primary_key"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPk_name
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|table0PkName
init|=
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPk_name
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Drop a primary key
name|client
operator|.
name|dropConstraint
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table0PkName
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure I can add it back
name|client
operator|.
name|addPrimaryKey
argument_list|(
name|pk
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createGetDrop2Column
parameter_list|()
throws|throws
name|TException
block|{
comment|// Make sure get on a table with no key returns empty list
name|Table
name|table
init|=
name|testTables
index|[
literal|1
index|]
decl_stmt|;
name|PrimaryKeysRequest
name|rqst
init|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|fetched
init|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|constraintName
init|=
literal|"cgd2cpk"
decl_stmt|;
comment|// Multi-column.  Also covers table in non-default database
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
operator|new
name|SQLPrimaryKeyBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col1"
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col2"
argument_list|)
operator|.
name|setEnable
argument_list|(
literal|false
argument_list|)
operator|.
name|setConstraintName
argument_list|(
name|constraintName
argument_list|)
operator|.
name|setValidate
argument_list|(
literal|true
argument_list|)
operator|.
name|setRely
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|addPrimaryKey
argument_list|(
name|pk
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col2"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|constraintName
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPk_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPk_name
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPk_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Drop a named primary key
name|client
operator|.
name|dropConstraint
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|constraintName
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure I can add it back
name|client
operator|.
name|addPrimaryKey
argument_list|(
name|pk
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|inOtherCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|PrimaryKeysRequest
name|rqst
init|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|fetched
init|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|constraintName
init|=
literal|"ocpk"
decl_stmt|;
comment|// Table in non 'hive' catalog
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
operator|new
name|SQLPrimaryKeyBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|testTables
index|[
literal|2
index|]
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col1"
argument_list|)
operator|.
name|setConstraintName
argument_list|(
name|constraintName
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|addPrimaryKey
argument_list|(
name|pk
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|constraintName
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPk_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropConstraint
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
name|constraintName
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createTableWithConstraintsPk
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|constraintName
init|=
literal|"ctwcpk"
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"table_with_constraints"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col2"
argument_list|,
literal|"varchar(32)"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
operator|new
name|SQLPrimaryKeyBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col1"
argument_list|)
operator|.
name|setConstraintName
argument_list|(
name|constraintName
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTableWithConstraints
argument_list|(
name|table
argument_list|,
name|pk
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|PrimaryKeysRequest
name|rqst
init|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|fetched
init|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|constraintName
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPk_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropConstraint
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|constraintName
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createTableWithConstraintsPkInOtherCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"table_in_other_catalog_with_constraints"
argument_list|)
operator|.
name|inDb
argument_list|(
name|inOtherCatalog
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col2"
argument_list|,
literal|"varchar(32)"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
operator|new
name|SQLPrimaryKeyBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col1"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTableWithConstraints
argument_list|(
name|table
argument_list|,
name|pk
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|PrimaryKeysRequest
name|rqst
init|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|fetched
init|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|"_primary_key"
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPk_name
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tablePkName
init|=
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPk_name
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|fetched
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropConstraint
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tablePkName
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|fetched
operator|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|doubleAddPrimaryKey
parameter_list|()
throws|throws
name|TException
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
comment|// Make sure get on a table with no key returns empty list
name|PrimaryKeysRequest
name|rqst
init|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|fetched
init|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetched
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Single column unnamed primary key in default catalog and database
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
operator|new
name|SQLPrimaryKeyBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col1"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|addPrimaryKey
argument_list|(
name|pk
argument_list|)
expr_stmt|;
try|try
block|{
name|pk
operator|=
operator|new
name|SQLPrimaryKeyBuilder
argument_list|()
operator|.
name|onTable
argument_list|(
name|table
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col2"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|addPrimaryKey
argument_list|(
name|pk
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Primary key already exists for"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addNoSuchTable
parameter_list|()
throws|throws
name|TException
block|{
try|try
block|{
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
operator|new
name|SQLPrimaryKeyBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"nosuch"
argument_list|)
operator|.
name|addColumn
argument_list|(
literal|"col2"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|addPrimaryKey
argument_list|(
name|pk
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
decl||
name|TApplicationException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNoSuchTable
parameter_list|()
throws|throws
name|TException
block|{
name|PrimaryKeysRequest
name|rqst
init|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"nosuch"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pk
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNoSuchDb
parameter_list|()
throws|throws
name|TException
block|{
name|PrimaryKeysRequest
name|rqst
init|=
operator|new
name|PrimaryKeysRequest
argument_list|(
literal|"nosuch"
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pk
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNoSuchCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|PrimaryKeysRequest
name|rqst
init|=
operator|new
name|PrimaryKeysRequest
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setCatName
argument_list|(
literal|"nosuch"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
name|client
operator|.
name|getPrimaryKeys
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pk
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropNoSuchConstraint
parameter_list|()
throws|throws
name|TException
block|{
try|try
block|{
name|client
operator|.
name|dropConstraint
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|"nosuch"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
decl||
name|TApplicationException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropNoSuchTable
parameter_list|()
throws|throws
name|TException
block|{
try|try
block|{
name|client
operator|.
name|dropConstraint
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"nosuch"
argument_list|,
literal|"mypk"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
decl||
name|TApplicationException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropNoSuchDatabase
parameter_list|()
throws|throws
name|TException
block|{
try|try
block|{
name|client
operator|.
name|dropConstraint
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getCatName
argument_list|()
argument_list|,
literal|"nosuch"
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|"mypk"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
decl||
name|TApplicationException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropNoSuchCatalog
parameter_list|()
throws|throws
name|TException
block|{
try|try
block|{
name|client
operator|.
name|dropConstraint
argument_list|(
literal|"nosuch"
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|"nosuch"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
decl||
name|TApplicationException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
block|}
comment|// TODO no fk across catalogs
block|}
end_class

end_unit

