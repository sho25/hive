begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test the Deadline class used for long running requests.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestDeadline
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDeadline
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|long
name|timeout
init|=
literal|1000
decl_stmt|;
specifier|private
name|long
name|resetTimeout
init|=
literal|200
decl_stmt|;
specifier|private
name|long
name|duration
init|=
literal|500
decl_stmt|;
specifier|private
name|boolean
name|isFailed
decl_stmt|;
specifier|private
name|String
name|errorMsg
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testDeadline
parameter_list|()
throws|throws
name|Exception
block|{
name|isFailed
operator|=
literal|false
expr_stmt|;
name|errorMsg
operator|=
literal|""
expr_stmt|;
name|Thread
name|threadTimeout
init|=
operator|new
name|Thread
argument_list|(
name|createRunnable
argument_list|()
argument_list|)
decl_stmt|;
name|threadTimeout
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threadTimeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|threadTimeout
operator|.
name|join
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFailed
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Runnable
name|createRunnable
parameter_list|()
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Deadline
operator|.
name|registerIfNot
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
try|try
block|{
comment|// normal
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Deadline
operator|.
name|checkTimeout
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|failInThread
argument_list|(
literal|"should not timeout"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
comment|// normal. Check stopTimer() works.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Deadline
operator|.
name|checkTimeout
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|failInThread
argument_list|(
literal|"should not timeout"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
comment|// reset
name|Deadline
operator|.
name|resetTimeout
argument_list|(
name|resetTimeout
argument_list|)
expr_stmt|;
comment|// timeout
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Deadline
operator|.
name|checkTimeout
argument_list|()
expr_stmt|;
name|failInThread
argument_list|(
literal|"should timeout."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DeadlineException
condition|)
block|{
name|Deadline
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|failInThread
argument_list|(
literal|"new MetaException failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|Deadline
operator|.
name|getCurrentDeadline
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|failInThread
argument_list|(
literal|"the threadlocal object should be removed after timeout."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|failInThread
argument_list|(
literal|"error happens in start, end, or reset. Check the exception."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
specifier|private
name|void
name|start
parameter_list|()
throws|throws
name|MetaException
block|{
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|failInThread
argument_list|(
literal|"Odd. Sleeping thread is interrupted."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|failInThread
parameter_list|(
name|String
name|msg
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|isFailed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|errorMsg
operator|=
name|msg
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|errorMsg
operator|=
name|msg
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

