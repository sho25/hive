begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartitionDropOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Tests for dropping partitions.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestDropPartitions
block|{
comment|// Needed until there is no junit release with @BeforeParam, @AfterParam (junit 4.13)
comment|// https://github.com/junit-team/junit4/commit/1bf8438b65858565dbb64736bfe13aae9cfc1b5a
comment|// Then we should remove our own copy
specifier|private
specifier|static
name|Set
argument_list|<
name|AbstractMetaStoreService
argument_list|>
name|metaStoreServices
init|=
literal|null
decl_stmt|;
specifier|private
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"test_drop_part_db"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"test_drop_part_table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_COL_TYPE
init|=
literal|"string"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|YEAR_COL_NAME
init|=
literal|"year"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MONTH_COL_NAME
init|=
literal|"month"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|short
name|MAX
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Partition
index|[]
name|PARTITIONS
init|=
operator|new
name|Partition
index|[
literal|3
index|]
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|getMetaStoreToTest
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|MetaStoreFactoryForTests
operator|.
name|getMetaStores
argument_list|()
decl_stmt|;
name|metaStoreServices
operator|=
name|result
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|test
lambda|->
operator|(
name|AbstractMetaStoreService
operator|)
name|test
index|[
literal|1
index|]
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|TestDropPartitions
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
name|Map
argument_list|<
name|MetastoreConf
operator|.
name|ConfVars
argument_list|,
name|String
argument_list|>
name|msConf
init|=
operator|new
name|HashMap
argument_list|<
name|MetastoreConf
operator|.
name|ConfVars
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Enable trash, so it can be tested
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraConf
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|extraConf
operator|.
name|put
argument_list|(
literal|"fs.trash.checkpoint.interval"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
comment|// FS_TRASH_CHECKPOINT_INTERVAL_KEY
name|extraConf
operator|.
name|put
argument_list|(
literal|"fs.trash.interval"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
comment|// FS_TRASH_INTERVAL_KEY (hadoop-2)
name|this
operator|.
name|metaStore
operator|.
name|start
argument_list|(
name|msConf
argument_list|,
name|extraConf
argument_list|)
expr_stmt|;
block|}
comment|// Needed until there is no junit release with @BeforeParam, @AfterParam (junit 4.13)
comment|// https://github.com/junit-team/junit4/commit/1bf8438b65858565dbb64736bfe13aae9cfc1b5a
comment|// Then we should move this to @AfterParam
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopMetaStores
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|AbstractMetaStoreService
name|metaStoreService
range|:
name|metaStoreServices
control|)
block|{
name|metaStoreService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Clean up the database
name|client
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|metaStore
operator|.
name|cleanWarehouseDirs
argument_list|()
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
comment|// Create test tables with 3 partitions
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|PARTITIONS
index|[
literal|0
index|]
operator|=
name|createPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|)
expr_stmt|;
name|PARTITIONS
index|[
literal|1
index|]
operator|=
name|createPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"april"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|)
expr_stmt|;
name|PARTITIONS
index|[
literal|2
index|]
operator|=
name|createPartition
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2018"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// Tests for dropPartition(String db_name, String tbl_name, List<String> part_vals,
comment|// boolean deleteData) method
annotation|@
name|Test
specifier|public
name|void
name|testDropPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|dropSuccessful
init|=
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|PARTITIONS
index|[
literal|0
index|]
operator|.
name|getValues
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dropSuccessful
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|remainingPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|1
index|]
argument_list|,
name|PARTITIONS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|checkPartitionsAfterDelete
argument_list|(
name|TABLE_NAME
argument_list|,
name|droppedPartitions
argument_list|,
name|remainingPartitions
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionDeleteData
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|PARTITIONS
index|[
literal|0
index|]
operator|.
name|getValues
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|remainingPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|1
index|]
argument_list|,
name|PARTITIONS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|checkPartitionsAfterDelete
argument_list|(
name|TABLE_NAME
argument_list|,
name|droppedPartitions
argument_list|,
name|remainingPartitions
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionDeleteParentDir
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|PARTITIONS
index|[
literal|0
index|]
operator|.
name|getValues
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|PARTITIONS
index|[
literal|1
index|]
operator|.
name|getValues
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|0
index|]
argument_list|,
name|PARTITIONS
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|remainingPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|checkPartitionsAfterDelete
argument_list|(
name|TABLE_NAME
argument_list|,
name|droppedPartitions
argument_list|,
name|remainingPartitions
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Path
name|parentPath
init|=
operator|new
name|Path
argument_list|(
name|PARTITIONS
index|[
literal|0
index|]
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The parent path '"
operator|+
name|parentPath
operator|.
name|toString
argument_list|()
operator|+
literal|"' should not exist."
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|parentPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionDeleteDataPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"purge_test"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"auto.purge"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|tableName
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
name|tableParams
argument_list|)
expr_stmt|;
name|Partition
name|partition1
init|=
name|createPartition
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|createPartition
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2018"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|partition1
operator|.
name|getValues
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|remainingPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition2
argument_list|)
decl_stmt|;
name|checkPartitionsAfterDelete
argument_list|(
name|tableName
argument_list|,
name|droppedPartitions
argument_list|,
name|remainingPartitions
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionArchivedPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|originalLocation
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
operator|+
literal|"/2016_may"
decl_stmt|;
name|String
name|location
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
operator|+
literal|"/year=2016/month=may"
decl_stmt|;
name|metaStore
operator|.
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
name|originalLocation
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|partParams
operator|.
name|put
argument_list|(
literal|"is_archived"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|partParams
operator|.
name|put
argument_list|(
literal|"original_location"
argument_list|,
name|originalLocation
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|createPartition
argument_list|(
name|TABLE_NAME
argument_list|,
name|location
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2016"
argument_list|,
literal|"may"
argument_list|)
argument_list|,
name|getYearAndMonthPartCols
argument_list|()
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2016"
argument_list|,
literal|"may"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionsAfterDelete
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|partitionsAfterDelete
operator|.
name|contains
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The location '"
operator|+
name|location
operator|+
literal|"' should exist."
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|location
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The original location '"
operator|+
name|originalLocation
operator|+
literal|"' should not exist."
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|originalLocation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionExternalTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"external_table"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"auto.purge"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|tableName
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
name|tableParams
argument_list|)
expr_stmt|;
name|String
name|location
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/externalTable/year=2017"
decl_stmt|;
name|Partition
name|partition
init|=
name|createPartition
argument_list|(
name|tableName
argument_list|,
name|location
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionsAfterDelete
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partitionsAfterDelete
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The location '"
operator|+
name|location
operator|+
literal|"' should exist."
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|location
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionNonExistingDB
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
literal|"nonexistingdb"
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionNonExistingTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
literal|"nonexistingtable"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionNullDB
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
literal|null
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionNullTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionEmptyDB
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
literal|""
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionEmptyTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
literal|""
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionNullPartVals
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
literal|null
decl_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|partVals
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionEmptyPartVals
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|partVals
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionNonExistingPartVals
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"may"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionNullVal
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|partVals
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|partVals
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"NullPointerException or NoSuchObjectException is expected to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// TODO: Should not throw NPE.
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionEmptyVal
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|partVals
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|partVals
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionMoreValsInList
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|,
literal|"march"
argument_list|,
literal|"12:00"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionLessValsInList
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Tests for dropPartition(String db_name, String tbl_name, List<String> part_vals,
comment|// PartitionDropOptions options) method
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionNotDeleteData
parameter_list|()
throws|throws
name|Exception
block|{
name|PartitionDropOptions
name|partDropOptions
init|=
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
decl_stmt|;
name|partDropOptions
operator|.
name|deleteData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|partDropOptions
operator|.
name|purgeData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|PARTITIONS
index|[
literal|0
index|]
operator|.
name|getValues
argument_list|()
argument_list|,
name|partDropOptions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|remainingPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|1
index|]
argument_list|,
name|PARTITIONS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|checkPartitionsAfterDelete
argument_list|(
name|TABLE_NAME
argument_list|,
name|droppedPartitions
argument_list|,
name|remainingPartitions
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionDeleteDataNoPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|PartitionDropOptions
name|partDropOptions
init|=
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
decl_stmt|;
name|partDropOptions
operator|.
name|deleteData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|partDropOptions
operator|.
name|purgeData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|PARTITIONS
index|[
literal|0
index|]
operator|.
name|getValues
argument_list|()
argument_list|,
name|partDropOptions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|remainingPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|1
index|]
argument_list|,
name|PARTITIONS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|checkPartitionsAfterDelete
argument_list|(
name|TABLE_NAME
argument_list|,
name|droppedPartitions
argument_list|,
name|remainingPartitions
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionDeleteDataAndPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|PartitionDropOptions
name|partDropOptions
init|=
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
decl_stmt|;
name|partDropOptions
operator|.
name|deleteData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|partDropOptions
operator|.
name|purgeData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|PARTITIONS
index|[
literal|0
index|]
operator|.
name|getValues
argument_list|()
argument_list|,
name|partDropOptions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|remainingPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|1
index|]
argument_list|,
name|PARTITIONS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|checkPartitionsAfterDelete
argument_list|(
name|TABLE_NAME
argument_list|,
name|droppedPartitions
argument_list|,
name|remainingPartitions
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionDeleteDataAndPurgeExternalTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"external_table"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|tableName
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
name|tableParams
argument_list|)
expr_stmt|;
name|String
name|location
init|=
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/externalTable/year=2017"
decl_stmt|;
name|Partition
name|partition
init|=
name|createPartition
argument_list|(
name|tableName
argument_list|,
name|location
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PartitionDropOptions
name|partDropOptions
init|=
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
decl_stmt|;
name|partDropOptions
operator|.
name|deleteData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|partDropOptions
operator|.
name|purgeData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|partDropOptions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionsAfterDrop
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partitionsAfterDrop
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The location '"
operator|+
name|location
operator|+
literal|"' should exist."
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|location
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionNotDeleteDataPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|PartitionDropOptions
name|partDropOptions
init|=
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
decl_stmt|;
name|partDropOptions
operator|.
name|deleteData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|partDropOptions
operator|.
name|purgeData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|PARTITIONS
index|[
literal|0
index|]
operator|.
name|getValues
argument_list|()
argument_list|,
name|partDropOptions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|remainingPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|1
index|]
argument_list|,
name|PARTITIONS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|checkPartitionsAfterDelete
argument_list|(
name|TABLE_NAME
argument_list|,
name|droppedPartitions
argument_list|,
name|remainingPartitions
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionPurgeSetInTable
parameter_list|()
throws|throws
name|Exception
block|{
name|PartitionDropOptions
name|partDropOptions
init|=
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
decl_stmt|;
name|partDropOptions
operator|.
name|deleteData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|partDropOptions
operator|.
name|purgeData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
literal|"purge_test"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"auto.purge"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|tableName
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
name|tableParams
argument_list|)
expr_stmt|;
name|Partition
name|partition1
init|=
name|createPartition
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2017"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|createPartition
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"2018"
argument_list|)
argument_list|,
name|getYearPartCol
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|partition1
operator|.
name|getValues
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|remainingPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition2
argument_list|)
decl_stmt|;
name|checkPartitionsAfterDelete
argument_list|(
name|tableName
argument_list|,
name|droppedPartitions
argument_list|,
name|remainingPartitions
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionNullPartDropOptions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: This should not throw NPE
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|PARTITIONS
index|[
literal|0
index|]
operator|.
name|getValues
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Tests for dropPartition(String db_name, String tbl_name, String name,
comment|// boolean deleteData) method
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionByName
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017/month=march"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|remainingPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|1
index|]
argument_list|,
name|PARTITIONS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|checkPartitionsAfterDelete
argument_list|(
name|TABLE_NAME
argument_list|,
name|droppedPartitions
argument_list|,
name|remainingPartitions
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionByNameLessValue
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"NoSuchObjectException should be thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|remainingPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|0
index|]
argument_list|,
name|PARTITIONS
index|[
literal|1
index|]
argument_list|,
name|PARTITIONS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|checkPartitionsAfterDelete
argument_list|(
name|TABLE_NAME
argument_list|,
name|droppedPartitions
argument_list|,
name|remainingPartitions
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartitionByNameMoreValue
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The extra non existing values will be ignored.
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017/month=march/day=10"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|remainingPartitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PARTITIONS
index|[
literal|1
index|]
argument_list|,
name|PARTITIONS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|checkPartitionsAfterDelete
argument_list|(
name|TABLE_NAME
argument_list|,
name|droppedPartitions
argument_list|,
name|remainingPartitions
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionByNameNonExistingPart
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017/month=may"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionByNameNonExistingTable
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
literal|"nonexistingtable"
argument_list|,
literal|"year=2017/month=may"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionByNameNonExistingDB
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
literal|"nonexistingdb"
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017/month=may"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionByNameInvalidName
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"ev=2017/honap=march"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionByNameInvalidNameFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"invalidnameformat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionByNameInvalidNameNoValues
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=/month="
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionByNameNullName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropPartitionByNameEmptyName
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|dropPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Helper methods
specifier|private
name|Table
name|createTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|setPartCols
argument_list|(
name|partCols
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
operator|.
name|setTableParams
argument_list|(
name|tableParams
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|private
name|Partition
name|createPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|)
throws|throws
name|Exception
block|{
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setValues
argument_list|(
name|values
argument_list|)
operator|.
name|setCols
argument_list|(
name|partCols
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|partition
operator|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|values
argument_list|)
expr_stmt|;
return|return
name|partition
return|;
block|}
specifier|private
name|Partition
name|createPartition
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|location
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partParams
parameter_list|)
throws|throws
name|Exception
block|{
name|Partition
name|partition
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setValues
argument_list|(
name|values
argument_list|)
operator|.
name|setCols
argument_list|(
name|partCols
argument_list|)
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
operator|.
name|setPartParams
argument_list|(
name|partParams
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|partition
operator|=
name|client
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|values
argument_list|)
expr_stmt|;
return|return
name|partition
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getYearAndMonthPartCols
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"year part col"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|MONTH_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"month part col"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cols
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getYearPartCol
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"year part col"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cols
return|;
block|}
specifier|private
name|void
name|checkPartitionsAfterDelete
parameter_list|(
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|existingPartitions
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|purge
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table "
operator|+
name|tableName
operator|+
literal|" has "
operator|+
name|partitions
operator|.
name|size
argument_list|()
operator|+
literal|" partitions, but it should have "
operator|+
name|existingPartitions
operator|.
name|size
argument_list|()
argument_list|,
name|existingPartitions
operator|.
name|size
argument_list|()
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|droppedPartition
range|:
name|droppedPartitions
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|partitions
operator|.
name|contains
argument_list|(
name|droppedPartition
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|partitionPath
init|=
operator|new
name|Path
argument_list|(
name|droppedPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteData
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The location '"
operator|+
name|partitionPath
operator|.
name|toString
argument_list|()
operator|+
literal|"' should not exist."
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|partitionPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|purge
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The location '"
operator|+
name|partitionPath
operator|.
name|toString
argument_list|()
operator|+
literal|"' should not exist in the trash."
argument_list|,
name|metaStore
operator|.
name|isPathExistsInTrash
argument_list|(
name|partitionPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The location '"
operator|+
name|partitionPath
operator|.
name|toString
argument_list|()
operator|+
literal|"' should exist in the trash."
argument_list|,
name|metaStore
operator|.
name|isPathExistsInTrash
argument_list|(
name|partitionPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The location '"
operator|+
name|partitionPath
operator|.
name|toString
argument_list|()
operator|+
literal|"' should exist."
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|partitionPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Partition
name|existingPartition
range|:
name|existingPartitions
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partitions
operator|.
name|contains
argument_list|(
name|existingPartition
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|partitionPath
init|=
operator|new
name|Path
argument_list|(
name|existingPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The location '"
operator|+
name|partitionPath
operator|.
name|toString
argument_list|()
operator|+
literal|"' should exist."
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|partitionPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

