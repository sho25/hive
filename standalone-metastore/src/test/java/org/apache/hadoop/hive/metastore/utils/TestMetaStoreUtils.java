begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMetaStoreUtils
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTrimMapNullsXform
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"akey"
argument_list|,
literal|"aval"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blank"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"null"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|xformed
init|=
name|MetaStoreUtils
operator|.
name|trimMapNulls
argument_list|(
name|m
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|xformed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|xformed
operator|.
name|containsKey
argument_list|(
literal|"akey"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|xformed
operator|.
name|containsKey
argument_list|(
literal|"blank"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|xformed
operator|.
name|containsKey
argument_list|(
literal|"null"
argument_list|)
operator|)
assert|;
name|assertEquals
argument_list|(
literal|"aval"
argument_list|,
name|xformed
operator|.
name|get
argument_list|(
literal|"akey"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|xformed
operator|.
name|get
argument_list|(
literal|"blank"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|xformed
operator|.
name|get
argument_list|(
literal|"null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTrimMapNullsPrune
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"akey"
argument_list|,
literal|"aval"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blank"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"null"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pruned
init|=
name|MetaStoreUtils
operator|.
name|trimMapNulls
argument_list|(
name|m
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pruned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|pruned
operator|.
name|containsKey
argument_list|(
literal|"akey"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|pruned
operator|.
name|containsKey
argument_list|(
literal|"blank"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
operator|!
name|pruned
operator|.
name|containsKey
argument_list|(
literal|"null"
argument_list|)
operator|)
assert|;
name|assertEquals
argument_list|(
literal|"aval"
argument_list|,
name|pruned
operator|.
name|get
argument_list|(
literal|"akey"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|pruned
operator|.
name|get
argument_list|(
literal|"blank"
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
operator|!
name|pruned
operator|.
name|containsValue
argument_list|(
literal|null
argument_list|)
operator|)
assert|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testcolumnsIncludedByNameType
parameter_list|()
block|{
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"string"
argument_list|,
literal|"col1 comment"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col1a
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"string"
argument_list|,
literal|"col1 but with a different comment"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"string"
argument_list|,
literal|"col2 comment"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col3
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
literal|"string"
argument_list|,
literal|"col3 comment"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col1a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col2
argument_list|,
name|col1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|,
name|col3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col3
argument_list|,
name|col2
argument_list|,
name|col1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|columnsIncludedByNameType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

