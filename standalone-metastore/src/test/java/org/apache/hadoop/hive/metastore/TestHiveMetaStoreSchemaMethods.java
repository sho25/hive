begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FindSchemasByColsResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FindSchemasByColsRqst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ISchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaCompatibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaValidation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaVersionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaVersionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerdeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|CatalogBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|ISchemaBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|SchemaVersionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddSchemaVersionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterISchemaEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterSchemaVersionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateISchemaEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropISchemaEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropSchemaVersionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreEventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|EventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|HadoopThriftAuthBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_comment
comment|// This does the testing using a remote metastore, as that finds more issues in thrift
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHiveMetaStoreSchemaMethods
block|{
specifier|private
specifier|static
name|Map
argument_list|<
name|EventMessage
operator|.
name|EventType
argument_list|,
name|Integer
argument_list|>
name|events
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|EventMessage
operator|.
name|EventType
argument_list|,
name|Integer
argument_list|>
name|transactionalEvents
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|PreEventContext
operator|.
name|PreEventType
argument_list|,
name|Integer
argument_list|>
name|preEvents
decl_stmt|;
specifier|private
specifier|static
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startMetastore
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setClass
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|EVENT_LISTENERS
argument_list|,
name|SchemaEventListener
operator|.
name|class
argument_list|,
name|MetaStoreEventListener
operator|.
name|class
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setClass
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|TRANSACTIONAL_EVENT_LISTENERS
argument_list|,
name|TransactionalSchemaEventListener
operator|.
name|class
argument_list|,
name|MetaStoreEventListener
operator|.
name|class
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setClass
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|PRE_EVENT_LISTENERS
argument_list|,
name|SchemaPreEventListener
operator|.
name|class
argument_list|,
name|MetaStorePreEventListener
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|MetaStoreTestUtils
operator|.
name|startMetaStoreWithRetry
argument_list|(
name|HadoopThriftAuthBridge
operator|.
name|getBridge
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|THRIFT_URIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|port
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|newMaps
parameter_list|()
block|{
name|events
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|transactionalEvents
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|preEvents
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getNonExistentSchema
parameter_list|()
throws|throws
name|TException
block|{
name|client
operator|.
name|getISchema
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"no.such.schema"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|iSchema
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|String
name|schemaGroup
init|=
literal|"group1"
decl_stmt|;
name|String
name|description
init|=
literal|"This is a description"
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|setCompatibility
argument_list|(
name|SchemaCompatibility
operator|.
name|FORWARD
argument_list|)
operator|.
name|setValidationLevel
argument_list|(
name|SchemaValidation
operator|.
name|LATEST
argument_list|)
operator|.
name|setCanEvolve
argument_list|(
literal|false
argument_list|)
operator|.
name|setSchemaGroup
argument_list|(
name|schemaGroup
argument_list|)
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|CREATE_ISCHEMA
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|CREATE_ISCHEMA
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|CREATE_ISCHEMA
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|=
name|client
operator|.
name|getISchema
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|READ_ISCHEMA
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|,
name|schema
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|schema
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schema
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaCompatibility
operator|.
name|FORWARD
argument_list|,
name|schema
operator|.
name|getCompatibility
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaValidation
operator|.
name|LATEST
argument_list|,
name|schema
operator|.
name|getValidationLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|schema
operator|.
name|isCanEvolve
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaGroup
argument_list|,
name|schema
operator|.
name|getSchemaGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|schema
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|schemaGroup
operator|=
literal|"new group"
expr_stmt|;
name|description
operator|=
literal|"new description"
expr_stmt|;
name|schema
operator|.
name|setCompatibility
argument_list|(
name|SchemaCompatibility
operator|.
name|BOTH
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setValidationLevel
argument_list|(
name|SchemaValidation
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setCanEvolve
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setSchemaGroup
argument_list|(
name|schemaGroup
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|client
operator|.
name|alterISchema
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|ALTER_ISCHEMA
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_ISCHEMA
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_ISCHEMA
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|=
name|client
operator|.
name|getISchema
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|READ_ISCHEMA
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|,
name|schema
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaCompatibility
operator|.
name|BOTH
argument_list|,
name|schema
operator|.
name|getCompatibility
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaValidation
operator|.
name|ALL
argument_list|,
name|schema
operator|.
name|getValidationLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schema
operator|.
name|isCanEvolve
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaGroup
argument_list|,
name|schema
operator|.
name|getSchemaGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|schema
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropISchema
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|DROP_ISCHEMA
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|DROP_ISCHEMA
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|DROP_ISCHEMA
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getISchema
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// all good
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|iSchemaOtherDatabase
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|catName
init|=
literal|"other_cat"
decl_stmt|;
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|catName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"other_db"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|String
name|schemaGroup
init|=
literal|"group1"
decl_stmt|;
name|String
name|description
init|=
literal|"This is a description"
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setCompatibility
argument_list|(
name|SchemaCompatibility
operator|.
name|FORWARD
argument_list|)
operator|.
name|setValidationLevel
argument_list|(
name|SchemaValidation
operator|.
name|LATEST
argument_list|)
operator|.
name|setCanEvolve
argument_list|(
literal|false
argument_list|)
operator|.
name|setSchemaGroup
argument_list|(
name|schemaGroup
argument_list|)
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|=
name|client
operator|.
name|getISchema
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|,
name|schema
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|catName
argument_list|,
name|schema
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|schema
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaCompatibility
operator|.
name|FORWARD
argument_list|,
name|schema
operator|.
name|getCompatibility
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaValidation
operator|.
name|LATEST
argument_list|,
name|schema
operator|.
name|getValidationLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|schema
operator|.
name|isCanEvolve
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaGroup
argument_list|,
name|schema
operator|.
name|getSchemaGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|schema
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|schemaGroup
operator|=
literal|"new group"
expr_stmt|;
name|description
operator|=
literal|"new description"
expr_stmt|;
name|schema
operator|.
name|setCompatibility
argument_list|(
name|SchemaCompatibility
operator|.
name|BOTH
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setValidationLevel
argument_list|(
name|SchemaValidation
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setCanEvolve
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setSchemaGroup
argument_list|(
name|schemaGroup
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|client
operator|.
name|alterISchema
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|=
name|client
operator|.
name|getISchema
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|,
name|schema
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|catName
argument_list|,
name|schema
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|schema
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaCompatibility
operator|.
name|BOTH
argument_list|,
name|schema
operator|.
name|getCompatibility
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaValidation
operator|.
name|ALL
argument_list|,
name|schema
operator|.
name|getValidationLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schema
operator|.
name|isCanEvolve
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaGroup
argument_list|,
name|schema
operator|.
name|getSchemaGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|schema
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropISchema
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getISchema
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// all good
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|schemaWithInvalidDatabase
parameter_list|()
throws|throws
name|TException
block|{
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"thisSchemaDoesntHaveADb"
argument_list|)
operator|.
name|setDbName
argument_list|(
literal|"no.such.database"
argument_list|)
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|schemaAlreadyExists
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|HIVE
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaType
operator|.
name|HIVE
argument_list|,
name|schema
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaCompatibility
operator|.
name|BACKWARD
argument_list|,
name|schema
operator|.
name|getCompatibility
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaValidation
operator|.
name|ALL
argument_list|,
name|schema
operator|.
name|getValidationLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schema
operator|.
name|isCanEvolve
argument_list|()
argument_list|)
expr_stmt|;
comment|// This second attempt to create it should throw
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|alterNonExistentSchema
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|HIVE
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|setDescription
argument_list|(
literal|"a new description"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|alterISchema
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|dropNonExistentSchema
parameter_list|()
throws|throws
name|TException
block|{
name|client
operator|.
name|dropISchema
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"no_such_schema"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|createVersionOfNonExistentSchema
parameter_list|()
throws|throws
name|TException
block|{
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|setSchemaName
argument_list|(
literal|"noSchemaOfThisNameExists"
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSchemaVersion
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|int
name|version
init|=
literal|1
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|String
name|description
init|=
literal|"very descriptive"
decl_stmt|;
name|String
name|schemaText
init|=
literal|"this should look like json, but oh well"
decl_stmt|;
name|String
name|fingerprint
init|=
literal|"this should be an md5 string"
decl_stmt|;
name|String
name|versionName
init|=
literal|"why would I name a version?"
decl_stmt|;
name|long
name|creationTime
init|=
literal|10
decl_stmt|;
name|String
name|serdeName
init|=
literal|"serde_for_schema37"
decl_stmt|;
name|String
name|serializer
init|=
literal|"org.apache.hadoop.hive.metastore.test.Serializer"
decl_stmt|;
name|String
name|deserializer
init|=
literal|"org.apache.hadoop.hive.metastore.test.Deserializer"
decl_stmt|;
name|String
name|serdeDescription
init|=
literal|"how do you describe a serde?"
decl_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
name|ColumnType
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
operator|.
name|setCreatedAt
argument_list|(
name|creationTime
argument_list|)
operator|.
name|setState
argument_list|(
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|)
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
operator|.
name|setSchemaText
argument_list|(
name|schemaText
argument_list|)
operator|.
name|setFingerprint
argument_list|(
name|fingerprint
argument_list|)
operator|.
name|setName
argument_list|(
name|versionName
argument_list|)
operator|.
name|setSerdeName
argument_list|(
name|serdeName
argument_list|)
operator|.
name|setSerdeSerializerClass
argument_list|(
name|serializer
argument_list|)
operator|.
name|setSerdeDeserializerClass
argument_list|(
name|deserializer
argument_list|)
operator|.
name|setSerdeDescription
argument_list|(
name|serdeDescription
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|ADD_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ADD_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ADD_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|version
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|creationTime
argument_list|,
name|schemaVersion
operator|.
name|getCreatedAt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|,
name|schemaVersion
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|schemaVersion
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaText
argument_list|,
name|schemaVersion
operator|.
name|getSchemaText
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fingerprint
argument_list|,
name|schemaVersion
operator|.
name|getFingerprint
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|versionName
argument_list|,
name|schemaVersion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serdeName
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serializer
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getSerializerClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|deserializer
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getDeserializerClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serdeDescription
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schemaVersion
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|schemaVersion
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|FLOAT_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|READ_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|DROP_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|DROP_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|DROP_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// all good
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSchemaVersionOtherDb
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|catName
init|=
literal|"other_cat_for_schema_version"
decl_stmt|;
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|catName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"other_db_for_schema_version"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|int
name|version
init|=
literal|1
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|String
name|description
init|=
literal|"very descriptive"
decl_stmt|;
name|String
name|schemaText
init|=
literal|"this should look like json, but oh well"
decl_stmt|;
name|String
name|fingerprint
init|=
literal|"this should be an md5 string"
decl_stmt|;
name|String
name|versionName
init|=
literal|"why would I name a version?"
decl_stmt|;
name|long
name|creationTime
init|=
literal|10
decl_stmt|;
name|String
name|serdeName
init|=
literal|"serde_for_schema37"
decl_stmt|;
name|String
name|serializer
init|=
literal|"org.apache.hadoop.hive.metastore.test.Serializer"
decl_stmt|;
name|String
name|deserializer
init|=
literal|"org.apache.hadoop.hive.metastore.test.Deserializer"
decl_stmt|;
name|String
name|serdeDescription
init|=
literal|"how do you describe a serde?"
decl_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
name|ColumnType
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
operator|.
name|setCreatedAt
argument_list|(
name|creationTime
argument_list|)
operator|.
name|setState
argument_list|(
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|)
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
operator|.
name|setSchemaText
argument_list|(
name|schemaText
argument_list|)
operator|.
name|setFingerprint
argument_list|(
name|fingerprint
argument_list|)
operator|.
name|setName
argument_list|(
name|versionName
argument_list|)
operator|.
name|setSerdeName
argument_list|(
name|serdeName
argument_list|)
operator|.
name|setSerdeSerializerClass
argument_list|(
name|serializer
argument_list|)
operator|.
name|setSerdeDeserializerClass
argument_list|(
name|deserializer
argument_list|)
operator|.
name|setSerdeDescription
argument_list|(
name|serdeDescription
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|catName
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|version
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|creationTime
argument_list|,
name|schemaVersion
operator|.
name|getCreatedAt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|,
name|schemaVersion
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|schemaVersion
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaText
argument_list|,
name|schemaVersion
operator|.
name|getSchemaText
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fingerprint
argument_list|,
name|schemaVersion
operator|.
name|getFingerprint
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|versionName
argument_list|,
name|schemaVersion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serdeName
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serializer
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getSerializerClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|deserializer
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getDeserializerClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serdeDescription
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schemaVersion
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|schemaVersion
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|FLOAT_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|READ_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropSchemaVersion
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|,
name|version
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// all good
block|}
block|}
comment|// Test that adding multiple versions of the same schema
annotation|@
name|Test
specifier|public
name|void
name|multipleSchemaVersions
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|2
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|3
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"c"
argument_list|,
name|ColumnType
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|ADD_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ADD_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ADD_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaLatestVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schemaVersion
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|schemaVersion
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|READ_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SchemaVersion
argument_list|>
name|versions
init|=
name|client
operator|.
name|getSchemaAllVersions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|READ_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|versions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|versions
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|SchemaVersion
operator|::
name|getVersion
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|=
name|versions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCols
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|=
name|versions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCols
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnType
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|,
name|cols
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|nonExistentSchemaVersion
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|schemaVersionBogusDb
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"bogus"
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|schemaVersionBogusCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|client
operator|.
name|getSchemaVersion
argument_list|(
literal|"bogus"
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|nonExistentSchemaVersionButOtherVersionsExist
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
name|ColumnType
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getLatestSchemaButNoVersions
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|client
operator|.
name|getSchemaLatestVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getLatestSchemaNoSuchSchema
parameter_list|()
throws|throws
name|TException
block|{
name|client
operator|.
name|getSchemaLatestVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"no.such.schema.with.this.name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|latestSchemaVersionBogusDb
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|client
operator|.
name|getSchemaLatestVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"bogus"
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|latestSchemaVersionBogusCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|client
operator|.
name|getSchemaLatestVersion
argument_list|(
literal|"bogus"
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getAllSchemaButNoVersions
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|client
operator|.
name|getSchemaAllVersions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getAllSchemaNoSuchSchema
parameter_list|()
throws|throws
name|TException
block|{
name|client
operator|.
name|getSchemaAllVersions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"no.such.schema.with.this.name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|allSchemaVersionBogusDb
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|client
operator|.
name|getSchemaAllVersions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"bogus"
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|allSchemaVersionBogusCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|client
operator|.
name|getSchemaAllVersions
argument_list|(
literal|"bogus"
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|addDuplicateSchemaVersion
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|int
name|version
init|=
literal|1
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
name|ColumnType
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|mapSerDeNoSuchSchema
parameter_list|()
throws|throws
name|TException
block|{
name|SerDeInfo
name|serDeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
name|uniqueSerdeName
argument_list|()
argument_list|,
literal|"lib"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|mapSchemaVersionToSerde
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|uniqueSchemaName
argument_list|()
argument_list|,
literal|1
argument_list|,
name|serDeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|mapSerDeNoSuchSchemaVersion
parameter_list|()
throws|throws
name|TException
block|{
name|SerDeInfo
name|serDeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
name|uniqueSerdeName
argument_list|()
argument_list|,
literal|"lib"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|uniqueSchemaName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|client
operator|.
name|mapSchemaVersionToSerde
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
literal|3
argument_list|,
name|serDeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|mapNonExistentSerdeToSchemaVersion
parameter_list|()
throws|throws
name|TException
block|{
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|uniqueSchemaName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"x"
argument_list|,
name|ColumnType
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|client
operator|.
name|mapSchemaVersionToSerde
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|,
name|uniqueSerdeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mapSerdeToSchemaVersion
parameter_list|()
throws|throws
name|TException
block|{
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|uniqueSchemaName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
comment|// Create schema with no serde, then map it
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"x"
argument_list|,
name|ColumnType
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serDeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
name|uniqueSerdeName
argument_list|()
argument_list|,
literal|"lib"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|addSerDe
argument_list|(
name|serDeInfo
argument_list|)
expr_stmt|;
name|client
operator|.
name|mapSchemaVersionToSerde
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|,
name|serDeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serDeInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create schema with a serde, then remap it
name|String
name|serDeName
init|=
name|uniqueSerdeName
argument_list|()
decl_stmt|;
name|schemaVersion
operator|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|2
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"x"
argument_list|,
name|ColumnType
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
operator|.
name|setSerdeName
argument_list|(
name|serDeName
argument_list|)
operator|.
name|setSerdeLib
argument_list|(
literal|"x"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serDeName
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serDeInfo
operator|=
operator|new
name|SerDeInfo
argument_list|(
name|uniqueSerdeName
argument_list|()
argument_list|,
literal|"y"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|addSerDe
argument_list|(
name|serDeInfo
argument_list|)
expr_stmt|;
name|client
operator|.
name|mapSchemaVersionToSerde
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|,
name|serDeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serDeInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mapSerdeToSchemaVersionOtherDb
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|catName
init|=
literal|"other_cat_for_map_to"
decl_stmt|;
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|catName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"map_other_db"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setName
argument_list|(
name|uniqueSchemaName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
comment|// Create schema with no serde, then map it
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"x"
argument_list|,
name|ColumnType
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serDeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
name|uniqueSerdeName
argument_list|()
argument_list|,
literal|"lib"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|addSerDe
argument_list|(
name|serDeInfo
argument_list|)
expr_stmt|;
name|client
operator|.
name|mapSchemaVersionToSerde
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|,
name|serDeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serDeInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create schema with a serde, then remap it
name|String
name|serDeName
init|=
name|uniqueSerdeName
argument_list|()
decl_stmt|;
name|schemaVersion
operator|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|2
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"x"
argument_list|,
name|ColumnType
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
operator|.
name|setSerdeName
argument_list|(
name|serDeName
argument_list|)
operator|.
name|setSerdeLib
argument_list|(
literal|"x"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serDeName
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serDeInfo
operator|=
operator|new
name|SerDeInfo
argument_list|(
name|uniqueSerdeName
argument_list|()
argument_list|,
literal|"y"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|addSerDe
argument_list|(
name|serDeInfo
argument_list|)
expr_stmt|;
name|client
operator|.
name|mapSchemaVersionToSerde
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|,
name|serDeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serDeInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addSerde
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|serdeName
init|=
name|uniqueSerdeName
argument_list|()
decl_stmt|;
name|SerDeInfo
name|serDeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
name|serdeName
argument_list|,
literal|"serdeLib"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|serDeInfo
operator|.
name|setSerializerClass
argument_list|(
literal|"serializer"
argument_list|)
expr_stmt|;
name|serDeInfo
operator|.
name|setDeserializerClass
argument_list|(
literal|"deserializer"
argument_list|)
expr_stmt|;
name|serDeInfo
operator|.
name|setDescription
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
name|serDeInfo
operator|.
name|setSerdeType
argument_list|(
name|SerdeType
operator|.
name|SCHEMA_REGISTRY
argument_list|)
expr_stmt|;
name|client
operator|.
name|addSerDe
argument_list|(
name|serDeInfo
argument_list|)
expr_stmt|;
name|serDeInfo
operator|=
name|client
operator|.
name|getSerDe
argument_list|(
name|serdeName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|serdeName
argument_list|,
name|serDeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"serdeLib"
argument_list|,
name|serDeInfo
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serDeInfo
operator|.
name|getParametersSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|serDeInfo
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"serializer"
argument_list|,
name|serDeInfo
operator|.
name|getSerializerClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"deserializer"
argument_list|,
name|serDeInfo
operator|.
name|getDeserializerClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"description"
argument_list|,
name|serDeInfo
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SerdeType
operator|.
name|SCHEMA_REGISTRY
argument_list|,
name|serDeInfo
operator|.
name|getSerdeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|duplicateSerde
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|serdeName
init|=
name|uniqueSerdeName
argument_list|()
decl_stmt|;
name|SerDeInfo
name|serDeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
name|serdeName
argument_list|,
literal|"x"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|addSerDe
argument_list|(
name|serDeInfo
argument_list|)
expr_stmt|;
name|client
operator|.
name|addSerDe
argument_list|(
name|serDeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|noSuchSerDe
parameter_list|()
throws|throws
name|TException
block|{
name|client
operator|.
name|getSerDe
argument_list|(
name|uniqueSerdeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|setVersionStateNoSuchSchema
parameter_list|()
throws|throws
name|TException
block|{
name|client
operator|.
name|setSchemaVersionState
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"no.such.schema"
argument_list|,
literal|1
argument_list|,
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|setVersionStateNoSuchVersion
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSchemaVersionState
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|,
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setVersionState
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|BINARY_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schemaVersion
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSchemaVersionState
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|,
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|,
name|schemaVersion
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSchemaVersionState
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|,
name|SchemaVersionState
operator|.
name|REVIEWED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaVersionState
operator|.
name|REVIEWED
argument_list|,
name|schemaVersion
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setVersionStateOtherDb
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|catName
init|=
literal|"other_cat_for_set_version"
decl_stmt|;
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|catName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"other_db_set_state"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|schemaName
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName
argument_list|)
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
name|ColumnType
operator|.
name|BINARY_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schemaVersion
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSchemaVersionState
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|,
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaVersionState
operator|.
name|INITIATED
argument_list|,
name|schemaVersion
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSchemaVersionState
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|,
name|SchemaVersionState
operator|.
name|REVIEWED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|preEvents
operator|.
name|get
argument_list|(
name|PreEventContext
operator|.
name|PreEventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|schemaVersion
operator|=
name|client
operator|.
name|getSchemaVersion
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|schemaName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SchemaVersionState
operator|.
name|REVIEWED
argument_list|,
name|schemaVersion
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|dropNonExistentSchemaVersion
parameter_list|()
throws|throws
name|TException
block|{
name|client
operator|.
name|dropSchemaVersion
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|"ther is no schema named this"
argument_list|,
literal|23
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|schemaQuery
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
literal|"schema_query_db"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|schemaName1
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema1
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema1
argument_list|)
expr_stmt|;
name|String
name|schemaName2
init|=
name|uniqueSchemaName
argument_list|()
decl_stmt|;
name|ISchema
name|schema2
init|=
operator|new
name|ISchemaBuilder
argument_list|()
operator|.
name|setSchemaType
argument_list|(
name|SchemaType
operator|.
name|AVRO
argument_list|)
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setName
argument_list|(
name|schemaName2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createISchema
argument_list|(
name|schema2
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion1_1
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema1
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"alpha"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"beta"
argument_list|,
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion1_1
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion1_2
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema1
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|2
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"alpha"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"beta"
argument_list|,
name|ColumnType
operator|.
name|DATE_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"gamma"
argument_list|,
name|ColumnType
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
literal|"namespace=x"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion1_2
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion2_1
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema2
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"ALPHA"
argument_list|,
name|ColumnType
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"delta"
argument_list|,
name|ColumnType
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion2_1
argument_list|)
expr_stmt|;
name|SchemaVersion
name|schemaVersion2_2
init|=
operator|new
name|SchemaVersionBuilder
argument_list|()
operator|.
name|versionOf
argument_list|(
name|schema2
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|2
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"ALPHA"
argument_list|,
name|ColumnType
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"delta"
argument_list|,
name|ColumnType
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"epsilon"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|"namespace=x"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|addSchemaVersion
argument_list|(
name|schemaVersion2_2
argument_list|)
expr_stmt|;
comment|// Query that should return nothing
name|FindSchemasByColsRqst
name|rqst
init|=
operator|new
name|FindSchemasByColsRqst
argument_list|()
decl_stmt|;
name|rqst
operator|.
name|setColName
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setColNamespace
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setType
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|FindSchemasByColsResp
name|rsp
init|=
name|client
operator|.
name|getSchemaByCols
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getSchemaVersionsSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Query that should fetch one column
name|rqst
operator|=
operator|new
name|FindSchemasByColsRqst
argument_list|()
expr_stmt|;
name|rqst
operator|.
name|setColName
argument_list|(
literal|"gamma"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|getSchemaByCols
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getSchemaVersionsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName1
argument_list|,
name|rsp
operator|.
name|getSchemaVersions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|rsp
operator|.
name|getSchemaVersions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsp
operator|.
name|getSchemaVersions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// fetch 2 in same schema
name|rqst
operator|=
operator|new
name|FindSchemasByColsRqst
argument_list|()
expr_stmt|;
name|rqst
operator|.
name|setColName
argument_list|(
literal|"beta"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|getSchemaByCols
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsp
operator|.
name|getSchemaVersionsSize
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SchemaVersionDescriptor
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rsp
operator|.
name|getSchemaVersions
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// fetch across schemas
name|rqst
operator|=
operator|new
name|FindSchemasByColsRqst
argument_list|()
expr_stmt|;
name|rqst
operator|.
name|setColName
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|getSchemaByCols
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rsp
operator|.
name|getSchemaVersionsSize
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rsp
operator|.
name|getSchemaVersions
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// fetch by namespace
name|rqst
operator|=
operator|new
name|FindSchemasByColsRqst
argument_list|()
expr_stmt|;
name|rqst
operator|.
name|setColNamespace
argument_list|(
literal|"namespace=x"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|getSchemaByCols
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsp
operator|.
name|getSchemaVersionsSize
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rsp
operator|.
name|getSchemaVersions
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// fetch by name and type
name|rqst
operator|=
operator|new
name|FindSchemasByColsRqst
argument_list|()
expr_stmt|;
name|rqst
operator|.
name|setColName
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setType
argument_list|(
name|ColumnType
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|getSchemaByCols
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsp
operator|.
name|getSchemaVersionsSize
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rsp
operator|.
name|getSchemaVersions
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemaName2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure matching name but wrong type doesn't return
name|rqst
operator|=
operator|new
name|FindSchemasByColsRqst
argument_list|()
expr_stmt|;
name|rqst
operator|.
name|setColName
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setType
argument_list|(
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|getSchemaByCols
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getSchemaVersionsSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|schemaVersionQueryNoNameOrNamespace
parameter_list|()
throws|throws
name|TException
block|{
name|FindSchemasByColsRqst
name|rqst
init|=
operator|new
name|FindSchemasByColsRqst
argument_list|()
decl_stmt|;
name|rqst
operator|.
name|setType
argument_list|(
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|getSchemaByCols
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|nextSchemaNum
init|=
literal|1
decl_stmt|;
specifier|private
name|String
name|uniqueSchemaName
parameter_list|()
block|{
return|return
literal|"uniqueschema"
operator|+
name|nextSchemaNum
operator|++
return|;
block|}
specifier|private
name|String
name|uniqueSerdeName
parameter_list|()
block|{
return|return
literal|"uniqueSerde"
operator|+
name|nextSchemaNum
operator|++
return|;
block|}
specifier|public
specifier|static
class|class
name|SchemaEventListener
extends|extends
name|MetaStoreEventListener
block|{
specifier|public
name|SchemaEventListener
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCreateISchema
parameter_list|(
name|CreateISchemaEvent
name|createISchemaEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|cnt
init|=
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|CREATE_ISCHEMA
argument_list|)
decl_stmt|;
name|events
operator|.
name|put
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|CREATE_ISCHEMA
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAlterISchema
parameter_list|(
name|AlterISchemaEvent
name|alterISchemaEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|cnt
init|=
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_ISCHEMA
argument_list|)
decl_stmt|;
name|events
operator|.
name|put
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_ISCHEMA
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropISchema
parameter_list|(
name|DropISchemaEvent
name|dropISchemaEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|cnt
init|=
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|DROP_ISCHEMA
argument_list|)
decl_stmt|;
name|events
operator|.
name|put
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|DROP_ISCHEMA
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAddSchemaVersion
parameter_list|(
name|AddSchemaVersionEvent
name|addSchemaVersionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|cnt
init|=
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ADD_SCHEMA_VERSION
argument_list|)
decl_stmt|;
name|events
operator|.
name|put
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ADD_SCHEMA_VERSION
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAlterSchemaVersion
parameter_list|(
name|AlterSchemaVersionEvent
name|alterSchemaVersionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|cnt
init|=
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
decl_stmt|;
name|events
operator|.
name|put
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropSchemaVersion
parameter_list|(
name|DropSchemaVersionEvent
name|dropSchemaVersionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|cnt
init|=
name|events
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|DROP_SCHEMA_VERSION
argument_list|)
decl_stmt|;
name|events
operator|.
name|put
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|DROP_SCHEMA_VERSION
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TransactionalSchemaEventListener
extends|extends
name|MetaStoreEventListener
block|{
specifier|public
name|TransactionalSchemaEventListener
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCreateISchema
parameter_list|(
name|CreateISchemaEvent
name|createISchemaEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|cnt
init|=
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|CREATE_ISCHEMA
argument_list|)
decl_stmt|;
name|transactionalEvents
operator|.
name|put
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|CREATE_ISCHEMA
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAlterISchema
parameter_list|(
name|AlterISchemaEvent
name|alterISchemaEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|cnt
init|=
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_ISCHEMA
argument_list|)
decl_stmt|;
name|transactionalEvents
operator|.
name|put
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_ISCHEMA
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropISchema
parameter_list|(
name|DropISchemaEvent
name|dropISchemaEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|cnt
init|=
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|DROP_ISCHEMA
argument_list|)
decl_stmt|;
name|transactionalEvents
operator|.
name|put
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|DROP_ISCHEMA
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAddSchemaVersion
parameter_list|(
name|AddSchemaVersionEvent
name|addSchemaVersionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|cnt
init|=
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ADD_SCHEMA_VERSION
argument_list|)
decl_stmt|;
name|transactionalEvents
operator|.
name|put
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ADD_SCHEMA_VERSION
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAlterSchemaVersion
parameter_list|(
name|AlterSchemaVersionEvent
name|alterSchemaVersionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|cnt
init|=
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|)
decl_stmt|;
name|transactionalEvents
operator|.
name|put
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropSchemaVersion
parameter_list|(
name|DropSchemaVersionEvent
name|dropSchemaVersionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|cnt
init|=
name|transactionalEvents
operator|.
name|get
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|DROP_SCHEMA_VERSION
argument_list|)
decl_stmt|;
name|transactionalEvents
operator|.
name|put
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|DROP_SCHEMA_VERSION
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SchemaPreEventListener
extends|extends
name|MetaStorePreEventListener
block|{
specifier|public
name|SchemaPreEventListener
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|PreEventContext
name|context
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
block|{
name|Integer
name|cnt
init|=
name|preEvents
operator|.
name|get
argument_list|(
name|context
operator|.
name|getEventType
argument_list|()
argument_list|)
decl_stmt|;
name|preEvents
operator|.
name|put
argument_list|(
name|context
operator|.
name|getEventType
argument_list|()
argument_list|,
name|cnt
operator|==
literal|null
condition|?
literal|1
else|:
name|cnt
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

