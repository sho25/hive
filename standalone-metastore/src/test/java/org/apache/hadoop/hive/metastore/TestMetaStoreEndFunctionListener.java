begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|HadoopThriftAuthBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * TestMetaStoreEventListener. Test case for  * {@link org.apache.hadoop.hive.metastore.MetaStoreEndFunctionListener}  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMetaStoreEndFunctionListener
block|{
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|HiveMetaStoreClient
name|msc
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"hive.metastore.event.listeners"
argument_list|,
name|DummyListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hive.metastore.pre.event.listeners"
argument_list|,
name|DummyPreListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hive.metastore.end.function.listeners"
argument_list|,
name|DummyEndFunctionListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|THRIFT_CONNECTION_RETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|startMetaStoreWithRetry
argument_list|(
name|HadoopThriftAuthBridge
operator|.
name|getBridge
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|msc
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndFunctionListener
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Objective here is to ensure that when exceptions are thrown in HiveMetaStore in API methods      * they bubble up and are stored in the MetaStoreEndFunctionContext objects      */
name|String
name|dbName
init|=
literal|"hive3524"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tmptbl"
decl_stmt|;
name|int
name|listSize
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|msc
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
try|try
block|{
name|msc
operator|.
name|getDatabase
argument_list|(
literal|"UnknownDB"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// All good
block|}
name|listSize
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|size
argument_list|()
expr_stmt|;
name|String
name|func_name
init|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
decl_stmt|;
name|MetaStoreEndFunctionContext
name|context
init|=
name|DummyEndFunctionListener
operator|.
name|contextList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|func_name
argument_list|,
literal|"get_database"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|context
operator|.
name|getException
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|instanceof
name|NoSuchObjectException
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getInputTableName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|unknownTable
init|=
literal|"UnknownTable"
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"b"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|msc
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
try|try
block|{
name|msc
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|unknownTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
comment|// All good
block|}
name|listSize
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|size
argument_list|()
expr_stmt|;
name|func_name
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|context
operator|=
name|DummyEndFunctionListener
operator|.
name|contextList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|func_name
argument_list|,
literal|"get_table"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|context
operator|.
name|getException
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|instanceof
name|NoSuchObjectException
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getInputTableName
argument_list|()
argument_list|,
name|unknownTable
argument_list|)
expr_stmt|;
try|try
block|{
name|msc
operator|.
name|getPartition
argument_list|(
literal|"hive3524"
argument_list|,
name|tblName
argument_list|,
literal|"b=2012"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
comment|// All good
block|}
name|listSize
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|size
argument_list|()
expr_stmt|;
name|func_name
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|context
operator|=
name|DummyEndFunctionListener
operator|.
name|contextList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|func_name
argument_list|,
literal|"get_partition_by_name"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|context
operator|.
name|getException
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|instanceof
name|NoSuchObjectException
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getInputTableName
argument_list|()
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
try|try
block|{
name|msc
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|unknownTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e4
parameter_list|)
block|{
comment|// All good
block|}
name|listSize
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|size
argument_list|()
expr_stmt|;
name|func_name
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|context
operator|=
name|DummyEndFunctionListener
operator|.
name|contextList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|func_name
argument_list|,
literal|"get_table"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|context
operator|.
name|getException
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|instanceof
name|NoSuchObjectException
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getInputTableName
argument_list|()
argument_list|,
literal|"UnknownTable"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

