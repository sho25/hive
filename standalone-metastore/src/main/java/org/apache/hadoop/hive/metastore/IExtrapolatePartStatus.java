begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_interface
specifier|public
interface|interface
name|IExtrapolatePartStatus
block|{
comment|/**    * The sequence of colStatNames.    */
specifier|static
name|String
index|[]
name|colStatNames
init|=
operator|new
name|String
index|[]
block|{
literal|"LONG_LOW_VALUE"
block|,
literal|"LONG_HIGH_VALUE"
block|,
literal|"DOUBLE_LOW_VALUE"
block|,
literal|"DOUBLE_HIGH_VALUE"
block|,
literal|"BIG_DECIMAL_LOW_VALUE"
block|,
literal|"BIG_DECIMAL_HIGH_VALUE"
block|,
literal|"NUM_NULLS"
block|,
literal|"NUM_DISTINCTS"
block|,
literal|"AVG_COL_LEN"
block|,
literal|"MAX_COL_LEN"
block|,
literal|"NUM_TRUES"
block|,
literal|"NUM_FALSES"
block|,
literal|"AVG_NDV_LONG"
block|,
literal|"AVG_NDV_DOUBLE"
block|,
literal|"AVG_NDV_DECIMAL"
block|,
literal|"SUM_NUM_DISTINCTS"
block|}
decl_stmt|;
comment|/**    * The indexes for colstats.    */
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
index|[]
argument_list|>
name|indexMaps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
index|[]
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"bigint"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|6
block|,
literal|7
block|,
literal|12
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"int"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|6
block|,
literal|7
block|,
literal|12
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"smallint"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|6
block|,
literal|7
block|,
literal|12
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"tinyint"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|6
block|,
literal|7
block|,
literal|12
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"date"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|6
block|,
literal|7
block|,
literal|12
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"timestamp"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|6
block|,
literal|7
block|,
literal|12
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"long"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|6
block|,
literal|7
block|,
literal|12
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"double"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|6
block|,
literal|7
block|,
literal|13
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"float"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|6
block|,
literal|7
block|,
literal|13
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"varchar"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|8
block|,
literal|9
block|,
literal|6
block|,
literal|7
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"char"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|8
block|,
literal|9
block|,
literal|6
block|,
literal|7
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"string"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|8
block|,
literal|9
block|,
literal|6
block|,
literal|7
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"boolean"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|10
block|,
literal|11
block|,
literal|6
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"binary"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|8
block|,
literal|9
block|,
literal|6
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"decimal"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|14
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"default"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|15
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * The sequence of colStatTypes.    */
specifier|static
enum|enum
name|ColStatType
block|{
name|Long
block|,
name|Double
block|,
name|Decimal
block|}
specifier|static
name|ColStatType
index|[]
name|colStatTypes
init|=
operator|new
name|ColStatType
index|[]
block|{
name|ColStatType
operator|.
name|Long
block|,
name|ColStatType
operator|.
name|Long
block|,
name|ColStatType
operator|.
name|Double
block|,
name|ColStatType
operator|.
name|Double
block|,
name|ColStatType
operator|.
name|Decimal
block|,
name|ColStatType
operator|.
name|Decimal
block|,
name|ColStatType
operator|.
name|Long
block|,
name|ColStatType
operator|.
name|Long
block|,
name|ColStatType
operator|.
name|Double
block|,
name|ColStatType
operator|.
name|Long
block|,
name|ColStatType
operator|.
name|Long
block|,
name|ColStatType
operator|.
name|Long
block|,
name|ColStatType
operator|.
name|Double
block|,
name|ColStatType
operator|.
name|Double
block|,
name|ColStatType
operator|.
name|Double
block|,
name|ColStatType
operator|.
name|Long
block|}
decl_stmt|;
comment|/**    * The sequence of aggregation function on colStats.    */
specifier|static
enum|enum
name|AggrType
block|{
name|Min
block|,
name|Max
block|,
name|Sum
block|,
name|Avg
block|}
specifier|static
name|AggrType
index|[]
name|aggrTypes
init|=
operator|new
name|AggrType
index|[]
block|{
name|AggrType
operator|.
name|Min
block|,
name|AggrType
operator|.
name|Max
block|,
name|AggrType
operator|.
name|Min
block|,
name|AggrType
operator|.
name|Max
block|,
name|AggrType
operator|.
name|Min
block|,
name|AggrType
operator|.
name|Max
block|,
name|AggrType
operator|.
name|Sum
block|,
name|AggrType
operator|.
name|Max
block|,
name|AggrType
operator|.
name|Max
block|,
name|AggrType
operator|.
name|Max
block|,
name|AggrType
operator|.
name|Sum
block|,
name|AggrType
operator|.
name|Sum
block|,
name|AggrType
operator|.
name|Avg
block|,
name|AggrType
operator|.
name|Avg
block|,
name|AggrType
operator|.
name|Avg
block|,
name|AggrType
operator|.
name|Sum
block|}
decl_stmt|;
specifier|public
name|Object
name|extrapolate
parameter_list|(
name|Object
index|[]
name|min
parameter_list|,
name|Object
index|[]
name|max
parameter_list|,
name|int
name|colStatIndex
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|indexMap
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

