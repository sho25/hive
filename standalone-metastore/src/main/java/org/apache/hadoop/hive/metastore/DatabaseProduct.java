begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLTransactionRollbackException
import|;
end_import

begin_comment
comment|/** Database product infered via JDBC. */
end_comment

begin_enum
specifier|public
enum|enum
name|DatabaseProduct
block|{
name|DERBY
block|,
name|MYSQL
block|,
name|POSTGRES
block|,
name|ORACLE
block|,
name|SQLSERVER
block|,
name|OTHER
block|;
comment|/**    * Determine the database product type    * @param productName string to defer database connection    * @return database product type    */
specifier|public
specifier|static
name|DatabaseProduct
name|determineDatabaseProduct
parameter_list|(
name|String
name|productName
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|productName
operator|==
literal|null
condition|)
block|{
return|return
name|OTHER
return|;
block|}
name|productName
operator|=
name|productName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|productName
operator|.
name|contains
argument_list|(
literal|"derby"
argument_list|)
condition|)
block|{
return|return
name|DERBY
return|;
block|}
elseif|else
if|if
condition|(
name|productName
operator|.
name|contains
argument_list|(
literal|"microsoft sql server"
argument_list|)
condition|)
block|{
return|return
name|SQLSERVER
return|;
block|}
elseif|else
if|if
condition|(
name|productName
operator|.
name|contains
argument_list|(
literal|"mysql"
argument_list|)
condition|)
block|{
return|return
name|MYSQL
return|;
block|}
elseif|else
if|if
condition|(
name|productName
operator|.
name|contains
argument_list|(
literal|"oracle"
argument_list|)
condition|)
block|{
return|return
name|ORACLE
return|;
block|}
elseif|else
if|if
condition|(
name|productName
operator|.
name|contains
argument_list|(
literal|"postgresql"
argument_list|)
condition|)
block|{
return|return
name|POSTGRES
return|;
block|}
else|else
block|{
return|return
name|OTHER
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isDeadlock
parameter_list|(
name|DatabaseProduct
name|dbProduct
parameter_list|,
name|SQLException
name|e
parameter_list|)
block|{
return|return
name|e
operator|instanceof
name|SQLTransactionRollbackException
operator|||
operator|(
operator|(
name|dbProduct
operator|==
name|MYSQL
operator|||
name|dbProduct
operator|==
name|POSTGRES
operator|||
name|dbProduct
operator|==
name|SQLSERVER
operator|)
operator|&&
name|e
operator|.
name|getSQLState
argument_list|()
operator|.
name|equals
argument_list|(
literal|"40001"
argument_list|)
operator|)
operator|||
operator|(
name|dbProduct
operator|==
name|POSTGRES
operator|&&
name|e
operator|.
name|getSQLState
argument_list|()
operator|.
name|equals
argument_list|(
literal|"40P01"
argument_list|)
operator|)
operator|||
operator|(
name|dbProduct
operator|==
name|ORACLE
operator|&&
operator|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"deadlock detected"
argument_list|)
operator|||
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"can't serialize access for this transaction"
argument_list|)
operator|)
operator|)
return|;
block|}
comment|/**    * Whether the RDBMS has restrictions on IN list size (explicit, or poor perf-based).    */
specifier|public
specifier|static
name|boolean
name|needsInBatching
parameter_list|(
name|DatabaseProduct
name|dbType
parameter_list|)
block|{
return|return
name|dbType
operator|==
name|ORACLE
operator|||
name|dbType
operator|==
name|SQLSERVER
return|;
block|}
comment|/**    * Whether the RDBMS has a bug in join and filter operation order described in DERBY-6358.    */
specifier|public
specifier|static
name|boolean
name|hasJoinOperationOrderBug
parameter_list|(
name|DatabaseProduct
name|dbType
parameter_list|)
block|{
return|return
name|dbType
operator|==
name|DERBY
operator|||
name|dbType
operator|==
name|ORACLE
return|;
block|}
block|}
end_enum

end_unit

