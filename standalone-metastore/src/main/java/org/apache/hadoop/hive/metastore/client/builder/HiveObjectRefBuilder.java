begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A builder for {@link HiveObjectRef}.  Unlike most builders (which allow a gradual building up  * of the values) this gives a number of methods that take the object to be referenced and then  * build the appropriate reference.  This is intended primarily for use with  * {@link HiveObjectPrivilegeBuilder}  */
end_comment

begin_class
specifier|public
class|class
name|HiveObjectRefBuilder
block|{
specifier|private
name|HiveObjectType
name|objectType
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|,
name|objectName
decl_stmt|,
name|columnName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|partValues
decl_stmt|;
specifier|public
name|HiveObjectRef
name|buildGlobalReference
parameter_list|()
block|{
return|return
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|HiveObjectRef
name|buildDatabaseReference
parameter_list|(
name|Database
name|db
parameter_list|)
block|{
return|return
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|HiveObjectRef
name|buildTableReference
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|HiveObjectRef
name|buildPartitionReference
parameter_list|(
name|Partition
name|part
parameter_list|)
block|{
return|return
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|PARTITION
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|HiveObjectRef
name|buildColumnReference
parameter_list|(
name|Table
name|table
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|columnName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

