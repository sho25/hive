begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddForeignKeyEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddNotNullConstraintEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddPrimaryKeyEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddSchemaVersionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddUniqueConstraintEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterCatalogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterISchemaEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterSchemaVersionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateCatalogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateFunctionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateISchemaEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropCatalogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropFunctionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropISchemaEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropSchemaVersionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|InsertEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|ListenerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|OpenTxnEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CommitTxnEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AbortTxnEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AllocWriteIdEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AcidWriteEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|SQLGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreEventListenerConstants
operator|.
name|HIVE_METASTORE_TRANSACTION_ACTIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|EventMessage
operator|.
name|EventType
import|;
end_import

begin_comment
comment|/**  * This class is used to notify a list of listeners about specific MetaStore events.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetaStoreListenerNotifier
block|{
specifier|private
interface|interface
name|EventNotifier
block|{
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
function_decl|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|EventType
argument_list|,
name|EventNotifier
argument_list|>
name|notificationEvents
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|EventType
argument_list|,
name|EventNotifier
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|CREATE_DATABASE
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onCreateDatabase
argument_list|(
operator|(
name|CreateDatabaseEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|DROP_DATABASE
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onDropDatabase
argument_list|(
operator|(
name|DropDatabaseEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|CREATE_TABLE
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onCreateTable
argument_list|(
operator|(
name|CreateTableEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|DROP_TABLE
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onDropTable
argument_list|(
operator|(
name|DropTableEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ADD_PARTITION
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onAddPartition
argument_list|(
operator|(
name|AddPartitionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|DROP_PARTITION
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onDropPartition
argument_list|(
operator|(
name|DropPartitionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ALTER_DATABASE
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onAlterDatabase
argument_list|(
operator|(
name|AlterDatabaseEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ALTER_TABLE
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onAlterTable
argument_list|(
operator|(
name|AlterTableEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ALTER_PARTITION
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onAlterPartition
argument_list|(
operator|(
name|AlterPartitionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|INSERT
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onInsert
argument_list|(
operator|(
name|InsertEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|CREATE_FUNCTION
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onCreateFunction
argument_list|(
operator|(
name|CreateFunctionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|DROP_FUNCTION
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onDropFunction
argument_list|(
operator|(
name|DropFunctionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ADD_PRIMARYKEY
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onAddPrimaryKey
argument_list|(
operator|(
name|AddPrimaryKeyEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ADD_FOREIGNKEY
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onAddForeignKey
argument_list|(
operator|(
name|AddForeignKeyEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ADD_UNIQUECONSTRAINT
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onAddUniqueConstraint
argument_list|(
operator|(
name|AddUniqueConstraintEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ADD_NOTNULLCONSTRAINT
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onAddNotNullConstraint
argument_list|(
operator|(
name|AddNotNullConstraintEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|CREATE_ISCHEMA
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onCreateISchema
argument_list|(
operator|(
name|CreateISchemaEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ALTER_ISCHEMA
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onAlterISchema
argument_list|(
operator|(
name|AlterISchemaEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|DROP_ISCHEMA
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onDropISchema
argument_list|(
operator|(
name|DropISchemaEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ADD_SCHEMA_VERSION
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onAddSchemaVersion
argument_list|(
operator|(
name|AddSchemaVersionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ALTER_SCHEMA_VERSION
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onAlterSchemaVersion
argument_list|(
operator|(
name|AlterSchemaVersionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|DROP_SCHEMA_VERSION
argument_list|,
operator|new
name|EventNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|listener
operator|.
name|onDropSchemaVersion
argument_list|(
operator|(
name|DropSchemaVersionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|CREATE_CATALOG
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|)
lambda|->
name|listener
operator|.
name|onCreateCatalog
argument_list|(
operator|(
name|CreateCatalogEvent
operator|)
name|event
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|DROP_CATALOG
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|)
lambda|->
name|listener
operator|.
name|onDropCatalog
argument_list|(
operator|(
name|DropCatalogEvent
operator|)
name|event
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ALTER_CATALOG
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|)
lambda|->
name|listener
operator|.
name|onAlterCatalog
argument_list|(
operator|(
name|AlterCatalogEvent
operator|)
name|event
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|OPEN_TXN
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|)
lambda|->
name|listener
operator|.
name|onOpenTxn
argument_list|(
operator|(
name|OpenTxnEvent
operator|)
name|event
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|COMMIT_TXN
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|)
lambda|->
name|listener
operator|.
name|onCommitTxn
argument_list|(
operator|(
name|CommitTxnEvent
operator|)
name|event
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ABORT_TXN
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|)
lambda|->
name|listener
operator|.
name|onAbortTxn
argument_list|(
operator|(
name|AbortTxnEvent
operator|)
name|event
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ALLOC_WRITE_ID
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|)
lambda|->
name|listener
operator|.
name|onAllocWriteId
argument_list|(
operator|(
name|AllocWriteIdEvent
operator|)
name|event
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ACID_WRITE
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|)
lambda|->
name|listener
operator|.
name|onAcidWrite
argument_list|(
operator|(
name|AcidWriteEvent
operator|)
name|event
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
interface|interface
name|TxnEventNotifier
block|{
name|void
name|notify
parameter_list|(
name|MetaStoreEventListener
name|listener
parameter_list|,
name|ListenerEvent
name|event
parameter_list|,
name|Connection
name|dbConn
parameter_list|,
name|SQLGenerator
name|sqlGenerator
parameter_list|)
throws|throws
name|MetaException
function_decl|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|EventType
argument_list|,
name|TxnEventNotifier
argument_list|>
name|txnNotificationEvents
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|EventType
argument_list|,
name|TxnEventNotifier
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|OPEN_TXN
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|,
name|dbConn
parameter_list|,
name|sqlGenerator
parameter_list|)
lambda|->
name|listener
operator|.
name|onOpenTxn
argument_list|(
operator|(
name|OpenTxnEvent
operator|)
name|event
argument_list|,
name|dbConn
argument_list|,
name|sqlGenerator
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|COMMIT_TXN
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|,
name|dbConn
parameter_list|,
name|sqlGenerator
parameter_list|)
lambda|->
name|listener
operator|.
name|onCommitTxn
argument_list|(
operator|(
name|CommitTxnEvent
operator|)
name|event
argument_list|,
name|dbConn
argument_list|,
name|sqlGenerator
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ABORT_TXN
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|,
name|dbConn
parameter_list|,
name|sqlGenerator
parameter_list|)
lambda|->
name|listener
operator|.
name|onAbortTxn
argument_list|(
operator|(
name|AbortTxnEvent
operator|)
name|event
argument_list|,
name|dbConn
argument_list|,
name|sqlGenerator
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ALLOC_WRITE_ID
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|,
name|dbConn
parameter_list|,
name|sqlGenerator
parameter_list|)
lambda|->
name|listener
operator|.
name|onAllocWriteId
argument_list|(
operator|(
name|AllocWriteIdEvent
operator|)
name|event
argument_list|,
name|dbConn
argument_list|,
name|sqlGenerator
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|EventType
operator|.
name|ACID_WRITE
argument_list|,
parameter_list|(
name|listener
parameter_list|,
name|event
parameter_list|,
name|dbConn
parameter_list|,
name|sqlGenerator
parameter_list|)
lambda|->
name|listener
operator|.
name|onAcidWrite
argument_list|(
operator|(
name|AcidWriteEvent
operator|)
name|event
argument_list|,
name|dbConn
argument_list|,
name|sqlGenerator
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Notify a list of listeners about a specific metastore event. Each listener notified might update    * the (ListenerEvent) event by setting a parameter key/value pair. These updated parameters will    * be returned to the caller.    *    * @param listeners List of MetaStoreEventListener listeners.    * @param eventType Type of the notification event.    * @param event The ListenerEvent with information about the event.    * @return A list of key/value pair parameters that the listeners set. The returned object will return an empty    *         map if no parameters were updated or if no listeners were notified.    * @throws MetaException If an error occurred while calling the listeners.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|notifyEvent
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|MetaStoreEventListener
argument_list|>
name|listeners
parameter_list|,
name|EventType
name|eventType
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|listeners
argument_list|,
literal|"Listeners must not be null."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|event
argument_list|,
literal|"The event must not be null."
argument_list|)
expr_stmt|;
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|notificationEvents
operator|.
name|get
argument_list|(
name|eventType
argument_list|)
operator|.
name|notify
argument_list|(
name|listener
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
comment|// Each listener called above might set a different parameter on the event.
comment|// This write permission is allowed on the listener side to avoid breaking compatibility if we change the API
comment|// method calls.
return|return
name|event
operator|.
name|getParameters
argument_list|()
return|;
block|}
comment|/**    * Notify a list of listeners about a specific metastore event to be executed within a txn. Each listener notified    * might update the (ListenerEvent) event by setting a parameter key/value pair. These updated parameters will    * be returned to the caller.    *    * @param listeners List of MetaStoreEventListener listeners.    * @param eventType Type of the notification event.    * @param event The ListenerEvent with information about the event.    * @param dbConn The JDBC connection to the remote meta store db.    * @param sqlGenerator The helper class to generate db specific SQL string.    * @return A list of key/value pair parameters that the listeners set. The returned object will return an empty    *         map if no parameters were updated or if no listeners were notified.    * @throws MetaException If an error occurred while calling the listeners.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|notifyEventWithDirectSql
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|MetaStoreEventListener
argument_list|>
name|listeners
parameter_list|,
name|EventType
name|eventType
parameter_list|,
name|ListenerEvent
name|event
parameter_list|,
name|Connection
name|dbConn
parameter_list|,
name|SQLGenerator
name|sqlGenerator
parameter_list|)
throws|throws
name|MetaException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|listeners
argument_list|,
literal|"Listeners must not be null."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|event
argument_list|,
literal|"The event must not be null."
argument_list|)
expr_stmt|;
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|txnNotificationEvents
operator|.
name|get
argument_list|(
name|eventType
argument_list|)
operator|.
name|notify
argument_list|(
name|listener
argument_list|,
name|event
argument_list|,
name|dbConn
argument_list|,
name|sqlGenerator
argument_list|)
expr_stmt|;
block|}
comment|// Each listener called above might set a different parameter on the event.
comment|// This write permission is allowed on the listener side to avoid breaking compatibility if we change the API
comment|// method calls.
return|return
name|event
operator|.
name|getParameters
argument_list|()
return|;
block|}
comment|/**    * Notify a list of listeners about a specific metastore event. Each listener notified might update    * the (ListenerEvent) event by setting a parameter key/value pair. These updated parameters will    * be returned to the caller.    *    * @param listeners List of MetaStoreEventListener listeners.    * @param eventType Type of the notification event.    * @param event The ListenerEvent with information about the event.    * @param environmentContext An EnvironmentContext object with parameters sent by the HMS client.    * @return A list of key/value pair parameters that the listeners set. The returned object will return an empty    *         map if no parameters were updated or if no listeners were notified.    * @throws MetaException If an error occurred while calling the listeners.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|notifyEvent
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|MetaStoreEventListener
argument_list|>
name|listeners
parameter_list|,
name|EventType
name|eventType
parameter_list|,
name|ListenerEvent
name|event
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|MetaException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|event
argument_list|,
literal|"The event must not be null."
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEnvironmentContext
argument_list|(
name|environmentContext
argument_list|)
expr_stmt|;
return|return
name|notifyEvent
argument_list|(
name|listeners
argument_list|,
name|eventType
argument_list|,
name|event
argument_list|)
return|;
block|}
comment|/**    * Notify a list of listeners about a specific metastore event. Each listener notified might update    * the (ListenerEvent) event by setting a parameter key/value pair. These updated parameters will    * be returned to the caller.    *    * Sometimes these events are run inside a DB transaction and might cause issues with the listeners,    * for instance, Sentry blocks the HMS until an event is seen committed on the DB. To notify the listener about this,    * a new parameter to verify if a transaction is active is added to the ListenerEvent, and is up to the listener    * to skip this notification if so.    *    * @param listeners List of MetaStoreEventListener listeners.    * @param eventType Type of the notification event.    * @param event The ListenerEvent with information about the event.    * @param environmentContext An EnvironmentContext object with parameters sent by the HMS client.    * @param parameters A list of key/value pairs with the new parameters to add.    * @param ms The RawStore object from where to check if a transaction is active.    * @return A list of key/value pair parameters that the listeners set. The returned object will return an empty    *         map if no parameters were updated or if no listeners were notified.    * @throws MetaException If an error occurred while calling the listeners.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|notifyEvent
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|MetaStoreEventListener
argument_list|>
name|listeners
parameter_list|,
name|EventType
name|eventType
parameter_list|,
name|ListenerEvent
name|event
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|,
specifier|final
name|RawStore
name|ms
parameter_list|)
throws|throws
name|MetaException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|event
argument_list|,
literal|"The event must not be null."
argument_list|)
expr_stmt|;
name|event
operator|.
name|putParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|putParameter
argument_list|(
name|HIVE_METASTORE_TRANSACTION_ACTIVE
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|ms
operator|.
name|isActiveTransaction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|notifyEvent
argument_list|(
name|listeners
argument_list|,
name|eventType
argument_list|,
name|event
argument_list|,
name|environmentContext
argument_list|)
return|;
block|}
block|}
end_class

end_unit

