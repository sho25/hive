begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|DBTokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|DelegationTokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|MemoryTokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|ZooKeeperTokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|client
operator|.
name|ZooKeeperSaslClient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSSLTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLServerSocket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|SecurityUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SecurityUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|UserGroupInformation
name|getUGI
parameter_list|()
throws|throws
name|LoginException
throws|,
name|IOException
block|{
name|String
name|doAs
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HADOOP_USER_NAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|doAs
operator|!=
literal|null
operator|&&
name|doAs
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|/*       * this allows doAs (proxy user) to be passed along across process boundary where       * delegation tokens are not supported.  For example, a DDL stmt via WebHCat with       * a doAs parameter, forks to 'hcat' which needs to start a Session that       * proxies the end user       */
return|return
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|doAs
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
return|;
block|}
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
comment|/**    * Dynamically sets up the JAAS configuration that uses kerberos    * @param principal    * @param keyTabFile    * @throws IOException    */
specifier|public
specifier|static
name|void
name|setZookeeperClientKerberosJaasConfig
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|keyTabFile
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ZooKeeper property name to pick the correct JAAS conf section
specifier|final
name|String
name|SASL_LOGIN_CONTEXT_NAME
init|=
literal|"HiveZooKeeperClient"
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|ZooKeeperSaslClient
operator|.
name|LOGIN_CONTEXT_NAME_KEY
argument_list|,
name|SASL_LOGIN_CONTEXT_NAME
argument_list|)
expr_stmt|;
name|principal
operator|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|principal
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|JaasConfiguration
name|jaasConf
init|=
operator|new
name|JaasConfiguration
argument_list|(
name|SASL_LOGIN_CONTEXT_NAME
argument_list|,
name|principal
argument_list|,
name|keyTabFile
argument_list|)
decl_stmt|;
comment|// Install the Configuration in the runtime.
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
operator|.
name|setConfiguration
argument_list|(
name|jaasConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * A JAAS configuration for ZooKeeper clients intended to use for SASL    * Kerberos.    */
specifier|private
specifier|static
class|class
name|JaasConfiguration
extends|extends
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
block|{
comment|// Current installed Configuration
specifier|private
specifier|static
specifier|final
name|boolean
name|IBM_JAVA
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
name|baseConfig
init|=
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|loginContextName
decl_stmt|;
specifier|private
specifier|final
name|String
name|principal
decl_stmt|;
specifier|private
specifier|final
name|String
name|keyTabFile
decl_stmt|;
specifier|public
name|JaasConfiguration
parameter_list|(
name|String
name|hiveLoginContextName
parameter_list|,
name|String
name|principal
parameter_list|,
name|String
name|keyTabFile
parameter_list|)
block|{
name|this
operator|.
name|loginContextName
operator|=
name|hiveLoginContextName
expr_stmt|;
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
name|this
operator|.
name|keyTabFile
operator|=
name|keyTabFile
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|appName
parameter_list|)
block|{
if|if
condition|(
name|loginContextName
operator|.
name|equals
argument_list|(
name|appName
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|krbOptions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|IBM_JAVA
condition|)
block|{
name|krbOptions
operator|.
name|put
argument_list|(
literal|"credsType"
argument_list|,
literal|"both"
argument_list|)
expr_stmt|;
name|krbOptions
operator|.
name|put
argument_list|(
literal|"useKeytab"
argument_list|,
name|keyTabFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|krbOptions
operator|.
name|put
argument_list|(
literal|"doNotPrompt"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|krbOptions
operator|.
name|put
argument_list|(
literal|"storeKey"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|krbOptions
operator|.
name|put
argument_list|(
literal|"useKeyTab"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|krbOptions
operator|.
name|put
argument_list|(
literal|"keyTab"
argument_list|,
name|keyTabFile
argument_list|)
expr_stmt|;
block|}
name|krbOptions
operator|.
name|put
argument_list|(
literal|"principal"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|krbOptions
operator|.
name|put
argument_list|(
literal|"refreshKrb5Config"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|AppConfigurationEntry
name|hiveZooKeeperClientEntry
init|=
operator|new
name|AppConfigurationEntry
argument_list|(
name|KerberosUtil
operator|.
name|getKrb5LoginModuleName
argument_list|()
argument_list|,
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|krbOptions
argument_list|)
decl_stmt|;
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
name|hiveZooKeeperClientEntry
block|}
return|;
block|}
comment|// Try the base config
if|if
condition|(
name|baseConfig
operator|!=
literal|null
condition|)
block|{
return|return
name|baseConfig
operator|.
name|getAppConfigurationEntry
argument_list|(
name|appName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Get the string form of the token given a token signature. The signature is used as the value of    * the "service" field in the token for lookup. Ref: AbstractDelegationTokenSelector in Hadoop. If    * there exists such a token in the token cache (credential store) of the job, the lookup returns    * that. This is relevant only when running against a "secure" hadoop release The method gets hold    * of the tokens if they are set up by hadoop - this should happen on the map/reduce tasks if the    * client added the tokens into hadoop's credential store in the front end during job submission.    * The method will select the hive delegation token among the set of tokens and return the string    * form of it    *     * @param tokenSignature    * @return the string form of the token found    * @throws IOException    */
specifier|public
specifier|static
name|String
name|getTokenStrForm
parameter_list|(
name|String
name|tokenSignature
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|TokenSelector
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tokenSelector
init|=
operator|new
name|DelegationTokenSelector
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
init|=
name|tokenSelector
operator|.
name|selectToken
argument_list|(
name|tokenSignature
operator|==
literal|null
condition|?
operator|new
name|Text
argument_list|()
else|:
operator|new
name|Text
argument_list|(
name|tokenSignature
argument_list|)
argument_list|,
name|ugi
operator|.
name|getTokens
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|token
operator|!=
literal|null
condition|?
name|token
operator|.
name|encodeToUrlString
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**    * Create a delegation token object for the given token string and service. Add the token to given    * UGI    *     * @param ugi    * @param tokenStr    * @param tokenService    * @throws IOException    */
specifier|public
specifier|static
name|void
name|setTokenStr
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|String
name|tokenStr
parameter_list|,
name|String
name|tokenService
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|delegationToken
init|=
name|createToken
argument_list|(
name|tokenStr
argument_list|,
name|tokenService
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|delegationToken
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new token using the given string and service    *     * @param tokenStr    * @param tokenService    * @return    * @throws IOException    */
specifier|private
specifier|static
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|createToken
parameter_list|(
name|String
name|tokenStr
parameter_list|,
name|String
name|tokenService
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|delegationToken
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|delegationToken
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenStr
argument_list|)
expr_stmt|;
name|delegationToken
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
name|tokenService
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|delegationToken
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_STORE_CLS
init|=
literal|"hive.cluster.delegation.token.store.class"
decl_stmt|;
comment|/**    * This method should be used to return the metastore specific tokenstore class name to main    * backwards compatibility    *     * @param conf - HiveConf object    * @return the tokenStoreClass name from the HiveConf. It maps the hive specific tokenstoreclass    *         name to metastore module specific class name. For eg:    *         hive.cluster.delegation.token.store.class is set to    *         org.apache.hadoop.hive.thrift.MemoryTokenStore it returns the equivalent tokenstore    *         class defined in the metastore module which is    *         org.apache.hadoop.hive.metastore.security.MemoryTokenStore Similarly,    *         org.apache.hadoop.hive.thrift.DBTokenStore maps to    *         org.apache.hadoop.hive.metastore.security.DBTokenStore and    *         org.apache.hadoop.hive.thrift.ZooKeeperTokenStore maps to    *         org.apache.hadoop.hive.metastore.security.ZooKeeperTokenStore    */
specifier|public
specifier|static
name|String
name|getTokenStoreClassName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|tokenStoreClass
init|=
name|conf
operator|.
name|get
argument_list|(
name|DELEGATION_TOKEN_STORE_CLS
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|tokenStoreClass
argument_list|)
condition|)
block|{
comment|// default tokenstore is MemoryTokenStore
return|return
name|MemoryTokenStore
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
switch|switch
condition|(
name|tokenStoreClass
condition|)
block|{
case|case
literal|"org.apache.hadoop.hive.thrift.DBTokenStore"
case|:
return|return
name|DBTokenStore
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
case|case
literal|"org.apache.hadoop.hive.thrift.MemoryTokenStore"
case|:
return|return
name|MemoryTokenStore
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
case|case
literal|"org.apache.hadoop.hive.thrift.ZooKeeperTokenStore"
case|:
return|return
name|ZooKeeperTokenStore
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
default|default:
return|return
name|tokenStoreClass
return|;
block|}
block|}
comment|/**    * @return the user name set in hadoop.job.ugi param or the current user from System    * @throws IOException if underlying Hadoop call throws LoginException    */
specifier|public
specifier|static
name|String
name|getUser
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|getUGI
argument_list|()
decl_stmt|;
return|return
name|ugi
operator|.
name|getUserName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|le
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|le
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|TServerSocket
name|getServerSocket
parameter_list|(
name|String
name|hiveHost
parameter_list|,
name|int
name|portNum
parameter_list|)
throws|throws
name|TTransportException
block|{
name|InetSocketAddress
name|serverAddress
decl_stmt|;
if|if
condition|(
name|hiveHost
operator|==
literal|null
operator|||
name|hiveHost
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Wildcard bind
name|serverAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|portNum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|hiveHost
argument_list|,
name|portNum
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TServerSocket
argument_list|(
name|serverAddress
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TServerSocket
name|getServerSSLSocket
parameter_list|(
name|String
name|hiveHost
parameter_list|,
name|int
name|portNum
parameter_list|,
name|String
name|keyStorePath
parameter_list|,
name|String
name|keyStorePassWord
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|sslVersionBlacklist
parameter_list|)
throws|throws
name|TTransportException
throws|,
name|UnknownHostException
block|{
name|TSSLTransportFactory
operator|.
name|TSSLTransportParameters
name|params
init|=
operator|new
name|TSSLTransportFactory
operator|.
name|TSSLTransportParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setKeyStore
argument_list|(
name|keyStorePath
argument_list|,
name|keyStorePassWord
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|serverAddress
decl_stmt|;
if|if
condition|(
name|hiveHost
operator|==
literal|null
operator|||
name|hiveHost
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Wildcard bind
name|serverAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|portNum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|hiveHost
argument_list|,
name|portNum
argument_list|)
expr_stmt|;
block|}
name|TServerSocket
name|thriftServerSocket
init|=
name|TSSLTransportFactory
operator|.
name|getServerSocket
argument_list|(
name|portNum
argument_list|,
literal|0
argument_list|,
name|serverAddress
operator|.
name|getAddress
argument_list|()
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|thriftServerSocket
operator|.
name|getServerSocket
argument_list|()
operator|instanceof
name|SSLServerSocket
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sslVersionBlacklistLocal
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|sslVersion
range|:
name|sslVersionBlacklist
control|)
block|{
name|sslVersionBlacklistLocal
operator|.
name|add
argument_list|(
name|sslVersion
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SSLServerSocket
name|sslServerSocket
init|=
operator|(
name|SSLServerSocket
operator|)
name|thriftServerSocket
operator|.
name|getServerSocket
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|enabledProtocols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|protocol
range|:
name|sslServerSocket
operator|.
name|getEnabledProtocols
argument_list|()
control|)
block|{
if|if
condition|(
name|sslVersionBlacklistLocal
operator|.
name|contains
argument_list|(
name|protocol
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Disabling SSL Protocol: "
operator|+
name|protocol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|enabledProtocols
operator|.
name|add
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
block|}
name|sslServerSocket
operator|.
name|setEnabledProtocols
argument_list|(
name|enabledProtocols
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SSL Server Socket Enabled Protocols: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|sslServerSocket
operator|.
name|getEnabledProtocols
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|thriftServerSocket
return|;
block|}
block|}
end_class

end_unit

