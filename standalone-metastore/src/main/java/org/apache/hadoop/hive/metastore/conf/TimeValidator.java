begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
specifier|public
class|class
name|TimeValidator
implements|implements
name|Validator
block|{
specifier|private
specifier|final
name|TimeUnit
name|unit
decl_stmt|;
specifier|private
specifier|final
name|Long
name|min
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|minInclusive
decl_stmt|;
specifier|private
specifier|final
name|Long
name|max
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|maxInclusive
decl_stmt|;
specifier|public
name|TimeValidator
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
name|this
argument_list|(
name|unit
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimeValidator
parameter_list|(
name|TimeUnit
name|unit
parameter_list|,
name|Long
name|min
parameter_list|,
name|boolean
name|minInclusive
parameter_list|,
name|Long
name|max
parameter_list|,
name|boolean
name|maxInclusive
parameter_list|)
block|{
name|this
operator|.
name|unit
operator|=
name|unit
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|minInclusive
operator|=
name|minInclusive
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|maxInclusive
operator|=
name|maxInclusive
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|String
name|value
parameter_list|)
block|{
comment|// First just check that this translates
name|TimeUnit
name|defaultUnit
init|=
name|unit
decl_stmt|;
name|long
name|time
init|=
name|MetastoreConf
operator|.
name|convertTimeStr
argument_list|(
name|value
argument_list|,
name|defaultUnit
argument_list|,
name|defaultUnit
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|minInclusive
condition|?
name|time
operator|<
name|min
else|:
name|time
operator|<=
name|min
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
operator|+
literal|" is smaller than minimum "
operator|+
name|min
operator|+
name|MetastoreConf
operator|.
name|timeAbbreviationFor
argument_list|(
name|defaultUnit
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxInclusive
condition|?
name|time
operator|>
name|max
else|:
name|time
operator|>=
name|max
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
operator|+
literal|" is larger than maximum "
operator|+
name|max
operator|+
name|MetastoreConf
operator|.
name|timeAbbreviationFor
argument_list|(
name|defaultUnit
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|String
name|timeString
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
return|return
name|time
operator|+
literal|" "
operator|+
name|MetastoreConf
operator|.
name|timeAbbreviationFor
argument_list|(
name|timeUnit
argument_list|)
return|;
block|}
block|}
end_class

end_unit

