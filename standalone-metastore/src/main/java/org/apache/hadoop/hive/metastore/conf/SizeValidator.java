begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
package|;
end_package

begin_class
specifier|public
class|class
name|SizeValidator
implements|implements
name|Validator
block|{
specifier|private
specifier|final
name|Long
name|min
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|minInclusive
decl_stmt|;
specifier|private
specifier|final
name|Long
name|max
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|maxInclusive
decl_stmt|;
specifier|public
name|SizeValidator
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SizeValidator
parameter_list|(
name|Long
name|min
parameter_list|,
name|boolean
name|minInclusive
parameter_list|,
name|Long
name|max
parameter_list|,
name|boolean
name|maxInclusive
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|minInclusive
operator|=
name|minInclusive
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|maxInclusive
operator|=
name|maxInclusive
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|long
name|size
init|=
name|toSizeBytes
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
operator|&&
operator|(
name|minInclusive
condition|?
name|size
operator|<
name|min
else|:
name|size
operator|<=
name|min
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
operator|+
literal|" is smaller than minimum "
operator|+
name|min
operator|+
name|sizeString
argument_list|(
name|min
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|max
operator|!=
literal|null
operator|&&
operator|(
name|maxInclusive
condition|?
name|size
operator|>
name|max
else|:
name|size
operator|>=
name|max
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
operator|+
literal|" is larger than maximum "
operator|+
name|max
operator|+
name|sizeString
argument_list|(
name|max
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|toDescription
parameter_list|()
block|{
name|String
name|description
init|=
literal|"Expects a byte size value with unit (blank for bytes, kb, mb, gb, tb, pb)"
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
operator|&&
name|max
operator|!=
literal|null
condition|)
block|{
name|description
operator|+=
literal|".\nThe size should be in between "
operator|+
name|sizeString
argument_list|(
name|min
argument_list|)
operator|+
operator|(
name|minInclusive
condition|?
literal|" (inclusive)"
else|:
literal|" (exclusive)"
operator|)
operator|+
literal|" and "
operator|+
name|sizeString
argument_list|(
name|max
argument_list|)
operator|+
operator|(
name|maxInclusive
condition|?
literal|" (inclusive)"
else|:
literal|" (exclusive)"
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
name|description
operator|+=
literal|".\nThe time should be bigger than "
operator|+
operator|(
name|minInclusive
condition|?
literal|"or equal to "
else|:
literal|""
operator|)
operator|+
name|sizeString
argument_list|(
name|min
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
name|description
operator|+=
literal|".\nThe size should be smaller than "
operator|+
operator|(
name|maxInclusive
condition|?
literal|"or equal to "
else|:
literal|""
operator|)
operator|+
name|sizeString
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
return|return
name|description
return|;
block|}
specifier|private
name|String
name|sizeString
parameter_list|(
name|long
name|size
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|units
init|=
block|{
literal|" bytes"
block|,
literal|"Kb"
block|,
literal|"Mb"
block|,
literal|"Gb"
block|,
literal|"Tb"
block|}
decl_stmt|;
name|long
name|current
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
argument_list|<
name|units
operator|.
name|length
operator|&&
name|current
argument_list|>
literal|0
condition|;
operator|++
name|i
control|)
block|{
name|long
name|next
init|=
name|current
operator|<<
literal|10
decl_stmt|;
if|if
condition|(
operator|(
name|size
operator|&
operator|(
name|next
operator|-
literal|1
operator|)
operator|)
operator|!=
literal|0
condition|)
return|return
call|(
name|long
call|)
argument_list|(
name|size
operator|/
name|current
argument_list|)
operator|+
name|units
index|[
name|i
index|]
return|;
name|current
operator|=
name|next
expr_stmt|;
block|}
return|return
name|current
operator|>
literal|0
condition|?
operator|(
call|(
name|long
call|)
argument_list|(
name|size
operator|/
name|current
argument_list|)
operator|+
literal|"Pb"
operator|)
else|:
operator|(
name|size
operator|+
name|units
index|[
literal|0
index|]
operator|)
return|;
block|}
specifier|public
specifier|static
name|long
name|toSizeBytes
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|String
index|[]
name|parsed
init|=
name|parseNumberFollowedByUnit
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|parsed
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
operator|*
name|multiplierFor
argument_list|(
name|parsed
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|parseNumberFollowedByUnit
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|char
index|[]
name|chars
init|=
name|value
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|chars
operator|.
name|length
operator|&&
operator|(
name|chars
index|[
name|i
index|]
operator|==
literal|'-'
operator|||
name|Character
operator|.
name|isDigit
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
operator|)
condition|;
name|i
operator|++
control|)
block|{     }
return|return
operator|new
name|String
index|[]
block|{
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
block|,
name|value
operator|.
name|substring
argument_list|(
name|i
argument_list|)
block|}
return|;
block|}
specifier|private
specifier|static
name|long
name|multiplierFor
parameter_list|(
name|String
name|unit
parameter_list|)
block|{
name|unit
operator|=
name|unit
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|unit
operator|.
name|isEmpty
argument_list|()
operator|||
name|unit
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|||
name|unit
operator|.
name|equals
argument_list|(
literal|"bytes"
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|unit
operator|.
name|equals
argument_list|(
literal|"kb"
argument_list|)
condition|)
block|{
return|return
literal|1024
return|;
block|}
elseif|else
if|if
condition|(
name|unit
operator|.
name|equals
argument_list|(
literal|"mb"
argument_list|)
condition|)
block|{
return|return
literal|1024
operator|*
literal|1024
return|;
block|}
elseif|else
if|if
condition|(
name|unit
operator|.
name|equals
argument_list|(
literal|"gb"
argument_list|)
condition|)
block|{
return|return
literal|1024
operator|*
literal|1024
operator|*
literal|1024
return|;
block|}
elseif|else
if|if
condition|(
name|unit
operator|.
name|equals
argument_list|(
literal|"tb"
argument_list|)
condition|)
block|{
return|return
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
return|;
block|}
elseif|else
if|if
condition|(
name|unit
operator|.
name|equals
argument_list|(
literal|"pb"
argument_list|)
condition|)
block|{
return|return
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid size unit "
operator|+
name|unit
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

