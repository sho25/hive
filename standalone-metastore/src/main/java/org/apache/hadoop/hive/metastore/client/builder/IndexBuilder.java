begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Builder for indices.  You must supply the database name and table name (or table reference), a  * name for the index, and whatever StorageDescriptorBuilder requires.  All other fields will be  * given reasonable defaults.  */
end_comment

begin_class
specifier|public
class|class
name|IndexBuilder
extends|extends
name|StorageDescriptorBuilder
argument_list|<
name|IndexBuilder
argument_list|>
block|{
specifier|private
name|String
name|dbName
decl_stmt|,
name|tableName
decl_stmt|,
name|indexName
decl_stmt|,
name|indexTableName
decl_stmt|,
name|handlerClass
decl_stmt|;
specifier|private
name|int
name|createTime
decl_stmt|,
name|lastAccessTime
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|indexParams
decl_stmt|;
specifier|private
name|boolean
name|deferredRebuild
decl_stmt|;
specifier|public
name|IndexBuilder
parameter_list|()
block|{
comment|// Set some reasonable defaults
name|indexParams
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|createTime
operator|=
name|lastAccessTime
operator|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|super
operator|.
name|setChild
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IndexBuilder
name|setDbName
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|IndexBuilder
name|setTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|IndexBuilder
name|setDbAndTableName
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|table
operator|.
name|getDbName
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|table
operator|.
name|getTableName
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|IndexBuilder
name|setCreateTime
parameter_list|(
name|int
name|createTime
parameter_list|)
block|{
name|this
operator|.
name|createTime
operator|=
name|createTime
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|IndexBuilder
name|setLastAccessTime
parameter_list|(
name|int
name|lastAccessTime
parameter_list|)
block|{
name|this
operator|.
name|lastAccessTime
operator|=
name|lastAccessTime
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|IndexBuilder
name|setIndexParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|indexParams
parameter_list|)
block|{
name|this
operator|.
name|indexParams
operator|=
name|indexParams
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|IndexBuilder
name|setIndexName
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|IndexBuilder
name|setIndexTableName
parameter_list|(
name|String
name|indexTableName
parameter_list|)
block|{
name|this
operator|.
name|indexTableName
operator|=
name|indexTableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|IndexBuilder
name|setHandlerClass
parameter_list|(
name|String
name|handlerClass
parameter_list|)
block|{
name|this
operator|.
name|handlerClass
operator|=
name|handlerClass
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|IndexBuilder
name|setDeferredRebuild
parameter_list|(
name|boolean
name|deferredRebuild
parameter_list|)
block|{
name|this
operator|.
name|deferredRebuild
operator|=
name|deferredRebuild
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Index
name|build
parameter_list|()
throws|throws
name|MetaException
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
operator|||
name|tableName
operator|==
literal|null
operator|||
name|indexName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"You must provide database name, table name, and index name"
argument_list|)
throw|;
block|}
if|if
condition|(
name|indexTableName
operator|==
literal|null
condition|)
name|indexTableName
operator|=
name|tableName
operator|+
literal|"_"
operator|+
name|indexName
operator|+
literal|"_table"
expr_stmt|;
return|return
operator|new
name|Index
argument_list|(
name|indexName
argument_list|,
name|handlerClass
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|createTime
argument_list|,
name|lastAccessTime
argument_list|,
name|indexTableName
argument_list|,
name|buildSd
argument_list|()
argument_list|,
name|indexParams
argument_list|,
name|deferredRebuild
argument_list|)
return|;
block|}
block|}
end_class

end_unit

