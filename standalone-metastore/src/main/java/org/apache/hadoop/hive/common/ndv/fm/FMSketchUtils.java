begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ndv
operator|.
name|fm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javolution
operator|.
name|util
operator|.
name|FastBitSet
import|;
end_import

begin_class
specifier|public
class|class
name|FMSketchUtils
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FMSketch
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|MAGIC
init|=
operator|new
name|byte
index|[]
block|{
literal|'F'
block|,
literal|'M'
block|}
decl_stmt|;
comment|/*    * Serializes a distinctValueEstimator object to Text for transport.    *    *<b>4 byte header</b> is encoded like below 2 bytes - FM magic string to    * identify serialized stream 2 bytes - numbitvectors because    * BIT_VECTOR_SIZE=31, 4 bytes are enough to hold positions of 0-31    */
specifier|public
specifier|static
name|void
name|serializeFM
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|FMSketch
name|fm
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|MAGIC
argument_list|)
expr_stmt|;
comment|// max of numBitVectors = 1024, 2 bytes is enough.
name|byte
index|[]
name|nbv
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|nbv
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|fm
operator|.
name|getNumBitVectors
argument_list|()
expr_stmt|;
name|nbv
index|[
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|fm
operator|.
name|getNumBitVectors
argument_list|()
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|nbv
argument_list|)
expr_stmt|;
comment|// original toString takes too much space
comment|// we compress a fastbitset to 4 bytes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fm
operator|.
name|getNumBitVectors
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|writeBitVector
argument_list|(
name|out
argument_list|,
name|fm
operator|.
name|getBitVector
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// BIT_VECTOR_SIZE is 31, we can use 32 bits, i.e., 4 bytes to represent a
comment|// FastBitSet, rather than using 31 integers.
specifier|private
specifier|static
name|void
name|writeBitVector
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|FastBitSet
name|bit
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|FMSketch
operator|.
name|BIT_VECTOR_SIZE
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|bit
operator|.
name|get
argument_list|(
name|pos
argument_list|)
condition|)
block|{
name|num
operator||=
literal|1
operator|<<
name|pos
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|i
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|4
condition|;
name|j
operator|++
control|)
block|{
name|i
index|[
name|j
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|num
operator|>>>
operator|(
literal|8
operator|*
name|j
operator|)
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|/*    * Deserializes from string to FastBitSet; Creates a NumDistinctValueEstimator    * object and returns it.    */
specifier|public
specifier|static
name|FMSketch
name|deserializeFM
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
try|try
block|{
name|FMSketch
name|sketch
init|=
name|deserializeFM
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|sketch
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|FMSketch
name|deserializeFM
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|checkMagicString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|byte
index|[]
name|nbv
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|nbv
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|nbv
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|int
name|numBitVectors
init|=
literal|0
decl_stmt|;
name|numBitVectors
operator||=
operator|(
name|nbv
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
name|numBitVectors
operator||=
operator|(
operator|(
name|nbv
index|[
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
expr_stmt|;
name|FMSketch
name|sketch
init|=
operator|new
name|FMSketch
argument_list|(
name|numBitVectors
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|numBitVectors
condition|;
name|n
operator|++
control|)
block|{
name|sketch
operator|.
name|setBitVector
argument_list|(
name|readBitVector
argument_list|(
name|in
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|sketch
return|;
block|}
specifier|private
specifier|static
name|FastBitSet
name|readBitVector
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|FastBitSet
name|fastBitSet
init|=
operator|new
name|FastBitSet
argument_list|()
decl_stmt|;
name|fastBitSet
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|8
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|b
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|fastBitSet
operator|.
name|set
argument_list|(
name|j
operator|+
literal|8
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|fastBitSet
return|;
block|}
specifier|private
specifier|static
name|void
name|checkMagicString
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|magic
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|magic
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|magic
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|magic
argument_list|,
name|MAGIC
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The input stream is not a FMSketch stream."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

