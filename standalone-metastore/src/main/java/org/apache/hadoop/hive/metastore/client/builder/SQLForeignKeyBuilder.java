begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Builder for {@link SQLForeignKey}.  Requires what {@link ConstraintBuilder} requires, plus  * primary key  * database, table, column and name.  */
end_comment

begin_class
specifier|public
class|class
name|SQLForeignKeyBuilder
extends|extends
name|ConstraintBuilder
argument_list|<
name|SQLForeignKeyBuilder
argument_list|>
block|{
specifier|private
name|String
name|pkDb
decl_stmt|,
name|pkTable
decl_stmt|,
name|pkName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|pkColumns
decl_stmt|;
specifier|private
name|int
name|updateRule
decl_stmt|,
name|deleteRule
decl_stmt|;
specifier|public
name|SQLForeignKeyBuilder
parameter_list|()
block|{
name|super
operator|.
name|setChild
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|updateRule
operator|=
name|deleteRule
operator|=
literal|0
expr_stmt|;
name|pkColumns
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|pkDb
operator|=
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
expr_stmt|;
block|}
specifier|public
name|SQLForeignKeyBuilder
name|setPkDb
parameter_list|(
name|String
name|pkDb
parameter_list|)
block|{
name|this
operator|.
name|pkDb
operator|=
name|pkDb
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SQLForeignKeyBuilder
name|setPkTable
parameter_list|(
name|String
name|pkTable
parameter_list|)
block|{
name|this
operator|.
name|pkTable
operator|=
name|pkTable
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SQLForeignKeyBuilder
name|addPkColumn
parameter_list|(
name|String
name|pkColumn
parameter_list|)
block|{
name|pkColumns
operator|.
name|add
argument_list|(
name|pkColumn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SQLForeignKeyBuilder
name|setPkName
parameter_list|(
name|String
name|pkName
parameter_list|)
block|{
name|this
operator|.
name|pkName
operator|=
name|pkName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SQLForeignKeyBuilder
name|fromPrimaryKey
parameter_list|(
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
parameter_list|)
block|{
name|pkDb
operator|=
name|pk
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
expr_stmt|;
name|pkTable
operator|=
name|pk
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
expr_stmt|;
for|for
control|(
name|SQLPrimaryKey
name|pkcol
range|:
name|pk
control|)
name|pkColumns
operator|.
name|add
argument_list|(
name|pkcol
operator|.
name|getColumn_name
argument_list|()
argument_list|)
expr_stmt|;
name|pkName
operator|=
name|pk
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPk_name
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SQLForeignKeyBuilder
name|setUpdateRule
parameter_list|(
name|int
name|updateRule
parameter_list|)
block|{
name|this
operator|.
name|updateRule
operator|=
name|updateRule
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SQLForeignKeyBuilder
name|setDeleteRule
parameter_list|(
name|int
name|deleteRule
parameter_list|)
block|{
name|this
operator|.
name|deleteRule
operator|=
name|deleteRule
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|build
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|MetaException
block|{
name|checkBuildable
argument_list|(
literal|"to_"
operator|+
name|pkTable
operator|+
literal|"_foreign_key"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|pkTable
operator|==
literal|null
operator|||
name|pkColumns
operator|.
name|isEmpty
argument_list|()
operator|||
name|pkName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"You must provide the primary key table, columns, and name"
argument_list|)
throw|;
block|}
if|if
condition|(
name|columns
operator|.
name|size
argument_list|()
operator|!=
name|pkColumns
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"The number of foreign columns must match the number of primary key"
operator|+
literal|" columns"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fk
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|columns
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SQLForeignKey
name|keyCol
init|=
operator|new
name|SQLForeignKey
argument_list|(
name|pkDb
argument_list|,
name|pkTable
argument_list|,
name|pkColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|getNextSeq
argument_list|()
argument_list|,
name|updateRule
argument_list|,
name|deleteRule
argument_list|,
name|constraintName
argument_list|,
name|pkName
argument_list|,
name|enable
argument_list|,
name|validate
argument_list|,
name|rely
argument_list|)
decl_stmt|;
name|keyCol
operator|.
name|setCatName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|fk
operator|.
name|add
argument_list|(
name|keyCol
argument_list|)
expr_stmt|;
block|}
return|return
name|fk
return|;
block|}
block|}
end_class

end_unit

