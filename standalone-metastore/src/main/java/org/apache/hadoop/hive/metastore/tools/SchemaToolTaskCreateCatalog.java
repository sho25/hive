begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|normalizeIdentifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Print Hive version and schema version.  */
end_comment

begin_class
class|class
name|SchemaToolTaskCreateCatalog
extends|extends
name|SchemaToolTask
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SchemaToolTaskCreateCatalog
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|catName
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|;
specifier|private
name|String
name|description
decl_stmt|;
specifier|private
name|boolean
name|ifNotExists
decl_stmt|;
annotation|@
name|Override
name|void
name|setCommandLineArguments
parameter_list|(
name|SchemaToolCommandLine
name|cl
parameter_list|)
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"createCatalog"
argument_list|)
argument_list|)
expr_stmt|;
name|location
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"catalogLocation"
argument_list|)
expr_stmt|;
name|description
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
literal|"catalogDescription"
argument_list|)
expr_stmt|;
name|ifNotExists
operator|=
name|cl
operator|.
name|hasOption
argument_list|(
literal|"ifNotExists"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Create catalog "
operator|+
name|catName
operator|+
literal|" at location "
operator|+
name|location
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|schemaTool
operator|.
name|getConnectionToMetastore
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
comment|// If they set ifNotExists check for existence first, and bail if it exists.  This is
comment|// more reliable then attempting to parse the error message from the SQLException.
if|if
condition|(
name|ifNotExists
operator|&&
name|catalogExists
argument_list|(
name|stmt
argument_list|)
condition|)
block|{
return|return;
block|}
name|int
name|catNum
init|=
name|getNextCatalogId
argument_list|(
name|stmt
argument_list|)
decl_stmt|;
name|addCatalog
argument_list|(
name|conn
argument_list|,
name|stmt
argument_list|,
name|catNum
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to add catalog"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|conn
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Not really much we can do here.
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to rollback, everything will probably go bad from here."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|CATALOG_EXISTS_QUERY
init|=
literal|"select<q>NAME<q> "
operator|+
literal|"  from<q>CTLGS<q> "
operator|+
literal|" where<q>NAME<q> = '%s'"
decl_stmt|;
specifier|private
name|boolean
name|catalogExists
parameter_list|(
name|Statement
name|stmt
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|query
init|=
name|String
operator|.
name|format
argument_list|(
name|schemaTool
operator|.
name|quote
argument_list|(
name|CATALOG_EXISTS_QUERY
argument_list|)
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to run "
operator|+
name|query
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
init|)
block|{
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Catalog "
operator|+
name|catName
operator|+
literal|" already exists"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|NEXT_CATALOG_ID_QUERY
init|=
literal|"select max(<q>CTLG_ID<q>) "
operator|+
literal|"  from<q>CTLGS<q>"
decl_stmt|;
specifier|private
name|int
name|getNextCatalogId
parameter_list|(
name|Statement
name|stmt
parameter_list|)
throws|throws
name|SQLException
throws|,
name|HiveMetaException
block|{
name|String
name|query
init|=
name|schemaTool
operator|.
name|quote
argument_list|(
name|NEXT_CATALOG_ID_QUERY
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to run "
operator|+
name|query
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"No catalogs found, have you upgraded the database?"
argument_list|)
throw|;
block|}
name|int
name|nextId
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// We need to stay out of the way of any sequences used by the underlying database.
comment|// Otherwise the next time the client tries to add a catalog we'll get an error.
comment|// There should never be billions of catalogs, so we'll shift our sequence number up
comment|// there to avoid clashes.
name|int
name|floor
init|=
literal|1
operator|<<
literal|30
decl_stmt|;
return|return
name|Math
operator|.
name|max
argument_list|(
name|nextId
argument_list|,
name|floor
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|ADD_CATALOG_STMT
init|=
literal|"insert into<q>CTLGS<q> (<q>CTLG_ID<q>,<q>NAME<q>,<qa>DESC<qa>,<q>LOCATION_URI<q>) "
operator|+
literal|"     values (%d, '%s', '%s', '%s')"
decl_stmt|;
specifier|private
name|void
name|addCatalog
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Statement
name|stmt
parameter_list|,
name|int
name|catNum
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|update
init|=
name|String
operator|.
name|format
argument_list|(
name|schemaTool
operator|.
name|quote
argument_list|(
name|ADD_CATALOG_STMT
argument_list|)
argument_list|,
name|catNum
argument_list|,
name|catName
argument_list|,
name|description
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to run "
operator|+
name|update
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

