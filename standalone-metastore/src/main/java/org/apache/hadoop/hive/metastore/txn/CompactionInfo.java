begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidCompactorWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableValidWriteIds
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_comment
comment|/**  * Information on a possible or running compaction.  */
end_comment

begin_class
specifier|public
class|class
name|CompactionInfo
implements|implements
name|Comparable
argument_list|<
name|CompactionInfo
argument_list|>
block|{
specifier|public
name|long
name|id
decl_stmt|;
specifier|public
name|String
name|dbname
decl_stmt|;
specifier|public
name|String
name|tableName
decl_stmt|;
specifier|public
name|String
name|partName
decl_stmt|;
name|char
name|state
decl_stmt|;
specifier|public
name|CompactionType
name|type
decl_stmt|;
name|String
name|workerId
decl_stmt|;
name|long
name|start
decl_stmt|;
specifier|public
name|String
name|runAs
decl_stmt|;
specifier|public
name|String
name|properties
decl_stmt|;
specifier|public
name|boolean
name|tooManyAborts
init|=
literal|false
decl_stmt|;
comment|/**    * {@code 0} means it wasn't set (e.g. in case of upgrades, since ResultSet.getLong() will return 0 if field is NULL)     * See {@link TxnStore#setCompactionHighestWriteId(CompactionInfo, long)} for precise definition.    * See also {@link TxnUtils#createValidCompactWriteIdList(TableValidWriteIds)} and    * {@link ValidCompactorWriteIdList#highWatermark}.    */
specifier|public
name|long
name|highestWriteId
decl_stmt|;
name|byte
index|[]
name|metaInfo
decl_stmt|;
name|String
name|hadoopJobId
decl_stmt|;
specifier|private
name|String
name|fullPartitionName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|fullTableName
init|=
literal|null
decl_stmt|;
specifier|public
name|CompactionInfo
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|CompactionType
name|type
parameter_list|)
block|{
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|partName
operator|=
name|partName
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
name|CompactionInfo
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|char
name|state
parameter_list|)
block|{
name|this
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
name|CompactionInfo
parameter_list|()
block|{}
specifier|public
name|String
name|getFullPartitionName
parameter_list|()
block|{
if|if
condition|(
name|fullPartitionName
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|partName
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|partName
argument_list|)
expr_stmt|;
block|}
name|fullPartitionName
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|fullPartitionName
return|;
block|}
specifier|public
name|String
name|getFullTableName
parameter_list|()
block|{
if|if
condition|(
name|fullTableName
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|fullTableName
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|fullTableName
return|;
block|}
specifier|public
name|boolean
name|isMajorCompaction
parameter_list|()
block|{
return|return
name|CompactionType
operator|.
name|MAJOR
operator|==
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|CompactionInfo
name|o
parameter_list|)
block|{
return|return
name|getFullPartitionName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getFullPartitionName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"id:"
operator|+
name|id
operator|+
literal|","
operator|+
literal|"dbname:"
operator|+
name|dbname
operator|+
literal|","
operator|+
literal|"tableName:"
operator|+
name|tableName
operator|+
literal|","
operator|+
literal|"partName:"
operator|+
name|partName
operator|+
literal|","
operator|+
literal|"state:"
operator|+
name|state
operator|+
literal|","
operator|+
literal|"type:"
operator|+
name|type
operator|+
literal|","
operator|+
literal|"properties:"
operator|+
name|properties
operator|+
literal|","
operator|+
literal|"runAs:"
operator|+
name|runAs
operator|+
literal|","
operator|+
literal|"tooManyAborts:"
operator|+
name|tooManyAborts
operator|+
literal|","
operator|+
literal|"highestWriteId:"
operator|+
name|highestWriteId
return|;
block|}
comment|/**    * loads object from a row in Select * from COMPACTION_QUEUE    * @param rs ResultSet after call to rs.next()    * @throws SQLException    */
specifier|static
name|CompactionInfo
name|loadFullFromCompactionQueue
parameter_list|(
name|ResultSet
name|rs
parameter_list|)
throws|throws
name|SQLException
block|{
name|CompactionInfo
name|fullCi
init|=
operator|new
name|CompactionInfo
argument_list|()
decl_stmt|;
name|fullCi
operator|.
name|id
operator|=
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fullCi
operator|.
name|dbname
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fullCi
operator|.
name|tableName
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fullCi
operator|.
name|partName
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|fullCi
operator|.
name|state
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//cq_state
name|fullCi
operator|.
name|type
operator|=
name|TxnHandler
operator|.
name|dbCompactionType2ThriftType
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fullCi
operator|.
name|properties
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|fullCi
operator|.
name|workerId
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|fullCi
operator|.
name|start
operator|=
name|rs
operator|.
name|getLong
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|fullCi
operator|.
name|runAs
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|fullCi
operator|.
name|highestWriteId
operator|=
name|rs
operator|.
name|getLong
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|fullCi
operator|.
name|metaInfo
operator|=
name|rs
operator|.
name|getBytes
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|fullCi
operator|.
name|hadoopJobId
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|13
argument_list|)
expr_stmt|;
return|return
name|fullCi
return|;
block|}
specifier|static
name|void
name|insertIntoCompletedCompactions
parameter_list|(
name|PreparedStatement
name|pStmt
parameter_list|,
name|CompactionInfo
name|ci
parameter_list|,
name|long
name|endTime
parameter_list|)
throws|throws
name|SQLException
block|{
name|pStmt
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|ci
operator|.
name|id
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|ci
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|ci
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|ci
operator|.
name|partName
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setString
argument_list|(
literal|5
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
name|ci
operator|.
name|state
argument_list|)
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
name|TxnHandler
operator|.
name|thriftCompactionType2DbType
argument_list|(
name|ci
operator|.
name|type
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setString
argument_list|(
literal|7
argument_list|,
name|ci
operator|.
name|properties
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setString
argument_list|(
literal|8
argument_list|,
name|ci
operator|.
name|workerId
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setLong
argument_list|(
literal|9
argument_list|,
name|ci
operator|.
name|start
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setLong
argument_list|(
literal|10
argument_list|,
name|endTime
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setString
argument_list|(
literal|11
argument_list|,
name|ci
operator|.
name|runAs
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setLong
argument_list|(
literal|12
argument_list|,
name|ci
operator|.
name|highestWriteId
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setBytes
argument_list|(
literal|13
argument_list|,
name|ci
operator|.
name|metaInfo
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setString
argument_list|(
literal|14
argument_list|,
name|ci
operator|.
name|hadoopJobId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

