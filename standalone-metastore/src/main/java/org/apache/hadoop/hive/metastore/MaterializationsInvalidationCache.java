begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BasicTxnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Materialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_comment
comment|/**  * This cache keeps information in memory about the table modifications so materialized views  * can verify their invalidation time, i.e., the moment after materialization on which the  * first transaction to the tables they used happened. This information is kept in memory  * to check the invalidation quickly. However, we store enough information in the metastore  * to bring this cache up if the metastore is restarted or would crashed. This cache lives  * in the metastore server.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MaterializationsInvalidationCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MaterializationsInvalidationCache
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/* Singleton */
specifier|private
specifier|static
specifier|final
name|MaterializationsInvalidationCache
name|SINGLETON
init|=
operator|new
name|MaterializationsInvalidationCache
argument_list|()
decl_stmt|;
comment|/* Key is the database name. Each value is a map from the unique view qualified name to    * the materialization invalidation info. This invalidation object contains information    * such as the tables used by the materialized view or the invalidation time, i.e., first    * modification of the tables used by materialized view after the view was created. */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|MaterializationInvalidationInfo
argument_list|>
argument_list|>
name|materializations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|MaterializationInvalidationInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/*    * Key is a qualified table name. The value is a (sorted) tree set (supporting concurrent    * modifications) that will keep the modifications for a given table in the order that they    * happen. This is useful to quickly check the invalidation time for a given materialized    * view.     */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ConcurrentSkipListSet
argument_list|<
name|TableModificationKey
argument_list|>
argument_list|>
name|tableModifications
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ConcurrentSkipListSet
argument_list|<
name|TableModificationKey
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* Whether the cache has been initialized or not. */
specifier|private
name|boolean
name|initialized
decl_stmt|;
comment|/* Store to answer calls not related to transactions. */
specifier|private
name|RawStore
name|store
decl_stmt|;
comment|/* Store to answer calls related to transactions. */
specifier|private
name|TxnStore
name|txnStore
decl_stmt|;
specifier|private
name|MaterializationsInvalidationCache
parameter_list|()
block|{   }
comment|/**    * Get instance of MaterializationsInvalidationCache.    *    * @return the singleton    */
specifier|public
specifier|static
name|MaterializationsInvalidationCache
name|get
parameter_list|()
block|{
return|return
name|SINGLETON
return|;
block|}
comment|/**    * Initialize the invalidation cache.    *    * The method is synchronized because we want to avoid initializing the invalidation cache    * multiple times in embedded mode. This will not happen when we run the metastore remotely    * as the method is called only once.    */
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
specifier|final
name|RawStore
name|store
parameter_list|,
specifier|final
name|TxnStore
name|txnStore
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|txnStore
operator|=
name|txnStore
expr_stmt|;
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Loader
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|Loader
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|String
name|dbName
range|:
name|store
operator|.
name|getAllDatabases
argument_list|()
control|)
block|{
for|for
control|(
name|Table
name|mv
range|:
name|store
operator|.
name|getTableObjectsByName
argument_list|(
name|dbName
argument_list|,
name|store
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MATERIALIZED_VIEW
argument_list|)
argument_list|)
control|)
block|{
name|addMaterializedView
argument_list|(
name|mv
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|mv
operator|.
name|getCreationMetadata
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|OpType
operator|.
name|LOAD
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized materializations invalidation cache"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Problem connecting to the metastore when initializing the view registry"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Adds a newly created materialized view to the cache.    *    * @param materializedViewTable the materialized view    * @param tablesUsed tables used by the materialized view    */
specifier|public
name|void
name|createMaterializedView
parameter_list|(
name|Table
name|materializedViewTable
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tablesUsed
parameter_list|)
block|{
name|addMaterializedView
argument_list|(
name|materializedViewTable
argument_list|,
name|tablesUsed
argument_list|,
name|OpType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Method to call when materialized view is modified.    *    * @param materializedViewTable the materialized view    * @param tablesUsed tables used by the materialized view    */
specifier|public
name|void
name|alterMaterializedView
parameter_list|(
name|Table
name|materializedViewTable
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tablesUsed
parameter_list|)
block|{
name|addMaterializedView
argument_list|(
name|materializedViewTable
argument_list|,
name|tablesUsed
argument_list|,
name|OpType
operator|.
name|ALTER
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds the materialized view to the cache.    *    * @param materializedViewTable the materialized view    * @param tablesUsed tables used by the materialized view    */
specifier|private
name|void
name|addMaterializedView
parameter_list|(
name|Table
name|materializedViewTable
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tablesUsed
parameter_list|,
name|OpType
name|opType
parameter_list|)
block|{
comment|// We are going to create the map for each view in the given database
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|MaterializationInvalidationInfo
argument_list|>
name|cq
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MaterializationInvalidationInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|MaterializationInvalidationInfo
argument_list|>
name|prevCq
init|=
name|materializations
operator|.
name|putIfAbsent
argument_list|(
name|materializedViewTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|cq
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevCq
operator|!=
literal|null
condition|)
block|{
name|cq
operator|=
name|prevCq
expr_stmt|;
block|}
comment|// Start the process to add materialization to the cache
comment|// Before loading the materialization in the cache, we need to update some
comment|// important information in the registry to account for rewriting invalidation
for|for
control|(
name|String
name|qNameTableUsed
range|:
name|tablesUsed
control|)
block|{
comment|// First we insert a new tree set to keep table modifications, unless it already exists
name|ConcurrentSkipListSet
argument_list|<
name|TableModificationKey
argument_list|>
name|modificationsTree
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<
name|TableModificationKey
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ConcurrentSkipListSet
argument_list|<
name|TableModificationKey
argument_list|>
name|prevModificationsTree
init|=
name|tableModifications
operator|.
name|putIfAbsent
argument_list|(
name|qNameTableUsed
argument_list|,
name|modificationsTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevModificationsTree
operator|!=
literal|null
condition|)
block|{
name|modificationsTree
operator|=
name|prevModificationsTree
expr_stmt|;
block|}
comment|// We obtain the access time to the table when the materialized view was created.
comment|// This is a map from table fully qualified name to last modification before MV creation.
name|BasicTxnInfo
name|e
init|=
name|materializedViewTable
operator|.
name|getCreationMetadata
argument_list|()
operator|.
name|get
argument_list|(
name|qNameTableUsed
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|isIsnull
argument_list|()
condition|)
block|{
comment|// This can happen when the materialized view was created on non-transactional tables
comment|// with rewrite disabled but then it was enabled by alter statement
continue|continue;
block|}
specifier|final
name|TableModificationKey
name|lastModificationBeforeCreation
init|=
operator|new
name|TableModificationKey
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|modificationsTree
operator|.
name|add
argument_list|(
name|lastModificationBeforeCreation
argument_list|)
expr_stmt|;
if|if
condition|(
name|opType
operator|==
name|OpType
operator|.
name|LOAD
condition|)
block|{
comment|// If we are not creating the MV at this instant, but instead it was created previously
comment|// and we are loading it into the cache, we need to go through the transaction logs and
comment|// check if the MV is still valid.
try|try
block|{
name|String
index|[]
name|names
init|=
name|qNameTableUsed
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|BasicTxnInfo
name|e2
init|=
name|txnStore
operator|.
name|getFirstCompletedTransactionForTableAfterCommit
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|,
name|names
index|[
literal|1
index|]
argument_list|,
name|lastModificationBeforeCreation
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|e2
operator|.
name|isIsnull
argument_list|()
condition|)
block|{
name|modificationsTree
operator|.
name|add
argument_list|(
operator|new
name|TableModificationKey
argument_list|(
name|e2
operator|.
name|getId
argument_list|()
argument_list|,
name|e2
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// We do not need to do anything more for current table, as we detected
comment|// a modification event that was in the metastore.
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Materialized view "
operator|+
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|materializedViewTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|materializedViewTable
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|+
literal|" ignored; error loading view into invalidation cache"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
if|if
condition|(
name|opType
operator|==
name|OpType
operator|.
name|CREATE
operator|||
name|opType
operator|==
name|OpType
operator|.
name|ALTER
condition|)
block|{
comment|// You store the materialized view
name|cq
operator|.
name|put
argument_list|(
name|materializedViewTable
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|MaterializationInvalidationInfo
argument_list|(
name|materializedViewTable
argument_list|,
name|tablesUsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// For LOAD, you only add it if it does exist as you might be loading an outdated MV
name|cq
operator|.
name|putIfAbsent
argument_list|(
name|materializedViewTable
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|MaterializationInvalidationInfo
argument_list|(
name|materializedViewTable
argument_list|,
name|tablesUsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cached materialized view for rewriting in invalidation cache: "
operator|+
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|materializedViewTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|materializedViewTable
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This method is called when a table is modified. That way we can keep a track of the    * invalidation for the MVs that use that table.    */
specifier|public
name|void
name|notifyTableModification
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|long
name|eventId
parameter_list|,
name|long
name|newModificationTime
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Notification for table {} in database {} received -> id: {}, time: {}"
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|eventId
argument_list|,
name|newModificationTime
argument_list|)
expr_stmt|;
block|}
name|ConcurrentSkipListSet
argument_list|<
name|TableModificationKey
argument_list|>
name|modificationsTree
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<
name|TableModificationKey
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ConcurrentSkipListSet
argument_list|<
name|TableModificationKey
argument_list|>
name|prevModificationsTree
init|=
name|tableModifications
operator|.
name|putIfAbsent
argument_list|(
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|modificationsTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevModificationsTree
operator|!=
literal|null
condition|)
block|{
name|modificationsTree
operator|=
name|prevModificationsTree
expr_stmt|;
block|}
name|modificationsTree
operator|.
name|add
argument_list|(
operator|new
name|TableModificationKey
argument_list|(
name|eventId
argument_list|,
name|newModificationTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes the materialized view from the cache.    *    * @param materializedViewTable the materialized view to remove    */
specifier|public
name|void
name|dropMaterializedView
parameter_list|(
name|Table
name|materializedViewTable
parameter_list|)
block|{
name|dropMaterializedView
argument_list|(
name|materializedViewTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|materializedViewTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dropMaterializedView
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|materializations
operator|.
name|get
argument_list|(
name|dbName
argument_list|)
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the materialized views in the cache for the given database.    *    * @param dbName the database    * @return the collection of materialized views, or the empty collection if none    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Materialization
argument_list|>
name|getMaterializationInvalidationInfo
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|materializationNames
parameter_list|)
block|{
if|if
condition|(
name|materializations
operator|.
name|get
argument_list|(
name|dbName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Materialization
argument_list|>
name|m
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|materializationName
range|:
name|materializationNames
control|)
block|{
name|MaterializationInvalidationInfo
name|materialization
init|=
name|materializations
operator|.
name|get
argument_list|(
name|dbName
argument_list|)
operator|.
name|get
argument_list|(
name|materializationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|materialization
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Materialization {} skipped as there is no information "
operator|+
literal|"in the invalidation cache about it"
argument_list|,
name|materializationName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|long
name|invalidationTime
init|=
name|getInvalidationTime
argument_list|(
name|materialization
argument_list|)
decl_stmt|;
comment|// We need to check whether previous value is zero, as data modification
comment|// in another table used by the materialized view might have modified
comment|// the value too
name|boolean
name|modified
init|=
name|materialization
operator|.
name|compareAndSetInvalidationTime
argument_list|(
literal|0L
argument_list|,
name|invalidationTime
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|modified
condition|)
block|{
name|long
name|currentInvalidationTime
init|=
name|materialization
operator|.
name|getInvalidationTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|invalidationTime
operator|<
name|currentInvalidationTime
condition|)
block|{
comment|// It was set by other table modification, but it was after this table modification
comment|// hence we need to set it
name|modified
operator|=
name|materialization
operator|.
name|compareAndSetInvalidationTime
argument_list|(
name|currentInvalidationTime
argument_list|,
name|invalidationTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Nothing to do
name|modified
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|m
operator|.
name|put
argument_list|(
name|materializationName
argument_list|,
name|materialization
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Materialization
argument_list|>
name|result
init|=
name|m
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieved the following materializations from the invalidation cache: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
specifier|private
name|long
name|getInvalidationTime
parameter_list|(
name|MaterializationInvalidationInfo
name|materialization
parameter_list|)
block|{
name|long
name|firstModificationTimeAfterCreation
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|String
name|qNameTableUsed
range|:
name|materialization
operator|.
name|getTablesUsed
argument_list|()
control|)
block|{
name|BasicTxnInfo
name|e
init|=
name|materialization
operator|.
name|getMaterializationTable
argument_list|()
operator|.
name|getCreationMetadata
argument_list|()
operator|.
name|get
argument_list|(
name|qNameTableUsed
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
comment|// This can happen when the materialized view was created on non-transactional tables
comment|// with rewrite disabled but then it was enabled by alter statement
return|return
name|Long
operator|.
name|MIN_VALUE
return|;
block|}
specifier|final
name|TableModificationKey
name|lastModificationBeforeCreation
init|=
operator|new
name|TableModificationKey
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableModificationKey
name|post
init|=
name|tableModifications
operator|.
name|get
argument_list|(
name|qNameTableUsed
argument_list|)
operator|.
name|higher
argument_list|(
name|lastModificationBeforeCreation
argument_list|)
decl_stmt|;
if|if
condition|(
name|post
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|firstModificationTimeAfterCreation
operator|==
literal|0L
operator|||
name|post
operator|.
name|time
operator|<
name|firstModificationTimeAfterCreation
condition|)
block|{
name|firstModificationTimeAfterCreation
operator|=
name|post
operator|.
name|time
expr_stmt|;
block|}
block|}
block|}
return|return
name|firstModificationTimeAfterCreation
return|;
block|}
specifier|private
specifier|static
class|class
name|TableModificationKey
implements|implements
name|Comparable
argument_list|<
name|TableModificationKey
argument_list|>
block|{
specifier|private
name|long
name|id
decl_stmt|;
specifier|private
name|long
name|time
decl_stmt|;
specifier|private
name|TableModificationKey
parameter_list|(
name|long
name|id
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|(
name|obj
operator|==
literal|null
operator|)
operator|||
operator|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|this
operator|.
name|getClass
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TableModificationKey
name|tableModificationKey
init|=
operator|(
name|TableModificationKey
operator|)
name|obj
decl_stmt|;
return|return
name|id
operator|==
name|tableModificationKey
operator|.
name|id
operator|&&
name|time
operator|==
name|tableModificationKey
operator|.
name|time
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|7
decl_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|time
argument_list|)
expr_stmt|;
return|return
name|hash
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TableModificationKey
name|other
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
name|other
operator|.
name|id
condition|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|time
argument_list|,
name|other
operator|.
name|time
argument_list|)
return|;
block|}
return|return
name|Long
operator|.
name|compare
argument_list|(
name|id
argument_list|,
name|other
operator|.
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TableModificationKey{"
operator|+
name|id
operator|+
literal|","
operator|+
name|time
operator|+
literal|"}"
return|;
block|}
block|}
specifier|private
enum|enum
name|OpType
block|{
name|CREATE
block|,
name|LOAD
block|,
name|ALTER
block|}
block|}
end_class

end_unit

