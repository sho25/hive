begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidReadTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BasicTxnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Materialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_comment
comment|/**  * This cache keeps information in memory about the table modifications so materialized views  * can verify their invalidation time, i.e., the moment after materialization on which the  * first transaction to the tables they used happened. This information is kept in memory  * to check the invalidation quickly. However, we store enough information in the metastore  * to bring this cache up if the metastore is restarted or would crashed. This cache lives  * in the metastore server.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MaterializationsInvalidationCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MaterializationsInvalidationCache
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/* Singleton */
specifier|private
specifier|static
specifier|final
name|MaterializationsInvalidationCache
name|SINGLETON
init|=
operator|new
name|MaterializationsInvalidationCache
argument_list|()
decl_stmt|;
comment|/* If this boolean is true, this class has no functionality. Only for debugging purposes. */
specifier|private
name|boolean
name|disable
decl_stmt|;
comment|/* Key is the database name. Each value is a map from the unique view qualified name to    * the materialization invalidation info. This invalidation object contains information    * such as the tables used by the materialized view or the invalidation time, i.e., first    * modification of the tables used by materialized view after the view was created. */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|MaterializationInvalidationInfo
argument_list|>
argument_list|>
name|materializations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|MaterializationInvalidationInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/*    * Key is a qualified table name. The value is a (sorted) tree map (supporting concurrent    * modifications) that will keep the modifications for a given table in the order of their    * transaction id. This is useful to quickly check the invalidation time for a given    * materialization.    */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|tableModifications
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/* Whether the cache has been initialized or not. */
specifier|private
name|boolean
name|initialized
decl_stmt|;
comment|/* Configuration for cache. */
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/* Handler to connect to metastore. */
specifier|private
name|IHMSHandler
name|handler
decl_stmt|;
specifier|private
name|MaterializationsInvalidationCache
parameter_list|()
block|{   }
comment|/**    * Get instance of MaterializationsInvalidationCache.    *    * @return the singleton    */
specifier|public
specifier|static
name|MaterializationsInvalidationCache
name|get
parameter_list|()
block|{
return|return
name|SINGLETON
return|;
block|}
comment|/**    * Initialize the invalidation cache.    *    * The method is synchronized because we want to avoid initializing the invalidation cache    * multiple times in embedded mode. This will not happen when we run the metastore remotely    * as the method is called only once.    */
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|IHMSHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
comment|// This will only be true for debugging purposes
name|this
operator|.
name|disable
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|MATERIALIZATIONS_INVALIDATION_CACHE_IMPL
argument_list|)
operator|.
name|equals
argument_list|(
literal|"DISABLE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|disable
condition|)
block|{
comment|// Nothing to do
return|return;
block|}
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Loader
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|Loader
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|RawStore
name|store
init|=
name|handler
operator|.
name|getMS
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|catName
range|:
name|store
operator|.
name|getCatalogs
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|dbName
range|:
name|store
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
control|)
block|{
for|for
control|(
name|Table
name|mv
range|:
name|store
operator|.
name|getTableObjectsByName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|store
operator|.
name|getTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MATERIALIZED_VIEW
argument_list|)
argument_list|)
control|)
block|{
name|addMaterializedView
argument_list|(
name|mv
operator|.
name|getDbName
argument_list|()
argument_list|,
name|mv
operator|.
name|getTableName
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|mv
operator|.
name|getCreationMetadata
argument_list|()
operator|.
name|getTablesUsed
argument_list|()
argument_list|)
argument_list|,
name|mv
operator|.
name|getCreationMetadata
argument_list|()
operator|.
name|getValidTxnList
argument_list|()
argument_list|,
name|OpType
operator|.
name|LOAD
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized materializations invalidation cache"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Problem connecting to the metastore when initializing the view registry"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Adds a newly created materialized view to the cache.    *    * @param dbName    * @param tableName    * @param tablesUsed tables used by the materialized view    * @param validTxnList    */
specifier|public
name|void
name|createMaterializedView
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tablesUsed
parameter_list|,
name|String
name|validTxnList
parameter_list|)
block|{
name|addMaterializedView
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|tablesUsed
argument_list|,
name|validTxnList
argument_list|,
name|OpType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Method to call when materialized view is modified.    *    * @param dbName    * @param tableName    * @param tablesUsed tables used by the materialized view    * @param validTxnList    */
specifier|public
name|void
name|alterMaterializedView
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tablesUsed
parameter_list|,
name|String
name|validTxnList
parameter_list|)
block|{
name|addMaterializedView
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|tablesUsed
argument_list|,
name|validTxnList
argument_list|,
name|OpType
operator|.
name|ALTER
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds the materialized view to the cache.    *    * @param dbName    * @param tableName    * @param tablesUsed tables used by the materialized view    * @param validTxnList    * @param opType    */
specifier|private
name|void
name|addMaterializedView
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tablesUsed
parameter_list|,
name|String
name|validTxnList
parameter_list|,
name|OpType
name|opType
parameter_list|)
block|{
if|if
condition|(
name|disable
condition|)
block|{
comment|// Nothing to do
return|return;
block|}
comment|// We are going to create the map for each view in the given database
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|MaterializationInvalidationInfo
argument_list|>
name|cq
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MaterializationInvalidationInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|MaterializationInvalidationInfo
argument_list|>
name|prevCq
init|=
name|materializations
operator|.
name|putIfAbsent
argument_list|(
name|dbName
argument_list|,
name|cq
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevCq
operator|!=
literal|null
condition|)
block|{
name|cq
operator|=
name|prevCq
expr_stmt|;
block|}
comment|// Start the process to add materialization to the cache
comment|// Before loading the materialization in the cache, we need to update some
comment|// important information in the registry to account for rewriting invalidation
if|if
condition|(
name|validTxnList
operator|==
literal|null
condition|)
block|{
comment|// This can happen when the materialized view was created on non-transactional tables
return|return;
block|}
if|if
condition|(
name|opType
operator|==
name|OpType
operator|.
name|CREATE
operator|||
name|opType
operator|==
name|OpType
operator|.
name|ALTER
condition|)
block|{
comment|// You store the materialized view
name|cq
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
operator|new
name|MaterializationInvalidationInfo
argument_list|(
name|tablesUsed
argument_list|,
name|validTxnList
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ValidTxnList
name|txnList
init|=
operator|new
name|ValidReadTxnList
argument_list|(
name|validTxnList
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|qNameTableUsed
range|:
name|tablesUsed
control|)
block|{
comment|// First we insert a new tree set to keep table modifications, unless it already exists
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|modificationsTree
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|prevModificationsTree
init|=
name|tableModifications
operator|.
name|putIfAbsent
argument_list|(
name|qNameTableUsed
argument_list|,
name|modificationsTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevModificationsTree
operator|!=
literal|null
condition|)
block|{
name|modificationsTree
operator|=
name|prevModificationsTree
expr_stmt|;
block|}
comment|// If we are not creating the MV at this instant, but instead it was created previously
comment|// and we are loading it into the cache, we need to go through the transaction entries and
comment|// check if the MV is still valid.
try|try
block|{
name|String
index|[]
name|names
init|=
name|qNameTableUsed
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|BasicTxnInfo
name|e
init|=
name|handler
operator|.
name|getTxnHandler
argument_list|()
operator|.
name|getFirstCompletedTransactionForTableAfterCommit
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|,
name|names
index|[
literal|1
index|]
argument_list|,
name|txnList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|e
operator|.
name|isIsnull
argument_list|()
condition|)
block|{
name|modificationsTree
operator|.
name|put
argument_list|(
name|e
operator|.
name|getTxnid
argument_list|()
argument_list|,
name|e
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// We do not need to do anything more for current table, as we detected
comment|// a modification event that was in the metastore.
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Materialized view "
operator|+
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|+
literal|" ignored; error loading view into invalidation cache"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// For LOAD, you only add it if it does exist as you might be loading an outdated MV
name|cq
operator|.
name|putIfAbsent
argument_list|(
name|tableName
argument_list|,
operator|new
name|MaterializationInvalidationInfo
argument_list|(
name|tablesUsed
argument_list|,
name|validTxnList
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cached materialized view for rewriting in invalidation cache: "
operator|+
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This method is called when a table is modified. That way we can keep track of the    * invalidation for the MVs that use that table.    */
specifier|public
name|void
name|notifyTableModification
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|long
name|txnId
parameter_list|,
name|long
name|newModificationTime
parameter_list|)
block|{
if|if
condition|(
name|disable
condition|)
block|{
comment|// Nothing to do
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Notification for table {} in database {} received -> id: {}, time: {}"
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|txnId
argument_list|,
name|newModificationTime
argument_list|)
expr_stmt|;
block|}
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|modificationsTree
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|prevModificationsTree
init|=
name|tableModifications
operator|.
name|putIfAbsent
argument_list|(
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|modificationsTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevModificationsTree
operator|!=
literal|null
condition|)
block|{
name|modificationsTree
operator|=
name|prevModificationsTree
expr_stmt|;
block|}
name|modificationsTree
operator|.
name|put
argument_list|(
name|txnId
argument_list|,
name|newModificationTime
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes the materialized view from the cache.    *    * @param dbName    * @param tableName    */
specifier|public
name|void
name|dropMaterializedView
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|disable
condition|)
block|{
comment|// Nothing to do
return|return;
block|}
name|materializations
operator|.
name|get
argument_list|(
name|dbName
argument_list|)
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the materialized views in the cache for the given database.    *    * @param dbName the database    * @return the collection of materialized views, or the empty collection if none    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Materialization
argument_list|>
name|getMaterializationInvalidationInfo
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|materializationNames
parameter_list|)
block|{
if|if
condition|(
name|materializations
operator|.
name|get
argument_list|(
name|dbName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Materialization
argument_list|>
name|m
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|materializationName
range|:
name|materializationNames
control|)
block|{
name|MaterializationInvalidationInfo
name|materialization
init|=
name|materializations
operator|.
name|get
argument_list|(
name|dbName
argument_list|)
operator|.
name|get
argument_list|(
name|materializationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|materialization
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Materialization {} skipped as there is no information "
operator|+
literal|"in the invalidation cache about it"
argument_list|,
name|materializationName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|long
name|invalidationTime
init|=
name|getInvalidationTime
argument_list|(
name|materialization
argument_list|)
decl_stmt|;
comment|// We need to check whether previous value is zero, as data modification
comment|// in another table used by the materialized view might have modified
comment|// the value too
name|boolean
name|modified
init|=
name|materialization
operator|.
name|compareAndSetInvalidationTime
argument_list|(
literal|0L
argument_list|,
name|invalidationTime
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|modified
condition|)
block|{
name|long
name|currentInvalidationTime
init|=
name|materialization
operator|.
name|getInvalidationTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|invalidationTime
operator|<
name|currentInvalidationTime
condition|)
block|{
comment|// It was set by other table modification, but it was after this table modification
comment|// hence we need to set it
name|modified
operator|=
name|materialization
operator|.
name|compareAndSetInvalidationTime
argument_list|(
name|currentInvalidationTime
argument_list|,
name|invalidationTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Nothing to do
name|modified
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|m
operator|.
name|put
argument_list|(
name|materializationName
argument_list|,
name|materialization
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Materialization
argument_list|>
name|result
init|=
name|m
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieved the following materializations from the invalidation cache: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
specifier|private
name|long
name|getInvalidationTime
parameter_list|(
name|MaterializationInvalidationInfo
name|materialization
parameter_list|)
block|{
name|String
name|txnListString
init|=
name|materialization
operator|.
name|getValidTxnList
argument_list|()
decl_stmt|;
if|if
condition|(
name|txnListString
operator|==
literal|null
condition|)
block|{
comment|// This can happen when the materialization was created on non-transactional tables
return|return
name|Long
operator|.
name|MIN_VALUE
return|;
block|}
comment|// We will obtain the modification time as follows.
comment|// First, we obtain the first element after high watermark (if any)
comment|// Then, we iterate through the elements from min open txn till high
comment|// watermark, updating the modification time after creation if needed
name|ValidTxnList
name|txnList
init|=
operator|new
name|ValidReadTxnList
argument_list|(
name|txnListString
argument_list|)
decl_stmt|;
name|long
name|firstModificationTimeAfterCreation
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|String
name|qNameTableUsed
range|:
name|materialization
operator|.
name|getTablesUsed
argument_list|()
control|)
block|{
specifier|final
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|tn
init|=
name|tableModifications
operator|.
name|get
argument_list|(
name|qNameTableUsed
argument_list|)
operator|.
name|higherEntry
argument_list|(
name|txnList
operator|.
name|getHighWatermark
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tn
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|firstModificationTimeAfterCreation
operator|==
literal|0L
operator|||
name|tn
operator|.
name|getValue
argument_list|()
operator|<
name|firstModificationTimeAfterCreation
condition|)
block|{
name|firstModificationTimeAfterCreation
operator|=
name|tn
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Min open txn might be null if there were no open transactions
comment|// when this transaction was being executed
if|if
condition|(
name|txnList
operator|.
name|getMinOpenTxn
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Invalid transaction list is sorted
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|t
range|:
name|tableModifications
operator|.
name|get
argument_list|(
name|qNameTableUsed
argument_list|)
operator|.
name|subMap
argument_list|(
name|txnList
operator|.
name|getMinOpenTxn
argument_list|()
argument_list|,
name|txnList
operator|.
name|getHighWatermark
argument_list|()
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
while|while
condition|(
name|pos
operator|<
name|txnList
operator|.
name|getInvalidTransactions
argument_list|()
operator|.
name|length
operator|&&
name|txnList
operator|.
name|getInvalidTransactions
argument_list|()
index|[
name|pos
index|]
operator|!=
name|t
operator|.
name|getKey
argument_list|()
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|>=
name|txnList
operator|.
name|getInvalidTransactions
argument_list|()
operator|.
name|length
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|firstModificationTimeAfterCreation
operator|==
literal|0L
operator|||
name|t
operator|.
name|getValue
argument_list|()
operator|<
name|firstModificationTimeAfterCreation
condition|)
block|{
name|firstModificationTimeAfterCreation
operator|=
name|t
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|firstModificationTimeAfterCreation
return|;
block|}
specifier|private
enum|enum
name|OpType
block|{
name|CREATE
block|,
name|LOAD
block|,
name|ALTER
block|}
comment|/**    * Removes transaction events that are not relevant anymore.    * @param minTime events generated before this time (ms) can be deleted from the cache    * @return number of events that were deleted from the cache    */
specifier|public
name|long
name|cleanup
parameter_list|(
name|long
name|minTime
parameter_list|)
block|{
comment|// To remove, mv should meet two conditions:
comment|// 1) Current time - time of transaction> config parameter, and
comment|// 2) Transaction should not be associated with invalidation of a MV
if|if
condition|(
name|disable
operator|||
operator|!
name|initialized
condition|)
block|{
comment|// Bail out
return|return
literal|0L
return|;
block|}
comment|// We execute the cleanup in two steps
comment|// First we gather all the transactions that need to be kept
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|keepTxnInfos
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|MaterializationInvalidationInfo
argument_list|>
argument_list|>
name|e
range|:
name|materializations
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|MaterializationInvalidationInfo
name|m
range|:
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|ValidTxnList
name|txnList
init|=
operator|new
name|ValidReadTxnList
argument_list|(
name|m
operator|.
name|getValidTxnList
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|canBeDeleted
init|=
literal|false
decl_stmt|;
name|String
name|currentTableForInvalidatingTxn
init|=
literal|null
decl_stmt|;
name|long
name|currentInvalidatingTxnId
init|=
literal|0L
decl_stmt|;
name|long
name|currentInvalidatingTxnTime
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|String
name|qNameTableUsed
range|:
name|m
operator|.
name|getTablesUsed
argument_list|()
control|)
block|{
specifier|final
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|tn
init|=
name|tableModifications
operator|.
name|get
argument_list|(
name|qNameTableUsed
argument_list|)
operator|.
name|higherEntry
argument_list|(
name|txnList
operator|.
name|getHighWatermark
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tn
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentInvalidatingTxnTime
operator|==
literal|0L
operator|||
name|tn
operator|.
name|getValue
argument_list|()
operator|<
name|currentInvalidatingTxnTime
condition|)
block|{
comment|// This transaction 1) is the first one examined for this materialization, or
comment|// 2) it is the invalidating transaction. Hence we add it to the transactions to keep.
comment|// 1.- We remove the previous invalidating transaction from the transactions
comment|// to be kept (if needed).
if|if
condition|(
name|canBeDeleted
operator|&&
name|currentInvalidatingTxnTime
operator|<
name|minTime
condition|)
block|{
name|keepTxnInfos
operator|.
name|remove
argument_list|(
name|currentTableForInvalidatingTxn
argument_list|,
name|currentInvalidatingTxnId
argument_list|)
expr_stmt|;
block|}
comment|// 2.- We add this transaction to the transactions that should be kept.
name|canBeDeleted
operator|=
operator|!
name|keepTxnInfos
operator|.
name|get
argument_list|(
name|qNameTableUsed
argument_list|)
operator|.
name|contains
argument_list|(
name|tn
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|keepTxnInfos
operator|.
name|put
argument_list|(
name|qNameTableUsed
argument_list|,
name|tn
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3.- We record this transaction as the current invalidating transaction.
name|currentTableForInvalidatingTxn
operator|=
name|qNameTableUsed
expr_stmt|;
name|currentInvalidatingTxnId
operator|=
name|tn
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|currentInvalidatingTxnTime
operator|=
name|tn
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|txnList
operator|.
name|getMinOpenTxn
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Invalid transaction list is sorted
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|t
range|:
name|tableModifications
operator|.
name|get
argument_list|(
name|qNameTableUsed
argument_list|)
operator|.
name|subMap
argument_list|(
name|txnList
operator|.
name|getMinOpenTxn
argument_list|()
argument_list|,
name|txnList
operator|.
name|getHighWatermark
argument_list|()
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
while|while
condition|(
name|pos
operator|<
name|txnList
operator|.
name|getInvalidTransactions
argument_list|()
operator|.
name|length
operator|&&
name|txnList
operator|.
name|getInvalidTransactions
argument_list|()
index|[
name|pos
index|]
operator|!=
name|t
operator|.
name|getKey
argument_list|()
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|>=
name|txnList
operator|.
name|getInvalidTransactions
argument_list|()
operator|.
name|length
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|currentInvalidatingTxnTime
operator|==
literal|0L
operator|||
name|t
operator|.
name|getValue
argument_list|()
operator|<
name|currentInvalidatingTxnTime
condition|)
block|{
comment|// This transaction 1) is the first one examined for this materialization, or
comment|// 2) it is the invalidating transaction. Hence we add it to the transactions to keep.
comment|// 1.- We remove the previous invalidating transaction from the transactions
comment|// to be kept (if needed).
if|if
condition|(
name|canBeDeleted
operator|&&
name|currentInvalidatingTxnTime
operator|<
name|minTime
condition|)
block|{
name|keepTxnInfos
operator|.
name|remove
argument_list|(
name|currentTableForInvalidatingTxn
argument_list|,
name|currentInvalidatingTxnId
argument_list|)
expr_stmt|;
block|}
comment|// 2.- We add this transaction to the transactions that should be kept.
name|canBeDeleted
operator|=
operator|!
name|keepTxnInfos
operator|.
name|get
argument_list|(
name|qNameTableUsed
argument_list|)
operator|.
name|contains
argument_list|(
name|t
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|keepTxnInfos
operator|.
name|put
argument_list|(
name|qNameTableUsed
argument_list|,
name|t
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3.- We record this transaction as the current invalidating transaction.
name|currentTableForInvalidatingTxn
operator|=
name|qNameTableUsed
expr_stmt|;
name|currentInvalidatingTxnId
operator|=
name|t
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|currentInvalidatingTxnTime
operator|=
name|t
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// Second, we remove the transactions
name|long
name|removed
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|e
range|:
name|tableModifications
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|Long
argument_list|>
name|c
init|=
name|keepTxnInfos
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|it
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|v
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// We need to check again the time because some of the transactions might not be explored
comment|// above, e.g., transactions above the highest transaction mark for all the materialized
comment|// views.
if|if
condition|(
name|v
operator|.
name|getValue
argument_list|()
operator|<
name|minTime
operator|&&
operator|(
name|c
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|c
operator|.
name|contains
argument_list|(
name|v
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Transaction removed from cache for table {} -> id: {}, time: {}"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|v
operator|.
name|getKey
argument_list|()
argument_list|,
name|v
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|removed
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|removed
return|;
block|}
block|}
end_class

end_unit

