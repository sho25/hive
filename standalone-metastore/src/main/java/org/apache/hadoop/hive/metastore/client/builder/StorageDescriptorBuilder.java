begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Builds a {@link StorageDescriptor}.  Only requires that columns be set.  It picks reasonable  * defaults for everything else.  This is intended for use just by objects that have a StorageDescriptor,  * not direct use.  */
end_comment

begin_class
specifier|abstract
class|class
name|StorageDescriptorBuilder
parameter_list|<
name|T
parameter_list|>
extends|extends
name|SerdeAndColsBuilder
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INPUT_FORMAT
init|=
literal|"org.apache.hadoop.hive.ql.io.HiveInputFormat"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUTPUT_FORMAT
init|=
literal|"org.apache.hadoop.hive.ql.io.HiveOutputFormat"
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|,
name|inputFormat
decl_stmt|,
name|outputFormat
decl_stmt|;
specifier|private
name|int
name|numBuckets
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|storageDescriptorParams
decl_stmt|;
specifier|private
name|boolean
name|compressed
decl_stmt|,
name|storedAsSubDirectories
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
decl_stmt|,
name|skewedColNames
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
decl_stmt|;
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|skewedColValueLocationMaps
decl_stmt|;
specifier|protected
name|StorageDescriptorBuilder
parameter_list|()
block|{
comment|// Set some reasonable defaults
name|storageDescriptorParams
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|bucketCols
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|sortCols
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|numBuckets
operator|=
literal|0
expr_stmt|;
name|compressed
operator|=
literal|false
expr_stmt|;
name|inputFormat
operator|=
name|INPUT_FORMAT
expr_stmt|;
name|outputFormat
operator|=
name|OUTPUT_FORMAT
expr_stmt|;
name|skewedColNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|skewedColValues
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|skewedColValueLocationMaps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|StorageDescriptor
name|buildSd
parameter_list|()
throws|throws
name|MetaException
block|{
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|getCols
argument_list|()
argument_list|,
name|location
argument_list|,
name|inputFormat
argument_list|,
name|outputFormat
argument_list|,
name|compressed
argument_list|,
name|numBuckets
argument_list|,
name|buildSerde
argument_list|()
argument_list|,
name|bucketCols
argument_list|,
name|sortCols
argument_list|,
name|storageDescriptorParams
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|storedAsSubDirectories
argument_list|)
expr_stmt|;
if|if
condition|(
name|skewedColNames
operator|!=
literal|null
condition|)
block|{
name|SkewedInfo
name|skewed
init|=
operator|new
name|SkewedInfo
argument_list|(
name|skewedColNames
argument_list|,
name|skewedColValues
argument_list|,
name|skewedColValueLocationMaps
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setSkewedInfo
argument_list|(
name|skewed
argument_list|)
expr_stmt|;
block|}
return|return
name|sd
return|;
block|}
specifier|public
name|T
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setInputFormat
parameter_list|(
name|String
name|inputFormat
parameter_list|)
block|{
name|this
operator|.
name|inputFormat
operator|=
name|inputFormat
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setOutputFormat
parameter_list|(
name|String
name|outputFormat
parameter_list|)
block|{
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setNumBuckets
parameter_list|(
name|int
name|numBuckets
parameter_list|)
block|{
name|this
operator|.
name|numBuckets
operator|=
name|numBuckets
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setStorageDescriptorParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|storageDescriptorParams
parameter_list|)
block|{
name|this
operator|.
name|storageDescriptorParams
operator|=
name|storageDescriptorParams
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|addStorageDescriptorParam
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|storageDescriptorParams
operator|==
literal|null
condition|)
name|storageDescriptorParams
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|storageDescriptorParams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setCompressed
parameter_list|(
name|boolean
name|compressed
parameter_list|)
block|{
name|this
operator|.
name|compressed
operator|=
name|compressed
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setStoredAsSubDirectories
parameter_list|(
name|boolean
name|storedAsSubDirectories
parameter_list|)
block|{
name|this
operator|.
name|storedAsSubDirectories
operator|=
name|storedAsSubDirectories
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setBucketCols
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|)
block|{
name|this
operator|.
name|bucketCols
operator|=
name|bucketCols
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|addBucketCol
parameter_list|(
name|String
name|bucketCol
parameter_list|)
block|{
if|if
condition|(
name|bucketCols
operator|==
literal|null
condition|)
name|bucketCols
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|bucketCols
operator|.
name|add
argument_list|(
name|bucketCol
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setSkewedColNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
parameter_list|)
block|{
name|this
operator|.
name|skewedColNames
operator|=
name|skewedColNames
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|addSkewedColName
parameter_list|(
name|String
name|skewedColName
parameter_list|)
block|{
if|if
condition|(
name|skewedColNames
operator|==
literal|null
condition|)
name|skewedColNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|skewedColNames
operator|.
name|add
argument_list|(
name|skewedColName
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setSortCols
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|)
block|{
name|this
operator|.
name|sortCols
operator|=
name|sortCols
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|addSortCol
parameter_list|(
name|String
name|col
parameter_list|,
name|int
name|order
parameter_list|)
block|{
if|if
condition|(
name|sortCols
operator|==
literal|null
condition|)
name|sortCols
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|sortCols
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
name|col
argument_list|,
name|order
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
comment|// It is not at all clear how to flatten these last two out in a useful way, and no one uses
comment|// these anyway.
specifier|public
name|T
name|setSkewedColValues
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
parameter_list|)
block|{
name|this
operator|.
name|skewedColValues
operator|=
name|skewedColValues
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setSkewedColValueLocationMaps
parameter_list|(
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|skewedColValueLocationMaps
parameter_list|)
block|{
name|this
operator|.
name|skewedColValueLocationMaps
operator|=
name|skewedColValueLocationMaps
expr_stmt|;
return|return
name|child
return|;
block|}
block|}
end_class

end_unit

