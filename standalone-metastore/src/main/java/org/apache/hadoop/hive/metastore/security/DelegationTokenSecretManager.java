begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
import|;
end_import

begin_comment
comment|/**  * A Hive specific delegation token secret manager.  * The secret manager is responsible for generating and accepting the password  * for each token.  */
end_comment

begin_class
specifier|public
class|class
name|DelegationTokenSecretManager
extends|extends
name|AbstractDelegationTokenSecretManager
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
block|{
comment|/**    * Create a secret manager    * @param delegationKeyUpdateInterval the number of seconds for rolling new    *        secret keys.    * @param delegationTokenMaxLifetime the maximum lifetime of the delegation    *        tokens    * @param delegationTokenRenewInterval how often the tokens must be renewed    * @param delegationTokenRemoverScanInterval how often the tokens are scanned    *        for expired tokens    */
specifier|public
name|DelegationTokenSecretManager
parameter_list|(
name|long
name|delegationKeyUpdateInterval
parameter_list|,
name|long
name|delegationTokenMaxLifetime
parameter_list|,
name|long
name|delegationTokenRenewInterval
parameter_list|,
name|long
name|delegationTokenRemoverScanInterval
parameter_list|)
block|{
name|super
argument_list|(
name|delegationKeyUpdateInterval
argument_list|,
name|delegationTokenMaxLifetime
argument_list|,
name|delegationTokenRenewInterval
argument_list|,
name|delegationTokenRemoverScanInterval
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DelegationTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|DelegationTokenIdentifier
argument_list|()
return|;
block|}
comment|/**    * Verify token string    * @param tokenStrForm    * @return user name    * @throws IOException    */
specifier|public
specifier|synchronized
name|String
name|verifyDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|t
init|=
operator|new
name|Token
argument_list|<>
argument_list|()
decl_stmt|;
name|t
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
name|DelegationTokenIdentifier
name|id
init|=
name|getTokenIdentifier
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|verifyToken
argument_list|(
name|id
argument_list|,
name|t
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|id
operator|.
name|getUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
return|;
block|}
specifier|protected
name|DelegationTokenIdentifier
name|getTokenIdentifier
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
comment|// turn bytes back into identifier for cache lookup
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|id
init|=
name|createIdentifier
argument_list|()
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|cancelDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|t
init|=
operator|new
name|Token
argument_list|<>
argument_list|()
decl_stmt|;
name|t
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|cancelToken
argument_list|(
name|t
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|long
name|renewDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|t
init|=
operator|new
name|Token
argument_list|<>
argument_list|()
decl_stmt|;
name|t
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
return|return
name|renewToken
argument_list|(
name|t
argument_list|,
name|user
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|String
name|getDelegationToken
parameter_list|(
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|Text
name|owner
init|=
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|Text
name|realUser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|realUser
operator|=
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DelegationTokenIdentifier
name|ident
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|owner
argument_list|,
operator|new
name|Text
argument_list|(
name|renewer
argument_list|)
argument_list|,
name|realUser
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|t
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|ident
argument_list|,
name|this
argument_list|)
decl_stmt|;
return|return
name|t
operator|.
name|encodeToUrlString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getUserFromToken
parameter_list|(
name|String
name|tokenStr
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|delegationToken
init|=
operator|new
name|Token
argument_list|<>
argument_list|()
decl_stmt|;
name|delegationToken
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenStr
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|delegationToken
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|id
init|=
name|createIdentifier
argument_list|()
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|id
operator|.
name|getUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

