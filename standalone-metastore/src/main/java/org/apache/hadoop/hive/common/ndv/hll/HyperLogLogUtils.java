begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ndv
operator|.
name|hll
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ndv
operator|.
name|hll
operator|.
name|HyperLogLog
operator|.
name|EncodingType
import|;
end_import

begin_comment
comment|/**  * HyperLogLog serialization utilities.  */
end_comment

begin_class
specifier|public
class|class
name|HyperLogLogUtils
block|{
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|MAGIC
init|=
operator|new
name|byte
index|[]
block|{
literal|'H'
block|,
literal|'L'
block|,
literal|'L'
block|}
decl_stmt|;
comment|/**    * HyperLogLog is serialized using the following format    *     *<pre>    * |-4 byte-|------varlong----|varint (optional)|----------|      * ---------------------------------------------------------    * | header | estimated-count | register-length | register |    * ---------------------------------------------------------    *     *<b>4 byte header</b> is encoded like below    * 3 bytes - HLL magic string to identify serialized stream    * 4 bits  - p (number of bits to be used as register index)    * 1       - spare bit (not used)    * 3 bits  - encoding (000 - sparse, 001..110 - n bit packing, 111 - no bit packing)    *     * Followed by header are 3 fields that are required for reconstruction    * of hyperloglog    * Estimated count - variable length long to store last computed estimated count.    *                   This is just for quick lookup without deserializing registers    * Register length - number of entries in the register (required only for     *                   for sparse representation. For bit-packing, the register    *                   length can be found from p)    *</pre>    * @param out    *          - output stream to write to    * @param hll    *          - hyperloglog that needs to be serialized    * @throws IOException    */
specifier|public
specifier|static
name|void
name|serializeHLL
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|HyperLogLog
name|hll
parameter_list|)
throws|throws
name|IOException
block|{
comment|// write header
name|out
operator|.
name|write
argument_list|(
name|MAGIC
argument_list|)
expr_stmt|;
name|int
name|fourthByte
init|=
literal|0
decl_stmt|;
name|int
name|p
init|=
name|hll
operator|.
name|getNumRegisterIndexBits
argument_list|()
decl_stmt|;
name|fourthByte
operator|=
operator|(
name|p
operator|&
literal|0xff
operator|)
operator|<<
literal|4
expr_stmt|;
name|int
name|bitWidth
init|=
literal|0
decl_stmt|;
name|EncodingType
name|enc
init|=
name|hll
operator|.
name|getEncoding
argument_list|()
decl_stmt|;
comment|// determine bit width for bitpacking and encode it in header
if|if
condition|(
name|enc
operator|.
name|equals
argument_list|(
name|EncodingType
operator|.
name|DENSE
argument_list|)
condition|)
block|{
name|int
name|lzr
init|=
name|hll
operator|.
name|getHLLDenseRegister
argument_list|()
operator|.
name|getMaxRegisterValue
argument_list|()
decl_stmt|;
name|bitWidth
operator|=
name|getBitWidth
argument_list|(
name|lzr
argument_list|)
expr_stmt|;
comment|// the max value of number of zeroes for 64 bit hash can be encoded using
comment|// only 6 bits. So we will disable bit packing for any values>6
if|if
condition|(
name|bitWidth
operator|>
literal|6
condition|)
block|{
name|fourthByte
operator||=
literal|7
expr_stmt|;
name|bitWidth
operator|=
literal|8
expr_stmt|;
block|}
else|else
block|{
name|fourthByte
operator||=
operator|(
name|bitWidth
operator|&
literal|7
operator|)
expr_stmt|;
block|}
block|}
comment|// write fourth byte of header
name|out
operator|.
name|write
argument_list|(
name|fourthByte
argument_list|)
expr_stmt|;
comment|// write estimated count
name|long
name|estCount
init|=
name|hll
operator|.
name|estimateNumDistinctValues
argument_list|()
decl_stmt|;
name|writeVulong
argument_list|(
name|out
argument_list|,
name|estCount
argument_list|)
expr_stmt|;
comment|// serialize dense/sparse registers. Dense registers are bitpacked whereas
comment|// sparse registers are delta and variable length encoded
if|if
condition|(
name|enc
operator|.
name|equals
argument_list|(
name|EncodingType
operator|.
name|DENSE
argument_list|)
condition|)
block|{
name|byte
index|[]
name|register
init|=
name|hll
operator|.
name|getHLLDenseRegister
argument_list|()
operator|.
name|getRegister
argument_list|()
decl_stmt|;
name|bitpackHLLRegister
argument_list|(
name|out
argument_list|,
name|register
argument_list|,
name|bitWidth
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|enc
operator|.
name|equals
argument_list|(
name|EncodingType
operator|.
name|SPARSE
argument_list|)
condition|)
block|{
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Byte
argument_list|>
name|sparseMap
init|=
name|hll
operator|.
name|getHLLSparseRegister
argument_list|()
operator|.
name|getSparseMap
argument_list|()
decl_stmt|;
comment|// write the number of elements in sparse map (required for
comment|// reconstruction)
name|writeVulong
argument_list|(
name|out
argument_list|,
name|sparseMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// compute deltas and write the values as varints
name|int
name|prev
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Byte
argument_list|>
name|entry
range|:
name|sparseMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prev
operator|==
literal|0
condition|)
block|{
name|prev
operator|=
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|<<
name|HLLConstants
operator|.
name|Q_PRIME_VALUE
operator|)
operator||
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|writeVulong
argument_list|(
name|out
argument_list|,
name|prev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|curr
init|=
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|<<
name|HLLConstants
operator|.
name|Q_PRIME_VALUE
operator|)
operator||
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|delta
init|=
name|curr
operator|-
name|prev
decl_stmt|;
name|writeVulong
argument_list|(
name|out
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|prev
operator|=
name|curr
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Refer serializeHLL() for format of serialization. This funtions    * deserializes the serialized hyperloglogs    * @param in    *          - input stream    * @return deserialized hyperloglog    * @throws IOException    */
specifier|public
specifier|static
name|HyperLogLog
name|deserializeHLL
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|checkMagicString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|fourthByte
init|=
name|in
operator|.
name|read
argument_list|()
operator|&
literal|0xff
decl_stmt|;
name|int
name|p
init|=
name|fourthByte
operator|>>>
literal|4
decl_stmt|;
comment|// read type of encoding
name|int
name|enc
init|=
name|fourthByte
operator|&
literal|7
decl_stmt|;
name|EncodingType
name|encoding
init|=
literal|null
decl_stmt|;
name|int
name|bitSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|enc
operator|==
literal|0
condition|)
block|{
name|encoding
operator|=
name|EncodingType
operator|.
name|SPARSE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|enc
operator|>
literal|0
operator|&&
name|enc
operator|<
literal|7
condition|)
block|{
name|bitSize
operator|=
name|enc
expr_stmt|;
name|encoding
operator|=
name|EncodingType
operator|.
name|DENSE
expr_stmt|;
block|}
else|else
block|{
comment|// bit packing disabled
name|bitSize
operator|=
literal|8
expr_stmt|;
name|encoding
operator|=
name|EncodingType
operator|.
name|DENSE
expr_stmt|;
block|}
comment|// estimated count
name|long
name|estCount
init|=
name|readVulong
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|HyperLogLog
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|encoding
operator|.
name|equals
argument_list|(
name|EncodingType
operator|.
name|SPARSE
argument_list|)
condition|)
block|{
name|result
operator|=
name|HyperLogLog
operator|.
name|builder
argument_list|()
operator|.
name|setNumRegisterIndexBits
argument_list|(
name|p
argument_list|)
operator|.
name|setEncoding
argument_list|(
name|EncodingType
operator|.
name|SPARSE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|int
name|numRegisterEntries
init|=
operator|(
name|int
operator|)
name|readVulong
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
index|[]
name|reg
init|=
operator|new
name|int
index|[
name|numRegisterEntries
index|]
decl_stmt|;
name|int
name|prev
init|=
literal|0
decl_stmt|;
comment|// reconstruct the sparse map from delta encoded and varint input stream
if|if
condition|(
name|numRegisterEntries
operator|>
literal|0
condition|)
block|{
name|prev
operator|=
operator|(
name|int
operator|)
name|readVulong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|reg
index|[
literal|0
index|]
operator|=
name|prev
expr_stmt|;
block|}
name|int
name|delta
init|=
literal|0
decl_stmt|;
name|int
name|curr
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numRegisterEntries
condition|;
name|i
operator|++
control|)
block|{
name|delta
operator|=
operator|(
name|int
operator|)
name|readVulong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|curr
operator|=
name|prev
operator|+
name|delta
expr_stmt|;
name|reg
index|[
name|i
index|]
operator|=
name|curr
expr_stmt|;
name|prev
operator|=
name|curr
expr_stmt|;
block|}
name|result
operator|.
name|setHLLSparseRegister
argument_list|(
name|reg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// explicitly disable bit packing
if|if
condition|(
name|bitSize
operator|==
literal|8
condition|)
block|{
name|result
operator|=
name|HyperLogLog
operator|.
name|builder
argument_list|()
operator|.
name|setNumRegisterIndexBits
argument_list|(
name|p
argument_list|)
operator|.
name|setEncoding
argument_list|(
name|EncodingType
operator|.
name|DENSE
argument_list|)
operator|.
name|enableBitPacking
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|HyperLogLog
operator|.
name|builder
argument_list|()
operator|.
name|setNumRegisterIndexBits
argument_list|(
name|p
argument_list|)
operator|.
name|setEncoding
argument_list|(
name|EncodingType
operator|.
name|DENSE
argument_list|)
operator|.
name|enableBitPacking
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|int
name|m
init|=
literal|1
operator|<<
name|p
decl_stmt|;
name|byte
index|[]
name|register
init|=
name|unpackHLLRegister
argument_list|(
name|in
argument_list|,
name|m
argument_list|,
name|bitSize
argument_list|)
decl_stmt|;
name|result
operator|.
name|setHLLDenseRegister
argument_list|(
name|register
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|setCount
argument_list|(
name|estCount
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|void
name|bitpackHLLRegister
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|byte
index|[]
name|register
parameter_list|,
name|int
name|bitWidth
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bitsLeft
init|=
literal|8
decl_stmt|;
name|byte
name|current
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bitWidth
operator|==
literal|8
condition|)
block|{
name|fastPathWrite
argument_list|(
name|out
argument_list|,
name|register
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// write the blob
for|for
control|(
name|byte
name|value
range|:
name|register
control|)
block|{
name|int
name|bitsToWrite
init|=
name|bitWidth
decl_stmt|;
while|while
condition|(
name|bitsToWrite
operator|>
name|bitsLeft
condition|)
block|{
comment|// add the bits to the bottom of the current word
name|current
operator||=
name|value
operator|>>>
operator|(
name|bitsToWrite
operator|-
name|bitsLeft
operator|)
expr_stmt|;
comment|// subtract out the bits we just added
name|bitsToWrite
operator|-=
name|bitsLeft
expr_stmt|;
comment|// zero out the bits above bitsToWrite
name|value
operator|&=
operator|(
literal|1
operator|<<
name|bitsToWrite
operator|)
operator|-
literal|1
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
literal|0
expr_stmt|;
name|bitsLeft
operator|=
literal|8
expr_stmt|;
block|}
name|bitsLeft
operator|-=
name|bitsToWrite
expr_stmt|;
name|current
operator||=
name|value
operator|<<
name|bitsLeft
expr_stmt|;
if|if
condition|(
name|bitsLeft
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
literal|0
expr_stmt|;
name|bitsLeft
operator|=
literal|8
expr_stmt|;
block|}
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|fastPathWrite
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|byte
index|[]
name|register
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|byte
name|b
range|:
name|register
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Unpack the bitpacked HyperLogLog register.    * @param in    *          - input stream    * @param length    *          - serialized length    * @return unpacked HLL register    * @throws IOException    */
specifier|private
specifier|static
name|byte
index|[]
name|unpackHLLRegister
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|bitSize
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|mask
init|=
operator|(
literal|1
operator|<<
name|bitSize
operator|)
operator|-
literal|1
decl_stmt|;
name|int
name|bitsLeft
init|=
literal|8
decl_stmt|;
if|if
condition|(
name|bitSize
operator|==
literal|8
condition|)
block|{
return|return
name|fastPathRead
argument_list|(
name|in
argument_list|,
name|length
argument_list|)
return|;
block|}
name|byte
name|current
init|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
name|in
operator|.
name|read
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|output
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|result
init|=
literal|0
decl_stmt|;
name|int
name|bitsLeftToRead
init|=
name|bitSize
decl_stmt|;
while|while
condition|(
name|bitsLeftToRead
operator|>
name|bitsLeft
condition|)
block|{
name|result
operator|<<=
name|bitsLeft
expr_stmt|;
name|result
operator||=
name|current
operator|&
operator|(
operator|(
literal|1
operator|<<
name|bitsLeft
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
name|bitsLeftToRead
operator|-=
name|bitsLeft
expr_stmt|;
name|current
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|bitsLeft
operator|=
literal|8
expr_stmt|;
block|}
if|if
condition|(
name|bitsLeftToRead
operator|>
literal|0
condition|)
block|{
name|result
operator|<<=
name|bitsLeftToRead
expr_stmt|;
name|bitsLeft
operator|-=
name|bitsLeftToRead
expr_stmt|;
name|result
operator||=
operator|(
name|current
operator|>>>
name|bitsLeft
operator|)
operator|&
operator|(
operator|(
literal|1
operator|<<
name|bitsLeftToRead
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
block|}
name|output
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|result
operator|&
name|mask
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|fastPathRead
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get estimated cardinality without deserializing HLL    * @param in    *          - serialized HLL    * @return - cardinality    * @throws IOException    */
specifier|public
specifier|static
name|long
name|getEstimatedCountFromSerializedHLL
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|checkMagicString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
return|return
name|readVulong
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|/**    * Check if the specified input stream is actually a HLL stream    * @param in    *          - input stream    * @throws IOException    */
specifier|private
specifier|static
name|void
name|checkMagicString
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|magic
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|magic
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|magic
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|magic
index|[
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|magic
argument_list|,
name|MAGIC
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The input stream is not a HyperLogLog stream."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Minimum bits required to encode the specified value    * @param val    *          - input value    * @return    */
specifier|private
specifier|static
name|int
name|getBitWidth
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|val
operator|!=
literal|0
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|val
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**    * Return relative error between actual and estimated cardinality    * @param actualCount    *          - actual count    * @param estimatedCount    *          - estimated count    * @return relative error    */
specifier|public
specifier|static
name|float
name|getRelativeError
parameter_list|(
name|long
name|actualCount
parameter_list|,
name|long
name|estimatedCount
parameter_list|)
block|{
name|float
name|err
init|=
operator|(
literal|1.0f
operator|-
operator|(
operator|(
name|float
operator|)
name|estimatedCount
operator|/
operator|(
name|float
operator|)
name|actualCount
operator|)
operator|)
operator|*
literal|100.0f
decl_stmt|;
return|return
name|err
return|;
block|}
comment|/**    * Write variable length encoded longs to output stream    * @param output    *          - out stream    * @param value    *          - long    * @throws IOException    */
specifier|private
specifier|static
name|void
name|writeVulong
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|(
name|value
operator|&
operator|~
literal|0x7f
operator|)
operator|==
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|output
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
name|value
operator|&
literal|0x7f
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|>>>=
literal|7
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Read variable length encoded longs from input stream    * @param in    *          - input stream    * @return decoded long value    * @throws IOException    */
specifier|private
specifier|static
name|long
name|readVulong
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
name|long
name|b
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
do|do
block|{
name|b
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Reading Vulong past EOF"
argument_list|)
throw|;
block|}
name|result
operator||=
operator|(
literal|0x7f
operator|&
name|b
operator|)
operator|<<
name|offset
expr_stmt|;
name|offset
operator|+=
literal|7
expr_stmt|;
block|}
do|while
condition|(
name|b
operator|>=
literal|0x80
condition|)
do|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

