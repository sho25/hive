begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|getCatalogQualifiedDbName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|getCatalogQualifiedTableName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|getDefaultCatalog
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|normalizeIdentifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLIntegrityConstraintViolationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOCanRetryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDODataStoreException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOHelper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOObjectNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|PersistenceManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|PersistenceManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|datastore
operator|.
name|DataStoreCache
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|datastore
operator|.
name|JDOConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|identity
operator|.
name|IntIdentity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|exception
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreDirectSql
operator|.
name|SqlFilterForPushdown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CreationMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CurrentNotificationEventId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FileMetadataExprType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FunctionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ISchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ISchemaName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventsCountRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventsCountResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionValuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionValuesRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|RolePrincipalGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|RuntimeStat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLCheckConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLDefaultConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLNotNullConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLUniqueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaCompatibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaValidation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaVersionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaVersionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerdeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMFullResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMNullablePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMNullableResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMPoolTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMResourcePlanStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMValidateResourcePlanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|datasource
operator|.
name|DataSourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|datasource
operator|.
name|DataSourceProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|metrics
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|metrics
operator|.
name|MetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MCreationMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MDBPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MDelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MGlobalPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MISchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MMasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MMetastoreDBProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MNotificationLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MNotificationNextId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartitionColumnPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartitionColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartitionPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MResourceUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MRoleMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MRuntimeStat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MSchemaVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MSerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MStorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MStringList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MTableColumnPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MTableColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MTablePrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MVersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MWMMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MWMMapping
operator|.
name|EntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MWMPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MWMResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MWMResourcePlan
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MWMTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
operator|.
name|FilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|SQLGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|FullTableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|ObjectPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|AbstractNucleusContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|ClassLoaderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|ClassLoaderResolverImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|NucleusContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|PropertyNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|api
operator|.
name|jdo
operator|.
name|JDOPersistenceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|api
operator|.
name|jdo
operator|.
name|JDOPersistenceManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|rdbms
operator|.
name|exceptions
operator|.
name|MissingTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|scostore
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|util
operator|.
name|WeakValueMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * This class is the interface between the application logic and the database  * store that contains the objects. Refrain putting any logic in mode.M* objects  * or in this file as former could be auto generated and this class would need  * to be made into a interface that can read both from a database and a  * filestore.  */
end_comment

begin_class
specifier|public
class|class
name|ObjectStore
implements|implements
name|RawStore
implements|,
name|Configurable
block|{
specifier|private
specifier|static
name|Properties
name|prop
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|PersistenceManagerFactory
name|pmf
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|forTwoMetastoreTesting
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|batchSize
init|=
name|Batchable
operator|.
name|NO_BATCHING
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
name|YMDHMS_FORMAT
init|=
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"yyyy_MM_dd_HH_mm_ss"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Lock
name|pmfPropLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|/**   * Verify the schema only once per JVM since the db connection info is static   */
specifier|private
specifier|final
specifier|static
name|AtomicBoolean
name|isSchemaVerified
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ObjectStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
enum|enum
name|TXN_STATUS
block|{
name|NO_STATE
block|,
name|OPEN
block|,
name|COMMITED
block|,
name|ROLLBACK
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PINCLASSMAP
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOSTNAME
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JDO_PARAM
init|=
literal|":param"
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|MTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"storagedescriptor"
argument_list|,
name|MStorageDescriptor
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"serdeinfo"
argument_list|,
name|MSerDeInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"partition"
argument_list|,
name|MPartition
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|MDatabase
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|MType
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"fieldschema"
argument_list|,
name|MFieldSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"order"
argument_list|,
name|MOrder
operator|.
name|class
argument_list|)
expr_stmt|;
name|PINCLASSMAP
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|String
name|hostname
init|=
literal|"UNKNOWN"
decl_stmt|;
try|try
block|{
name|InetAddress
name|clientAddr
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
name|hostname
operator|=
name|clientAddr
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|HOSTNAME
operator|=
name|hostname
expr_stmt|;
name|String
name|user
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"USER"
argument_list|)
decl_stmt|;
name|USER
operator|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|user
argument_list|,
literal|"UNKNOWN"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isInitialized
init|=
literal|false
decl_stmt|;
specifier|private
name|PersistenceManager
name|pm
init|=
literal|null
decl_stmt|;
specifier|private
name|SQLGenerator
name|sqlGenerator
init|=
literal|null
decl_stmt|;
specifier|private
name|MetaStoreDirectSql
name|directSql
init|=
literal|null
decl_stmt|;
specifier|private
name|DatabaseProduct
name|dbType
init|=
literal|null
decl_stmt|;
specifier|private
name|PartitionExpressionProxy
name|expressionProxy
init|=
literal|null
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|openTrasactionCalls
init|=
literal|0
decl_stmt|;
specifier|private
name|Transaction
name|currentTransaction
init|=
literal|null
decl_stmt|;
specifier|private
name|TXN_STATUS
name|transactionStatus
init|=
name|TXN_STATUS
operator|.
name|NO_STATE
decl_stmt|;
specifier|private
name|Pattern
name|partitionValidationPattern
decl_stmt|;
specifier|private
name|Counter
name|directSqlErrors
decl_stmt|;
comment|/**    * A Autocloseable wrapper around Query class to pass the Query object to the caller and let the caller release    * the resources when the QueryWrapper goes out of scope    */
specifier|public
specifier|static
class|class
name|QueryWrapper
implements|implements
name|AutoCloseable
block|{
specifier|public
name|Query
name|query
decl_stmt|;
comment|/**      * Explicitly closes the query object to release the resources      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|query
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ObjectStore
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * Called whenever this object is instantiated using ReflectionUtils, and also    * on connection retries. In cases of connection retries, conf will usually    * contain modified values.    */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Although an instance of ObjectStore is accessed by one thread, there may
comment|// be many threads with ObjectStore instances. So the static variables
comment|// pmf and prop need to be protected with locks.
name|pmfPropLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|isInitialized
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|configureSSL
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Properties
name|propsFromConf
init|=
name|getDataSourceProps
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|boolean
name|propsChanged
init|=
operator|!
name|propsFromConf
operator|.
name|equals
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|propsChanged
condition|)
block|{
if|if
condition|(
name|pmf
operator|!=
literal|null
condition|)
block|{
name|clearOutPmfClassLoaderCache
argument_list|(
name|pmf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|forTwoMetastoreTesting
condition|)
block|{
comment|// close the underlying connection pool to avoid leaks
name|pmf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|pmf
operator|=
literal|null
expr_stmt|;
name|prop
operator|=
literal|null
expr_stmt|;
block|}
assert|assert
operator|(
operator|!
name|isActiveTransaction
argument_list|()
operator|)
assert|;
name|shutdown
argument_list|()
expr_stmt|;
comment|// Always want to re-create pm as we don't know if it were created by the
comment|// most recent instance of the pmf
name|pm
operator|=
literal|null
expr_stmt|;
name|directSql
operator|=
literal|null
expr_stmt|;
name|expressionProxy
operator|=
literal|null
expr_stmt|;
name|openTrasactionCalls
operator|=
literal|0
expr_stmt|;
name|currentTransaction
operator|=
literal|null
expr_stmt|;
name|transactionStatus
operator|=
name|TXN_STATUS
operator|.
name|NO_STATE
expr_stmt|;
name|initialize
argument_list|(
name|propsFromConf
argument_list|)
expr_stmt|;
name|String
name|partitionValidationRegex
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|ConfVars
operator|.
name|PARTITION_NAME_WHITELIST_PATTERN
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionValidationRegex
operator|!=
literal|null
operator|&&
operator|!
name|partitionValidationRegex
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|partitionValidationPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|partitionValidationRegex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partitionValidationPattern
operator|=
literal|null
expr_stmt|;
block|}
comment|// Note, if metrics have not been initialized this will return null, which means we aren't
comment|// using metrics.  Thus we should always check whether this is non-null before using.
name|MetricRegistry
name|registry
init|=
name|Metrics
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
name|directSqlErrors
operator|=
name|Metrics
operator|.
name|getOrCreateCounter
argument_list|(
name|MetricsConstants
operator|.
name|DIRECTSQL_ERRORS
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|batchSize
operator|=
name|MetastoreConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|RAWSTORE_PARTITION_BATCH_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isInitialized
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to create persistence manager. Check dss.log for details"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initialized ObjectStore"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pmfPropLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ClassLoader
name|classLoader
decl_stmt|;
block|{
name|classLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
name|classLoader
operator|=
name|ObjectStore
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
name|void
name|initialize
parameter_list|(
name|Properties
name|dsProps
parameter_list|)
block|{
name|int
name|retryLimit
init|=
name|MetastoreConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HMS_HANDLER_ATTEMPTS
argument_list|)
decl_stmt|;
name|long
name|retryInterval
init|=
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HMS_HANDLER_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|int
name|numTries
init|=
name|retryLimit
decl_stmt|;
while|while
condition|(
name|numTries
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|initializeHelper
argument_list|(
name|dsProps
argument_list|)
expr_stmt|;
return|return;
comment|// If we reach here, we succeed.
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|numTries
operator|--
expr_stmt|;
name|boolean
name|retriable
init|=
name|isRetriableException
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|numTries
operator|>
literal|0
operator|)
operator|&&
name|retriable
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Retriable exception while instantiating ObjectStore, retrying. "
operator|+
literal|"{} tries left"
argument_list|,
name|numTries
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|retryInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Restore the interrupted status, since we do not want to catch it.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while sleeping before retrying."
argument_list|,
name|ie
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|// If we're here, we'll proceed down the next while loop iteration.
block|}
else|else
block|{
comment|// we've reached our limit, throw the last one.
if|if
condition|(
name|retriable
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception retry limit reached, not retrying any longer."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Non-retriable exception during ObjectStore initialize."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
argument_list|>
name|retriableExceptionClasses
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|JDOCanRetryException
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Helper function for initialize to determine if we should retry an exception.    * We return true if the exception is of a known type of retriable exceptions, or if one    * of its recursive .getCause returns a known type of retriable exception.    */
specifier|private
name|boolean
name|isRetriableException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|retriableExceptionClasses
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
range|:
name|retriableExceptionClasses
control|)
block|{
if|if
condition|(
name|c
operator|.
name|isInstance
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|isRetriableException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * private helper to do initialization routine, so we can retry if needed if it fails.    * @param dsProps    */
specifier|private
name|void
name|initializeHelper
parameter_list|(
name|Properties
name|dsProps
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ObjectStore, initialize called"
argument_list|)
expr_stmt|;
name|prop
operator|=
name|dsProps
expr_stmt|;
name|pm
operator|=
name|getPersistenceManager
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|productName
init|=
name|MetaStoreDirectSql
operator|.
name|getProductName
argument_list|(
name|pm
argument_list|)
decl_stmt|;
name|sqlGenerator
operator|=
operator|new
name|SQLGenerator
argument_list|(
name|DatabaseProduct
operator|.
name|determineDatabaseProduct
argument_list|(
name|productName
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error trying to figure out the database product"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|isInitialized
operator|=
name|pm
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|isInitialized
condition|)
block|{
name|dbType
operator|=
name|determineDatabaseProduct
argument_list|()
expr_stmt|;
name|expressionProxy
operator|=
name|createExpressionProxy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|TRY_DIRECT_SQL
argument_list|)
condition|)
block|{
name|String
name|schema
init|=
name|prop
operator|.
name|getProperty
argument_list|(
literal|"javax.jdo.mapping.Schema"
argument_list|)
decl_stmt|;
name|schema
operator|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|defaultIfBlank
argument_list|(
name|schema
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|directSql
operator|=
operator|new
name|MetaStoreDirectSql
argument_list|(
name|pm
argument_list|,
name|conf
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"RawStore: {}, with PersistenceManager: {}"
operator|+
literal|" created in the thread with id: {}"
argument_list|,
name|this
argument_list|,
name|pm
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DatabaseProduct
name|determineDatabaseProduct
parameter_list|()
block|{
try|try
block|{
return|return
name|DatabaseProduct
operator|.
name|determineDatabaseProduct
argument_list|(
name|getProductName
argument_list|(
name|pm
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot determine database product; assuming OTHER"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|DatabaseProduct
operator|.
name|OTHER
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getProductName
parameter_list|(
name|PersistenceManager
name|pm
parameter_list|)
block|{
name|JDOConnection
name|jdoConn
init|=
name|pm
operator|.
name|getDataStoreConnection
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|(
operator|(
name|Connection
operator|)
name|jdoConn
operator|.
name|getNativeConnection
argument_list|()
operator|)
operator|.
name|getMetaData
argument_list|()
operator|.
name|getDatabaseProductName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error retrieving product name"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|jdoConn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// We must release the connection before we call other pm methods.
block|}
block|}
comment|/**    * Creates the proxy used to evaluate expressions. This is here to prevent circular    * dependency - ql -&gt; metastore client&lt;-&gt metastore server -&gt ql. If server and    * client are split, this can be removed.    * @param conf Configuration.    * @return The partition expression proxy.    */
specifier|private
specifier|static
name|PartitionExpressionProxy
name|createExpressionProxy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|className
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|EXPRESSION_PROXY_CLASS
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|PartitionExpressionProxy
argument_list|>
name|clazz
init|=
name|JavaUtils
operator|.
name|getClass
argument_list|(
name|className
argument_list|,
name|PartitionExpressionProxy
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|JavaUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
literal|0
index|]
operator|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error loading PartitionExpressionProxy"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error loading PartitionExpressionProxy: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Configure the SSL properties of the connection from provided config    * @param conf    */
specifier|private
specifier|static
name|void
name|configureSSL
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// SSL support
name|String
name|sslPropString
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|DBACCESS_SSL_PROPS
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|sslPropString
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Metastore setting SSL properties of the connection to backed DB"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|sslProp
range|:
name|sslPropString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|String
index|[]
name|pair
init|=
name|sslProp
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|!=
literal|null
operator|&&
name|pair
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|pair
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|pair
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid metastore property value for {}"
argument_list|,
name|ConfVars
operator|.
name|DBACCESS_SSL_PROPS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Properties specified in hive-default.xml override the properties specified    * in jpox.properties.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
specifier|static
name|Properties
name|getDataSourceProps
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Properties
name|prop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|correctAutoStartMechanism
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// First, go through and set all our values for datanucleus and javax.jdo parameters.  This
comment|// has to be a separate first step because we don't set the default values in the config object.
for|for
control|(
name|ConfVars
name|var
range|:
name|MetastoreConf
operator|.
name|dataNucleusAndJdoConfs
control|)
block|{
name|String
name|confVal
init|=
name|MetastoreConf
operator|.
name|getAsString
argument_list|(
name|conf
argument_list|,
name|var
argument_list|)
decl_stmt|;
name|String
name|varName
init|=
name|var
operator|.
name|getVarname
argument_list|()
decl_stmt|;
name|Object
name|prevVal
init|=
name|prop
operator|.
name|setProperty
argument_list|(
name|varName
argument_list|,
name|confVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|MetastoreConf
operator|.
name|isPrintable
argument_list|(
name|varName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Overriding {} value {} from jpox.properties with {}"
argument_list|,
name|varName
argument_list|,
name|prevVal
argument_list|,
name|confVal
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Now, we need to look for any values that the user set that MetastoreConf doesn't know about.
comment|// TODO Commenting this out for now, as it breaks because the conf values aren't getting properly
comment|// interpolated in case of variables.  See HIVE-17788.
comment|/*     for (Map.Entry<String, String> e : conf) {       if (e.getKey().startsWith("datanucleus.") || e.getKey().startsWith("javax.jdo.")) {         // We have to handle this differently depending on whether it is a value known to         // MetastoreConf or not.  If it is, we need to get the default value if a value isn't         // provided.  If not, we just set whatever the user has set.         Object prevVal = prop.setProperty(e.getKey(), e.getValue());         if (LOG.isDebugEnabled()&& MetastoreConf.isPrintable(e.getKey())) {           LOG.debug("Overriding " + e.getKey() + " value " + prevVal               + " from  jpox.properties with " + e.getValue());         }       }     }     */
comment|// Password may no longer be in the conf, use getPassword()
try|try
block|{
name|String
name|passwd
init|=
name|MetastoreConf
operator|.
name|getPassword
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PWD
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|passwd
argument_list|)
condition|)
block|{
comment|// We can get away with the use of varname here because varname == hiveName for PWD
name|prop
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|PWD
operator|.
name|getVarname
argument_list|()
argument_list|,
name|passwd
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error getting metastore password: "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|,
name|err
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|prop
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|MetastoreConf
operator|.
name|isPrintable
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} = {}"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|prop
return|;
block|}
comment|/**    * Update conf to set datanucleus.autoStartMechanismMode=ignored.    * This is necessary to able to use older version of hive against    * an upgraded but compatible metastore schema in db from new version    * of hive    * @param conf    */
specifier|private
specifier|static
name|void
name|correctAutoStartMechanism
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|String
name|autoStartKey
init|=
literal|"datanucleus.autoStartMechanismMode"
decl_stmt|;
specifier|final
name|String
name|autoStartIgnore
init|=
literal|"ignored"
decl_stmt|;
name|String
name|currentAutoStartVal
init|=
name|conf
operator|.
name|get
argument_list|(
name|autoStartKey
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|autoStartIgnore
operator|.
name|equalsIgnoreCase
argument_list|(
name|currentAutoStartVal
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} is set to unsupported value {} . Setting it to value: {}"
argument_list|,
name|autoStartKey
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|autoStartKey
argument_list|)
argument_list|,
name|autoStartIgnore
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|autoStartKey
argument_list|,
name|autoStartIgnore
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|synchronized
name|PersistenceManagerFactory
name|getPMF
parameter_list|()
block|{
if|if
condition|(
name|pmf
operator|==
literal|null
condition|)
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|DataSourceProvider
name|dsp
init|=
name|DataSourceProviderFactory
operator|.
name|hasProviderSpecificConfigurations
argument_list|(
name|conf
argument_list|)
condition|?
name|DataSourceProviderFactory
operator|.
name|getDataSourceProvider
argument_list|(
name|conf
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|dsp
operator|==
literal|null
condition|)
block|{
name|pmf
operator|=
name|JDOHelper
operator|.
name|getPersistenceManagerFactory
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|DataSource
name|ds
init|=
name|dsp
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|dsProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Any preexisting datanucleus property should be passed along
name|dsProperties
operator|.
name|putAll
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|dsProperties
operator|.
name|put
argument_list|(
name|PropertyNames
operator|.
name|PROPERTY_CONNECTION_FACTORY
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|dsProperties
operator|.
name|put
argument_list|(
name|PropertyNames
operator|.
name|PROPERTY_CONNECTION_FACTORY2
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|dsProperties
operator|.
name|put
argument_list|(
literal|"javax.jdo.PersistenceManagerFactoryClass"
argument_list|,
literal|"org.datanucleus.api.jdo.JDOPersistenceManagerFactory"
argument_list|)
expr_stmt|;
name|pmf
operator|=
name|JDOHelper
operator|.
name|getPersistenceManagerFactory
argument_list|(
name|dsProperties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not create PersistenceManagerFactory using "
operator|+
literal|"connection pool properties, will fall back"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|pmf
operator|=
name|JDOHelper
operator|.
name|getPersistenceManagerFactory
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
name|DataStoreCache
name|dsc
init|=
name|pmf
operator|.
name|getDataStoreCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|dsc
operator|!=
literal|null
condition|)
block|{
name|String
name|objTypes
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CACHE_PINOBJTYPES
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting MetaStore object pin classes with hive.metastore.cache.pinobjtypes=\"{}\""
argument_list|,
name|objTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|objTypes
argument_list|)
condition|)
block|{
name|String
index|[]
name|typeTokens
init|=
name|objTypes
operator|.
name|toLowerCase
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|typeTokens
control|)
block|{
name|type
operator|=
name|type
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|PINCLASSMAP
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|dsc
operator|.
name|pinAll
argument_list|(
literal|true
argument_list|,
name|PINCLASSMAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} is not one of the pinnable object types: {}"
argument_list|,
name|type
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
argument_list|(
name|PINCLASSMAP
operator|.
name|keySet
argument_list|()
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"PersistenceManagerFactory returned null DataStoreCache object. Unable to initialize object pin types defined by hive.metastore.cache.pinobjtypes"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pmf
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCATALOG"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
name|PersistenceManager
name|getPersistenceManager
parameter_list|()
block|{
return|return
name|getPMF
argument_list|()
operator|.
name|getPersistenceManager
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"RawStore: {}, with PersistenceManager: {} will be shutdown"
argument_list|,
name|this
argument_list|,
name|pm
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|close
argument_list|()
expr_stmt|;
name|pm
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Opens a new one or the one already created Every call of this function must    * have corresponding commit or rollback function call    *    * @return an active transaction    */
annotation|@
name|Override
specifier|public
name|boolean
name|openTransaction
parameter_list|()
block|{
name|openTrasactionCalls
operator|++
expr_stmt|;
if|if
condition|(
name|openTrasactionCalls
operator|==
literal|1
condition|)
block|{
name|currentTransaction
operator|=
name|pm
operator|.
name|currentTransaction
argument_list|()
expr_stmt|;
name|currentTransaction
operator|.
name|begin
argument_list|()
expr_stmt|;
name|transactionStatus
operator|=
name|TXN_STATUS
operator|.
name|OPEN
expr_stmt|;
block|}
else|else
block|{
comment|// openTransactionCalls> 1 means this is an interior transaction
comment|// We should already have a transaction created that is active.
if|if
condition|(
operator|(
name|currentTransaction
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|currentTransaction
operator|.
name|isActive
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"openTransaction called in an interior"
operator|+
literal|" transaction scope, but currentTransaction is not active."
argument_list|)
throw|;
block|}
block|}
name|boolean
name|result
init|=
name|currentTransaction
operator|.
name|isActive
argument_list|()
decl_stmt|;
name|debugLog
argument_list|(
literal|"Open transaction: count = "
operator|+
name|openTrasactionCalls
operator|+
literal|", isActive = "
operator|+
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * if this is the commit of the first open call then an actual commit is    * called.    *    * @return Always returns true    */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|boolean
name|commitTransaction
parameter_list|()
block|{
if|if
condition|(
name|TXN_STATUS
operator|.
name|ROLLBACK
operator|==
name|transactionStatus
condition|)
block|{
name|debugLog
argument_list|(
literal|"Commit transaction: rollback"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|openTrasactionCalls
operator|<=
literal|0
condition|)
block|{
name|RuntimeException
name|e
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"commitTransaction was called but openTransactionCalls = "
operator|+
name|openTrasactionCalls
operator|+
literal|". This probably indicates that there are unbalanced "
operator|+
literal|"calls to openTransaction/commitTransaction"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unbalanced calls to open/commit Transaction"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
operator|!
name|currentTransaction
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|RuntimeException
name|e
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"commitTransaction was called but openTransactionCalls = "
operator|+
name|openTrasactionCalls
operator|+
literal|". This probably indicates that there are unbalanced "
operator|+
literal|"calls to openTransaction/commitTransaction"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unbalanced calls to open/commit Transaction"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|openTrasactionCalls
operator|--
expr_stmt|;
name|debugLog
argument_list|(
literal|"Commit transaction: count = "
operator|+
name|openTrasactionCalls
operator|+
literal|", isactive "
operator|+
name|currentTransaction
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|openTrasactionCalls
operator|==
literal|0
operator|)
operator|&&
name|currentTransaction
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|transactionStatus
operator|=
name|TXN_STATUS
operator|.
name|COMMITED
expr_stmt|;
name|currentTransaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @return true if there is an active transaction. If the current transaction    *         is either committed or rolled back it returns false    */
annotation|@
name|Override
specifier|public
name|boolean
name|isActiveTransaction
parameter_list|()
block|{
if|if
condition|(
name|currentTransaction
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|currentTransaction
operator|.
name|isActive
argument_list|()
return|;
block|}
comment|/**    * Rolls back the current transaction if it is active    */
annotation|@
name|Override
specifier|public
name|void
name|rollbackTransaction
parameter_list|()
block|{
if|if
condition|(
name|openTrasactionCalls
operator|<
literal|1
condition|)
block|{
name|debugLog
argument_list|(
literal|"rolling back transaction: no open transactions: "
operator|+
name|openTrasactionCalls
argument_list|)
expr_stmt|;
return|return;
block|}
name|debugLog
argument_list|(
literal|"Rollback transaction, isActive: "
operator|+
name|currentTransaction
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|currentTransaction
operator|.
name|isActive
argument_list|()
operator|&&
name|transactionStatus
operator|!=
name|TXN_STATUS
operator|.
name|ROLLBACK
condition|)
block|{
name|currentTransaction
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|openTrasactionCalls
operator|=
literal|0
expr_stmt|;
name|transactionStatus
operator|=
name|TXN_STATUS
operator|.
name|ROLLBACK
expr_stmt|;
comment|// remove all detached objects from the cache, since the transaction is
comment|// being rolled back they are no longer relevant, and this prevents them
comment|// from reattaching in future transactions
name|pm
operator|.
name|evictAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createCatalog
parameter_list|(
name|Catalog
name|cat
parameter_list|)
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating catalog "
operator|+
name|cat
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MCatalog
name|mCat
init|=
name|catToMCat
argument_list|(
name|cat
argument_list|)
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mCat
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterCatalog
parameter_list|(
name|String
name|catName
parameter_list|,
name|Catalog
name|cat
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
block|{
if|if
condition|(
operator|!
name|cat
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|catName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"You cannot change a catalog's name"
argument_list|)
throw|;
block|}
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|MCatalog
name|mCat
init|=
name|getMCatalog
argument_list|(
name|catName
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|cat
operator|.
name|getLocationUri
argument_list|()
argument_list|)
condition|)
block|{
name|mCat
operator|.
name|setLocationUri
argument_list|(
name|cat
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|cat
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|mCat
operator|.
name|setDescription
argument_list|(
name|cat
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mCat
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Catalog
name|getCatalog
parameter_list|(
name|String
name|catalogName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fetching catalog "
operator|+
name|catalogName
argument_list|)
expr_stmt|;
name|MCatalog
name|mCat
init|=
name|getMCatalog
argument_list|(
name|catalogName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mCat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"No catalog "
operator|+
name|catalogName
argument_list|)
throw|;
block|}
return|return
name|mCatToCat
argument_list|(
name|mCat
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCatalogs
parameter_list|()
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fetching all catalog names"
argument_list|)
expr_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|catalogs
init|=
literal|null
decl_stmt|;
name|String
name|queryStr
init|=
literal|"select name from org.apache.hadoop.hive.metastore.model.MCatalog"
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|catalogs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|catalogs
argument_list|)
expr_stmt|;
return|return
name|catalogs
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropCatalog
parameter_list|(
name|String
name|catalogName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dropping catalog "
operator|+
name|catalogName
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MCatalog
name|mCat
init|=
name|getMCatalog
argument_list|(
name|catalogName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mCat
argument_list|)
expr_stmt|;
if|if
condition|(
name|mCat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"No catalog "
operator|+
name|catalogName
argument_list|)
throw|;
block|}
name|pm
operator|.
name|deletePersistent
argument_list|(
name|mCat
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|MCatalog
name|getMCatalog
parameter_list|(
name|String
name|catalogName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|catalogName
operator|=
name|normalizeIdentifier
argument_list|(
name|catalogName
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MCatalog
operator|.
name|class
argument_list|,
literal|"name == catname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String catname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MCatalog
name|mCat
init|=
operator|(
name|MCatalog
operator|)
name|query
operator|.
name|execute
argument_list|(
name|catalogName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mCat
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|mCat
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|MCatalog
name|catToMCat
parameter_list|(
name|Catalog
name|cat
parameter_list|)
block|{
name|MCatalog
name|mCat
init|=
operator|new
name|MCatalog
argument_list|()
decl_stmt|;
name|mCat
operator|.
name|setName
argument_list|(
name|normalizeIdentifier
argument_list|(
name|cat
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cat
operator|.
name|isSetDescription
argument_list|()
condition|)
block|{
name|mCat
operator|.
name|setDescription
argument_list|(
name|cat
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mCat
operator|.
name|setLocationUri
argument_list|(
name|cat
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mCat
return|;
block|}
specifier|private
name|Catalog
name|mCatToCat
parameter_list|(
name|MCatalog
name|mCat
parameter_list|)
block|{
name|Catalog
name|cat
init|=
operator|new
name|Catalog
argument_list|(
name|mCat
operator|.
name|getName
argument_list|()
argument_list|,
name|mCat
operator|.
name|getLocationUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mCat
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cat
operator|.
name|setDescription
argument_list|(
name|mCat
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cat
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|MDatabase
name|mdb
init|=
operator|new
name|MDatabase
argument_list|()
decl_stmt|;
assert|assert
name|db
operator|.
name|getCatalogName
argument_list|()
operator|!=
literal|null
assert|;
name|mdb
operator|.
name|setCatalogName
argument_list|(
name|normalizeIdentifier
argument_list|(
name|db
operator|.
name|getCatalogName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
name|mdb
operator|.
name|getCatalogName
argument_list|()
operator|!=
literal|null
assert|;
name|mdb
operator|.
name|setName
argument_list|(
name|db
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|mdb
operator|.
name|setLocationUri
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|mdb
operator|.
name|setDescription
argument_list|(
name|db
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|mdb
operator|.
name|setParameters
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|mdb
operator|.
name|setOwnerName
argument_list|(
name|db
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalType
name|ownerType
init|=
name|db
operator|.
name|getOwnerType
argument_list|()
decl_stmt|;
name|mdb
operator|.
name|setOwnerType
argument_list|(
operator|(
literal|null
operator|==
name|ownerType
condition|?
name|PrincipalType
operator|.
name|USER
operator|.
name|name
argument_list|()
else|:
name|ownerType
operator|.
name|name
argument_list|()
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mdb
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
name|MDatabase
name|getMDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|MDatabase
name|mdb
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|name
operator|=
name|normalizeIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDatabase
operator|.
name|class
argument_list|,
literal|"name == dbname&& catalogName == catname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String dbname, java.lang.String catname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mdb
operator|=
operator|(
name|MDatabase
operator|)
name|query
operator|.
name|execute
argument_list|(
name|name
argument_list|,
name|catName
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mdb
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mdb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"There is no database "
operator|+
name|catName
operator|+
literal|"."
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|mdb
return|;
block|}
annotation|@
name|Override
specifier|public
name|Database
name|getDatabase
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|MetaException
name|ex
init|=
literal|null
decl_stmt|;
name|Database
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|getDatabaseInternal
argument_list|(
name|catalogName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// Signature restriction to NSOE, and NSOE being a flat exception prevents us from
comment|// setting the cause of the NSOE as the MetaException. We should not lose the info
comment|// we got here, but it's very likely that the MetaException is irrelevant and is
comment|// actually an NSOE message, so we should log it and throw an NSOE with the msg.
name|ex
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get database {}.{}, returning NoSuchObjectException"
argument_list|,
name|catalogName
argument_list|,
name|name
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|name
operator|+
operator|(
name|ex
operator|==
literal|null
condition|?
literal|""
else|:
operator|(
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
operator|)
operator|)
argument_list|)
throw|;
block|}
return|return
name|db
return|;
block|}
specifier|public
name|Database
name|getDatabaseInternal
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
operator|new
name|GetDbHelper
argument_list|(
name|catalogName
argument_list|,
name|name
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Database
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|Database
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getDatabase
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Database
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|Database
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getJDODatabase
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|public
name|Database
name|getJDODatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|MDatabase
name|mdb
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|mdb
operator|=
name|getMDatabase
argument_list|(
name|catName
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|mdb
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|setDescription
argument_list|(
name|mdb
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|setLocationUri
argument_list|(
name|mdb
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|setParameters
argument_list|(
name|convertMap
argument_list|(
name|mdb
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|setOwnerName
argument_list|(
name|mdb
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|defaultIfBlank
argument_list|(
name|mdb
operator|.
name|getOwnerType
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PrincipalType
name|principalType
init|=
operator|(
name|type
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|db
operator|.
name|setOwnerType
argument_list|(
name|principalType
argument_list|)
expr_stmt|;
name|db
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
return|return
name|db
return|;
block|}
comment|/**    * Alter the database object in metastore. Currently only the parameters    * of the database or the owner can be changed.    * @param dbName the database name    * @param db the Hive Database object    * @throws MetaException    * @throws NoSuchObjectException    */
annotation|@
name|Override
specifier|public
name|boolean
name|alterDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|MDatabase
name|mdb
init|=
literal|null
decl_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|mdb
operator|=
name|getMDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|mdb
operator|.
name|setParameters
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|mdb
operator|.
name|setOwnerName
argument_list|(
name|db
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|getOwnerType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|mdb
operator|.
name|setOwnerType
argument_list|(
name|db
operator|.
name|getOwnerType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|db
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|mdb
operator|.
name|setDescription
argument_list|(
name|db
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
condition|)
block|{
name|mdb
operator|.
name|setLocationUri
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mdb
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dropping database {}.{} along with all tables"
argument_list|,
name|catName
argument_list|,
name|dbname
argument_list|)
expr_stmt|;
name|dbname
operator|=
name|normalizeIdentifier
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
comment|// then drop the database
name|MDatabase
name|db
init|=
name|getMDatabase
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|dbGrants
init|=
name|this
operator|.
name|listDatabaseGrants
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
literal|null
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|dbGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|dbGrants
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|deletePersistent
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|queryWrapper
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
operator|||
name|pattern
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
return|return
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
return|;
block|}
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
literal|null
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
comment|// Take the pattern and split it on the | to get all the composing
comment|// patterns
name|String
index|[]
name|subpatterns
init|=
name|pattern
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|StringBuilder
name|filterBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parameterVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subpatterns
operator|.
name|length
argument_list|)
decl_stmt|;
name|appendSimpleCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"catalogName"
argument_list|,
operator|new
name|String
index|[]
block|{
name|catName
block|}
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
name|appendPatternCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"name"
argument_list|,
name|subpatterns
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDatabase
operator|.
name|class
argument_list|,
name|filterBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"name ascending"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|parameterVals
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|databases
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|databases
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|(
name|String
name|catName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
literal|null
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select name from org.apache.hadoop.hive.metastore.model.MDatabase "
operator|+
literal|"where catalogName == catname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String catname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|databases
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|catName
argument_list|)
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|databases
argument_list|)
expr_stmt|;
return|return
name|databases
return|;
block|}
specifier|private
name|MType
name|getMType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FieldSchema
name|field
range|:
name|type
operator|.
name|getFields
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|MFieldSchema
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|field
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MType
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|type
operator|.
name|getType1
argument_list|()
argument_list|,
name|type
operator|.
name|getType2
argument_list|()
argument_list|,
name|fields
argument_list|)
return|;
block|}
specifier|private
name|Type
name|getType
parameter_list|(
name|MType
name|mtype
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|mtype
operator|.
name|getFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MFieldSchema
name|field
range|:
name|mtype
operator|.
name|getFields
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|field
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Type
name|ret
init|=
operator|new
name|Type
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|mtype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setType1
argument_list|(
name|mtype
operator|.
name|getType1
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setType2
argument_list|(
name|mtype
operator|.
name|getType2
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setFields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|createType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|MType
name|mtype
init|=
name|getMType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mtype
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|Type
name|type
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MType
operator|.
name|class
argument_list|,
literal|"name == typeName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String typeName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MType
name|mtype
init|=
operator|(
name|MType
operator|)
name|query
operator|.
name|execute
argument_list|(
name|typeName
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|mtype
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|getType
argument_list|(
name|mtype
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MType
operator|.
name|class
argument_list|,
literal|"name == typeName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String typeName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MType
name|type
init|=
operator|(
name|MType
operator|)
name|query
operator|.
name|execute
argument_list|(
name|typeName
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDOObjectNotFoundException
name|e
parameter_list|)
block|{
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"type not found {}"
argument_list|,
name|typeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|createTableWithConstraints
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|,
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
parameter_list|,
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
parameter_list|,
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|defaultConstraints
parameter_list|,
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|checkConstraints
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
comment|// Add constraints.
comment|// We need not do a deep retrieval of the Table Column Descriptor while persisting the
comment|// constraints since this transaction involving create table is not yet committed.
name|List
argument_list|<
name|String
argument_list|>
name|constraintNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|foreignKeys
operator|!=
literal|null
condition|)
block|{
name|constraintNames
operator|.
name|addAll
argument_list|(
name|addForeignKeys
argument_list|(
name|foreignKeys
argument_list|,
literal|false
argument_list|,
name|primaryKeys
argument_list|,
name|uniqueConstraints
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|primaryKeys
operator|!=
literal|null
condition|)
block|{
name|constraintNames
operator|.
name|addAll
argument_list|(
name|addPrimaryKeys
argument_list|(
name|primaryKeys
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uniqueConstraints
operator|!=
literal|null
condition|)
block|{
name|constraintNames
operator|.
name|addAll
argument_list|(
name|addUniqueConstraints
argument_list|(
name|uniqueConstraints
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|notNullConstraints
operator|!=
literal|null
condition|)
block|{
name|constraintNames
operator|.
name|addAll
argument_list|(
name|addNotNullConstraints
argument_list|(
name|notNullConstraints
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultConstraints
operator|!=
literal|null
condition|)
block|{
name|constraintNames
operator|.
name|addAll
argument_list|(
name|addDefaultConstraints
argument_list|(
name|defaultConstraints
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkConstraints
operator|!=
literal|null
condition|)
block|{
name|constraintNames
operator|.
name|addAll
argument_list|(
name|addCheckConstraints
argument_list|(
name|checkConstraints
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|constraintNames
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MTable
name|mtbl
init|=
name|convertToMTable
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mtbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getCreationMetadata
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|MCreationMetadata
name|mcm
init|=
name|convertToMCreationMetadata
argument_list|(
name|tbl
operator|.
name|getCreationMetadata
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mcm
argument_list|)
expr_stmt|;
block|}
name|PrincipalPrivilegeSet
name|principalPrivs
init|=
name|tbl
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|toPersistPrivObjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|principalPrivs
operator|!=
literal|null
condition|)
block|{
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|userPrivs
init|=
name|principalPrivs
operator|.
name|getUserPrivileges
argument_list|()
decl_stmt|;
name|putPersistentPrivObjects
argument_list|(
name|mtbl
argument_list|,
name|toPersistPrivObjs
argument_list|,
name|now
argument_list|,
name|userPrivs
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"SQL"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|groupPrivs
init|=
name|principalPrivs
operator|.
name|getGroupPrivileges
argument_list|()
decl_stmt|;
name|putPersistentPrivObjects
argument_list|(
name|mtbl
argument_list|,
name|toPersistPrivObjs
argument_list|,
name|now
argument_list|,
name|groupPrivs
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|,
literal|"SQL"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|rolePrivs
init|=
name|principalPrivs
operator|.
name|getRolePrivileges
argument_list|()
decl_stmt|;
name|putPersistentPrivObjects
argument_list|(
name|mtbl
argument_list|,
name|toPersistPrivObjs
argument_list|,
name|now
argument_list|,
name|rolePrivs
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|"SQL"
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|toPersistPrivObjs
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isMaterializedViewTable
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
comment|// Add to the invalidation cache
name|MaterializationsInvalidationCache
operator|.
name|get
argument_list|()
operator|.
name|createMaterializedView
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getCreationMetadata
argument_list|()
operator|.
name|getTablesUsed
argument_list|()
argument_list|,
name|tbl
operator|.
name|getCreationMetadata
argument_list|()
operator|.
name|getValidTxnList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Convert PrivilegeGrantInfo from privMap to MTablePrivilege, and add all of    * them to the toPersistPrivObjs. These privilege objects will be persisted as    * part of createTable.    *    * @param mtbl    * @param toPersistPrivObjs    * @param now    * @param privMap    * @param type    */
specifier|private
name|void
name|putPersistentPrivObjects
parameter_list|(
name|MTable
name|mtbl
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|toPersistPrivObjs
parameter_list|,
name|int
name|now
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|privMap
parameter_list|,
name|PrincipalType
name|type
parameter_list|,
name|String
name|authorizer
parameter_list|)
block|{
if|if
condition|(
name|privMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|entry
range|:
name|privMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|principalName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|privs
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|privs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PrivilegeGrantInfo
name|priv
init|=
name|privs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|priv
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|MTablePrivilege
name|mTblSec
init|=
operator|new
name|MTablePrivilege
argument_list|(
name|principalName
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|mtbl
argument_list|,
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|now
argument_list|,
name|priv
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|priv
operator|.
name|getGrantorType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|priv
operator|.
name|isGrantOption
argument_list|()
argument_list|,
name|authorizer
argument_list|)
decl_stmt|;
name|toPersistPrivObjs
operator|.
name|add
argument_list|(
name|mTblSec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|materializedView
init|=
literal|false
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MTable
name|tbl
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|!=
literal|null
condition|)
block|{
name|materializedView
operator|=
name|TableType
operator|.
name|MATERIALIZED_VIEW
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tbl
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
comment|// first remove all the grants
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|tabGrants
init|=
name|listAllTableGrants
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|tabGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|tabGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|tblColGrants
init|=
name|listTableAllColumnGrants
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|tblColGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|tblColGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|partGrants
init|=
name|this
operator|.
name|listTableAllPartitionGrants
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|partGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|partGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|partColGrants
init|=
name|listTableAllPartitionColumnGrants
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|partColGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|partColGrants
argument_list|)
expr_stmt|;
block|}
comment|// delete column statistics if present
try|try
block|{
name|deleteTableColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found no table level column statistics associated with {} to delete"
argument_list|,
name|getCatalogQualifiedTableName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MConstraint
argument_list|>
name|tabConstraints
init|=
name|listAllTableConstraintsWithOptionalConstraintName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|tabConstraints
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|tabConstraints
argument_list|)
expr_stmt|;
block|}
name|preDropStorageDescriptor
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|materializedView
condition|)
block|{
name|dropCreationMetadata
argument_list|(
name|tbl
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// then remove the table
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|materializedView
condition|)
block|{
name|MaterializationsInvalidationCache
operator|.
name|get
argument_list|()
operator|.
name|dropMaterializedView
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|success
return|;
block|}
specifier|private
name|boolean
name|dropCreationMetadata
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MCreationMetadata
name|mcm
init|=
name|getCreationMetadata
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mcm
argument_list|)
expr_stmt|;
if|if
condition|(
name|mcm
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|mcm
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|private
name|List
argument_list|<
name|MConstraint
argument_list|>
name|listAllTableConstraintsWithOptionalConstraintName
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|constraintname
parameter_list|)
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|constraintname
operator|=
name|constraintname
operator|!=
literal|null
condition|?
name|normalizeIdentifier
argument_list|(
name|constraintname
argument_list|)
else|:
literal|null
expr_stmt|;
name|List
argument_list|<
name|MConstraint
argument_list|>
name|mConstraints
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|constraintNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select constraintName from org.apache.hadoop.hive.metastore.model.MConstraint  where "
operator|+
literal|"((parentTable.tableName == ptblname&& parentTable.database.name == pdbname&& "
operator|+
literal|"parentTable.database.catalogName == pcatname) || "
operator|+
literal|"(childTable != null&& childTable.tableName == ctblname&&"
operator|+
literal|"childTable.database.name == cdbname&& childTable.database.catalogName == ccatname)) "
operator|+
operator|(
name|constraintname
operator|!=
literal|null
condition|?
literal|"&& constraintName == constraintname"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String ptblname, java.lang.String pdbname,"
operator|+
literal|"java.lang.String pcatname, java.lang.String ctblname, java.lang.String cdbname,"
operator|+
literal|"java.lang.String ccatname"
operator|+
operator|(
name|constraintname
operator|!=
literal|null
condition|?
literal|", java.lang.String constraintname"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|constraintNamesColl
init|=
name|constraintname
operator|!=
literal|null
condition|?
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|constraintname
argument_list|)
operator|)
else|:
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|constraintNamesColl
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|currName
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|constraintNames
operator|.
name|add
argument_list|(
name|currName
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MConstraint
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFilter
argument_list|(
literal|"param.contains(constraintName)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.util.Collection param"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|constraints
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|constraintNames
argument_list|)
decl_stmt|;
name|mConstraints
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|constraints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MConstraint
name|currConstraint
init|=
operator|(
name|MConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|mConstraints
operator|.
name|add
argument_list|(
name|currConstraint
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mConstraints
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|convertToTable
argument_list|(
name|getMTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Retrieve creation metadata if needed
if|if
condition|(
name|tbl
operator|!=
literal|null
operator|&&
name|TableType
operator|.
name|MATERIALIZED_VIEW
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tbl
operator|.
name|getTableType
argument_list|()
argument_list|)
condition|)
block|{
name|tbl
operator|.
name|setCreationMetadata
argument_list|(
name|convertToCreationMetadata
argument_list|(
name|getCreationMetadata
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tbl
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|getTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|pattern
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|,
name|TableType
name|tableType
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
comment|// We only support pattern matching via jdo since pattern matching in Java
comment|// might be different than the one used by the metastore backends
return|return
name|getTablesInternal
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|pattern
argument_list|,
name|tableType
argument_list|,
operator|(
name|pattern
operator|==
literal|null
operator|||
name|pattern
operator|.
name|equals
argument_list|(
literal|".*"
argument_list|)
operator|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FullTableName
argument_list|>
name|getTableNamesWithStats
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
operator|new
name|GetListHelper
argument_list|<
name|FullTableName
argument_list|>
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|FullTableName
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|FullTableName
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getTableNamesWithStats
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|FullTableName
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|FullTableName
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"UnsupportedOperationException"
argument_list|)
throw|;
comment|// TODO: implement?
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPartitionColsWithStats
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
operator|new
name|GetHelper
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|directSql
operator|.
name|getColAndPartNamesWithStats
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"DirectSQL failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"UnsupportedOperationException"
argument_list|)
throw|;
comment|// TODO: implement?
block|}
annotation|@
name|Override
specifier|protected
name|String
name|describeResult
parameter_list|()
block|{
return|return
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" partitions"
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FullTableName
argument_list|>
name|getAllTableNamesForStats
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
operator|new
name|GetListHelper
argument_list|<
name|FullTableName
argument_list|>
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|FullTableName
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|FullTableName
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getAllTableNamesForStats
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|FullTableName
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|FullTableName
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|FullTableName
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|paramStr
init|=
literal|""
decl_stmt|,
name|whereStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MetaStoreDirectSql
operator|.
name|STATS_TABLE_TYPES
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|paramStr
operator|+=
literal|", "
expr_stmt|;
name|whereStr
operator|+=
literal|"||"
expr_stmt|;
block|}
name|paramStr
operator|+=
literal|"java.lang.String tt"
operator|+
name|i
expr_stmt|;
name|whereStr
operator|+=
literal|" tableType == tt"
operator|+
name|i
expr_stmt|;
block|}
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTable
operator|.
name|class
argument_list|,
name|whereStr
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|paramStr
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Collection
argument_list|<
name|MTable
argument_list|>
name|tbls
init|=
operator|(
name|Collection
argument_list|<
name|MTable
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|query
argument_list|,
name|MetaStoreDirectSql
operator|.
name|STATS_TABLE_TYPES
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|tbls
argument_list|)
expr_stmt|;
for|for
control|(
name|MTable
name|tbl
range|:
name|tbls
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|FullTableName
argument_list|(
name|tbl
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getTablesInternal
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|,
name|TableType
name|tableType
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|String
name|db_name
init|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
specifier|final
name|String
name|cat_name
init|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetListHelper
argument_list|<
name|String
argument_list|>
argument_list|(
name|cat_name
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getTables
argument_list|(
name|cat_name
argument_list|,
name|db_name
argument_list|,
name|tableType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getTablesInternalViaJdo
argument_list|(
name|cat_name
argument_list|,
name|db_name
argument_list|,
name|pattern
argument_list|,
name|tableType
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getTablesInternalViaJdo
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|,
name|TableType
name|tableType
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tbls
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
comment|// Take the pattern and split it on the | to get all the composing
comment|// patterns
name|List
argument_list|<
name|String
argument_list|>
name|parameterVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|filterBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|//adds database.name == dbName to the filter
name|appendSimpleCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"database.name"
argument_list|,
operator|new
name|String
index|[]
block|{
name|dbName
block|}
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
name|appendSimpleCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"database.catalogName"
argument_list|,
operator|new
name|String
index|[]
block|{
name|catName
block|}
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
name|appendPatternCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"tableName"
argument_list|,
name|pattern
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableType
operator|!=
literal|null
condition|)
block|{
name|appendPatternCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"tableType"
argument_list|,
operator|new
name|String
index|[]
block|{
name|tableType
operator|.
name|toString
argument_list|()
block|}
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTable
operator|.
name|class
argument_list|,
name|filterBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"tableName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"tableName ascending"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|parameterVals
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|tbls
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|tbls
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMaterializedViewsForRewriting
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|String
name|db_name
init|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
argument_list|<
name|?
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tbls
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTable
operator|.
name|class
argument_list|,
literal|"database.name == db&& database.catalogName == cat&& tableType == tt&& rewriteEnabled == re"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String db, java.lang.String cat, java.lang.String tt, boolean re"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"tableName"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|db_name
argument_list|,
name|catName
argument_list|,
name|TableType
operator|.
name|MATERIALIZED_VIEW
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|tbls
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|tbls
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDatabaseCount
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|getObjectCount
argument_list|(
literal|"name"
argument_list|,
name|MDatabase
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPartitionCount
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|getObjectCount
argument_list|(
literal|"partitionName"
argument_list|,
name|MPartition
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTableCount
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|getObjectCount
argument_list|(
literal|"tableName"
argument_list|,
name|MTable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|int
name|getObjectCount
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|objName
parameter_list|)
block|{
name|Long
name|result
init|=
literal|0L
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|String
name|queryStr
init|=
literal|"select count("
operator|+
name|fieldName
operator|+
literal|") from "
operator|+
name|objName
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
name|Long
operator|)
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|intValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableMeta
argument_list|>
name|getTableMeta
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbNames
parameter_list|,
name|String
name|tableNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|TableMeta
argument_list|>
name|metas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
comment|// Take the pattern and split it on the | to get all the composing
comment|// patterns
name|StringBuilder
name|filterBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parameterVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appendSimpleCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"database.catalogName"
argument_list|,
operator|new
name|String
index|[]
block|{
name|catName
block|}
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbNames
operator|!=
literal|null
operator|&&
operator|!
name|dbNames
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|appendPatternCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"database.name"
argument_list|,
name|dbNames
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableNames
operator|!=
literal|null
operator|&&
operator|!
name|tableNames
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|appendPatternCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"tableName"
argument_list|,
name|tableNames
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableTypes
operator|!=
literal|null
operator|&&
operator|!
name|tableTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appendSimpleCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"tableType"
argument_list|,
name|tableTypes
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getTableMeta with filter "
operator|+
name|filterBuilder
operator|.
name|toString
argument_list|()
operator|+
literal|" params: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|parameterVals
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTable
operator|.
name|class
argument_list|,
name|filterBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MTable
argument_list|>
name|tables
init|=
operator|(
name|Collection
argument_list|<
name|MTable
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|parameterVals
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|parameterVals
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|MTable
name|table
range|:
name|tables
control|)
block|{
name|TableMeta
name|metaData
init|=
operator|new
name|TableMeta
argument_list|(
name|table
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableType
argument_list|()
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|setComments
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|metas
operator|.
name|add
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|metas
return|;
block|}
specifier|private
name|StringBuilder
name|appendPatternCondition
parameter_list|(
name|StringBuilder
name|filterBuilder
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
index|[]
name|elements
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parameterVals
parameter_list|)
block|{
return|return
name|appendCondition
argument_list|(
name|filterBuilder
argument_list|,
name|fieldName
argument_list|,
name|elements
argument_list|,
literal|true
argument_list|,
name|parameterVals
argument_list|)
return|;
block|}
specifier|private
name|StringBuilder
name|appendPatternCondition
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|elements
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|elements
operator|=
name|normalizeIdentifier
argument_list|(
name|elements
argument_list|)
expr_stmt|;
return|return
name|appendCondition
argument_list|(
name|builder
argument_list|,
name|fieldName
argument_list|,
name|elements
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
argument_list|,
literal|true
argument_list|,
name|parameters
argument_list|)
return|;
block|}
specifier|private
name|StringBuilder
name|appendSimpleCondition
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
index|[]
name|elements
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
return|return
name|appendCondition
argument_list|(
name|builder
argument_list|,
name|fieldName
argument_list|,
name|elements
argument_list|,
literal|false
argument_list|,
name|parameters
argument_list|)
return|;
block|}
specifier|private
name|StringBuilder
name|appendCondition
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
index|[]
name|elements
parameter_list|,
name|boolean
name|pattern
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"&& "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|builder
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|elements
control|)
block|{
if|if
condition|(
name|pattern
condition|)
block|{
name|element
operator|=
literal|"(?i)"
operator|+
name|element
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
expr_stmt|;
block|}
name|parameters
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
name|length
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" || "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
if|if
condition|(
name|pattern
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|".matches("
argument_list|)
operator|.
name|append
argument_list|(
name|JDO_PARAM
argument_list|)
operator|.
name|append
argument_list|(
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" == "
argument_list|)
operator|.
name|append
argument_list|(
name|JDO_PARAM
argument_list|)
operator|.
name|append
argument_list|(
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|" )"
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|getTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
literal|".*"
argument_list|)
return|;
block|}
class|class
name|AttachedMTableInfo
block|{
name|MTable
name|mtbl
decl_stmt|;
name|MColumnDescriptor
name|mcd
decl_stmt|;
specifier|public
name|AttachedMTableInfo
parameter_list|()
block|{}
specifier|public
name|AttachedMTableInfo
parameter_list|(
name|MTable
name|mtbl
parameter_list|,
name|MColumnDescriptor
name|mcd
parameter_list|)
block|{
name|this
operator|.
name|mtbl
operator|=
name|mtbl
expr_stmt|;
name|this
operator|.
name|mcd
operator|=
name|mcd
expr_stmt|;
block|}
block|}
specifier|private
name|AttachedMTableInfo
name|getMTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|boolean
name|retrieveCD
parameter_list|)
block|{
name|AttachedMTableInfo
name|nmtbl
init|=
operator|new
name|AttachedMTableInfo
argument_list|()
decl_stmt|;
name|MTable
name|mtbl
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|db
operator|=
name|normalizeIdentifier
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|table
operator|=
name|normalizeIdentifier
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTable
operator|.
name|class
argument_list|,
literal|"tableName == table&& database.name == db&& database.catalogName == catname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String table, java.lang.String db, java.lang.String catname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing getMTable for "
operator|+
name|getCatalogQualifiedTableName
argument_list|(
name|catName
argument_list|,
name|db
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|mtbl
operator|=
operator|(
name|MTable
operator|)
name|query
operator|.
name|execute
argument_list|(
name|table
argument_list|,
name|db
argument_list|,
name|catName
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mtbl
argument_list|)
expr_stmt|;
comment|// Retrieving CD can be expensive and unnecessary, so do it only when required.
if|if
condition|(
name|mtbl
operator|!=
literal|null
operator|&&
name|retrieveCD
condition|)
block|{
name|pm
operator|.
name|retrieve
argument_list|(
name|mtbl
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mtbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
argument_list|)
expr_stmt|;
name|nmtbl
operator|.
name|mcd
operator|=
name|mtbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
name|nmtbl
operator|.
name|mtbl
operator|=
name|mtbl
expr_stmt|;
return|return
name|nmtbl
return|;
block|}
specifier|private
name|MCreationMetadata
name|getCreationMetadata
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|MCreationMetadata
name|mcm
init|=
literal|null
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MCreationMetadata
operator|.
name|class
argument_list|,
literal|"tblName == table&& dbName == db&& catalogName == cat"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String table, java.lang.String db, java.lang.String cat"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mcm
operator|=
operator|(
name|MCreationMetadata
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mcm
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mcm
return|;
block|}
specifier|private
name|MTable
name|getMTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|)
block|{
name|AttachedMTableInfo
name|nmtbl
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|db
argument_list|,
name|table
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|nmtbl
operator|.
name|mtbl
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tbl_names
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|dbExistsQuery
init|=
literal|null
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|db
operator|=
name|normalizeIdentifier
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lowered_tbl_names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tbl_names
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tbl_names
control|)
block|{
name|lowered_tbl_names
operator|.
name|add
argument_list|(
name|normalizeIdentifier
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTable
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//<<<<<<< HEAD
name|query
operator|.
name|setFilter
argument_list|(
literal|"database.name == db&& database.catalogName == cat&& tbl_names.contains(tableName)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String db, java.lang.String cat, java.util.Collection tbl_names"
argument_list|)
expr_stmt|;
name|Collection
name|mtables
init|=
operator|(
name|Collection
operator|)
name|query
operator|.
name|execute
argument_list|(
name|db
argument_list|,
name|catName
argument_list|,
name|lowered_tbl_names
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtables
operator|==
literal|null
operator|||
name|mtables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Need to differentiate between an unmatched pattern and a non-existent database
name|dbExistsQuery
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDatabase
operator|.
name|class
argument_list|,
literal|"name == db&& catalogName == cat"
argument_list|)
expr_stmt|;
name|dbExistsQuery
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String db, java.lang.String cat"
argument_list|)
expr_stmt|;
name|dbExistsQuery
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbExistsQuery
operator|.
name|setResult
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|String
name|dbNameIfExists
init|=
operator|(
name|String
operator|)
name|dbExistsQuery
operator|.
name|execute
argument_list|(
name|db
argument_list|,
name|catName
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|dbNameIfExists
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnknownDBException
argument_list|(
literal|"Could not find database "
operator|+
name|getCatalogQualifiedDbName
argument_list|(
name|catName
argument_list|,
name|db
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|mtables
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Table
name|tbl
init|=
name|convertToTable
argument_list|(
operator|(
name|MTable
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
comment|// Retrieve creation metadata if needed
if|if
condition|(
name|TableType
operator|.
name|MATERIALIZED_VIEW
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tbl
operator|.
name|getTableType
argument_list|()
argument_list|)
condition|)
block|{
name|tbl
operator|.
name|setCreationMetadata
argument_list|(
name|convertToCreationMetadata
argument_list|(
name|getCreationMetadata
argument_list|(
name|tbl
operator|.
name|getCatName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tables
operator|.
name|add
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbExistsQuery
operator|!=
literal|null
condition|)
block|{
name|dbExistsQuery
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tables
return|;
block|}
comment|/** Makes shallow copy of a list to avoid DataNucleus mucking with our objects. */
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|convertList
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|dnList
parameter_list|)
block|{
return|return
operator|(
name|dnList
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|dnList
argument_list|)
return|;
block|}
comment|/** Makes shallow copy of a map to avoid DataNucleus mucking with our objects. */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|convertMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dnMap
parameter_list|)
block|{
return|return
name|MetaStoreUtils
operator|.
name|trimMapNulls
argument_list|(
name|dnMap
argument_list|,
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|ORM_RETRIEVE_MAPNULLS_AS_EMPTY_STRINGS
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Table
name|convertToTable
parameter_list|(
name|MTable
name|mtbl
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|mtbl
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|tableType
init|=
name|mtbl
operator|.
name|getTableType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableType
operator|==
literal|null
condition|)
block|{
comment|// for backwards compatibility with old metastore persistence
if|if
condition|(
name|mtbl
operator|.
name|getViewOriginalText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|mtbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
argument_list|)
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tableType
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|Table
name|t
init|=
operator|new
name|Table
argument_list|(
name|mtbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getOwner
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getRetention
argument_list|()
argument_list|,
name|convertToStorageDescriptor
argument_list|(
name|mtbl
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|convertToFieldSchemas
argument_list|(
name|mtbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|convertMap
argument_list|(
name|mtbl
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|,
name|mtbl
operator|.
name|getViewOriginalText
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getViewExpandedText
argument_list|()
argument_list|,
name|tableType
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|mtbl
operator|.
name|getOwnerType
argument_list|()
argument_list|)
condition|)
block|{
comment|// Before the ownerType exists in an old Hive schema, USER was the default type for owner.
comment|// Let's set the default to USER to keep backward compatibility.
name|t
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|mtbl
operator|.
name|getOwnerType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|setRewriteEnabled
argument_list|(
name|mtbl
operator|.
name|isRewriteEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setCatName
argument_list|(
name|mtbl
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|private
name|MTable
name|convertToMTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MDatabase
name|mdb
init|=
literal|null
decl_stmt|;
name|String
name|catName
init|=
name|tbl
operator|.
name|isSetCatName
argument_list|()
condition|?
name|tbl
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|mdb
operator|=
name|getMDatabase
argument_list|(
name|catName
argument_list|,
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not convert to MTable"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Database "
operator|+
name|getCatalogQualifiedDbName
argument_list|(
name|catName
argument_list|,
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|+
literal|" doesn't exist."
argument_list|)
throw|;
block|}
comment|// If the table has property EXTERNAL set, update table type
comment|// accordingly
name|String
name|tableType
init|=
name|tbl
operator|.
name|getTableType
argument_list|()
decl_stmt|;
name|boolean
name|isExternal
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
if|if
condition|(
name|isExternal
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isExternal
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|PrincipalType
name|ownerPrincipalType
init|=
name|tbl
operator|.
name|getOwnerType
argument_list|()
decl_stmt|;
name|String
name|ownerType
init|=
operator|(
name|ownerPrincipalType
operator|==
literal|null
operator|)
condition|?
name|PrincipalType
operator|.
name|USER
operator|.
name|name
argument_list|()
else|:
name|ownerPrincipalType
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// A new table is always created with a new column descriptor
return|return
operator|new
name|MTable
argument_list|(
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|mdb
argument_list|,
name|convertToMStorageDescriptor
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|tbl
operator|.
name|getOwner
argument_list|()
argument_list|,
name|ownerType
argument_list|,
name|tbl
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|tbl
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|tbl
operator|.
name|getRetention
argument_list|()
argument_list|,
name|convertToMFieldSchemas
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tbl
operator|.
name|getViewOriginalText
argument_list|()
argument_list|,
name|tbl
operator|.
name|getViewExpandedText
argument_list|()
argument_list|,
name|tbl
operator|.
name|isRewriteEnabled
argument_list|()
argument_list|,
name|tableType
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|convertToMFieldSchemas
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|keys
parameter_list|)
block|{
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|mkeys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
condition|)
block|{
name|mkeys
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|part
range|:
name|keys
control|)
block|{
name|mkeys
operator|.
name|add
argument_list|(
operator|new
name|MFieldSchema
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|part
operator|.
name|getType
argument_list|()
argument_list|,
name|part
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mkeys
return|;
block|}
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|convertToFieldSchemas
parameter_list|(
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|mkeys
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|keys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mkeys
operator|!=
literal|null
condition|)
block|{
name|keys
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mkeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MFieldSchema
name|part
range|:
name|mkeys
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getType
argument_list|()
argument_list|,
name|part
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|keys
return|;
block|}
specifier|private
name|List
argument_list|<
name|MOrder
argument_list|>
name|convertToMOrders
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|keys
parameter_list|)
block|{
name|List
argument_list|<
name|MOrder
argument_list|>
name|mkeys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
condition|)
block|{
name|mkeys
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Order
name|part
range|:
name|keys
control|)
block|{
name|mkeys
operator|.
name|add
argument_list|(
operator|new
name|MOrder
argument_list|(
name|normalizeIdentifier
argument_list|(
name|part
operator|.
name|getCol
argument_list|()
argument_list|)
argument_list|,
name|part
operator|.
name|getOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mkeys
return|;
block|}
specifier|private
name|List
argument_list|<
name|Order
argument_list|>
name|convertToOrders
parameter_list|(
name|List
argument_list|<
name|MOrder
argument_list|>
name|mkeys
parameter_list|)
block|{
name|List
argument_list|<
name|Order
argument_list|>
name|keys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mkeys
operator|!=
literal|null
condition|)
block|{
name|keys
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mkeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MOrder
name|part
range|:
name|mkeys
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
name|part
operator|.
name|getCol
argument_list|()
argument_list|,
name|part
operator|.
name|getOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|keys
return|;
block|}
specifier|private
name|SerDeInfo
name|convertToSerDeInfo
parameter_list|(
name|MSerDeInfo
name|ms
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Invalid SerDeInfo object"
argument_list|)
throw|;
block|}
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
name|ms
operator|.
name|getName
argument_list|()
argument_list|,
name|ms
operator|.
name|getSerializationLib
argument_list|()
argument_list|,
name|convertMap
argument_list|(
name|ms
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ms
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|serde
operator|.
name|setDescription
argument_list|(
name|ms
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ms
operator|.
name|getSerializerClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|serde
operator|.
name|setSerializerClass
argument_list|(
name|ms
operator|.
name|getSerializerClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ms
operator|.
name|getDeserializerClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|serde
operator|.
name|setDeserializerClass
argument_list|(
name|ms
operator|.
name|getDeserializerClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ms
operator|.
name|getSerdeType
argument_list|()
operator|>
literal|0
condition|)
block|{
name|serde
operator|.
name|setSerdeType
argument_list|(
name|SerdeType
operator|.
name|findByValue
argument_list|(
name|ms
operator|.
name|getSerdeType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|serde
return|;
block|}
specifier|private
name|MSerDeInfo
name|convertToMSerDeInfo
parameter_list|(
name|SerDeInfo
name|ms
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Invalid SerDeInfo object"
argument_list|)
throw|;
block|}
return|return
operator|new
name|MSerDeInfo
argument_list|(
name|ms
operator|.
name|getName
argument_list|()
argument_list|,
name|ms
operator|.
name|getSerializationLib
argument_list|()
argument_list|,
name|ms
operator|.
name|getParameters
argument_list|()
argument_list|,
name|ms
operator|.
name|getDescription
argument_list|()
argument_list|,
name|ms
operator|.
name|getSerializerClass
argument_list|()
argument_list|,
name|ms
operator|.
name|getDeserializerClass
argument_list|()
argument_list|,
name|ms
operator|.
name|getSerdeType
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|ms
operator|.
name|getSerdeType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Given a list of model field schemas, create a new model column descriptor.    * @param cols the columns the column descriptor contains    * @return a new column descriptor db-backed object    */
specifier|private
name|MColumnDescriptor
name|createNewMColumnDescriptor
parameter_list|(
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|cols
parameter_list|)
block|{
if|if
condition|(
name|cols
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|MColumnDescriptor
argument_list|(
name|cols
argument_list|)
return|;
block|}
comment|// MSD and SD should be same objects. Not sure how to make then same right now
comment|// MSerdeInfo *& SerdeInfo should be same as well
specifier|private
name|StorageDescriptor
name|convertToStorageDescriptor
parameter_list|(
name|MStorageDescriptor
name|msd
parameter_list|,
name|boolean
name|noFS
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|msd
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|mFieldSchemas
init|=
name|msd
operator|.
name|getCD
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|msd
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|noFS
condition|?
literal|null
else|:
name|convertToFieldSchemas
argument_list|(
name|mFieldSchemas
argument_list|)
argument_list|,
name|msd
operator|.
name|getLocation
argument_list|()
argument_list|,
name|msd
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|msd
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|msd
operator|.
name|isCompressed
argument_list|()
argument_list|,
name|msd
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
name|convertToSerDeInfo
argument_list|(
name|msd
operator|.
name|getSerDeInfo
argument_list|()
argument_list|)
argument_list|,
name|convertList
argument_list|(
name|msd
operator|.
name|getBucketCols
argument_list|()
argument_list|)
argument_list|,
name|convertToOrders
argument_list|(
name|msd
operator|.
name|getSortCols
argument_list|()
argument_list|)
argument_list|,
name|convertMap
argument_list|(
name|msd
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SkewedInfo
name|skewedInfo
init|=
operator|new
name|SkewedInfo
argument_list|(
name|convertList
argument_list|(
name|msd
operator|.
name|getSkewedColNames
argument_list|()
argument_list|)
argument_list|,
name|convertToSkewedValues
argument_list|(
name|msd
operator|.
name|getSkewedColValues
argument_list|()
argument_list|)
argument_list|,
name|covertToSkewedMap
argument_list|(
name|msd
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setSkewedInfo
argument_list|(
name|skewedInfo
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|msd
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sd
return|;
block|}
specifier|private
name|StorageDescriptor
name|convertToStorageDescriptor
parameter_list|(
name|MStorageDescriptor
name|msd
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|convertToStorageDescriptor
argument_list|(
name|msd
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Convert a list of MStringList to a list of list string    *    * @param mLists    * @return    */
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|convertToSkewedValues
parameter_list|(
name|List
argument_list|<
name|MStringList
argument_list|>
name|mLists
parameter_list|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|lists
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mLists
operator|!=
literal|null
condition|)
block|{
name|lists
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mLists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MStringList
name|element
range|:
name|mLists
control|)
block|{
name|lists
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|element
operator|.
name|getInternalList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lists
return|;
block|}
specifier|private
name|List
argument_list|<
name|MStringList
argument_list|>
name|convertToMStringLists
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mLists
parameter_list|)
block|{
name|List
argument_list|<
name|MStringList
argument_list|>
name|lists
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|mLists
condition|)
block|{
name|lists
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|mList
range|:
name|mLists
control|)
block|{
name|lists
operator|.
name|add
argument_list|(
operator|new
name|MStringList
argument_list|(
name|mList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lists
return|;
block|}
comment|/**    * Convert a MStringList Map to a Map    * @param mMap    * @return    */
specifier|private
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|covertToSkewedMap
parameter_list|(
name|Map
argument_list|<
name|MStringList
argument_list|,
name|String
argument_list|>
name|mMap
parameter_list|)
block|{
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mMap
operator|!=
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|mMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|MStringList
argument_list|>
name|keys
init|=
name|mMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|MStringList
name|key
range|:
name|keys
control|)
block|{
name|map
operator|.
name|put
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|key
operator|.
name|getInternalList
argument_list|()
argument_list|)
argument_list|,
name|mMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|/**    * Covert a Map to a MStringList Map    * @param mMap    * @return    */
specifier|private
name|Map
argument_list|<
name|MStringList
argument_list|,
name|String
argument_list|>
name|covertToMapMStringList
parameter_list|(
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|mMap
parameter_list|)
block|{
name|Map
argument_list|<
name|MStringList
argument_list|,
name|String
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mMap
operator|!=
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|mMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|keys
init|=
name|mMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|key
range|:
name|keys
control|)
block|{
name|map
operator|.
name|put
argument_list|(
operator|new
name|MStringList
argument_list|(
name|key
argument_list|)
argument_list|,
name|mMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|/**    * Converts a storage descriptor to a db-backed storage descriptor.  Creates a    *   new db-backed column descriptor object for this SD.    * @param sd the storage descriptor to wrap in a db-backed object    * @return the storage descriptor db-backed object    * @throws MetaException    */
specifier|private
name|MStorageDescriptor
name|convertToMStorageDescriptor
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|sd
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MColumnDescriptor
name|mcd
init|=
name|createNewMColumnDescriptor
argument_list|(
name|convertToMFieldSchemas
argument_list|(
name|sd
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToMStorageDescriptor
argument_list|(
name|sd
argument_list|,
name|mcd
argument_list|)
return|;
block|}
comment|/**    * Converts a storage descriptor to a db-backed storage descriptor.  It points the    * storage descriptor's column descriptor to the one passed as an argument,    * so it does not create a new mcolumn descriptor object.    * @param sd the storage descriptor to wrap in a db-backed object    * @param mcd the db-backed column descriptor    * @return the db-backed storage descriptor object    * @throws MetaException    */
specifier|private
name|MStorageDescriptor
name|convertToMStorageDescriptor
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|MColumnDescriptor
name|mcd
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|sd
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|MStorageDescriptor
argument_list|(
name|mcd
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|,
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|sd
operator|.
name|isCompressed
argument_list|()
argument_list|,
name|sd
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
name|convertToMSerDeInfo
argument_list|(
name|sd
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
argument_list|,
name|sd
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|convertToMOrders
argument_list|(
name|sd
operator|.
name|getSortCols
argument_list|()
argument_list|)
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
argument_list|,
operator|(
literal|null
operator|==
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|)
condition|?
literal|null
else|:
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColNames
argument_list|()
argument_list|,
name|convertToMStringLists
argument_list|(
operator|(
literal|null
operator|==
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|)
condition|?
literal|null
else|:
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValues
argument_list|()
argument_list|)
argument_list|,
name|covertToMapMStringList
argument_list|(
operator|(
literal|null
operator|==
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|)
condition|?
literal|null
else|:
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|)
argument_list|,
name|sd
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|MCreationMetadata
name|convertToMCreationMetadata
parameter_list|(
name|CreationMetadata
name|m
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|MTable
argument_list|>
name|tablesUsed
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fullyQualifiedName
range|:
name|m
operator|.
name|getTablesUsed
argument_list|()
control|)
block|{
name|String
index|[]
name|names
init|=
name|fullyQualifiedName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|tablesUsed
operator|.
name|add
argument_list|(
name|getMTable
argument_list|(
name|m
operator|.
name|getCatName
argument_list|()
argument_list|,
name|names
index|[
literal|0
index|]
argument_list|,
name|names
index|[
literal|1
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|mtbl
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MCreationMetadata
argument_list|(
name|m
operator|.
name|getCatName
argument_list|()
argument_list|,
name|m
operator|.
name|getDbName
argument_list|()
argument_list|,
name|m
operator|.
name|getTblName
argument_list|()
argument_list|,
name|tablesUsed
argument_list|,
name|m
operator|.
name|getValidTxnList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|CreationMetadata
name|convertToCreationMetadata
parameter_list|(
name|MCreationMetadata
name|s
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|tablesUsed
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MTable
name|mtbl
range|:
name|s
operator|.
name|getTables
argument_list|()
control|)
block|{
name|tablesUsed
operator|.
name|add
argument_list|(
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|mtbl
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CreationMetadata
name|r
init|=
operator|new
name|CreationMetadata
argument_list|(
name|s
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|s
operator|.
name|getDbName
argument_list|()
argument_list|,
name|s
operator|.
name|getTblName
argument_list|()
argument_list|,
name|tablesUsed
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getTxnList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|setValidTxnList
argument_list|(
name|s
operator|.
name|getTxnList
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|tabGrants
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|tabColumnGrants
init|=
literal|null
decl_stmt|;
name|MTable
name|table
init|=
name|this
operator|.
name|getMTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
argument_list|)
condition|)
block|{
name|tabGrants
operator|=
name|this
operator|.
name|listAllTableGrants
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tabColumnGrants
operator|=
name|this
operator|.
name|listTableAllColumnGrants
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|toPersist
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
if|if
condition|(
operator|!
name|part
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tblName
argument_list|)
operator|||
operator|!
name|part
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Partition does not belong to target table "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|": "
operator|+
name|part
argument_list|)
throw|;
block|}
name|MPartition
name|mpart
init|=
name|convertToMPart
argument_list|(
name|part
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|toPersist
operator|.
name|add
argument_list|(
name|mpart
argument_list|)
expr_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|tabGrants
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MTablePrivilege
name|tab
range|:
name|tabGrants
control|)
block|{
name|toPersist
operator|.
name|add
argument_list|(
operator|new
name|MPartitionPrivilege
argument_list|(
name|tab
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|tab
operator|.
name|getPrincipalType
argument_list|()
argument_list|,
name|mpart
argument_list|,
name|tab
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|now
argument_list|,
name|tab
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|tab
operator|.
name|getGrantorType
argument_list|()
argument_list|,
name|tab
operator|.
name|getGrantOption
argument_list|()
argument_list|,
name|tab
operator|.
name|getAuthorizer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tabColumnGrants
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MTableColumnPrivilege
name|col
range|:
name|tabColumnGrants
control|)
block|{
name|toPersist
operator|.
name|add
argument_list|(
operator|new
name|MPartitionColumnPrivilege
argument_list|(
name|col
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|col
operator|.
name|getPrincipalType
argument_list|()
argument_list|,
name|mpart
argument_list|,
name|col
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|col
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|now
argument_list|,
name|col
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|col
operator|.
name|getGrantorType
argument_list|()
argument_list|,
name|col
operator|.
name|getGrantOption
argument_list|()
argument_list|,
name|col
operator|.
name|getAuthorizer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|toPersist
argument_list|)
condition|)
block|{
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|toPersist
argument_list|)
expr_stmt|;
name|pm
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|private
name|boolean
name|isValidPartition
parameter_list|(
name|Partition
name|part
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|MetaException
block|{
name|MetaStoreUtils
operator|.
name|validatePartitionNameCharacters
argument_list|(
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|partitionValidationPattern
argument_list|)
expr_stmt|;
name|boolean
name|doesExist
init|=
name|doesPartitionExist
argument_list|(
name|part
operator|.
name|getCatName
argument_list|()
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doesExist
operator|&&
operator|!
name|ifNotExists
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Partition already exists: "
operator|+
name|part
argument_list|)
throw|;
block|}
return|return
operator|!
name|doesExist
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|PartitionSpecProxy
name|partitionSpec
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|tabGrants
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|tabColumnGrants
init|=
literal|null
decl_stmt|;
name|MTable
name|table
init|=
name|this
operator|.
name|getMTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
argument_list|)
condition|)
block|{
name|tabGrants
operator|=
name|this
operator|.
name|listAllTableGrants
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|tabColumnGrants
operator|=
name|this
operator|.
name|listTableAllColumnGrants
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|partitionSpec
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tblName
argument_list|)
operator|||
operator|!
name|partitionSpec
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Partition does not belong to target table "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|": "
operator|+
name|partitionSpec
argument_list|)
throw|;
block|}
name|PartitionSpecProxy
operator|.
name|PartitionIterator
name|iterator
init|=
name|partitionSpec
operator|.
name|getPartitionIterator
argument_list|()
decl_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Partition
name|part
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isValidPartition
argument_list|(
name|part
argument_list|,
name|ifNotExists
argument_list|)
condition|)
block|{
name|MPartition
name|mpart
init|=
name|convertToMPart
argument_list|(
name|part
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mpart
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabGrants
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MTablePrivilege
name|tab
range|:
name|tabGrants
control|)
block|{
name|pm
operator|.
name|makePersistent
argument_list|(
operator|new
name|MPartitionPrivilege
argument_list|(
name|tab
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|tab
operator|.
name|getPrincipalType
argument_list|()
argument_list|,
name|mpart
argument_list|,
name|tab
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|now
argument_list|,
name|tab
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|tab
operator|.
name|getGrantorType
argument_list|()
argument_list|,
name|tab
operator|.
name|getGrantOption
argument_list|()
argument_list|,
name|tab
operator|.
name|getAuthorizer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tabColumnGrants
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MTableColumnPrivilege
name|col
range|:
name|tabColumnGrants
control|)
block|{
name|pm
operator|.
name|makePersistent
argument_list|(
operator|new
name|MPartitionColumnPrivilege
argument_list|(
name|col
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|col
operator|.
name|getPrincipalType
argument_list|()
argument_list|,
name|mpart
argument_list|,
name|col
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|col
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|now
argument_list|,
name|col
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|col
operator|.
name|getGrantorType
argument_list|()
argument_list|,
name|col
operator|.
name|getGrantOption
argument_list|()
argument_list|,
name|col
operator|.
name|getAuthorizer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartition
parameter_list|(
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|catName
init|=
name|part
operator|.
name|isSetCatName
argument_list|()
condition|?
name|part
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MTable
name|table
init|=
name|this
operator|.
name|getMTable
argument_list|(
name|catName
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|tabGrants
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|tabColumnGrants
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
argument_list|)
condition|)
block|{
name|tabGrants
operator|=
name|this
operator|.
name|listAllTableGrants
argument_list|(
name|catName
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|tabColumnGrants
operator|=
name|this
operator|.
name|listTableAllColumnGrants
argument_list|(
name|catName
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|openTransaction
argument_list|()
expr_stmt|;
name|MPartition
name|mpart
init|=
name|convertToMPart
argument_list|(
name|part
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mpart
argument_list|)
expr_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|toPersist
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|tabGrants
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MTablePrivilege
name|tab
range|:
name|tabGrants
control|)
block|{
name|MPartitionPrivilege
name|partGrant
init|=
operator|new
name|MPartitionPrivilege
argument_list|(
name|tab
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|tab
operator|.
name|getPrincipalType
argument_list|()
argument_list|,
name|mpart
argument_list|,
name|tab
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|now
argument_list|,
name|tab
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|tab
operator|.
name|getGrantorType
argument_list|()
argument_list|,
name|tab
operator|.
name|getGrantOption
argument_list|()
argument_list|,
name|tab
operator|.
name|getAuthorizer
argument_list|()
argument_list|)
decl_stmt|;
name|toPersist
operator|.
name|add
argument_list|(
name|partGrant
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tabColumnGrants
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MTableColumnPrivilege
name|col
range|:
name|tabColumnGrants
control|)
block|{
name|MPartitionColumnPrivilege
name|partColumn
init|=
operator|new
name|MPartitionColumnPrivilege
argument_list|(
name|col
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|col
operator|.
name|getPrincipalType
argument_list|()
argument_list|,
name|mpart
argument_list|,
name|col
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|col
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|now
argument_list|,
name|col
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|col
operator|.
name|getGrantorType
argument_list|()
argument_list|,
name|col
operator|.
name|getGrantOption
argument_list|()
argument_list|,
name|col
operator|.
name|getAuthorizer
argument_list|()
argument_list|)
decl_stmt|;
name|toPersist
operator|.
name|add
argument_list|(
name|partColumn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|toPersist
argument_list|)
condition|)
block|{
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|toPersist
argument_list|)
expr_stmt|;
block|}
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Partition
name|part
init|=
name|convertToPart
argument_list|(
name|getMPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
argument_list|)
decl_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"partition values="
operator|+
name|part_vals
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|part
operator|.
name|setValues
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
return|return
name|part
return|;
block|}
specifier|private
name|MPartition
name|getMPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
init|=
literal|null
decl_stmt|;
name|MPartition
name|ret
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|MTable
name|mtbl
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtbl
operator|==
literal|null
condition|)
block|{
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Change the query to use part_vals instead of the name which is
comment|// redundant TODO: callers of this often get part_vals out of name for no reason...
name|String
name|name
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|convertToFieldSchemas
argument_list|(
name|mtbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartition
operator|.
name|class
argument_list|,
literal|"table.tableName == t1&& table.database.name == t2&& partitionName == t3 "
operator|+
literal|"&& table.database.catalogName == t4"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, "
operator|+
literal|"java.lang.String t4"
argument_list|)
expr_stmt|;
name|mparts
operator|=
operator|(
name|List
argument_list|<
name|MPartition
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|name
argument_list|,
name|catName
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mparts
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// We need to compare partition name with requested name since some DBs
comment|// (like MySQL, Derby) considers 'a' = 'a ' whereas others like (Postgres,
comment|// Oracle) doesn't exhibit this problem.
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|mparts
argument_list|)
condition|)
block|{
if|if
condition|(
name|mparts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Expecting only one partition but more than one partitions are found."
argument_list|)
throw|;
block|}
else|else
block|{
name|MPartition
name|mpart
init|=
name|mparts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|mpart
operator|.
name|getPartitionName
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|=
name|mpart
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Expecting a partition with name "
operator|+
name|name
operator|+
literal|", but metastore is returning a partition with name "
operator|+
name|mpart
operator|.
name|getPartitionName
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Convert a Partition object into an MPartition, which is an object backed by the db    * If the Partition's set of columns is the same as the parent table's AND useTableCD    * is true, then this partition's storage descriptor's column descriptor will point    * to the same one as the table's storage descriptor.    * @param part the partition to convert    * @param useTableCD whether to try to use the parent table's column descriptor.    * @return the model partition object    * @throws InvalidObjectException    * @throws MetaException    */
specifier|private
name|MPartition
name|convertToMPart
parameter_list|(
name|Partition
name|part
parameter_list|,
name|boolean
name|useTableCD
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MTable
name|mt
init|=
name|getMTable
argument_list|(
name|part
operator|.
name|getCatName
argument_list|()
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Partition doesn't have a valid table or database name"
argument_list|)
throw|;
block|}
comment|// If this partition's set of columns is the same as the parent table's,
comment|// use the parent table's, so we do not create a duplicate column descriptor,
comment|// thereby saving space
name|MStorageDescriptor
name|msd
decl_stmt|;
if|if
condition|(
name|useTableCD
operator|&&
name|mt
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
operator|&&
name|mt
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
operator|!=
literal|null
operator|&&
name|mt
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
operator|!=
literal|null
operator|&&
name|part
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
operator|&&
name|convertToFieldSchemas
argument_list|(
name|mt
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
condition|)
block|{
name|msd
operator|=
name|convertToMStorageDescriptor
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|,
name|mt
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msd
operator|=
name|convertToMStorageDescriptor
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MPartition
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|convertToFieldSchemas
argument_list|(
name|mt
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|,
name|mt
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|part
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|part
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|msd
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Partition
name|convertToPart
parameter_list|(
name|MPartition
name|mpart
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|mpart
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Partition
name|p
init|=
operator|new
name|Partition
argument_list|(
name|convertList
argument_list|(
name|mpart
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|,
name|mpart
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mpart
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|mpart
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mpart
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|convertToStorageDescriptor
argument_list|(
name|mpart
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|convertMap
argument_list|(
name|mpart
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCatName
argument_list|(
name|mpart
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
specifier|private
name|Partition
name|convertToPart
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|MPartition
name|mpart
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|mpart
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Partition
name|p
init|=
operator|new
name|Partition
argument_list|(
name|convertList
argument_list|(
name|mpart
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|mpart
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mpart
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|convertToStorageDescriptor
argument_list|(
name|mpart
operator|.
name|getSd
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
name|convertMap
argument_list|(
name|mpart
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCatName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MPartition
name|part
init|=
name|getMPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
name|dropPartitionCommon
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|dropPartitionsInternal
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|void
name|dropPartitionsInternal
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|partNames
argument_list|)
condition|)
block|{
return|return;
block|}
operator|new
name|GetListHelper
argument_list|<
name|Void
argument_list|>
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Void
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|Void
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
name|directSql
operator|.
name|dropPartitionsViaSqlFilter
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Void
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|Void
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
name|dropPartitionsViaJdo
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|dropPartitionsViaJdo
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Delete all things.
name|dropPartitionGrantsNoTxn
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
name|dropPartitionAllColumnGrantsNoTxn
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
name|dropPartitionColumnStatisticsNoTxn
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
comment|// CDs are reused; go try partition SDs, detach all CDs from SDs, then remove unused CDs.
for|for
control|(
name|MColumnDescriptor
name|mcd
range|:
name|detachCdsFromSdsNoTxn
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
control|)
block|{
name|removeUnusedColumnDescriptor
argument_list|(
name|mcd
argument_list|)
expr_stmt|;
block|}
name|dropPartitionsNoTxn
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|success
operator|=
name|commitTransaction
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Failed to drop partitions"
argument_list|)
throw|;
comment|// Should not happen?
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Drop an MPartition and cascade deletes (e.g., delete partition privilege grants,    *   drop the storage descriptor cleanly, etc.)    */
specifier|private
name|boolean
name|dropPartitionCommon
parameter_list|(
name|MPartition
name|part
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|schemas
init|=
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MFieldSchema
name|col
range|:
name|schemas
control|)
block|{
name|colNames
operator|.
name|add
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|partName
init|=
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|colNames
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|partGrants
init|=
name|listPartitionGrants
argument_list|(
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|partGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|partGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|partColumnGrants
init|=
name|listPartitionAllColumnGrants
argument_list|(
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|partColumnGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|partColumnGrants
argument_list|)
expr_stmt|;
block|}
name|String
name|catName
init|=
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCatalogName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
comment|// delete partition level column stats if it exists
try|try
block|{
name|deletePartitionColumnStatistics
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No column statistics records found to delete"
argument_list|)
expr_stmt|;
block|}
name|preDropStorageDescriptor
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|deletePersistent
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getPartitionsInternal
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|maxParts
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsInternal
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
specifier|final
name|int
name|maxParts
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
operator|new
name|GetListHelper
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
name|Integer
name|max
init|=
operator|(
name|maxParts
operator|<
literal|0
operator|)
condition|?
literal|null
else|:
name|maxParts
decl_stmt|;
return|return
name|directSql
operator|.
name|getPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|convertToParts
argument_list|(
name|listMPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|,
name|queryWrapper
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsWithAuth
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|max
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
init|=
name|listMPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mparts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|mparts
argument_list|)
condition|)
block|{
for|for
control|(
name|MPartition
name|mpart
range|:
name|mparts
control|)
block|{
name|MTable
name|mtbl
init|=
name|mpart
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Partition
name|part
init|=
name|convertToPart
argument_list|(
name|mpart
argument_list|)
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|mtbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|this
operator|.
name|convertToFieldSchemas
argument_list|(
name|mtbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|partAuth
init|=
name|this
operator|.
name|getPartitionPrivilegeSet
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|part
operator|.
name|setPrivileges
argument_list|(
name|partAuth
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|parts
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|queryWrapper
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartitionWithAuth
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|user_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MPartition
name|mpart
init|=
name|getMPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|mpart
operator|==
literal|null
condition|)
block|{
name|commitTransaction
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"partition values="
operator|+
name|partVals
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Partition
name|part
init|=
literal|null
decl_stmt|;
name|MTable
name|mtbl
init|=
name|mpart
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|part
operator|=
name|convertToPart
argument_list|(
name|mpart
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|mtbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|this
operator|.
name|convertToFieldSchemas
argument_list|(
name|mtbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|partAuth
init|=
name|this
operator|.
name|getPartitionPrivilegeSet
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|user_name
argument_list|,
name|group_names
argument_list|)
decl_stmt|;
name|part
operator|.
name|setPrivileges
argument_list|(
name|partAuth
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|part
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|convertToParts
parameter_list|(
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|convertToParts
argument_list|(
name|mparts
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|convertToParts
parameter_list|(
name|List
argument_list|<
name|MPartition
argument_list|>
name|src
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|dest
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|src
operator|==
literal|null
condition|)
block|{
return|return
name|dest
return|;
block|}
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|dest
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|src
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MPartition
name|mp
range|:
name|src
control|)
block|{
name|dest
operator|.
name|add
argument_list|(
name|convertToPart
argument_list|(
name|mp
argument_list|)
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|checkTimeout
argument_list|()
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|convertToParts
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mparts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MPartition
name|mp
range|:
name|mparts
control|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|convertToPart
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|mp
argument_list|)
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|checkTimeout
argument_list|()
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
comment|// TODO:pc implement max
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pns
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing getPartitionNames"
argument_list|)
expr_stmt|;
name|pns
operator|=
name|getPartitionNamesNoTxn
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|pns
return|;
block|}
specifier|private
name|String
name|extractPartitionKey
parameter_list|(
name|FieldSchema
name|key
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|pkeys
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|256
argument_list|)
decl_stmt|;
assert|assert
name|pkeys
operator|.
name|size
argument_list|()
operator|>=
literal|1
assert|;
name|String
name|partKey
init|=
literal|"/"
operator|+
name|key
operator|.
name|getName
argument_list|()
operator|+
literal|"="
decl_stmt|;
comment|// Table is partitioned by single key
if|if
condition|(
name|pkeys
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|(
name|pkeys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"partitionName.substring(partitionName.indexOf(\""
argument_list|)
operator|.
name|append
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"=\") + "
argument_list|)
operator|.
name|append
argument_list|(
name|key
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
comment|// First partition key - anything between key= and first /
block|}
elseif|else
if|if
condition|(
operator|(
name|pkeys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"partitionName.substring(partitionName.indexOf(\""
argument_list|)
operator|.
name|append
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"=\") + "
argument_list|)
operator|.
name|append
argument_list|(
name|key
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"partitionName.indexOf(\"/\")"
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
comment|// Last partition key - anything between /key= and end
block|}
elseif|else
if|if
condition|(
operator|(
name|pkeys
operator|.
name|get
argument_list|(
name|pkeys
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"partitionName.substring(partitionName.indexOf(\""
argument_list|)
operator|.
name|append
argument_list|(
name|partKey
argument_list|)
operator|.
name|append
argument_list|(
literal|"\") + "
argument_list|)
operator|.
name|append
argument_list|(
name|partKey
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
comment|// Intermediate key - anything between /key= and the following /
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"partitionName.substring(partitionName.indexOf(\""
argument_list|)
operator|.
name|append
argument_list|(
name|partKey
argument_list|)
operator|.
name|append
argument_list|(
literal|"\") + "
argument_list|)
operator|.
name|append
argument_list|(
name|partKey
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"partitionName.indexOf(\"/\", partitionName.indexOf(\""
argument_list|)
operator|.
name|append
argument_list|(
name|partKey
argument_list|)
operator|.
name|append
argument_list|(
literal|"\") + 1))"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Query for Key:"
operator|+
name|key
operator|.
name|getName
argument_list|()
operator|+
literal|" is :"
operator|+
name|buffer
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PartitionValuesResponse
name|listPartitionValues
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|boolean
name|applyDistinct
parameter_list|,
name|String
name|filter
parameter_list|,
name|boolean
name|ascending
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|order
parameter_list|,
name|long
name|maxParts
parameter_list|)
throws|throws
name|MetaException
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PartitionValuesResponse
name|response
init|=
name|getDistinctValuesForPartitionsNoTxn
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|,
name|applyDistinct
argument_list|,
name|maxParts
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of records fetched: {}"
argument_list|,
name|response
operator|.
name|getPartitionValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
else|else
block|{
name|PartitionValuesResponse
name|response
init|=
name|extractPartitionNamesByFilter
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|filter
argument_list|,
name|cols
argument_list|,
name|ascending
argument_list|,
name|maxParts
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|getPartitionValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of records fetched with filter: {}"
argument_list|,
name|response
operator|.
name|getPartitionValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in ORM"
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Error retrieving partition values: "
operator|+
name|t
argument_list|)
throw|;
block|}
block|}
specifier|private
name|PartitionValuesResponse
name|extractPartitionNamesByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|filter
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|boolean
name|ascending
parameter_list|,
name|long
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Table: {} filter: \"{}\" cols: {}"
argument_list|,
name|getCatalogQualifiedTableName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|filter
argument_list|,
name|cols
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
literal|null
decl_stmt|;
name|Table
name|tbl
init|=
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Get partitions by name - ascending or descending
name|partitionNames
operator|=
name|getPartitionNamesByFilter
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|filter
argument_list|,
name|ascending
argument_list|,
name|maxParts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Querying by partition names failed, trying out with partition objects, filter: {}"
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partitionNames
operator|==
literal|null
condition|)
block|{
name|partitions
operator|=
name|getPartitionsByFilter
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|filter
argument_list|,
operator|(
name|short
operator|)
name|maxParts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partitions
operator|!=
literal|null
condition|)
block|{
name|partitionNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
comment|// Check for NULL's just to be safe
if|if
condition|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
operator|&&
name|partition
operator|.
name|getValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partitionNames
operator|.
name|add
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|partitionNames
operator|==
literal|null
operator|&&
name|partitions
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Cannot obtain list of partitions by filter:\""
operator|+
name|filter
operator|+
literal|"\" for "
operator|+
name|getCatalogQualifiedTableName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|ascending
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|partitionNames
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Return proper response
name|PartitionValuesResponse
name|response
init|=
operator|new
name|PartitionValuesResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setPartitionValues
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|partitionNames
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Converting responses to Partition values for items: {}"
argument_list|,
name|partitionNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partitionNames
control|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|PartitionValuesRow
name|row
init|=
operator|new
name|PartitionValuesRow
argument_list|()
decl_stmt|;
name|Warehouse
operator|.
name|makeValsFromName
argument_list|(
name|partName
argument_list|,
name|vals
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|vals
control|)
block|{
name|row
operator|.
name|addToRow
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addToPartitionValues
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPartitionNamesByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|filter
parameter_list|,
name|boolean
name|ascending
parameter_list|,
name|long
name|maxParts
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing getPartitionNamesByFilter"
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|MTable
name|mtable
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtable
operator|==
literal|null
condition|)
block|{
comment|// To be consistent with the behavior of listPartitionNames, if the
comment|// table or db does not exist, we return an empty list
return|return
name|partNames
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|queryFilterString
init|=
name|makeQueryFilterString
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|mtable
argument_list|,
name|filter
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select partitionName from org.apache.hadoop.hive.metastore.model.MPartition "
operator|+
literal|"where "
operator|+
name|queryFilterString
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxParts
operator|>=
literal|0
condition|)
block|{
comment|//User specified a row limit, set it on the Query
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|maxParts
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Filter specified is {}, JDOQL filter is {}"
argument_list|,
name|filter
argument_list|,
name|queryFilterString
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parms is {}"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|String
name|parameterDeclaration
init|=
name|makeParameterDeclarationStringObj
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameterDeclaration
argument_list|)
expr_stmt|;
if|if
condition|(
name|ascending
condition|)
block|{
name|query
operator|.
name|setOrdering
argument_list|(
literal|"partitionName ascending"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setOrdering
argument_list|(
literal|"partitionName descending"
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|setResult
argument_list|(
literal|"partitionName"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|executeWithMap
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|partNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for getPartitionNamesByFilter"
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for getPartitionNamesByFilter, size: {}"
argument_list|,
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|partNames
return|;
block|}
specifier|private
name|PartitionValuesResponse
name|getDistinctValuesForPartitionsNoTxn
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|boolean
name|applyDistinct
parameter_list|,
name|long
name|maxParts
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select partitionName from org.apache.hadoop.hive.metastore.model.MPartition "
operator|+
literal|"where table.database.name == t1&& table.database.catalogName == t2&& "
operator|+
literal|"table.tableName == t3 "
argument_list|)
decl_stmt|;
name|q
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
comment|// TODO: Ordering seems to affect the distinctness, needs checking, disabling.
comment|/*       if (ascending) {         q.setOrdering("partitionName ascending");       } else {         q.setOrdering("partitionName descending");       } */
if|if
condition|(
name|maxParts
operator|>
literal|0
condition|)
block|{
name|q
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|maxParts
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|partValuesSelect
init|=
operator|new
name|StringBuilder
argument_list|(
literal|256
argument_list|)
decl_stmt|;
if|if
condition|(
name|applyDistinct
condition|)
block|{
name|partValuesSelect
operator|.
name|append
argument_list|(
literal|"DISTINCT "
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionKeys
init|=
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|key
range|:
name|cols
control|)
block|{
name|partValuesSelect
operator|.
name|append
argument_list|(
name|extractPartitionKey
argument_list|(
name|key
argument_list|,
name|partitionKeys
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|partValuesSelect
operator|.
name|setLength
argument_list|(
name|partValuesSelect
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Columns to be selected from Partitions: {}"
argument_list|,
name|partValuesSelect
argument_list|)
expr_stmt|;
name|q
operator|.
name|setResult
argument_list|(
name|partValuesSelect
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionValuesResponse
name|response
init|=
operator|new
name|PartitionValuesResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setPartitionValues
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cols
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|q
operator|.
name|execute
argument_list|(
name|dbName
argument_list|,
name|catName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|row
range|:
name|results
control|)
block|{
name|PartitionValuesRow
name|rowResponse
init|=
operator|new
name|PartitionValuesRow
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|columnValue
range|:
name|row
control|)
block|{
name|rowResponse
operator|.
name|addToRow
argument_list|(
operator|(
name|String
operator|)
name|columnValue
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addToPartitionValues
argument_list|(
name|rowResponse
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|q
operator|.
name|execute
argument_list|(
name|dbName
argument_list|,
name|catName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|row
range|:
name|results
control|)
block|{
name|PartitionValuesRow
name|rowResponse
init|=
operator|new
name|PartitionValuesRow
argument_list|()
decl_stmt|;
name|rowResponse
operator|.
name|addToRow
argument_list|(
operator|(
name|String
operator|)
name|row
argument_list|)
expr_stmt|;
name|response
operator|.
name|addToPartitionValues
argument_list|(
name|rowResponse
argument_list|)
expr_stmt|;
block|}
block|}
name|q
operator|.
name|closeAll
argument_list|()
expr_stmt|;
return|return
name|response
return|;
block|}
finally|finally
block|{
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPartitionNamesNoTxn
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|short
name|max
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|max
operator|==
literal|0
condition|)
block|{
return|return
name|pns
return|;
block|}
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select partitionName from org.apache.hadoop.hive.metastore.model.MPartition "
operator|+
literal|"where table.database.name == t1&& table.tableName == t2&& table.database.catalogName == t3 "
operator|+
literal|"order by partitionName asc"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"partitionName"
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|pns
operator|.
name|addAll
argument_list|(
name|names
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
return|return
name|pns
return|;
block|}
comment|/**    * Retrieves a Collection of partition-related results from the database that match    *  the partial specification given for a specific table.    * @param dbName the name of the database    * @param tableName the name of the table    * @param part_vals the partial specification values    * @param max_parts the maximum number of partitions to return    * @param resultsCol the metadata column of the data to return, e.g. partitionName, etc.    *        if resultsCol is empty or null, a collection of MPartition objects is returned    * @throws NoSuchObjectException    * @results A Collection of partition-related items from the db that match the partial spec    *          for a table.  The type of each item in the collection corresponds to the column    *          you want results for.  E.g., if resultsCol is partitionName, the Collection    *          has types of String, and if resultsCol is null, the types are MPartition.    */
specifier|private
name|Collection
name|getPartitionPsQueryResults
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|String
name|resultsCol
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|getCatalogQualifiedTableName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|+
literal|" table not found"
argument_list|)
throw|;
block|}
name|String
name|partNameMatcher
init|=
name|MetaStoreUtils
operator|.
name|makePartNameMatcher
argument_list|(
name|table
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartition
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringBuilder
name|queryFilter
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"table.database.name == dbName"
argument_list|)
decl_stmt|;
name|queryFilter
operator|.
name|append
argument_list|(
literal|"&& table.database.catalogName == catName"
argument_list|)
expr_stmt|;
name|queryFilter
operator|.
name|append
argument_list|(
literal|"&& table.tableName == tableName"
argument_list|)
expr_stmt|;
name|queryFilter
operator|.
name|append
argument_list|(
literal|"&& partitionName.matches(partialRegex)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFilter
argument_list|(
name|queryFilter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String dbName, java.lang.String catName, "
operator|+
literal|"java.lang.String tableName, java.lang.String partialRegex"
argument_list|)
expr_stmt|;
if|if
condition|(
name|max_parts
operator|>=
literal|0
condition|)
block|{
comment|// User specified a row limit, set it on the Query
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resultsCol
operator|!=
literal|null
operator|&&
operator|!
name|resultsCol
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|.
name|setResult
argument_list|(
name|resultsCol
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Collection
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|dbName
argument_list|,
name|catName
argument_list|,
name|tableName
argument_list|,
name|partNameMatcher
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsPsWithAuth
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"executing listPartitionNamesPsWithAuth"
argument_list|)
expr_stmt|;
name|Collection
name|parts
init|=
name|getPartitionPsQueryResults
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
literal|null
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
name|MTable
name|mtbl
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|parts
control|)
block|{
name|Partition
name|part
init|=
name|convertToPart
argument_list|(
operator|(
name|MPartition
operator|)
name|o
argument_list|)
decl_stmt|;
comment|//set auth privileges
if|if
condition|(
literal|null
operator|!=
name|userName
operator|&&
literal|null
operator|!=
name|groupNames
operator|&&
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|mtbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|this
operator|.
name|convertToFieldSchemas
argument_list|(
name|mtbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|partAuth
init|=
name|getPartitionPrivilegeSet
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|part
operator|.
name|setPrivileges
argument_list|(
name|partAuth
argument_list|)
expr_stmt|;
block|}
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|queryWrapper
argument_list|)
expr_stmt|;
block|}
return|return
name|partitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNamesPs
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPartitionNamesPs"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
name|getPartitionPsQueryResults
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
literal|"partitionName"
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
name|partitionNames
operator|.
name|addAll
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|queryWrapper
argument_list|)
expr_stmt|;
block|}
return|return
name|partitionNames
return|;
block|}
comment|// TODO:pc implement max
specifier|private
name|List
argument_list|<
name|MPartition
argument_list|>
name|listMPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|max
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listMPartitions"
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartition
operator|.
name|class
argument_list|,
literal|"table.tableName == t1&& table.database.name == t2&& table.database.catalogName == t3"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"partitionName ascending"
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
operator|>=
literal|0
condition|)
block|{
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
name|mparts
operator|=
operator|(
name|List
argument_list|<
name|MPartition
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listMPartitions"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mparts
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMPartitions {}"
argument_list|,
name|mparts
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mparts
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getPartitionsByNamesInternal
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNamesInternal
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
operator|new
name|GetListHelper
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getPartitionsViaSqlFilter
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getPartitionsViaOrmFilter
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getPartitionsByExpr
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|getPartitionsByExprInternal
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|maxParts
argument_list|,
name|result
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|getPartitionsByExprInternal
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
specifier|final
name|byte
index|[]
name|expr
parameter_list|,
specifier|final
name|String
name|defaultPartitionName
parameter_list|,
specifier|final
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|TException
block|{
assert|assert
name|result
operator|!=
literal|null
assert|;
specifier|final
name|ExpressionTree
name|exprTree
init|=
name|PartFilterExprUtil
operator|.
name|makeExpressionTree
argument_list|(
name|expressionProxy
argument_list|,
name|expr
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|hasUnknownPartitions
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
operator|new
name|GetListHelper
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// If we have some sort of expression tree, try SQL filter pushdown.
name|List
argument_list|<
name|Partition
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exprTree
operator|!=
literal|null
condition|)
block|{
name|SqlFilterForPushdown
name|filter
init|=
operator|new
name|SqlFilterForPushdown
argument_list|()
decl_stmt|;
if|if
condition|(
name|directSql
operator|.
name|generateSqlFilterForPushdown
argument_list|(
name|ctx
operator|.
name|getTable
argument_list|()
argument_list|,
name|exprTree
argument_list|,
name|filter
argument_list|)
condition|)
block|{
return|return
name|directSql
operator|.
name|getPartitionsViaSqlFilter
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|// We couldn't do SQL filter pushdown. Get names via normal means.
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|hasUnknownPartitions
operator|.
name|set
argument_list|(
name|getPartitionNamesPrunedByExprNoTxn
argument_list|(
name|ctx
operator|.
name|getTable
argument_list|()
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|maxParts
argument_list|,
name|partNames
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|directSql
operator|.
name|getPartitionsViaSqlFilter
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
comment|// If we have some sort of expression tree, try JDOQL filter pushdown.
name|List
argument_list|<
name|Partition
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exprTree
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|getPartitionsViaOrmFilter
argument_list|(
name|ctx
operator|.
name|getTable
argument_list|()
argument_list|,
name|exprTree
argument_list|,
name|maxParts
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|// We couldn't do JDOQL filter pushdown. Get names via normal means.
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|hasUnknownPartitions
operator|.
name|set
argument_list|(
name|getPartitionNamesPrunedByExprNoTxn
argument_list|(
name|ctx
operator|.
name|getTable
argument_list|()
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|maxParts
argument_list|,
name|partNames
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|getPartitionsViaOrmFilter
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|hasUnknownPartitions
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Gets the partition names from a table, pruned using an expression.    * @param table Table.    * @param expr Expression.    * @param defaultPartName Default partition name from job config, if any.    * @param maxParts Maximum number of partition names to return.    * @param result The resulting names.    * @return Whether the result contains any unknown partitions.    */
specifier|private
name|boolean
name|getPartitionNamesPrunedByExprNoTxn
parameter_list|(
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|result
parameter_list|)
throws|throws
name|MetaException
block|{
name|result
operator|.
name|addAll
argument_list|(
name|getPartitionNamesNoTxn
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|maxParts
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultPartName
operator|==
literal|null
operator|||
name|defaultPartName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|defaultPartName
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
expr_stmt|;
block|}
return|return
name|expressionProxy
operator|.
name|filterPartitionsByExpr
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|expr
argument_list|,
name|defaultPartName
argument_list|,
name|result
argument_list|)
return|;
block|}
comment|/**    * Gets partition names from the table via ORM (JDOQL) filter pushdown.    * @param table The table.    * @param tree The expression tree from which JDOQL filter will be made.    * @param maxParts Maximum number of partitions to return.    * @param isValidatedFilter Whether the filter was pre-validated for JDOQL pushdown by a client    *   (old hive client or non-hive one); if it was and we fail to create a filter, we will throw.    * @return Resulting partitions. Can be null if isValidatedFilter is false, and    *         there was error deriving the JDO filter.    */
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsViaOrmFilter
parameter_list|(
name|Table
name|table
parameter_list|,
name|ExpressionTree
name|tree
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|boolean
name|isValidatedFilter
parameter_list|)
throws|throws
name|MetaException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|jdoFilter
init|=
name|makeQueryFilterString
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
argument_list|,
name|tree
argument_list|,
name|params
argument_list|,
name|isValidatedFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|jdoFilter
operator|==
literal|null
condition|)
block|{
assert|assert
operator|!
name|isValidatedFilter
assert|;
return|return
literal|null
return|;
block|}
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartition
operator|.
name|class
argument_list|,
name|jdoFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxParts
operator|>=
literal|0
condition|)
block|{
comment|// User specified a row limit, set it on the Query
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|maxParts
argument_list|)
expr_stmt|;
block|}
name|String
name|parameterDeclaration
init|=
name|makeParameterDeclarationStringObj
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameterDeclaration
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"partitionName ascending"
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
init|=
operator|(
name|List
argument_list|<
name|MPartition
argument_list|>
operator|)
name|query
operator|.
name|executeWithMap
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for getPartitionsViaOrmFilter"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mparts
argument_list|)
expr_stmt|;
comment|// TODO: why is this inconsistent with what we get by names?
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for getPartitionsViaOrmFilter"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|results
init|=
name|convertToParts
argument_list|(
name|mparts
argument_list|)
decl_stmt|;
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
return|return
name|results
return|;
block|}
specifier|private
name|Integer
name|getNumPartitionsViaOrmFilter
parameter_list|(
name|Table
name|table
parameter_list|,
name|ExpressionTree
name|tree
parameter_list|,
name|boolean
name|isValidatedFilter
parameter_list|)
throws|throws
name|MetaException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|jdoFilter
init|=
name|makeQueryFilterString
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
argument_list|,
name|tree
argument_list|,
name|params
argument_list|,
name|isValidatedFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|jdoFilter
operator|==
literal|null
condition|)
block|{
assert|assert
operator|!
name|isValidatedFilter
assert|;
return|return
literal|null
return|;
block|}
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select count(partitionName) from org.apache.hadoop.hive.metastore.model.MPartition"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFilter
argument_list|(
name|jdoFilter
argument_list|)
expr_stmt|;
name|String
name|parameterDeclaration
init|=
name|makeParameterDeclarationStringObj
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameterDeclaration
argument_list|)
expr_stmt|;
name|Long
name|result
init|=
operator|(
name|Long
operator|)
name|query
operator|.
name|executeWithMap
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**    * Gets partition names from the table via ORM (JDOQL) name filter.    * @param dbName Database name.    * @param tblName Table name.    * @param partNames Partition names to get the objects for.    * @return Resulting partitions.    */
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsViaOrmFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|partNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|ObjectPair
argument_list|<
name|Query
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|queryWithParams
init|=
name|getPartQueryWithParams
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryWithParams
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|query
operator|.
name|setResultClass
argument_list|(
name|MPartition
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|setClass
argument_list|(
name|MPartition
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"partitionName ascending"
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
init|=
operator|(
name|List
argument_list|<
name|MPartition
argument_list|>
operator|)
name|query
operator|.
name|executeWithMap
argument_list|(
name|queryWithParams
operator|.
name|getSecond
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|convertToParts
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|mparts
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
return|return
name|partitions
return|;
block|}
specifier|private
name|void
name|dropPartitionsNoTxn
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
block|{
name|ObjectPair
argument_list|<
name|Query
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|queryWithParams
init|=
name|getPartQueryWithParams
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryWithParams
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|query
operator|.
name|setClass
argument_list|(
name|MPartition
operator|.
name|class
argument_list|)
expr_stmt|;
name|long
name|deleted
init|=
name|query
operator|.
name|deletePersistentAll
argument_list|(
name|queryWithParams
operator|.
name|getSecond
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleted {} partition from store"
argument_list|,
name|deleted
argument_list|)
expr_stmt|;
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
comment|/**    * Detaches column descriptors from storage descriptors; returns the set of unique CDs    * thus detached. This is done before dropping partitions because CDs are reused between    * SDs; so, we remove the links to delete SDs and then check the returned CDs to see if    * they are referenced by other SDs.    */
specifier|private
name|HashSet
argument_list|<
name|MColumnDescriptor
argument_list|>
name|detachCdsFromSdsNoTxn
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
block|{
name|ObjectPair
argument_list|<
name|Query
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|queryWithParams
init|=
name|getPartQueryWithParams
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryWithParams
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|query
operator|.
name|setClass
argument_list|(
name|MPartition
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"sd"
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
name|sds
init|=
operator|(
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
operator|)
name|query
operator|.
name|executeWithMap
argument_list|(
name|queryWithParams
operator|.
name|getSecond
argument_list|()
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|MColumnDescriptor
argument_list|>
name|candidateCds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MStorageDescriptor
name|sd
range|:
name|sds
control|)
block|{
if|if
condition|(
name|sd
operator|!=
literal|null
operator|&&
name|sd
operator|.
name|getCD
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|candidateCds
operator|.
name|add
argument_list|(
name|sd
operator|.
name|getCD
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCD
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
return|return
name|candidateCds
return|;
block|}
specifier|private
name|ObjectPair
argument_list|<
name|Query
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getPartQueryWithParams
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"table.tableName == t1&& table.database.name == t2&&"
operator|+
literal|" table.database.catalogName == t3&& ("
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|partNames
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pn
init|=
literal|"p"
operator|+
name|n
decl_stmt|;
name|n
operator|++
expr_stmt|;
name|String
name|part
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|pn
argument_list|,
name|part
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"partitionName == "
argument_list|)
operator|.
name|append
argument_list|(
name|pn
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" || "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
comment|// remove the last " || "
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setFilter
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|" JDOQL filter is {}"
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t1"
argument_list|,
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t2"
argument_list|,
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t3"
argument_list|,
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|makeParameterDeclarationString
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectPair
argument_list|<>
argument_list|(
name|query
argument_list|,
name|params
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getPartitionsByFilterInternal
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|,
name|maxParts
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Helper class for getting stuff w/transaction, direct SQL, perf logging, etc. */
annotation|@
name|VisibleForTesting
specifier|public
specifier|abstract
class|class
name|GetHelper
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|boolean
name|isInTxn
decl_stmt|,
name|doTrace
decl_stmt|,
name|allowJdo
decl_stmt|;
specifier|private
name|boolean
name|doUseDirectSql
decl_stmt|;
specifier|private
name|long
name|start
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
specifier|protected
specifier|final
name|String
name|catName
decl_stmt|,
name|dbName
decl_stmt|,
name|tblName
decl_stmt|;
specifier|private
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|protected
name|T
name|results
init|=
literal|null
decl_stmt|;
specifier|public
name|GetHelper
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
block|{
assert|assert
name|allowSql
operator|||
name|allowJdo
assert|;
name|this
operator|.
name|allowJdo
operator|=
name|allowJdo
expr_stmt|;
name|this
operator|.
name|catName
operator|=
operator|(
name|catalogName
operator|!=
literal|null
operator|)
condition|?
name|normalizeIdentifier
argument_list|(
name|catalogName
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
operator|(
name|dbName
operator|!=
literal|null
operator|)
condition|?
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|tblName
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|tblName
operator|=
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// tblName can be null in cases of Helper being used at a higher
comment|// abstraction level, such as with datbases
name|this
operator|.
name|tblName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|table
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|doTrace
operator|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
expr_stmt|;
name|this
operator|.
name|isInTxn
operator|=
name|isActiveTransaction
argument_list|()
expr_stmt|;
comment|// SQL usage inside a larger transaction (e.g. droptable) may not be desirable because
comment|// some databases (e.g. Postgres) abort the entire transaction when any query fails, so
comment|// the fallback from failed SQL to JDO is not possible.
name|boolean
name|isConfigEnabled
init|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|TRY_DIRECT_SQL
argument_list|)
operator|&&
operator|(
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|TRY_DIRECT_SQL_DDL
argument_list|)
operator|||
operator|!
name|isInTxn
operator|)
decl_stmt|;
if|if
condition|(
name|isConfigEnabled
operator|&&
name|directSql
operator|==
literal|null
condition|)
block|{
name|dbType
operator|=
name|determineDatabaseProduct
argument_list|()
expr_stmt|;
name|directSql
operator|=
operator|new
name|MetaStoreDirectSql
argument_list|(
name|pm
argument_list|,
name|getConf
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|allowJdo
operator|&&
name|isConfigEnabled
operator|&&
operator|!
name|directSql
operator|.
name|isCompatibleDatastore
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"SQL is not operational"
argument_list|)
throw|;
comment|// test path; SQL is enabled and broken.
block|}
name|this
operator|.
name|doUseDirectSql
operator|=
name|allowSql
operator|&&
name|isConfigEnabled
operator|&&
name|directSql
operator|.
name|isCompatibleDatastore
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|boolean
name|canUseDirectSql
parameter_list|(
name|GetHelper
argument_list|<
name|T
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
literal|true
return|;
comment|// By default, assume we can user directSQL - that's kind of the point.
block|}
specifier|protected
specifier|abstract
name|String
name|describeResult
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|T
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|T
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
function_decl|;
specifier|protected
specifier|abstract
name|T
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|T
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
specifier|public
name|T
name|run
parameter_list|(
name|boolean
name|initTable
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
try|try
block|{
name|start
argument_list|(
name|initTable
argument_list|)
expr_stmt|;
if|if
condition|(
name|doUseDirectSql
condition|)
block|{
try|try
block|{
name|directSql
operator|.
name|prepareTxn
argument_list|()
expr_stmt|;
name|this
operator|.
name|results
operator|=
name|getSqlResult
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using direct SQL optimization."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|handleDirectSqlError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Note that this will be invoked in 2 cases:
comment|//    1) DirectSQL was disabled to start with;
comment|//    2) DirectSQL threw and was disabled in handleDirectSqlError.
if|if
condition|(
operator|!
name|doUseDirectSql
condition|)
block|{
name|this
operator|.
name|results
operator|=
name|getJdoResult
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not using direct SQL optimization."
argument_list|)
expr_stmt|;
block|}
return|return
name|commit
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|start
parameter_list|(
name|boolean
name|initTable
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|start
operator|=
name|doTrace
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|initTable
operator|&&
operator|(
name|tblName
operator|!=
literal|null
operator|)
condition|)
block|{
name|table
operator|=
name|ensureGetTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
name|doUseDirectSql
operator|=
name|doUseDirectSql
operator|&&
name|canUseDirectSql
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleDirectSqlError
parameter_list|(
name|Exception
name|ex
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|String
name|message
init|=
literal|null
decl_stmt|;
try|try
block|{
name|message
operator|=
name|generateShorterMessage
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|message
operator|=
name|ex
operator|.
name|toString
argument_list|()
operator|+
literal|"; error building a better message: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// Don't log the exception, people just get confused.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Full DirectSQL callstack for debugging (note: this is not an error)"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|allowJdo
condition|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|ex
throw|;
block|}
throw|throw
operator|new
name|MetaException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isInTxn
condition|)
block|{
name|JDOException
name|rollbackEx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDOException
name|jex
parameter_list|)
block|{
name|rollbackEx
operator|=
name|jex
expr_stmt|;
block|}
if|if
condition|(
name|rollbackEx
operator|!=
literal|null
condition|)
block|{
comment|// Datanucleus propagates some pointless exceptions and rolls back in the finally.
if|if
condition|(
name|currentTransaction
operator|!=
literal|null
operator|&&
name|currentTransaction
operator|.
name|isActive
argument_list|()
condition|)
block|{
throw|throw
name|rollbackEx
throw|;
comment|// Throw if the tx wasn't rolled back.
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring exception, rollback succeeded: "
operator|+
name|rollbackEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|doTrace
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|=
name|ensureGetTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|start
operator|=
name|doTrace
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|directSqlErrors
operator|!=
literal|null
condition|)
block|{
name|directSqlErrors
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
name|doUseDirectSql
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|String
name|generateShorterMessage
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Falling back to ORM path due to direct SQL failure (this is not an error): "
argument_list|)
decl_stmt|;
name|Throwable
name|t
init|=
name|ex
decl_stmt|;
name|StackTraceElement
index|[]
name|prevStack
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|StackTraceElement
index|[]
name|stack
init|=
name|t
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|int
name|uniqueFrames
init|=
name|stack
operator|.
name|length
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|prevStack
operator|!=
literal|null
condition|)
block|{
name|int
name|n
init|=
name|prevStack
operator|.
name|length
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|uniqueFrames
operator|>=
literal|0
operator|&&
name|n
operator|>=
literal|0
operator|&&
name|stack
index|[
name|uniqueFrames
index|]
operator|.
name|equals
argument_list|(
name|prevStack
index|[
name|n
index|]
argument_list|)
condition|)
block|{
name|uniqueFrames
operator|--
expr_stmt|;
name|n
operator|--
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|uniqueFrames
condition|;
operator|++
name|i
control|)
block|{
name|StackTraceElement
name|ste
init|=
name|stack
index|[
name|i
index|]
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|" at "
argument_list|)
operator|.
name|append
argument_list|(
name|ste
argument_list|)
expr_stmt|;
if|if
condition|(
name|ste
operator|.
name|getMethodName
argument_list|()
operator|!=
literal|null
operator|&&
name|ste
operator|.
name|getMethodName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"getSqlResult"
argument_list|)
operator|&&
operator|(
name|ste
operator|.
name|getFileName
argument_list|()
operator|==
literal|null
operator|||
name|ste
operator|.
name|getFileName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"ObjectStore"
argument_list|)
operator|)
condition|)
block|{
break|break;
block|}
block|}
name|prevStack
operator|=
name|stack
expr_stmt|;
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|";\n Caused by: "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|message
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|T
name|commit
parameter_list|()
block|{
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|doTrace
condition|)
block|{
name|double
name|time
init|=
operator|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000000.0
operator|)
decl_stmt|;
name|String
name|result
init|=
name|describeResult
argument_list|()
decl_stmt|;
name|String
name|retrieveType
init|=
name|doUseDirectSql
condition|?
literal|"SQL"
else|:
literal|"ORM"
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} retrieved using {} in {}ms"
argument_list|,
name|result
argument_list|,
name|retrieveType
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|private
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Table
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
block|}
specifier|private
specifier|abstract
class|class
name|GetListHelper
parameter_list|<
name|T
parameter_list|>
extends|extends
name|GetHelper
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
specifier|public
name|GetListHelper
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|describeResult
parameter_list|()
block|{
return|return
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" entries"
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|abstract
class|class
name|GetDbHelper
extends|extends
name|GetHelper
argument_list|<
name|Database
argument_list|>
block|{
comment|/**      * GetHelper for returning db info using directSql/JDO.      * @param dbName The Database Name      * @param allowSql Whether or not we allow DirectSQL to perform this query.      * @param allowJdo Whether or not we allow ORM to perform this query.      * @throws MetaException      */
specifier|public
name|GetDbHelper
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|describeResult
parameter_list|()
block|{
return|return
literal|"db details for db "
operator|.
name|concat
argument_list|(
name|dbName
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|abstract
class|class
name|GetStatHelper
extends|extends
name|GetHelper
argument_list|<
name|ColumnStatistics
argument_list|>
block|{
specifier|public
name|GetStatHelper
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|catalogName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|describeResult
parameter_list|()
block|{
return|return
literal|"statistics for "
operator|+
operator|(
name|results
operator|==
literal|null
condition|?
literal|0
else|:
name|results
operator|.
name|getStatsObjSize
argument_list|()
operator|)
operator|+
literal|" columns"
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumPartitionsByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|ExpressionTree
name|exprTree
init|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|filter
argument_list|)
condition|?
name|PartFilterExprUtil
operator|.
name|getFilterParser
argument_list|(
name|filter
argument_list|)
operator|.
name|tree
else|:
name|ExpressionTree
operator|.
name|EMPTY_TREE
decl_stmt|;
return|return
operator|new
name|GetHelper
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|{
specifier|private
specifier|final
name|SqlFilterForPushdown
name|filter
init|=
operator|new
name|SqlFilterForPushdown
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|String
name|describeResult
parameter_list|()
block|{
return|return
literal|"Partition count"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|canUseDirectSql
parameter_list|(
name|GetHelper
argument_list|<
name|Integer
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|generateSqlFilterForPushdown
argument_list|(
name|ctx
operator|.
name|getTable
argument_list|()
argument_list|,
name|exprTree
argument_list|,
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Integer
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|Integer
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getNumPartitionsViaSqlFilter
argument_list|(
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Integer
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|Integer
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getNumPartitionsViaOrmFilter
argument_list|(
name|ctx
operator|.
name|getTable
argument_list|()
argument_list|,
name|exprTree
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumPartitionsByExpr
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|ExpressionTree
name|exprTree
init|=
name|PartFilterExprUtil
operator|.
name|makeExpressionTree
argument_list|(
name|expressionProxy
argument_list|,
name|expr
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|tempExpr
init|=
name|expr
decl_stmt|;
comment|// Need to be final to pass it to an inner class
return|return
operator|new
name|GetHelper
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|{
specifier|private
specifier|final
name|SqlFilterForPushdown
name|filter
init|=
operator|new
name|SqlFilterForPushdown
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|String
name|describeResult
parameter_list|()
block|{
return|return
literal|"Partition count"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|canUseDirectSql
parameter_list|(
name|GetHelper
argument_list|<
name|Integer
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|generateSqlFilterForPushdown
argument_list|(
name|ctx
operator|.
name|getTable
argument_list|()
argument_list|,
name|exprTree
argument_list|,
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Integer
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|Integer
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getNumPartitionsViaSqlFilter
argument_list|(
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Integer
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|Integer
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|Integer
name|numPartitions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exprTree
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|numPartitions
operator|=
name|getNumPartitionsViaOrmFilter
argument_list|(
name|ctx
operator|.
name|getTable
argument_list|()
argument_list|,
name|exprTree
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|numPartitions
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// if numPartitions could not be obtained from ORM filters, then get number partitions names, and count them
if|if
condition|(
name|numPartitions
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|filteredPartNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|getPartitionNamesPrunedByExprNoTxn
argument_list|(
name|ctx
operator|.
name|getTable
argument_list|()
argument_list|,
name|tempExpr
argument_list|,
literal|""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
name|filteredPartNames
argument_list|)
expr_stmt|;
name|numPartitions
operator|=
name|filteredPartNames
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|numPartitions
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByFilterInternal
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
specifier|final
name|short
name|maxParts
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|ExpressionTree
name|tree
init|=
operator|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|PartFilterExprUtil
operator|.
name|getFilterParser
argument_list|(
name|filter
argument_list|)
operator|.
name|tree
else|:
name|ExpressionTree
operator|.
name|EMPTY_TREE
decl_stmt|;
return|return
operator|new
name|GetListHelper
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
specifier|private
specifier|final
name|SqlFilterForPushdown
name|filter
init|=
operator|new
name|SqlFilterForPushdown
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|canUseDirectSql
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|generateSqlFilterForPushdown
argument_list|(
name|ctx
operator|.
name|getTable
argument_list|()
argument_list|,
name|tree
argument_list|,
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getPartitionsViaSqlFilter
argument_list|(
name|filter
argument_list|,
operator|(
name|maxParts
operator|<
literal|0
operator|)
condition|?
literal|null
else|:
operator|(
name|int
operator|)
name|maxParts
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getPartitionsViaOrmFilter
argument_list|(
name|ctx
operator|.
name|getTable
argument_list|()
argument_list|,
name|tree
argument_list|,
name|maxParts
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**    * Gets the table object for a given table, throws if anything goes wrong.    * @param dbName Database name.    * @param tblName Table name.    * @return Table object.    */
specifier|private
name|MTable
name|ensureGetMTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|MTable
name|mtable
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Specified catalog.database.table does not exist : "
operator|+
name|getCatalogQualifiedTableName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|mtable
return|;
block|}
specifier|private
name|Table
name|ensureGetTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
return|return
name|convertToTable
argument_list|(
name|ensureGetMTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Makes a JDO query filter string.    * Makes a JDO query filter string for tables or partitions.    * @param dbName Database name.    * @param mtable Table. If null, the query returned is over tables in a database.    *   If not null, the query returned is over partitions in a table.    * @param filter The filter from which JDOQL filter will be made.    * @param params Parameters for the filter. Some parameters may be added here.    * @return Resulting filter.    */
specifier|private
name|String
name|makeQueryFilterString
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|MTable
name|mtable
parameter_list|,
name|String
name|filter
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|MetaException
block|{
name|ExpressionTree
name|tree
init|=
operator|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|PartFilterExprUtil
operator|.
name|getFilterParser
argument_list|(
name|filter
argument_list|)
operator|.
name|tree
else|:
name|ExpressionTree
operator|.
name|EMPTY_TREE
decl_stmt|;
return|return
name|makeQueryFilterString
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|convertToTable
argument_list|(
name|mtable
argument_list|)
argument_list|,
name|tree
argument_list|,
name|params
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Makes a JDO query filter string for tables or partitions.    * @param dbName Database name.    * @param table Table. If null, the query returned is over tables in a database.    *   If not null, the query returned is over partitions in a table.    * @param tree The expression tree from which JDOQL filter will be made.    * @param params Parameters for the filter. Some parameters may be added here.    * @param isValidatedFilter Whether the filter was pre-validated for JDOQL pushdown    *   by the client; if it was and we fail to create a filter, we will throw.    * @return Resulting filter. Can be null if isValidatedFilter is false, and there was error.    */
specifier|private
name|String
name|makeQueryFilterString
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|Table
name|table
parameter_list|,
name|ExpressionTree
name|tree
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|,
name|boolean
name|isValidatedFilter
parameter_list|)
throws|throws
name|MetaException
block|{
assert|assert
name|tree
operator|!=
literal|null
assert|;
name|FilterBuilder
name|queryBuilder
init|=
operator|new
name|FilterBuilder
argument_list|(
name|isValidatedFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|queryBuilder
operator|.
name|append
argument_list|(
literal|"table.tableName == t1&& table.database.name == t2&& table.database.catalogName == t3"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t1"
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t2"
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t3"
argument_list|,
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryBuilder
operator|.
name|append
argument_list|(
literal|"database.name == dbName&& database.catalogName == catName"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"dbName"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"catName"
argument_list|,
name|catName
argument_list|)
expr_stmt|;
block|}
name|tree
operator|.
name|generateJDOFilterFragment
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|table
argument_list|,
name|params
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryBuilder
operator|.
name|hasError
argument_list|()
condition|)
block|{
assert|assert
operator|!
name|isValidatedFilter
assert|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JDO filter pushdown cannot be used: {}"
argument_list|,
name|queryBuilder
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|jdoFilter
init|=
name|queryBuilder
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"jdoFilter = {}"
argument_list|,
name|jdoFilter
argument_list|)
expr_stmt|;
return|return
name|jdoFilter
return|;
block|}
specifier|private
name|String
name|makeParameterDeclarationString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
comment|//Create the parameter declaration string
name|StringBuilder
name|paramDecl
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|params
operator|.
name|keySet
argument_list|()
control|)
block|{
name|paramDecl
operator|.
name|append
argument_list|(
literal|", java.lang.String "
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|paramDecl
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|makeParameterDeclarationStringObj
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
comment|//Create the parameter declaration string
name|StringBuilder
name|paramDecl
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|paramDecl
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|paramDecl
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|paramDecl
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|paramDecl
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|paramDecl
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxTables
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listTableNamesByFilter"
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|queryFilterString
init|=
name|makeQueryFilterString
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
name|filter
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareImports
argument_list|(
literal|"import java.lang.String"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"tableName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResultClass
argument_list|(
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxTables
operator|>=
literal|0
condition|)
block|{
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|maxTables
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"filter specified is {}, JDOQL filter is {}"
argument_list|,
name|filter
argument_list|,
name|queryFilterString
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"key: {} value: {} class: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|parameterDeclaration
init|=
name|makeParameterDeclarationStringObj
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameterDeclaration
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFilter
argument_list|(
name|queryFilterString
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|executeWithMap
argument_list|(
name|params
argument_list|)
decl_stmt|;
comment|// have to emulate "distinct", otherwise tables with the same name may be returned
name|tableNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|names
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listTableNamesByFilter"
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listTableNamesByFilter"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|Table
name|newTable
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|registerCreationSignature
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|name
operator|=
name|normalizeIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|dbname
operator|=
name|normalizeIdentifier
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|MTable
name|newt
init|=
name|convertToMTable
argument_list|(
name|newTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|newt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"new table is invalid"
argument_list|)
throw|;
block|}
name|MTable
name|oldt
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"table "
operator|+
name|dbname
operator|+
literal|"."
operator|+
name|name
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
comment|// For now only alter name, owner, parameters, cols, bucketcols are allowed
name|oldt
operator|.
name|setDatabase
argument_list|(
name|newt
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setTableName
argument_list|(
name|normalizeIdentifier
argument_list|(
name|newt
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setParameters
argument_list|(
name|newt
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setOwner
argument_list|(
name|newt
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setOwnerType
argument_list|(
name|newt
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fully copy over the contents of the new SD into the old SD,
comment|// so we don't create an extra SD in the metastore db that has no references.
name|MColumnDescriptor
name|oldCD
init|=
literal|null
decl_stmt|;
name|MStorageDescriptor
name|oldSD
init|=
name|oldt
operator|.
name|getSd
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldSD
operator|!=
literal|null
condition|)
block|{
name|oldCD
operator|=
name|oldSD
operator|.
name|getCD
argument_list|()
expr_stmt|;
block|}
name|copyMSD
argument_list|(
name|newt
operator|.
name|getSd
argument_list|()
argument_list|,
name|oldt
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|removeUnusedColumnDescriptor
argument_list|(
name|oldCD
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setRetention
argument_list|(
name|newt
operator|.
name|getRetention
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setPartitionKeys
argument_list|(
name|newt
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setTableType
argument_list|(
name|newt
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setLastAccessTime
argument_list|(
name|newt
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setViewOriginalText
argument_list|(
name|newt
operator|.
name|getViewOriginalText
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setViewExpandedText
argument_list|(
name|newt
operator|.
name|getViewExpandedText
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setRewriteEnabled
argument_list|(
name|newt
operator|.
name|isRewriteEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// commit the changes
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateCreationMetadata
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|tablename
parameter_list|,
name|CreationMetadata
name|cm
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbname
operator|=
name|normalizeIdentifier
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|tablename
operator|=
name|normalizeIdentifier
argument_list|(
name|tablename
argument_list|)
expr_stmt|;
comment|// Update creation metadata
name|MCreationMetadata
name|newMcm
init|=
name|convertToMCreationMetadata
argument_list|(
name|cm
argument_list|)
decl_stmt|;
name|MCreationMetadata
name|mcm
init|=
name|getCreationMetadata
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|tablename
argument_list|)
decl_stmt|;
name|mcm
operator|.
name|setTables
argument_list|(
name|newMcm
operator|.
name|getTables
argument_list|()
argument_list|)
expr_stmt|;
name|mcm
operator|.
name|setTxnList
argument_list|(
name|newMcm
operator|.
name|getTxnList
argument_list|()
argument_list|)
expr_stmt|;
comment|// commit the changes
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Add to the invalidation cache if the creation signature has changed
name|MaterializationsInvalidationCache
operator|.
name|get
argument_list|()
operator|.
name|alterMaterializedView
argument_list|(
name|dbname
argument_list|,
name|tablename
argument_list|,
name|cm
operator|.
name|getTablesUsed
argument_list|()
argument_list|,
name|cm
operator|.
name|getValidTxnList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Alters an existing partition. Initiates copy of SD. Returns the old CD.    * @param dbname    * @param name    * @param part_vals Partition values (of the original partition instance)    * @param newPart Partition object containing new information    * @return The column descriptor of the old partition instance (null if table is a view)    * @throws InvalidObjectException    * @throws MetaException    */
specifier|private
name|MColumnDescriptor
name|alterPartitionNoTxn
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|name
operator|=
name|normalizeIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|dbname
operator|=
name|normalizeIdentifier
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|MPartition
name|oldp
init|=
name|getMPartition
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
name|MPartition
name|newp
init|=
name|convertToMPart
argument_list|(
name|newPart
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MColumnDescriptor
name|oldCD
init|=
literal|null
decl_stmt|;
name|MStorageDescriptor
name|oldSD
init|=
name|oldp
operator|.
name|getSd
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldSD
operator|!=
literal|null
condition|)
block|{
name|oldCD
operator|=
name|oldSD
operator|.
name|getCD
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oldp
operator|==
literal|null
operator|||
name|newp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"partition does not exist."
argument_list|)
throw|;
block|}
name|oldp
operator|.
name|setValues
argument_list|(
name|newp
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|oldp
operator|.
name|setPartitionName
argument_list|(
name|newp
operator|.
name|getPartitionName
argument_list|()
argument_list|)
expr_stmt|;
name|oldp
operator|.
name|setParameters
argument_list|(
name|newPart
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|oldp
operator|.
name|getTable
argument_list|()
operator|.
name|getTableType
argument_list|()
argument_list|)
condition|)
block|{
name|copyMSD
argument_list|(
name|newp
operator|.
name|getSd
argument_list|()
argument_list|,
name|oldp
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newp
operator|.
name|getCreateTime
argument_list|()
operator|!=
name|oldp
operator|.
name|getCreateTime
argument_list|()
condition|)
block|{
name|oldp
operator|.
name|setCreateTime
argument_list|(
name|newp
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newp
operator|.
name|getLastAccessTime
argument_list|()
operator|!=
name|oldp
operator|.
name|getLastAccessTime
argument_list|()
condition|)
block|{
name|oldp
operator|.
name|setLastAccessTime
argument_list|(
name|newp
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|oldCD
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MColumnDescriptor
name|oldCd
init|=
name|alterPartitionNoTxn
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|part_vals
argument_list|,
name|newPart
argument_list|)
decl_stmt|;
name|removeUnusedColumnDescriptor
argument_list|(
name|oldCd
argument_list|)
expr_stmt|;
comment|// commit the changes
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|e
operator|=
name|exception
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
name|MetaException
name|metaException
init|=
operator|new
name|MetaException
argument_list|(
literal|"The transaction for alter partition did not commit successfully."
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|metaException
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|metaException
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|part_vals
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|part_val_itr
init|=
name|part_vals
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|MColumnDescriptor
argument_list|>
name|oldCds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|tmpPart
range|:
name|newParts
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tmpPartVals
init|=
name|part_val_itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|MColumnDescriptor
name|oldCd
init|=
name|alterPartitionNoTxn
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|tmpPartVals
argument_list|,
name|tmpPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldCd
operator|!=
literal|null
condition|)
block|{
name|oldCds
operator|.
name|add
argument_list|(
name|oldCd
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MColumnDescriptor
name|oldCd
range|:
name|oldCds
control|)
block|{
name|removeUnusedColumnDescriptor
argument_list|(
name|oldCd
argument_list|)
expr_stmt|;
block|}
comment|// commit the changes
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|e
operator|=
name|exception
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
name|MetaException
name|metaException
init|=
operator|new
name|MetaException
argument_list|(
literal|"The transaction for alter partition did not commit successfully."
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|metaException
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|metaException
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|copyMSD
parameter_list|(
name|MStorageDescriptor
name|newSd
parameter_list|,
name|MStorageDescriptor
name|oldSd
parameter_list|)
block|{
name|oldSd
operator|.
name|setLocation
argument_list|(
name|newSd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the columns of the old column descriptor != the columns of the new one,
comment|// then change the old storage descriptor's column descriptor.
comment|// Convert the MFieldSchema's to their thrift object counterparts, because we maintain
comment|// datastore identity (i.e., identity of the model objects are managed by JDO,
comment|// not the application).
if|if
condition|(
operator|!
operator|(
name|oldSd
operator|!=
literal|null
operator|&&
name|oldSd
operator|.
name|getCD
argument_list|()
operator|!=
literal|null
operator|&&
name|oldSd
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
operator|!=
literal|null
operator|&&
name|newSd
operator|!=
literal|null
operator|&&
name|newSd
operator|.
name|getCD
argument_list|()
operator|!=
literal|null
operator|&&
name|newSd
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
operator|!=
literal|null
operator|&&
name|convertToFieldSchemas
argument_list|(
name|newSd
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|convertToFieldSchemas
argument_list|(
name|oldSd
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|oldSd
operator|.
name|setCD
argument_list|(
name|newSd
operator|.
name|getCD
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oldSd
operator|.
name|setBucketCols
argument_list|(
name|newSd
operator|.
name|getBucketCols
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setCompressed
argument_list|(
name|newSd
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setInputFormat
argument_list|(
name|newSd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setOutputFormat
argument_list|(
name|newSd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setNumBuckets
argument_list|(
name|newSd
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|newSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|newSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
name|newSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setSkewedColNames
argument_list|(
name|newSd
operator|.
name|getSkewedColNames
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setSkewedColValues
argument_list|(
name|newSd
operator|.
name|getSkewedColValues
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setSkewedColValueLocationMaps
argument_list|(
name|newSd
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setSortCols
argument_list|(
name|newSd
operator|.
name|getSortCols
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setParameters
argument_list|(
name|newSd
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|newSd
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if a column descriptor has any remaining references by storage descriptors    * in the db.  If it does not, then delete the CD.  If it does, then do nothing.    * @param oldCD the column descriptor to delete if it is no longer referenced anywhere    */
specifier|private
name|void
name|removeUnusedColumnDescriptor
parameter_list|(
name|MColumnDescriptor
name|oldCD
parameter_list|)
block|{
if|if
condition|(
name|oldCD
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"execute removeUnusedColumnDescriptor"
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select count(1) from "
operator|+
literal|"org.apache.hadoop.hive.metastore.model.MStorageDescriptor where (this.cd == inCD)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"MColumnDescriptor inCD"
argument_list|)
expr_stmt|;
name|long
name|count
init|=
operator|(
operator|(
name|Long
operator|)
name|query
operator|.
name|execute
argument_list|(
name|oldCD
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
comment|//if no other SD references this CD, we can throw it out.
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|pm
operator|.
name|retrieve
argument_list|(
name|oldCD
argument_list|)
expr_stmt|;
name|pm
operator|.
name|deletePersistent
argument_list|(
name|oldCD
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"successfully deleted a CD in removeUnusedColumnDescriptor"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Called right before an action that would drop a storage descriptor.    * This function makes the SD's reference to a CD null, and then deletes the CD    * if it no longer is referenced in the table.    * @param msd the storage descriptor to drop    */
specifier|private
name|void
name|preDropStorageDescriptor
parameter_list|(
name|MStorageDescriptor
name|msd
parameter_list|)
block|{
if|if
condition|(
name|msd
operator|==
literal|null
operator|||
name|msd
operator|.
name|getCD
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|MColumnDescriptor
name|mcd
init|=
name|msd
operator|.
name|getCD
argument_list|()
decl_stmt|;
comment|// Because there is a 1-N relationship between CDs and SDs,
comment|// we must set the SD's CD to null first before dropping the storage descriptor
comment|// to satisfy foreign key constraints.
name|msd
operator|.
name|setCD
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|removeUnusedColumnDescriptor
argument_list|(
name|mcd
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|MFieldSchema
name|getColumnFromTableColumns
parameter_list|(
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|cols
parameter_list|,
name|String
name|col
parameter_list|)
block|{
if|if
condition|(
name|cols
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|MFieldSchema
name|mfs
range|:
name|cols
control|)
block|{
if|if
condition|(
name|mfs
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|col
argument_list|)
condition|)
block|{
return|return
name|mfs
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|int
name|getColumnIndexFromTableColumns
parameter_list|(
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|cols
parameter_list|,
name|String
name|col
parameter_list|)
block|{
if|if
condition|(
name|cols
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MFieldSchema
name|mfs
init|=
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mfs
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|col
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
name|boolean
name|constraintNameAlreadyExists
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|constraintExistsQuery
init|=
literal|null
decl_stmt|;
name|String
name|constraintNameIfExists
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|name
operator|=
name|normalizeIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|constraintExistsQuery
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MConstraint
operator|.
name|class
argument_list|,
literal|"constraintName == name"
argument_list|)
expr_stmt|;
name|constraintExistsQuery
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String name"
argument_list|)
expr_stmt|;
name|constraintExistsQuery
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|constraintExistsQuery
operator|.
name|setResult
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|constraintNameIfExists
operator|=
operator|(
name|String
operator|)
name|constraintExistsQuery
operator|.
name|execute
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|constraintExistsQuery
argument_list|)
expr_stmt|;
block|}
return|return
name|constraintNameIfExists
operator|!=
literal|null
operator|&&
operator|!
name|constraintNameIfExists
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|private
name|String
name|generateConstraintName
parameter_list|(
name|String
modifier|...
name|parameters
parameter_list|)
throws|throws
name|MetaException
block|{
name|int
name|hashcode
init|=
name|ArrayUtils
operator|.
name|toString
argument_list|(
name|parameters
argument_list|)
operator|.
name|hashCode
argument_list|()
operator|&
literal|0xfffffff
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|MAX_RETRIES
init|=
literal|10
decl_stmt|;
while|while
condition|(
name|counter
operator|<
name|MAX_RETRIES
condition|)
block|{
name|String
name|currName
init|=
operator|(
name|parameters
operator|.
name|length
operator|==
literal|0
condition|?
literal|"constraint_"
else|:
name|parameters
index|[
name|parameters
operator|.
name|length
operator|-
literal|1
index|]
operator|)
operator|+
literal|"_"
operator|+
name|hashcode
operator|+
literal|"_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"_"
operator|+
operator|(
name|counter
operator|++
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|constraintNameAlreadyExists
argument_list|(
name|currName
argument_list|)
condition|)
block|{
return|return
name|currName
return|;
block|}
block|}
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Error while trying to generate the constraint name for "
operator|+
name|ArrayUtils
operator|.
name|toString
argument_list|(
name|parameters
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addForeignKeys
parameter_list|(
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|addForeignKeys
argument_list|(
name|fks
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMetastoreDbUuid
parameter_list|()
throws|throws
name|MetaException
block|{
name|String
name|ret
init|=
name|getGuidFromDB
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
return|return
name|createDbGuidAndPersist
argument_list|()
return|;
block|}
specifier|private
name|String
name|createDbGuidAndPersist
parameter_list|()
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MMetastoreDBProperties
name|prop
init|=
operator|new
name|MMetastoreDBProperties
argument_list|()
decl_stmt|;
name|prop
operator|.
name|setPropertykey
argument_list|(
literal|"guid"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|guid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempting to add a guid {} for the metastore db"
argument_list|,
name|guid
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setPropertyValue
argument_list|(
name|guid
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setDescription
argument_list|(
literal|"Metastore DB GUID generated on "
operator|+
name|LocalDateTime
operator|.
name|now
argument_list|()
operator|.
name|format
argument_list|(
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss.SSS"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Metastore db guid {} created successfully"
argument_list|,
name|guid
argument_list|)
expr_stmt|;
return|return
name|guid
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Metastore db guid creation failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
comment|// it possible that some other HMS instance could have created the guid
comment|// at the same time due which this instance could not create a guid above
comment|// in such case return the guid already generated
specifier|final
name|String
name|guid
init|=
name|getGuidFromDB
argument_list|()
decl_stmt|;
if|if
condition|(
name|guid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to create or fetch the metastore database uuid"
argument_list|)
throw|;
block|}
return|return
name|guid
return|;
block|}
specifier|private
name|String
name|getGuidFromDB
parameter_list|()
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MMetastoreDBProperties
operator|.
name|class
argument_list|,
literal|"this.propertyKey == key"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String key"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MMetastoreDBProperties
argument_list|>
name|names
init|=
operator|(
name|Collection
argument_list|<
name|MMetastoreDBProperties
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
literal|"guid"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|uuids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|MMetastoreDBProperties
argument_list|>
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|uuid
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|getPropertyValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found guid {}"
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
name|uuids
operator|.
name|add
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|uuids
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Multiple uuids found"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|uuids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Returning guid of metastore db : {}"
argument_list|,
name|uuids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|uuids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Guid for metastore db not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|addForeignKeys
parameter_list|(
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|,
name|boolean
name|retrieveCD
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fkNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|foreignKeys
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|MConstraint
argument_list|>
name|mpkfks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|currentConstraintName
init|=
literal|null
decl_stmt|;
name|String
name|catName
init|=
literal|null
decl_stmt|;
comment|// We start iterating through the foreign keys. This list might contain more than a single
comment|// foreign key, and each foreign key might contain multiple columns. The outer loop retrieves
comment|// the information that is common for a single key (table information) while the inner loop
comment|// checks / adds information about each column.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|foreignKeys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|catName
operator|==
literal|null
condition|)
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|foreignKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isSetCatName
argument_list|()
condition|?
name|foreignKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tmpCatName
init|=
name|normalizeIdentifier
argument_list|(
name|foreignKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isSetCatName
argument_list|()
condition|?
name|foreignKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|catName
operator|.
name|equals
argument_list|(
name|tmpCatName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Foreign keys cannot span catalogs"
argument_list|)
throw|;
block|}
block|}
specifier|final
name|String
name|fkTableDB
init|=
name|normalizeIdentifier
argument_list|(
name|foreignKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFktable_db
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fkTableName
init|=
name|normalizeIdentifier
argument_list|(
name|foreignKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFktable_name
argument_list|()
argument_list|)
decl_stmt|;
comment|// If retrieveCD is false, we do not need to do a deep retrieval of the Table Column Descriptor.
comment|// For instance, this is the case when we are creating the table.
specifier|final
name|AttachedMTableInfo
name|nChildTable
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|fkTableDB
argument_list|,
name|fkTableName
argument_list|,
name|retrieveCD
argument_list|)
decl_stmt|;
specifier|final
name|MTable
name|childTable
init|=
name|nChildTable
operator|.
name|mtbl
decl_stmt|;
if|if
condition|(
name|childTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Child table not found: "
operator|+
name|fkTableName
argument_list|)
throw|;
block|}
name|MColumnDescriptor
name|childCD
init|=
name|retrieveCD
condition|?
name|nChildTable
operator|.
name|mcd
else|:
name|childTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|childCols
init|=
name|childCD
operator|==
literal|null
operator|||
name|childCD
operator|.
name|getCols
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<>
argument_list|()
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|childCD
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childTable
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|childCols
operator|.
name|addAll
argument_list|(
name|childTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|pkTableDB
init|=
name|normalizeIdentifier
argument_list|(
name|foreignKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPktable_db
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|pkTableName
init|=
name|normalizeIdentifier
argument_list|(
name|foreignKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPktable_name
argument_list|()
argument_list|)
decl_stmt|;
comment|// For primary keys, we retrieve the column descriptors if retrieveCD is true (which means
comment|// it is an alter table statement) or if it is a create table statement but we are
comment|// referencing another table instead of self for the primary key.
specifier|final
name|AttachedMTableInfo
name|nParentTable
decl_stmt|;
specifier|final
name|MTable
name|parentTable
decl_stmt|;
name|MColumnDescriptor
name|parentCD
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|parentCols
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|existingTablePrimaryKeys
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|existingTableUniqueConstraints
decl_stmt|;
specifier|final
name|boolean
name|sameTable
init|=
name|fkTableDB
operator|.
name|equals
argument_list|(
name|pkTableDB
argument_list|)
operator|&&
name|fkTableName
operator|.
name|equals
argument_list|(
name|pkTableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sameTable
condition|)
block|{
name|nParentTable
operator|=
name|nChildTable
expr_stmt|;
name|parentTable
operator|=
name|childTable
expr_stmt|;
name|parentCD
operator|=
name|childCD
expr_stmt|;
name|parentCols
operator|=
name|childCols
expr_stmt|;
name|existingTablePrimaryKeys
operator|=
name|primaryKeys
expr_stmt|;
name|existingTableUniqueConstraints
operator|=
name|uniqueConstraints
expr_stmt|;
block|}
else|else
block|{
name|nParentTable
operator|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|pkTableDB
argument_list|,
name|pkTableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|parentTable
operator|=
name|nParentTable
operator|.
name|mtbl
expr_stmt|;
if|if
condition|(
name|parentTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Parent table not found: "
operator|+
name|pkTableName
argument_list|)
throw|;
block|}
name|parentCD
operator|=
name|nParentTable
operator|.
name|mcd
expr_stmt|;
name|parentCols
operator|=
name|parentCD
operator|==
literal|null
operator|||
name|parentCD
operator|.
name|getCols
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<>
argument_list|()
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|parentCD
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentTable
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parentCols
operator|.
name|addAll
argument_list|(
name|parentTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|existingTablePrimaryKeys
operator|=
name|getPrimaryKeys
argument_list|(
name|catName
argument_list|,
name|pkTableDB
argument_list|,
name|pkTableName
argument_list|)
expr_stmt|;
name|existingTableUniqueConstraints
operator|=
name|getUniqueConstraints
argument_list|(
name|catName
argument_list|,
name|pkTableDB
argument_list|,
name|pkTableName
argument_list|)
expr_stmt|;
block|}
comment|// Here we build an aux structure that is used to verify that the foreign key that is declared
comment|// is actually referencing a valid primary key or unique key. We also check that the types of
comment|// the columns correspond.
if|if
condition|(
name|existingTablePrimaryKeys
operator|.
name|isEmpty
argument_list|()
operator|&&
name|existingTableUniqueConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Trying to define foreign key but there are no primary keys or unique keys for referenced table"
argument_list|)
throw|;
block|}
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|validPKsOrUnique
init|=
name|generateValidPKsOrUniqueSignatures
argument_list|(
name|parentCols
argument_list|,
name|existingTablePrimaryKeys
argument_list|,
name|existingTableUniqueConstraints
argument_list|)
decl_stmt|;
name|StringBuilder
name|fkSignature
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|referencedKSignature
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|foreignKeys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SQLForeignKey
name|foreignKey
init|=
name|foreignKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fkColumnName
init|=
name|normalizeIdentifier
argument_list|(
name|foreignKey
operator|.
name|getFkcolumn_name
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|childIntegerIndex
init|=
name|getColumnIndexFromTableColumns
argument_list|(
name|childCD
operator|.
name|getCols
argument_list|()
argument_list|,
name|fkColumnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|childIntegerIndex
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|childTable
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|childCD
operator|=
literal|null
expr_stmt|;
name|childIntegerIndex
operator|=
name|getColumnIndexFromTableColumns
argument_list|(
name|childTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|fkColumnName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childIntegerIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Child column not found: "
operator|+
name|fkColumnName
argument_list|)
throw|;
block|}
block|}
specifier|final
name|String
name|pkColumnName
init|=
name|normalizeIdentifier
argument_list|(
name|foreignKey
operator|.
name|getPkcolumn_name
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|parentIntegerIndex
init|=
name|getColumnIndexFromTableColumns
argument_list|(
name|parentCD
operator|.
name|getCols
argument_list|()
argument_list|,
name|pkColumnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIntegerIndex
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|parentTable
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parentCD
operator|=
literal|null
expr_stmt|;
name|parentIntegerIndex
operator|=
name|getColumnIndexFromTableColumns
argument_list|(
name|parentTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|pkColumnName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentIntegerIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Parent column not found: "
operator|+
name|pkColumnName
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|foreignKey
operator|.
name|getFk_name
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// When there is no explicit foreign key name associated with the constraint and the key is composite,
comment|// we expect the foreign keys to be send in order in the input list.
comment|// Otherwise, the below code will break.
comment|// If this is the first column of the FK constraint, generate the foreign key name
comment|// NB: The below code can result in race condition where duplicate names can be generated (in theory).
comment|// However, this scenario can be ignored for practical purposes because of
comment|// the uniqueness of the generated constraint name.
if|if
condition|(
name|foreignKey
operator|.
name|getKey_seq
argument_list|()
operator|==
literal|1
condition|)
block|{
name|currentConstraintName
operator|=
name|generateConstraintName
argument_list|(
name|fkTableDB
argument_list|,
name|fkTableName
argument_list|,
name|pkTableDB
argument_list|,
name|pkTableName
argument_list|,
name|pkColumnName
argument_list|,
name|fkColumnName
argument_list|,
literal|"fk"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|currentConstraintName
operator|=
name|normalizeIdentifier
argument_list|(
name|foreignKey
operator|.
name|getFk_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|constraintNameAlreadyExists
argument_list|(
name|currentConstraintName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Constraint name already exists: "
operator|+
name|currentConstraintName
argument_list|)
throw|;
block|}
block|}
name|fkNames
operator|.
name|add
argument_list|(
name|currentConstraintName
argument_list|)
expr_stmt|;
name|Integer
name|updateRule
init|=
name|foreignKey
operator|.
name|getUpdate_rule
argument_list|()
decl_stmt|;
name|Integer
name|deleteRule
init|=
name|foreignKey
operator|.
name|getDelete_rule
argument_list|()
decl_stmt|;
name|int
name|enableValidateRely
init|=
operator|(
name|foreignKey
operator|.
name|isEnable_cstr
argument_list|()
condition|?
literal|4
else|:
literal|0
operator|)
operator|+
operator|(
name|foreignKey
operator|.
name|isValidate_cstr
argument_list|()
condition|?
literal|2
else|:
literal|0
operator|)
operator|+
operator|(
name|foreignKey
operator|.
name|isRely_cstr
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|MConstraint
name|mpkfk
init|=
operator|new
name|MConstraint
argument_list|(
name|currentConstraintName
argument_list|,
name|MConstraint
operator|.
name|FOREIGN_KEY_CONSTRAINT
argument_list|,
name|foreignKey
operator|.
name|getKey_seq
argument_list|()
argument_list|,
name|deleteRule
argument_list|,
name|updateRule
argument_list|,
name|enableValidateRely
argument_list|,
name|parentTable
argument_list|,
name|childTable
argument_list|,
name|parentCD
argument_list|,
name|childCD
argument_list|,
name|childIntegerIndex
argument_list|,
name|parentIntegerIndex
argument_list|)
decl_stmt|;
name|mpkfks
operator|.
name|add
argument_list|(
name|mpkfk
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fkColType
init|=
name|getColumnFromTableColumns
argument_list|(
name|childCols
argument_list|,
name|fkColumnName
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|fkSignature
operator|.
name|append
argument_list|(
name|generateColNameTypeSignature
argument_list|(
name|fkColumnName
argument_list|,
name|fkColType
argument_list|)
argument_list|)
expr_stmt|;
name|referencedKSignature
operator|.
name|append
argument_list|(
name|generateColNameTypeSignature
argument_list|(
name|pkColumnName
argument_list|,
name|fkColType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|foreignKeys
operator|.
name|size
argument_list|()
operator|&&
name|foreignKeys
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|getKey_seq
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Next one is a new key, we bail out from the inner loop
break|break;
block|}
block|}
name|String
name|referenced
init|=
name|referencedKSignature
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|validPKsOrUnique
operator|.
name|contains
argument_list|(
name|referenced
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Foreign key references "
operator|+
name|referenced
operator|+
literal|" but no corresponding "
operator|+
literal|"primary key or unique key exists. Possible keys: "
operator|+
name|validPKsOrUnique
argument_list|)
throw|;
block|}
if|if
condition|(
name|sameTable
operator|&&
name|fkSignature
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|referenced
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Cannot be both foreign key and primary/unique key on same table: "
operator|+
name|referenced
argument_list|)
throw|;
block|}
name|fkSignature
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|referencedKSignature
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|mpkfks
argument_list|)
expr_stmt|;
block|}
return|return
name|fkNames
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|generateValidPKsOrUniqueSignatures
parameter_list|(
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|tableCols
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|refTablePrimaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|refTableUniqueConstraints
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|validPKsOrUnique
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|refTablePrimaryKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|refTablePrimaryKeys
argument_list|,
operator|new
name|Comparator
argument_list|<
name|SQLPrimaryKey
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SQLPrimaryKey
name|o1
parameter_list|,
name|SQLPrimaryKey
name|o2
parameter_list|)
block|{
name|int
name|keyNameComp
init|=
name|o1
operator|.
name|getPk_name
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getPk_name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyNameComp
operator|==
literal|0
condition|)
block|{
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getKey_seq
argument_list|()
argument_list|,
name|o2
operator|.
name|getKey_seq
argument_list|()
argument_list|)
return|;
block|}
return|return
name|keyNameComp
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|StringBuilder
name|pkSignature
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|SQLPrimaryKey
name|pk
range|:
name|refTablePrimaryKeys
control|)
block|{
name|pkSignature
operator|.
name|append
argument_list|(
name|generateColNameTypeSignature
argument_list|(
name|pk
operator|.
name|getColumn_name
argument_list|()
argument_list|,
name|getColumnFromTableColumns
argument_list|(
name|tableCols
argument_list|,
name|pk
operator|.
name|getColumn_name
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|validPKsOrUnique
operator|.
name|add
argument_list|(
name|pkSignature
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|refTableUniqueConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|refTableUniqueConstraints
argument_list|,
operator|new
name|Comparator
argument_list|<
name|SQLUniqueConstraint
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SQLUniqueConstraint
name|o1
parameter_list|,
name|SQLUniqueConstraint
name|o2
parameter_list|)
block|{
name|int
name|keyNameComp
init|=
name|o1
operator|.
name|getUk_name
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getUk_name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyNameComp
operator|==
literal|0
condition|)
block|{
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getKey_seq
argument_list|()
argument_list|,
name|o2
operator|.
name|getKey_seq
argument_list|()
argument_list|)
return|;
block|}
return|return
name|keyNameComp
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|StringBuilder
name|ukSignature
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|refTableUniqueConstraints
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|SQLUniqueConstraint
name|uk
init|=
name|refTableUniqueConstraints
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|ukSignature
operator|.
name|append
argument_list|(
name|generateColNameTypeSignature
argument_list|(
name|uk
operator|.
name|getColumn_name
argument_list|()
argument_list|,
name|getColumnFromTableColumns
argument_list|(
name|tableCols
argument_list|,
name|uk
operator|.
name|getColumn_name
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|+
literal|1
operator|<
name|refTableUniqueConstraints
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|refTableUniqueConstraints
operator|.
name|get
argument_list|(
name|j
operator|+
literal|1
argument_list|)
operator|.
name|getUk_name
argument_list|()
operator|.
name|equals
argument_list|(
name|refTableUniqueConstraints
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getUk_name
argument_list|()
argument_list|)
condition|)
block|{
name|validPKsOrUnique
operator|.
name|add
argument_list|(
name|ukSignature
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ukSignature
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|validPKsOrUnique
operator|.
name|add
argument_list|(
name|ukSignature
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|validPKsOrUnique
return|;
block|}
specifier|private
specifier|static
name|String
name|generateColNameTypeSignature
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|colType
parameter_list|)
block|{
return|return
name|colName
operator|+
literal|":"
operator|+
name|colType
operator|+
literal|";"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addPrimaryKeys
parameter_list|(
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|addPrimaryKeys
argument_list|(
name|pks
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|addPrimaryKeys
parameter_list|(
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pks
parameter_list|,
name|boolean
name|retrieveCD
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pkNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MConstraint
argument_list|>
name|mpks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|constraintName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|catName
init|=
name|normalizeIdentifier
argument_list|(
name|pks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableDB
init|=
name|normalizeIdentifier
argument_list|(
name|pks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|normalizeIdentifier
argument_list|(
name|pks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnName
init|=
name|normalizeIdentifier
argument_list|(
name|pks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
decl_stmt|;
comment|// If retrieveCD is false, we do not need to do a deep retrieval of the Table Column Descriptor.
comment|// For instance, this is the case when we are creating the table.
name|AttachedMTableInfo
name|nParentTable
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|tableDB
argument_list|,
name|tableName
argument_list|,
name|retrieveCD
argument_list|)
decl_stmt|;
name|MTable
name|parentTable
init|=
name|nParentTable
operator|.
name|mtbl
decl_stmt|;
if|if
condition|(
name|parentTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Parent table not found: "
operator|+
name|tableName
argument_list|)
throw|;
block|}
name|MColumnDescriptor
name|parentCD
init|=
name|retrieveCD
condition|?
name|nParentTable
operator|.
name|mcd
else|:
name|parentTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
decl_stmt|;
name|int
name|parentIntegerIndex
init|=
name|getColumnIndexFromTableColumns
argument_list|(
name|parentCD
operator|==
literal|null
condition|?
literal|null
else|:
name|parentCD
operator|.
name|getCols
argument_list|()
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIntegerIndex
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|parentTable
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parentCD
operator|=
literal|null
expr_stmt|;
name|parentIntegerIndex
operator|=
name|getColumnIndexFromTableColumns
argument_list|(
name|parentTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|columnName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentIntegerIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Parent column not found: "
operator|+
name|columnName
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|getPrimaryKeyConstraintName
argument_list|(
name|parentTable
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|parentTable
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|parentTable
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|" Primary key already exists for: "
operator|+
name|getCatalogQualifiedTableName
argument_list|(
name|catName
argument_list|,
name|tableDB
argument_list|,
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|pks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPk_name
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|pks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey_seq
argument_list|()
operator|==
literal|1
condition|)
block|{
name|constraintName
operator|=
name|generateConstraintName
argument_list|(
name|tableDB
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
literal|"pk"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|constraintName
operator|=
name|normalizeIdentifier
argument_list|(
name|pks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPk_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|constraintNameAlreadyExists
argument_list|(
name|constraintName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Constraint name already exists: "
operator|+
name|constraintName
argument_list|)
throw|;
block|}
block|}
name|pkNames
operator|.
name|add
argument_list|(
name|constraintName
argument_list|)
expr_stmt|;
name|int
name|enableValidateRely
init|=
operator|(
name|pks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
condition|?
literal|4
else|:
literal|0
operator|)
operator|+
operator|(
name|pks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
condition|?
literal|2
else|:
literal|0
operator|)
operator|+
operator|(
name|pks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|MConstraint
name|mpk
init|=
operator|new
name|MConstraint
argument_list|(
name|constraintName
argument_list|,
name|MConstraint
operator|.
name|PRIMARY_KEY_CONSTRAINT
argument_list|,
name|pks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|enableValidateRely
argument_list|,
name|parentTable
argument_list|,
literal|null
argument_list|,
name|parentCD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|parentIntegerIndex
argument_list|)
decl_stmt|;
name|mpks
operator|.
name|add
argument_list|(
name|mpk
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|mpks
argument_list|)
expr_stmt|;
return|return
name|pkNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addUniqueConstraints
parameter_list|(
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|addUniqueConstraints
argument_list|(
name|uks
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|addUniqueConstraints
parameter_list|(
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uks
parameter_list|,
name|boolean
name|retrieveCD
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ukNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MConstraint
argument_list|>
name|cstrs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|constraintName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|catName
init|=
name|normalizeIdentifier
argument_list|(
name|uks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableDB
init|=
name|normalizeIdentifier
argument_list|(
name|uks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|normalizeIdentifier
argument_list|(
name|uks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnName
init|=
name|normalizeIdentifier
argument_list|(
name|uks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
decl_stmt|;
comment|// If retrieveCD is false, we do not need to do a deep retrieval of the Table Column Descriptor.
comment|// For instance, this is the case when we are creating the table.
name|AttachedMTableInfo
name|nParentTable
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|tableDB
argument_list|,
name|tableName
argument_list|,
name|retrieveCD
argument_list|)
decl_stmt|;
name|MTable
name|parentTable
init|=
name|nParentTable
operator|.
name|mtbl
decl_stmt|;
if|if
condition|(
name|parentTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Parent table not found: "
operator|+
name|tableName
argument_list|)
throw|;
block|}
name|MColumnDescriptor
name|parentCD
init|=
name|retrieveCD
condition|?
name|nParentTable
operator|.
name|mcd
else|:
name|parentTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
decl_stmt|;
name|int
name|parentIntegerIndex
init|=
name|getColumnIndexFromTableColumns
argument_list|(
name|parentCD
operator|==
literal|null
condition|?
literal|null
else|:
name|parentCD
operator|.
name|getCols
argument_list|()
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIntegerIndex
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|parentTable
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parentCD
operator|=
literal|null
expr_stmt|;
name|parentIntegerIndex
operator|=
name|getColumnIndexFromTableColumns
argument_list|(
name|parentTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|columnName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentIntegerIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Parent column not found: "
operator|+
name|columnName
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|uks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getUk_name
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|uks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey_seq
argument_list|()
operator|==
literal|1
condition|)
block|{
name|constraintName
operator|=
name|generateConstraintName
argument_list|(
name|tableDB
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
literal|"uk"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|constraintName
operator|=
name|normalizeIdentifier
argument_list|(
name|uks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getUk_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|constraintNameAlreadyExists
argument_list|(
name|constraintName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Constraint name already exists: "
operator|+
name|constraintName
argument_list|)
throw|;
block|}
block|}
name|ukNames
operator|.
name|add
argument_list|(
name|constraintName
argument_list|)
expr_stmt|;
name|int
name|enableValidateRely
init|=
operator|(
name|uks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
condition|?
literal|4
else|:
literal|0
operator|)
operator|+
operator|(
name|uks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
condition|?
literal|2
else|:
literal|0
operator|)
operator|+
operator|(
name|uks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|MConstraint
name|muk
init|=
operator|new
name|MConstraint
argument_list|(
name|constraintName
argument_list|,
name|MConstraint
operator|.
name|UNIQUE_CONSTRAINT
argument_list|,
name|uks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey_seq
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|enableValidateRely
argument_list|,
name|parentTable
argument_list|,
literal|null
argument_list|,
name|parentCD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|parentIntegerIndex
argument_list|)
decl_stmt|;
name|cstrs
operator|.
name|add
argument_list|(
name|muk
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|cstrs
argument_list|)
expr_stmt|;
return|return
name|ukNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addNotNullConstraints
parameter_list|(
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|nns
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|addNotNullConstraints
argument_list|(
name|nns
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addDefaultConstraints
parameter_list|(
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|nns
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|addDefaultConstraints
argument_list|(
name|nns
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addCheckConstraints
parameter_list|(
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|nns
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|addCheckConstraints
argument_list|(
name|nns
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|addCheckConstraints
parameter_list|(
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|cc
parameter_list|,
name|boolean
name|retrieveCD
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nnNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MConstraint
argument_list|>
name|cstrs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|constraintName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cc
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|catName
init|=
name|normalizeIdentifier
argument_list|(
name|cc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableDB
init|=
name|normalizeIdentifier
argument_list|(
name|cc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|normalizeIdentifier
argument_list|(
name|cc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnName
init|=
name|cc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumn_name
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|normalizeIdentifier
argument_list|(
name|cc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ccName
init|=
name|cc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDc_name
argument_list|()
decl_stmt|;
name|boolean
name|isEnable
init|=
name|cc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
decl_stmt|;
name|boolean
name|isValidate
init|=
name|cc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
decl_stmt|;
name|boolean
name|isRely
init|=
name|cc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
decl_stmt|;
name|String
name|constraintValue
init|=
name|cc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCheck_expression
argument_list|()
decl_stmt|;
name|addConstraint
argument_list|(
name|catName
argument_list|,
name|tableDB
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
name|ccName
argument_list|,
name|isEnable
argument_list|,
name|isRely
argument_list|,
name|isValidate
argument_list|,
name|MConstraint
operator|.
name|CHECK_CONSTRAINT
argument_list|,
name|constraintValue
argument_list|,
name|retrieveCD
argument_list|,
name|nnNames
argument_list|,
name|cstrs
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|cstrs
argument_list|)
expr_stmt|;
return|return
name|nnNames
return|;
block|}
specifier|private
name|void
name|addConstraint
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|tableDB
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|ccName
parameter_list|,
name|boolean
name|isEnable
parameter_list|,
name|boolean
name|isRely
parameter_list|,
name|boolean
name|isValidate
parameter_list|,
name|int
name|constraintType
parameter_list|,
name|String
name|constraintValue
parameter_list|,
name|boolean
name|retrieveCD
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nnNames
parameter_list|,
name|List
argument_list|<
name|MConstraint
argument_list|>
name|cstrs
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|String
name|constraintName
init|=
literal|null
decl_stmt|;
comment|// If retrieveCD is false, we do not need to do a deep retrieval of the Table Column Descriptor.
comment|// For instance, this is the case when we are creating the table.
name|AttachedMTableInfo
name|nParentTable
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|tableDB
argument_list|,
name|tableName
argument_list|,
name|retrieveCD
argument_list|)
decl_stmt|;
name|MTable
name|parentTable
init|=
name|nParentTable
operator|.
name|mtbl
decl_stmt|;
if|if
condition|(
name|parentTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Parent table not found: "
operator|+
name|tableName
argument_list|)
throw|;
block|}
name|MColumnDescriptor
name|parentCD
init|=
name|retrieveCD
condition|?
name|nParentTable
operator|.
name|mcd
else|:
name|parentTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
decl_stmt|;
name|int
name|parentIntegerIndex
init|=
name|getColumnIndexFromTableColumns
argument_list|(
name|parentCD
operator|==
literal|null
condition|?
literal|null
else|:
name|parentCD
operator|.
name|getCols
argument_list|()
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIntegerIndex
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|parentTable
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parentCD
operator|=
literal|null
expr_stmt|;
name|parentIntegerIndex
operator|=
name|getColumnIndexFromTableColumns
argument_list|(
name|parentTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|columnName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ccName
operator|==
literal|null
condition|)
block|{
name|constraintName
operator|=
name|generateConstraintName
argument_list|(
name|tableDB
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
literal|"dc"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|constraintName
operator|=
name|normalizeIdentifier
argument_list|(
name|ccName
argument_list|)
expr_stmt|;
if|if
condition|(
name|constraintNameAlreadyExists
argument_list|(
name|constraintName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Constraint name already exists: "
operator|+
name|constraintName
argument_list|)
throw|;
block|}
block|}
name|nnNames
operator|.
name|add
argument_list|(
name|constraintName
argument_list|)
expr_stmt|;
name|int
name|enableValidateRely
init|=
operator|(
name|isEnable
condition|?
literal|4
else|:
literal|0
operator|)
operator|+
operator|(
name|isValidate
condition|?
literal|2
else|:
literal|0
operator|)
operator|+
operator|(
name|isRely
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|MConstraint
name|muk
init|=
operator|new
name|MConstraint
argument_list|(
name|constraintName
argument_list|,
name|constraintType
argument_list|,
literal|1
argument_list|,
comment|// Not null constraint should reference a single column
literal|null
argument_list|,
literal|null
argument_list|,
name|enableValidateRely
argument_list|,
name|parentTable
argument_list|,
literal|null
argument_list|,
name|parentCD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|parentIntegerIndex
argument_list|,
name|constraintValue
argument_list|)
decl_stmt|;
name|cstrs
operator|.
name|add
argument_list|(
name|muk
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|addDefaultConstraints
parameter_list|(
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|nns
parameter_list|,
name|boolean
name|retrieveCD
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nnNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MConstraint
argument_list|>
name|cstrs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|constraintName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|catName
init|=
name|normalizeIdentifier
argument_list|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableDB
init|=
name|normalizeIdentifier
argument_list|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|normalizeIdentifier
argument_list|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnName
init|=
name|normalizeIdentifier
argument_list|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ccName
init|=
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDc_name
argument_list|()
decl_stmt|;
name|boolean
name|isEnable
init|=
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
decl_stmt|;
name|boolean
name|isValidate
init|=
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
decl_stmt|;
name|boolean
name|isRely
init|=
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
decl_stmt|;
name|String
name|constraintValue
init|=
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDefault_value
argument_list|()
decl_stmt|;
name|addConstraint
argument_list|(
name|catName
argument_list|,
name|tableDB
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
name|ccName
argument_list|,
name|isEnable
argument_list|,
name|isRely
argument_list|,
name|isValidate
argument_list|,
name|MConstraint
operator|.
name|DEFAULT_CONSTRAINT
argument_list|,
name|constraintValue
argument_list|,
name|retrieveCD
argument_list|,
name|nnNames
argument_list|,
name|cstrs
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|cstrs
argument_list|)
expr_stmt|;
return|return
name|nnNames
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|addNotNullConstraints
parameter_list|(
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|nns
parameter_list|,
name|boolean
name|retrieveCD
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nnNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MConstraint
argument_list|>
name|cstrs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|constraintName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|catName
init|=
name|normalizeIdentifier
argument_list|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCatName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableDB
init|=
name|normalizeIdentifier
argument_list|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTable_db
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|normalizeIdentifier
argument_list|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTable_name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnName
init|=
name|normalizeIdentifier
argument_list|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumn_name
argument_list|()
argument_list|)
decl_stmt|;
comment|// If retrieveCD is false, we do not need to do a deep retrieval of the Table Column Descriptor.
comment|// For instance, this is the case when we are creating the table.
name|AttachedMTableInfo
name|nParentTable
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|tableDB
argument_list|,
name|tableName
argument_list|,
name|retrieveCD
argument_list|)
decl_stmt|;
name|MTable
name|parentTable
init|=
name|nParentTable
operator|.
name|mtbl
decl_stmt|;
if|if
condition|(
name|parentTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Parent table not found: "
operator|+
name|tableName
argument_list|)
throw|;
block|}
name|MColumnDescriptor
name|parentCD
init|=
name|retrieveCD
condition|?
name|nParentTable
operator|.
name|mcd
else|:
name|parentTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
decl_stmt|;
name|int
name|parentIntegerIndex
init|=
name|getColumnIndexFromTableColumns
argument_list|(
name|parentCD
operator|==
literal|null
condition|?
literal|null
else|:
name|parentCD
operator|.
name|getCols
argument_list|()
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIntegerIndex
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|parentTable
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parentCD
operator|=
literal|null
expr_stmt|;
name|parentIntegerIndex
operator|=
name|getColumnIndexFromTableColumns
argument_list|(
name|parentTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|columnName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentIntegerIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Parent column not found: "
operator|+
name|columnName
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNn_name
argument_list|()
operator|==
literal|null
condition|)
block|{
name|constraintName
operator|=
name|generateConstraintName
argument_list|(
name|tableDB
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
literal|"nn"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|constraintName
operator|=
name|normalizeIdentifier
argument_list|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNn_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|constraintNameAlreadyExists
argument_list|(
name|constraintName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Constraint name already exists: "
operator|+
name|constraintName
argument_list|)
throw|;
block|}
block|}
name|nnNames
operator|.
name|add
argument_list|(
name|constraintName
argument_list|)
expr_stmt|;
name|int
name|enableValidateRely
init|=
operator|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isEnable_cstr
argument_list|()
condition|?
literal|4
else|:
literal|0
operator|)
operator|+
operator|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isValidate_cstr
argument_list|()
condition|?
literal|2
else|:
literal|0
operator|)
operator|+
operator|(
name|nns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isRely_cstr
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|MConstraint
name|muk
init|=
operator|new
name|MConstraint
argument_list|(
name|constraintName
argument_list|,
name|MConstraint
operator|.
name|NOT_NULL_CONSTRAINT
argument_list|,
literal|1
argument_list|,
comment|// Not null constraint should reference a single column
literal|null
argument_list|,
literal|null
argument_list|,
name|enableValidateRely
argument_list|,
name|parentTable
argument_list|,
literal|null
argument_list|,
name|parentCD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|parentIntegerIndex
argument_list|)
decl_stmt|;
name|cstrs
operator|.
name|add
argument_list|(
name|muk
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|cstrs
argument_list|)
expr_stmt|;
return|return
name|nnNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addRole
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|ownerName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MRole
name|nameCheck
init|=
name|this
operator|.
name|getMRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameCheck
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Role "
operator|+
name|roleName
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|MRole
name|mRole
init|=
operator|new
name|MRole
argument_list|(
name|roleName
argument_list|,
name|now
argument_list|,
name|ownerName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mRole
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grantRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MRoleMap
name|roleMap
init|=
literal|null
decl_stmt|;
try|try
block|{
name|roleMap
operator|=
name|this
operator|.
name|getMSecurityUserRoleMap
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
if|if
condition|(
name|roleMap
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Principal "
operator|+
name|userName
operator|+
literal|" already has the role "
operator|+
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|principalType
operator|==
name|PrincipalType
operator|.
name|ROLE
condition|)
block|{
name|validateRole
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
name|MRole
name|mRole
init|=
name|getMRole
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|MRoleMap
name|roleMember
init|=
operator|new
name|MRoleMap
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|mRole
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
operator|.
name|toString
argument_list|()
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|roleMember
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
comment|/**    * Verify that role with given name exists, if not throw exception    * @param roleName    * @throws NoSuchObjectException    */
specifier|private
name|void
name|validateRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
comment|// if grantee is a role, check if it exists
name|MRole
name|granteeRole
init|=
name|getMRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|granteeRole
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Role "
operator|+
name|roleName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revokeRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MRoleMap
name|roleMember
init|=
name|getMSecurityUserRoleMap
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|grantOption
condition|)
block|{
comment|// Revoke with grant option - only remove the grant option but keep the role.
if|if
condition|(
name|roleMember
operator|.
name|getGrantOption
argument_list|()
condition|)
block|{
name|roleMember
operator|.
name|setGrantOption
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"User "
operator|+
name|userName
operator|+
literal|" does not have grant option with role "
operator|+
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// No grant option in revoke, remove the whole role.
name|pm
operator|.
name|deletePersistent
argument_list|(
name|roleMember
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|private
name|MRoleMap
name|getMSecurityUserRoleMap
parameter_list|(
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|roleName
parameter_list|)
block|{
name|MRoleMap
name|mRoleMember
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MRoleMap
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& role.roleName == t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mRoleMember
operator|=
operator|(
name|MRoleMap
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|roleName
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mRoleMember
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mRoleMember
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MRole
name|mRol
init|=
name|getMRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mRol
argument_list|)
expr_stmt|;
if|if
condition|(
name|mRol
operator|!=
literal|null
condition|)
block|{
comment|// first remove all the membership, the membership that this role has
comment|// been granted
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|roleMap
init|=
name|listMRoleMembers
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|roleMap
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|roleMap
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|roleMember
init|=
name|listMSecurityPrincipalMembershipRole
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|roleMember
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|roleMember
argument_list|)
expr_stmt|;
block|}
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// then remove all the grants
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|userGrants
init|=
name|listPrincipalMGlobalGrants
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|userGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|userGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|dbGrants
init|=
name|listPrincipalAllDBGrant
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|dbGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|dbGrants
argument_list|)
expr_stmt|;
block|}
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|tabPartGrants
init|=
name|listPrincipalAllTableGrants
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|tabPartGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|tabPartGrants
argument_list|)
expr_stmt|;
block|}
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|partGrants
init|=
name|listPrincipalAllPartitionGrants
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|partGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|partGrants
argument_list|)
expr_stmt|;
block|}
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|tblColumnGrants
init|=
name|listPrincipalAllTableColumnGrants
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|tblColumnGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|tblColumnGrants
argument_list|)
expr_stmt|;
block|}
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|partColumnGrants
init|=
name|listPrincipalAllPartitionColumnGrants
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|partColumnGrants
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|partColumnGrants
argument_list|)
expr_stmt|;
block|}
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// finally remove the role
name|pm
operator|.
name|deletePersistent
argument_list|(
name|mRol
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|queryWrapper
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
comment|/**    * Get all the roles in the role hierarchy that this user and groupNames belongs to    * @param userName    * @param groupNames    * @return    */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|listAllRolesInHierarchy
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
block|{
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|listMRoles
argument_list|(
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupNames
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|listMRoles
argument_list|(
name|groupName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// get names of these roles and its ancestors
name|Set
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|getAllRoleAncestors
argument_list|(
name|roleNames
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|roleNames
return|;
block|}
comment|/**    * Add role names of parentRoles and its parents to processedRoles    *    * @param processedRoleNames    * @param parentRoles    */
specifier|private
name|void
name|getAllRoleAncestors
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|processedRoleNames
parameter_list|,
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|parentRoles
parameter_list|)
block|{
for|for
control|(
name|MRoleMap
name|parentRole
range|:
name|parentRoles
control|)
block|{
name|String
name|parentRoleName
init|=
name|parentRole
operator|.
name|getRole
argument_list|()
operator|.
name|getRoleName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|processedRoleNames
operator|.
name|contains
argument_list|(
name|parentRoleName
argument_list|)
condition|)
block|{
comment|// unprocessed role: get its parents, add it to processed, and call this
comment|// function recursively
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|nextParentRoles
init|=
name|listMRoles
argument_list|(
name|parentRoleName
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
decl_stmt|;
name|processedRoleNames
operator|.
name|add
argument_list|(
name|parentRoleName
argument_list|)
expr_stmt|;
name|getAllRoleAncestors
argument_list|(
name|processedRoleNames
argument_list|,
name|nextParentRoles
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|listMRoles
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|mRoleMember
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listRoles"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MRoleMap
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|mRoles
init|=
operator|(
name|List
argument_list|<
name|MRoleMap
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mRoles
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|mRoleMember
operator|.
name|addAll
argument_list|(
name|mRoles
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listRoles"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|principalType
operator|==
name|PrincipalType
operator|.
name|USER
condition|)
block|{
comment|// All users belong to public role implicitly, add that role
comment|// TODO MS-SPLIT Change this back to HiveMetaStore.PUBLIC once HiveMetaStore has moved to
comment|// stand-alone metastore.
comment|//MRole publicRole = new MRole(HiveMetaStore.PUBLIC, 0, HiveMetaStore.PUBLIC);
name|MRole
name|publicRole
init|=
operator|new
name|MRole
argument_list|(
literal|"public"
argument_list|,
literal|0
argument_list|,
literal|"public"
argument_list|)
decl_stmt|;
name|mRoleMember
operator|.
name|add
argument_list|(
operator|new
name|MRoleMap
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|publicRole
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mRoleMember
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Role
argument_list|>
name|listRoles
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|List
argument_list|<
name|Role
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|roleMaps
init|=
name|listMRoles
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleMaps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MRoleMap
name|roleMap
range|:
name|roleMaps
control|)
block|{
name|MRole
name|mrole
init|=
name|roleMap
operator|.
name|getRole
argument_list|()
decl_stmt|;
name|Role
name|role
init|=
operator|new
name|Role
argument_list|(
name|mrole
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|mrole
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mrole
operator|.
name|getOwnerName
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|listRolesWithGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|roleMaps
init|=
name|listMRoles
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleMaps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MRoleMap
name|roleMap
range|:
name|roleMaps
control|)
block|{
name|RolePrincipalGrant
name|rolePrinGrant
init|=
operator|new
name|RolePrincipalGrant
argument_list|(
name|roleMap
operator|.
name|getRole
argument_list|()
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|roleMap
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|roleMap
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
argument_list|,
name|roleMap
operator|.
name|getGrantOption
argument_list|()
argument_list|,
name|roleMap
operator|.
name|getAddTime
argument_list|()
argument_list|,
name|roleMap
operator|.
name|getGrantor
argument_list|()
argument_list|,
comment|// no grantor type for public role, hence the null check
name|roleMap
operator|.
name|getGrantorType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|roleMap
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|rolePrinGrant
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|listMSecurityPrincipalMembershipRole
parameter_list|(
specifier|final
name|String
name|roleName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|mRoleMemebership
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listMSecurityPrincipalMembershipRole"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MRoleMap
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mRoleMemebership
operator|=
operator|(
name|List
argument_list|<
name|MRoleMap
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|roleName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mRoleMemebership
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMSecurityPrincipalMembershipRole"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mRoleMemebership
return|;
block|}
annotation|@
name|Override
specifier|public
name|Role
name|getRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|MRole
name|mRole
init|=
name|this
operator|.
name|getMRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mRole
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|roleName
operator|+
literal|" role can not be found."
argument_list|)
throw|;
block|}
name|Role
name|ret
init|=
operator|new
name|Role
argument_list|(
name|mRole
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|mRole
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mRole
operator|.
name|getOwnerName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|MRole
name|getMRole
parameter_list|(
name|String
name|roleName
parameter_list|)
block|{
name|MRole
name|mrole
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MRole
operator|.
name|class
argument_list|,
literal|"roleName == t1"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mrole
operator|=
operator|(
name|MRole
operator|)
name|query
operator|.
name|execute
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mrole
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mrole
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listRoleNames
parameter_list|()
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listAllRoleNames"
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select roleName from org.apache.hadoop.hive.metastore.model.MRole"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"roleName"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|roleNames
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|roleNames
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getUserPrivilegeSet
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|user
init|=
name|this
operator|.
name|listPrincipalMGlobalGrants
argument_list|(
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|userPriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|user
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|user
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MGlobalPrivilege
name|item
init|=
name|user
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|userPriv
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|grantInfos
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUserPrivileges
argument_list|(
name|userPriv
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|groupNames
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|groupPriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|group
init|=
name|this
operator|.
name|listPrincipalMGlobalGrants
argument_list|(
name|groupName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|group
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|group
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|group
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MGlobalPrivilege
name|item
init|=
name|group
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|groupPriv
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|grantInfos
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setGroupPrivileges
argument_list|(
name|groupPriv
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|getDBPrivilege
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|userNameDbPriv
init|=
name|this
operator|.
name|listPrincipalMDBGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|userNameDbPriv
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|userNameDbPriv
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userNameDbPriv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MDBPrivilege
name|item
init|=
name|userNameDbPriv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|grantInfos
return|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getDBPrivilegeSet
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|dbUserPriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|dbUserPriv
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|getDBPrivilege
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUserPrivileges
argument_list|(
name|dbUserPriv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|groupNames
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|dbGroupPriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
name|dbGroupPriv
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|getDBPrivilege
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|groupName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setGroupPrivileges
argument_list|(
name|dbGroupPriv
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
name|listAllRolesInHierarchy
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|roleNames
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|dbRolePriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|roleName
range|:
name|roleNames
control|)
block|{
name|dbRolePriv
operator|.
name|put
argument_list|(
name|roleName
argument_list|,
name|getDBPrivilege
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|roleName
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setRolePrivileges
argument_list|(
name|dbRolePriv
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getPartitionPrivilegeSet
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partition
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|partUserPriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|partUserPriv
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|getPartitionPrivilege
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partition
argument_list|,
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUserPrivileges
argument_list|(
name|partUserPriv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|groupNames
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|partGroupPriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
name|partGroupPriv
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|getPartitionPrivilege
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partition
argument_list|,
name|groupName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setGroupPrivileges
argument_list|(
name|partGroupPriv
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
name|listAllRolesInHierarchy
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|roleNames
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|partRolePriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|roleName
range|:
name|roleNames
control|)
block|{
name|partRolePriv
operator|.
name|put
argument_list|(
name|roleName
argument_list|,
name|getPartitionPrivilege
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partition
argument_list|,
name|roleName
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setRolePrivileges
argument_list|(
name|partRolePriv
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getTablePrivilegeSet
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|tableUserPriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableUserPriv
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|getTablePrivilege
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUserPrivileges
argument_list|(
name|tableUserPriv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|groupNames
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|tableGroupPriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
name|tableGroupPriv
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|getTablePrivilege
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|groupName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setGroupPrivileges
argument_list|(
name|tableGroupPriv
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
name|listAllRolesInHierarchy
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|roleNames
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|tableRolePriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|roleName
range|:
name|roleNames
control|)
block|{
name|tableRolePriv
operator|.
name|put
argument_list|(
name|roleName
argument_list|,
name|getTablePrivilege
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|roleName
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setRolePrivileges
argument_list|(
name|tableRolePriv
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getColumnPrivilegeSet
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|columnName
operator|=
name|normalizeIdentifier
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|columnUserPriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|columnUserPriv
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|getColumnPrivilege
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
name|partitionName
argument_list|,
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUserPrivileges
argument_list|(
name|columnUserPriv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|groupNames
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|columnGroupPriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
name|columnGroupPriv
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|getColumnPrivilege
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
name|partitionName
argument_list|,
name|groupName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setGroupPrivileges
argument_list|(
name|columnGroupPriv
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
name|listAllRolesInHierarchy
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|roleNames
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|columnRolePriv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|roleName
range|:
name|roleNames
control|)
block|{
name|columnRolePriv
operator|.
name|put
argument_list|(
name|roleName
argument_list|,
name|getColumnPrivilege
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
name|partitionName
argument_list|,
name|roleName
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setRolePrivileges
argument_list|(
name|columnRolePriv
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|getPartitionPrivilege
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|userNameTabPartPriv
init|=
name|this
operator|.
name|listPrincipalMPartitionGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|userNameTabPartPriv
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|userNameTabPartPriv
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userNameTabPartPriv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MPartitionPrivilege
name|item
init|=
name|userNameTabPartPriv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|grantInfos
return|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|PrincipalType
name|getPrincipalTypeFromStr
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|==
literal|null
condition|?
literal|null
else|:
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|getTablePrivilege
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|userNameTabPartPriv
init|=
name|this
operator|.
name|listAllMTableGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|userNameTabPartPriv
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|userNameTabPartPriv
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userNameTabPartPriv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MTablePrivilege
name|item
init|=
name|userNameTabPartPriv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|grantInfos
return|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|getColumnPrivilege
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|columnName
operator|=
name|normalizeIdentifier
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitionName
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|userNameColumnPriv
init|=
name|this
operator|.
name|listPrincipalMTableColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|userNameColumnPriv
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|userNameColumnPriv
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userNameColumnPriv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MTableColumnPrivilege
name|item
init|=
name|userNameColumnPriv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|grantInfos
return|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|userNameColumnPriv
init|=
name|this
operator|.
name|listPrincipalMPartitionColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|userNameColumnPriv
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|userNameColumnPriv
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userNameColumnPriv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MPartitionColumnPrivilege
name|item
init|=
name|userNameColumnPriv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|grantInfos
return|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grantPrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|persistentObjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privilegeList
init|=
name|privileges
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|privilegeList
argument_list|)
condition|)
block|{
name|Iterator
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privIter
init|=
name|privilegeList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|privSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|privIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HiveObjectPrivilege
name|privDef
init|=
name|privIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|hiveObject
init|=
name|privDef
operator|.
name|getHiveObject
argument_list|()
decl_stmt|;
name|String
name|privilegeStr
init|=
name|privDef
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
name|String
index|[]
name|privs
init|=
name|privilegeStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|privDef
operator|.
name|getPrincipalName
argument_list|()
decl_stmt|;
name|String
name|authorizer
init|=
name|privDef
operator|.
name|getAuthorizer
argument_list|()
decl_stmt|;
name|PrincipalType
name|principalType
init|=
name|privDef
operator|.
name|getPrincipalType
argument_list|()
decl_stmt|;
name|String
name|grantor
init|=
name|privDef
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getGrantor
argument_list|()
decl_stmt|;
name|String
name|grantorType
init|=
name|privDef
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getGrantorType
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|grantOption
init|=
name|privDef
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|isGrantOption
argument_list|()
decl_stmt|;
name|privSet
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|principalType
operator|==
name|PrincipalType
operator|.
name|ROLE
condition|)
block|{
name|validateRole
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
name|String
name|catName
init|=
name|hiveObject
operator|.
name|isSetCatName
argument_list|()
condition|?
name|hiveObject
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|GLOBAL
condition|)
block|{
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|globalPrivs
init|=
name|this
operator|.
name|listPrincipalMGlobalGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|authorizer
argument_list|)
decl_stmt|;
if|if
condition|(
name|globalPrivs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MGlobalPrivilege
name|priv
range|:
name|globalPrivs
control|)
block|{
if|if
condition|(
name|priv
operator|.
name|getGrantor
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|grantor
argument_list|)
condition|)
block|{
name|privSet
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
if|if
condition|(
name|privSet
operator|.
name|contains
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|privilege
operator|+
literal|" is already granted by "
operator|+
name|grantor
argument_list|)
throw|;
block|}
name|MGlobalPrivilege
name|mGlobalPrivs
init|=
operator|new
name|MGlobalPrivilege
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|privilege
argument_list|,
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|,
name|authorizer
argument_list|)
decl_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|mGlobalPrivs
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|DATABASE
condition|)
block|{
name|MDatabase
name|dbObj
init|=
name|getMDatabase
argument_list|(
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbObj
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|dbPrivs
init|=
name|this
operator|.
name|listPrincipalMDBGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|authorizer
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbPrivs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MDBPrivilege
name|priv
range|:
name|dbPrivs
control|)
block|{
if|if
condition|(
name|priv
operator|.
name|getGrantor
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|grantor
argument_list|)
condition|)
block|{
name|privSet
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
if|if
condition|(
name|privSet
operator|.
name|contains
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|privilege
operator|+
literal|" is already granted on database "
operator|+
name|hiveObject
operator|.
name|getDbName
argument_list|()
operator|+
literal|" by "
operator|+
name|grantor
argument_list|)
throw|;
block|}
name|MDBPrivilege
name|mDb
init|=
operator|new
name|MDBPrivilege
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|dbObj
argument_list|,
name|privilege
argument_list|,
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|,
name|authorizer
argument_list|)
decl_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|mDb
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|TABLE
condition|)
block|{
name|MTable
name|tblObj
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblObj
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|tablePrivs
init|=
name|this
operator|.
name|listAllMTableGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|authorizer
argument_list|)
decl_stmt|;
if|if
condition|(
name|tablePrivs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MTablePrivilege
name|priv
range|:
name|tablePrivs
control|)
block|{
if|if
condition|(
name|priv
operator|.
name|getGrantor
argument_list|()
operator|!=
literal|null
operator|&&
name|priv
operator|.
name|getGrantor
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|grantor
argument_list|)
condition|)
block|{
name|privSet
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
if|if
condition|(
name|privSet
operator|.
name|contains
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|privilege
operator|+
literal|" is already granted on table ["
operator|+
name|hiveObject
operator|.
name|getDbName
argument_list|()
operator|+
literal|","
operator|+
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|+
literal|"] by "
operator|+
name|grantor
argument_list|)
throw|;
block|}
name|MTablePrivilege
name|mTab
init|=
operator|new
name|MTablePrivilege
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tblObj
argument_list|,
name|privilege
argument_list|,
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|,
name|authorizer
argument_list|)
decl_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|mTab
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|PARTITION
condition|)
block|{
name|MPartition
name|partObj
init|=
name|this
operator|.
name|getMPartition
argument_list|(
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getPartValues
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|partObj
operator|!=
literal|null
condition|)
block|{
name|partName
operator|=
name|partObj
operator|.
name|getPartitionName
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|partPrivs
init|=
name|this
operator|.
name|listPrincipalMPartitionGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|partObj
operator|.
name|getPartitionName
argument_list|()
argument_list|,
name|authorizer
argument_list|)
decl_stmt|;
if|if
condition|(
name|partPrivs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MPartitionPrivilege
name|priv
range|:
name|partPrivs
control|)
block|{
if|if
condition|(
name|priv
operator|.
name|getGrantor
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|grantor
argument_list|)
condition|)
block|{
name|privSet
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
if|if
condition|(
name|privSet
operator|.
name|contains
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|privilege
operator|+
literal|" is already granted on partition ["
operator|+
name|hiveObject
operator|.
name|getDbName
argument_list|()
operator|+
literal|","
operator|+
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|+
literal|","
operator|+
name|partName
operator|+
literal|"] by "
operator|+
name|grantor
argument_list|)
throw|;
block|}
name|MPartitionPrivilege
name|mTab
init|=
operator|new
name|MPartitionPrivilege
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|partObj
argument_list|,
name|privilege
argument_list|,
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|,
name|authorizer
argument_list|)
decl_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|mTab
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|COLUMN
condition|)
block|{
name|MTable
name|tblObj
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblObj
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hiveObject
operator|.
name|getPartValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|MPartition
name|partObj
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|colPrivs
init|=
literal|null
decl_stmt|;
name|partObj
operator|=
name|this
operator|.
name|getMPartition
argument_list|(
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getPartValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|partObj
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|colPrivs
operator|=
name|this
operator|.
name|listPrincipalMPartitionColumnGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|partObj
operator|.
name|getPartitionName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
if|if
condition|(
name|colPrivs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MPartitionColumnPrivilege
name|priv
range|:
name|colPrivs
control|)
block|{
if|if
condition|(
name|priv
operator|.
name|getGrantor
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|grantor
argument_list|)
condition|)
block|{
name|privSet
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
if|if
condition|(
name|privSet
operator|.
name|contains
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|privilege
operator|+
literal|" is already granted on column "
operator|+
name|hiveObject
operator|.
name|getColumnName
argument_list|()
operator|+
literal|" ["
operator|+
name|hiveObject
operator|.
name|getDbName
argument_list|()
operator|+
literal|","
operator|+
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|+
literal|","
operator|+
name|partObj
operator|.
name|getPartitionName
argument_list|()
operator|+
literal|"] by "
operator|+
name|grantor
argument_list|)
throw|;
block|}
name|MPartitionColumnPrivilege
name|mCol
init|=
operator|new
name|MPartitionColumnPrivilege
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|partObj
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|privilege
argument_list|,
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|,
name|authorizer
argument_list|)
decl_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|mCol
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|colPrivs
init|=
literal|null
decl_stmt|;
name|colPrivs
operator|=
name|this
operator|.
name|listPrincipalMTableColumnGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
if|if
condition|(
name|colPrivs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MTableColumnPrivilege
name|priv
range|:
name|colPrivs
control|)
block|{
if|if
condition|(
name|priv
operator|.
name|getGrantor
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|grantor
argument_list|)
condition|)
block|{
name|privSet
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
if|if
condition|(
name|privSet
operator|.
name|contains
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|privilege
operator|+
literal|" is already granted on column "
operator|+
name|hiveObject
operator|.
name|getColumnName
argument_list|()
operator|+
literal|" ["
operator|+
name|hiveObject
operator|.
name|getDbName
argument_list|()
operator|+
literal|","
operator|+
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|+
literal|"] by "
operator|+
name|grantor
argument_list|)
throw|;
block|}
name|MTableColumnPrivilege
name|mCol
init|=
operator|new
name|MTableColumnPrivilege
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tblObj
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|privilege
argument_list|,
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|,
name|authorizer
argument_list|)
decl_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|mCol
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|persistentObjs
argument_list|)
condition|)
block|{
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|persistentObjs
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|committed
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revokePrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|persistentObjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privilegeList
init|=
name|privileges
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|privilegeList
argument_list|)
condition|)
block|{
name|Iterator
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privIter
init|=
name|privilegeList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|privIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HiveObjectPrivilege
name|privDef
init|=
name|privIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|hiveObject
init|=
name|privDef
operator|.
name|getHiveObject
argument_list|()
decl_stmt|;
name|String
name|privilegeStr
init|=
name|privDef
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegeStr
operator|==
literal|null
operator|||
name|privilegeStr
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|privs
init|=
name|privilegeStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|privDef
operator|.
name|getPrincipalName
argument_list|()
decl_stmt|;
name|PrincipalType
name|principalType
init|=
name|privDef
operator|.
name|getPrincipalType
argument_list|()
decl_stmt|;
name|String
name|catName
init|=
name|hiveObject
operator|.
name|isSetCatName
argument_list|()
condition|?
name|hiveObject
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|GLOBAL
condition|)
block|{
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|mSecUser
init|=
name|this
operator|.
name|listPrincipalMGlobalGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mSecUser
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
for|for
control|(
name|MGlobalPrivilege
name|userGrant
range|:
name|mSecUser
control|)
block|{
name|String
name|userGrantPrivs
init|=
name|userGrant
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilege
operator|.
name|equals
argument_list|(
name|userGrantPrivs
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|grantOption
condition|)
block|{
if|if
condition|(
name|userGrant
operator|.
name|getGrantOption
argument_list|()
condition|)
block|{
name|userGrant
operator|.
name|setGrantOption
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"User "
operator|+
name|userName
operator|+
literal|" does not have grant option with privilege "
operator|+
name|privilege
argument_list|)
throw|;
block|}
block|}
name|persistentObjs
operator|.
name|add
argument_list|(
name|userGrant
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No user grant found for privileges "
operator|+
name|privilege
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|DATABASE
condition|)
block|{
name|MDatabase
name|dbObj
init|=
name|getMDatabase
argument_list|(
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbObj
operator|!=
literal|null
condition|)
block|{
name|String
name|db
init|=
name|hiveObject
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|dbGrants
init|=
name|this
operator|.
name|listPrincipalMDBGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|db
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
for|for
control|(
name|MDBPrivilege
name|dbGrant
range|:
name|dbGrants
control|)
block|{
name|String
name|dbGrantPriv
init|=
name|dbGrant
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilege
operator|.
name|equals
argument_list|(
name|dbGrantPriv
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|grantOption
condition|)
block|{
if|if
condition|(
name|dbGrant
operator|.
name|getGrantOption
argument_list|()
condition|)
block|{
name|dbGrant
operator|.
name|setGrantOption
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"User "
operator|+
name|userName
operator|+
literal|" does not have grant option with privilege "
operator|+
name|privilege
argument_list|)
throw|;
block|}
block|}
name|persistentObjs
operator|.
name|add
argument_list|(
name|dbGrant
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No database grant found for privileges "
operator|+
name|privilege
operator|+
literal|" on database "
operator|+
name|db
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|TABLE
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|tableGrants
init|=
name|this
operator|.
name|listAllMTableGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
for|for
control|(
name|MTablePrivilege
name|tabGrant
range|:
name|tableGrants
control|)
block|{
name|String
name|tableGrantPriv
init|=
name|tabGrant
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilege
operator|.
name|equalsIgnoreCase
argument_list|(
name|tableGrantPriv
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|grantOption
condition|)
block|{
if|if
condition|(
name|tabGrant
operator|.
name|getGrantOption
argument_list|()
condition|)
block|{
name|tabGrant
operator|.
name|setGrantOption
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"User "
operator|+
name|userName
operator|+
literal|" does not have grant option with privilege "
operator|+
name|privilege
argument_list|)
throw|;
block|}
block|}
name|persistentObjs
operator|.
name|add
argument_list|(
name|tabGrant
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No grant ("
operator|+
name|privilege
operator|+
literal|") found "
operator|+
literal|" on table "
operator|+
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|+
literal|", database is "
operator|+
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|PARTITION
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Table
name|tabObj
init|=
name|this
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hiveObject
operator|.
name|getPartValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partName
operator|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tabObj
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getPartValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|partitionGrants
init|=
name|this
operator|.
name|listPrincipalMPartitionGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|partName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
for|for
control|(
name|MPartitionPrivilege
name|partGrant
range|:
name|partitionGrants
control|)
block|{
name|String
name|partPriv
init|=
name|partGrant
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|partPriv
operator|.
name|equalsIgnoreCase
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|grantOption
condition|)
block|{
if|if
condition|(
name|partGrant
operator|.
name|getGrantOption
argument_list|()
condition|)
block|{
name|partGrant
operator|.
name|setGrantOption
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"User "
operator|+
name|userName
operator|+
literal|" does not have grant option with privilege "
operator|+
name|privilege
argument_list|)
throw|;
block|}
block|}
name|persistentObjs
operator|.
name|add
argument_list|(
name|partGrant
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No grant ("
operator|+
name|privilege
operator|+
literal|") found "
operator|+
literal|" on table "
operator|+
name|tabObj
operator|.
name|getTableName
argument_list|()
operator|+
literal|", partition is "
operator|+
name|partName
operator|+
literal|", database is "
operator|+
name|tabObj
operator|.
name|getDbName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|COLUMN
condition|)
block|{
name|Table
name|tabObj
init|=
name|this
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hiveObject
operator|.
name|getPartValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partName
operator|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tabObj
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getPartValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mSecCol
init|=
name|listPrincipalMPartitionColumnGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|partName
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mSecCol
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
for|for
control|(
name|MPartitionColumnPrivilege
name|col
range|:
name|mSecCol
control|)
block|{
name|String
name|colPriv
init|=
name|col
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|colPriv
operator|.
name|equalsIgnoreCase
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|grantOption
condition|)
block|{
if|if
condition|(
name|col
operator|.
name|getGrantOption
argument_list|()
condition|)
block|{
name|col
operator|.
name|setGrantOption
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"User "
operator|+
name|userName
operator|+
literal|" does not have grant option with privilege "
operator|+
name|privilege
argument_list|)
throw|;
block|}
block|}
name|persistentObjs
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No grant ("
operator|+
name|privilege
operator|+
literal|") found "
operator|+
literal|" on table "
operator|+
name|tabObj
operator|.
name|getTableName
argument_list|()
operator|+
literal|", partition is "
operator|+
name|partName
operator|+
literal|", column name = "
operator|+
name|hiveObject
operator|.
name|getColumnName
argument_list|()
operator|+
literal|", database is "
operator|+
name|tabObj
operator|.
name|getDbName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mSecCol
init|=
name|listPrincipalMTableColumnGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mSecCol
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
for|for
control|(
name|MTableColumnPrivilege
name|col
range|:
name|mSecCol
control|)
block|{
name|String
name|colPriv
init|=
name|col
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|colPriv
operator|.
name|equalsIgnoreCase
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|grantOption
condition|)
block|{
if|if
condition|(
name|col
operator|.
name|getGrantOption
argument_list|()
condition|)
block|{
name|col
operator|.
name|setGrantOption
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"User "
operator|+
name|userName
operator|+
literal|" does not have grant option with privilege "
operator|+
name|privilege
argument_list|)
throw|;
block|}
block|}
name|persistentObjs
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No grant ("
operator|+
name|privilege
operator|+
literal|") found "
operator|+
literal|" on table "
operator|+
name|tabObj
operator|.
name|getTableName
argument_list|()
operator|+
literal|", column name = "
operator|+
name|hiveObject
operator|.
name|getColumnName
argument_list|()
operator|+
literal|", database is "
operator|+
name|tabObj
operator|.
name|getDbName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|persistentObjs
argument_list|)
condition|)
block|{
if|if
condition|(
name|grantOption
condition|)
block|{
comment|// If grant option specified, only update the privilege, don't remove it.
comment|// Grant option has already been removed from the privileges in the section above
block|}
else|else
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|persistentObjs
argument_list|)
expr_stmt|;
block|}
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|committed
return|;
block|}
class|class
name|PrivilegeWithoutCreateTimeComparator
implements|implements
name|Comparator
argument_list|<
name|HiveObjectPrivilege
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|HiveObjectPrivilege
name|o1
parameter_list|,
name|HiveObjectPrivilege
name|o2
parameter_list|)
block|{
name|int
name|createTime1
init|=
name|o1
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getCreateTime
argument_list|()
decl_stmt|;
name|int
name|createTime2
init|=
name|o2
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getCreateTime
argument_list|()
decl_stmt|;
name|o1
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|setCreateTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|o2
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|setCreateTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
decl_stmt|;
name|o1
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|setCreateTime
argument_list|(
name|createTime1
argument_list|)
expr_stmt|;
name|o2
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|setCreateTime
argument_list|(
name|createTime2
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|refreshPrivileges
parameter_list|(
name|HiveObjectRef
name|objToRefresh
parameter_list|,
name|String
name|authorizer
parameter_list|,
name|PrivilegeBag
name|grantPrivileges
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|revokePrivilegeSet
init|=
operator|new
name|TreeSet
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|(
operator|new
name|PrivilegeWithoutCreateTimeComparator
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|grantPrivilegeSet
init|=
operator|new
name|TreeSet
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|(
operator|new
name|PrivilegeWithoutCreateTimeComparator
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|grants
init|=
literal|null
decl_stmt|;
name|String
name|catName
init|=
name|objToRefresh
operator|.
name|isSetCatName
argument_list|()
condition|?
name|objToRefresh
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|objToRefresh
operator|.
name|getObjectType
argument_list|()
condition|)
block|{
case|case
name|DATABASE
case|:
name|grants
operator|=
name|this
operator|.
name|listDBGrantsAll
argument_list|(
name|catName
argument_list|,
name|objToRefresh
operator|.
name|getDbName
argument_list|()
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE
case|:
name|grants
operator|=
name|listTableGrantsAll
argument_list|(
name|catName
argument_list|,
name|objToRefresh
operator|.
name|getDbName
argument_list|()
argument_list|,
name|objToRefresh
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLUMN
case|:
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|objToRefresh
operator|.
name|getColumnName
argument_list|()
operator|==
literal|null
argument_list|,
literal|"columnName must be null"
argument_list|)
expr_stmt|;
name|grants
operator|=
name|convertTableCols
argument_list|(
name|listTableAllColumnGrants
argument_list|(
name|catName
argument_list|,
name|objToRefresh
operator|.
name|getDbName
argument_list|()
argument_list|,
name|objToRefresh
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|authorizer
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unexpected object type "
operator|+
name|objToRefresh
operator|.
name|getObjectType
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|grants
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HiveObjectPrivilege
name|grant
range|:
name|grants
control|)
block|{
name|revokePrivilegeSet
operator|.
name|add
argument_list|(
name|grant
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Optimize revoke/grant list, remove the overlapping
if|if
condition|(
name|grantPrivileges
operator|.
name|getPrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HiveObjectPrivilege
name|grantPrivilege
range|:
name|grantPrivileges
operator|.
name|getPrivileges
argument_list|()
control|)
block|{
if|if
condition|(
name|revokePrivilegeSet
operator|.
name|contains
argument_list|(
name|grantPrivilege
argument_list|)
condition|)
block|{
name|revokePrivilegeSet
operator|.
name|remove
argument_list|(
name|grantPrivilege
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|grantPrivilegeSet
operator|.
name|add
argument_list|(
name|grantPrivilege
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|revokePrivilegeSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PrivilegeBag
name|remainingRevokePrivileges
init|=
operator|new
name|PrivilegeBag
argument_list|()
decl_stmt|;
for|for
control|(
name|HiveObjectPrivilege
name|revokePrivilege
range|:
name|revokePrivilegeSet
control|)
block|{
name|remainingRevokePrivileges
operator|.
name|addToPrivileges
argument_list|(
name|revokePrivilege
argument_list|)
expr_stmt|;
block|}
name|revokePrivileges
argument_list|(
name|remainingRevokePrivileges
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|grantPrivilegeSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PrivilegeBag
name|remainingGrantPrivileges
init|=
operator|new
name|PrivilegeBag
argument_list|()
decl_stmt|;
for|for
control|(
name|HiveObjectPrivilege
name|grantPrivilege
range|:
name|grantPrivilegeSet
control|)
block|{
name|remainingGrantPrivileges
operator|.
name|addToPrivileges
argument_list|(
name|grantPrivilege
argument_list|)
expr_stmt|;
block|}
name|grantPrivileges
argument_list|(
name|remainingGrantPrivileges
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|committed
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|listMRoleMembers
parameter_list|(
name|String
name|roleName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|mRoleMemeberList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listRoleMembers"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MRoleMap
operator|.
name|class
argument_list|,
literal|"role.roleName == t1"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|mRoles
init|=
operator|(
name|List
argument_list|<
name|MRoleMap
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mRoles
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|mRoleMemeberList
operator|.
name|addAll
argument_list|(
name|mRoles
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listRoleMembers"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mRoleMemeberList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|listRoleMembers
parameter_list|(
name|String
name|roleName
parameter_list|)
block|{
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|roleMaps
init|=
name|listMRoleMembers
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|rolePrinGrantList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|roleMaps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MRoleMap
name|roleMap
range|:
name|roleMaps
control|)
block|{
name|RolePrincipalGrant
name|rolePrinGrant
init|=
operator|new
name|RolePrincipalGrant
argument_list|(
name|roleMap
operator|.
name|getRole
argument_list|()
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|roleMap
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|roleMap
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
argument_list|,
name|roleMap
operator|.
name|getGrantOption
argument_list|()
argument_list|,
name|roleMap
operator|.
name|getAddTime
argument_list|()
argument_list|,
name|roleMap
operator|.
name|getGrantor
argument_list|()
argument_list|,
comment|// no grantor type for public role, hence the null check
name|roleMap
operator|.
name|getGrantorType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|roleMap
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|rolePrinGrantList
operator|.
name|add
argument_list|(
name|rolePrinGrant
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rolePrinGrantList
return|;
block|}
specifier|private
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|listPrincipalMGlobalGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|listPrincipalMGlobalGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|listPrincipalMGlobalGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|authorizer
parameter_list|)
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|userNameDbPriv
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|mPrivs
init|=
literal|null
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MGlobalPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2 "
operator|+
literal|"&& authorizer == t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MGlobalPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2 "
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|mPrivs
operator|!=
literal|null
condition|)
block|{
name|userNameDbPriv
operator|.
name|addAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|userNameDbPriv
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalGlobalGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|mUsers
init|=
name|listPrincipalMGlobalGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
decl_stmt|;
if|if
condition|(
name|mUsers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mUsers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MGlobalPrivilege
name|sUsr
init|=
name|mUsers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HiveObjectPrivilege
name|secUser
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|sUsr
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|sUsr
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|sUsr
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|sUsr
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|sUsr
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|sUsr
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|,
name|sUsr
operator|.
name|getAuthorizer
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|secUser
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listGlobalGrantsAll
parameter_list|()
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MGlobalPrivilege
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|userNameDbPriv
init|=
operator|(
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|userNameDbPriv
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|convertGlobal
argument_list|(
name|userNameDbPriv
argument_list|)
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|convertGlobal
parameter_list|(
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|privs
parameter_list|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MGlobalPrivilege
name|priv
range|:
name|privs
control|)
block|{
name|String
name|pname
init|=
name|priv
operator|.
name|getPrincipalName
argument_list|()
decl_stmt|;
name|String
name|authorizer
init|=
name|priv
operator|.
name|getAuthorizer
argument_list|()
decl_stmt|;
name|PrincipalType
name|ptype
init|=
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|priv
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PrivilegeGrantInfo
name|grantor
init|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|priv
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|priv
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|priv
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|priv
operator|.
name|getGrantOption
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|pname
argument_list|,
name|ptype
argument_list|,
name|grantor
argument_list|,
name|authorizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|listPrincipalMDBGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
return|return
name|listPrincipalMDBGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|listPrincipalMDBGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|authorizer
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|mSecurityDBList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalDBGrants"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|mPrivs
decl_stmt|;
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDBPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& database.name == t3&& "
operator|+
literal|"database.catalogName == t4&& authorizer == t5"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, java.lang.String t4, "
operator|+
literal|"java.lang.String t5"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDBPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& database.name == t3&& database.catalogName == t4"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, java.lang.String t4"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|mSecurityDBList
operator|.
name|addAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalDBGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mSecurityDBList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalDBGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|mDbs
init|=
name|listPrincipalMDBGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mDbs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mDbs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MDBPrivilege
name|sDB
init|=
name|mDbs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|objectRef
operator|.
name|setCatName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|HiveObjectPrivilege
name|secObj
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|sDB
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|sDB
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|sDB
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|sDB
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|sDB
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|sDB
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|,
name|sDB
operator|.
name|getAuthorizer
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|secObj
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalDBGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|convertDB
argument_list|(
name|listPrincipalAllDBGrant
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|queryWrapper
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listDBGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
return|return
name|listDBGrantsAll
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listDBGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|authorizer
parameter_list|)
block|{
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|convertDB
argument_list|(
name|listDatabaseGrants
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|authorizer
argument_list|,
name|queryWrapper
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|convertDB
parameter_list|(
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|privs
parameter_list|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MDBPrivilege
name|priv
range|:
name|privs
control|)
block|{
name|String
name|pname
init|=
name|priv
operator|.
name|getPrincipalName
argument_list|()
decl_stmt|;
name|String
name|authorizer
init|=
name|priv
operator|.
name|getAuthorizer
argument_list|()
decl_stmt|;
name|PrincipalType
name|ptype
init|=
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|priv
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|database
init|=
name|priv
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|database
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|objectRef
operator|.
name|setCatName
argument_list|(
name|priv
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegeGrantInfo
name|grantor
init|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|priv
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|priv
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|priv
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|priv
operator|.
name|getGrantOption
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|pname
argument_list|,
name|ptype
argument_list|,
name|grantor
argument_list|,
name|authorizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|listPrincipalAllDBGrant
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|mSecurityDBList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalAllDBGrant"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
operator|&&
name|principalType
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDBPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityDBList
operator|=
operator|(
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDBPrivilege
operator|.
name|class
argument_list|)
expr_stmt|;
name|mSecurityDBList
operator|=
operator|(
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityDBList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalAllDBGrant"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityDBList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|listAllTableGrants
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|mSecurityTabList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listAllTableGrants"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|String
name|queryStr
init|=
literal|"table.tableName == t1&& table.database.name == t2"
operator|+
literal|"&& table.database.catalogName == t3"
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTablePrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|mPrivs
init|=
operator|(
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listAllTableGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|mSecurityTabList
operator|.
name|addAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listAllTableGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mSecurityTabList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|listTableAllPartitionGrants
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mSecurityTabPartList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listTableAllPartitionGrants"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|String
name|queryStr
init|=
literal|"partition.table.tableName == t1&& partition.table.database.name == t2 "
operator|+
literal|"&& partition.table.database.catalogName == t3"
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionPrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mPrivs
init|=
operator|(
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|mSecurityTabPartList
operator|.
name|addAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listTableAllPartitionGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mSecurityTabPartList
return|;
block|}
specifier|private
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|listTableAllColumnGrants
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
name|listTableAllColumnGrants
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|listTableAllColumnGrants
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|authorizer
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mTblColPrivilegeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listTableAllColumnGrants"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mPrivs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
name|String
name|queryStr
init|=
literal|"table.tableName == t1&& table.database.name == t2&&"
operator|+
literal|"table.database.catalogName == t3&& authorizer == t4"
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnPrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, "
operator|+
literal|"java.lang.String t4"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|queryStr
init|=
literal|"table.tableName == t1&& table.database.name == t2&&"
operator|+
literal|"table.database.catalogName == t3"
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnPrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|mTblColPrivilegeList
operator|.
name|addAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listTableAllColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mTblColPrivilegeList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|listTableAllPartitionColumnGrants
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mSecurityColList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listTableAllPartitionColumnGrants"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|String
name|queryStr
init|=
literal|"partition.table.tableName == t1&& partition.table.database.name == t2 "
operator|+
literal|"&& partition.table.database.catalogName == t3"
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mPrivs
init|=
operator|(
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|mSecurityColList
operator|.
name|addAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listTableAllPartitionColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mSecurityColList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|listPartitionAllColumnGrants
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mSecurityColList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPartitionAllColumnGrants"
argument_list|)
expr_stmt|;
name|mSecurityColList
operator|=
name|queryByPartitionNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|,
literal|"partition.table.tableName"
argument_list|,
literal|"partition.table.database.name"
argument_list|,
literal|"partition.partitionName"
argument_list|,
literal|"partition.table.database.catalogName"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPartitionAllColumnGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityColList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPartitionAllColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityColList
return|;
block|}
specifier|private
name|void
name|dropPartitionAllColumnGrantsNoTxn
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
block|{
name|ObjectPair
argument_list|<
name|Query
argument_list|,
name|Object
index|[]
argument_list|>
name|queryWithParams
init|=
name|makeQueryByPartitionNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|,
literal|"partition.table.tableName"
argument_list|,
literal|"partition.table.database.name"
argument_list|,
literal|"partition.partitionName"
argument_list|,
literal|"partition.table.database.catalogName"
argument_list|)
decl_stmt|;
name|queryWithParams
operator|.
name|getFirst
argument_list|()
operator|.
name|deletePersistentAll
argument_list|(
name|queryWithParams
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|listDatabaseGrants
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|authorizer
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
block|{
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listDatabaseGrants"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|mSecurityDBList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
name|Query
name|query
init|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDBPrivilege
operator|.
name|class
argument_list|,
literal|"database.name == t1&& database.catalogName == t2&& authorizer == t3"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|mSecurityDBList
operator|=
operator|(
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|dbName
argument_list|,
name|catName
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Query
name|query
init|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDBPrivilege
operator|.
name|class
argument_list|,
literal|"database.name == t1&& database.catalogName == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityDBList
operator|=
operator|(
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|dbName
argument_list|,
name|catName
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityDBList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listDatabaseGrants"
argument_list|)
expr_stmt|;
return|return
name|mSecurityDBList
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|listPartitionGrants
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
block|{
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mSecurityTabPartList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPartitionGrants"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
name|queryByPartitionNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|MPartitionPrivilege
operator|.
name|class
argument_list|,
literal|"partition.table.tableName"
argument_list|,
literal|"partition.table.database.name"
argument_list|,
literal|"partition.partitionName"
argument_list|,
literal|"partition.table.database.catalogName"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPartitionGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPartitionGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityTabPartList
return|;
block|}
specifier|private
name|void
name|dropPartitionGrantsNoTxn
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
block|{
name|ObjectPair
argument_list|<
name|Query
argument_list|,
name|Object
index|[]
argument_list|>
name|queryWithParams
init|=
name|makeQueryByPartitionNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|MPartitionPrivilege
operator|.
name|class
argument_list|,
literal|"partition.table.tableName"
argument_list|,
literal|"partition.table.database.name"
argument_list|,
literal|"partition.partitionName"
argument_list|,
literal|"partition.table.database.catalogName"
argument_list|)
decl_stmt|;
name|queryWithParams
operator|.
name|getFirst
argument_list|()
operator|.
name|deletePersistentAll
argument_list|(
name|queryWithParams
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|queryByPartitionNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|tbCol
parameter_list|,
name|String
name|dbCol
parameter_list|,
name|String
name|partCol
parameter_list|,
name|String
name|catCol
parameter_list|)
block|{
name|ObjectPair
argument_list|<
name|Query
argument_list|,
name|Object
index|[]
argument_list|>
name|queryAndParams
init|=
name|makeQueryByPartitionNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|clazz
argument_list|,
name|tbCol
argument_list|,
name|dbCol
argument_list|,
name|partCol
argument_list|,
name|catCol
argument_list|)
decl_stmt|;
return|return
operator|(
name|List
argument_list|<
name|T
argument_list|>
operator|)
name|queryAndParams
operator|.
name|getFirst
argument_list|()
operator|.
name|executeWithArray
argument_list|(
name|queryAndParams
operator|.
name|getSecond
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|ObjectPair
argument_list|<
name|Query
argument_list|,
name|Object
index|[]
argument_list|>
name|makeQueryByPartitionNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|tbCol
parameter_list|,
name|String
name|dbCol
parameter_list|,
name|String
name|partCol
parameter_list|,
name|String
name|catCol
parameter_list|)
block|{
name|String
name|queryStr
init|=
name|tbCol
operator|+
literal|" == t1&& "
operator|+
name|dbCol
operator|+
literal|" == t2&& "
operator|+
name|catCol
operator|+
literal|" == t3"
decl_stmt|;
name|String
name|paramStr
init|=
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
decl_stmt|;
name|Object
index|[]
name|params
init|=
operator|new
name|Object
index|[
literal|3
operator|+
name|partNames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|params
index|[
literal|0
index|]
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|params
index|[
literal|1
index|]
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|params
index|[
literal|2
index|]
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|params
index|[
name|index
operator|+
literal|3
index|]
operator|=
name|partName
expr_stmt|;
name|queryStr
operator|+=
operator|(
operator|(
name|index
operator|==
literal|0
operator|)
condition|?
literal|"&& ("
else|:
literal|" || "
operator|)
operator|+
name|partCol
operator|+
literal|" == p"
operator|+
name|index
expr_stmt|;
name|paramStr
operator|+=
literal|", java.lang.String p"
operator|+
name|index
expr_stmt|;
operator|++
name|index
expr_stmt|;
block|}
name|queryStr
operator|+=
literal|")"
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|clazz
argument_list|,
name|queryStr
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|paramStr
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectPair
argument_list|<>
argument_list|(
name|query
argument_list|,
name|params
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|listAllMTableGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
name|listAllMTableGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|listAllMTableGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|authorizer
parameter_list|)
block|{
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|mSecurityTabPartList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listAllTableGrants"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|mPrivs
decl_stmt|;
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTablePrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& table.tableName == t3&&"
operator|+
literal|"table.database.name == t4&& table.database.catalogName == t5&& authorizer == t6"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3,"
operator|+
literal|"java.lang.String t4, java.lang.String t5, java.lang.String t6"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTablePrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& table.tableName == t3&&"
operator|+
literal|"table.database.name == t4&& table.database.catalogName == t5"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3,"
operator|+
literal|"java.lang.String t4, java.lang.String t5"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|mSecurityTabPartList
operator|.
name|addAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listAllTableGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mSecurityTabPartList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listAllTableGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|mTbls
init|=
name|listAllMTableGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mTbls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mTbls
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MTablePrivilege
name|sTbl
init|=
name|mTbls
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|objectRef
operator|.
name|setCatName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|HiveObjectPrivilege
name|secObj
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|sTbl
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|sTbl
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|sTbl
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|sTbl
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|sTbl
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|sTbl
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|,
name|sTbl
operator|.
name|getAuthorizer
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|secObj
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|listPrincipalMPartitionGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
return|return
name|listPrincipalMPartitionGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|listPrincipalMPartitionGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|authorizer
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mSecurityTabPartList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalPartitionGrants"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mPrivs
decl_stmt|;
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& partition.table.tableName == t3 "
operator|+
literal|"&& partition.table.database.name == t4&& partition.table.database.catalogName == t5"
operator|+
literal|"&& partition.partitionName == t6&& authorizer == t7"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, java.lang.String t4, "
operator|+
literal|"java.lang.String t5, java.lang.String t6, java.lang.String t7"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|partName
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& partition.table.tableName == t3 "
operator|+
literal|"&& partition.table.database.name == t4&& partition.table.database.catalogName == t5"
operator|+
literal|"&& partition.partitionName == t6"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, java.lang.String t4, "
operator|+
literal|"java.lang.String t5, java.lang.String t6"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|partName
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|mSecurityTabPartList
operator|.
name|addAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalPartitionGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mSecurityTabPartList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mParts
init|=
name|listPrincipalMPartitionGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mParts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MPartitionPrivilege
name|sPart
init|=
name|mParts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|PARTITION
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|objectRef
operator|.
name|setCatName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|HiveObjectPrivilege
name|secObj
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|sPart
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|sPart
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|sPart
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|sPart
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|sPart
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|sPart
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|,
name|sPart
operator|.
name|getAuthorizer
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|secObj
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|listPrincipalMTableColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|listPrincipalMTableColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|listPrincipalMTableColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|authorizer
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|columnName
operator|=
name|normalizeIdentifier
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mSecurityColList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalTableColumnGrants"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mPrivs
decl_stmt|;
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
name|String
name|queryStr
init|=
literal|"principalName == t1&& principalType == t2&& "
operator|+
literal|"table.tableName == t3&& table.database.name == t4&&  "
operator|+
literal|"table.database.catalogName == t5&& columnName == t6&& authorizer == t7"
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnPrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, "
operator|+
literal|"java.lang.String t4, java.lang.String t5, java.lang.String t6, java.lang.String t7"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|columnName
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|queryStr
init|=
literal|"principalName == t1&& principalType == t2&& "
operator|+
literal|"table.tableName == t3&& table.database.name == t4&&  "
operator|+
literal|"table.database.catalogName == t5&& columnName == t6 "
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnPrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, "
operator|+
literal|"java.lang.String t4, java.lang.String t5, java.lang.String t6"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|columnName
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|mSecurityColList
operator|.
name|addAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalTableColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mSecurityColList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mTableCols
init|=
name|listPrincipalMTableColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mTableCols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mTableCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MTableColumnPrivilege
name|sCol
init|=
name|mTableCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|sCol
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
name|objectRef
operator|.
name|setCatName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|HiveObjectPrivilege
name|secObj
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|sCol
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|sCol
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|sCol
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|sCol
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|sCol
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|sCol
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|,
name|sCol
operator|.
name|getAuthorizer
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|secObj
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|listPrincipalMPartitionColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|listPrincipalMPartitionColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|listPrincipalMPartitionColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|authorizer
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|columnName
operator|=
name|normalizeIdentifier
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mSecurityColList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalPartitionColumnGrants"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mPrivs
decl_stmt|;
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& partition.table.tableName == t3 "
operator|+
literal|"&& partition.table.database.name == t4&& partition.table.database.catalogName == t5"
operator|+
literal|"&& partition.partitionName == t6&& columnName == t7&& authorizer == t8"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, "
operator|+
literal|"java.lang.String t4, java.lang.String t5, java.lang.String t6, java.lang.String t7, "
operator|+
literal|"java.lang.String t8"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& partition.table.tableName == t3 "
operator|+
literal|"&& partition.table.database.name == t4&& partition.table.database.catalogName == t5"
operator|+
literal|"&& partition.partitionName == t6&& columnName == t7"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, "
operator|+
literal|"java.lang.String t4, java.lang.String t5, java.lang.String t6, java.lang.String t7"
argument_list|)
expr_stmt|;
name|mPrivs
operator|=
operator|(
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|mSecurityColList
operator|.
name|addAll
argument_list|(
name|mPrivs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalPartitionColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mSecurityColList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mPartitionCols
init|=
name|listPrincipalMPartitionColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mPartitionCols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mPartitionCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MPartitionColumnPrivilege
name|sCol
init|=
name|mPartitionCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
name|sCol
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
name|objectRef
operator|.
name|setCatName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|HiveObjectPrivilege
name|secObj
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|sCol
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|sCol
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|sCol
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|sCol
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|sCol
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|sCol
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|,
name|sCol
operator|.
name|getAuthorizer
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|secObj
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalPartitionColumnGrantsAll"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mSecurityTabPartList
decl_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
operator|&&
name|principalType
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalPartitionColumnGrantsAll"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|convertPartCols
argument_list|(
name|mSecurityTabPartList
argument_list|)
decl_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalPartitionColumnGrantsAll"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPartitionColumnGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPartitionColumnGrantsAll"
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|,
literal|"partition.table.tableName == t3&& partition.table.database.name == t4&& "
operator|+
literal|"partition.table.database.name == t5&& "
operator|+
literal|"partition.partitionName == t6&& columnName == t7"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t3, java.lang.String t4, java.lang.String t5,"
operator|+
literal|"java.lang.String t6, java.lang.String t7"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mSecurityTabPartList
init|=
operator|(
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPartitionColumnGrantsAll"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|convertPartCols
argument_list|(
name|mSecurityTabPartList
argument_list|)
decl_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPartitionColumnGrantsAll"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|convertPartCols
parameter_list|(
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|privs
parameter_list|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MPartitionColumnPrivilege
name|priv
range|:
name|privs
control|)
block|{
name|String
name|pname
init|=
name|priv
operator|.
name|getPrincipalName
argument_list|()
decl_stmt|;
name|String
name|authorizer
init|=
name|priv
operator|.
name|getAuthorizer
argument_list|()
decl_stmt|;
name|PrincipalType
name|ptype
init|=
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|priv
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
decl_stmt|;
name|MPartition
name|mpartition
init|=
name|priv
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|MTable
name|mtable
init|=
name|mpartition
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|MDatabase
name|mdatabase
init|=
name|mtable
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|mdatabase
operator|.
name|getName
argument_list|()
argument_list|,
name|mtable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|mpartition
operator|.
name|getValues
argument_list|()
argument_list|,
name|priv
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
name|objectRef
operator|.
name|setCatName
argument_list|(
name|mdatabase
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegeGrantInfo
name|grantor
init|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|priv
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|priv
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|priv
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|priv
operator|.
name|getGrantOption
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|pname
argument_list|,
name|ptype
argument_list|,
name|grantor
argument_list|,
name|authorizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|listPrincipalAllTableGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|mSecurityTabPartList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalAllTableGrants"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTablePrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalAllTableGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityTabPartList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalAllTableGrants"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|mSecurityTabPartList
decl_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
operator|&&
name|principalType
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTablePrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTablePrivilege
operator|.
name|class
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalAllTableGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|convertTable
argument_list|(
name|mSecurityTabPartList
argument_list|)
decl_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalAllTableGrants"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
name|listTableGrantsAll
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|authorizer
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listTableGrantsAll"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|mSecurityTabPartList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTablePrivilege
operator|.
name|class
argument_list|,
literal|"table.tableName == t1&& table.database.name == t2&& table.database.catalogName == t3"
operator|+
literal|"&& authorizer == t4"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, "
operator|+
literal|"java.lang.String t4"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTablePrivilege
operator|.
name|class
argument_list|,
literal|"table.tableName == t1&& table.database.name == t2&& table.database.catalogName == t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listTableGrantsAll"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|convertTable
argument_list|(
name|mSecurityTabPartList
argument_list|)
decl_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalAllTableGrants"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|convertTable
parameter_list|(
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|privs
parameter_list|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MTablePrivilege
name|priv
range|:
name|privs
control|)
block|{
name|String
name|pname
init|=
name|priv
operator|.
name|getPrincipalName
argument_list|()
decl_stmt|;
name|String
name|authorizer
init|=
name|priv
operator|.
name|getAuthorizer
argument_list|()
decl_stmt|;
name|PrincipalType
name|ptype
init|=
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|priv
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|table
init|=
name|priv
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|database
init|=
name|priv
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|database
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|objectRef
operator|.
name|setCatName
argument_list|(
name|priv
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegeGrantInfo
name|grantor
init|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|priv
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|priv
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|priv
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|priv
operator|.
name|getGrantOption
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|pname
argument_list|,
name|ptype
argument_list|,
name|grantor
argument_list|,
name|authorizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|listPrincipalAllPartitionGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mSecurityTabPartList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalAllPartitionGrants"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalAllPartitionGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityTabPartList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalPartitionGrantsAll"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mSecurityTabPartList
decl_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
operator|&&
name|principalType
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionPrivilege
operator|.
name|class
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalPartitionGrantsAll"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|convertPartition
argument_list|(
name|mSecurityTabPartList
argument_list|)
decl_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalPartitionGrantsAll"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPartitionGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalPartitionGrantsAll"
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionPrivilege
operator|.
name|class
argument_list|,
literal|"partition.table.tableName == t3&& partition.table.database.name == t4&& "
operator|+
literal|"partition.table.database.catalogName == t5&& partition.partitionName == t6"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t3, java.lang.String t4, java.lang.String t5, "
operator|+
literal|"java.lang.String t6"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mSecurityTabPartList
init|=
operator|(
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|partitionName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalPartitionGrantsAll"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|convertPartition
argument_list|(
name|mSecurityTabPartList
argument_list|)
decl_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalPartitionGrantsAll"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|convertPartition
parameter_list|(
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|privs
parameter_list|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MPartitionPrivilege
name|priv
range|:
name|privs
control|)
block|{
name|String
name|pname
init|=
name|priv
operator|.
name|getPrincipalName
argument_list|()
decl_stmt|;
name|String
name|authorizer
init|=
name|priv
operator|.
name|getAuthorizer
argument_list|()
decl_stmt|;
name|PrincipalType
name|ptype
init|=
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|priv
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
decl_stmt|;
name|MPartition
name|mpartition
init|=
name|priv
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|MTable
name|mtable
init|=
name|mpartition
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|MDatabase
name|mdatabase
init|=
name|mtable
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|PARTITION
argument_list|,
name|mdatabase
operator|.
name|getName
argument_list|()
argument_list|,
name|mtable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|mpartition
operator|.
name|getValues
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|objectRef
operator|.
name|setCatName
argument_list|(
name|mdatabase
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegeGrantInfo
name|grantor
init|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|priv
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|priv
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|priv
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|priv
operator|.
name|getGrantOption
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|pname
argument_list|,
name|ptype
argument_list|,
name|grantor
argument_list|,
name|authorizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|listPrincipalAllTableColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mSecurityColumnList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalAllTableColumnGrants"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityColumnList
operator|=
operator|(
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityColumnList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalAllTableColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityColumnList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableColumnGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalTableColumnGrantsAll"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mSecurityTabPartList
decl_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
operator|&&
name|principalType
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnPrivilege
operator|.
name|class
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalTableColumnGrantsAll"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|convertTableCols
argument_list|(
name|mSecurityTabPartList
argument_list|)
decl_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalTableColumnGrantsAll"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableColumnGrantsAll
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalTableColumnGrantsAll"
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnPrivilege
operator|.
name|class
argument_list|,
literal|"table.tableName == t3&& table.database.name == t4&& "
operator|+
literal|"table.database.catalogName == t5&& columnName == t6"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t3, java.lang.String t4, java.lang.String t5, "
operator|+
literal|"java.lang.String t6"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mSecurityTabPartList
init|=
operator|(
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalTableColumnGrantsAll"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|convertTableCols
argument_list|(
name|mSecurityTabPartList
argument_list|)
decl_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalTableColumnGrantsAll"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|convertTableCols
parameter_list|(
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|privs
parameter_list|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MTableColumnPrivilege
name|priv
range|:
name|privs
control|)
block|{
name|String
name|pname
init|=
name|priv
operator|.
name|getPrincipalName
argument_list|()
decl_stmt|;
name|String
name|authorizer
init|=
name|priv
operator|.
name|getAuthorizer
argument_list|()
decl_stmt|;
name|PrincipalType
name|ptype
init|=
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|priv
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
decl_stmt|;
name|MTable
name|mtable
init|=
name|priv
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|MDatabase
name|mdatabase
init|=
name|mtable
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|mdatabase
operator|.
name|getName
argument_list|()
argument_list|,
name|mtable
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|priv
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
name|objectRef
operator|.
name|setCatName
argument_list|(
name|mdatabase
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegeGrantInfo
name|grantor
init|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|priv
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|priv
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|priv
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|priv
operator|.
name|getGrantOption
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|pname
argument_list|,
name|ptype
argument_list|,
name|grantor
argument_list|,
name|authorizer
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|listPrincipalAllPartitionColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mSecurityColumnList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalAllTableColumnGrants"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityColumnList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityColumnList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalAllTableColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityColumnList
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|UnknownTableException
throws|,
name|MetaException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin Executing isPartitionMarkedForEvent"
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionEvent
operator|.
name|class
argument_list|,
literal|"dbName == t1&& tblName == t2&& partName == t3&& eventType == t4&& catalogName == t5"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, int t4,"
operator|+
literal|"java.lang.String t5"
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
comment|// Make sure dbName and tblName are valid.
if|if
condition|(
literal|null
operator|==
name|tbl
condition|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
literal|"Table: "
operator|+
name|tblName
operator|+
literal|" is not found."
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|MPartitionEvent
argument_list|>
name|partEvents
init|=
operator|(
name|Collection
argument_list|<
name|MPartitionEvent
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|getPartitionStr
argument_list|(
name|tbl
argument_list|,
name|partName
argument_list|)
argument_list|,
name|evtType
operator|.
name|getValue
argument_list|()
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|partEvents
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing isPartitionMarkedForEvent"
argument_list|)
expr_stmt|;
return|return
operator|(
name|partEvents
operator|!=
literal|null
operator|&&
operator|!
name|partEvents
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Table
name|markPartitionForEvent
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing markPartitionForEvent"
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// Make sure dbName and tblName are valid.
if|if
condition|(
literal|null
operator|==
name|tbl
condition|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
literal|"Table: "
operator|+
name|tblName
operator|+
literal|" is not found."
argument_list|)
throw|;
block|}
name|pm
operator|.
name|makePersistent
argument_list|(
operator|new
name|MPartitionEvent
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|getPartitionStr
argument_list|(
name|tbl
argument_list|,
name|partName
argument_list|)
argument_list|,
name|evtType
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing markPartitionForEvent"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tbl
return|;
block|}
specifier|private
name|String
name|getPartitionStr
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|)
throws|throws
name|InvalidPartitionException
block|{
if|if
condition|(
name|tbl
operator|.
name|getPartitionKeysSize
argument_list|()
operator|!=
name|partName
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidPartitionException
argument_list|(
literal|"Number of partition columns in table: "
operator|+
name|tbl
operator|.
name|getPartitionKeysSize
argument_list|()
operator|+
literal|" doesn't match with number of supplied partition values: "
operator|+
name|partName
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|storedVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tbl
operator|.
name|getPartitionKeysSize
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|partKey
range|:
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|String
name|partVal
init|=
name|partName
operator|.
name|get
argument_list|(
name|partKey
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|partVal
condition|)
block|{
throw|throw
operator|new
name|InvalidPartitionException
argument_list|(
literal|"No value found for partition column: "
operator|+
name|partKey
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|storedVals
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
block|}
return|return
name|join
argument_list|(
name|storedVals
argument_list|,
literal|','
argument_list|)
return|;
block|}
comment|/** The following API    *    *  - executeJDOQLSelect    *    * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.    *    */
specifier|public
name|Collection
argument_list|<
name|?
argument_list|>
name|executeJDOQLSelect
parameter_list|(
name|String
name|queryStr
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|queryStr
argument_list|)
decl_stmt|;
name|result
operator|=
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
operator|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** The following API   *   *  - executeJDOQLUpdate   *   * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.   *   */
specifier|public
name|long
name|executeJDOQLUpdate
parameter_list|(
name|String
name|queryStr
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|long
name|numUpdated
init|=
literal|0
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
name|numUpdated
operator|=
operator|(
name|Long
operator|)
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
return|return
name|numUpdated
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** The following API   *   *  - listFSRoots   *   * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.   *   */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|listFSRoots
parameter_list|()
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fsRoots
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDatabase
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MDatabase
argument_list|>
name|mDBs
init|=
operator|(
name|List
argument_list|<
name|MDatabase
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mDBs
argument_list|)
expr_stmt|;
for|for
control|(
name|MDatabase
name|mDB
range|:
name|mDBs
control|)
block|{
name|fsRoots
operator|.
name|add
argument_list|(
name|mDB
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
return|return
name|fsRoots
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|shouldUpdateURI
parameter_list|(
name|URI
name|onDiskUri
parameter_list|,
name|URI
name|inputUri
parameter_list|)
block|{
name|String
name|onDiskHost
init|=
name|onDiskUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|inputHost
init|=
name|inputUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|onDiskPort
init|=
name|onDiskUri
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|int
name|inputPort
init|=
name|inputUri
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|String
name|onDiskScheme
init|=
name|onDiskUri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|inputScheme
init|=
name|inputUri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
comment|//compare ports
if|if
condition|(
name|inputPort
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|inputPort
operator|!=
name|onDiskPort
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|//compare schemes
if|if
condition|(
name|inputScheme
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|onDiskScheme
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|inputScheme
operator|.
name|equalsIgnoreCase
argument_list|(
name|onDiskScheme
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|//compare hosts
if|if
condition|(
name|onDiskHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|inputHost
operator|.
name|equalsIgnoreCase
argument_list|(
name|onDiskHost
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
class|class
name|UpdateMDatabaseURIRetVal
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
decl_stmt|;
name|UpdateMDatabaseURIRetVal
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBadRecords
parameter_list|()
block|{
return|return
name|badRecords
return|;
block|}
specifier|public
name|void
name|setBadRecords
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUpdateLocations
parameter_list|()
block|{
return|return
name|updateLocations
return|;
block|}
specifier|public
name|void
name|setUpdateLocations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
block|}
comment|/** The following APIs   *   *  - updateMDatabaseURI   *   * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.   *   */
specifier|public
name|UpdateMDatabaseURIRetVal
name|updateMDatabaseURI
parameter_list|(
name|URI
name|oldLoc
parameter_list|,
name|URI
name|newLoc
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|UpdateMDatabaseURIRetVal
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDatabase
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MDatabase
argument_list|>
name|mDBs
init|=
operator|(
name|List
argument_list|<
name|MDatabase
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mDBs
argument_list|)
expr_stmt|;
for|for
control|(
name|MDatabase
name|mDB
range|:
name|mDBs
control|)
block|{
name|URI
name|locationURI
init|=
literal|null
decl_stmt|;
name|String
name|location
init|=
name|mDB
operator|.
name|getLocationUri
argument_list|()
decl_stmt|;
try|try
block|{
name|locationURI
operator|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
operator|.
name|toUri
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locationURI
operator|==
literal|null
condition|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shouldUpdateURI
argument_list|(
name|locationURI
argument_list|,
name|oldLoc
argument_list|)
condition|)
block|{
name|String
name|dbLoc
init|=
name|mDB
operator|.
name|getLocationUri
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|oldLoc
operator|.
name|toString
argument_list|()
argument_list|,
name|newLoc
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|updateLocations
operator|.
name|put
argument_list|(
name|locationURI
operator|.
name|toString
argument_list|()
argument_list|,
name|dbLoc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|mDB
operator|.
name|setLocationUri
argument_list|(
name|dbLoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
name|retVal
operator|=
operator|new
name|UpdateMDatabaseURIRetVal
argument_list|(
name|badRecords
argument_list|,
name|updateLocations
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|UpdatePropURIRetVal
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
decl_stmt|;
name|UpdatePropURIRetVal
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBadRecords
parameter_list|()
block|{
return|return
name|badRecords
return|;
block|}
specifier|public
name|void
name|setBadRecords
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUpdateLocations
parameter_list|()
block|{
return|return
name|updateLocations
return|;
block|}
specifier|public
name|void
name|setUpdateLocations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updatePropURIHelper
parameter_list|(
name|URI
name|oldLoc
parameter_list|,
name|URI
name|newLoc
parameter_list|,
name|String
name|tblPropKey
parameter_list|,
name|boolean
name|isDryRun
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|URI
name|tablePropLocationURI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|containsKey
argument_list|(
name|tblPropKey
argument_list|)
condition|)
block|{
name|String
name|tablePropLocation
init|=
name|parameters
operator|.
name|get
argument_list|(
name|tblPropKey
argument_list|)
decl_stmt|;
try|try
block|{
name|tablePropLocationURI
operator|=
operator|new
name|Path
argument_list|(
name|tablePropLocation
argument_list|)
operator|.
name|toUri
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|tablePropLocation
argument_list|)
expr_stmt|;
block|}
comment|// if tablePropKey that was passed in lead to a valid URI resolution, update it if
comment|//parts of it match the old-NN-loc, else add to badRecords
if|if
condition|(
name|tablePropLocationURI
operator|==
literal|null
condition|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|tablePropLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shouldUpdateURI
argument_list|(
name|tablePropLocationURI
argument_list|,
name|oldLoc
argument_list|)
condition|)
block|{
name|String
name|tblPropLoc
init|=
name|parameters
operator|.
name|get
argument_list|(
name|tblPropKey
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|oldLoc
operator|.
name|toString
argument_list|()
argument_list|,
name|newLoc
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|updateLocations
operator|.
name|put
argument_list|(
name|tablePropLocationURI
operator|.
name|toString
argument_list|()
argument_list|,
name|tblPropLoc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDryRun
condition|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|tblPropKey
argument_list|,
name|tblPropLoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/** The following APIs    *    *  - updateMStorageDescriptorTblPropURI    *    * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.    *    */
specifier|public
name|UpdatePropURIRetVal
name|updateTblPropURI
parameter_list|(
name|URI
name|oldLoc
parameter_list|,
name|URI
name|newLoc
parameter_list|,
name|String
name|tblPropKey
parameter_list|,
name|boolean
name|isDryRun
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|UpdatePropURIRetVal
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MTable
argument_list|>
name|mTbls
init|=
operator|(
name|List
argument_list|<
name|MTable
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mTbls
argument_list|)
expr_stmt|;
for|for
control|(
name|MTable
name|mTbl
range|:
name|mTbls
control|)
block|{
name|updatePropURIHelper
argument_list|(
name|oldLoc
argument_list|,
name|newLoc
argument_list|,
name|tblPropKey
argument_list|,
name|isDryRun
argument_list|,
name|badRecords
argument_list|,
name|updateLocations
argument_list|,
name|mTbl
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
name|retVal
operator|=
operator|new
name|UpdatePropURIRetVal
argument_list|(
name|badRecords
argument_list|,
name|updateLocations
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** The following APIs   *   *  - updateMStorageDescriptorTblPropURI   *   * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.   *   */
annotation|@
name|Deprecated
specifier|public
name|UpdatePropURIRetVal
name|updateMStorageDescriptorTblPropURI
parameter_list|(
name|URI
name|oldLoc
parameter_list|,
name|URI
name|newLoc
parameter_list|,
name|String
name|tblPropKey
parameter_list|,
name|boolean
name|isDryRun
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|UpdatePropURIRetVal
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MStorageDescriptor
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
name|mSDSs
init|=
operator|(
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSDSs
argument_list|)
expr_stmt|;
for|for
control|(
name|MStorageDescriptor
name|mSDS
range|:
name|mSDSs
control|)
block|{
name|updatePropURIHelper
argument_list|(
name|oldLoc
argument_list|,
name|newLoc
argument_list|,
name|tblPropKey
argument_list|,
name|isDryRun
argument_list|,
name|badRecords
argument_list|,
name|updateLocations
argument_list|,
name|mSDS
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
name|retVal
operator|=
operator|new
name|UpdatePropURIRetVal
argument_list|(
name|badRecords
argument_list|,
name|updateLocations
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|UpdateMStorageDescriptorTblURIRetVal
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
decl_stmt|;
specifier|private
name|int
name|numNullRecords
decl_stmt|;
name|UpdateMStorageDescriptorTblURIRetVal
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|,
name|int
name|numNullRecords
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
name|this
operator|.
name|numNullRecords
operator|=
name|numNullRecords
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBadRecords
parameter_list|()
block|{
return|return
name|badRecords
return|;
block|}
specifier|public
name|void
name|setBadRecords
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUpdateLocations
parameter_list|()
block|{
return|return
name|updateLocations
return|;
block|}
specifier|public
name|void
name|setUpdateLocations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
specifier|public
name|int
name|getNumNullRecords
parameter_list|()
block|{
return|return
name|numNullRecords
return|;
block|}
specifier|public
name|void
name|setNumNullRecords
parameter_list|(
name|int
name|numNullRecords
parameter_list|)
block|{
name|this
operator|.
name|numNullRecords
operator|=
name|numNullRecords
expr_stmt|;
block|}
block|}
comment|/** The following APIs   *   *  - updateMStorageDescriptorTblURI   *   * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.   *   */
specifier|public
name|UpdateMStorageDescriptorTblURIRetVal
name|updateMStorageDescriptorTblURI
parameter_list|(
name|URI
name|oldLoc
parameter_list|,
name|URI
name|newLoc
parameter_list|,
name|boolean
name|isDryRun
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numNullRecords
init|=
literal|0
decl_stmt|;
name|UpdateMStorageDescriptorTblURIRetVal
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MStorageDescriptor
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
name|mSDSs
init|=
operator|(
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSDSs
argument_list|)
expr_stmt|;
for|for
control|(
name|MStorageDescriptor
name|mSDS
range|:
name|mSDSs
control|)
block|{
name|URI
name|locationURI
init|=
literal|null
decl_stmt|;
name|String
name|location
init|=
name|mSDS
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
comment|// This can happen for View or Index
name|numNullRecords
operator|++
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|locationURI
operator|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
operator|.
name|toUri
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locationURI
operator|==
literal|null
condition|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shouldUpdateURI
argument_list|(
name|locationURI
argument_list|,
name|oldLoc
argument_list|)
condition|)
block|{
name|String
name|tblLoc
init|=
name|mSDS
operator|.
name|getLocation
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|oldLoc
operator|.
name|toString
argument_list|()
argument_list|,
name|newLoc
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|updateLocations
operator|.
name|put
argument_list|(
name|locationURI
operator|.
name|toString
argument_list|()
argument_list|,
name|tblLoc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDryRun
condition|)
block|{
name|mSDS
operator|.
name|setLocation
argument_list|(
name|tblLoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
name|retVal
operator|=
operator|new
name|UpdateMStorageDescriptorTblURIRetVal
argument_list|(
name|badRecords
argument_list|,
name|updateLocations
argument_list|,
name|numNullRecords
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|UpdateSerdeURIRetVal
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
decl_stmt|;
name|UpdateSerdeURIRetVal
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBadRecords
parameter_list|()
block|{
return|return
name|badRecords
return|;
block|}
specifier|public
name|void
name|setBadRecords
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUpdateLocations
parameter_list|()
block|{
return|return
name|updateLocations
return|;
block|}
specifier|public
name|void
name|setUpdateLocations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
block|}
comment|/** The following APIs   *   *  - updateSerdeURI   *   * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.   *   */
specifier|public
name|UpdateSerdeURIRetVal
name|updateSerdeURI
parameter_list|(
name|URI
name|oldLoc
parameter_list|,
name|URI
name|newLoc
parameter_list|,
name|String
name|serdeProp
parameter_list|,
name|boolean
name|isDryRun
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|UpdateSerdeURIRetVal
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MSerDeInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MSerDeInfo
argument_list|>
name|mSerdes
init|=
operator|(
name|List
argument_list|<
name|MSerDeInfo
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSerdes
argument_list|)
expr_stmt|;
for|for
control|(
name|MSerDeInfo
name|mSerde
range|:
name|mSerdes
control|)
block|{
if|if
condition|(
name|mSerde
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|serdeProp
argument_list|)
condition|)
block|{
name|String
name|schemaLoc
init|=
name|mSerde
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|serdeProp
argument_list|)
decl_stmt|;
name|URI
name|schemaLocURI
init|=
literal|null
decl_stmt|;
try|try
block|{
name|schemaLocURI
operator|=
operator|new
name|Path
argument_list|(
name|schemaLoc
argument_list|)
operator|.
name|toUri
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|schemaLoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaLocURI
operator|==
literal|null
condition|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|schemaLoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shouldUpdateURI
argument_list|(
name|schemaLocURI
argument_list|,
name|oldLoc
argument_list|)
condition|)
block|{
name|String
name|newSchemaLoc
init|=
name|schemaLoc
operator|.
name|replaceAll
argument_list|(
name|oldLoc
operator|.
name|toString
argument_list|()
argument_list|,
name|newLoc
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|updateLocations
operator|.
name|put
argument_list|(
name|schemaLocURI
operator|.
name|toString
argument_list|()
argument_list|,
name|newSchemaLoc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDryRun
condition|)
block|{
name|mSerde
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|serdeProp
argument_list|,
name|newSchemaLoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
name|retVal
operator|=
operator|new
name|UpdateSerdeURIRetVal
argument_list|(
name|badRecords
argument_list|,
name|updateLocations
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeMTableColumnStatistics
parameter_list|(
name|Table
name|table
parameter_list|,
name|MTableColumnStatistics
name|mStatsObj
parameter_list|,
name|MTableColumnStatistics
name|oldStats
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|String
name|colName
init|=
name|mStatsObj
operator|.
name|getColName
argument_list|()
decl_stmt|;
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating table level column statistics for table={}"
operator|+
literal|" colName={}"
argument_list|,
name|getCatalogQualifiedTableName
argument_list|(
name|table
argument_list|)
argument_list|,
name|colName
argument_list|)
expr_stmt|;
name|validateTableCols
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|colName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldStats
operator|!=
literal|null
condition|)
block|{
name|StatObjectConverter
operator|.
name|setFieldsIntoOldStats
argument_list|(
name|mStatsObj
argument_list|,
name|oldStats
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sqlGenerator
operator|.
name|getDbProduct
argument_list|()
operator|.
name|equals
argument_list|(
name|DatabaseProduct
operator|.
name|POSTGRES
argument_list|)
operator|&&
name|mStatsObj
operator|.
name|getBitVector
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// workaround for DN bug in persisting nulls in pg bytea column
comment|// instead set empty bit vector with header.
name|mStatsObj
operator|.
name|setBitVector
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'H'
block|,
literal|'L'
block|}
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|makePersistent
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeMPartitionColumnStatistics
parameter_list|(
name|Table
name|table
parameter_list|,
name|Partition
name|partition
parameter_list|,
name|MPartitionColumnStatistics
name|mStatsObj
parameter_list|,
name|MPartitionColumnStatistics
name|oldStats
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|String
name|catName
init|=
name|mStatsObj
operator|.
name|getCatName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|mStatsObj
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|mStatsObj
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|partName
init|=
name|mStatsObj
operator|.
name|getPartitionName
argument_list|()
decl_stmt|;
name|String
name|colName
init|=
name|mStatsObj
operator|.
name|getColName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating partition level column statistics for table="
operator|+
name|getCatalogQualifiedTableName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|+
literal|" partName="
operator|+
name|partName
operator|+
literal|" colName="
operator|+
name|colName
argument_list|)
expr_stmt|;
name|boolean
name|foundCol
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|colList
init|=
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|colList
control|)
block|{
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|mStatsObj
operator|.
name|getColName
argument_list|()
argument_list|)
condition|)
block|{
name|foundCol
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundCol
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Column "
operator|+
name|colName
operator|+
literal|" for which stats gathering is requested doesn't exist."
argument_list|)
expr_stmt|;
block|}
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|oldStats
operator|!=
literal|null
condition|)
block|{
name|StatObjectConverter
operator|.
name|setFieldsIntoOldStats
argument_list|(
name|mStatsObj
argument_list|,
name|oldStats
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sqlGenerator
operator|.
name|getDbProduct
argument_list|()
operator|.
name|equals
argument_list|(
name|DatabaseProduct
operator|.
name|POSTGRES
argument_list|)
operator|&&
name|mStatsObj
operator|.
name|getBitVector
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// workaround for DN bug in persisting nulls in pg bytea column
comment|// instead set empty bit vector with header.
name|mStatsObj
operator|.
name|setBitVector
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'H'
block|,
literal|'L'
block|}
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|makePersistent
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get table's column stats    *    * @param table    * @param colNames    * @return Map of column name and its stats    * @throws NoSuchObjectException    * @throws MetaException    */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MTableColumnStatistics
argument_list|>
name|getPartitionColStats
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MTableColumnStatistics
argument_list|>
name|statsMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|MTableColumnStatistics
argument_list|>
name|stats
init|=
name|getMTableColumnStatistics
argument_list|(
name|table
argument_list|,
name|colNames
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
for|for
control|(
name|MTableColumnStatistics
name|cStat
range|:
name|stats
control|)
block|{
name|statsMap
operator|.
name|put
argument_list|(
name|cStat
operator|.
name|getColName
argument_list|()
argument_list|,
name|cStat
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|statsMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateTableColumnStatistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
name|colStats
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
name|colStats
operator|.
name|getStatsDesc
argument_list|()
decl_stmt|;
comment|// DataNucleus objects get detached all over the place for no (real) reason.
comment|// So let's not use them anywhere unless absolutely necessary.
name|String
name|catName
init|=
name|statsDesc
operator|.
name|isSetCatName
argument_list|()
condition|?
name|statsDesc
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|ensureGetTable
argument_list|(
name|catName
argument_list|,
name|statsDesc
operator|.
name|getDbName
argument_list|()
argument_list|,
name|statsDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|statsObj
range|:
name|statsObjs
control|)
block|{
name|colNames
operator|.
name|add
argument_list|(
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|MTableColumnStatistics
argument_list|>
name|oldStats
init|=
name|getPartitionColStats
argument_list|(
name|table
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|statsObj
range|:
name|statsObjs
control|)
block|{
comment|// We have to get mtable again because DataNucleus.
name|MTableColumnStatistics
name|mStatsObj
init|=
name|StatObjectConverter
operator|.
name|convertToMTableColumnStatistics
argument_list|(
name|ensureGetMTable
argument_list|(
name|catName
argument_list|,
name|statsDesc
operator|.
name|getDbName
argument_list|()
argument_list|,
name|statsDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|statsDesc
argument_list|,
name|statsObj
argument_list|)
decl_stmt|;
name|writeMTableColumnStatistics
argument_list|(
name|table
argument_list|,
name|mStatsObj
argument_list|,
name|oldStats
operator|.
name|get
argument_list|(
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// There is no need to add colname again, otherwise we will get duplicate colNames.
block|}
comment|// Set the table properties
comment|// No need to check again if it exists.
name|String
name|dbname
init|=
name|table
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|table
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|MTable
name|oldt
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|parameters
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|committed
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get partition's column stats    *    * @param table    * @param partitionName    * @param colNames    * @return Map of column name and its stats    * @throws NoSuchObjectException    * @throws MetaException    */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MPartitionColumnStatistics
argument_list|>
name|getPartitionColStats
parameter_list|(
name|Table
name|table
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MPartitionColumnStatistics
argument_list|>
name|statsMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|MPartitionColumnStatistics
argument_list|>
name|stats
init|=
name|getMPartitionColumnStatistics
argument_list|(
name|table
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionName
argument_list|)
argument_list|,
name|colNames
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
for|for
control|(
name|MPartitionColumnStatistics
name|cStat
range|:
name|stats
control|)
block|{
name|statsMap
operator|.
name|put
argument_list|(
name|cStat
operator|.
name|getColName
argument_list|()
argument_list|,
name|cStat
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|statsMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updatePartitionColumnStatistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
name|colStats
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
name|colStats
operator|.
name|getStatsDesc
argument_list|()
decl_stmt|;
name|String
name|catName
init|=
name|statsDesc
operator|.
name|isSetCatName
argument_list|()
condition|?
name|statsDesc
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|ensureGetTable
argument_list|(
name|catName
argument_list|,
name|statsDesc
operator|.
name|getDbName
argument_list|()
argument_list|,
name|statsDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Partition
name|partition
init|=
name|convertToPart
argument_list|(
name|getMPartition
argument_list|(
name|catName
argument_list|,
name|statsDesc
operator|.
name|getDbName
argument_list|()
argument_list|,
name|statsDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partVals
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|statsObj
range|:
name|statsObjs
control|)
block|{
name|colNames
operator|.
name|add
argument_list|(
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|MPartitionColumnStatistics
argument_list|>
name|oldStats
init|=
name|getPartitionColStats
argument_list|(
name|table
argument_list|,
name|statsDesc
operator|.
name|getPartName
argument_list|()
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|MPartition
name|mPartition
init|=
name|getMPartition
argument_list|(
name|catName
argument_list|,
name|statsDesc
operator|.
name|getDbName
argument_list|()
argument_list|,
name|statsDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|partition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Partition for which stats is gathered doesn't exist."
argument_list|)
throw|;
block|}
for|for
control|(
name|ColumnStatisticsObj
name|statsObj
range|:
name|statsObjs
control|)
block|{
name|MPartitionColumnStatistics
name|mStatsObj
init|=
name|StatObjectConverter
operator|.
name|convertToMPartitionColumnStatistics
argument_list|(
name|mPartition
argument_list|,
name|statsDesc
argument_list|,
name|statsObj
argument_list|)
decl_stmt|;
name|writeMPartitionColumnStatistics
argument_list|(
name|table
argument_list|,
name|partition
argument_list|,
name|mStatsObj
argument_list|,
name|oldStats
operator|.
name|get
argument_list|(
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
name|mPartition
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|parameters
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|mPartition
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|committed
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|MTableColumnStatistics
argument_list|>
name|getMTableColumnStatistics
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|colNames
operator|==
literal|null
operator|||
name|colNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|validateTableCols
argument_list|(
name|table
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnStatistics
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MTableColumnStatistics
argument_list|>
name|result
init|=
name|Batchable
operator|.
name|runBatched
argument_list|(
name|batchSize
argument_list|,
name|colNames
argument_list|,
operator|new
name|Batchable
argument_list|<
name|String
argument_list|,
name|MTableColumnStatistics
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MTableColumnStatistics
argument_list|>
name|run
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|input
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|filter
init|=
literal|"tableName == t1&& dbName == t2&& catName == t3&& ("
decl_stmt|;
name|String
name|paramStr
init|=
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
decl_stmt|;
name|Object
index|[]
name|params
init|=
operator|new
name|Object
index|[
name|input
operator|.
name|size
argument_list|()
operator|+
literal|3
index|]
decl_stmt|;
name|params
index|[
literal|0
index|]
operator|=
name|table
operator|.
name|getTableName
argument_list|()
expr_stmt|;
name|params
index|[
literal|1
index|]
operator|=
name|table
operator|.
name|getDbName
argument_list|()
expr_stmt|;
name|params
index|[
literal|2
index|]
operator|=
name|table
operator|.
name|getCatName
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|filter
operator|+=
operator|(
operator|(
name|i
operator|==
literal|0
operator|)
condition|?
literal|""
else|:
literal|" || "
operator|)
operator|+
literal|"colName == c"
operator|+
name|i
expr_stmt|;
name|paramStr
operator|+=
literal|", java.lang.String c"
operator|+
name|i
expr_stmt|;
name|params
index|[
name|i
operator|+
literal|3
index|]
operator|=
name|input
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|filter
operator|+=
literal|")"
expr_stmt|;
name|query
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|paramStr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MTableColumnStatistics
argument_list|>
name|paritial
init|=
operator|(
name|List
argument_list|<
name|MTableColumnStatistics
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|paritial
argument_list|)
expr_stmt|;
return|return
name|paritial
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|>
name|colNames
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unexpected "
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
literal|" statistics for "
operator|+
name|colNames
operator|.
name|size
argument_list|()
operator|+
literal|" columns"
argument_list|)
throw|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error retrieving statistics via jdo"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|ex
throw|;
block|}
throw|throw
operator|new
name|MetaException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|validateTableCols
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|colList
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|colNames
control|)
block|{
name|boolean
name|foundCol
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FieldSchema
name|mCol
range|:
name|colList
control|)
block|{
if|if
condition|(
name|mCol
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|colName
argument_list|)
condition|)
block|{
name|foundCol
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundCol
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Column "
operator|+
name|colName
operator|+
literal|" doesn't exist in table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|" in database "
operator|+
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|ColumnStatistics
name|getTableColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getTableColumnStatisticsInternal
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colNames
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|ColumnStatistics
name|getTableColumnStatisticsInternal
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|boolean
name|enableBitVector
init|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|STATS_FETCH_BITVECTOR
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetStatHelper
argument_list|(
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ColumnStatistics
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|ColumnStatistics
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getTableStats
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|,
name|enableBitVector
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ColumnStatistics
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|ColumnStatistics
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|MTableColumnStatistics
argument_list|>
name|mStats
init|=
name|getMTableColumnStatistics
argument_list|(
name|getTable
argument_list|()
argument_list|,
name|colNames
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|mStats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// LastAnalyzed is stored per column, but thrift object has it per multiple columns.
comment|// Luckily, nobody actually uses it, so we will set to lowest value of all columns for now.
name|ColumnStatisticsDesc
name|desc
init|=
name|StatObjectConverter
operator|.
name|getTableColumnStatisticsDesc
argument_list|(
name|mStats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statObjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mStats
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MTableColumnStatistics
name|mStat
range|:
name|mStats
control|)
block|{
if|if
condition|(
name|desc
operator|.
name|getLastAnalyzed
argument_list|()
operator|>
name|mStat
operator|.
name|getLastAnalyzed
argument_list|()
condition|)
block|{
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|mStat
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|statObjs
operator|.
name|add
argument_list|(
name|StatObjectConverter
operator|.
name|getTableColumnStatisticsObj
argument_list|(
name|mStat
argument_list|,
name|enableBitVector
argument_list|)
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|checkTimeout
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ColumnStatistics
argument_list|(
name|desc
argument_list|,
name|statObjs
argument_list|)
return|;
block|}
finally|finally
block|{
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|run
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getPartitionColumnStatisticsInternal
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|getPartitionColumnStatisticsInternal
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|boolean
name|enableBitVector
init|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|STATS_FETCH_BITVECTOR
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetListHelper
argument_list|<
name|ColumnStatistics
argument_list|>
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getPartitionStats
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
name|enableBitVector
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|QueryWrapper
name|queryWrapper
init|=
operator|new
name|QueryWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|MPartitionColumnStatistics
argument_list|>
name|mStats
init|=
name|getMPartitionColumnStatistics
argument_list|(
name|getTable
argument_list|()
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
name|queryWrapper
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|mStats
operator|.
name|size
argument_list|()
argument_list|,
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lastPartName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|curList
init|=
literal|null
decl_stmt|;
name|ColumnStatisticsDesc
name|csd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|mStats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|boolean
name|isLast
init|=
name|i
operator|==
name|mStats
operator|.
name|size
argument_list|()
decl_stmt|;
name|MPartitionColumnStatistics
name|mStatsObj
init|=
name|isLast
condition|?
literal|null
else|:
name|mStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|isLast
condition|?
literal|null
else|:
name|mStatsObj
operator|.
name|getPartitionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLast
operator|||
operator|!
name|partName
operator|.
name|equals
argument_list|(
name|lastPartName
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ColumnStatistics
argument_list|(
name|csd
argument_list|,
name|curList
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLast
condition|)
block|{
continue|continue;
block|}
name|csd
operator|=
name|StatObjectConverter
operator|.
name|getPartitionColumnStatisticsDesc
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
name|curList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|colNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|curList
operator|.
name|add
argument_list|(
name|StatObjectConverter
operator|.
name|getPartitionColumnStatisticsObj
argument_list|(
name|mStatsObj
argument_list|,
name|enableBitVector
argument_list|)
argument_list|)
expr_stmt|;
name|lastPartName
operator|=
name|partName
expr_stmt|;
name|Deadline
operator|.
name|checkTimeout
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|run
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AggrStats
name|get_aggr_stats_for
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|boolean
name|useDensityFunctionForNDVEstimation
init|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|STATS_NDV_DENSITY_FUNCTION
argument_list|)
decl_stmt|;
specifier|final
name|double
name|ndvTuner
init|=
name|MetastoreConf
operator|.
name|getDoubleVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|STATS_NDV_TUNER
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|enableBitVector
init|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|STATS_FETCH_BITVECTOR
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetHelper
argument_list|<
name|AggrStats
argument_list|>
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AggrStats
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|AggrStats
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|aggrColStatsForPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
name|useDensityFunctionForNDVEstimation
argument_list|,
name|ndvTuner
argument_list|,
name|enableBitVector
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AggrStats
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|AggrStats
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
comment|// This is fast path for query optimizations, if we can find this info
comment|// quickly using
comment|// directSql, do it. No point in failing back to slow path here.
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Jdo path is not implemented for stats aggr."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|describeResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MetaStoreUtils
operator|.
name|ColStatsObjWithSourceInfo
argument_list|>
name|getPartitionColStatsForDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|boolean
name|enableBitVector
init|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|STATS_FETCH_BITVECTOR
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetHelper
argument_list|<
name|List
argument_list|<
name|MetaStoreUtils
operator|.
name|ColStatsObjWithSourceInfo
argument_list|>
argument_list|>
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|MetaStoreUtils
operator|.
name|ColStatsObjWithSourceInfo
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|MetaStoreUtils
operator|.
name|ColStatsObjWithSourceInfo
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getColStatsForAllTablePartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|enableBitVector
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|MetaStoreUtils
operator|.
name|ColStatsObjWithSourceInfo
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|MetaStoreUtils
operator|.
name|ColStatsObjWithSourceInfo
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
comment|// This is fast path for query optimizations, if we can find this info
comment|// quickly using directSql, do it. No point in failing back to slow path
comment|// here.
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Jdo path is not implemented for getPartitionColStatsForDatabase."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|describeResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flushCache
parameter_list|()
block|{
comment|// NOP as there's no caching
block|}
specifier|private
name|List
argument_list|<
name|MPartitionColumnStatistics
argument_list|>
name|getMPartitionColumnStatistics
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
comment|// We are not going to verify SD for each partition. Just verify for the table.
comment|// ToDo: we need verify the partition column instead
try|try
block|{
name|validateTableCols
argument_list|(
name|table
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The table does not have the same column definition as its partition."
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|queryWrapper
operator|.
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnStatistics
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|paramStr
init|=
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
decl_stmt|;
name|String
name|filter
init|=
literal|"tableName == t1&& dbName == t2&& catName == t3&& ("
decl_stmt|;
name|Object
index|[]
name|params
init|=
operator|new
name|Object
index|[
name|colNames
operator|.
name|size
argument_list|()
operator|+
name|partNames
operator|.
name|size
argument_list|()
operator|+
literal|3
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|params
index|[
name|i
operator|++
index|]
operator|=
name|table
operator|.
name|getTableName
argument_list|()
expr_stmt|;
name|params
index|[
name|i
operator|++
index|]
operator|=
name|table
operator|.
name|getDbName
argument_list|()
expr_stmt|;
name|params
index|[
name|i
operator|++
index|]
operator|=
name|table
operator|.
name|isSetCatName
argument_list|()
condition|?
name|table
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|firstI
init|=
name|i
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|partNames
control|)
block|{
name|filter
operator|+=
operator|(
operator|(
name|i
operator|==
name|firstI
operator|)
condition|?
literal|""
else|:
literal|" || "
operator|)
operator|+
literal|"partitionName == p"
operator|+
name|i
expr_stmt|;
name|paramStr
operator|+=
literal|", java.lang.String p"
operator|+
name|i
expr_stmt|;
name|params
index|[
name|i
operator|++
index|]
operator|=
name|s
expr_stmt|;
block|}
name|filter
operator|+=
literal|")&& ("
expr_stmt|;
name|firstI
operator|=
name|i
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|colNames
control|)
block|{
name|filter
operator|+=
operator|(
operator|(
name|i
operator|==
name|firstI
operator|)
condition|?
literal|""
else|:
literal|" || "
operator|)
operator|+
literal|"colName == c"
operator|+
name|i
expr_stmt|;
name|paramStr
operator|+=
literal|", java.lang.String c"
operator|+
name|i
expr_stmt|;
name|params
index|[
name|i
operator|++
index|]
operator|=
name|s
expr_stmt|;
block|}
name|filter
operator|+=
literal|")"
expr_stmt|;
name|query
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|paramStr
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"partitionName ascending"
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|MPartitionColumnStatistics
argument_list|>
name|result
init|=
operator|(
name|List
argument_list|<
name|MPartitionColumnStatistics
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error retrieving statistics via jdo"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|ex
throw|;
block|}
throw|throw
operator|new
name|MetaException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
return|return
name|Lists
operator|.
name|newArrayList
argument_list|()
return|;
block|}
block|}
block|}
specifier|private
name|void
name|dropPartitionColumnStatisticsNoTxn
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
block|{
name|ObjectPair
argument_list|<
name|Query
argument_list|,
name|Object
index|[]
argument_list|>
name|queryWithParams
init|=
name|makeQueryByPartitionNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|MPartitionColumnStatistics
operator|.
name|class
argument_list|,
literal|"tableName"
argument_list|,
literal|"dbName"
argument_list|,
literal|"partition.partitionName"
argument_list|,
literal|"catName"
argument_list|)
decl_stmt|;
name|queryWithParams
operator|.
name|getFirst
argument_list|()
operator|.
name|deletePersistentAll
argument_list|(
name|queryWithParams
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deletePartitionColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|dbName
operator|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|dbName
argument_list|,
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidInputException
argument_list|(
literal|"Table name is null."
argument_list|)
throw|;
block|}
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MTable
name|mTable
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|MPartitionColumnStatistics
name|mStatsObj
decl_stmt|;
name|List
argument_list|<
name|MPartitionColumnStatistics
argument_list|>
name|mStatsObjColl
decl_stmt|;
if|if
condition|(
name|mTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|"  for which stats deletion is requested doesn't exist"
argument_list|)
throw|;
block|}
name|MPartition
name|mPartition
init|=
name|getMPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|mPartition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Partition "
operator|+
name|partName
operator|+
literal|" for which stats deletion is requested doesn't exist"
argument_list|)
throw|;
block|}
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnStatistics
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|filter
decl_stmt|;
name|String
name|parameters
decl_stmt|;
if|if
condition|(
name|colName
operator|!=
literal|null
condition|)
block|{
name|filter
operator|=
literal|"partition.partitionName == t1&& dbName == t2&& tableName == t3&& "
operator|+
literal|"colName == t4&& catName == t5"
expr_stmt|;
name|parameters
operator|=
literal|"java.lang.String t1, java.lang.String t2, "
operator|+
literal|"java.lang.String t3, java.lang.String t4, java.lang.String t5"
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
literal|"partition.partitionName == t1&& dbName == t2&& tableName == t3&& catName == t4"
expr_stmt|;
name|parameters
operator|=
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, java.lang.String t4"
expr_stmt|;
block|}
name|query
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|colName
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mStatsObj
operator|=
operator|(
name|MPartitionColumnStatistics
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|partName
operator|.
name|trim
argument_list|()
argument_list|,
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|colName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
if|if
condition|(
name|mStatsObj
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column stats doesn't exist for table="
operator|+
name|getCatalogQualifiedTableName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|+
literal|" partition="
operator|+
name|partName
operator|+
literal|" col="
operator|+
name|colName
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|mStatsObjColl
operator|=
operator|(
name|List
argument_list|<
name|MPartitionColumnStatistics
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|partName
operator|.
name|trim
argument_list|()
argument_list|,
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mStatsObjColl
argument_list|)
expr_stmt|;
if|if
condition|(
name|mStatsObjColl
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|mStatsObjColl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column stats don't exist for table="
operator|+
name|getCatalogQualifiedTableName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|+
literal|" partition"
operator|+
name|partName
argument_list|)
throw|;
block|}
block|}
name|ret
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|ret
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteTableColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|dbName
operator|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|dbName
argument_list|,
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidInputException
argument_list|(
literal|"Table name is null."
argument_list|)
throw|;
block|}
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MTable
name|mTable
init|=
name|getMTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|MTableColumnStatistics
name|mStatsObj
decl_stmt|;
name|List
argument_list|<
name|MTableColumnStatistics
argument_list|>
name|mStatsObjColl
decl_stmt|;
if|if
condition|(
name|mTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Table "
operator|+
name|getCatalogQualifiedTableName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|+
literal|"  for which stats deletion is requested doesn't exist"
argument_list|)
throw|;
block|}
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnStatistics
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|filter
decl_stmt|;
name|String
name|parameters
decl_stmt|;
if|if
condition|(
name|colName
operator|!=
literal|null
condition|)
block|{
name|filter
operator|=
literal|"table.tableName == t1&& dbName == t2&& catName == t3&& colName == t4"
expr_stmt|;
name|parameters
operator|=
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, java.lang.String t4"
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
literal|"table.tableName == t1&& dbName == t2&& catName == t3"
expr_stmt|;
name|parameters
operator|=
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
expr_stmt|;
block|}
name|query
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|colName
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mStatsObj
operator|=
operator|(
name|MTableColumnStatistics
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|colName
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
if|if
condition|(
name|mStatsObj
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column stats doesn't exist for db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tableName
operator|+
literal|" col="
operator|+
name|colName
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|mStatsObjColl
operator|=
operator|(
name|List
argument_list|<
name|MTableColumnStatistics
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mStatsObjColl
argument_list|)
expr_stmt|;
if|if
condition|(
name|mStatsObjColl
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|mStatsObjColl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column stats doesn't exist for db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tableName
argument_list|)
throw|;
block|}
block|}
name|ret
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|ret
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cleanupEvents
parameter_list|()
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|long
name|delCnt
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing cleanupEvents"
argument_list|)
expr_stmt|;
name|Long
name|expiryTime
init|=
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|EVENT_EXPIRY_DURATION
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|Long
name|curTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionEvent
operator|.
name|class
argument_list|,
literal|"curTime - eventTime> expiryTime"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.Long curTime, java.lang.Long expiryTime"
argument_list|)
expr_stmt|;
name|delCnt
operator|=
name|query
operator|.
name|deletePersistentAll
argument_list|(
name|curTime
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing cleanupEvents"
argument_list|)
expr_stmt|;
block|}
return|return
name|delCnt
return|;
block|}
specifier|private
name|MDelegationToken
name|getTokenFrom
parameter_list|(
name|String
name|tokenId
parameter_list|)
block|{
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDelegationToken
operator|.
name|class
argument_list|,
literal|"tokenIdentifier == tokenId"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String tokenId"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MDelegationToken
name|delegationToken
init|=
operator|(
name|MDelegationToken
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tokenId
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
return|return
name|delegationToken
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addToken
parameter_list|(
name|String
name|tokenId
parameter_list|,
name|String
name|delegationToken
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing addToken"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MDelegationToken
name|token
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|token
operator|=
name|getTokenFrom
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
comment|// add Token, only if it already doesn't exist
name|pm
operator|.
name|makePersistent
argument_list|(
operator|new
name|MDelegationToken
argument_list|(
name|tokenId
argument_list|,
name|delegationToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing addToken with status : {}"
argument_list|,
name|committed
argument_list|)
expr_stmt|;
return|return
name|committed
operator|&&
operator|(
name|token
operator|==
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeToken
parameter_list|(
name|String
name|tokenId
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing removeToken"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MDelegationToken
name|token
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|token
operator|=
name|getTokenFrom
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|token
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing removeToken with status : {}"
argument_list|,
name|committed
argument_list|)
expr_stmt|;
return|return
name|committed
operator|&&
operator|(
name|token
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getToken
parameter_list|(
name|String
name|tokenId
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing getToken"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MDelegationToken
name|token
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|token
operator|=
name|getTokenFrom
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|token
condition|)
block|{
name|pm
operator|.
name|retrieve
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing getToken with status : {}"
argument_list|,
name|committed
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|==
name|token
operator|)
condition|?
literal|null
else|:
name|token
operator|.
name|getTokenStr
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTokenIdentifiers
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing getAllTokenIdentifiers"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tokenIdents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDelegationToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MDelegationToken
argument_list|>
name|tokens
init|=
operator|(
name|List
argument_list|<
name|MDelegationToken
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|MDelegationToken
name|token
range|:
name|tokens
control|)
block|{
name|tokenIdents
operator|.
name|add
argument_list|(
name|token
operator|.
name|getTokenIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenIdents
return|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing getAllTokenIdentifers with status : {}"
argument_list|,
name|committed
argument_list|)
expr_stmt|;
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|addMasterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing addMasterKey"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MMasterKey
name|masterKey
init|=
operator|new
name|MMasterKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|masterKey
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing addMasterKey with status : {}"
argument_list|,
name|committed
argument_list|)
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
return|return
operator|(
operator|(
name|IntIdentity
operator|)
name|pm
operator|.
name|getObjectId
argument_list|(
name|masterKey
argument_list|)
operator|)
operator|.
name|getKey
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Failed to add master key."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMasterKey
parameter_list|(
name|Integer
name|id
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing updateMasterKey"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|MMasterKey
name|masterKey
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MMasterKey
operator|.
name|class
argument_list|,
literal|"keyId == id"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.Integer id"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|masterKey
operator|=
operator|(
name|MMasterKey
operator|)
name|query
operator|.
name|execute
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|masterKey
condition|)
block|{
name|masterKey
operator|.
name|setMasterKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing updateMasterKey with status : {}"
argument_list|,
name|committed
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|masterKey
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"No key found with keyId: "
operator|+
name|id
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|committed
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Though key is found, failed to update it. "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeMasterKey
parameter_list|(
name|Integer
name|id
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing removeMasterKey"
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|MMasterKey
name|masterKey
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MMasterKey
operator|.
name|class
argument_list|,
literal|"keyId == id"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.Integer id"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|masterKey
operator|=
operator|(
name|MMasterKey
operator|)
name|query
operator|.
name|execute
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|masterKey
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|masterKey
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|success
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing removeMasterKey with status : {}"
argument_list|,
name|success
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|!=
name|masterKey
operator|)
operator|&&
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getMasterKeys
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing getMasterKeys"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MMasterKey
argument_list|>
name|keys
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MMasterKey
operator|.
name|class
argument_list|)
expr_stmt|;
name|keys
operator|=
operator|(
name|List
argument_list|<
name|MMasterKey
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|String
index|[]
name|masterKeys
init|=
operator|new
name|String
index|[
name|keys
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|masterKeys
index|[
name|i
index|]
operator|=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getMasterKey
argument_list|()
expr_stmt|;
block|}
return|return
name|masterKeys
return|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing getMasterKeys with status : {}"
argument_list|,
name|committed
argument_list|)
expr_stmt|;
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
comment|// compare hive version and metastore version
annotation|@
name|Override
specifier|public
name|void
name|verifySchema
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// If the schema version is already checked, then go ahead and use this metastore
if|if
condition|(
name|isSchemaVerified
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|checkSchema
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setSchemaVerified
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|isSchemaVerified
operator|.
name|set
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|checkSchema
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// recheck if it got verified by another thread while we were waiting
if|if
condition|(
name|isSchemaVerified
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|strictValidation
init|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|SCHEMA_VERIFICATION
argument_list|)
decl_stmt|;
comment|// read the schema version stored in metastore db
name|String
name|dbSchemaVer
init|=
name|getMetaStoreSchemaVersion
argument_list|()
decl_stmt|;
comment|// version of schema for this version of hive
name|IMetaStoreSchemaInfo
name|metastoreSchemaInfo
init|=
name|MetaStoreSchemaInfoFactory
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|hiveSchemaVer
init|=
name|metastoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbSchemaVer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|strictValidation
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Version information not found in metastore."
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Version information not found in metastore. {} is not "
operator|+
literal|"enabled so recording the schema version {}"
argument_list|,
name|ConfVars
operator|.
name|SCHEMA_VERIFICATION
argument_list|,
name|hiveSchemaVer
argument_list|)
expr_stmt|;
name|setMetaStoreSchemaVersion
argument_list|(
name|hiveSchemaVer
argument_list|,
literal|"Set by MetaStore "
operator|+
name|USER
operator|+
literal|"@"
operator|+
name|HOSTNAME
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|metastoreSchemaInfo
operator|.
name|isVersionCompatible
argument_list|(
name|hiveSchemaVer
argument_list|,
name|dbSchemaVer
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found expected HMS version of {}"
argument_list|,
name|dbSchemaVer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// metastore schema version is different than Hive distribution needs
if|if
condition|(
name|strictValidation
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Hive Schema version "
operator|+
name|hiveSchemaVer
operator|+
literal|" does not match metastore's schema version "
operator|+
name|dbSchemaVer
operator|+
literal|" Metastore is not upgraded or corrupt"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Version information found in metastore differs {} "
operator|+
literal|"from expected schema version {}. Schema verification is disabled {}"
argument_list|,
name|dbSchemaVer
argument_list|,
name|hiveSchemaVer
argument_list|,
name|ConfVars
operator|.
name|SCHEMA_VERIFICATION
argument_list|)
expr_stmt|;
name|setMetaStoreSchemaVersion
argument_list|(
name|hiveSchemaVer
argument_list|,
literal|"Set by MetaStore "
operator|+
name|USER
operator|+
literal|"@"
operator|+
name|HOSTNAME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|isSchemaVerified
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// load the schema version stored in metastore db
annotation|@
name|Override
specifier|public
name|String
name|getMetaStoreSchemaVersion
parameter_list|()
throws|throws
name|MetaException
block|{
name|MVersionTable
name|mSchemaVer
decl_stmt|;
try|try
block|{
name|mSchemaVer
operator|=
name|getMSchemaVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|mSchemaVer
operator|.
name|getSchemaVersion
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|MVersionTable
name|getMSchemaVersion
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MVersionTable
argument_list|>
name|mVerTables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MVersionTable
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|mVerTables
operator|=
operator|(
name|List
argument_list|<
name|MVersionTable
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mVerTables
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDODataStoreException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|MissingTableException
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Version table not found. "
operator|+
literal|"The metastore is not upgraded to "
operator|+
name|MetaStoreSchemaInfoFactory
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|mVerTables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"No matching version found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mVerTables
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|msg
init|=
literal|"Metastore contains multiple versions ("
operator|+
name|mVerTables
operator|.
name|size
argument_list|()
operator|+
literal|") "
decl_stmt|;
for|for
control|(
name|MVersionTable
name|version
range|:
name|mVerTables
control|)
block|{
name|msg
operator|+=
literal|"[ version = "
operator|+
name|version
operator|.
name|getSchemaVersion
argument_list|()
operator|+
literal|", comment = "
operator|+
name|version
operator|.
name|getVersionComment
argument_list|()
operator|+
literal|" ] "
expr_stmt|;
block|}
throw|throw
operator|new
name|MetaException
argument_list|(
name|msg
operator|.
name|trim
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|mVerTables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMetaStoreSchemaVersion
parameter_list|(
name|String
name|schemaVersion
parameter_list|,
name|String
name|comment
parameter_list|)
throws|throws
name|MetaException
block|{
name|MVersionTable
name|mSchemaVer
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|boolean
name|recordVersion
init|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|SCHEMA_VERIFICATION_RECORD_VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|recordVersion
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"setMetaStoreSchemaVersion called but recording version is disabled: "
operator|+
literal|"version = {}, comment = {}"
argument_list|,
name|schemaVersion
argument_list|,
name|comment
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Setting metastore schema version in db to {}"
argument_list|,
name|schemaVersion
argument_list|)
expr_stmt|;
try|try
block|{
name|mSchemaVer
operator|=
name|getMSchemaVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// if the version doesn't exist, then create it
name|mSchemaVer
operator|=
operator|new
name|MVersionTable
argument_list|()
expr_stmt|;
block|}
name|mSchemaVer
operator|.
name|setSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|mSchemaVer
operator|.
name|setVersionComment
argument_list|(
name|comment
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mSchemaVer
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|doesPartitionExist
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|this
operator|.
name|getPartition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partVals
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|debugLog
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} {}"
argument_list|,
name|message
argument_list|,
name|getCallStack
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|int
name|stackLimit
init|=
literal|3
decl_stmt|;
specifier|private
name|String
name|getCallStack
parameter_list|()
block|{
name|StackTraceElement
index|[]
name|stackTrace
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|int
name|thislimit
init|=
name|Math
operator|.
name|min
argument_list|(
name|stackLimit
argument_list|,
name|stackTrace
operator|.
name|length
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" at:"
argument_list|)
expr_stmt|;
comment|// Offset by 4 because the first 4 frames are just calls to get down here.
for|for
control|(
name|int
name|i
init|=
literal|4
init|;
name|i
operator|<
name|thislimit
operator|+
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|stackTrace
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Function
name|convertToFunction
parameter_list|(
name|MFunction
name|mfunc
parameter_list|)
block|{
if|if
condition|(
name|mfunc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Function
name|func
init|=
operator|new
name|Function
argument_list|(
name|mfunc
operator|.
name|getFunctionName
argument_list|()
argument_list|,
name|mfunc
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mfunc
operator|.
name|getClassName
argument_list|()
argument_list|,
name|mfunc
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|mfunc
operator|.
name|getOwnerType
argument_list|()
argument_list|)
argument_list|,
name|mfunc
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|FunctionType
operator|.
name|findByValue
argument_list|(
name|mfunc
operator|.
name|getFunctionType
argument_list|()
argument_list|)
argument_list|,
name|convertToResourceUriList
argument_list|(
name|mfunc
operator|.
name|getResourceUris
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|func
operator|.
name|setCatName
argument_list|(
name|mfunc
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|func
return|;
block|}
specifier|private
name|List
argument_list|<
name|Function
argument_list|>
name|convertToFunctions
parameter_list|(
name|List
argument_list|<
name|MFunction
argument_list|>
name|mfuncs
parameter_list|)
block|{
if|if
condition|(
name|mfuncs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Function
argument_list|>
name|functions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MFunction
name|mfunc
range|:
name|mfuncs
control|)
block|{
name|functions
operator|.
name|add
argument_list|(
name|convertToFunction
argument_list|(
name|mfunc
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|functions
return|;
block|}
specifier|private
name|MFunction
name|convertToMFunction
parameter_list|(
name|Function
name|func
parameter_list|)
throws|throws
name|InvalidObjectException
block|{
if|if
condition|(
name|func
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MDatabase
name|mdb
init|=
literal|null
decl_stmt|;
name|String
name|catName
init|=
name|func
operator|.
name|isSetCatName
argument_list|()
condition|?
name|func
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|mdb
operator|=
name|getMDatabase
argument_list|(
name|catName
argument_list|,
name|func
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Database does not exist"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Database "
operator|+
name|func
operator|.
name|getDbName
argument_list|()
operator|+
literal|" doesn't exist."
argument_list|)
throw|;
block|}
name|MFunction
name|mfunc
init|=
operator|new
name|MFunction
argument_list|(
name|func
operator|.
name|getFunctionName
argument_list|()
argument_list|,
name|mdb
argument_list|,
name|func
operator|.
name|getClassName
argument_list|()
argument_list|,
name|func
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|func
operator|.
name|getOwnerType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|func
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|func
operator|.
name|getFunctionType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|convertToMResourceUriList
argument_list|(
name|func
operator|.
name|getResourceUris
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|mfunc
return|;
block|}
specifier|private
name|List
argument_list|<
name|ResourceUri
argument_list|>
name|convertToResourceUriList
parameter_list|(
name|List
argument_list|<
name|MResourceUri
argument_list|>
name|mresourceUriList
parameter_list|)
block|{
name|List
argument_list|<
name|ResourceUri
argument_list|>
name|resourceUriList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mresourceUriList
operator|!=
literal|null
condition|)
block|{
name|resourceUriList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mresourceUriList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MResourceUri
name|mres
range|:
name|mresourceUriList
control|)
block|{
name|resourceUriList
operator|.
name|add
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|findByValue
argument_list|(
name|mres
operator|.
name|getResourceType
argument_list|()
argument_list|)
argument_list|,
name|mres
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resourceUriList
return|;
block|}
specifier|private
name|List
argument_list|<
name|MResourceUri
argument_list|>
name|convertToMResourceUriList
parameter_list|(
name|List
argument_list|<
name|ResourceUri
argument_list|>
name|resourceUriList
parameter_list|)
block|{
name|List
argument_list|<
name|MResourceUri
argument_list|>
name|mresourceUriList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resourceUriList
operator|!=
literal|null
condition|)
block|{
name|mresourceUriList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|resourceUriList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceUri
name|res
range|:
name|resourceUriList
control|)
block|{
name|mresourceUriList
operator|.
name|add
argument_list|(
operator|new
name|MResourceUri
argument_list|(
name|res
operator|.
name|getResourceType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|res
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mresourceUriList
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createFunction
parameter_list|(
name|Function
name|func
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MFunction
name|mfunc
init|=
name|convertToMFunction
argument_list|(
name|func
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mfunc
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|,
name|Function
name|newFunction
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|newFuncCat
init|=
name|newFunction
operator|.
name|isSetCatName
argument_list|()
condition|?
name|newFunction
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newFuncCat
operator|.
name|equalsIgnoreCase
argument_list|(
name|catName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"You cannot move a function between catalogs"
argument_list|)
throw|;
block|}
name|openTransaction
argument_list|()
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|funcName
operator|=
name|normalizeIdentifier
argument_list|(
name|funcName
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|MFunction
name|newf
init|=
name|convertToMFunction
argument_list|(
name|newFunction
argument_list|)
decl_stmt|;
if|if
condition|(
name|newf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"new function is invalid"
argument_list|)
throw|;
block|}
name|MFunction
name|oldf
init|=
name|getMFunction
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|funcName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"function "
operator|+
name|funcName
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
comment|// For now only alter name, owner, class name, type
name|oldf
operator|.
name|setFunctionName
argument_list|(
name|normalizeIdentifier
argument_list|(
name|newf
operator|.
name|getFunctionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|oldf
operator|.
name|setDatabase
argument_list|(
name|newf
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|oldf
operator|.
name|setOwnerName
argument_list|(
name|newf
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|oldf
operator|.
name|setOwnerType
argument_list|(
name|newf
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|oldf
operator|.
name|setClassName
argument_list|(
name|newf
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|oldf
operator|.
name|setFunctionType
argument_list|(
name|newf
operator|.
name|getFunctionType
argument_list|()
argument_list|)
expr_stmt|;
comment|// commit the changes
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MFunction
name|mfunc
init|=
name|getMFunction
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|funcName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mfunc
argument_list|)
expr_stmt|;
if|if
condition|(
name|mfunc
operator|!=
literal|null
condition|)
block|{
comment|// TODO: When function privileges are implemented, they should be deleted here.
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|mfunc
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|MFunction
name|getMFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|function
parameter_list|)
block|{
name|MFunction
name|mfunc
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|db
operator|=
name|normalizeIdentifier
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|function
operator|=
name|normalizeIdentifier
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MFunction
operator|.
name|class
argument_list|,
literal|"functionName == function&& database.name == db&& database.catalogName == catName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String function, java.lang.String db, java.lang.String catName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mfunc
operator|=
operator|(
name|MFunction
operator|)
name|query
operator|.
name|execute
argument_list|(
name|function
argument_list|,
name|db
argument_list|,
name|catName
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mfunc
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|mfunc
return|;
block|}
annotation|@
name|Override
specifier|public
name|Function
name|getFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Function
name|func
init|=
literal|null
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|func
operator|=
name|convertToFunction
argument_list|(
name|getMFunction
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|funcName
argument_list|)
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|func
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Function
argument_list|>
name|getAllFunctions
parameter_list|(
name|String
name|catName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MFunction
operator|.
name|class
argument_list|,
literal|"database.catalogName == catName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String catName"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MFunction
argument_list|>
name|allFunctions
init|=
operator|(
name|List
argument_list|<
name|MFunction
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|catName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|allFunctions
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|convertToFunctions
argument_list|(
name|allFunctions
argument_list|)
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|funcs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
comment|// Take the pattern and split it on the | to get all the composing
comment|// patterns
name|List
argument_list|<
name|String
argument_list|>
name|parameterVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|filterBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|appendSimpleCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"database.name"
argument_list|,
operator|new
name|String
index|[]
block|{
name|dbName
block|}
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
name|appendSimpleCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"database.catalogName"
argument_list|,
operator|new
name|String
index|[]
block|{
name|catName
block|}
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
name|appendPatternCondition
argument_list|(
name|filterBuilder
argument_list|,
literal|"functionName"
argument_list|,
name|pattern
argument_list|,
name|parameterVals
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MFunction
operator|.
name|class
argument_list|,
name|filterBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"functionName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"functionName ascending"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|parameterVals
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|parameterVals
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|funcs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|funcs
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|funcs
return|;
block|}
annotation|@
name|Override
specifier|public
name|NotificationEventResponse
name|getNextNotification
parameter_list|(
name|NotificationEventRequest
name|rqst
parameter_list|)
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|NotificationEventResponse
name|result
init|=
operator|new
name|NotificationEventResponse
argument_list|()
decl_stmt|;
name|result
operator|.
name|setEvents
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|long
name|lastEvent
init|=
name|rqst
operator|.
name|getLastEvent
argument_list|()
decl_stmt|;
name|int
name|maxEvents
init|=
name|rqst
operator|.
name|getMaxEvents
argument_list|()
operator|>
literal|0
condition|?
name|rqst
operator|.
name|getMaxEvents
argument_list|()
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MNotificationLog
operator|.
name|class
argument_list|,
literal|"eventId> lastEvent"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.Long lastEvent"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"eventId ascending"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|maxEvents
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MNotificationLog
argument_list|>
name|events
init|=
operator|(
name|Collection
operator|)
name|query
operator|.
name|execute
argument_list|(
name|lastEvent
argument_list|)
decl_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|events
operator|==
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
name|Iterator
argument_list|<
name|MNotificationLog
argument_list|>
name|i
init|=
name|events
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|.
name|addToEvents
argument_list|(
name|translateDbToThrift
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|prepareQuotes
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|dbType
operator|==
name|DatabaseProduct
operator|.
name|MYSQL
condition|)
block|{
assert|assert
name|pm
operator|.
name|currentTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
assert|;
name|JDOConnection
name|jdoConn
init|=
name|pm
operator|.
name|getDataStoreConnection
argument_list|()
decl_stmt|;
name|Statement
name|statement
init|=
literal|null
decl_stmt|;
try|try
block|{
name|statement
operator|=
operator|(
operator|(
name|Connection
operator|)
name|jdoConn
operator|.
name|getNativeConnection
argument_list|()
operator|)
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|statement
operator|.
name|execute
argument_list|(
literal|"SET @@session.sql_mode=ANSI_QUOTES"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|statement
operator|!=
literal|null
condition|)
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|jdoConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|lockForUpdate
parameter_list|()
throws|throws
name|MetaException
block|{
name|String
name|selectQuery
init|=
literal|"select \"NEXT_EVENT_ID\" from \"NOTIFICATION_SEQUENCE\""
decl_stmt|;
name|String
name|selectForUpdateQuery
init|=
name|sqlGenerator
operator|.
name|addForUpdateClause
argument_list|(
name|selectQuery
argument_list|)
decl_stmt|;
operator|new
name|RetryingExecutor
argument_list|(
name|conf
argument_list|,
parameter_list|()
lambda|->
block|{
name|prepareQuotes
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"javax.jdo.query.SQL"
argument_list|,
name|selectForUpdateQuery
argument_list|)
decl_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// only need to execute it to get db Lock
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|static
class|class
name|RetryingExecutor
block|{
interface|interface
name|Command
block|{
name|void
name|process
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RetryingExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxRetries
decl_stmt|;
specifier|private
specifier|final
name|long
name|sleepInterval
decl_stmt|;
specifier|private
name|int
name|currentRetries
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|Command
name|command
decl_stmt|;
name|RetryingExecutor
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|Command
name|command
parameter_list|)
block|{
name|this
operator|.
name|maxRetries
operator|=
name|MetastoreConf
operator|.
name|getIntVar
argument_list|(
name|config
argument_list|,
name|ConfVars
operator|.
name|NOTIFICATION_SEQUENCE_LOCK_MAX_RETRIES
argument_list|)
expr_stmt|;
name|this
operator|.
name|sleepInterval
operator|=
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|config
argument_list|,
name|ConfVars
operator|.
name|NOTIFICATION_SEQUENCE_LOCK_RETRY_SLEEP_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|MetaException
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|command
operator|.
name|process
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to acquire the DB log notification lock: {} out of {}"
operator|+
literal|" retries"
argument_list|,
name|currentRetries
argument_list|,
name|maxRetries
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentRetries
operator|>=
name|maxRetries
condition|)
block|{
name|String
name|message
init|=
literal|"Couldn't acquire the DB log notification lock because we reached the maximum"
operator|+
literal|" # of retries: "
operator|+
name|maxRetries
operator|+
literal|" retries. If this happens too often, then is recommended to "
operator|+
literal|"increase the maximum number of retries on the"
operator|+
literal|" hive.notification.sequence.lock.max.retries configuration"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|message
operator|+
literal|" :: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|currentRetries
operator|++
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Couldn't acquire the DB notification log lock on "
operator|+
name|currentRetries
operator|+
literal|" retry, because the following error: "
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|msg
operator|+
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
name|long
name|getSleepInterval
parameter_list|()
block|{
return|return
name|sleepInterval
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNotificationEvent
parameter_list|(
name|NotificationEvent
name|entry
parameter_list|)
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|lockForUpdate
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MNotificationNextId
operator|.
name|class
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MNotificationNextId
argument_list|>
name|ids
init|=
operator|(
name|Collection
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|MNotificationNextId
name|mNotificationNextId
init|=
literal|null
decl_stmt|;
name|boolean
name|needToPersistId
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|ids
argument_list|)
condition|)
block|{
name|mNotificationNextId
operator|=
operator|new
name|MNotificationNextId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|needToPersistId
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|mNotificationNextId
operator|=
name|ids
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|needToPersistId
operator|=
literal|false
expr_stmt|;
block|}
name|entry
operator|.
name|setEventId
argument_list|(
name|mNotificationNextId
operator|.
name|getNextEventId
argument_list|()
argument_list|)
expr_stmt|;
name|mNotificationNextId
operator|.
name|incrementEventId
argument_list|()
expr_stmt|;
if|if
condition|(
name|needToPersistId
condition|)
block|{
name|pm
operator|.
name|makePersistent
argument_list|(
name|mNotificationNextId
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|makePersistent
argument_list|(
name|translateThriftToDb
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"couldnot get lock for update"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanNotificationEvents
parameter_list|(
name|int
name|olderThan
parameter_list|)
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|long
name|tmp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
operator|-
name|olderThan
decl_stmt|;
name|int
name|tooOld
init|=
operator|(
name|tmp
operator|>
name|Integer
operator|.
name|MAX_VALUE
operator|)
condition|?
literal|0
else|:
operator|(
name|int
operator|)
name|tmp
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MNotificationLog
operator|.
name|class
argument_list|,
literal|"eventTime< tooOld"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.Integer tooOld"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MNotificationLog
argument_list|>
name|toBeRemoved
init|=
operator|(
name|Collection
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tooOld
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|toBeRemoved
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|toBeRemoved
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CurrentNotificationEventId
name|getCurrentNotificationEventId
parameter_list|()
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MNotificationNextId
operator|.
name|class
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MNotificationNextId
argument_list|>
name|ids
init|=
operator|(
name|Collection
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|long
name|id
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|ids
argument_list|)
condition|)
block|{
name|id
operator|=
name|ids
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getNextEventId
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
operator|new
name|CurrentNotificationEventId
argument_list|(
name|id
argument_list|)
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NotificationEventsCountResponse
name|getNotificationEventsCount
parameter_list|(
name|NotificationEventsCountRequest
name|rqst
parameter_list|)
block|{
name|Long
name|result
init|=
literal|0L
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|long
name|fromEventId
init|=
name|rqst
operator|.
name|getFromEventId
argument_list|()
decl_stmt|;
name|String
name|inputDbName
init|=
name|rqst
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|catName
init|=
name|rqst
operator|.
name|isSetCatName
argument_list|()
condition|?
name|rqst
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|queryStr
init|=
literal|"select count(eventId) from "
operator|+
name|MNotificationLog
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" where eventId> fromEventId&& dbName == inputDbName&& catalogName == catName"
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.Long fromEventId, java.lang.String inputDbName,"
operator|+
literal|" java.lang.String catName"
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
name|Long
operator|)
name|query
operator|.
name|execute
argument_list|(
name|fromEventId
argument_list|,
name|inputDbName
argument_list|,
name|catName
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
operator|new
name|NotificationEventsCountResponse
argument_list|(
name|result
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|MNotificationLog
name|translateThriftToDb
parameter_list|(
name|NotificationEvent
name|entry
parameter_list|)
block|{
name|MNotificationLog
name|dbEntry
init|=
operator|new
name|MNotificationLog
argument_list|()
decl_stmt|;
name|dbEntry
operator|.
name|setEventId
argument_list|(
name|entry
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|dbEntry
operator|.
name|setEventTime
argument_list|(
name|entry
operator|.
name|getEventTime
argument_list|()
argument_list|)
expr_stmt|;
name|dbEntry
operator|.
name|setEventType
argument_list|(
name|entry
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|dbEntry
operator|.
name|setCatalogName
argument_list|(
name|entry
operator|.
name|isSetCatName
argument_list|()
condition|?
name|entry
operator|.
name|getCatName
argument_list|()
else|:
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|dbEntry
operator|.
name|setDbName
argument_list|(
name|entry
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|dbEntry
operator|.
name|setTableName
argument_list|(
name|entry
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|dbEntry
operator|.
name|setMessage
argument_list|(
name|entry
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|dbEntry
operator|.
name|setMessageFormat
argument_list|(
name|entry
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dbEntry
return|;
block|}
specifier|private
name|NotificationEvent
name|translateDbToThrift
parameter_list|(
name|MNotificationLog
name|dbEvent
parameter_list|)
block|{
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|()
decl_stmt|;
name|event
operator|.
name|setEventId
argument_list|(
name|dbEvent
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEventTime
argument_list|(
name|dbEvent
operator|.
name|getEventTime
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEventType
argument_list|(
name|dbEvent
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setCatName
argument_list|(
name|dbEvent
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|dbEvent
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|dbEvent
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMessage
argument_list|(
operator|(
name|dbEvent
operator|.
name|getMessage
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMessageFormat
argument_list|(
name|dbEvent
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|event
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFileMetadataSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
index|[]
name|getFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|metadata
parameter_list|,
name|FileMetadataExprType
name|type
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getFileMetadataByExpr
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|FileMetadataExprType
name|type
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|ByteBuffer
index|[]
name|metadatas
parameter_list|,
name|ByteBuffer
index|[]
name|stripeBitsets
parameter_list|,
name|boolean
index|[]
name|eliminated
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|FileMetadataHandler
name|getFileMetadataHandler
parameter_list|(
name|FileMetadataExprType
name|type
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Removed cached classloaders from DataNucleus    * DataNucleus caches classloaders in NucleusContext.    * In UDFs, this can result in classloaders not getting GCed resulting in PermGen leaks.    * This is particularly an issue when using embedded metastore with HiveServer2,    * since the current classloader gets modified with each new add jar,    * becoming the classloader for downstream classes, which DataNucleus ends up using.    * The NucleusContext cache gets freed up only on calling a close on it.    * We're not closing NucleusContext since it does a bunch of other things which we don't want.    * We're not clearing the cache HashMap by calling HashMap#clear to avoid concurrency issues.    */
specifier|public
specifier|static
name|void
name|unCacheDataNucleusClassLoaders
parameter_list|()
block|{
name|PersistenceManagerFactory
name|pmf
init|=
name|ObjectStore
operator|.
name|getPMF
argument_list|()
decl_stmt|;
name|clearOutPmfClassLoaderCache
argument_list|(
name|pmf
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|clearOutPmfClassLoaderCache
parameter_list|(
name|PersistenceManagerFactory
name|pmf
parameter_list|)
block|{
if|if
condition|(
operator|(
name|pmf
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
operator|(
name|pmf
operator|instanceof
name|JDOPersistenceManagerFactory
operator|)
operator|)
condition|)
block|{
return|return;
block|}
comment|// NOTE : This is hacky, and this section of code is fragile depending on DN code varnames
comment|// so it's likely to stop working at some time in the future, especially if we upgrade DN
comment|// versions, so we actively need to find a better way to make sure the leak doesn't happen
comment|// instead of just clearing out the cache after every call.
name|JDOPersistenceManagerFactory
name|jdoPmf
init|=
operator|(
name|JDOPersistenceManagerFactory
operator|)
name|pmf
decl_stmt|;
name|NucleusContext
name|nc
init|=
name|jdoPmf
operator|.
name|getNucleusContext
argument_list|()
decl_stmt|;
try|try
block|{
name|Field
name|pmCache
init|=
name|pmf
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"pmCache"
argument_list|)
decl_stmt|;
name|pmCache
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|JDOPersistenceManager
argument_list|>
name|pmSet
init|=
operator|(
name|Set
argument_list|<
name|JDOPersistenceManager
argument_list|>
operator|)
name|pmCache
operator|.
name|get
argument_list|(
name|pmf
argument_list|)
decl_stmt|;
for|for
control|(
name|JDOPersistenceManager
name|pm
range|:
name|pmSet
control|)
block|{
name|org
operator|.
name|datanucleus
operator|.
name|ExecutionContext
name|ec
init|=
name|pm
operator|.
name|getExecutionContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ec
operator|instanceof
name|org
operator|.
name|datanucleus
operator|.
name|ExecutionContextThreadedImpl
condition|)
block|{
name|ClassLoaderResolver
name|clr
init|=
operator|(
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|ExecutionContextThreadedImpl
operator|)
name|ec
operator|)
operator|.
name|getClassLoaderResolver
argument_list|()
decl_stmt|;
name|clearClr
argument_list|(
name|clr
argument_list|)
expr_stmt|;
block|}
block|}
name|org
operator|.
name|datanucleus
operator|.
name|plugin
operator|.
name|PluginManager
name|pluginManager
init|=
name|jdoPmf
operator|.
name|getNucleusContext
argument_list|()
operator|.
name|getPluginManager
argument_list|()
decl_stmt|;
name|Field
name|registryField
init|=
name|pluginManager
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"registry"
argument_list|)
decl_stmt|;
name|registryField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|org
operator|.
name|datanucleus
operator|.
name|plugin
operator|.
name|PluginRegistry
name|registry
init|=
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|plugin
operator|.
name|PluginRegistry
operator|)
name|registryField
operator|.
name|get
argument_list|(
name|pluginManager
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|instanceof
name|org
operator|.
name|datanucleus
operator|.
name|plugin
operator|.
name|NonManagedPluginRegistry
condition|)
block|{
name|org
operator|.
name|datanucleus
operator|.
name|plugin
operator|.
name|NonManagedPluginRegistry
name|nRegistry
init|=
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|plugin
operator|.
name|NonManagedPluginRegistry
operator|)
name|registry
decl_stmt|;
name|Field
name|clrField
init|=
name|nRegistry
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"clr"
argument_list|)
decl_stmt|;
name|clrField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClassLoaderResolver
name|clr
init|=
operator|(
name|ClassLoaderResolver
operator|)
name|clrField
operator|.
name|get
argument_list|(
name|nRegistry
argument_list|)
decl_stmt|;
name|clearClr
argument_list|(
name|clr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nc
operator|instanceof
name|org
operator|.
name|datanucleus
operator|.
name|PersistenceNucleusContextImpl
condition|)
block|{
name|org
operator|.
name|datanucleus
operator|.
name|PersistenceNucleusContextImpl
name|pnc
init|=
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|PersistenceNucleusContextImpl
operator|)
name|nc
decl_stmt|;
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|types
operator|.
name|TypeManagerImpl
name|tm
init|=
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|types
operator|.
name|TypeManagerImpl
operator|)
name|pnc
operator|.
name|getTypeManager
argument_list|()
decl_stmt|;
name|Field
name|clrField
init|=
name|tm
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"clr"
argument_list|)
decl_stmt|;
name|clrField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClassLoaderResolver
name|clr
init|=
operator|(
name|ClassLoaderResolver
operator|)
name|clrField
operator|.
name|get
argument_list|(
name|tm
argument_list|)
decl_stmt|;
name|clearClr
argument_list|(
name|clr
argument_list|)
expr_stmt|;
name|Field
name|storeMgrField
init|=
name|pnc
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"storeMgr"
argument_list|)
decl_stmt|;
name|storeMgrField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|rdbms
operator|.
name|RDBMSStoreManager
name|storeMgr
init|=
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|rdbms
operator|.
name|RDBMSStoreManager
operator|)
name|storeMgrField
operator|.
name|get
argument_list|(
name|pnc
argument_list|)
decl_stmt|;
name|Field
name|backingStoreField
init|=
name|storeMgr
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"backingStoreByMemberName"
argument_list|)
decl_stmt|;
name|backingStoreField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Store
argument_list|>
name|backingStoreByMemberName
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Store
argument_list|>
operator|)
name|backingStoreField
operator|.
name|get
argument_list|(
name|storeMgr
argument_list|)
decl_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|backingStoreByMemberName
operator|.
name|values
argument_list|()
control|)
block|{
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|rdbms
operator|.
name|scostore
operator|.
name|BaseContainerStore
name|baseStore
init|=
operator|(
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|rdbms
operator|.
name|scostore
operator|.
name|BaseContainerStore
operator|)
name|store
decl_stmt|;
name|clrField
operator|=
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|rdbms
operator|.
name|scostore
operator|.
name|BaseContainerStore
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"clr"
argument_list|)
expr_stmt|;
name|clrField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clr
operator|=
operator|(
name|ClassLoaderResolver
operator|)
name|clrField
operator|.
name|get
argument_list|(
name|baseStore
argument_list|)
expr_stmt|;
name|clearClr
argument_list|(
name|clr
argument_list|)
expr_stmt|;
block|}
block|}
name|Field
name|classLoaderResolverMap
init|=
name|AbstractNucleusContext
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"classLoaderResolverMap"
argument_list|)
decl_stmt|;
name|classLoaderResolverMap
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ClassLoaderResolver
argument_list|>
name|loaderMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|ClassLoaderResolver
argument_list|>
operator|)
name|classLoaderResolverMap
operator|.
name|get
argument_list|(
name|nc
argument_list|)
decl_stmt|;
for|for
control|(
name|ClassLoaderResolver
name|clr
range|:
name|loaderMap
operator|.
name|values
argument_list|()
control|)
block|{
name|clearClr
argument_list|(
name|clr
argument_list|)
expr_stmt|;
block|}
name|classLoaderResolverMap
operator|.
name|set
argument_list|(
name|nc
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ClassLoaderResolver
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removed cached classloaders from DataNucleus NucleusContext"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to remove cached classloaders from DataNucleus NucleusContext"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|clearClr
parameter_list|(
name|ClassLoaderResolver
name|clr
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|clr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clr
operator|instanceof
name|ClassLoaderResolverImpl
condition|)
block|{
name|ClassLoaderResolverImpl
name|clri
init|=
operator|(
name|ClassLoaderResolverImpl
operator|)
name|clr
decl_stmt|;
name|long
name|resourcesCleared
init|=
name|clearFieldMap
argument_list|(
name|clri
argument_list|,
literal|"resources"
argument_list|)
decl_stmt|;
name|long
name|loadedClassesCleared
init|=
name|clearFieldMap
argument_list|(
name|clri
argument_list|,
literal|"loadedClasses"
argument_list|)
decl_stmt|;
name|long
name|unloadedClassesCleared
init|=
name|clearFieldMap
argument_list|(
name|clri
argument_list|,
literal|"unloadedClasses"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cleared ClassLoaderResolverImpl: {}, {}, {}"
argument_list|,
name|resourcesCleared
argument_list|,
name|loadedClassesCleared
argument_list|,
name|unloadedClassesCleared
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|long
name|clearFieldMap
parameter_list|(
name|ClassLoaderResolverImpl
name|clri
parameter_list|,
name|String
name|mapFieldName
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|mapField
init|=
name|ClassLoaderResolverImpl
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
name|mapFieldName
argument_list|)
decl_stmt|;
name|mapField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
operator|)
name|mapField
operator|.
name|get
argument_list|(
name|clri
argument_list|)
decl_stmt|;
name|long
name|sz
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|mapField
operator|.
name|set
argument_list|(
name|clri
argument_list|,
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|WeakValueMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeys
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|getPrimaryKeysInternal
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeysInternal
parameter_list|(
specifier|final
name|String
name|catName
parameter_list|,
specifier|final
name|String
name|db_name_input
parameter_list|,
specifier|final
name|String
name|tbl_name_input
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|String
name|db_name
init|=
name|normalizeIdentifier
argument_list|(
name|db_name_input
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tbl_name
init|=
name|normalizeIdentifier
argument_list|(
name|tbl_name_input
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetListHelper
argument_list|<
name|SQLPrimaryKey
argument_list|>
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getPrimaryKeys
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getPrimaryKeysViaJdo
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeysViaJdo
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
init|=
literal|null
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MConstraint
operator|.
name|class
argument_list|,
literal|"parentTable.tableName == tbl_name&& parentTable.database.name == db_name&&"
operator|+
literal|" parentTable.database.catalogName == cat_name&&"
operator|+
literal|" constraintType == MConstraint.PRIMARY_KEY_CONSTRAINT"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String tbl_name, java.lang.String db_name, "
operator|+
literal|"java.lang.String cat_name"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|constraints
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tbl_name
argument_list|,
name|db_name
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|constraints
argument_list|)
expr_stmt|;
name|primaryKeys
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|constraints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MConstraint
name|currPK
init|=
operator|(
name|MConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|cols
init|=
name|currPK
operator|.
name|getParentColumn
argument_list|()
operator|!=
literal|null
condition|?
name|currPK
operator|.
name|getParentColumn
argument_list|()
operator|.
name|getCols
argument_list|()
else|:
name|currPK
operator|.
name|getParentTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|int
name|enableValidateRely
init|=
name|currPK
operator|.
name|getEnableValidateRely
argument_list|()
decl_stmt|;
name|boolean
name|enable
init|=
operator|(
name|enableValidateRely
operator|&
literal|4
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|validate
init|=
operator|(
name|enableValidateRely
operator|&
literal|2
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|rely
init|=
operator|(
name|enableValidateRely
operator|&
literal|1
operator|)
operator|!=
literal|0
decl_stmt|;
name|SQLPrimaryKey
name|keyCol
init|=
operator|new
name|SQLPrimaryKey
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|cols
operator|.
name|get
argument_list|(
name|currPK
operator|.
name|getParentIntegerIndex
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|currPK
operator|.
name|getPosition
argument_list|()
argument_list|,
name|currPK
operator|.
name|getConstraintName
argument_list|()
argument_list|,
name|enable
argument_list|,
name|validate
argument_list|,
name|rely
argument_list|)
decl_stmt|;
name|keyCol
operator|.
name|setCatName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|primaryKeys
operator|.
name|add
argument_list|(
name|keyCol
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|primaryKeys
return|;
block|}
specifier|private
name|String
name|getPrimaryKeyConstraintName
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MConstraint
operator|.
name|class
argument_list|,
literal|"parentTable.tableName == tbl_name&& parentTable.database.name == db_name&&"
operator|+
literal|" parentTable.database.catalogName == catName&&"
operator|+
literal|" constraintType == MConstraint.PRIMARY_KEY_CONSTRAINT"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String tbl_name, java.lang.String db_name, "
operator|+
literal|"java.lang.String catName"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|constraints
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tbl_name
argument_list|,
name|db_name
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|constraints
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|constraints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MConstraint
name|currPK
init|=
operator|(
name|MConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|=
name|currPK
operator|.
name|getConstraintName
argument_list|()
expr_stmt|;
break|break;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeys
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|parent_db_name
parameter_list|,
name|String
name|parent_tbl_name
parameter_list|,
name|String
name|foreign_db_name
parameter_list|,
name|String
name|foreign_tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|getForeignKeysInternal
argument_list|(
name|catName
argument_list|,
name|parent_db_name
argument_list|,
name|parent_tbl_name
argument_list|,
name|foreign_db_name
argument_list|,
name|foreign_tbl_name
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeysInternal
parameter_list|(
specifier|final
name|String
name|catName
parameter_list|,
specifier|final
name|String
name|parent_db_name_input
parameter_list|,
specifier|final
name|String
name|parent_tbl_name_input
parameter_list|,
specifier|final
name|String
name|foreign_db_name_input
parameter_list|,
specifier|final
name|String
name|foreign_tbl_name_input
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|String
name|parent_db_name
init|=
name|parent_db_name_input
decl_stmt|;
specifier|final
name|String
name|parent_tbl_name
init|=
name|parent_tbl_name_input
decl_stmt|;
specifier|final
name|String
name|foreign_db_name
init|=
name|foreign_db_name_input
decl_stmt|;
specifier|final
name|String
name|foreign_tbl_name
init|=
name|foreign_tbl_name_input
decl_stmt|;
specifier|final
name|String
name|db_name
decl_stmt|;
specifier|final
name|String
name|tbl_name
decl_stmt|;
if|if
condition|(
name|foreign_tbl_name
operator|==
literal|null
condition|)
block|{
comment|// The FK table name might be null if we are retrieving the constraint from the PK side
name|db_name
operator|=
name|parent_db_name_input
expr_stmt|;
name|tbl_name
operator|=
name|parent_tbl_name_input
expr_stmt|;
block|}
else|else
block|{
name|db_name
operator|=
name|foreign_db_name_input
expr_stmt|;
name|tbl_name
operator|=
name|foreign_tbl_name_input
expr_stmt|;
block|}
return|return
operator|new
name|GetListHelper
argument_list|<
name|SQLForeignKey
argument_list|>
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getForeignKeys
argument_list|(
name|catName
argument_list|,
name|parent_db_name
argument_list|,
name|parent_tbl_name
argument_list|,
name|foreign_db_name
argument_list|,
name|foreign_tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getForeignKeysViaJdo
argument_list|(
name|catName
argument_list|,
name|parent_db_name
argument_list|,
name|parent_tbl_name
argument_list|,
name|foreign_db_name
argument_list|,
name|foreign_tbl_name
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeysViaJdo
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|parent_db_name
parameter_list|,
name|String
name|parent_tbl_name
parameter_list|,
name|String
name|foreign_db_name
parameter_list|,
name|String
name|foreign_tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|constraints
init|=
literal|null
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblToConstraint
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|String
name|queryText
init|=
literal|" parentTable.database.catalogName == catName1&&"
operator|+
literal|"childTable.database.catalogName == catName2&& "
operator|+
operator|(
name|parent_tbl_name
operator|!=
literal|null
condition|?
literal|"parentTable.tableName == parent_tbl_name&& "
else|:
literal|""
operator|)
operator|+
operator|(
name|parent_db_name
operator|!=
literal|null
condition|?
literal|" parentTable.database.name == parent_db_name&& "
else|:
literal|""
operator|)
operator|+
operator|(
name|foreign_tbl_name
operator|!=
literal|null
condition|?
literal|" childTable.tableName == foreign_tbl_name&& "
else|:
literal|""
operator|)
operator|+
operator|(
name|foreign_db_name
operator|!=
literal|null
condition|?
literal|" childTable.database.name == foreign_db_name&& "
else|:
literal|""
operator|)
operator|+
literal|" constraintType == MConstraint.FOREIGN_KEY_CONSTRAINT"
decl_stmt|;
name|queryText
operator|=
name|queryText
operator|.
name|trim
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MConstraint
operator|.
name|class
argument_list|,
name|queryText
argument_list|)
expr_stmt|;
name|String
name|paramText
init|=
literal|"java.lang.String catName1, java.lang.String catName2"
operator|+
operator|(
name|parent_tbl_name
operator|==
literal|null
condition|?
literal|""
else|:
literal|", java.lang.String parent_tbl_name"
operator|)
operator|+
operator|(
name|parent_db_name
operator|==
literal|null
condition|?
literal|""
else|:
literal|" , java.lang.String parent_db_name"
operator|)
operator|+
operator|(
name|foreign_tbl_name
operator|==
literal|null
condition|?
literal|""
else|:
literal|", java.lang.String foreign_tbl_name"
operator|)
operator|+
operator|(
name|foreign_db_name
operator|==
literal|null
condition|?
literal|""
else|:
literal|" , java.lang.String foreign_db_name"
operator|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|paramText
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|catName
argument_list|)
expr_stmt|;
comment|// This is not a mistake, catName is in the where clause twice
if|if
condition|(
name|parent_tbl_name
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|parent_tbl_name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent_db_name
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|parent_db_name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|foreign_tbl_name
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|foreign_tbl_name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|foreign_db_name
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|foreign_db_name
argument_list|)
expr_stmt|;
block|}
name|constraints
operator|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|params
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|params
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|constraints
argument_list|)
expr_stmt|;
name|foreignKeys
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|constraints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MConstraint
name|currPKFK
init|=
operator|(
name|MConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|parentCols
init|=
name|currPKFK
operator|.
name|getParentColumn
argument_list|()
operator|!=
literal|null
condition|?
name|currPKFK
operator|.
name|getParentColumn
argument_list|()
operator|.
name|getCols
argument_list|()
else|:
name|currPKFK
operator|.
name|getParentTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|childCols
init|=
name|currPKFK
operator|.
name|getChildColumn
argument_list|()
operator|!=
literal|null
condition|?
name|currPKFK
operator|.
name|getChildColumn
argument_list|()
operator|.
name|getCols
argument_list|()
else|:
name|currPKFK
operator|.
name|getChildTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|int
name|enableValidateRely
init|=
name|currPKFK
operator|.
name|getEnableValidateRely
argument_list|()
decl_stmt|;
name|boolean
name|enable
init|=
operator|(
name|enableValidateRely
operator|&
literal|4
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|validate
init|=
operator|(
name|enableValidateRely
operator|&
literal|2
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|rely
init|=
operator|(
name|enableValidateRely
operator|&
literal|1
operator|)
operator|!=
literal|0
decl_stmt|;
name|String
name|consolidatedtblName
init|=
name|currPKFK
operator|.
name|getParentTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|currPKFK
operator|.
name|getParentTable
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|pkName
decl_stmt|;
if|if
condition|(
name|tblToConstraint
operator|.
name|containsKey
argument_list|(
name|consolidatedtblName
argument_list|)
condition|)
block|{
name|pkName
operator|=
name|tblToConstraint
operator|.
name|get
argument_list|(
name|consolidatedtblName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pkName
operator|=
name|getPrimaryKeyConstraintName
argument_list|(
name|currPKFK
operator|.
name|getParentTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|currPKFK
operator|.
name|getParentTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|currPKFK
operator|.
name|getParentTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|tblToConstraint
operator|.
name|put
argument_list|(
name|consolidatedtblName
argument_list|,
name|pkName
argument_list|)
expr_stmt|;
block|}
name|SQLForeignKey
name|fk
init|=
operator|new
name|SQLForeignKey
argument_list|(
name|currPKFK
operator|.
name|getParentTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|currPKFK
operator|.
name|getParentTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|parentCols
operator|.
name|get
argument_list|(
name|currPKFK
operator|.
name|getParentIntegerIndex
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|currPKFK
operator|.
name|getChildTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|currPKFK
operator|.
name|getChildTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|childCols
operator|.
name|get
argument_list|(
name|currPKFK
operator|.
name|getChildIntegerIndex
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|currPKFK
operator|.
name|getPosition
argument_list|()
argument_list|,
name|currPKFK
operator|.
name|getUpdateRule
argument_list|()
argument_list|,
name|currPKFK
operator|.
name|getDeleteRule
argument_list|()
argument_list|,
name|currPKFK
operator|.
name|getConstraintName
argument_list|()
argument_list|,
name|pkName
argument_list|,
name|enable
argument_list|,
name|validate
argument_list|,
name|rely
argument_list|)
decl_stmt|;
name|fk
operator|.
name|setCatName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|foreignKeys
operator|.
name|add
argument_list|(
name|fk
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|foreignKeys
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getUniqueConstraints
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|getUniqueConstraintsInternal
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getUniqueConstraintsInternal
parameter_list|(
name|String
name|catNameInput
parameter_list|,
specifier|final
name|String
name|db_name_input
parameter_list|,
specifier|final
name|String
name|tbl_name_input
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|String
name|catName
init|=
name|normalizeIdentifier
argument_list|(
name|catNameInput
argument_list|)
decl_stmt|;
specifier|final
name|String
name|db_name
init|=
name|normalizeIdentifier
argument_list|(
name|db_name_input
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tbl_name
init|=
name|normalizeIdentifier
argument_list|(
name|tbl_name_input
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetListHelper
argument_list|<
name|SQLUniqueConstraint
argument_list|>
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getUniqueConstraints
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getUniqueConstraintsViaJdo
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getUniqueConstraintsViaJdo
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
init|=
literal|null
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MConstraint
operator|.
name|class
argument_list|,
literal|"parentTable.tableName == tbl_name&& parentTable.database.name == db_name&& parentTable.database.catalogName == catName&&"
operator|+
literal|" constraintType == MConstraint.UNIQUE_CONSTRAINT"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String tbl_name, java.lang.String db_name, java.lang.String catName"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|constraints
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tbl_name
argument_list|,
name|db_name
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|constraints
argument_list|)
expr_stmt|;
name|uniqueConstraints
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|constraints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MConstraint
name|currConstraint
init|=
operator|(
name|MConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|cols
init|=
name|currConstraint
operator|.
name|getParentColumn
argument_list|()
operator|!=
literal|null
condition|?
name|currConstraint
operator|.
name|getParentColumn
argument_list|()
operator|.
name|getCols
argument_list|()
else|:
name|currConstraint
operator|.
name|getParentTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|int
name|enableValidateRely
init|=
name|currConstraint
operator|.
name|getEnableValidateRely
argument_list|()
decl_stmt|;
name|boolean
name|enable
init|=
operator|(
name|enableValidateRely
operator|&
literal|4
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|validate
init|=
operator|(
name|enableValidateRely
operator|&
literal|2
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|rely
init|=
operator|(
name|enableValidateRely
operator|&
literal|1
operator|)
operator|!=
literal|0
decl_stmt|;
name|uniqueConstraints
operator|.
name|add
argument_list|(
operator|new
name|SQLUniqueConstraint
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|cols
operator|.
name|get
argument_list|(
name|currConstraint
operator|.
name|getParentIntegerIndex
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|currConstraint
operator|.
name|getPosition
argument_list|()
argument_list|,
name|currConstraint
operator|.
name|getConstraintName
argument_list|()
argument_list|,
name|enable
argument_list|,
name|validate
argument_list|,
name|rely
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|uniqueConstraints
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getNotNullConstraints
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|getNotNullConstraintsInternal
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|getDefaultConstraints
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|getDefaultConstraintsInternal
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|getCheckConstraints
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|getCheckConstraintsInternal
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|getDefaultConstraintsInternal
parameter_list|(
name|String
name|catName
parameter_list|,
specifier|final
name|String
name|db_name_input
parameter_list|,
specifier|final
name|String
name|tbl_name_input
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
specifier|final
name|String
name|db_name
init|=
name|normalizeIdentifier
argument_list|(
name|db_name_input
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tbl_name
init|=
name|normalizeIdentifier
argument_list|(
name|tbl_name_input
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetListHelper
argument_list|<
name|SQLDefaultConstraint
argument_list|>
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getDefaultConstraints
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getDefaultConstraintsViaJdo
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|getCheckConstraintsInternal
parameter_list|(
name|String
name|catName
parameter_list|,
specifier|final
name|String
name|db_name_input
parameter_list|,
specifier|final
name|String
name|tbl_name_input
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|String
name|db_name
init|=
name|normalizeIdentifier
argument_list|(
name|db_name_input
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tbl_name
init|=
name|normalizeIdentifier
argument_list|(
name|tbl_name_input
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetListHelper
argument_list|<
name|SQLCheckConstraint
argument_list|>
argument_list|(
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getCheckConstraints
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getCheckConstraintsViaJdo
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|getCheckConstraintsViaJdo
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|checkConstraints
init|=
literal|null
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MConstraint
operator|.
name|class
argument_list|,
literal|"parentTable.tableName == tbl_name&& parentTable.database.name == db_name&&"
operator|+
literal|" parentTable.database.catalogName == catName&& constraintType == MConstraint.CHECK_CONSTRAINT"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String tbl_name, java.lang.String db_name, java.lang.String catName"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|constraints
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tbl_name
argument_list|,
name|db_name
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|constraints
argument_list|)
expr_stmt|;
name|checkConstraints
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|constraints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MConstraint
name|currConstraint
init|=
operator|(
name|MConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|cols
init|=
name|currConstraint
operator|.
name|getParentColumn
argument_list|()
operator|!=
literal|null
condition|?
name|currConstraint
operator|.
name|getParentColumn
argument_list|()
operator|.
name|getCols
argument_list|()
else|:
name|currConstraint
operator|.
name|getParentTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|int
name|enableValidateRely
init|=
name|currConstraint
operator|.
name|getEnableValidateRely
argument_list|()
decl_stmt|;
name|boolean
name|enable
init|=
operator|(
name|enableValidateRely
operator|&
literal|4
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|validate
init|=
operator|(
name|enableValidateRely
operator|&
literal|2
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|rely
init|=
operator|(
name|enableValidateRely
operator|&
literal|1
operator|)
operator|!=
literal|0
decl_stmt|;
name|checkConstraints
operator|.
name|add
argument_list|(
operator|new
name|SQLCheckConstraint
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|cols
operator|.
name|get
argument_list|(
name|currConstraint
operator|.
name|getParentIntegerIndex
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|currConstraint
operator|.
name|getDefaultOrCheckValue
argument_list|()
argument_list|,
name|currConstraint
operator|.
name|getConstraintName
argument_list|()
argument_list|,
name|enable
argument_list|,
name|validate
argument_list|,
name|rely
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|checkConstraints
return|;
block|}
specifier|private
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|getDefaultConstraintsViaJdo
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|defaultConstraints
init|=
literal|null
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MConstraint
operator|.
name|class
argument_list|,
literal|"parentTable.tableName == tbl_name&& parentTable.database.name == db_name&&"
operator|+
literal|" parentTable.database.catalogName == catName&&"
operator|+
literal|" constraintType == MConstraint.DEFAULT_CONSTRAINT"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String tbl_name, java.lang.String db_name, java.lang.String catName"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|constraints
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tbl_name
argument_list|,
name|db_name
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|constraints
argument_list|)
expr_stmt|;
name|defaultConstraints
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|constraints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MConstraint
name|currConstraint
init|=
operator|(
name|MConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|cols
init|=
name|currConstraint
operator|.
name|getParentColumn
argument_list|()
operator|!=
literal|null
condition|?
name|currConstraint
operator|.
name|getParentColumn
argument_list|()
operator|.
name|getCols
argument_list|()
else|:
name|currConstraint
operator|.
name|getParentTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|int
name|enableValidateRely
init|=
name|currConstraint
operator|.
name|getEnableValidateRely
argument_list|()
decl_stmt|;
name|boolean
name|enable
init|=
operator|(
name|enableValidateRely
operator|&
literal|4
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|validate
init|=
operator|(
name|enableValidateRely
operator|&
literal|2
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|rely
init|=
operator|(
name|enableValidateRely
operator|&
literal|1
operator|)
operator|!=
literal|0
decl_stmt|;
name|defaultConstraints
operator|.
name|add
argument_list|(
operator|new
name|SQLDefaultConstraint
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|cols
operator|.
name|get
argument_list|(
name|currConstraint
operator|.
name|getParentIntegerIndex
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|currConstraint
operator|.
name|getDefaultOrCheckValue
argument_list|()
argument_list|,
name|currConstraint
operator|.
name|getConstraintName
argument_list|()
argument_list|,
name|enable
argument_list|,
name|validate
argument_list|,
name|rely
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|defaultConstraints
return|;
block|}
specifier|protected
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getNotNullConstraintsInternal
parameter_list|(
name|String
name|catName
parameter_list|,
specifier|final
name|String
name|db_name_input
parameter_list|,
specifier|final
name|String
name|tbl_name_input
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
specifier|final
name|String
name|db_name
init|=
name|normalizeIdentifier
argument_list|(
name|db_name_input
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tbl_name
init|=
name|normalizeIdentifier
argument_list|(
name|tbl_name_input
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetListHelper
argument_list|<
name|SQLNotNullConstraint
argument_list|>
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getSqlResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|directSql
operator|.
name|getNotNullConstraints
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getJdoResult
parameter_list|(
name|GetHelper
argument_list|<
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getNotNullConstraintsViaJdo
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getNotNullConstraintsViaJdo
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
init|=
literal|null
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MConstraint
operator|.
name|class
argument_list|,
literal|"parentTable.tableName == tbl_name&& parentTable.database.name == db_name&&"
operator|+
literal|" parentTable.database.catalogName == catName&& constraintType == MConstraint.NOT_NULL_CONSTRAINT"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String tbl_name, java.lang.String db_name, java.lang.String catName"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|constraints
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tbl_name
argument_list|,
name|db_name
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|constraints
argument_list|)
expr_stmt|;
name|notNullConstraints
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|constraints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MConstraint
name|currConstraint
init|=
operator|(
name|MConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|cols
init|=
name|currConstraint
operator|.
name|getParentColumn
argument_list|()
operator|!=
literal|null
condition|?
name|currConstraint
operator|.
name|getParentColumn
argument_list|()
operator|.
name|getCols
argument_list|()
else|:
name|currConstraint
operator|.
name|getParentTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|int
name|enableValidateRely
init|=
name|currConstraint
operator|.
name|getEnableValidateRely
argument_list|()
decl_stmt|;
name|boolean
name|enable
init|=
operator|(
name|enableValidateRely
operator|&
literal|4
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|validate
init|=
operator|(
name|enableValidateRely
operator|&
literal|2
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|rely
init|=
operator|(
name|enableValidateRely
operator|&
literal|1
operator|)
operator|!=
literal|0
decl_stmt|;
name|notNullConstraints
operator|.
name|add
argument_list|(
operator|new
name|SQLNotNullConstraint
argument_list|(
name|catName
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|cols
operator|.
name|get
argument_list|(
name|currConstraint
operator|.
name|getParentIntegerIndex
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|currConstraint
operator|.
name|getConstraintName
argument_list|()
argument_list|,
name|enable
argument_list|,
name|validate
argument_list|,
name|rely
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|notNullConstraints
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropConstraint
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|constraintName
parameter_list|,
name|boolean
name|missingOk
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MConstraint
argument_list|>
name|tabConstraints
init|=
name|listAllTableConstraintsWithOptionalConstraintName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|constraintName
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|tabConstraints
argument_list|)
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|tabConstraints
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|missingOk
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"The constraint: "
operator|+
name|constraintName
operator|+
literal|" does not exist for the associated table: "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
throw|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createISchema
parameter_list|(
name|ISchema
name|schema
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MISchema
name|mSchema
init|=
name|convertToMISchema
argument_list|(
name|schema
argument_list|)
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|getMISchema
argument_list|(
name|schema
operator|.
name|getCatName
argument_list|()
argument_list|,
name|schema
operator|.
name|getDbName
argument_list|()
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Schema with name "
operator|+
name|schema
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|schema
operator|.
name|getName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|pm
operator|.
name|makePersistent
argument_list|(
name|mSchema
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterISchema
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|,
name|ISchema
name|newSchema
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MISchema
name|oldMSchema
init|=
name|getMISchema
argument_list|(
name|schemaName
operator|.
name|getCatName
argument_list|()
argument_list|,
name|schemaName
operator|.
name|getDbName
argument_list|()
argument_list|,
name|schemaName
operator|.
name|getSchemaName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldMSchema
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Schema "
operator|+
name|schemaName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
comment|// Don't support changing name or type
name|oldMSchema
operator|.
name|setCompatibility
argument_list|(
name|newSchema
operator|.
name|getCompatibility
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oldMSchema
operator|.
name|setValidationLevel
argument_list|(
name|newSchema
operator|.
name|getValidationLevel
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oldMSchema
operator|.
name|setCanEvolve
argument_list|(
name|newSchema
operator|.
name|isCanEvolve
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|newSchema
operator|.
name|isSetSchemaGroup
argument_list|()
condition|)
block|{
name|oldMSchema
operator|.
name|setSchemaGroup
argument_list|(
name|newSchema
operator|.
name|getSchemaGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newSchema
operator|.
name|isSetDescription
argument_list|()
condition|)
block|{
name|oldMSchema
operator|.
name|setDescription
argument_list|(
name|newSchema
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|ISchema
name|getISchema
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|ISchema
name|schema
init|=
name|convertToISchema
argument_list|(
name|getMISchema
argument_list|(
name|schemaName
operator|.
name|getCatName
argument_list|()
argument_list|,
name|schemaName
operator|.
name|getDbName
argument_list|()
argument_list|,
name|schemaName
operator|.
name|getSchemaName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|schema
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|MISchema
name|getMISchema
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|name
operator|=
name|normalizeIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|catName
operator|=
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MISchema
operator|.
name|class
argument_list|,
literal|"name == schemaName&& db.name == dbname&& db.catalogName == cat"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String schemaName, java.lang.String dbname, java.lang.String cat"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MISchema
name|mSchema
init|=
operator|(
name|MISchema
operator|)
name|query
operator|.
name|execute
argument_list|(
name|name
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mSchema
argument_list|)
expr_stmt|;
return|return
name|mSchema
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropISchema
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MISchema
name|mSchema
init|=
name|getMISchema
argument_list|(
name|schemaName
operator|.
name|getCatName
argument_list|()
argument_list|,
name|schemaName
operator|.
name|getDbName
argument_list|()
argument_list|,
name|schemaName
operator|.
name|getSchemaName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mSchema
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|mSchema
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Schema "
operator|+
name|schemaName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addSchemaVersion
parameter_list|(
name|SchemaVersion
name|schemaVersion
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MSchemaVersion
name|mSchemaVersion
init|=
name|convertToMSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
comment|// Make sure it doesn't already exist
if|if
condition|(
name|getMSchemaVersion
argument_list|(
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Schema name "
operator|+
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|+
literal|" version "
operator|+
name|schemaVersion
operator|.
name|getVersion
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
comment|// Make sure the referenced Schema exists
if|if
condition|(
name|getMISchema
argument_list|(
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Schema "
operator|+
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|pm
operator|.
name|makePersistent
argument_list|(
name|mSchemaVersion
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterSchemaVersion
parameter_list|(
name|SchemaVersionDescriptor
name|version
parameter_list|,
name|SchemaVersion
name|newVersion
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MSchemaVersion
name|oldMSchemaVersion
init|=
name|getMSchemaVersion
argument_list|(
name|version
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|,
name|version
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|version
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldMSchemaVersion
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"No schema version "
operator|+
name|version
operator|+
literal|" exists"
argument_list|)
throw|;
block|}
comment|// We only support changing the SerDe mapping and the state.
if|if
condition|(
name|newVersion
operator|.
name|isSetSerDe
argument_list|()
condition|)
block|{
name|oldMSchemaVersion
operator|.
name|setSerDe
argument_list|(
name|convertToMSerDeInfo
argument_list|(
name|newVersion
operator|.
name|getSerDe
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newVersion
operator|.
name|isSetState
argument_list|()
condition|)
block|{
name|oldMSchemaVersion
operator|.
name|setState
argument_list|(
name|newVersion
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|SchemaVersion
name|getSchemaVersion
parameter_list|(
name|SchemaVersionDescriptor
name|version
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|SchemaVersion
name|schemaVersion
init|=
name|convertToSchemaVersion
argument_list|(
name|getMSchemaVersion
argument_list|(
name|version
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|,
name|version
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|version
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|schemaVersion
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|MSchemaVersion
name|getMSchemaVersion
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|int
name|version
parameter_list|)
block|{
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dbName
operator|=
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|schemaName
operator|=
name|normalizeIdentifier
argument_list|(
name|schemaName
argument_list|)
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MSchemaVersion
operator|.
name|class
argument_list|,
literal|"iSchema.name == schemaName&& iSchema.db.name == dbName&&"
operator|+
literal|"iSchema.db.catalogName == cat&& version == schemaVersion"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String schemaName, java.lang.String dbName,"
operator|+
literal|"java.lang.String cat, java.lang.Integer schemaVersion"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MSchemaVersion
name|mSchemaVersion
init|=
operator|(
name|MSchemaVersion
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|schemaName
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mSchemaVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSchemaVersion
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSchemaVersion
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSchemaVersion
operator|.
name|getSerDe
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|retrieve
argument_list|(
name|mSchemaVersion
operator|.
name|getSerDe
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mSchemaVersion
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|SchemaVersion
name|getLatestSchemaVersion
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|normalizeIdentifier
argument_list|(
name|schemaName
operator|.
name|getSchemaName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|normalizeIdentifier
argument_list|(
name|schemaName
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|catName
init|=
name|normalizeIdentifier
argument_list|(
name|schemaName
operator|.
name|getCatName
argument_list|()
argument_list|)
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MSchemaVersion
operator|.
name|class
argument_list|,
literal|"iSchema.name == schemaName&& iSchema.db.name == dbName&& iSchema.db.catalogName == cat"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String schemaName, java.lang.String dbName, "
operator|+
literal|"java.lang.String cat"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"version descending"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MSchemaVersion
name|mSchemaVersion
init|=
operator|(
name|MSchemaVersion
operator|)
name|query
operator|.
name|execute
argument_list|(
name|name
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mSchemaVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSchemaVersion
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSchemaVersion
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSchemaVersion
operator|.
name|getSerDe
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|retrieve
argument_list|(
name|mSchemaVersion
operator|.
name|getSerDe
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|SchemaVersion
name|version
init|=
name|mSchemaVersion
operator|==
literal|null
condition|?
literal|null
else|:
name|convertToSchemaVersion
argument_list|(
name|mSchemaVersion
argument_list|)
decl_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|version
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SchemaVersion
argument_list|>
name|getAllSchemaVersion
parameter_list|(
name|ISchemaName
name|schemaName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|normalizeIdentifier
argument_list|(
name|schemaName
operator|.
name|getSchemaName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|normalizeIdentifier
argument_list|(
name|schemaName
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|catName
init|=
name|normalizeIdentifier
argument_list|(
name|schemaName
operator|.
name|getCatName
argument_list|()
argument_list|)
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MSchemaVersion
operator|.
name|class
argument_list|,
literal|"iSchema.name == schemaName&&"
operator|+
literal|"iSchema.db.name == dbName&& iSchema.db.catalogName == cat"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String schemaName, java.lang.String dbName,"
operator|+
literal|" java.lang.String cat"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"version descending"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MSchemaVersion
argument_list|>
name|mSchemaVersions
init|=
name|query
operator|.
name|setParameters
argument_list|(
name|name
argument_list|,
name|dbName
argument_list|,
name|catName
argument_list|)
operator|.
name|executeList
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSchemaVersions
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSchemaVersions
operator|==
literal|null
operator|||
name|mSchemaVersions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|SchemaVersion
argument_list|>
name|schemaVersions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mSchemaVersions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MSchemaVersion
name|mSchemaVersion
range|:
name|mSchemaVersions
control|)
block|{
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSchemaVersion
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSchemaVersion
operator|.
name|getSerDe
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|retrieve
argument_list|(
name|mSchemaVersion
operator|.
name|getSerDe
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|schemaVersions
operator|.
name|add
argument_list|(
name|convertToSchemaVersion
argument_list|(
name|mSchemaVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|schemaVersions
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SchemaVersion
argument_list|>
name|getSchemaVersionsByColumns
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|colNamespace
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|colName
operator|==
literal|null
operator|&&
name|colNamespace
operator|==
literal|null
condition|)
block|{
comment|// Don't allow a query that returns everything, it will blow stuff up.
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"You must specify column name or column namespace, else your query "
operator|+
literal|"may be too large"
argument_list|)
throw|;
block|}
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|colName
operator|!=
literal|null
condition|)
block|{
name|colName
operator|=
name|normalizeIdentifier
argument_list|(
name|colName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|normalizeIdentifier
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"select SCHEMA_VERSION_ID from "
operator|+
literal|"SCHEMA_VERSION, COLUMNS_V2 where SCHEMA_VERSION.CD_ID = COLUMNS_V2.CD_ID "
argument_list|)
decl_stmt|;
if|if
condition|(
name|colName
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"and COLUMNS_V2.COLUMN_NAME = :colName "
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"colName"
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|colNamespace
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"and COLUMNS_V2.COMMENT = :colComment "
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"colComment"
argument_list|,
name|colNamespace
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"and COLUMNS_V2.TYPE_NAME = :colType "
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"colType"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getSchemaVersionsByColumns going to execute query "
operator|+
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"With parameters"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
range|:
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
operator|+
literal|" : "
operator|+
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"javax.jdo.query.SQL"
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setClass
argument_list|(
name|MSchemaVersion
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MSchemaVersion
argument_list|>
name|mSchemaVersions
init|=
name|query
operator|.
name|setNamedParameters
argument_list|(
name|parameters
argument_list|)
operator|.
name|executeList
argument_list|()
decl_stmt|;
if|if
condition|(
name|mSchemaVersions
operator|==
literal|null
operator|||
name|mSchemaVersions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSchemaVersions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SchemaVersion
argument_list|>
name|schemaVersions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mSchemaVersions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MSchemaVersion
name|mSchemaVersion
range|:
name|mSchemaVersions
control|)
block|{
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSchemaVersion
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSchemaVersion
operator|.
name|getSerDe
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|retrieve
argument_list|(
name|mSchemaVersion
operator|.
name|getSerDe
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|schemaVersions
operator|.
name|add
argument_list|(
name|convertToSchemaVersion
argument_list|(
name|mSchemaVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|schemaVersions
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|committed
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropSchemaVersion
parameter_list|(
name|SchemaVersionDescriptor
name|version
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MSchemaVersion
name|mSchemaVersion
init|=
name|getMSchemaVersion
argument_list|(
name|version
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|,
name|version
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|version
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|,
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mSchemaVersion
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|mSchemaVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Schema version "
operator|+
name|version
operator|+
literal|"does not exist"
argument_list|)
throw|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|SerDeInfo
name|getSerDeInfo
parameter_list|(
name|String
name|serDeName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MSerDeInfo
name|mSerDeInfo
init|=
name|getMSerDeInfo
argument_list|(
name|serDeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mSerDeInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"No SerDe named "
operator|+
name|serDeName
argument_list|)
throw|;
block|}
name|SerDeInfo
name|serde
init|=
name|convertToSerDeInfo
argument_list|(
name|mSerDeInfo
argument_list|)
decl_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|serde
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|MSerDeInfo
name|getMSerDeInfo
parameter_list|(
name|String
name|serDeName
parameter_list|)
throws|throws
name|MetaException
block|{
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MSerDeInfo
operator|.
name|class
argument_list|,
literal|"name == serDeName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String serDeName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MSerDeInfo
name|mSerDeInfo
init|=
operator|(
name|MSerDeInfo
operator|)
name|query
operator|.
name|execute
argument_list|(
name|serDeName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mSerDeInfo
argument_list|)
expr_stmt|;
return|return
name|mSerDeInfo
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addSerde
parameter_list|(
name|SerDeInfo
name|serde
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|getMSerDeInfo
argument_list|(
name|serde
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Serde with name "
operator|+
name|serde
operator|.
name|getName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|MSerDeInfo
name|mSerde
init|=
name|convertToMSerDeInfo
argument_list|(
name|serde
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mSerde
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|MISchema
name|convertToMISchema
parameter_list|(
name|ISchema
name|schema
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
return|return
operator|new
name|MISchema
argument_list|(
name|schema
operator|.
name|getSchemaType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|normalizeIdentifier
argument_list|(
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|getMDatabase
argument_list|(
name|schema
operator|.
name|getCatName
argument_list|()
argument_list|,
name|schema
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|schema
operator|.
name|getCompatibility
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|schema
operator|.
name|getValidationLevel
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|schema
operator|.
name|isCanEvolve
argument_list|()
argument_list|,
name|schema
operator|.
name|isSetSchemaGroup
argument_list|()
condition|?
name|schema
operator|.
name|getSchemaGroup
argument_list|()
else|:
literal|null
argument_list|,
name|schema
operator|.
name|isSetDescription
argument_list|()
condition|?
name|schema
operator|.
name|getDescription
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
specifier|private
name|ISchema
name|convertToISchema
parameter_list|(
name|MISchema
name|mSchema
parameter_list|)
block|{
if|if
condition|(
name|mSchema
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ISchema
name|schema
init|=
operator|new
name|ISchema
argument_list|(
name|SchemaType
operator|.
name|findByValue
argument_list|(
name|mSchema
operator|.
name|getSchemaType
argument_list|()
argument_list|)
argument_list|,
name|mSchema
operator|.
name|getName
argument_list|()
argument_list|,
name|mSchema
operator|.
name|getDb
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|mSchema
operator|.
name|getDb
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|SchemaCompatibility
operator|.
name|findByValue
argument_list|(
name|mSchema
operator|.
name|getCompatibility
argument_list|()
argument_list|)
argument_list|,
name|SchemaValidation
operator|.
name|findByValue
argument_list|(
name|mSchema
operator|.
name|getValidationLevel
argument_list|()
argument_list|)
argument_list|,
name|mSchema
operator|.
name|getCanEvolve
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mSchema
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schema
operator|.
name|setDescription
argument_list|(
name|mSchema
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mSchema
operator|.
name|getSchemaGroup
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schema
operator|.
name|setSchemaGroup
argument_list|(
name|mSchema
operator|.
name|getSchemaGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|schema
return|;
block|}
specifier|private
name|MSchemaVersion
name|convertToMSchemaVersion
parameter_list|(
name|SchemaVersion
name|schemaVersion
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
operator|new
name|MSchemaVersion
argument_list|(
name|getMISchema
argument_list|(
name|normalizeIdentifier
argument_list|(
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getCatName
argument_list|()
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|schemaVersion
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|schemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|,
name|schemaVersion
operator|.
name|getCreatedAt
argument_list|()
argument_list|,
name|createNewMColumnDescriptor
argument_list|(
name|convertToMFieldSchemas
argument_list|(
name|schemaVersion
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|schemaVersion
operator|.
name|isSetState
argument_list|()
condition|?
name|schemaVersion
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
else|:
literal|0
argument_list|,
name|schemaVersion
operator|.
name|isSetDescription
argument_list|()
condition|?
name|schemaVersion
operator|.
name|getDescription
argument_list|()
else|:
literal|null
argument_list|,
name|schemaVersion
operator|.
name|isSetSchemaText
argument_list|()
condition|?
name|schemaVersion
operator|.
name|getSchemaText
argument_list|()
else|:
literal|null
argument_list|,
name|schemaVersion
operator|.
name|isSetFingerprint
argument_list|()
condition|?
name|schemaVersion
operator|.
name|getFingerprint
argument_list|()
else|:
literal|null
argument_list|,
name|schemaVersion
operator|.
name|isSetName
argument_list|()
condition|?
name|schemaVersion
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|,
name|schemaVersion
operator|.
name|isSetSerDe
argument_list|()
condition|?
name|convertToMSerDeInfo
argument_list|(
name|schemaVersion
operator|.
name|getSerDe
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
return|;
block|}
specifier|private
name|SchemaVersion
name|convertToSchemaVersion
parameter_list|(
name|MSchemaVersion
name|mSchemaVersion
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|mSchemaVersion
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SchemaVersion
name|schemaVersion
init|=
operator|new
name|SchemaVersion
argument_list|(
operator|new
name|ISchemaName
argument_list|(
name|mSchemaVersion
operator|.
name|getiSchema
argument_list|()
operator|.
name|getDb
argument_list|()
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|mSchemaVersion
operator|.
name|getiSchema
argument_list|()
operator|.
name|getDb
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mSchemaVersion
operator|.
name|getiSchema
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|mSchemaVersion
operator|.
name|getVersion
argument_list|()
argument_list|,
name|mSchemaVersion
operator|.
name|getCreatedAt
argument_list|()
argument_list|,
name|convertToFieldSchemas
argument_list|(
name|mSchemaVersion
operator|.
name|getCols
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mSchemaVersion
operator|.
name|getState
argument_list|()
operator|>
literal|0
condition|)
block|{
name|schemaVersion
operator|.
name|setState
argument_list|(
name|SchemaVersionState
operator|.
name|findByValue
argument_list|(
name|mSchemaVersion
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mSchemaVersion
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaVersion
operator|.
name|setDescription
argument_list|(
name|mSchemaVersion
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mSchemaVersion
operator|.
name|getSchemaText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaVersion
operator|.
name|setSchemaText
argument_list|(
name|mSchemaVersion
operator|.
name|getSchemaText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mSchemaVersion
operator|.
name|getFingerprint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaVersion
operator|.
name|setFingerprint
argument_list|(
name|mSchemaVersion
operator|.
name|getFingerprint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mSchemaVersion
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaVersion
operator|.
name|setName
argument_list|(
name|mSchemaVersion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mSchemaVersion
operator|.
name|getSerDe
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaVersion
operator|.
name|setSerDe
argument_list|(
name|convertToSerDeInfo
argument_list|(
name|mSchemaVersion
operator|.
name|getSerDe
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|schemaVersion
return|;
block|}
comment|/**    * This is a cleanup method which is used to rollback a active transaction    * if the success flag is false and close the associated Query object. This method is used    * internally and visible for testing purposes only    * @param success Rollback the current active transaction if false    * @param query Query object which needs to be closed    */
annotation|@
name|VisibleForTesting
name|void
name|rollbackAndCleanup
parameter_list|(
name|boolean
name|success
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This is a cleanup method which is used to rollback a active transaction    * if the success flag is false and close the associated QueryWrapper object. This method is used    * internally and visible for testing purposes only    * @param success Rollback the current active transaction if false    * @param queryWrapper QueryWrapper object which needs to be closed    */
annotation|@
name|VisibleForTesting
name|void
name|rollbackAndCleanup
parameter_list|(
name|boolean
name|success
parameter_list|,
name|QueryWrapper
name|queryWrapper
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|queryWrapper
operator|!=
literal|null
condition|)
block|{
name|queryWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * To make possible to run multiple metastore in unit test    * @param twoMetastoreTesting if we are using multiple metastore in unit test    */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|void
name|setTwoMetastoreTesting
parameter_list|(
name|boolean
name|twoMetastoreTesting
parameter_list|)
block|{
name|forTwoMetastoreTesting
operator|=
name|twoMetastoreTesting
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|Properties
name|getProp
parameter_list|()
block|{
return|return
name|prop
return|;
block|}
specifier|private
name|void
name|checkForConstraintException
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|AlreadyExistsException
block|{
if|if
condition|(
name|getConstraintException
argument_list|(
name|e
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Throwable
name|getConstraintException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
while|while
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|SQLIntegrityConstraintViolationException
condition|)
block|{
return|return
name|t
return|;
block|}
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createResourcePlan
parameter_list|(
name|WMResourcePlan
name|resourcePlan
parameter_list|,
name|String
name|copyFromName
parameter_list|,
name|int
name|defaultPoolSize
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|String
name|rpName
init|=
name|normalizeIdentifier
argument_list|(
name|resourcePlan
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rpName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Resource name cannot be empty."
argument_list|)
throw|;
block|}
name|MWMResourcePlan
name|rp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|copyFromName
operator|==
literal|null
condition|)
block|{
name|Integer
name|queryParallelism
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resourcePlan
operator|.
name|isSetQueryParallelism
argument_list|()
condition|)
block|{
name|queryParallelism
operator|=
name|resourcePlan
operator|.
name|getQueryParallelism
argument_list|()
expr_stmt|;
if|if
condition|(
name|queryParallelism
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Query parallelism should be positive."
argument_list|)
throw|;
block|}
block|}
name|rp
operator|=
operator|new
name|MWMResourcePlan
argument_list|(
name|rpName
argument_list|,
name|queryParallelism
argument_list|,
name|Status
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rp
operator|=
operator|new
name|MWMResourcePlan
argument_list|(
name|rpName
argument_list|,
literal|null
argument_list|,
name|Status
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|rp
argument_list|)
expr_stmt|;
if|if
condition|(
name|copyFromName
operator|!=
literal|null
condition|)
block|{
name|MWMResourcePlan
name|copyFrom
init|=
name|getMWMResourcePlan
argument_list|(
name|copyFromName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|copyFrom
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|copyFromName
argument_list|)
throw|;
block|}
name|copyRpContents
argument_list|(
name|rp
argument_list|,
name|copyFrom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: ideally, this should be moved outside to HiveMetaStore to be shared between
comment|//       all the RawStore-s. Right now there's no method to create a pool.
if|if
condition|(
name|defaultPoolSize
operator|>
literal|0
condition|)
block|{
name|MWMPool
name|defaultPool
init|=
operator|new
name|MWMPool
argument_list|(
name|rp
argument_list|,
literal|"default"
argument_list|,
literal|1.0
argument_list|,
name|defaultPoolSize
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|defaultPool
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPools
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|defaultPool
argument_list|)
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setDefaultPool
argument_list|(
name|defaultPool
argument_list|)
expr_stmt|;
block|}
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|checkForConstraintException
argument_list|(
name|e
argument_list|,
literal|"Resource plan already exists: "
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|copyRpContents
parameter_list|(
name|MWMResourcePlan
name|dest
parameter_list|,
name|MWMResourcePlan
name|src
parameter_list|)
block|{
name|dest
operator|.
name|setQueryParallelism
argument_list|(
name|src
operator|.
name|getQueryParallelism
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|MWMPool
argument_list|>
name|pools
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|MWMPool
argument_list|>
argument_list|>
name|triggersToPools
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MWMPool
name|copyPool
range|:
name|src
operator|.
name|getPools
argument_list|()
control|)
block|{
name|MWMPool
name|pool
init|=
operator|new
name|MWMPool
argument_list|(
name|dest
argument_list|,
name|copyPool
operator|.
name|getPath
argument_list|()
argument_list|,
name|copyPool
operator|.
name|getAllocFraction
argument_list|()
argument_list|,
name|copyPool
operator|.
name|getQueryParallelism
argument_list|()
argument_list|,
name|copyPool
operator|.
name|getSchedulingPolicy
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|pools
operator|.
name|put
argument_list|(
name|copyPool
operator|.
name|getPath
argument_list|()
argument_list|,
name|pool
argument_list|)
expr_stmt|;
if|if
condition|(
name|copyPool
operator|.
name|getTriggers
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MWMTrigger
name|trigger
range|:
name|copyPool
operator|.
name|getTriggers
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|MWMPool
argument_list|>
name|p2t
init|=
name|triggersToPools
operator|.
name|get
argument_list|(
name|trigger
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p2t
operator|==
literal|null
condition|)
block|{
name|p2t
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|triggersToPools
operator|.
name|put
argument_list|(
name|trigger
operator|.
name|getName
argument_list|()
argument_list|,
name|p2t
argument_list|)
expr_stmt|;
block|}
name|p2t
operator|.
name|add
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|pool
operator|.
name|setTriggers
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|dest
operator|.
name|setPools
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|pools
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|src
operator|.
name|getDefaultPool
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dest
operator|.
name|setDefaultPool
argument_list|(
name|pools
operator|.
name|get
argument_list|(
name|src
operator|.
name|getDefaultPool
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|MWMMapping
argument_list|>
name|mappings
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MWMMapping
name|copyMapping
range|:
name|src
operator|.
name|getMappings
argument_list|()
control|)
block|{
name|MWMPool
name|pool
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|copyMapping
operator|.
name|getPool
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|=
name|pools
operator|.
name|get
argument_list|(
name|copyMapping
operator|.
name|getPool
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MWMMapping
name|mapping
init|=
operator|new
name|MWMMapping
argument_list|(
name|dest
argument_list|,
name|copyMapping
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|copyMapping
operator|.
name|getEntityName
argument_list|()
argument_list|,
name|pool
argument_list|,
name|copyMapping
operator|.
name|getOrdering
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
name|dest
operator|.
name|setMappings
argument_list|(
name|mappings
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|MWMTrigger
argument_list|>
name|triggers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MWMTrigger
name|copyTrigger
range|:
name|src
operator|.
name|getTriggers
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|MWMPool
argument_list|>
name|p2t
init|=
name|triggersToPools
operator|.
name|get
argument_list|(
name|copyTrigger
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p2t
operator|==
literal|null
condition|)
block|{
name|p2t
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|MWMTrigger
name|trigger
init|=
operator|new
name|MWMTrigger
argument_list|(
name|dest
argument_list|,
name|copyTrigger
operator|.
name|getName
argument_list|()
argument_list|,
name|copyTrigger
operator|.
name|getTriggerExpression
argument_list|()
argument_list|,
name|copyTrigger
operator|.
name|getActionExpression
argument_list|()
argument_list|,
name|p2t
argument_list|,
name|copyTrigger
operator|.
name|getIsInUnmanaged
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
for|for
control|(
name|MWMPool
name|pool
range|:
name|p2t
control|)
block|{
name|pool
operator|.
name|getTriggers
argument_list|()
operator|.
name|add
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
block|}
name|triggers
operator|.
name|add
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
block|}
name|dest
operator|.
name|setTriggers
argument_list|(
name|triggers
argument_list|)
expr_stmt|;
block|}
specifier|private
name|WMResourcePlan
name|fromMResourcePlan
parameter_list|(
name|MWMResourcePlan
name|mplan
parameter_list|)
block|{
if|if
condition|(
name|mplan
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|WMResourcePlan
name|rp
init|=
operator|new
name|WMResourcePlan
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setName
argument_list|(
name|mplan
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setStatus
argument_list|(
name|WMResourcePlanStatus
operator|.
name|valueOf
argument_list|(
name|mplan
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mplan
operator|.
name|getQueryParallelism
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rp
operator|.
name|setQueryParallelism
argument_list|(
name|mplan
operator|.
name|getQueryParallelism
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mplan
operator|.
name|getDefaultPool
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rp
operator|.
name|setDefaultPoolPath
argument_list|(
name|mplan
operator|.
name|getDefaultPool
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rp
return|;
block|}
specifier|private
name|WMFullResourcePlan
name|fullFromMResourcePlan
parameter_list|(
name|MWMResourcePlan
name|mplan
parameter_list|)
block|{
if|if
condition|(
name|mplan
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|WMFullResourcePlan
name|rp
init|=
operator|new
name|WMFullResourcePlan
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setPlan
argument_list|(
name|fromMResourcePlan
argument_list|(
name|mplan
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MWMPool
name|mPool
range|:
name|mplan
operator|.
name|getPools
argument_list|()
control|)
block|{
name|rp
operator|.
name|addToPools
argument_list|(
name|fromMPool
argument_list|(
name|mPool
argument_list|,
name|mplan
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MWMTrigger
name|mTrigger
range|:
name|mPool
operator|.
name|getTriggers
argument_list|()
control|)
block|{
name|rp
operator|.
name|addToPoolTriggers
argument_list|(
operator|new
name|WMPoolTrigger
argument_list|(
name|mPool
operator|.
name|getPath
argument_list|()
argument_list|,
name|mTrigger
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MWMTrigger
name|mTrigger
range|:
name|mplan
operator|.
name|getTriggers
argument_list|()
control|)
block|{
name|rp
operator|.
name|addToTriggers
argument_list|(
name|fromMWMTrigger
argument_list|(
name|mTrigger
argument_list|,
name|mplan
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MWMMapping
name|mMapping
range|:
name|mplan
operator|.
name|getMappings
argument_list|()
control|)
block|{
name|rp
operator|.
name|addToMappings
argument_list|(
name|fromMMapping
argument_list|(
name|mMapping
argument_list|,
name|mplan
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rp
return|;
block|}
specifier|private
name|WMPool
name|fromMPool
parameter_list|(
name|MWMPool
name|mPool
parameter_list|,
name|String
name|rpName
parameter_list|)
block|{
name|WMPool
name|result
init|=
operator|new
name|WMPool
argument_list|(
name|rpName
argument_list|,
name|mPool
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|mPool
operator|.
name|getAllocFraction
argument_list|()
operator|!=
literal|null
assert|;
name|result
operator|.
name|setAllocFraction
argument_list|(
name|mPool
operator|.
name|getAllocFraction
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|mPool
operator|.
name|getQueryParallelism
argument_list|()
operator|!=
literal|null
assert|;
name|result
operator|.
name|setQueryParallelism
argument_list|(
name|mPool
operator|.
name|getQueryParallelism
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSchedulingPolicy
argument_list|(
name|mPool
operator|.
name|getSchedulingPolicy
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|WMMapping
name|fromMMapping
parameter_list|(
name|MWMMapping
name|mMapping
parameter_list|,
name|String
name|rpName
parameter_list|)
block|{
name|WMMapping
name|result
init|=
operator|new
name|WMMapping
argument_list|(
name|rpName
argument_list|,
name|mMapping
operator|.
name|getEntityType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|mMapping
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mMapping
operator|.
name|getPool
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setPoolPath
argument_list|(
name|mMapping
operator|.
name|getPool
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mMapping
operator|.
name|getOrdering
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setOrdering
argument_list|(
name|mMapping
operator|.
name|getOrdering
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|WMFullResourcePlan
name|getResourcePlan
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|WMFullResourcePlan
name|fullRp
init|=
name|fullFromMResourcePlan
argument_list|(
name|getMWMResourcePlan
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|fullRp
return|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
comment|// Should not happen, edit check is false.
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
operator|(
name|Query
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|MWMResourcePlan
name|getMWMResourcePlan
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|editCheck
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
block|{
return|return
name|getMWMResourcePlan
argument_list|(
name|name
argument_list|,
name|editCheck
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|MWMResourcePlan
name|getMWMResourcePlan
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|editCheck
parameter_list|,
name|boolean
name|mustExist
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
block|{
name|MWMResourcePlan
name|resourcePlan
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|name
operator|=
name|normalizeIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMResourcePlan
operator|.
name|class
argument_list|,
literal|"name == rpname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String rpname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resourcePlan
operator|=
operator|(
name|MWMResourcePlan
operator|)
name|query
operator|.
name|execute
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|resourcePlan
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mustExist
operator|&&
name|resourcePlan
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"There is no resource plan named: "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|editCheck
operator|&&
name|resourcePlan
operator|!=
literal|null
operator|&&
name|resourcePlan
operator|.
name|getStatus
argument_list|()
operator|!=
name|MWMResourcePlan
operator|.
name|Status
operator|.
name|DISABLED
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Resource plan must be disabled to edit it."
argument_list|)
throw|;
block|}
return|return
name|resourcePlan
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|WMResourcePlan
argument_list|>
name|getAllResourcePlans
parameter_list|()
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|WMResourcePlan
argument_list|>
name|resourcePlans
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMResourcePlan
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MWMResourcePlan
argument_list|>
name|mplans
init|=
operator|(
name|List
argument_list|<
name|MWMResourcePlan
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mplans
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|mplans
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MWMResourcePlan
name|mplan
range|:
name|mplans
control|)
block|{
name|resourcePlans
operator|.
name|add
argument_list|(
name|fromMResourcePlan
argument_list|(
name|mplan
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|resourcePlans
return|;
block|}
annotation|@
name|Override
specifier|public
name|WMFullResourcePlan
name|alterResourcePlan
parameter_list|(
name|String
name|name
parameter_list|,
name|WMNullableResourcePlan
name|changes
parameter_list|,
name|boolean
name|canActivateDisabled
parameter_list|,
name|boolean
name|canDeactivate
parameter_list|,
name|boolean
name|isReplace
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|name
operator|=
name|name
operator|==
literal|null
condition|?
literal|null
else|:
name|normalizeIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|isReplace
operator|&&
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Cannot replace without specifying the source plan"
argument_list|)
throw|;
block|}
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
comment|// This method only returns the result when activating a resource plan.
comment|// We could also add a boolean flag to be specified by the caller to see
comment|// when the result might be needed.
name|WMFullResourcePlan
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|isReplace
condition|)
block|{
name|result
operator|=
name|handleAlterReplace
argument_list|(
name|name
argument_list|,
name|changes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|handleSimpleAlter
argument_list|(
name|name
argument_list|,
name|changes
argument_list|,
name|canActivateDisabled
argument_list|,
name|canDeactivate
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|checkForConstraintException
argument_list|(
name|e
argument_list|,
literal|"Resource plan name should be unique: "
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|WMFullResourcePlan
name|handleSimpleAlter
parameter_list|(
name|String
name|name
parameter_list|,
name|WMNullableResourcePlan
name|changes
parameter_list|,
name|boolean
name|canActivateDisabled
parameter_list|,
name|boolean
name|canDeactivate
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|MWMResourcePlan
name|plan
init|=
name|name
operator|==
literal|null
condition|?
name|getActiveMWMResourcePlan
argument_list|()
else|:
name|getMWMResourcePlan
argument_list|(
name|name
argument_list|,
operator|!
name|changes
operator|.
name|isSetStatus
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasNameChange
init|=
name|changes
operator|.
name|isSetName
argument_list|()
operator|&&
operator|!
name|changes
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// Verify that field changes are consistent with what Hive does. Note: we could handle this.
if|if
condition|(
name|changes
operator|.
name|isSetIsSetQueryParallelism
argument_list|()
operator|||
name|changes
operator|.
name|isSetIsSetDefaultPoolPath
argument_list|()
operator|||
name|hasNameChange
condition|)
block|{
if|if
condition|(
name|changes
operator|.
name|isSetStatus
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Cannot change values during status switch."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|plan
operator|.
name|getStatus
argument_list|()
operator|!=
name|MWMResourcePlan
operator|.
name|Status
operator|.
name|DISABLED
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Resource plan must be disabled to edit it."
argument_list|)
throw|;
block|}
block|}
comment|// Handle rename and other changes.
if|if
condition|(
name|changes
operator|.
name|isSetName
argument_list|()
condition|)
block|{
name|String
name|newName
init|=
name|normalizeIdentifier
argument_list|(
name|changes
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Cannot rename to empty value."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|newName
operator|.
name|equals
argument_list|(
name|plan
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|plan
operator|.
name|setName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changes
operator|.
name|isSetIsSetQueryParallelism
argument_list|()
operator|&&
name|changes
operator|.
name|isIsSetQueryParallelism
argument_list|()
condition|)
block|{
if|if
condition|(
name|changes
operator|.
name|isSetQueryParallelism
argument_list|()
condition|)
block|{
if|if
condition|(
name|changes
operator|.
name|getQueryParallelism
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"queryParallelism should be positive."
argument_list|)
throw|;
block|}
name|plan
operator|.
name|setQueryParallelism
argument_list|(
name|changes
operator|.
name|getQueryParallelism
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|plan
operator|.
name|setQueryParallelism
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changes
operator|.
name|isSetIsSetDefaultPoolPath
argument_list|()
operator|&&
name|changes
operator|.
name|isIsSetDefaultPoolPath
argument_list|()
condition|)
block|{
if|if
condition|(
name|changes
operator|.
name|isSetDefaultPoolPath
argument_list|()
condition|)
block|{
name|MWMPool
name|pool
init|=
name|getPool
argument_list|(
name|plan
argument_list|,
name|changes
operator|.
name|getDefaultPoolPath
argument_list|()
argument_list|)
decl_stmt|;
name|plan
operator|.
name|setDefaultPool
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|plan
operator|.
name|setDefaultPool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Handle the status change.
if|if
condition|(
name|changes
operator|.
name|isSetStatus
argument_list|()
condition|)
block|{
return|return
name|switchStatus
argument_list|(
name|name
argument_list|,
name|plan
argument_list|,
name|changes
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|canActivateDisabled
argument_list|,
name|canDeactivate
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|WMFullResourcePlan
name|handleAlterReplace
parameter_list|(
name|String
name|name
parameter_list|,
name|WMNullableResourcePlan
name|changes
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|NoSuchObjectException
throws|,
name|MetaException
block|{
comment|// Verify that field changes are consistent with what Hive does. Note: we could handle this.
if|if
condition|(
name|changes
operator|.
name|isSetQueryParallelism
argument_list|()
operator|||
name|changes
operator|.
name|isSetDefaultPoolPath
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Cannot change values during replace."
argument_list|)
throw|;
block|}
name|boolean
name|isReplacingSpecific
init|=
name|changes
operator|.
name|isSetName
argument_list|()
decl_stmt|;
name|boolean
name|isReplacingActive
init|=
operator|(
name|changes
operator|.
name|isSetStatus
argument_list|()
operator|&&
name|changes
operator|.
name|getStatus
argument_list|()
operator|==
name|WMResourcePlanStatus
operator|.
name|ACTIVE
operator|)
decl_stmt|;
if|if
condition|(
name|isReplacingActive
operator|==
name|isReplacingSpecific
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Must specify a name, or the active plan; received "
operator|+
name|changes
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
operator|(
name|changes
operator|.
name|isSetStatus
argument_list|()
condition|?
name|changes
operator|.
name|getStatus
argument_list|()
else|:
literal|null
operator|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Invalid replace - no name specified"
argument_list|)
throw|;
block|}
name|MWMResourcePlan
name|replacedPlan
init|=
name|isReplacingSpecific
condition|?
name|getMWMResourcePlan
argument_list|(
name|changes
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
else|:
name|getActiveMWMResourcePlan
argument_list|()
decl_stmt|;
name|MWMResourcePlan
name|plan
init|=
name|getMWMResourcePlan
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|replacedPlan
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|plan
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"A plan cannot replace itself"
argument_list|)
throw|;
block|}
comment|// We will inherit the name and status from the plan we are replacing.
name|String
name|newName
init|=
name|replacedPlan
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|copyName
init|=
name|generateOldPlanName
argument_list|(
name|newName
argument_list|,
name|i
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|MWMResourcePlan
name|dup
init|=
name|getMWMResourcePlan
argument_list|(
name|copyName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|dup
operator|==
literal|null
condition|)
block|{
break|break;
block|}
comment|// Note: this can still conflict with parallel transactions. We do not currently handle
comment|//       parallel changes from two admins (by design :().
name|copyName
operator|=
name|generateOldPlanName
argument_list|(
name|newName
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
block|}
name|replacedPlan
operator|.
name|setName
argument_list|(
name|copyName
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setStatus
argument_list|(
name|replacedPlan
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|replacedPlan
operator|.
name|setStatus
argument_list|(
name|MWMResourcePlan
operator|.
name|Status
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
comment|// TODO: add a configurable option to skip the history and just drop it?
return|return
name|plan
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|ACTIVE
condition|?
name|fullFromMResourcePlan
argument_list|(
name|plan
argument_list|)
else|:
literal|null
return|;
block|}
specifier|private
name|String
name|generateOldPlanName
parameter_list|(
name|String
name|newName
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
condition|)
block|{
comment|// Do not use datetime in tests to avoid result changes.
return|return
name|newName
operator|+
literal|"_old_"
operator|+
name|i
return|;
block|}
else|else
block|{
return|return
name|newName
operator|+
literal|"_old_"
operator|+
name|LocalDateTime
operator|.
name|now
argument_list|()
operator|.
name|format
argument_list|(
name|YMDHMS_FORMAT
argument_list|)
operator|+
operator|(
name|i
operator|==
literal|0
condition|?
literal|""
else|:
operator|(
literal|"_"
operator|+
name|i
operator|)
operator|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|WMFullResourcePlan
name|getActiveResourcePlan
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// Note: fullFromMResroucePlan needs to be called inside the txn, otherwise we could have
comment|//       deduplicated this with getActiveMWMResourcePlan.
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|WMFullResourcePlan
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMResourcePlan
operator|.
name|class
argument_list|,
literal|"status == activeStatus"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String activeStatus"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MWMResourcePlan
name|mResourcePlan
init|=
operator|(
name|MWMResourcePlan
operator|)
name|query
operator|.
name|execute
argument_list|(
name|Status
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mResourcePlan
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|fullFromMResourcePlan
argument_list|(
name|mResourcePlan
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|MWMResourcePlan
name|getActiveMWMResourcePlan
parameter_list|()
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|MWMResourcePlan
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMResourcePlan
operator|.
name|class
argument_list|,
literal|"status == activeStatus"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String activeStatus"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
name|MWMResourcePlan
operator|)
name|query
operator|.
name|execute
argument_list|(
name|Status
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|WMFullResourcePlan
name|switchStatus
parameter_list|(
name|String
name|name
parameter_list|,
name|MWMResourcePlan
name|mResourcePlan
parameter_list|,
name|String
name|status
parameter_list|,
name|boolean
name|canActivateDisabled
parameter_list|,
name|boolean
name|canDeactivate
parameter_list|)
throws|throws
name|InvalidOperationException
block|{
name|Status
name|currentStatus
init|=
name|mResourcePlan
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|Status
name|newStatus
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newStatus
operator|=
name|Status
operator|.
name|valueOf
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Invalid status: "
operator|+
name|status
argument_list|)
throw|;
block|}
if|if
condition|(
name|newStatus
operator|==
name|currentStatus
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|doActivate
init|=
literal|false
decl_stmt|,
name|doValidate
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|currentStatus
condition|)
block|{
case|case
name|ACTIVE
case|:
comment|// No status change for active resource plan, first activate another plan.
if|if
condition|(
operator|!
name|canDeactivate
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Resource plan "
operator|+
name|name
operator|+
literal|" is active; activate another plan first, or disable workload management."
argument_list|)
throw|;
block|}
break|break;
case|case
name|DISABLED
case|:
assert|assert
name|newStatus
operator|==
name|Status
operator|.
name|ACTIVE
operator|||
name|newStatus
operator|==
name|Status
operator|.
name|ENABLED
assert|;
name|doValidate
operator|=
literal|true
expr_stmt|;
name|doActivate
operator|=
operator|(
name|newStatus
operator|==
name|Status
operator|.
name|ACTIVE
operator|)
expr_stmt|;
if|if
condition|(
name|doActivate
operator|&&
operator|!
name|canActivateDisabled
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Resource plan "
operator|+
name|name
operator|+
literal|" is disabled and should be enabled before activation (or in the same command)"
argument_list|)
throw|;
block|}
break|break;
case|case
name|ENABLED
case|:
if|if
condition|(
name|newStatus
operator|==
name|Status
operator|.
name|DISABLED
condition|)
block|{
name|mResourcePlan
operator|.
name|setStatus
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// A simple case.
block|}
assert|assert
name|newStatus
operator|==
name|Status
operator|.
name|ACTIVE
assert|;
name|doActivate
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected status "
operator|+
name|currentStatus
argument_list|)
throw|;
block|}
if|if
condition|(
name|doValidate
condition|)
block|{
comment|// Note: this may use additional inputs from the caller, e.g. maximum query
comment|// parallelism in the cluster based on physical constraints.
name|WMValidateResourcePlanResponse
name|response
init|=
name|getResourcePlanErrors
argument_list|(
name|mResourcePlan
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|getErrors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"ResourcePlan: "
operator|+
name|name
operator|+
literal|" is invalid: "
operator|+
name|response
operator|.
name|getErrors
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|doActivate
condition|)
block|{
comment|// Deactivate currently active resource plan.
name|deactivateActiveResourcePlan
argument_list|()
expr_stmt|;
name|mResourcePlan
operator|.
name|setStatus
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
return|return
name|fullFromMResourcePlan
argument_list|(
name|mResourcePlan
argument_list|)
return|;
block|}
else|else
block|{
name|mResourcePlan
operator|.
name|setStatus
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|deactivateActiveResourcePlan
parameter_list|()
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMResourcePlan
operator|.
name|class
argument_list|,
literal|"status == \"ACTIVE\""
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MWMResourcePlan
name|mResourcePlan
init|=
operator|(
name|MWMResourcePlan
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
comment|// We may not have an active resource plan in the start.
if|if
condition|(
name|mResourcePlan
operator|!=
literal|null
condition|)
block|{
name|mResourcePlan
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PoolData
block|{
name|double
name|totalChildrenAllocFraction
init|=
literal|0
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|boolean
name|hasChildren
init|=
literal|false
decl_stmt|;
block|}
specifier|private
name|PoolData
name|getPoolData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PoolData
argument_list|>
name|poolInfo
parameter_list|,
name|String
name|poolPath
parameter_list|)
block|{
name|PoolData
name|poolData
init|=
name|poolInfo
operator|.
name|get
argument_list|(
name|poolPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|poolData
operator|==
literal|null
condition|)
block|{
name|poolData
operator|=
operator|new
name|PoolData
argument_list|()
expr_stmt|;
name|poolInfo
operator|.
name|put
argument_list|(
name|poolPath
argument_list|,
name|poolData
argument_list|)
expr_stmt|;
block|}
return|return
name|poolData
return|;
block|}
specifier|private
name|WMValidateResourcePlanResponse
name|getResourcePlanErrors
parameter_list|(
name|MWMResourcePlan
name|mResourcePlan
parameter_list|)
block|{
name|WMValidateResourcePlanResponse
name|response
init|=
operator|new
name|WMValidateResourcePlanResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setErrors
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setWarnings
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|rpParallelism
init|=
name|mResourcePlan
operator|.
name|getQueryParallelism
argument_list|()
decl_stmt|;
if|if
condition|(
name|rpParallelism
operator|!=
literal|null
operator|&&
name|rpParallelism
operator|<
literal|1
condition|)
block|{
name|response
operator|.
name|addToErrors
argument_list|(
literal|"Query parallelism should for resource plan be positive. Got: "
operator|+
name|rpParallelism
argument_list|)
expr_stmt|;
block|}
name|int
name|totalQueryParallelism
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PoolData
argument_list|>
name|poolInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MWMPool
name|pool
range|:
name|mResourcePlan
operator|.
name|getPools
argument_list|()
control|)
block|{
name|PoolData
name|currentPoolData
init|=
name|getPoolData
argument_list|(
name|poolInfo
argument_list|,
name|pool
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|currentPoolData
operator|.
name|found
operator|=
literal|true
expr_stmt|;
name|String
name|parent
init|=
name|getParentPath
argument_list|(
name|pool
operator|.
name|getPath
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|PoolData
name|parentPoolData
init|=
name|getPoolData
argument_list|(
name|poolInfo
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|parentPoolData
operator|.
name|hasChildren
operator|=
literal|true
expr_stmt|;
name|parentPoolData
operator|.
name|totalChildrenAllocFraction
operator|+=
name|pool
operator|.
name|getAllocFraction
argument_list|()
expr_stmt|;
if|if
condition|(
name|pool
operator|.
name|getQueryParallelism
argument_list|()
operator|!=
literal|null
operator|&&
name|pool
operator|.
name|getQueryParallelism
argument_list|()
operator|<
literal|1
condition|)
block|{
name|response
operator|.
name|addToErrors
argument_list|(
literal|"Invalid query parallelism for pool: "
operator|+
name|pool
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|totalQueryParallelism
operator|+=
name|pool
operator|.
name|getQueryParallelism
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|isValidSchedulingPolicy
argument_list|(
name|pool
operator|.
name|getSchedulingPolicy
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|addToErrors
argument_list|(
literal|"Invalid scheduling policy "
operator|+
name|pool
operator|.
name|getSchedulingPolicy
argument_list|()
operator|+
literal|" for pool: "
operator|+
name|pool
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rpParallelism
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rpParallelism
operator|<
name|totalQueryParallelism
condition|)
block|{
name|response
operator|.
name|addToErrors
argument_list|(
literal|"Sum of all pools' query parallelism: "
operator|+
name|totalQueryParallelism
operator|+
literal|" exceeds resource plan query parallelism: "
operator|+
name|rpParallelism
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rpParallelism
operator|!=
name|totalQueryParallelism
condition|)
block|{
name|response
operator|.
name|addToWarnings
argument_list|(
literal|"Sum of all pools' query parallelism: "
operator|+
name|totalQueryParallelism
operator|+
literal|" is less than resource plan query parallelism: "
operator|+
name|rpParallelism
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|PoolData
argument_list|>
name|entry
range|:
name|poolInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|PoolData
name|poolData
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isRoot
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
comment|// Special case for root parent
if|if
condition|(
name|isRoot
condition|)
block|{
name|poolData
operator|.
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|poolData
operator|.
name|hasChildren
condition|)
block|{
name|response
operator|.
name|addToErrors
argument_list|(
literal|"Root has no children"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
literal|1.0
operator|-
name|poolData
operator|.
name|totalChildrenAllocFraction
argument_list|)
operator|>
literal|0.001
condition|)
block|{
name|response
operator|.
name|addToErrors
argument_list|(
literal|"Sum of root children pools' alloc fraction should be 1.0 got: "
operator|+
name|poolData
operator|.
name|totalChildrenAllocFraction
operator|+
literal|" for pool: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|poolData
operator|.
name|found
condition|)
block|{
name|response
operator|.
name|addToErrors
argument_list|(
literal|"Pool does not exists but has children: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|poolData
operator|.
name|hasChildren
condition|)
block|{
if|if
condition|(
operator|!
name|isRoot
operator|&&
literal|1.0
operator|<=
name|poolData
operator|.
name|totalChildrenAllocFraction
condition|)
block|{
name|response
operator|.
name|addToErrors
argument_list|(
literal|"Sum of children pools' alloc fraction should be less than 1 got: "
operator|+
name|poolData
operator|.
name|totalChildrenAllocFraction
operator|+
literal|" for pool: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// trigger and action expressions are not validated here, since counters are not
comment|// available and grammar check is there in the language itself.
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|WMValidateResourcePlanResponse
name|validateResourcePlan
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|name
operator|=
name|normalizeIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMResourcePlan
operator|.
name|class
argument_list|,
literal|"name == rpName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String rpName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MWMResourcePlan
name|mResourcePlan
init|=
operator|(
name|MWMResourcePlan
operator|)
name|query
operator|.
name|execute
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|mResourcePlan
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Cannot find resourcePlan: "
operator|+
name|name
argument_list|)
throw|;
block|}
comment|// Validate resource plan.
return|return
name|getResourcePlanErrors
argument_list|(
name|mResourcePlan
argument_list|)
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
literal|true
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropResourcePlan
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|name
operator|=
name|normalizeIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMResourcePlan
operator|.
name|class
argument_list|,
literal|"name == rpname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String rpname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MWMResourcePlan
name|resourcePlan
init|=
operator|(
name|MWMResourcePlan
operator|)
name|query
operator|.
name|execute
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|resourcePlan
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourcePlan
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"There is no resource plan named: "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|resourcePlan
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|ACTIVE
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Cannot drop an active resource plan"
argument_list|)
throw|;
block|}
comment|// First, drop all the dependencies.
name|resourcePlan
operator|.
name|setDefaultPool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|resourcePlan
operator|.
name|getTriggers
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|resourcePlan
operator|.
name|getMappings
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|resourcePlan
operator|.
name|getPools
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|deletePersistent
argument_list|(
name|resourcePlan
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createWMTrigger
parameter_list|(
name|WMTrigger
name|trigger
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MWMResourcePlan
name|resourcePlan
init|=
name|getMWMResourcePlan
argument_list|(
name|trigger
operator|.
name|getResourcePlanName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MWMTrigger
name|mTrigger
init|=
operator|new
name|MWMTrigger
argument_list|(
name|resourcePlan
argument_list|,
name|normalizeIdentifier
argument_list|(
name|trigger
operator|.
name|getTriggerName
argument_list|()
argument_list|)
argument_list|,
name|trigger
operator|.
name|getTriggerExpression
argument_list|()
argument_list|,
name|trigger
operator|.
name|getActionExpression
argument_list|()
argument_list|,
literal|null
argument_list|,
name|trigger
operator|.
name|isSetIsInUnmanaged
argument_list|()
operator|&&
name|trigger
operator|.
name|isIsInUnmanaged
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mTrigger
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|checkForConstraintException
argument_list|(
name|e
argument_list|,
literal|"Trigger already exists, use alter: "
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
operator|(
name|Query
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterWMTrigger
parameter_list|(
name|WMTrigger
name|trigger
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MWMResourcePlan
name|resourcePlan
init|=
name|getMWMResourcePlan
argument_list|(
name|trigger
operator|.
name|getResourcePlanName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MWMTrigger
name|mTrigger
init|=
name|getTrigger
argument_list|(
name|resourcePlan
argument_list|,
name|trigger
operator|.
name|getTriggerName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Update the object.
if|if
condition|(
name|trigger
operator|.
name|isSetTriggerExpression
argument_list|()
condition|)
block|{
name|mTrigger
operator|.
name|setTriggerExpression
argument_list|(
name|trigger
operator|.
name|getTriggerExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trigger
operator|.
name|isSetActionExpression
argument_list|()
condition|)
block|{
name|mTrigger
operator|.
name|setActionExpression
argument_list|(
name|trigger
operator|.
name|getActionExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trigger
operator|.
name|isSetIsInUnmanaged
argument_list|()
condition|)
block|{
name|mTrigger
operator|.
name|setIsInUnmanaged
argument_list|(
name|trigger
operator|.
name|isIsInUnmanaged
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|MWMTrigger
name|getTrigger
parameter_list|(
name|MWMResourcePlan
name|resourcePlan
parameter_list|,
name|String
name|triggerName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|triggerName
operator|=
name|normalizeIdentifier
argument_list|(
name|triggerName
argument_list|)
expr_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
comment|// Get the MWMTrigger object from DN
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMTrigger
operator|.
name|class
argument_list|,
literal|"resourcePlan == rp&& name == triggerName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"MWMResourcePlan rp, java.lang.String triggerName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MWMTrigger
name|mTrigger
init|=
operator|(
name|MWMTrigger
operator|)
name|query
operator|.
name|execute
argument_list|(
name|resourcePlan
argument_list|,
name|triggerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mTrigger
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Cannot find trigger with name: "
operator|+
name|triggerName
argument_list|)
throw|;
block|}
name|pm
operator|.
name|retrieve
argument_list|(
name|mTrigger
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|mTrigger
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropWMTrigger
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|resourcePlanName
operator|=
name|normalizeIdentifier
argument_list|(
name|resourcePlanName
argument_list|)
expr_stmt|;
name|triggerName
operator|=
name|normalizeIdentifier
argument_list|(
name|triggerName
argument_list|)
expr_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MWMResourcePlan
name|resourcePlan
init|=
name|getMWMResourcePlan
argument_list|(
name|resourcePlanName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMTrigger
operator|.
name|class
argument_list|,
literal|"resourcePlan == rp&& name == triggerName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"MWMResourcePlan rp, java.lang.String triggerName"
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|deletePersistentAll
argument_list|(
name|resourcePlan
argument_list|,
name|triggerName
argument_list|)
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Cannot delete trigger: "
operator|+
name|triggerName
argument_list|)
throw|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|WMTrigger
argument_list|>
name|getTriggersForResourcePlan
parameter_list|(
name|String
name|resourcePlanName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|List
argument_list|<
name|WMTrigger
argument_list|>
name|triggers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MWMResourcePlan
name|resourcePlan
decl_stmt|;
try|try
block|{
name|resourcePlan
operator|=
name|getMWMResourcePlan
argument_list|(
name|resourcePlanName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
comment|// Should not happen, edit check is false.
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMTrigger
operator|.
name|class
argument_list|,
literal|"resourcePlan == rp"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"MWMResourcePlan rp"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MWMTrigger
argument_list|>
name|mTriggers
init|=
operator|(
name|List
argument_list|<
name|MWMTrigger
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|resourcePlan
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mTriggers
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|mTriggers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MWMTrigger
name|trigger
range|:
name|mTriggers
control|)
block|{
name|triggers
operator|.
name|add
argument_list|(
name|fromMWMTrigger
argument_list|(
name|trigger
argument_list|,
name|resourcePlanName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|triggers
return|;
block|}
specifier|private
name|WMTrigger
name|fromMWMTrigger
parameter_list|(
name|MWMTrigger
name|mTrigger
parameter_list|,
name|String
name|resourcePlanName
parameter_list|)
block|{
name|WMTrigger
name|trigger
init|=
operator|new
name|WMTrigger
argument_list|()
decl_stmt|;
name|trigger
operator|.
name|setResourcePlanName
argument_list|(
name|resourcePlanName
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|setTriggerName
argument_list|(
name|mTrigger
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|setTriggerExpression
argument_list|(
name|mTrigger
operator|.
name|getTriggerExpression
argument_list|()
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|setActionExpression
argument_list|(
name|mTrigger
operator|.
name|getActionExpression
argument_list|()
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|setIsInUnmanaged
argument_list|(
name|mTrigger
operator|.
name|getIsInUnmanaged
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|trigger
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createPool
parameter_list|(
name|WMPool
name|pool
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MWMResourcePlan
name|resourcePlan
init|=
name|getMWMResourcePlan
argument_list|(
name|pool
operator|.
name|getResourcePlanName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|poolParentExists
argument_list|(
name|resourcePlan
argument_list|,
name|pool
operator|.
name|getPoolPath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Pool path is invalid, the parent does not exist"
argument_list|)
throw|;
block|}
name|String
name|policy
init|=
name|pool
operator|.
name|getSchedulingPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|isValidSchedulingPolicy
argument_list|(
name|policy
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Invalid scheduling policy "
operator|+
name|policy
argument_list|)
throw|;
block|}
name|MWMPool
name|mPool
init|=
operator|new
name|MWMPool
argument_list|(
name|resourcePlan
argument_list|,
name|pool
operator|.
name|getPoolPath
argument_list|()
argument_list|,
name|pool
operator|.
name|getAllocFraction
argument_list|()
argument_list|,
name|pool
operator|.
name|getQueryParallelism
argument_list|()
argument_list|,
name|policy
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mPool
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|checkForConstraintException
argument_list|(
name|e
argument_list|,
literal|"Pool already exists: "
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
operator|(
name|Query
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterPool
parameter_list|(
name|WMNullablePool
name|pool
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MWMResourcePlan
name|resourcePlan
init|=
name|getMWMResourcePlan
argument_list|(
name|pool
operator|.
name|getResourcePlanName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MWMPool
name|mPool
init|=
name|getPool
argument_list|(
name|resourcePlan
argument_list|,
name|poolPath
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mPool
argument_list|)
expr_stmt|;
if|if
condition|(
name|pool
operator|.
name|isSetAllocFraction
argument_list|()
condition|)
block|{
name|mPool
operator|.
name|setAllocFraction
argument_list|(
name|pool
operator|.
name|getAllocFraction
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pool
operator|.
name|isSetQueryParallelism
argument_list|()
condition|)
block|{
name|mPool
operator|.
name|setQueryParallelism
argument_list|(
name|pool
operator|.
name|getQueryParallelism
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pool
operator|.
name|isSetIsSetSchedulingPolicy
argument_list|()
operator|&&
name|pool
operator|.
name|isIsSetSchedulingPolicy
argument_list|()
condition|)
block|{
if|if
condition|(
name|pool
operator|.
name|isSetSchedulingPolicy
argument_list|()
condition|)
block|{
name|String
name|policy
init|=
name|pool
operator|.
name|getSchedulingPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|isValidSchedulingPolicy
argument_list|(
name|policy
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Invalid scheduling policy "
operator|+
name|policy
argument_list|)
throw|;
block|}
name|mPool
operator|.
name|setSchedulingPolicy
argument_list|(
name|pool
operator|.
name|getSchedulingPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mPool
operator|.
name|setSchedulingPolicy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pool
operator|.
name|isSetPoolPath
argument_list|()
operator|&&
operator|!
name|pool
operator|.
name|getPoolPath
argument_list|()
operator|.
name|equals
argument_list|(
name|mPool
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|moveDescendents
argument_list|(
name|resourcePlan
argument_list|,
name|mPool
operator|.
name|getPath
argument_list|()
argument_list|,
name|pool
operator|.
name|getPoolPath
argument_list|()
argument_list|)
expr_stmt|;
name|mPool
operator|.
name|setPath
argument_list|(
name|pool
operator|.
name|getPoolPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
operator|(
name|Query
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|MWMPool
name|getPool
parameter_list|(
name|MWMResourcePlan
name|resourcePlan
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|poolPath
operator|=
name|normalizeIdentifier
argument_list|(
name|poolPath
argument_list|)
expr_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMPool
operator|.
name|class
argument_list|,
literal|"resourcePlan == rp&& path == poolPath"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"MWMResourcePlan rp, java.lang.String poolPath"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MWMPool
name|mPool
init|=
operator|(
name|MWMPool
operator|)
name|query
operator|.
name|execute
argument_list|(
name|resourcePlan
argument_list|,
name|poolPath
argument_list|)
decl_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|mPool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Cannot find pool: "
operator|+
name|poolPath
argument_list|)
throw|;
block|}
name|pm
operator|.
name|retrieve
argument_list|(
name|mPool
argument_list|)
expr_stmt|;
return|return
name|mPool
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|moveDescendents
parameter_list|(
name|MWMResourcePlan
name|resourcePlan
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|newPoolPath
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
if|if
condition|(
operator|!
name|poolParentExists
argument_list|(
name|resourcePlan
argument_list|,
name|newPoolPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Pool path is invalid, the parent does not exist"
argument_list|)
throw|;
block|}
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMPool
operator|.
name|class
argument_list|,
literal|"resourcePlan == rp&& path.startsWith(poolPath)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"MWMResourcePlan rp, java.lang.String poolPath"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MWMPool
argument_list|>
name|descPools
init|=
operator|(
name|List
argument_list|<
name|MWMPool
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|resourcePlan
argument_list|,
name|path
operator|+
literal|"."
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|descPools
argument_list|)
expr_stmt|;
for|for
control|(
name|MWMPool
name|pool
range|:
name|descPools
control|)
block|{
name|pool
operator|.
name|setPath
argument_list|(
name|newPoolPath
operator|+
name|pool
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
name|path
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getParentPath
parameter_list|(
name|String
name|poolPath
parameter_list|,
name|String
name|defValue
parameter_list|)
block|{
name|int
name|idx
init|=
name|poolPath
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|defValue
return|;
block|}
return|return
name|poolPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|poolParentExists
parameter_list|(
name|MWMResourcePlan
name|resourcePlan
parameter_list|,
name|String
name|poolPath
parameter_list|)
block|{
name|String
name|parent
init|=
name|getParentPath
argument_list|(
name|poolPath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|getPool
argument_list|(
name|resourcePlan
argument_list|,
name|parent
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropWMPool
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|poolPath
operator|=
name|normalizeIdentifier
argument_list|(
name|poolPath
argument_list|)
expr_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MWMResourcePlan
name|resourcePlan
init|=
name|getMWMResourcePlan
argument_list|(
name|resourcePlanName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourcePlan
operator|.
name|getDefaultPool
argument_list|()
operator|!=
literal|null
operator|&&
name|resourcePlan
operator|.
name|getDefaultPool
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|poolPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Cannot drop default pool of a resource plan"
argument_list|)
throw|;
block|}
if|if
condition|(
name|poolHasChildren
argument_list|(
name|resourcePlan
argument_list|,
name|poolPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Pool has children cannot drop."
argument_list|)
throw|;
block|}
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMPool
operator|.
name|class
argument_list|,
literal|"resourcePlan == rp&& path.startsWith(poolPath)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"MWMResourcePlan rp, java.lang.String poolPath"
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|deletePersistentAll
argument_list|(
name|resourcePlan
argument_list|,
name|poolPath
argument_list|)
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Cannot delete pool: "
operator|+
name|poolPath
argument_list|)
throw|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|getConstraintException
argument_list|(
name|e
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Please remove all mappings for this pool."
argument_list|)
throw|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|poolHasChildren
parameter_list|(
name|MWMResourcePlan
name|resourcePlan
parameter_list|,
name|String
name|poolPath
parameter_list|)
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMPool
operator|.
name|class
argument_list|,
literal|"resourcePlan == rp&& path.startsWith(poolPath)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"MWMResourcePlan rp, java.lang.String poolPath"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"count(this)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Long
name|count
init|=
operator|(
name|Long
operator|)
name|query
operator|.
name|execute
argument_list|(
name|resourcePlan
argument_list|,
name|poolPath
operator|+
literal|"."
argument_list|)
decl_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|count
operator|!=
literal|null
operator|&&
name|count
operator|>
literal|0
return|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createOrUpdateWMMapping
parameter_list|(
name|WMMapping
name|mapping
parameter_list|,
name|boolean
name|update
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|EntityType
name|entityType
init|=
name|EntityType
operator|.
name|valueOf
argument_list|(
name|mapping
operator|.
name|getEntityType
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|entityName
init|=
name|normalizeIdentifier
argument_list|(
name|mapping
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MWMResourcePlan
name|resourcePlan
init|=
name|getMWMResourcePlan
argument_list|(
name|mapping
operator|.
name|getResourcePlanName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MWMPool
name|pool
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|isSetPoolPath
argument_list|()
condition|)
block|{
name|pool
operator|=
name|getPool
argument_list|(
name|resourcePlan
argument_list|,
name|mapping
operator|.
name|getPoolPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|update
condition|)
block|{
name|MWMMapping
name|mMapping
init|=
operator|new
name|MWMMapping
argument_list|(
name|resourcePlan
argument_list|,
name|entityType
argument_list|,
name|entityName
argument_list|,
name|pool
argument_list|,
name|mapping
operator|.
name|getOrdering
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mMapping
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMMapping
operator|.
name|class
argument_list|,
literal|"resourcePlan == rp&& entityType == type "
operator|+
literal|"&& entityName == name"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"MWMResourcePlan rp, java.lang.String type, java.lang.String name"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MWMMapping
name|mMapping
init|=
operator|(
name|MWMMapping
operator|)
name|query
operator|.
name|execute
argument_list|(
name|resourcePlan
argument_list|,
name|entityType
operator|.
name|toString
argument_list|()
argument_list|,
name|entityName
argument_list|)
decl_stmt|;
name|mMapping
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropWMMapping
parameter_list|(
name|WMMapping
name|mapping
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|String
name|entityType
init|=
name|mapping
operator|.
name|getEntityType
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|String
name|entityName
init|=
name|normalizeIdentifier
argument_list|(
name|mapping
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MWMResourcePlan
name|resourcePlan
init|=
name|getMWMResourcePlan
argument_list|(
name|mapping
operator|.
name|getResourcePlanName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|query
operator|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MWMMapping
operator|.
name|class
argument_list|,
literal|"resourcePlan == rp&& entityType == type&& entityName == name"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"MWMResourcePlan rp, java.lang.String type, java.lang.String name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|deletePersistentAll
argument_list|(
name|resourcePlan
argument_list|,
name|entityType
argument_list|,
name|entityName
argument_list|)
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Cannot delete mapping."
argument_list|)
throw|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createWMTriggerToPoolMapping
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MWMResourcePlan
name|resourcePlan
init|=
name|getMWMResourcePlan
argument_list|(
name|resourcePlanName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MWMPool
name|pool
init|=
name|getPool
argument_list|(
name|resourcePlan
argument_list|,
name|poolPath
argument_list|)
decl_stmt|;
name|MWMTrigger
name|trigger
init|=
name|getTrigger
argument_list|(
name|resourcePlan
argument_list|,
name|triggerName
argument_list|)
decl_stmt|;
name|pool
operator|.
name|getTriggers
argument_list|()
operator|.
name|add
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|getPools
argument_list|()
operator|.
name|add
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
operator|(
name|Query
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropWMTriggerToPoolMapping
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MWMResourcePlan
name|resourcePlan
init|=
name|getMWMResourcePlan
argument_list|(
name|resourcePlanName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MWMPool
name|pool
init|=
name|getPool
argument_list|(
name|resourcePlan
argument_list|,
name|poolPath
argument_list|)
decl_stmt|;
name|MWMTrigger
name|trigger
init|=
name|getTrigger
argument_list|(
name|resourcePlan
argument_list|,
name|triggerName
argument_list|)
decl_stmt|;
name|pool
operator|.
name|getTriggers
argument_list|()
operator|.
name|remove
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|getPools
argument_list|()
operator|.
name|remove
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollbackAndCleanup
argument_list|(
name|commited
argument_list|,
operator|(
name|Query
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRuntimeStat
parameter_list|(
name|RuntimeStat
name|stat
parameter_list|)
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"runtimeStat: "
operator|+
name|stat
argument_list|)
expr_stmt|;
name|MRuntimeStat
name|mStat
init|=
name|MRuntimeStat
operator|.
name|fromThrift
argument_list|(
name|stat
argument_list|)
decl_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|pm
operator|.
name|makePersistent
argument_list|(
name|mStat
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|deleteRuntimeStats
parameter_list|(
name|int
name|maxRetainSecs
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|maxRetainSecs
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"runtime stats retention is disabled"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|int
name|maxCreateTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
operator|-
name|maxRetainSecs
decl_stmt|;
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MRuntimeStat
operator|.
name|class
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFilter
argument_list|(
literal|"createTime<= maxCreateTime"
argument_list|)
expr_stmt|;
name|q
operator|.
name|declareParameters
argument_list|(
literal|"int maxCreateTime"
argument_list|)
expr_stmt|;
name|long
name|deleted
init|=
name|q
operator|.
name|deletePersistentAll
argument_list|(
name|maxCreateTime
argument_list|)
decl_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|deleted
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RuntimeStat
argument_list|>
name|getRuntimeStats
parameter_list|(
name|int
name|maxEntries
parameter_list|,
name|int
name|maxCreateTime
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|RuntimeStat
argument_list|>
name|stats
init|=
name|getMRuntimeStats
argument_list|(
name|maxEntries
argument_list|,
name|maxCreateTime
argument_list|)
decl_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|stats
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|RuntimeStat
argument_list|>
name|getMRuntimeStats
parameter_list|(
name|int
name|maxEntries
parameter_list|,
name|int
name|maxCreateTime
parameter_list|)
block|{
name|Query
argument_list|<
name|MRuntimeStat
argument_list|>
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MRuntimeStat
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"createTime descending"
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxCreateTime
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|setFilter
argument_list|(
literal|"createTime< "
operator|+
name|maxCreateTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxEntries
operator|<
literal|0
condition|)
block|{
name|maxEntries
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|List
argument_list|<
name|RuntimeStat
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MRuntimeStat
argument_list|>
name|res
init|=
operator|(
name|List
argument_list|<
name|MRuntimeStat
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|int
name|totalEntries
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MRuntimeStat
name|mRuntimeStat
range|:
name|res
control|)
block|{
name|pm
operator|.
name|retrieve
argument_list|(
name|mRuntimeStat
argument_list|)
expr_stmt|;
name|totalEntries
operator|+=
name|mRuntimeStat
operator|.
name|getWeight
argument_list|()
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|MRuntimeStat
operator|.
name|toThrift
argument_list|(
name|mRuntimeStat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalEntries
operator|>=
name|maxEntries
condition|)
block|{
break|break;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

