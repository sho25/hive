begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ISchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaCompatibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaValidation
import|;
end_import

begin_class
specifier|public
class|class
name|ISchemaBuilder
block|{
specifier|private
name|SchemaType
name|schemaType
decl_stmt|;
comment|// required
specifier|private
name|String
name|name
decl_stmt|;
comment|// required
specifier|private
name|String
name|dbName
decl_stmt|;
comment|// required
specifier|private
name|SchemaCompatibility
name|compatibility
decl_stmt|;
comment|// required
specifier|private
name|SchemaValidation
name|validationLevel
decl_stmt|;
comment|// required
specifier|private
name|boolean
name|canEvolve
decl_stmt|;
comment|// required
specifier|private
name|String
name|schemaGroup
decl_stmt|;
comment|// optional
specifier|private
name|String
name|description
decl_stmt|;
comment|// optional
specifier|public
name|ISchemaBuilder
parameter_list|()
block|{
name|compatibility
operator|=
name|SchemaCompatibility
operator|.
name|BACKWARD
expr_stmt|;
name|validationLevel
operator|=
name|SchemaValidation
operator|.
name|ALL
expr_stmt|;
name|canEvolve
operator|=
literal|true
expr_stmt|;
name|dbName
operator|=
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
expr_stmt|;
block|}
specifier|public
name|ISchemaBuilder
name|setSchemaType
parameter_list|(
name|SchemaType
name|schemaType
parameter_list|)
block|{
name|this
operator|.
name|schemaType
operator|=
name|schemaType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ISchemaBuilder
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ISchemaBuilder
name|setDbName
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ISchemaBuilder
name|setCompatibility
parameter_list|(
name|SchemaCompatibility
name|compatibility
parameter_list|)
block|{
name|this
operator|.
name|compatibility
operator|=
name|compatibility
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ISchemaBuilder
name|setValidationLevel
parameter_list|(
name|SchemaValidation
name|validationLevel
parameter_list|)
block|{
name|this
operator|.
name|validationLevel
operator|=
name|validationLevel
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ISchemaBuilder
name|setCanEvolve
parameter_list|(
name|boolean
name|canEvolve
parameter_list|)
block|{
name|this
operator|.
name|canEvolve
operator|=
name|canEvolve
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ISchemaBuilder
name|setSchemaGroup
parameter_list|(
name|String
name|schemaGroup
parameter_list|)
block|{
name|this
operator|.
name|schemaGroup
operator|=
name|schemaGroup
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ISchemaBuilder
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ISchema
name|build
parameter_list|()
throws|throws
name|MetaException
block|{
if|if
condition|(
name|schemaType
operator|==
literal|null
operator|||
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"You must provide a schemaType and name"
argument_list|)
throw|;
block|}
name|ISchema
name|iSchema
init|=
operator|new
name|ISchema
argument_list|(
name|schemaType
argument_list|,
name|name
argument_list|,
name|dbName
argument_list|,
name|compatibility
argument_list|,
name|validationLevel
argument_list|,
name|canEvolve
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaGroup
operator|!=
literal|null
condition|)
name|iSchema
operator|.
name|setSchemaGroup
argument_list|(
name|schemaGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
name|iSchema
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
return|return
name|iSchema
return|;
block|}
block|}
end_class

end_unit

