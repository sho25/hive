begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CreationMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMFullResourcePlan
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Deadline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|FileMetadataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartFilterExprUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartitionExpressionProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|RawStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CurrentNotificationEventId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FileMetadataExprType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventsCountRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventsCountResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionValuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMNullablePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMNullableResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMValidateResourcePlanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
operator|.
name|SharedCache
operator|.
name|StatsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|aggr
operator|.
name|ColumnStatsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|aggr
operator|.
name|ColumnStatsAggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|RolePrincipalGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLNotNullConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLUniqueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|ColStatsObjWithSourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|// TODO filter->expr
end_comment

begin_comment
comment|// TODO functionCache
end_comment

begin_comment
comment|// TODO constraintCache
end_comment

begin_comment
comment|// TODO need sd nested copy?
end_comment

begin_comment
comment|// TODO String intern
end_comment

begin_comment
comment|// TODO restructure HBaseStore
end_comment

begin_comment
comment|// TODO monitor event queue
end_comment

begin_comment
comment|// TODO initial load slow?
end_comment

begin_comment
comment|// TODO size estimation
end_comment

begin_comment
comment|// TODO factor in extrapolation logic (using partitions found) during aggregate stats calculation
end_comment

begin_class
specifier|public
class|class
name|CachedStore
implements|implements
name|RawStore
implements|,
name|Configurable
block|{
specifier|private
specifier|static
name|ScheduledExecutorService
name|cacheUpdateMaster
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|ReentrantReadWriteLock
name|databaseCacheLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AtomicBoolean
name|isDatabaseCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ReentrantReadWriteLock
name|tableCacheLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AtomicBoolean
name|isTableCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ReentrantReadWriteLock
name|partitionCacheLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AtomicBoolean
name|isPartitionCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ReentrantReadWriteLock
name|tableColStatsCacheLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AtomicBoolean
name|isTableColStatsCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ReentrantReadWriteLock
name|partitionColStatsCacheLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ReentrantReadWriteLock
name|partitionAggrColStatsCacheLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AtomicBoolean
name|isPartitionAggrColStatsCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AtomicBoolean
name|isPartitionColStatsCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|Pattern
argument_list|>
name|whitelistPatterns
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|Pattern
argument_list|>
name|blacklistPatterns
init|=
literal|null
decl_stmt|;
specifier|private
name|RawStore
name|rawStore
init|=
literal|null
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|PartitionExpressionProxy
name|expressionProxy
init|=
literal|null
decl_stmt|;
comment|// Default value set to 100 milliseconds for test purpose
specifier|private
specifier|static
name|long
name|cacheRefreshPeriod
init|=
literal|100
decl_stmt|;
comment|/** A wrapper over SharedCache. Allows one to get SharedCache safely; should be merged    *  into SharedCache itself (see the TODO on the class). */
specifier|private
specifier|static
specifier|final
name|SharedCacheWrapper
name|sharedCacheWrapper
init|=
operator|new
name|SharedCacheWrapper
argument_list|()
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CachedStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
class|class
name|TableWrapper
block|{
name|Table
name|t
decl_stmt|;
name|String
name|location
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
name|byte
index|[]
name|sdHash
decl_stmt|;
name|TableWrapper
parameter_list|(
name|Table
name|t
parameter_list|,
name|byte
index|[]
name|sdHash
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
name|this
operator|.
name|sdHash
operator|=
name|sdHash
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|()
block|{
return|return
name|t
return|;
block|}
specifier|public
name|byte
index|[]
name|getSdHash
parameter_list|()
block|{
return|return
name|sdHash
return|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
block|}
specifier|static
class|class
name|PartitionWrapper
block|{
name|Partition
name|p
decl_stmt|;
name|String
name|location
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
name|byte
index|[]
name|sdHash
decl_stmt|;
name|PartitionWrapper
parameter_list|(
name|Partition
name|p
parameter_list|,
name|byte
index|[]
name|sdHash
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|sdHash
operator|=
name|sdHash
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
specifier|public
name|Partition
name|getPartition
parameter_list|()
block|{
return|return
name|p
return|;
block|}
specifier|public
name|byte
index|[]
name|getSdHash
parameter_list|()
block|{
return|return
name|sdHash
return|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
block|}
specifier|static
class|class
name|StorageDescriptorWrapper
block|{
name|StorageDescriptor
name|sd
decl_stmt|;
name|int
name|refCount
init|=
literal|0
decl_stmt|;
name|StorageDescriptorWrapper
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|int
name|refCount
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
name|this
operator|.
name|refCount
operator|=
name|refCount
expr_stmt|;
block|}
specifier|public
name|StorageDescriptor
name|getSd
parameter_list|()
block|{
return|return
name|sd
return|;
block|}
specifier|public
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|refCount
return|;
block|}
block|}
specifier|public
name|CachedStore
parameter_list|()
block|{   }
specifier|public
specifier|static
name|void
name|initSharedCacheAsync
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|clazzName
init|=
literal|null
decl_stmt|;
name|boolean
name|isEnabled
init|=
literal|false
decl_stmt|;
try|try
block|{
name|clazzName
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|RAW_STORE_IMPL
argument_list|)
expr_stmt|;
name|isEnabled
operator|=
name|JavaUtils
operator|.
name|getClass
argument_list|(
name|clazzName
argument_list|,
name|RawStore
operator|.
name|class
argument_list|)
operator|.
name|isAssignableFrom
argument_list|(
name|CachedStore
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot instantiate metastore class"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore is not enabled; using "
operator|+
name|clazzName
argument_list|)
expr_stmt|;
return|return;
block|}
name|sharedCacheWrapper
operator|.
name|startInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|rawStoreClassName
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CACHED_RAW_STORE_IMPL
argument_list|,
name|ObjectStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rawStore
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|rawStore
operator|=
operator|(
name|JavaUtils
operator|.
name|getClass
argument_list|(
name|rawStoreClassName
argument_list|,
name|RawStore
operator|.
name|class
argument_list|)
operator|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot instantiate "
operator|+
name|rawStoreClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|rawStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Configuration
name|oldConf
init|=
name|this
operator|.
name|conf
decl_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
if|if
condition|(
name|expressionProxy
operator|!=
literal|null
operator|&&
name|conf
operator|!=
name|oldConf
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected setConf when we were already configured"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expressionProxy
operator|==
literal|null
operator|||
name|conf
operator|!=
name|oldConf
condition|)
block|{
name|expressionProxy
operator|=
name|PartFilterExprUtil
operator|.
name|createExpressionProxy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|initBlackListWhiteList
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|void
name|prewarm
parameter_list|(
name|RawStore
name|rawStore
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Prevents throwing exceptions in our raw store calls since we're not using RawStoreProxy
name|Deadline
operator|.
name|registerIfNot
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
name|rawStore
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of databases to prewarm: "
operator|+
name|dbNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|getUnsafe
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dbNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dbName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
comment|// Cache partition column stats
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getColStatsForDatabase"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColStatsObjWithSourceInfo
argument_list|>
name|colStatsForDB
init|=
name|rawStore
operator|.
name|getPartitionColStatsForDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
if|if
condition|(
name|colStatsForDB
operator|!=
literal|null
condition|)
block|{
name|sharedCache
operator|.
name|addPartitionColStatsToCache
argument_list|(
name|colStatsForDB
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Caching database: {}. Cached {} / {} databases so far."
argument_list|,
name|dbName
argument_list|,
name|i
argument_list|,
name|dbNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addDatabaseToCache
argument_list|(
name|dbName
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
init|=
name|rawStore
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tables in database: {} : {}"
argument_list|,
name|dbName
argument_list|,
name|tblNames
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tblNames
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|tblName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblNames
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not caching database: {}'s table: {}"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Caching database: {}'s table: {}. Cached {} / {}  tables so far."
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|j
argument_list|,
name|tblNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|table
operator|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// It is possible the table is deleted during fetching tables of the database,
comment|// in that case, continue with the next table
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
operator|&&
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitions"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|rawStore
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partition
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Cache table column stats
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|MetaStoreUtils
operator|.
name|getColumnNamesForTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getTableColumnStatistics"
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|tableColStats
init|=
name|rawStore
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|tableColStats
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|tableColStats
operator|.
name|getStatsObjSize
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|sharedCache
operator|.
name|addTableColStatsToCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tableColStats
operator|.
name|getStatsObj
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Cache aggregate stats for all partitions of a table and for all but default partition
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|rawStore
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|partNames
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|partNames
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|AggrStats
name|aggrStatsAllPartitions
init|=
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
comment|// Remove default partition from partition names and get aggregate
comment|// stats again
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|table
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|String
name|defaultPartitionValue
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|rawStore
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|partKeys
control|)
block|{
name|partCols
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|defaultPartitionValue
argument_list|)
expr_stmt|;
block|}
name|String
name|defaultPartitionName
init|=
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|partCols
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|partNames
operator|.
name|remove
argument_list|(
name|defaultPartitionName
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStatsAllButDefaultPartition
init|=
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|addAggregateStatsToCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrStatsAllPartitions
argument_list|,
name|aggrStatsAllButDefaultPartition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Notify all blocked threads that prewarm is complete now
name|sharedCacheWrapper
operator|.
name|notifyAllBlocked
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|initBlackListWhiteList
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|whitelistPatterns
operator|==
literal|null
operator|||
name|blacklistPatterns
operator|==
literal|null
condition|)
block|{
name|whitelistPatterns
operator|=
name|createPatterns
argument_list|(
name|MetastoreConf
operator|.
name|getAsString
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHED_OBJECTS_WHITELIST
argument_list|)
argument_list|)
expr_stmt|;
name|blacklistPatterns
operator|=
name|createPatterns
argument_list|(
name|MetastoreConf
operator|.
name|getAsString
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHED_OBJECTS_BLACKLIST
argument_list|)
argument_list|)
expr_stmt|;
comment|// The last specified blacklist pattern gets precedence
name|Collections
operator|.
name|reverse
argument_list|(
name|blacklistPatterns
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|synchronized
specifier|static
name|void
name|startCacheUpdateService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|cacheUpdateMaster
operator|==
literal|null
condition|)
block|{
name|initBlackListWhiteList
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
condition|)
block|{
name|cacheRefreshPeriod
operator|=
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHE_UPDATE_FREQUENCY
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"CachedStore: starting cache update service (run every {} ms"
argument_list|,
name|cacheRefreshPeriod
argument_list|)
expr_stmt|;
name|cacheUpdateMaster
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
name|Executors
operator|.
name|defaultThreadFactory
argument_list|()
operator|.
name|newThread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
literal|"CachedStore-CacheUpdateService: Thread-"
operator|+
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cacheUpdateMaster
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|CacheUpdateMasterWork
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|0
argument_list|,
name|cacheRefreshPeriod
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|synchronized
specifier|static
name|boolean
name|stopCacheUpdateService
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|boolean
name|tasksStoppedBeforeShutdown
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cacheUpdateMaster
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CachedStore: shutting down cache update service"
argument_list|)
expr_stmt|;
try|try
block|{
name|tasksStoppedBeforeShutdown
operator|=
name|cacheUpdateMaster
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CachedStore: cache update service was interrupted while waiting for tasks to "
operator|+
literal|"complete before shutting down. Will make a hard stop now."
argument_list|)
expr_stmt|;
block|}
name|cacheUpdateMaster
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|cacheUpdateMaster
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|tasksStoppedBeforeShutdown
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|void
name|setCacheRefreshPeriod
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|cacheRefreshPeriod
operator|=
name|time
expr_stmt|;
block|}
specifier|static
class|class
name|CacheUpdateMasterWork
implements|implements
name|Runnable
block|{
specifier|private
name|boolean
name|isFirstRun
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|RawStore
name|rawStore
decl_stmt|;
specifier|public
name|CacheUpdateMasterWork
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|rawStoreClassName
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CACHED_RAW_STORE_IMPL
argument_list|,
name|ObjectStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|rawStore
operator|=
name|JavaUtils
operator|.
name|getClass
argument_list|(
name|rawStoreClassName
argument_list|,
name|RawStore
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|rawStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|MetaException
name|e
parameter_list|)
block|{
comment|// MetaException here really means ClassNotFound (see the utility method).
comment|// So, if any of these happen, that means we can never succeed.
name|sharedCacheWrapper
operator|.
name|updateInitState
argument_list|(
name|e
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot instantiate "
operator|+
name|rawStoreClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|isFirstRun
condition|)
block|{
while|while
condition|(
name|isFirstRun
condition|)
block|{
try|try
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Prewarming CachedStore"
argument_list|)
expr_stmt|;
name|prewarm
argument_list|(
name|rawStore
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CachedStore initialized"
argument_list|)
expr_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time taken in prewarming = "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|/
literal|1000000
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Prewarm failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sharedCacheWrapper
operator|.
name|updateInitState
argument_list|(
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|sharedCacheWrapper
operator|.
name|updateInitState
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|isFirstRun
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// TODO: prewarm and update can probably be merged.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|update
parameter_list|()
block|{
name|Deadline
operator|.
name|registerIfNot
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached objects"
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
name|rawStore
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbNames
operator|!=
literal|null
condition|)
block|{
comment|// Update the database in cache
name|updateDatabases
argument_list|(
name|rawStore
argument_list|,
name|dbNames
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
block|{
name|updateDatabasePartitionColStats
argument_list|(
name|rawStore
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
comment|// Update the tables in cache
name|updateTables
argument_list|(
name|rawStore
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
init|=
name|getAllTablesInternal
argument_list|(
name|dbName
argument_list|,
name|sharedCacheWrapper
operator|.
name|getUnsafe
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Update the partitions for a table in cache
name|updateTablePartitions
argument_list|(
name|rawStore
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// Update the table column stats for a table in cache
name|updateTableColStats
argument_list|(
name|rawStore
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// Update aggregate column stats cache
name|updateAggregateStatsCache
argument_list|(
name|rawStore
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Updating CachedStore: error happen when refresh; ignoring"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateDatabasePartitionColStats
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
try|try
block|{
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getColStatsForDatabasePartitions"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColStatsObjWithSourceInfo
argument_list|>
name|colStatsForDB
init|=
name|rawStore
operator|.
name|getPartitionColStatsForDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
if|if
condition|(
name|colStatsForDB
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|partitionColStatsCacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|tryLock
argument_list|()
condition|)
block|{
comment|// Skip background updates if we detect change
if|if
condition|(
name|isPartitionColStatsCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping partition column stats cache update; the partition column stats "
operator|+
literal|"list we have is dirty."
argument_list|)
expr_stmt|;
return|return;
block|}
name|sharedCacheWrapper
operator|.
name|getUnsafe
argument_list|()
operator|.
name|refreshPartitionColStats
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|colStatsForDB
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating CachedStore: unable to read partitions column stats of database: {}"
argument_list|,
name|dbName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|partitionColStatsCacheLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
condition|)
block|{
name|partitionColStatsCacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Update cached aggregate stats for all partitions of a table and for all
comment|// but default partition
specifier|private
name|void
name|updateAggregateStatsCache
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
try|try
block|{
name|Table
name|table
init|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|rawStore
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|MetaStoreUtils
operator|.
name|getColumnNamesForTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|partNames
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|partNames
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getAggregareStatsForAllPartitions"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStatsAllPartitions
init|=
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
comment|// Remove default partition from partition names and get aggregate stats again
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|table
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|String
name|defaultPartitionValue
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|rawStore
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|partKeys
control|)
block|{
name|partCols
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|defaultPartitionValue
argument_list|)
expr_stmt|;
block|}
name|String
name|defaultPartitionName
init|=
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|partCols
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|partNames
operator|.
name|remove
argument_list|(
name|defaultPartitionName
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getAggregareStatsForAllPartitionsExceptDefault"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStatsAllButDefaultPartition
init|=
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|aggrStatsAllPartitions
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|aggrStatsAllButDefaultPartition
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|partitionAggrColStatsCacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|tryLock
argument_list|()
condition|)
block|{
comment|// Skip background updates if we detect change
if|if
condition|(
name|isPartitionAggrColStatsCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping aggregate column stats cache update; the aggregate column stats we "
operator|+
literal|"have is dirty."
argument_list|)
expr_stmt|;
return|return;
block|}
name|sharedCacheWrapper
operator|.
name|getUnsafe
argument_list|()
operator|.
name|refreshAggregateStatsCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|aggrStatsAllPartitions
argument_list|,
name|aggrStatsAllButDefaultPartition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating CachedStore: unable to read aggregate column stats of table: "
operator|+
name|tblName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|partitionAggrColStatsCacheLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
condition|)
block|{
name|partitionAggrColStatsCacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateDatabases
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
parameter_list|)
block|{
comment|// Prepare the list of databases
name|List
argument_list|<
name|Database
argument_list|>
name|databases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
block|{
name|Database
name|db
decl_stmt|;
try|try
block|{
name|db
operator|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|databases
operator|.
name|add
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating CachedStore: database - "
operator|+
name|dbName
operator|+
literal|" does not exist."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update the cached database objects
try|try
block|{
if|if
condition|(
name|databaseCacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|tryLock
argument_list|()
condition|)
block|{
comment|// Skip background updates if we detect change
if|if
condition|(
name|isDatabaseCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping database cache update; the database list we have is dirty."
argument_list|)
expr_stmt|;
return|return;
block|}
name|sharedCacheWrapper
operator|.
name|getUnsafe
argument_list|()
operator|.
name|refreshDatabases
argument_list|(
name|databases
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|databaseCacheLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
condition|)
block|{
name|databaseCacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Update the cached table objects
specifier|private
name|void
name|updateTables
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
init|=
name|rawStore
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Table
name|table
init|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|tables
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableCacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|tryLock
argument_list|()
condition|)
block|{
comment|// Skip background updates if we detect change
if|if
condition|(
name|isTableCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping table cache update; the table list we have is dirty."
argument_list|)
expr_stmt|;
return|return;
block|}
name|sharedCacheWrapper
operator|.
name|getUnsafe
argument_list|()
operator|.
name|refreshTables
argument_list|(
name|dbName
argument_list|,
name|tables
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating CachedStore: unable to read tables for database - "
operator|+
name|dbName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tableCacheLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
condition|)
block|{
name|tableCacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Update the cached partition objects for a table
specifier|private
name|void
name|updateTablePartitions
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
try|try
block|{
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartitions"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|rawStore
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
if|if
condition|(
name|partitionCacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|tryLock
argument_list|()
condition|)
block|{
comment|// Skip background updates if we detect change
if|if
condition|(
name|isPartitionCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping partition cache update; the partition list we have is dirty."
argument_list|)
expr_stmt|;
return|return;
block|}
name|sharedCacheWrapper
operator|.
name|getUnsafe
argument_list|()
operator|.
name|refreshPartitions
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|partitions
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating CachedStore: unable to read partitions of table: "
operator|+
name|tblName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|partitionCacheLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
condition|)
block|{
name|partitionCacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Update the cached col stats for this table
specifier|private
name|void
name|updateTableColStats
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
try|try
block|{
name|Table
name|table
init|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|MetaStoreUtils
operator|.
name|getColumnNamesForTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getTableColumnStatistics"
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|tableColStats
init|=
name|rawStore
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Deadline
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
if|if
condition|(
name|tableColStats
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tableColStatsCacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|tryLock
argument_list|()
condition|)
block|{
comment|// Skip background updates if we detect change
if|if
condition|(
name|isTableColStatsCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping table column stats cache update; the table column stats list we "
operator|+
literal|"have is dirty."
argument_list|)
expr_stmt|;
return|return;
block|}
name|sharedCacheWrapper
operator|.
name|getUnsafe
argument_list|()
operator|.
name|refreshTableColStats
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|tableColStats
operator|.
name|getStatsObj
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating CachedStore: unable to read table column stats of table: "
operator|+
name|tblName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tableColStatsCacheLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
condition|)
block|{
name|tableColStatsCacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|getConf
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|rawStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|openTransaction
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|openTransaction
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commitTransaction
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|commitTransaction
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isActiveTransaction
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|isActiveTransaction
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackTransaction
parameter_list|()
block|{
name|rawStore
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return;
try|try
block|{
comment|// Wait if background cache update is happening
name|databaseCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isDatabaseCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addDatabaseToCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|db
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|databaseCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Database
name|getDatabase
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|SharedCache
name|sharedCache
decl_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
return|return
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
return|;
block|}
try|try
block|{
name|sharedCache
operator|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
comment|// TODO: why doesn't getDatabase throw MetaEx?
block|}
name|Database
name|db
init|=
name|sharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|()
throw|;
block|}
return|return
name|db
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropDatabase
parameter_list|(
name|String
name|dbname
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|dropDatabase
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return
name|succ
return|;
try|try
block|{
comment|// Wait if background cache update is happening
name|databaseCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isDatabaseCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeDatabaseFromCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbname
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|databaseCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|alterDatabase
parameter_list|(
name|String
name|dbName
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|alterDatabase
argument_list|(
name|dbName
argument_list|,
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return
name|succ
return|;
try|try
block|{
comment|// Wait if background cache update is happening
name|databaseCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isDatabaseCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterDatabaseInCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|databaseCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
return|return
name|rawStore
operator|.
name|getDatabases
argument_list|(
name|pattern
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|sharedCache
operator|.
name|listCachedDatabases
argument_list|()
control|)
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|dbName
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|()
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
return|return
name|rawStore
operator|.
name|getAllDatabases
argument_list|()
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|sharedCache
operator|.
name|listCachedDatabases
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|createType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|createType
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getType
argument_list|(
name|typeName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|dropType
argument_list|(
name|typeName
argument_list|)
return|;
block|}
specifier|private
name|void
name|validateTableType
parameter_list|(
name|Table
name|tbl
parameter_list|)
block|{
comment|// If the table has property EXTERNAL set, update table type
comment|// accordingly
name|String
name|tableType
init|=
name|tbl
operator|.
name|getTableType
argument_list|()
decl_stmt|;
name|boolean
name|isExternal
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
if|if
condition|(
name|isExternal
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isExternal
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|tbl
operator|.
name|setTableType
argument_list|(
name|tableType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return;
name|validateTableType
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Wait if background cache update is happening
name|tableCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isTableCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return
name|succ
return|;
comment|// Remove table
try|try
block|{
comment|// Wait if background table cache update is happening
name|tableCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isTableCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove table col stats
try|try
block|{
comment|// Wait if background table col stats cache update is happening
name|tableColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isTableColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeTableColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|MetaException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|unsetPrivileges
argument_list|()
expr_stmt|;
name|tbl
operator|.
name|setRewriteEnabled
argument_list|(
name|tbl
operator|.
name|isRewriteEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tbl
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartition
parameter_list|(
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|String
name|dbName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return
name|succ
return|;
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove aggregate partition col stats for this table
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionAggrColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeAggrPartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|addPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|parts
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return
name|succ
return|;
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove aggregate partition col stats for this table
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionAggrColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeAggrPartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|PartitionSpecProxy
name|partitionSpec
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|addPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionSpec
argument_list|,
name|ifNotExists
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return
name|succ
return|;
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
operator|.
name|PartitionIterator
name|iterator
init|=
name|partitionSpec
operator|.
name|getPartitionIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Partition
name|part
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|sharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove aggregate partition col stats for this table
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionAggrColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeAggrPartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|Partition
name|part
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
comment|// TODO Manage privileges
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"partition values="
operator|+
name|part_vals
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|part
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|doesPartitionExist
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|doesPartitionExist
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|sharedCache
operator|.
name|existPartitionFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return
name|succ
return|;
comment|// Remove partition
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removePartitionFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove partition col stats
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removePartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove aggregate partition col stats for this table
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionAggrColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeAggrPartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
decl_stmt|;
return|return
name|parts
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|newTable
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|String
name|newTblName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|&&
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|newTblName
argument_list|)
condition|)
block|{
return|return;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|newTblName
argument_list|)
condition|)
block|{
name|validateTableType
argument_list|(
name|newTable
argument_list|)
expr_stmt|;
comment|// Update table cache
try|try
block|{
comment|// Wait if background cache update is happening
name|tableCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isTableCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterTableInCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Update partition cache (key might have changed since table name is a
comment|// component of key)
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterTableInPartitionCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Remove the table and its cached partitions, stats etc,
comment|// since it does not pass the whitelist/blacklist filter.
comment|// Remove table
try|try
block|{
comment|// Wait if background cache update is happening
name|tableCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isTableCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove partitions
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removePartitionsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove partition col stats
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removePartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Update aggregate partition col stats keys wherever applicable
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionAggrColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterTableInAggrPartitionColStatsCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateCreationMetadata
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tablename
parameter_list|,
name|CreationMetadata
name|cm
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|updateCreationMetadata
argument_list|(
name|dbname
argument_list|,
name|tablename
argument_list|,
name|cm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|isBlacklistWhitelistEmpty
argument_list|(
name|conf
argument_list|)
operator|||
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
name|pattern
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|sharedCache
operator|.
name|listCachedTables
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|,
name|TableType
name|tableType
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|isBlacklistWhitelistEmpty
argument_list|(
name|conf
argument_list|)
operator|||
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
name|pattern
argument_list|,
name|tableType
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|sharedCache
operator|.
name|listCachedTables
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|pattern
argument_list|)
operator|&&
name|table
operator|.
name|getTableType
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMaterializedViewsForRewriting
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getMaterializedViewsForRewriting
argument_list|(
name|dbName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableMeta
argument_list|>
name|getTableMeta
parameter_list|(
name|String
name|dbNames
parameter_list|,
name|String
name|tableNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO Check if all required tables are allowed, if so, get it from cache
if|if
condition|(
operator|!
name|isBlacklistWhitelistEmpty
argument_list|(
name|conf
argument_list|)
operator|||
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTableMeta
argument_list|(
name|dbNames
argument_list|,
name|tableNames
argument_list|,
name|tableTypes
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|sharedCache
operator|.
name|getTableMeta
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbNames
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tableNames
argument_list|)
argument_list|,
name|tableTypes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|boolean
name|missSomeInCache
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
name|missSomeInCache
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
name|missSomeInCache
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTableObjectsByName
argument_list|(
name|dbName
argument_list|,
name|tblNames
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
name|tbl
operator|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
name|tables
operator|.
name|add
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
return|return
name|tables
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|isBlacklistWhitelistEmpty
argument_list|(
name|conf
argument_list|)
operator|||
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
return|return
name|rawStore
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|getAllTablesInternal
argument_list|(
name|dbName
argument_list|,
name|sharedCache
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getAllTablesInternal
parameter_list|(
name|String
name|dbName
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Table
name|tbl
range|:
name|sharedCache
operator|.
name|listCachedTables
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
control|)
block|{
name|tblNames
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tblNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_tables
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
block|{
if|if
condition|(
operator|!
name|isBlacklistWhitelistEmpty
argument_list|(
name|conf
argument_list|)
operator|||
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
return|return
name|rawStore
operator|.
name|listTableNamesByFilter
argument_list|(
name|dbName
argument_list|,
name|filter
argument_list|,
name|max_tables
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|sharedCache
operator|.
name|listCachedTables
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|filter
argument_list|)
operator|&&
operator|(
name|max_tables
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|max_tables
operator|)
condition|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max_parts
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Table
name|t
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max_parts
argument_list|)
control|)
block|{
if|if
condition|(
name|max_parts
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|max_parts
condition|)
block|{
name|partitionNames
operator|.
name|add
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitionNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|PartitionValuesResponse
name|listPartitionValues
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|boolean
name|applyDistinct
parameter_list|,
name|String
name|filter
parameter_list|,
name|boolean
name|ascending
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|order
parameter_list|,
name|long
name|maxParts
parameter_list|)
throws|throws
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNamesByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO Translate filter -> expr
return|return
name|rawStore
operator|.
name|listPartitionNamesByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|,
name|max_parts
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return;
comment|// Update partition cache
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterPartitionInCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Update partition column stats cache
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterPartitionInColStatsCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove aggregate partition col stats for this table
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionAggrColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeAggrPartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValsList
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partValsList
argument_list|,
name|newParts
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return;
comment|// Update partition cache
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partValsList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|partValsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Partition
name|newPart
init|=
name|newParts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|alterPartitionInCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Update partition column stats cache
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partValsList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|partValsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Partition
name|newPart
init|=
name|newParts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|alterPartitionInColStatsCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove aggregate partition col stats for this table
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionAggrColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeAggrPartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addIndex
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|addIndex
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Index
name|getIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getIndex
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|indexName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|dropIndex
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|indexName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|getIndexes
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getIndexes
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listIndexNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|listIndexNames
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterIndex
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|baseTblName
parameter_list|,
name|String
name|name
parameter_list|,
name|Index
name|newIndex
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterIndex
argument_list|(
name|dbname
argument_list|,
name|baseTblName
argument_list|,
name|name
argument_list|,
name|newIndex
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|getPartitionNamesPrunedByExprNoTxn
parameter_list|(
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|result
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|maxParts
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultPartName
operator|==
literal|null
operator|||
name|defaultPartName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|defaultPartName
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
expr_stmt|;
block|}
return|return
name|expressionProxy
operator|.
name|filterPartitionsByExpr
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|expr
argument_list|,
name|defaultPartName
argument_list|,
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|,
name|maxParts
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getPartitionsByExpr
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|)
throws|throws
name|TException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartitionsByExpr
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|maxParts
argument_list|,
name|result
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|boolean
name|hasUnknownPartitions
init|=
name|getPartitionNamesPrunedByExprNoTxn
argument_list|(
name|table
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|maxParts
argument_list|,
name|partNames
argument_list|,
name|sharedCache
argument_list|)
decl_stmt|;
return|return
name|hasUnknownPartitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumPartitionsByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumPartitionsByExpr
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getNumPartitionsByExpr
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|expr
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|defaultPartName
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|getPartitionNamesPrunedByExprNoTxn
argument_list|(
name|table
argument_list|,
name|expr
argument_list|,
name|defaultPartName
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|,
name|partNames
argument_list|,
name|sharedCache
argument_list|)
expr_stmt|;
return|return
name|partNames
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|partNameToVals
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|kvp
init|=
name|name
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|kv
range|:
name|kvp
control|)
block|{
name|vals
operator|.
name|add
argument_list|(
name|FileUtils
operator|.
name|unescapePathName
argument_list|(
name|kv
operator|.
name|substring
argument_list|(
name|kv
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|vals
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|Partition
name|part
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|markPartitionForEvent
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partVals
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
return|return
name|rawStore
operator|.
name|markPartitionForEvent
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|evtType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
return|return
name|rawStore
operator|.
name|isPartitionMarkedForEvent
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|evtType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addRole
parameter_list|(
name|String
name|rowName
parameter_list|,
name|String
name|ownerName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|addRole
argument_list|(
name|rowName
argument_list|,
name|ownerName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|removeRole
argument_list|(
name|roleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grantRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
return|return
name|rawStore
operator|.
name|grantRole
argument_list|(
name|role
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revokeRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|revokeRole
argument_list|(
name|role
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getUserPrivilegeSet
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getUserPrivilegeSet
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getDBPrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getDBPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getTablePrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getTablePrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getPartitionPrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partition
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getPartitionPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partition
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getColumnPrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getColumnPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalGlobalGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalDBGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalDBGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listAllTableGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listAllTableGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalPartitionGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
name|partName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalTableColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalPartitionColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
name|partName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grantPrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|grantPrivileges
argument_list|(
name|privileges
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revokePrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|revokePrivileges
argument_list|(
name|privileges
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Role
name|getRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listRoleNames
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|listRoleNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Role
argument_list|>
name|listRoles
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listRoles
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|listRolesWithGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listRolesWithGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|listRoleMembers
parameter_list|(
name|String
name|roleName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listRoleMembers
argument_list|(
name|roleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartitionWithAuth
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartitionWithAuth
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|Partition
name|p
init|=
name|sharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|Table
name|t
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|privs
init|=
name|getPartitionPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPrivileges
argument_list|(
name|privs
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsWithAuth
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getPartitionsWithAuth
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|Table
name|t
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|)
control|)
block|{
if|if
condition|(
name|maxParts
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|maxParts
condition|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|privs
init|=
name|getPartitionPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|part
operator|.
name|setPrivileges
argument_list|(
name|privs
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNamesPs
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|listPartitionNamesPs
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|maxParts
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Table
name|t
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|)
control|)
block|{
name|boolean
name|psMatch
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partVals
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|psVal
init|=
name|partVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|partVal
init|=
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|psVal
operator|!=
literal|null
operator|&&
operator|!
name|psVal
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|psVal
operator|.
name|equals
argument_list|(
name|partVal
argument_list|)
condition|)
block|{
name|psMatch
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|psMatch
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|maxParts
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|maxParts
condition|)
block|{
name|partNames
operator|.
name|add
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|partNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsPsWithAuth
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|listPartitionsPsWithAuth
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|maxParts
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Table
name|t
init|=
name|sharedCache
operator|.
name|getTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|sharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|)
control|)
block|{
name|boolean
name|psMatch
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partVals
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|psVal
init|=
name|partVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|partVal
init|=
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|psVal
operator|!=
literal|null
operator|&&
operator|!
name|psVal
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|psVal
operator|.
name|equals
argument_list|(
name|partVal
argument_list|)
condition|)
block|{
name|psMatch
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|psMatch
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|maxParts
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|maxParts
condition|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|privs
init|=
name|getPartitionPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|part
operator|.
name|setPrivileges
argument_list|(
name|privs
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateTableColumnStatistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|updateTableColumnStatistics
argument_list|(
name|colStats
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|String
name|dbName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return
name|succ
return|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
name|colStats
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|statsObj
range|:
name|statsObjs
control|)
block|{
name|colNames
operator|.
name|add
argument_list|(
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
comment|// Update table
try|try
block|{
comment|// Wait if background cache update is happening
name|tableCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isTableCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterTableInCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Update table col stats
try|try
block|{
comment|// Wait if background cache update is happening
name|tableColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isTableColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|updateTableColStatsInCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|statsObjs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnStatistics
name|getTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|rawStore
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|)
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|csd
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatObjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|colNames
control|)
block|{
name|String
name|colStatsCacheKey
init|=
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|)
decl_stmt|;
name|ColumnStatisticsObj
name|colStat
init|=
name|sharedCache
operator|.
name|getCachedTableColStats
argument_list|(
name|colStatsCacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|colStat
operator|!=
literal|null
condition|)
block|{
name|colStatObjs
operator|.
name|add
argument_list|(
name|colStat
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|colStatObjs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|ColumnStatistics
argument_list|(
name|csd
argument_list|,
name|colStatObjs
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|deleteTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return
name|succ
return|;
try|try
block|{
comment|// Wait if background cache update is happening
name|tableColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isTableColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeTableColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updatePartitionColumnStatistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|colStats
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|String
name|dbName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return
name|succ
return|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
name|colStats
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
name|Partition
name|part
init|=
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|statsObj
range|:
name|statsObjs
control|)
block|{
name|colNames
operator|.
name|add
argument_list|(
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|part
operator|.
name|getParameters
argument_list|()
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
comment|// Update partition
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|alterPartitionInCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Update partition column stats
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|updatePartitionColStatsInCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|colStats
operator|.
name|getStatsObj
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove aggregate partition col stats for this table
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionAggrColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeAggrPartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
comment|// TODO: calculate from cached values.
specifier|public
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deletePartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|partName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|deletePartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|partVals
argument_list|,
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|succ
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return
name|succ
return|;
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removePartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove aggregate partition col stats for this table
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionAggrColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeAggrPartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|AggrStats
name|get_aggr_stats_for
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
decl_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sharedCacheWrapper
operator|.
name|isInitialized
argument_list|()
operator|||
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
name|rawStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allPartNames
init|=
name|rawStore
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|partNames
operator|.
name|size
argument_list|()
operator|==
name|allPartNames
operator|.
name|size
argument_list|()
condition|)
block|{
name|colStats
operator|=
name|sharedCache
operator|.
name|getAggrStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|,
name|StatsType
operator|.
name|ALL
argument_list|)
expr_stmt|;
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|AggrStats
argument_list|(
name|colStats
argument_list|,
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|partNames
operator|.
name|size
argument_list|()
operator|==
operator|(
name|allPartNames
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|String
name|defaultPartitionName
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|partNames
operator|.
name|contains
argument_list|(
name|defaultPartitionName
argument_list|)
condition|)
block|{
name|colStats
operator|=
name|sharedCache
operator|.
name|getAggrStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|,
name|StatsType
operator|.
name|ALLBUTDEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|AggrStats
argument_list|(
name|colStats
argument_list|,
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Didn't find aggr stats in cache. Merging them. tblName= {}, parts= {}, cols= {}"
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|MergedColumnStatsForPartitions
name|mergedColStats
init|=
name|mergeColStatsForPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|,
name|sharedCache
argument_list|)
decl_stmt|;
return|return
operator|new
name|AggrStats
argument_list|(
name|mergedColStats
operator|.
name|getColStats
argument_list|()
argument_list|,
name|mergedColStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|MergedColumnStatsForPartitions
name|mergeColStatsForPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
throws|throws
name|MetaException
block|{
specifier|final
name|boolean
name|useDensityFunctionForNDVEstimation
init|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|STATS_NDV_DENSITY_FUNCTION
argument_list|)
decl_stmt|;
specifier|final
name|double
name|ndvTuner
init|=
name|MetastoreConf
operator|.
name|getDoubleVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|STATS_NDV_TUNER
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ColumnStatsAggregator
argument_list|,
name|List
argument_list|<
name|ColStatsObjWithSourceInfo
argument_list|>
argument_list|>
name|colStatsMap
init|=
operator|new
name|HashMap
argument_list|<
name|ColumnStatsAggregator
argument_list|,
name|List
argument_list|<
name|ColStatsObjWithSourceInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|areAllPartsFound
init|=
literal|true
decl_stmt|;
name|long
name|partsFound
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|colNames
control|)
block|{
name|long
name|partsFoundForColumn
init|=
literal|0
decl_stmt|;
name|ColumnStatsAggregator
name|colStatsAggregator
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ColStatsObjWithSourceInfo
argument_list|>
name|colStatsWithPartInfoList
init|=
operator|new
name|ArrayList
argument_list|<
name|ColStatsObjWithSourceInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|String
name|colStatsCacheKey
init|=
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|,
name|colName
argument_list|)
decl_stmt|;
name|ColumnStatisticsObj
name|colStatsForPart
init|=
name|sharedCache
operator|.
name|getCachedPartitionColStats
argument_list|(
name|colStatsCacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|colStatsForPart
operator|!=
literal|null
condition|)
block|{
name|ColStatsObjWithSourceInfo
name|colStatsWithPartInfo
init|=
operator|new
name|ColStatsObjWithSourceInfo
argument_list|(
name|colStatsForPart
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
name|colStatsWithPartInfoList
operator|.
name|add
argument_list|(
name|colStatsWithPartInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|colStatsAggregator
operator|==
literal|null
condition|)
block|{
name|colStatsAggregator
operator|=
name|ColumnStatsAggregatorFactory
operator|.
name|getColumnStatsAggregator
argument_list|(
name|colStatsForPart
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|,
name|useDensityFunctionForNDVEstimation
argument_list|,
name|ndvTuner
argument_list|)
expr_stmt|;
block|}
name|partsFoundForColumn
operator|++
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stats not found in CachedStore for: dbName={} tblName={} partName={} colName={}"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|colStatsWithPartInfoList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|colStatsMap
operator|.
name|put
argument_list|(
name|colStatsAggregator
argument_list|,
name|colStatsWithPartInfoList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partsFoundForColumn
operator|==
name|partNames
operator|.
name|size
argument_list|()
condition|)
block|{
name|partsFound
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|colStatsMap
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No stats data found for: dbName={} tblName= {} partNames= {} colNames= "
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
return|return
operator|new
name|MergedColumnStatsForPartitions
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
comment|// Note that enableBitVector does not apply here because ColumnStatisticsObj
comment|// itself will tell whether bitvector is null or not and aggr logic can automatically apply.
return|return
operator|new
name|MergedColumnStatsForPartitions
argument_list|(
name|MetaStoreUtils
operator|.
name|aggrPartitionStats
argument_list|(
name|colStatsMap
argument_list|,
name|partNames
argument_list|,
name|areAllPartsFound
argument_list|,
name|useDensityFunctionForNDVEstimation
argument_list|,
name|ndvTuner
argument_list|)
argument_list|,
name|partsFound
argument_list|)
return|;
block|}
class|class
name|MergedColumnStatsForPartitions
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|partsFound
decl_stmt|;
name|MergedColumnStatsForPartitions
parameter_list|(
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
parameter_list|,
name|long
name|partsFound
parameter_list|)
block|{
name|this
operator|.
name|colStats
operator|=
name|colStats
expr_stmt|;
name|this
operator|.
name|partsFound
operator|=
name|partsFound
expr_stmt|;
block|}
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getColStats
parameter_list|()
block|{
return|return
name|colStats
return|;
block|}
name|long
name|getPartsFound
parameter_list|()
block|{
return|return
name|partsFound
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|cleanupEvents
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|cleanupEvents
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|,
name|String
name|delegationToken
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|addToken
argument_list|(
name|tokenIdentifier
argument_list|,
name|delegationToken
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|removeToken
argument_list|(
name|tokenIdentifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getToken
argument_list|(
name|tokenIdentifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTokenIdentifiers
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|getAllTokenIdentifiers
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|addMasterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|addMasterKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMasterKey
parameter_list|(
name|Integer
name|seqNo
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|updateMasterKey
argument_list|(
name|seqNo
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeMasterKey
parameter_list|(
name|Integer
name|keySeq
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|removeMasterKey
argument_list|(
name|keySeq
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getMasterKeys
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|getMasterKeys
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verifySchema
parameter_list|()
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|verifySchema
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMetaStoreSchemaVersion
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getMetaStoreSchemaVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMetaStoreSchemaVersion
parameter_list|(
name|String
name|version
parameter_list|,
name|String
name|comment
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|setMetaStoreSchemaVersion
argument_list|(
name|version
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|rawStore
operator|.
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tblName
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return;
comment|// Remove partitions
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
name|partNameToVals
argument_list|(
name|partName
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|removePartitionFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|partitionCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove partition col stats
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
init|=
name|partNameToVals
argument_list|(
name|partName
argument_list|)
decl_stmt|;
name|sharedCache
operator|.
name|removePartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|partitionColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Remove aggregate partition col stats for this table
try|try
block|{
comment|// Wait if background cache update is happening
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|isPartitionAggrColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sharedCache
operator|.
name|removeAggrPartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|partitionAggrColStatsCacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalDBGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalDBGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalTableGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalPartitionGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableColumnGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalTableColumnGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalPartitionColumnGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listGlobalGrantsAll
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|listGlobalGrantsAll
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listDBGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listDBGrantsAll
argument_list|(
name|dbName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPartitionColumnGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPartitionColumnGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listTableGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPartitionGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPartitionGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableColumnGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listTableColumnGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createFunction
parameter_list|(
name|Function
name|func
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO fucntionCache
name|rawStore
operator|.
name|createFunction
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|,
name|Function
name|newFunction
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO fucntionCache
name|rawStore
operator|.
name|alterFunction
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
comment|// TODO fucntionCache
name|rawStore
operator|.
name|dropFunction
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Function
name|getFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO fucntionCache
return|return
name|rawStore
operator|.
name|getFunction
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Function
argument_list|>
name|getAllFunctions
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// TODO fucntionCache
return|return
name|rawStore
operator|.
name|getAllFunctions
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO fucntionCache
return|return
name|rawStore
operator|.
name|getFunctions
argument_list|(
name|dbName
argument_list|,
name|pattern
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NotificationEventResponse
name|getNextNotification
parameter_list|(
name|NotificationEventRequest
name|rqst
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getNextNotification
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNotificationEvent
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
block|{
name|rawStore
operator|.
name|addNotificationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanNotificationEvents
parameter_list|(
name|int
name|olderThan
parameter_list|)
block|{
name|rawStore
operator|.
name|cleanNotificationEvents
argument_list|(
name|olderThan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CurrentNotificationEventId
name|getCurrentNotificationEventId
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|getCurrentNotificationEventId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NotificationEventsCountResponse
name|getNotificationEventsCount
parameter_list|(
name|NotificationEventsCountRequest
name|rqst
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getNotificationEventsCount
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flushCache
parameter_list|()
block|{
name|rawStore
operator|.
name|flushCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
index|[]
name|getFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getFileMetadata
argument_list|(
name|fileIds
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|metadata
parameter_list|,
name|FileMetadataExprType
name|type
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|putFileMetadata
argument_list|(
name|fileIds
argument_list|,
name|metadata
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFileMetadataSupported
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|isFileMetadataSupported
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getFileMetadataByExpr
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|FileMetadataExprType
name|type
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|ByteBuffer
index|[]
name|metadatas
parameter_list|,
name|ByteBuffer
index|[]
name|exprResults
parameter_list|,
name|boolean
index|[]
name|eliminated
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|getFileMetadataByExpr
argument_list|(
name|fileIds
argument_list|,
name|type
argument_list|,
name|expr
argument_list|,
name|metadatas
argument_list|,
name|exprResults
argument_list|,
name|eliminated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FileMetadataHandler
name|getFileMetadataHandler
parameter_list|(
name|FileMetadataExprType
name|type
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getFileMetadataHandler
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTableCount
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getTableCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPartitionCount
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getPartitionCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDatabaseCount
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getDatabaseCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeys
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|getPrimaryKeys
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeys
parameter_list|(
name|String
name|parent_db_name
parameter_list|,
name|String
name|parent_tbl_name
parameter_list|,
name|String
name|foreign_db_name
parameter_list|,
name|String
name|foreign_tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|getForeignKeys
argument_list|(
name|parent_db_name
argument_list|,
name|parent_tbl_name
argument_list|,
name|foreign_db_name
argument_list|,
name|foreign_tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getUniqueConstraints
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|getUniqueConstraints
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getNotNullConstraints
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|getNotNullConstraints
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|createTableWithConstraints
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|,
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
parameter_list|,
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
name|List
argument_list|<
name|String
argument_list|>
name|constraintNames
init|=
name|rawStore
operator|.
name|createTableWithConstraints
argument_list|(
name|tbl
argument_list|,
name|primaryKeys
argument_list|,
name|foreignKeys
argument_list|,
name|uniqueConstraints
argument_list|,
name|notNullConstraints
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tblName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldCacheTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
return|return
name|constraintNames
return|;
block|}
name|SharedCache
name|sharedCache
init|=
name|sharedCacheWrapper
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedCache
operator|==
literal|null
condition|)
return|return
name|constraintNames
return|;
name|sharedCache
operator|.
name|addTableToCache
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
return|return
name|constraintNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropConstraint
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|constraintName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
comment|// TODO constraintCache
name|rawStore
operator|.
name|dropConstraint
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|constraintName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addPrimaryKeys
parameter_list|(
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|addPrimaryKeys
argument_list|(
name|pks
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addForeignKeys
parameter_list|(
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|addForeignKeys
argument_list|(
name|fks
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addUniqueConstraints
parameter_list|(
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|addUniqueConstraints
argument_list|(
name|uks
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|addNotNullConstraints
parameter_list|(
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|nns
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|addNotNullConstraints
argument_list|(
name|nns
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ColStatsObjWithSourceInfo
argument_list|>
name|getPartitionColStatsForDatabase
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getPartitionColStatsForDatabase
argument_list|(
name|dbName
argument_list|)
return|;
block|}
specifier|public
name|RawStore
name|getRawStore
parameter_list|()
block|{
return|return
name|rawStore
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|setRawStore
parameter_list|(
name|RawStore
name|rawStore
parameter_list|)
block|{
name|this
operator|.
name|rawStore
operator|=
name|rawStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMetastoreDbUuid
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getMetastoreDbUuid
argument_list|()
return|;
block|}
comment|// TODO: this is only used to hide SharedCache instance from direct use; ideally, the stuff in
comment|//       CachedStore that's specific to SharedCache (e.g. update threads) should be refactored to
comment|//       be part of this, then this could be moved out of this file (or merged with SharedCache).
specifier|private
specifier|static
specifier|final
class|class
name|SharedCacheWrapper
block|{
specifier|private
enum|enum
name|InitState
block|{
name|NOT_ENABLED
block|,
name|INITIALIZING
block|,
name|INITIALIZED
block|,
name|FAILED_FATAL
block|}
specifier|private
specifier|final
name|SharedCache
name|instance
init|=
operator|new
name|SharedCache
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|initLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|InitState
name|initState
init|=
name|InitState
operator|.
name|NOT_ENABLED
decl_stmt|;
comment|// We preserve the old setConf init behavior, where a failed prewarm would fail the query
comment|// and give a chance to another query to try prewarming again. Basically, we'd increment the
comment|// count and all the queries waiting for prewarm would fail; however, we will retry the prewarm
comment|// again infinitely, so some queries might succeed later.
specifier|private
name|int
name|initFailureCount
decl_stmt|;
specifier|private
name|Throwable
name|lastError
decl_stmt|;
comment|/**      * A callback to updates the initialization state.      * @param error Error, if any. Null means the initialization has succeeded.      * @param isFatal Whether the error (if present) is fatal, or whether init will be retried.      */
name|void
name|updateInitState
parameter_list|(
name|Throwable
name|error
parameter_list|,
name|boolean
name|isFatal
parameter_list|)
block|{
name|boolean
name|isSuccessful
init|=
name|error
operator|==
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|initLock
init|)
block|{
if|if
condition|(
name|isSuccessful
condition|)
block|{
name|initState
operator|=
name|InitState
operator|.
name|INITIALIZED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isFatal
condition|)
block|{
name|initState
operator|=
name|InitState
operator|.
name|FAILED_FATAL
expr_stmt|;
name|lastError
operator|=
name|error
expr_stmt|;
block|}
else|else
block|{
operator|++
name|initFailureCount
expr_stmt|;
name|lastError
operator|=
name|error
expr_stmt|;
block|}
name|initLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|startInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing shared cache"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|initLock
init|)
block|{
assert|assert
name|initState
operator|==
name|InitState
operator|.
name|NOT_ENABLED
assert|;
name|initState
operator|=
name|InitState
operator|.
name|INITIALIZING
expr_stmt|;
block|}
comment|// The first iteration of the update thread will prewarm the cache.
name|startCacheUpdateService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the SharedCache, waiting for initialization to happen if necessary.      * Fails on any initialization error, even if the init will be retried later.      */
specifier|public
name|SharedCache
name|get
parameter_list|()
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|waitForInit
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|instance
return|;
block|}
comment|/** Gets the shared cache unsafely (may not be ready to use); used by init methods. */
name|SharedCache
name|getUnsafe
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
specifier|private
name|boolean
name|waitForInit
parameter_list|()
throws|throws
name|MetaException
block|{
synchronized|synchronized
init|(
name|initLock
init|)
block|{
name|int
name|localFailureCount
init|=
name|initFailureCount
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
name|initState
condition|)
block|{
case|case
name|INITIALIZED
case|:
return|return
literal|true
return|;
case|case
name|NOT_ENABLED
case|:
return|return
literal|false
return|;
case|case
name|FAILED_FATAL
case|:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"CachedStore prewarm had a fatal error"
argument_list|,
name|lastError
argument_list|)
throw|;
block|}
case|case
name|INITIALIZING
case|:
block|{
try|try
block|{
name|initLock
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Interrupted"
argument_list|)
throw|;
block|}
break|break;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|initState
argument_list|)
throw|;
block|}
comment|// Fail if any errors occured; mimicks the old behavior where a setConf prewarm failure
comment|// would fail the current task, but cause the next setConf to try prewarm again forever.
if|if
condition|(
name|initFailureCount
operator|!=
name|localFailureCount
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"CachedStore prewarm failed"
argument_list|,
name|lastError
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * Notify all threads blocked on initialization, to continue work. (We allow read while prewarm      * is running; all write calls are blocked using waitForInitAndBlock).      */
name|void
name|notifyAllBlocked
parameter_list|()
block|{
synchronized|synchronized
init|(
name|initLock
init|)
block|{
name|initLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|initState
operator|.
name|equals
argument_list|(
name|InitState
operator|.
name|INITIALIZED
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|void
name|setInitializedForTest
parameter_list|()
block|{
name|sharedCacheWrapper
operator|.
name|updateInitState
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createResourcePlan
parameter_list|(
name|WMResourcePlan
name|resourcePlan
parameter_list|,
name|String
name|copyFrom
parameter_list|,
name|int
name|defaultPoolSize
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|rawStore
operator|.
name|createResourcePlan
argument_list|(
name|resourcePlan
argument_list|,
name|copyFrom
argument_list|,
name|defaultPoolSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|WMFullResourcePlan
name|getResourcePlan
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getResourcePlan
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|WMResourcePlan
argument_list|>
name|getAllResourcePlans
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getAllResourcePlans
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|WMFullResourcePlan
name|alterResourcePlan
parameter_list|(
name|String
name|name
parameter_list|,
name|WMNullableResourcePlan
name|resourcePlan
parameter_list|,
name|boolean
name|canActivateDisabled
parameter_list|,
name|boolean
name|canDeactivate
parameter_list|,
name|boolean
name|isReplace
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|alterResourcePlan
argument_list|(
name|name
argument_list|,
name|resourcePlan
argument_list|,
name|canActivateDisabled
argument_list|,
name|canDeactivate
argument_list|,
name|isReplace
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|WMFullResourcePlan
name|getActiveResourcePlan
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getActiveResourcePlan
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|WMValidateResourcePlanResponse
name|validateResourcePlan
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|validateResourcePlan
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropResourcePlan
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropResourcePlan
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createWMTrigger
parameter_list|(
name|WMTrigger
name|trigger
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
block|{
name|rawStore
operator|.
name|createWMTrigger
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterWMTrigger
parameter_list|(
name|WMTrigger
name|trigger
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterWMTrigger
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropWMTrigger
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropWMTrigger
argument_list|(
name|resourcePlanName
argument_list|,
name|triggerName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|WMTrigger
argument_list|>
name|getTriggersForResourcePlan
parameter_list|(
name|String
name|resourcePlanName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getTriggersForResourcePlan
argument_list|(
name|resourcePlanName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createPool
parameter_list|(
name|WMPool
name|pool
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createPool
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterPool
parameter_list|(
name|WMNullablePool
name|pool
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterPool
argument_list|(
name|pool
argument_list|,
name|poolPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropWMPool
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropWMPool
argument_list|(
name|resourcePlanName
argument_list|,
name|poolPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createOrUpdateWMMapping
parameter_list|(
name|WMMapping
name|mapping
parameter_list|,
name|boolean
name|update
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createOrUpdateWMMapping
argument_list|(
name|mapping
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropWMMapping
parameter_list|(
name|WMMapping
name|mapping
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropWMMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createWMTriggerToPoolMapping
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createWMTriggerToPoolMapping
argument_list|(
name|resourcePlanName
argument_list|,
name|triggerName
argument_list|,
name|poolPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropWMTriggerToPoolMapping
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|dropWMTriggerToPoolMapping
argument_list|(
name|resourcePlanName
argument_list|,
name|triggerName
argument_list|,
name|poolPath
argument_list|)
expr_stmt|;
block|}
specifier|static
name|boolean
name|isNotInBlackList
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|String
name|str
init|=
name|dbName
operator|+
literal|"."
operator|+
name|tblName
decl_stmt|;
for|for
control|(
name|Pattern
name|pattern
range|:
name|blacklistPatterns
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to match: {} against blacklist pattern: {}"
argument_list|,
name|str
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found matcher group: {} at start index: {} and end index: {}"
argument_list|,
name|matcher
operator|.
name|group
argument_list|()
argument_list|,
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|static
name|boolean
name|isInWhitelist
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|String
name|str
init|=
name|dbName
operator|+
literal|"."
operator|+
name|tblName
decl_stmt|;
for|for
control|(
name|Pattern
name|pattern
range|:
name|whitelistPatterns
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to match: {} against whitelist pattern: {}"
argument_list|,
name|str
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found matcher group: {} at start index: {} and end index: {}"
argument_list|,
name|matcher
operator|.
name|group
argument_list|()
argument_list|,
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// For testing
specifier|static
name|void
name|setWhitelistPattern
parameter_list|(
name|List
argument_list|<
name|Pattern
argument_list|>
name|patterns
parameter_list|)
block|{
name|whitelistPatterns
operator|=
name|patterns
expr_stmt|;
block|}
comment|// For testing
specifier|static
name|void
name|setBlacklistPattern
parameter_list|(
name|List
argument_list|<
name|Pattern
argument_list|>
name|patterns
parameter_list|)
block|{
name|blacklistPatterns
operator|=
name|patterns
expr_stmt|;
block|}
comment|// Determines if we should cache a table (& its partitions, stats etc),
comment|// based on whitelist/blacklist
specifier|static
name|boolean
name|shouldCacheTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isNotInBlackList
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}.{} is in blacklist, skipping"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|isInWhitelist
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}.{} is not in whitelist, skipping"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|static
name|List
argument_list|<
name|Pattern
argument_list|>
name|createPatterns
parameter_list|(
name|String
name|configStr
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|patternStrs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|configStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pattern
argument_list|>
name|patterns
init|=
operator|new
name|ArrayList
argument_list|<
name|Pattern
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|patternStrs
control|)
block|{
name|patterns
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|patterns
return|;
block|}
specifier|static
name|boolean
name|isBlacklistWhitelistEmpty
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|MetastoreConf
operator|.
name|getAsString
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHED_OBJECTS_WHITELIST
argument_list|)
operator|.
name|equals
argument_list|(
literal|".*"
argument_list|)
operator|&&
name|MetastoreConf
operator|.
name|getAsString
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CACHED_RAW_STORE_CACHED_OBJECTS_BLACKLIST
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

