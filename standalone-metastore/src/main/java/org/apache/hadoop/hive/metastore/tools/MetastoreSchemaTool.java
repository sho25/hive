begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreSchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreSchemaInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|HiveSchemaHelper
operator|.
name|MetaStoreConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|HiveSchemaHelper
operator|.
name|NestedScriptParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|sqlline
operator|.
name|SqlLine
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
class|class
name|MetastoreSchemaTool
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetastoreSchemaTool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PASSWD_MASK
init|=
literal|"[passwd stripped]"
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|String
name|homeDir
decl_stmt|;
specifier|private
name|String
name|userName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|passWord
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|dryRun
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|dbOpts
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|url
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|driver
init|=
literal|null
decl_stmt|;
specifier|private
name|URI
index|[]
name|validationServers
init|=
literal|null
decl_stmt|;
comment|// The list of servers the database/partition/table can locate on
specifier|private
name|String
name|hiveUser
decl_stmt|;
comment|// Hive username, for use when creating the user, not for connecting
specifier|private
name|String
name|hivePasswd
decl_stmt|;
comment|// Hive password, for use when creating the user, not for connecting
specifier|private
name|String
name|hiveDb
decl_stmt|;
comment|// Hive database, for use when creating the user, not for connecting
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|String
name|dbType
decl_stmt|;
specifier|private
specifier|final
name|IMetaStoreSchemaInfo
name|metaStoreSchemaInfo
decl_stmt|;
specifier|private
name|boolean
name|needsQuotedIdentifier
decl_stmt|;
specifier|private
specifier|static
name|String
name|findHomeDir
parameter_list|()
block|{
comment|// If METASTORE_HOME is set, use it, else use HIVE_HOME for backwards compatibility.
name|homeDir
operator|=
name|homeDir
operator|==
literal|null
condition|?
name|System
operator|.
name|getenv
argument_list|(
literal|"METASTORE_HOME"
argument_list|)
else|:
name|homeDir
expr_stmt|;
return|return
name|homeDir
operator|==
literal|null
condition|?
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_HOME"
argument_list|)
else|:
name|homeDir
return|;
block|}
specifier|private
name|MetastoreSchemaTool
parameter_list|(
name|String
name|dbType
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|this
argument_list|(
name|findHomeDir
argument_list|()
argument_list|,
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
argument_list|,
name|dbType
argument_list|)
expr_stmt|;
block|}
name|MetastoreSchemaTool
parameter_list|(
name|String
name|metastoreHome
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|dbType
parameter_list|)
throws|throws
name|HiveMetaException
block|{
if|if
condition|(
name|metastoreHome
operator|==
literal|null
operator|||
name|metastoreHome
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"No Metastore home directory provided"
argument_list|)
throw|;
block|}
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|dbType
operator|=
name|dbType
expr_stmt|;
name|this
operator|.
name|needsQuotedIdentifier
operator|=
name|getDbCommandParser
argument_list|(
name|dbType
argument_list|)
operator|.
name|needsQuotedIdentifier
argument_list|()
expr_stmt|;
name|this
operator|.
name|metaStoreSchemaInfo
operator|=
name|MetaStoreSchemaInfoFactory
operator|.
name|get
argument_list|(
name|conf
argument_list|,
name|metastoreHome
argument_list|,
name|dbType
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
name|void
name|setUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
name|void
name|setDriver
parameter_list|(
name|String
name|driver
parameter_list|)
block|{
name|this
operator|.
name|driver
operator|=
name|driver
expr_stmt|;
block|}
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
name|void
name|setPassWord
parameter_list|(
name|String
name|passWord
parameter_list|)
block|{
name|this
operator|.
name|passWord
operator|=
name|passWord
expr_stmt|;
block|}
name|void
name|setDryRun
parameter_list|(
name|boolean
name|dryRun
parameter_list|)
block|{
name|this
operator|.
name|dryRun
operator|=
name|dryRun
expr_stmt|;
block|}
name|void
name|setVerbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
specifier|private
name|void
name|setDbOpts
parameter_list|(
name|String
name|dbOpts
parameter_list|)
block|{
name|this
operator|.
name|dbOpts
operator|=
name|dbOpts
expr_stmt|;
block|}
specifier|private
name|void
name|setValidationServers
parameter_list|(
name|String
name|servers
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|servers
argument_list|)
condition|)
block|{
name|String
index|[]
name|strServers
init|=
name|servers
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|this
operator|.
name|validationServers
operator|=
operator|new
name|URI
index|[
name|strServers
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|validationServers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|validationServers
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|strServers
index|[
name|i
index|]
argument_list|)
operator|.
name|toUri
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setHiveUser
parameter_list|(
name|String
name|hiveUser
parameter_list|)
block|{
name|this
operator|.
name|hiveUser
operator|=
name|hiveUser
expr_stmt|;
block|}
specifier|private
name|void
name|setHivePasswd
parameter_list|(
name|String
name|hivePasswd
parameter_list|)
block|{
name|this
operator|.
name|hivePasswd
operator|=
name|hivePasswd
expr_stmt|;
block|}
specifier|private
name|void
name|setHiveDb
parameter_list|(
name|String
name|hiveDb
parameter_list|)
block|{
name|this
operator|.
name|hiveDb
operator|=
name|hiveDb
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|usage
parameter_list|(
name|Options
name|cmdLineOptions
parameter_list|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"schemaTool"
argument_list|,
name|cmdLineOptions
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|Connection
name|getConnectionToMetastore
parameter_list|(
name|boolean
name|printInfo
parameter_list|)
throws|throws
name|HiveMetaException
block|{
return|return
name|HiveSchemaHelper
operator|.
name|getConnectionToMetastore
argument_list|(
name|userName
argument_list|,
name|passWord
argument_list|,
name|url
argument_list|,
name|driver
argument_list|,
name|printInfo
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|NestedScriptParser
name|getDbCommandParser
parameter_list|(
name|String
name|dbType
parameter_list|)
block|{
return|return
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
name|dbType
argument_list|,
name|dbOpts
argument_list|,
name|userName
argument_list|,
name|passWord
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/***    * Print Hive version and schema version    */
specifier|private
name|void
name|showInfo
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|String
name|hiveVersion
init|=
name|metaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
decl_stmt|;
name|String
name|dbVersion
init|=
name|metaStoreSchemaInfo
operator|.
name|getMetaStoreSchemaVersion
argument_list|(
name|getConnectionInfo
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Hive distribution version:\t "
operator|+
name|hiveVersion
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Metastore schema version:\t "
operator|+
name|dbVersion
argument_list|)
expr_stmt|;
name|assertCompatibleVersion
argument_list|(
name|hiveVersion
argument_list|,
name|dbVersion
argument_list|)
expr_stmt|;
block|}
name|boolean
name|validateLocations
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|URI
index|[]
name|defaultServers
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Validating DFS locations"
argument_list|)
expr_stmt|;
name|boolean
name|rtn
decl_stmt|;
name|rtn
operator|=
name|checkMetaStoreDBLocation
argument_list|(
name|conn
argument_list|,
name|defaultServers
argument_list|)
expr_stmt|;
name|rtn
operator|=
name|checkMetaStoreTableLocation
argument_list|(
name|conn
argument_list|,
name|defaultServers
argument_list|)
operator|&&
name|rtn
expr_stmt|;
name|rtn
operator|=
name|checkMetaStorePartitionLocation
argument_list|(
name|conn
argument_list|,
name|defaultServers
argument_list|)
operator|&&
name|rtn
expr_stmt|;
name|rtn
operator|=
name|checkMetaStoreSkewedColumnsLocation
argument_list|(
name|conn
argument_list|,
name|defaultServers
argument_list|)
operator|&&
name|rtn
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|(
name|rtn
condition|?
literal|"Succeeded"
else|:
literal|"Failed"
operator|)
operator|+
literal|" in DFS location validation."
argument_list|)
expr_stmt|;
return|return
name|rtn
return|;
block|}
specifier|private
name|String
name|getNameOrID
parameter_list|(
name|ResultSet
name|res
parameter_list|,
name|int
name|nameInx
parameter_list|,
name|int
name|idInx
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|itemName
init|=
name|res
operator|.
name|getString
argument_list|(
name|nameInx
argument_list|)
decl_stmt|;
return|return
operator|(
name|itemName
operator|==
literal|null
operator|||
name|itemName
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|"ID: "
operator|+
name|res
operator|.
name|getString
argument_list|(
name|idInx
argument_list|)
else|:
literal|"Name: "
operator|+
name|itemName
return|;
block|}
specifier|private
name|boolean
name|checkMetaStoreDBLocation
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|URI
index|[]
name|defaultServers
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|String
name|dbLoc
decl_stmt|;
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
name|int
name|numOfInvalid
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|needsQuotedIdentifier
condition|)
block|{
name|dbLoc
operator|=
literal|"select dbt.\"DB_ID\", dbt.\"NAME\", dbt.\"DB_LOCATION_URI\" from \"DBS\" dbt order by dbt.\"DB_ID\" "
expr_stmt|;
block|}
else|else
block|{
name|dbLoc
operator|=
literal|"select dbt.DB_ID, dbt.NAME, dbt.DB_LOCATION_URI from DBS dbt order by dbt.DB_ID"
expr_stmt|;
block|}
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|;
name|ResultSet
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|dbLoc
argument_list|)
init|)
block|{
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|locValue
init|=
name|res
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|getNameOrID
argument_list|(
name|res
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkLocation
argument_list|(
literal|"Database "
operator|+
name|dbName
argument_list|,
name|locValue
argument_list|,
name|defaultServers
argument_list|)
condition|)
block|{
name|numOfInvalid
operator|++
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to get DB Location Info."
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|numOfInvalid
operator|>
literal|0
condition|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|isValid
return|;
block|}
specifier|private
name|boolean
name|checkMetaStoreTableLocation
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|URI
index|[]
name|defaultServers
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|String
name|tabLoc
decl_stmt|,
name|tabIDRange
decl_stmt|;
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
name|int
name|numOfInvalid
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|needsQuotedIdentifier
condition|)
block|{
name|tabIDRange
operator|=
literal|"select max(\"TBL_ID\"), min(\"TBL_ID\") from \"TBLS\" "
expr_stmt|;
block|}
else|else
block|{
name|tabIDRange
operator|=
literal|"select max(TBL_ID), min(TBL_ID) from TBLS"
expr_stmt|;
block|}
if|if
condition|(
name|needsQuotedIdentifier
condition|)
block|{
name|tabLoc
operator|=
literal|"select tbl.\"TBL_ID\", tbl.\"TBL_NAME\", sd.\"LOCATION\", dbt.\"DB_ID\", dbt.\"NAME\" from \"TBLS\" tbl inner join "
operator|+
literal|"\"SDS\" sd on tbl.\"SD_ID\" = sd.\"SD_ID\" and tbl.\"TBL_TYPE\" != '"
operator|+
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|+
literal|"' and tbl.\"TBL_ID\">= ? and tbl.\"TBL_ID\"<= ? "
operator|+
literal|"inner join \"DBS\" dbt on tbl.\"DB_ID\" = dbt.\"DB_ID\" order by tbl.\"TBL_ID\" "
expr_stmt|;
block|}
else|else
block|{
name|tabLoc
operator|=
literal|"select tbl.TBL_ID, tbl.TBL_NAME, sd.LOCATION, dbt.DB_ID, dbt.NAME from TBLS tbl join SDS sd on tbl.SD_ID = sd.SD_ID and tbl.TBL_TYPE !='"
operator|+
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|+
literal|"' and tbl.TBL_ID>= ? and tbl.TBL_ID<= ?  inner join DBS dbt on tbl.DB_ID = dbt.DB_ID order by tbl.TBL_ID"
expr_stmt|;
block|}
name|long
name|maxID
init|=
literal|0
decl_stmt|,
name|minID
init|=
literal|0
decl_stmt|;
name|long
name|rtnSize
init|=
literal|2000
decl_stmt|;
try|try
block|{
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|tabIDRange
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|maxID
operator|=
name|res
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|minID
operator|=
name|res
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|PreparedStatement
name|pStmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|tabLoc
argument_list|)
decl_stmt|;
while|while
condition|(
name|minID
operator|<=
name|maxID
condition|)
block|{
name|pStmt
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|minID
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|minID
operator|+
name|rtnSize
argument_list|)
expr_stmt|;
name|res
operator|=
name|pStmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|locValue
init|=
name|res
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|entity
init|=
literal|"Database "
operator|+
name|getNameOrID
argument_list|(
name|res
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
operator|+
literal|", Table "
operator|+
name|getNameOrID
argument_list|(
name|res
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkLocation
argument_list|(
name|entity
argument_list|,
name|locValue
argument_list|,
name|defaultServers
argument_list|)
condition|)
block|{
name|numOfInvalid
operator|++
expr_stmt|;
block|}
block|}
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|minID
operator|+=
name|rtnSize
operator|+
literal|1
expr_stmt|;
block|}
name|pStmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to get Table Location Info."
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|numOfInvalid
operator|>
literal|0
condition|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|isValid
return|;
block|}
specifier|private
name|boolean
name|checkMetaStorePartitionLocation
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|URI
index|[]
name|defaultServers
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|String
name|partLoc
decl_stmt|,
name|partIDRange
decl_stmt|;
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
name|int
name|numOfInvalid
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|needsQuotedIdentifier
condition|)
block|{
name|partIDRange
operator|=
literal|"select max(\"PART_ID\"), min(\"PART_ID\") from \"PARTITIONS\" "
expr_stmt|;
block|}
else|else
block|{
name|partIDRange
operator|=
literal|"select max(PART_ID), min(PART_ID) from PARTITIONS"
expr_stmt|;
block|}
if|if
condition|(
name|needsQuotedIdentifier
condition|)
block|{
name|partLoc
operator|=
literal|"select pt.\"PART_ID\", pt.\"PART_NAME\", sd.\"LOCATION\", tbl.\"TBL_ID\", tbl.\"TBL_NAME\",dbt.\"DB_ID\", dbt.\"NAME\" from \"PARTITIONS\" pt "
operator|+
literal|"inner join \"SDS\" sd on pt.\"SD_ID\" = sd.\"SD_ID\" and pt.\"PART_ID\">= ? and pt.\"PART_ID\"<= ? "
operator|+
literal|" inner join \"TBLS\" tbl on pt.\"TBL_ID\" = tbl.\"TBL_ID\" inner join "
operator|+
literal|"\"DBS\" dbt on tbl.\"DB_ID\" = dbt.\"DB_ID\" order by tbl.\"TBL_ID\" "
expr_stmt|;
block|}
else|else
block|{
name|partLoc
operator|=
literal|"select pt.PART_ID, pt.PART_NAME, sd.LOCATION, tbl.TBL_ID, tbl.TBL_NAME, dbt.DB_ID, dbt.NAME from PARTITIONS pt "
operator|+
literal|"inner join SDS sd on pt.SD_ID = sd.SD_ID and pt.PART_ID>= ? and pt.PART_ID<= ?  "
operator|+
literal|"inner join TBLS tbl on tbl.TBL_ID = pt.TBL_ID inner join DBS dbt on tbl.DB_ID = dbt.DB_ID order by tbl.TBL_ID "
expr_stmt|;
block|}
name|long
name|maxID
init|=
literal|0
decl_stmt|,
name|minID
init|=
literal|0
decl_stmt|;
name|long
name|rtnSize
init|=
literal|2000
decl_stmt|;
try|try
block|{
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|partIDRange
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|maxID
operator|=
name|res
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|minID
operator|=
name|res
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|PreparedStatement
name|pStmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|partLoc
argument_list|)
decl_stmt|;
while|while
condition|(
name|minID
operator|<=
name|maxID
condition|)
block|{
name|pStmt
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|minID
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|minID
operator|+
name|rtnSize
argument_list|)
expr_stmt|;
name|res
operator|=
name|pStmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|locValue
init|=
name|res
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|entity
init|=
literal|"Database "
operator|+
name|getNameOrID
argument_list|(
name|res
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|)
operator|+
literal|", Table "
operator|+
name|getNameOrID
argument_list|(
name|res
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
operator|+
literal|", Partition "
operator|+
name|getNameOrID
argument_list|(
name|res
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkLocation
argument_list|(
name|entity
argument_list|,
name|locValue
argument_list|,
name|defaultServers
argument_list|)
condition|)
block|{
name|numOfInvalid
operator|++
expr_stmt|;
block|}
block|}
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|minID
operator|+=
name|rtnSize
operator|+
literal|1
expr_stmt|;
block|}
name|pStmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to get Partiton Location Info."
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|numOfInvalid
operator|>
literal|0
condition|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|isValid
return|;
block|}
specifier|private
name|boolean
name|checkMetaStoreSkewedColumnsLocation
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|URI
index|[]
name|defaultServers
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|String
name|skewedColLoc
decl_stmt|,
name|skewedColIDRange
decl_stmt|;
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
name|int
name|numOfInvalid
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|needsQuotedIdentifier
condition|)
block|{
name|skewedColIDRange
operator|=
literal|"select max(\"STRING_LIST_ID_KID\"), min(\"STRING_LIST_ID_KID\") from \"SKEWED_COL_VALUE_LOC_MAP\" "
expr_stmt|;
block|}
else|else
block|{
name|skewedColIDRange
operator|=
literal|"select max(STRING_LIST_ID_KID), min(STRING_LIST_ID_KID) from SKEWED_COL_VALUE_LOC_MAP"
expr_stmt|;
block|}
if|if
condition|(
name|needsQuotedIdentifier
condition|)
block|{
name|skewedColLoc
operator|=
literal|"select t.\"TBL_NAME\", t.\"TBL_ID\", sk.\"STRING_LIST_ID_KID\", sk.\"LOCATION\", db.\"NAME\", db.\"DB_ID\" "
operator|+
literal|" from \"TBLS\" t, \"SDS\" s, \"DBS\" db, \"SKEWED_COL_VALUE_LOC_MAP\" sk "
operator|+
literal|"where sk.\"SD_ID\" = s.\"SD_ID\" and s.\"SD_ID\" = t.\"SD_ID\" and t.\"DB_ID\" = db.\"DB_ID\" and "
operator|+
literal|"sk.\"STRING_LIST_ID_KID\">= ? and sk.\"STRING_LIST_ID_KID\"<= ? order by t.\"TBL_ID\" "
expr_stmt|;
block|}
else|else
block|{
name|skewedColLoc
operator|=
literal|"select t.TBL_NAME, t.TBL_ID, sk.STRING_LIST_ID_KID, sk.LOCATION, db.NAME, db.DB_ID from TBLS t, SDS s, DBS db, SKEWED_COL_VALUE_LOC_MAP sk "
operator|+
literal|"where sk.SD_ID = s.SD_ID and s.SD_ID = t.SD_ID and t.DB_ID = db.DB_ID and sk.STRING_LIST_ID_KID>= ? and sk.STRING_LIST_ID_KID<= ? order by t.TBL_ID "
expr_stmt|;
block|}
name|long
name|maxID
init|=
literal|0
decl_stmt|,
name|minID
init|=
literal|0
decl_stmt|;
name|long
name|rtnSize
init|=
literal|2000
decl_stmt|;
try|try
block|{
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|skewedColIDRange
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|maxID
operator|=
name|res
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|minID
operator|=
name|res
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|PreparedStatement
name|pStmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|skewedColLoc
argument_list|)
decl_stmt|;
while|while
condition|(
name|minID
operator|<=
name|maxID
condition|)
block|{
name|pStmt
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|minID
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|minID
operator|+
name|rtnSize
argument_list|)
expr_stmt|;
name|res
operator|=
name|pStmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|locValue
init|=
name|res
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|entity
init|=
literal|"Database "
operator|+
name|getNameOrID
argument_list|(
name|res
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
operator|+
literal|", Table "
operator|+
name|getNameOrID
argument_list|(
name|res
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|+
literal|", String list "
operator|+
name|res
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkLocation
argument_list|(
name|entity
argument_list|,
name|locValue
argument_list|,
name|defaultServers
argument_list|)
condition|)
block|{
name|numOfInvalid
operator|++
expr_stmt|;
block|}
block|}
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|minID
operator|+=
name|rtnSize
operator|+
literal|1
expr_stmt|;
block|}
name|pStmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to get skewed columns location info."
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|numOfInvalid
operator|>
literal|0
condition|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|isValid
return|;
block|}
comment|/**    * Check if the location is valid for the given entity    * @param entity          the entity to represent a database, partition or table    * @param entityLocation  the location    * @param defaultServers  a list of the servers that the location needs to match.    *                        The location host needs to match one of the given servers.    *                        If empty, then no check against such list.    * @return true if the location is valid    */
specifier|private
name|boolean
name|checkLocation
parameter_list|(
name|String
name|entity
parameter_list|,
name|String
name|entityLocation
parameter_list|,
name|URI
index|[]
name|defaultServers
parameter_list|)
block|{
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|entityLocation
operator|==
literal|null
condition|)
block|{
name|logAndPrintToError
argument_list|(
name|entity
operator|+
literal|", Error: empty location"
argument_list|)
expr_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|URI
name|currentUri
init|=
operator|new
name|Path
argument_list|(
name|entityLocation
argument_list|)
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
name|currentUri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|currentUri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|logAndPrintToError
argument_list|(
name|entity
operator|+
literal|", Location: "
operator|+
name|entityLocation
operator|+
literal|", Error: missing location scheme."
argument_list|)
expr_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|logAndPrintToError
argument_list|(
name|entity
operator|+
literal|", Location: "
operator|+
name|entityLocation
operator|+
literal|", Error: missing location path."
argument_list|)
expr_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ArrayUtils
operator|.
name|isNotEmpty
argument_list|(
name|defaultServers
argument_list|)
operator|&&
name|currentUri
operator|.
name|getAuthority
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|authority
init|=
name|currentUri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|boolean
name|matchServer
init|=
literal|false
decl_stmt|;
for|for
control|(
name|URI
name|server
range|:
name|defaultServers
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|server
operator|.
name|getScheme
argument_list|()
argument_list|,
name|scheme
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|server
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|authority
argument_list|)
condition|)
block|{
name|matchServer
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|matchServer
condition|)
block|{
name|logAndPrintToError
argument_list|(
name|entity
operator|+
literal|", Location: "
operator|+
name|entityLocation
operator|+
literal|", Error: mismatched server."
argument_list|)
expr_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// if there is no path element other than "/", report it but not fail
if|if
condition|(
name|isValid
operator|&&
name|StringUtils
operator|.
name|containsOnly
argument_list|(
name|path
argument_list|,
literal|"/"
argument_list|)
condition|)
block|{
name|logAndPrintToError
argument_list|(
name|entity
operator|+
literal|", Location: "
operator|+
name|entityLocation
operator|+
literal|", Warn: location set to root, not a recommended config."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|pe
parameter_list|)
block|{
name|logAndPrintToError
argument_list|(
name|entity
operator|+
literal|", Error: invalid location - "
operator|+
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|isValid
return|;
block|}
comment|// test the connection metastore using the config property
specifier|private
name|void
name|testConnectionToMetastore
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|Connection
name|conn
init|=
name|getConnectionToMetastore
argument_list|(
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to close metastore connection"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * check if the current schema version in metastore matches the Hive version    */
annotation|@
name|VisibleForTesting
name|void
name|verifySchemaVersion
parameter_list|()
throws|throws
name|HiveMetaException
block|{
comment|// don't check version if its a dry run
if|if
condition|(
name|dryRun
condition|)
block|{
return|return;
block|}
name|String
name|newSchemaVersion
init|=
name|metaStoreSchemaInfo
operator|.
name|getMetaStoreSchemaVersion
argument_list|(
name|getConnectionInfo
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
comment|// verify that the new version is added to schema
name|assertCompatibleVersion
argument_list|(
name|metaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|,
name|newSchemaVersion
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertCompatibleVersion
parameter_list|(
name|String
name|hiveSchemaVersion
parameter_list|,
name|String
name|dbSchemaVersion
parameter_list|)
throws|throws
name|HiveMetaException
block|{
if|if
condition|(
operator|!
name|metaStoreSchemaInfo
operator|.
name|isVersionCompatible
argument_list|(
name|hiveSchemaVersion
argument_list|,
name|dbSchemaVersion
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Metastore schema version is not compatible. Hive Version: "
operator|+
name|hiveSchemaVersion
operator|+
literal|", Database Schema Version: "
operator|+
name|dbSchemaVersion
argument_list|)
throw|;
block|}
block|}
comment|/**    * Perform metastore schema upgrade. extract the current schema version from metastore    */
name|void
name|doUpgrade
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|String
name|fromVersion
init|=
name|metaStoreSchemaInfo
operator|.
name|getMetaStoreSchemaVersion
argument_list|(
name|getConnectionInfo
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromVersion
operator|==
literal|null
operator|||
name|fromVersion
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Schema version not stored in the metastore. "
operator|+
literal|"Metastore schema is too old or corrupt. Try specifying the version manually"
argument_list|)
throw|;
block|}
name|doUpgrade
argument_list|(
name|fromVersion
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MetaStoreConnectionInfo
name|getConnectionInfo
parameter_list|(
name|boolean
name|printInfo
parameter_list|)
block|{
return|return
operator|new
name|MetaStoreConnectionInfo
argument_list|(
name|userName
argument_list|,
name|passWord
argument_list|,
name|url
argument_list|,
name|driver
argument_list|,
name|printInfo
argument_list|,
name|conf
argument_list|,
name|dbType
argument_list|,
name|hiveDb
argument_list|)
return|;
block|}
comment|/**    * Perform metastore schema upgrade    *    * @param fromSchemaVer    *          Existing version of the metastore. If null, then read from the metastore    */
name|void
name|doUpgrade
parameter_list|(
name|String
name|fromSchemaVer
parameter_list|)
throws|throws
name|HiveMetaException
block|{
if|if
condition|(
name|metaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|fromSchemaVer
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No schema upgrade required from version "
operator|+
name|fromSchemaVer
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Find the list of scripts to execute for this upgrade
name|List
argument_list|<
name|String
argument_list|>
name|upgradeScripts
init|=
name|metaStoreSchemaInfo
operator|.
name|getUpgradeScripts
argument_list|(
name|fromSchemaVer
argument_list|)
decl_stmt|;
name|testConnectionToMetastore
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting upgrade metastore schema from version "
operator|+
name|fromSchemaVer
operator|+
literal|" to "
operator|+
name|metaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|scriptDir
init|=
name|metaStoreSchemaInfo
operator|.
name|getMetaStoreScriptDir
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|scriptFile
range|:
name|upgradeScripts
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Upgrade script "
operator|+
name|scriptFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|runPreUpgrade
argument_list|(
name|scriptDir
argument_list|,
name|scriptFile
argument_list|)
expr_stmt|;
name|runSqlLine
argument_list|(
name|scriptDir
argument_list|,
name|scriptFile
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Completed "
operator|+
name|scriptFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|eIO
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Upgrade FAILED! Metastore state would be inconsistent !!"
argument_list|,
name|eIO
argument_list|)
throw|;
block|}
comment|// Revalidated the new version after upgrade
name|verifySchemaVersion
argument_list|()
expr_stmt|;
block|}
comment|/**    * Initialize the metastore schema to current version    *    */
name|void
name|doInit
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|doInit
argument_list|(
name|metaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// Revalidated the new version after upgrade
name|verifySchemaVersion
argument_list|()
expr_stmt|;
block|}
comment|/**    * Initialize the metastore schema    *    * @param toVersion    *          If null then current hive version is used    */
name|void
name|doInit
parameter_list|(
name|String
name|toVersion
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|testConnectionToMetastore
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting metastore schema initialization to "
operator|+
name|toVersion
argument_list|)
expr_stmt|;
name|String
name|initScriptDir
init|=
name|metaStoreSchemaInfo
operator|.
name|getMetaStoreScriptDir
argument_list|()
decl_stmt|;
name|String
name|initScriptFile
init|=
name|metaStoreSchemaInfo
operator|.
name|generateInitFileName
argument_list|(
name|toVersion
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Initialization script "
operator|+
name|initScriptFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|runSqlLine
argument_list|(
name|initScriptDir
argument_list|,
name|initScriptFile
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Initialization script completed"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Schema initialization FAILED!"
operator|+
literal|" Metastore state would be inconsistent !!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|doCreateUser
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|testConnectionToMetastore
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting user creation"
argument_list|)
expr_stmt|;
name|String
name|scriptDir
init|=
name|metaStoreSchemaInfo
operator|.
name|getMetaStoreScriptDir
argument_list|()
decl_stmt|;
name|String
name|protoCreateFile
init|=
name|metaStoreSchemaInfo
operator|.
name|getCreateUserScript
argument_list|()
decl_stmt|;
try|try
block|{
name|File
name|createFile
init|=
name|subUserAndPassword
argument_list|(
name|scriptDir
argument_list|,
name|protoCreateFile
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creation script "
operator|+
name|createFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
if|if
condition|(
literal|"oracle"
operator|.
name|equals
argument_list|(
name|dbType
argument_list|)
condition|)
name|oracleCreateUserHack
argument_list|(
name|createFile
argument_list|)
expr_stmt|;
else|else
name|runSqlLine
argument_list|(
name|createFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|createFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"User creation completed"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"User creation FAILED!"
operator|+
literal|" Metastore unusable !!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|File
name|subUserAndPassword
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|createFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"create-hive-user-"
operator|+
name|dbType
argument_list|,
literal|".sql"
argument_list|)
decl_stmt|;
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|createFile
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|proto
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|proto
argument_list|)
argument_list|)
decl_stmt|;
name|reader
operator|.
name|lines
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|replace
argument_list|(
literal|"_REPLACE_WITH_USER_"
argument_list|,
name|hiveUser
argument_list|)
operator|.
name|replace
argument_list|(
literal|"_REPLACE_WITH_PASSWD_"
argument_list|,
name|hivePasswd
argument_list|)
operator|.
name|replace
argument_list|(
literal|"_REPLACE_WITH_DB_"
argument_list|,
name|hiveDb
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|s
lambda|->
block|{
lambda|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to write to tmp file "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|)
class|;
end_class

begin_expr_stmt
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|createFile
return|;
end_return

begin_function
unit|}    private
name|void
name|oracleCreateUserHack
parameter_list|(
name|File
name|createFile
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found oracle, hacking our way through it rather than using SqlLine"
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|createFile
argument_list|)
argument_list|)
init|)
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|getConnectionToMetastore
argument_list|(
literal|false
argument_list|)
init|)
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|reader
operator|.
name|lines
argument_list|()
operator|.
name|forEach
argument_list|(
name|s
lambda|->
block|{
assert|assert
name|s
operator|.
name|charAt
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|';'
assert|;
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"statement<"
operator|+
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|+
literal|"> failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught IOException trying to read modified create user script "
operator|+
name|createFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|HiveMetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to connect to RDBMS"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got SQLException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|int
name|doValidate
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting metastore validation\n"
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|getConnectionToMetastore
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
try|try
block|{
if|if
condition|(
name|validateSchemaVersions
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[SUCCESS]\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[FAIL]\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validateSequences
argument_list|(
name|conn
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[SUCCESS]\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[FAIL]\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validateSchemaTables
argument_list|(
name|conn
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[SUCCESS]\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[FAIL]\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validateLocations
argument_list|(
name|conn
argument_list|,
name|this
operator|.
name|validationServers
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[SUCCESS]\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[WARN]\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validateColumnNullValues
argument_list|(
name|conn
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[SUCCESS]\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[WARN]\n"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Not a lot you can do here.
block|}
block|}
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Done with metastore validation: "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[FAIL]"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[SUCCESS]"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_function

begin_function
name|boolean
name|validateSequences
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|seqNameToTable
init|=
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"MDatabase"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"DBS"
argument_list|,
literal|"DB_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MRole"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"ROLES"
argument_list|,
literal|"ROLE_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MGlobalPrivilege"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"GLOBAL_PRIVS"
argument_list|,
literal|"USER_GRANT_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MTable"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"TBLS"
argument_list|,
literal|"TBL_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MStorageDescriptor"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"SDS"
argument_list|,
literal|"SD_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MSerDeInfo"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"SERDES"
argument_list|,
literal|"SERDE_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MColumnDescriptor"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"CDS"
argument_list|,
literal|"CD_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MTablePrivilege"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"TBL_PRIVS"
argument_list|,
literal|"TBL_GRANT_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MTableColumnStatistics"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"TAB_COL_STATS"
argument_list|,
literal|"CS_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MPartition"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"PARTITIONS"
argument_list|,
literal|"PART_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MPartitionColumnStatistics"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"PART_COL_STATS"
argument_list|,
literal|"CS_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MFunction"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"FUNCS"
argument_list|,
literal|"FUNC_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MIndex"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"IDXS"
argument_list|,
literal|"INDEX_ID"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"MStringList"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"SKEWED_STRING_LIST"
argument_list|,
literal|"STRING_LIST_ID"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Validating sequence number for SEQUENCE_TABLE"
argument_list|)
expr_stmt|;
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
try|try
block|{
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|seqName
range|:
name|seqNameToTable
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|tableName
init|=
name|seqNameToTable
operator|.
name|get
argument_list|(
name|seqName
argument_list|)
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|String
name|tableKey
init|=
name|seqNameToTable
operator|.
name|get
argument_list|(
name|seqName
argument_list|)
operator|.
name|getRight
argument_list|()
decl_stmt|;
name|String
name|fullSequenceName
init|=
literal|"org.apache.hadoop.hive.metastore.model."
operator|+
name|seqName
decl_stmt|;
name|String
name|seqQuery
init|=
name|needsQuotedIdentifier
condition|?
operator|(
literal|"select t.\"NEXT_VAL\" from \"SEQUENCE_TABLE\" t WHERE t.\"SEQUENCE_NAME\"=? order by t.\"SEQUENCE_NAME\" "
operator|)
else|:
operator|(
literal|"select t.NEXT_VAL from SEQUENCE_TABLE t WHERE t.SEQUENCE_NAME=? order by t.SEQUENCE_NAME "
operator|)
decl_stmt|;
name|String
name|maxIdQuery
init|=
name|needsQuotedIdentifier
condition|?
operator|(
literal|"select max(\""
operator|+
name|tableKey
operator|+
literal|"\") from \""
operator|+
name|tableName
operator|+
literal|"\""
operator|)
else|:
operator|(
literal|"select max("
operator|+
name|tableKey
operator|+
literal|") from "
operator|+
name|tableName
operator|)
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|maxIdQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|long
name|maxId
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxId
operator|>
literal|0
condition|)
block|{
name|PreparedStatement
name|pStmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|seqQuery
argument_list|)
decl_stmt|;
name|pStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|fullSequenceName
argument_list|)
expr_stmt|;
name|ResultSet
name|resSeq
init|=
name|pStmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|resSeq
operator|.
name|next
argument_list|()
condition|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
name|logAndPrintToError
argument_list|(
literal|"Missing SEQUENCE_NAME "
operator|+
name|seqName
operator|+
literal|" from SEQUENCE_TABLE"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resSeq
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
operator|<
name|maxId
condition|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
name|logAndPrintToError
argument_list|(
literal|"NEXT_VAL for "
operator|+
name|seqName
operator|+
literal|" in SEQUENCE_TABLE< max("
operator|+
name|tableKey
operator|+
literal|") in "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|(
name|isValid
condition|?
literal|"Succeeded"
else|:
literal|"Failed"
operator|)
operator|+
literal|" in sequence number validation for SEQUENCE_TABLE."
argument_list|)
expr_stmt|;
return|return
name|isValid
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to validate sequence number for SEQUENCE_TABLE"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
name|boolean
name|validateSchemaVersions
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Validating schema version"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|newSchemaVersion
init|=
name|metaStoreSchemaInfo
operator|.
name|getMetaStoreSchemaVersion
argument_list|(
name|getConnectionInfo
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertCompatibleVersion
argument_list|(
name|metaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|,
name|newSchemaVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveMetaException
name|hme
parameter_list|)
block|{
if|if
condition|(
name|hme
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Metastore schema version is not compatible"
argument_list|)
operator|||
name|hme
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Multiple versions were found in metastore"
argument_list|)
operator|||
name|hme
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Could not find version info in metastore VERSION table"
argument_list|)
condition|)
block|{
name|logAndPrintToError
argument_list|(
name|hme
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed in schema version validation."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
name|hme
throw|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Succeeded in schema version validation."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function

begin_function
name|boolean
name|validateSchemaTables
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|String
name|version
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|DatabaseMetaData
name|metadata
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dbTables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|schemaTables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|subScripts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Connection
name|hmsConn
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Validating metastore schema tables"
argument_list|)
expr_stmt|;
try|try
block|{
name|version
operator|=
name|metaStoreSchemaInfo
operator|.
name|getMetaStoreSchemaVersion
argument_list|(
name|getConnectionInfo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveMetaException
name|he
parameter_list|)
block|{
name|logAndPrintToError
argument_list|(
literal|"Failed to determine schema version from Hive Metastore DB. "
operator|+
name|he
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed in schema table validation."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to determine schema version from Hive Metastore DB,"
operator|+
name|he
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// re-open the hms connection
name|hmsConn
operator|=
name|getConnectionToMetastore
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Validating tables in the schema for version "
operator|+
name|version
argument_list|)
expr_stmt|;
try|try
block|{
name|metadata
operator|=
name|conn
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
name|String
index|[]
name|types
init|=
block|{
literal|"TABLE"
block|}
decl_stmt|;
name|rs
operator|=
name|metadata
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
name|hmsConn
operator|.
name|getSchema
argument_list|()
argument_list|,
literal|"%"
argument_list|,
name|types
argument_list|)
expr_stmt|;
name|String
name|table
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|table
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
expr_stmt|;
name|dbTables
operator|.
name|add
argument_list|(
name|table
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found table "
operator|+
name|table
operator|+
literal|" in HMS dbstore"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to retrieve schema tables from Hive Metastore DB,"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Not a lot you can do here.
block|}
block|}
block|}
comment|// parse the schema file to determine the tables that are expected to exist
comment|// we are using oracle schema because it is simpler to parse, no quotes or backticks etc
name|String
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|metaStoreSchemaInfo
operator|.
name|getMetaStoreScriptDir
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|schemaFile
init|=
operator|new
name|File
argument_list|(
name|metaStoreSchemaInfo
operator|.
name|getMetaStoreScriptDir
argument_list|()
argument_list|,
name|metaStoreSchemaInfo
operator|.
name|generateInitFileName
argument_list|(
name|version
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parsing schema script "
operator|+
name|schemaFile
argument_list|)
expr_stmt|;
name|subScripts
operator|.
name|addAll
argument_list|(
name|findCreateTable
argument_list|(
name|schemaFile
argument_list|,
name|schemaTables
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|subScripts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|schemaFile
operator|=
name|baseDir
operator|+
literal|"/"
operator|+
name|dbType
operator|+
literal|"/"
operator|+
name|subScripts
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parsing subscript "
operator|+
name|schemaFile
argument_list|)
expr_stmt|;
name|subScripts
operator|.
name|addAll
argument_list|(
name|findCreateTable
argument_list|(
name|schemaFile
argument_list|,
name|schemaTables
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logAndPrintToError
argument_list|(
literal|"Exception in parsing schema file. Cause:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed in schema table validation."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Schema tables:[ "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|schemaTables
operator|.
name|toArray
argument_list|()
argument_list|)
operator|+
literal|" ]"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DB tables:[ "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|dbTables
operator|.
name|toArray
argument_list|()
argument_list|)
operator|+
literal|" ]"
argument_list|)
expr_stmt|;
comment|// now diff the lists
name|schemaTables
operator|.
name|removeAll
argument_list|(
name|dbTables
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaTables
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|schemaTables
argument_list|)
expr_stmt|;
name|logAndPrintToError
argument_list|(
literal|"Table(s) [ "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|schemaTables
operator|.
name|toArray
argument_list|()
argument_list|)
operator|+
literal|" ] are missing from the metastore database schema."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed in schema table validation."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Succeeded in schema table validation."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|findCreateTable
parameter_list|(
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableList
parameter_list|)
throws|throws
name|Exception
block|{
name|NestedScriptParser
name|sp
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
name|dbType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
decl_stmt|;
name|Pattern
name|regexp
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|subs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|groupNo
init|=
literal|2
decl_stmt|;
name|regexp
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"CREATE TABLE(\\s+IF NOT EXISTS)?\\s+(\\S+).*"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|path
operator|+
literal|" does not exist. Potentially incorrect version in the metastore VERSION table"
argument_list|)
throw|;
block|}
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|path
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sp
operator|.
name|isNestedScript
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|String
name|subScript
decl_stmt|;
name|subScript
operator|=
name|sp
operator|.
name|getScriptName
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Schema subscript "
operator|+
name|subScript
operator|+
literal|" found"
argument_list|)
expr_stmt|;
name|subs
operator|.
name|add
argument_list|(
name|subScript
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|line
operator|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"( )+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|//suppress multi-spaces
name|line
operator|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"\\("
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"IF NOT EXISTS "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"`"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|matcher
operator|=
name|regexp
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|table
init|=
name|matcher
operator|.
name|group
argument_list|(
name|groupNo
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|.
name|equals
argument_list|(
literal|"derby"
argument_list|)
condition|)
name|table
operator|=
name|table
operator|.
name|replaceAll
argument_list|(
literal|"APP\\."
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|tableList
operator|.
name|add
argument_list|(
name|table
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found table "
operator|+
name|table
operator|+
literal|" in the schema"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|subs
return|;
block|}
end_function

begin_function
name|boolean
name|validateColumnNullValues
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|HiveMetaException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Validating columns for incorrect NULL values."
argument_list|)
expr_stmt|;
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
try|try
block|{
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|tblQuery
init|=
name|needsQuotedIdentifier
condition|?
operator|(
literal|"select t.* from \"TBLS\" t WHERE t.\"SD_ID\" IS NULL and (t.\"TBL_TYPE\"='"
operator|+
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|+
literal|"' or t.\"TBL_TYPE\"='"
operator|+
name|TableType
operator|.
name|MANAGED_TABLE
operator|+
literal|"') order by t.\"TBL_ID\" "
operator|)
else|:
operator|(
literal|"select t.* from TBLS t WHERE t.SD_ID IS NULL and (t.TBL_TYPE='"
operator|+
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|+
literal|"' or t.TBL_TYPE='"
operator|+
name|TableType
operator|.
name|MANAGED_TABLE
operator|+
literal|"') order by t.TBL_ID "
operator|)
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|tblQuery
argument_list|)
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|long
name|tableId
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|"TBL_ID"
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|res
operator|.
name|getString
argument_list|(
literal|"TBL_NAME"
argument_list|)
decl_stmt|;
name|String
name|tableType
init|=
name|res
operator|.
name|getString
argument_list|(
literal|"TBL_TYPE"
argument_list|)
decl_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
name|logAndPrintToError
argument_list|(
literal|"SD_ID in TBLS should not be NULL for Table Name="
operator|+
name|tableName
operator|+
literal|", Table ID="
operator|+
name|tableId
operator|+
literal|", Table Type="
operator|+
name|tableType
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|(
name|isValid
condition|?
literal|"Succeeded"
else|:
literal|"Failed"
operator|)
operator|+
literal|" in column validation for incorrect NULL values."
argument_list|)
expr_stmt|;
return|return
name|isValid
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Failed to validate columns for incorrect NULL values"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    *  Run pre-upgrade scripts corresponding to a given upgrade script,    *  if any exist. The errors from pre-upgrade are ignored.    *  Pre-upgrade scripts typically contain setup statements which    *  may fail on some database versions and failure is ignorable.    *    *  @param scriptDir upgrade script directory name    *  @param scriptFile upgrade script file name    */
end_comment

begin_function
specifier|private
name|void
name|runPreUpgrade
parameter_list|(
name|String
name|scriptDir
parameter_list|,
name|String
name|scriptFile
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
name|String
name|preUpgradeScript
init|=
name|metaStoreSchemaInfo
operator|.
name|getPreUpgradeScriptName
argument_list|(
name|i
argument_list|,
name|scriptFile
argument_list|)
decl_stmt|;
name|File
name|preUpgradeScriptFile
init|=
operator|new
name|File
argument_list|(
name|scriptDir
argument_list|,
name|preUpgradeScript
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|preUpgradeScriptFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
break|break;
block|}
try|try
block|{
name|runSqlLine
argument_list|(
name|scriptDir
argument_list|,
name|preUpgradeScript
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Completed "
operator|+
name|preUpgradeScript
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore the pre-upgrade script errors
name|logAndPrintToError
argument_list|(
literal|"Warning in pre-upgrade script "
operator|+
name|preUpgradeScript
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_comment
comment|/***    * Run beeline with the given metastore script. Flatten the nested scripts    * into single file.    */
end_comment

begin_function
specifier|private
name|void
name|runSqlLine
parameter_list|(
name|String
name|scriptDir
parameter_list|,
name|String
name|scriptFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveMetaException
block|{
comment|// This no longer does expansions of run commands in the files as it used to.  Instead it
comment|// depends on the developers to have already unrolled those in the files.
name|runSqlLine
argument_list|(
name|scriptDir
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|scriptFile
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Generate the beeline args per hive conf and execute the given script
end_comment

begin_function
name|void
name|runSqlLine
parameter_list|(
name|String
name|sqlScriptFile
parameter_list|)
throws|throws
name|IOException
block|{
name|CommandBuilder
name|builder
init|=
operator|new
name|CommandBuilder
argument_list|(
name|conf
argument_list|,
name|url
argument_list|,
name|driver
argument_list|,
name|userName
argument_list|,
name|passWord
argument_list|,
name|sqlScriptFile
argument_list|)
decl_stmt|;
comment|// run the script using SqlLine
name|SqlLine
name|sqlLine
init|=
operator|new
name|SqlLine
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|outputForLog
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|verbose
condition|)
block|{
name|OutputStream
name|out
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|out
operator|=
name|outputForLog
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
operator|new
name|NullOutputStream
argument_list|()
expr_stmt|;
block|}
name|sqlLine
operator|.
name|setOutputStream
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"sqlline.silent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
comment|//sqlLine.getOpts().setAllowMultiLineCommand(false);
comment|//System.setProperty("sqlline.isolation","TRANSACTION_READ_COMMITTED");
comment|// We can be pretty sure that an entire line can be processed as a single command since
comment|// we always add a line separator at the end while calling dbCommandParser.buildCommand.
comment|//sqlLine.getOpts().setEntireLineAsCommand(true);
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to run command<"
operator|+
name|builder
operator|.
name|buildToLog
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|SqlLine
operator|.
name|Status
name|status
init|=
name|sqlLine
operator|.
name|begin
argument_list|(
name|builder
operator|.
name|buildToRun
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|outputForLog
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received following output from Sqlline:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|outputForLog
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|!=
name|SqlLine
operator|.
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Schema script failed, errorcode "
operator|+
name|status
argument_list|)
throw|;
block|}
block|}
end_function

begin_class
specifier|static
class|class
name|CommandBuilder
block|{
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
specifier|private
specifier|final
name|String
name|sqlScriptFile
decl_stmt|;
specifier|private
specifier|final
name|String
name|driver
decl_stmt|;
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
name|CommandBuilder
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|driver
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|sqlScriptFile
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|driver
operator|=
name|driver
expr_stmt|;
name|this
operator|.
name|sqlScriptFile
operator|=
name|sqlScriptFile
expr_stmt|;
block|}
name|String
index|[]
name|buildToRun
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|argsWith
argument_list|(
name|password
argument_list|)
return|;
block|}
name|String
name|buildToLog
parameter_list|()
throws|throws
name|IOException
block|{
name|logScript
argument_list|()
expr_stmt|;
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|argsWith
argument_list|(
name|PASSWD_MASK
argument_list|)
argument_list|,
literal|" "
argument_list|)
return|;
block|}
specifier|private
name|String
index|[]
name|argsWith
parameter_list|(
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"-u"
block|,
name|url
operator|==
literal|null
condition|?
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CONNECT_URL_KEY
argument_list|)
else|:
name|url
block|,
literal|"-d"
block|,
name|driver
operator|==
literal|null
condition|?
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|CONNECTION_DRIVER
argument_list|)
else|:
name|driver
block|,
literal|"-n"
block|,
name|userName
block|,
literal|"-p"
block|,
name|password
block|,
literal|"--isolation=TRANSACTION_READ_COMMITTED"
block|,
literal|"-f"
block|,
name|sqlScriptFile
block|}
return|;
block|}
specifier|private
name|void
name|logScript
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to invoke file that contains:"
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|sqlScriptFile
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"script: "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// Create the required command line options
end_comment

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
name|void
name|initOptions
parameter_list|(
name|Options
name|cmdLineOptions
parameter_list|)
block|{
name|Option
name|help
init|=
operator|new
name|Option
argument_list|(
literal|"help"
argument_list|,
literal|"print this message"
argument_list|)
decl_stmt|;
name|Option
name|upgradeOpt
init|=
operator|new
name|Option
argument_list|(
literal|"upgradeSchema"
argument_list|,
literal|"Schema upgrade"
argument_list|)
decl_stmt|;
name|Option
name|upgradeFromOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"upgradeFrom"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Schema upgrade from a version"
argument_list|)
operator|.
name|create
argument_list|(
literal|"upgradeSchemaFrom"
argument_list|)
decl_stmt|;
name|Option
name|initOpt
init|=
operator|new
name|Option
argument_list|(
literal|"initSchema"
argument_list|,
literal|"Schema initialization"
argument_list|)
decl_stmt|;
name|Option
name|initToOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"initTo"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Schema initialization to a version"
argument_list|)
operator|.
name|create
argument_list|(
literal|"initSchemaTo"
argument_list|)
decl_stmt|;
name|Option
name|infoOpt
init|=
operator|new
name|Option
argument_list|(
literal|"info"
argument_list|,
literal|"Show config and schema details"
argument_list|)
decl_stmt|;
name|Option
name|validateOpt
init|=
operator|new
name|Option
argument_list|(
literal|"validate"
argument_list|,
literal|"Validate the database"
argument_list|)
decl_stmt|;
name|Option
name|createUserOpt
init|=
operator|new
name|Option
argument_list|(
literal|"createUser"
argument_list|,
literal|"Create the Hive user, use admin user and "
operator|+
literal|"password with this"
argument_list|)
decl_stmt|;
name|OptionGroup
name|optGroup
init|=
operator|new
name|OptionGroup
argument_list|()
decl_stmt|;
name|optGroup
operator|.
name|addOption
argument_list|(
name|upgradeOpt
argument_list|)
operator|.
name|addOption
argument_list|(
name|initOpt
argument_list|)
operator|.
name|addOption
argument_list|(
name|help
argument_list|)
operator|.
name|addOption
argument_list|(
name|upgradeFromOpt
argument_list|)
operator|.
name|addOption
argument_list|(
name|createUserOpt
argument_list|)
operator|.
name|addOption
argument_list|(
name|initToOpt
argument_list|)
operator|.
name|addOption
argument_list|(
name|infoOpt
argument_list|)
operator|.
name|addOption
argument_list|(
name|validateOpt
argument_list|)
expr_stmt|;
name|optGroup
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Option
name|userNameOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"user"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Override config file user name"
argument_list|)
operator|.
name|create
argument_list|(
literal|"userName"
argument_list|)
decl_stmt|;
name|Option
name|passwdOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"password"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Override config file password"
argument_list|)
operator|.
name|create
argument_list|(
literal|"passWord"
argument_list|)
decl_stmt|;
name|Option
name|hiveUserOpt
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Hive user (for use with createUser)"
argument_list|)
operator|.
name|create
argument_list|(
literal|"hiveUser"
argument_list|)
decl_stmt|;
name|Option
name|hivePasswdOpt
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Hive password (for use with createUser)"
argument_list|)
operator|.
name|create
argument_list|(
literal|"hivePassword"
argument_list|)
decl_stmt|;
name|Option
name|hiveDbOpt
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Hive database (for use with createUser)"
argument_list|)
operator|.
name|create
argument_list|(
literal|"hiveDb"
argument_list|)
decl_stmt|;
name|Option
name|dbTypeOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"databaseType"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Metastore database type"
argument_list|)
operator|.
name|create
argument_list|(
literal|"dbType"
argument_list|)
decl_stmt|;
name|Option
name|urlOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"url"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"connection url to the database"
argument_list|)
operator|.
name|create
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
name|Option
name|driverOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"driver"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"driver name for connection"
argument_list|)
operator|.
name|create
argument_list|(
literal|"driver"
argument_list|)
decl_stmt|;
name|Option
name|dbOpts
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"databaseOpts"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Backend DB specific options"
argument_list|)
operator|.
name|create
argument_list|(
literal|"dbOpts"
argument_list|)
decl_stmt|;
name|Option
name|dryRunOpt
init|=
operator|new
name|Option
argument_list|(
literal|"dryRun"
argument_list|,
literal|"list SQL scripts (no execute)"
argument_list|)
decl_stmt|;
name|Option
name|verboseOpt
init|=
operator|new
name|Option
argument_list|(
literal|"verbose"
argument_list|,
literal|"only print SQL statements"
argument_list|)
decl_stmt|;
name|Option
name|serversOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"serverList"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"a comma-separated list of servers used in location validation in the format of scheme://authority (e.g. hdfs://localhost:8000)"
argument_list|)
operator|.
name|create
argument_list|(
literal|"servers"
argument_list|)
decl_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|dryRunOpt
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|userNameOpt
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|passwdOpt
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|dbTypeOpt
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|verboseOpt
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|urlOpt
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|driverOpt
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|dbOpts
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|serversOpt
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|hiveUserOpt
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|hivePasswdOpt
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|hiveDbOpt
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOptionGroup
argument_list|(
name|optGroup
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|logAndPrintToError
parameter_list|(
name|String
name|errmsg
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|errmsg
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|errmsg
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to run command: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|args
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|CommandLine
name|line
decl_stmt|;
name|String
name|dbType
decl_stmt|;
name|String
name|schemaVer
decl_stmt|;
name|Options
name|cmdLineOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
comment|// Argument handling
name|initOptions
argument_list|(
name|cmdLineOptions
argument_list|)
expr_stmt|;
try|try
block|{
name|line
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|cmdLineOptions
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|logAndPrintToError
argument_list|(
literal|"HiveSchemaTool:Parsing failed.  Reason: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|usage
argument_list|(
name|cmdLineOptions
argument_list|)
return|;
block|}
assert|assert
name|line
operator|!=
literal|null
assert|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"schemaTool"
argument_list|,
name|cmdLineOptions
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"dbType"
argument_list|)
condition|)
block|{
name|dbType
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"dbType"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|dbType
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveSchemaHelper
operator|.
name|DB_DERBY
argument_list|)
operator|&&
operator|!
name|dbType
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveSchemaHelper
operator|.
name|DB_MSSQL
argument_list|)
operator|&&
operator|!
name|dbType
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveSchemaHelper
operator|.
name|DB_MYSQL
argument_list|)
operator|&&
operator|!
name|dbType
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveSchemaHelper
operator|.
name|DB_POSTGRACE
argument_list|)
operator|&&
operator|!
name|dbType
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveSchemaHelper
operator|.
name|DB_ORACLE
argument_list|)
operator|)
condition|)
block|{
name|logAndPrintToError
argument_list|(
literal|"Unsupported dbType "
operator|+
name|dbType
argument_list|)
expr_stmt|;
return|return
name|usage
argument_list|(
name|cmdLineOptions
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|logAndPrintToError
argument_list|(
literal|"no dbType supplied"
argument_list|)
expr_stmt|;
return|return
name|usage
argument_list|(
name|cmdLineOptions
argument_list|)
return|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|SCHEMA_VERIFICATION
operator|.
name|toString
argument_list|()
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
try|try
block|{
name|MetastoreSchemaTool
name|schemaTool
init|=
operator|new
name|MetastoreSchemaTool
argument_list|(
name|dbType
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"userName"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|setUserName
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"userName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|schemaTool
operator|.
name|setUserName
argument_list|(
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|schemaTool
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|CONNECTION_USER_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"passWord"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|setPassWord
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"passWord"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|schemaTool
operator|.
name|setPassWord
argument_list|(
name|MetastoreConf
operator|.
name|getPassword
argument_list|(
name|schemaTool
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|PWD
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Error getting metastore password"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"hiveUser"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|setHiveUser
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"hiveUser"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"hivePassword"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|setHivePasswd
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"hivePassword"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"hiveDb"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|setHiveDb
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"hiveDb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"url"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|setUrl
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"driver"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|setDriver
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"driver"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"dryRun"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|setDryRun
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"verbose"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"dbOpts"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|setDbOpts
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"dbOpts"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"validate"
argument_list|)
operator|&&
name|line
operator|.
name|hasOption
argument_list|(
literal|"servers"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|setValidationServers
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"servers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"info"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|showInfo
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"upgradeSchema"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|doUpgrade
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"upgradeSchemaFrom"
argument_list|)
condition|)
block|{
name|schemaVer
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"upgradeSchemaFrom"
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|doUpgrade
argument_list|(
name|schemaVer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"initSchema"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|doInit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"initSchemaTo"
argument_list|)
condition|)
block|{
name|schemaVer
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"initSchemaTo"
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|doInit
argument_list|(
name|schemaVer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"validate"
argument_list|)
condition|)
block|{
return|return
name|schemaTool
operator|.
name|doValidate
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"createUser"
argument_list|)
condition|)
block|{
name|schemaTool
operator|.
name|doCreateUser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logAndPrintToError
argument_list|(
literal|"no valid option supplied"
argument_list|)
expr_stmt|;
return|return
name|usage
argument_list|(
name|cmdLineOptions
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveMetaException
name|e
parameter_list|)
block|{
name|logAndPrintToError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Throwable
name|t
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|logAndPrintToError
argument_list|(
literal|"Underlying cause: "
operator|+
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" : "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SQLException
condition|)
block|{
name|logAndPrintToError
argument_list|(
literal|"SQL Error code: "
operator|+
operator|(
operator|(
name|SQLException
operator|)
name|t
operator|)
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"verbose"
argument_list|)
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logAndPrintToError
argument_list|(
literal|"Use --verbose for detailed stacktrace."
argument_list|)
expr_stmt|;
block|}
name|logAndPrintToError
argument_list|(
literal|"*** schemaTool failed ***"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"schemaTool completed"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

unit|}
end_unit

