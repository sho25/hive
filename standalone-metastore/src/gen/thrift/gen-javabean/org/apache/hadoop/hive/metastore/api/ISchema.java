begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.9.3)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"rawtypes"
block|,
literal|"serial"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Generated
argument_list|(
name|value
operator|=
literal|"Autogenerated by Thrift Compiler (0.9.3)"
argument_list|)
annotation|@
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|ISchema
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|ISchema
argument_list|,
name|ISchema
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|ISchema
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"ISchema"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SCHEMA_TYPE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"schemaType"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"name"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|CAT_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"catName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"dbName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COMPATIBILITY_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"compatibility"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|VALIDATION_LEVEL_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"validationLevel"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|CAN_EVOLVE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"canEvolve"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SCHEMA_GROUP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"schemaGroup"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|DESCRIPTION_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"description"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|9
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|ISchemaStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|ISchemaTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SchemaType
name|schemaType
decl_stmt|;
comment|// required
specifier|private
name|String
name|name
decl_stmt|;
comment|// required
specifier|private
name|String
name|catName
decl_stmt|;
comment|// required
specifier|private
name|String
name|dbName
decl_stmt|;
comment|// required
specifier|private
name|SchemaCompatibility
name|compatibility
decl_stmt|;
comment|// required
specifier|private
name|SchemaValidation
name|validationLevel
decl_stmt|;
comment|// required
specifier|private
name|boolean
name|canEvolve
decl_stmt|;
comment|// required
specifier|private
name|String
name|schemaGroup
decl_stmt|;
comment|// optional
specifier|private
name|String
name|description
decl_stmt|;
comment|// optional
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**      *       * @see SchemaType      */
name|SCHEMA_TYPE
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"schemaType"
argument_list|)
block|,
name|NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"name"
argument_list|)
block|,
name|CAT_NAME
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"catName"
argument_list|)
block|,
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"dbName"
argument_list|)
block|,
comment|/**      *       * @see SchemaCompatibility      */
name|COMPATIBILITY
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"compatibility"
argument_list|)
block|,
comment|/**      *       * @see SchemaValidation      */
name|VALIDATION_LEVEL
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"validationLevel"
argument_list|)
block|,
name|CAN_EVOLVE
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"canEvolve"
argument_list|)
block|,
name|SCHEMA_GROUP
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|,
literal|"schemaGroup"
argument_list|)
block|,
name|DESCRIPTION
argument_list|(
operator|(
name|short
operator|)
literal|9
argument_list|,
literal|"description"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// SCHEMA_TYPE
return|return
name|SCHEMA_TYPE
return|;
case|case
literal|2
case|:
comment|// NAME
return|return
name|NAME
return|;
case|case
literal|3
case|:
comment|// CAT_NAME
return|return
name|CAT_NAME
return|;
case|case
literal|4
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|5
case|:
comment|// COMPATIBILITY
return|return
name|COMPATIBILITY
return|;
case|case
literal|6
case|:
comment|// VALIDATION_LEVEL
return|return
name|VALIDATION_LEVEL
return|;
case|case
literal|7
case|:
comment|// CAN_EVOLVE
return|return
name|CAN_EVOLVE
return|;
case|case
literal|8
case|:
comment|// SCHEMA_GROUP
return|return
name|SCHEMA_GROUP
return|;
case|case
literal|9
case|:
comment|// DESCRIPTION
return|return
name|DESCRIPTION
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__CANEVOLVE_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|_Fields
name|optionals
index|[]
init|=
block|{
name|_Fields
operator|.
name|SCHEMA_GROUP
block|,
name|_Fields
operator|.
name|DESCRIPTION
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SCHEMA_TYPE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"schemaType"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|SchemaType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"name"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|CAT_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"catName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"dbName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COMPATIBILITY
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"compatibility"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|SchemaCompatibility
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|VALIDATION_LEVEL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"validationLevel"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|SchemaValidation
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|CAN_EVOLVE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"canEvolve"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SCHEMA_GROUP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"schemaGroup"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DESCRIPTION
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"description"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|ISchema
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ISchema
parameter_list|()
block|{   }
specifier|public
name|ISchema
parameter_list|(
name|SchemaType
name|schemaType
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|SchemaCompatibility
name|compatibility
parameter_list|,
name|SchemaValidation
name|validationLevel
parameter_list|,
name|boolean
name|canEvolve
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|schemaType
operator|=
name|schemaType
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|catName
operator|=
name|catName
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|compatibility
operator|=
name|compatibility
expr_stmt|;
name|this
operator|.
name|validationLevel
operator|=
name|validationLevel
expr_stmt|;
name|this
operator|.
name|canEvolve
operator|=
name|canEvolve
expr_stmt|;
name|setCanEvolveIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|ISchema
parameter_list|(
name|ISchema
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetSchemaType
argument_list|()
condition|)
block|{
name|this
operator|.
name|schemaType
operator|=
name|other
operator|.
name|schemaType
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetName
argument_list|()
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|other
operator|.
name|name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetCatName
argument_list|()
condition|)
block|{
name|this
operator|.
name|catName
operator|=
name|other
operator|.
name|catName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetDbName
argument_list|()
condition|)
block|{
name|this
operator|.
name|dbName
operator|=
name|other
operator|.
name|dbName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetCompatibility
argument_list|()
condition|)
block|{
name|this
operator|.
name|compatibility
operator|=
name|other
operator|.
name|compatibility
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetValidationLevel
argument_list|()
condition|)
block|{
name|this
operator|.
name|validationLevel
operator|=
name|other
operator|.
name|validationLevel
expr_stmt|;
block|}
name|this
operator|.
name|canEvolve
operator|=
name|other
operator|.
name|canEvolve
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetSchemaGroup
argument_list|()
condition|)
block|{
name|this
operator|.
name|schemaGroup
operator|=
name|other
operator|.
name|schemaGroup
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetDescription
argument_list|()
condition|)
block|{
name|this
operator|.
name|description
operator|=
name|other
operator|.
name|description
expr_stmt|;
block|}
block|}
specifier|public
name|ISchema
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|ISchema
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|schemaType
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|catName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|compatibility
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|validationLevel
operator|=
literal|null
expr_stmt|;
name|setCanEvolveIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|canEvolve
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|schemaGroup
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|description
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    *     * @see SchemaType    */
specifier|public
name|SchemaType
name|getSchemaType
parameter_list|()
block|{
return|return
name|this
operator|.
name|schemaType
return|;
block|}
comment|/**    *     * @see SchemaType    */
specifier|public
name|void
name|setSchemaType
parameter_list|(
name|SchemaType
name|schemaType
parameter_list|)
block|{
name|this
operator|.
name|schemaType
operator|=
name|schemaType
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSchemaType
parameter_list|()
block|{
name|this
operator|.
name|schemaType
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field schemaType is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSchemaType
parameter_list|()
block|{
return|return
name|this
operator|.
name|schemaType
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSchemaTypeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|schemaType
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field name is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getCatName
parameter_list|()
block|{
return|return
name|this
operator|.
name|catName
return|;
block|}
specifier|public
name|void
name|setCatName
parameter_list|(
name|String
name|catName
parameter_list|)
block|{
name|this
operator|.
name|catName
operator|=
name|catName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetCatName
parameter_list|()
block|{
name|this
operator|.
name|catName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field catName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCatName
parameter_list|()
block|{
return|return
name|this
operator|.
name|catName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setCatNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|catName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbName
return|;
block|}
specifier|public
name|void
name|setDbName
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbName
parameter_list|()
block|{
name|this
operator|.
name|dbName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field dbName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDbName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDbNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|dbName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    *     * @see SchemaCompatibility    */
specifier|public
name|SchemaCompatibility
name|getCompatibility
parameter_list|()
block|{
return|return
name|this
operator|.
name|compatibility
return|;
block|}
comment|/**    *     * @see SchemaCompatibility    */
specifier|public
name|void
name|setCompatibility
parameter_list|(
name|SchemaCompatibility
name|compatibility
parameter_list|)
block|{
name|this
operator|.
name|compatibility
operator|=
name|compatibility
expr_stmt|;
block|}
specifier|public
name|void
name|unsetCompatibility
parameter_list|()
block|{
name|this
operator|.
name|compatibility
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field compatibility is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCompatibility
parameter_list|()
block|{
return|return
name|this
operator|.
name|compatibility
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setCompatibilityIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|compatibility
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    *     * @see SchemaValidation    */
specifier|public
name|SchemaValidation
name|getValidationLevel
parameter_list|()
block|{
return|return
name|this
operator|.
name|validationLevel
return|;
block|}
comment|/**    *     * @see SchemaValidation    */
specifier|public
name|void
name|setValidationLevel
parameter_list|(
name|SchemaValidation
name|validationLevel
parameter_list|)
block|{
name|this
operator|.
name|validationLevel
operator|=
name|validationLevel
expr_stmt|;
block|}
specifier|public
name|void
name|unsetValidationLevel
parameter_list|()
block|{
name|this
operator|.
name|validationLevel
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field validationLevel is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetValidationLevel
parameter_list|()
block|{
return|return
name|this
operator|.
name|validationLevel
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setValidationLevelIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|validationLevel
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isCanEvolve
parameter_list|()
block|{
return|return
name|this
operator|.
name|canEvolve
return|;
block|}
specifier|public
name|void
name|setCanEvolve
parameter_list|(
name|boolean
name|canEvolve
parameter_list|)
block|{
name|this
operator|.
name|canEvolve
operator|=
name|canEvolve
expr_stmt|;
name|setCanEvolveIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetCanEvolve
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CANEVOLVE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field canEvolve is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCanEvolve
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CANEVOLVE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCanEvolveIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CANEVOLVE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getSchemaGroup
parameter_list|()
block|{
return|return
name|this
operator|.
name|schemaGroup
return|;
block|}
specifier|public
name|void
name|setSchemaGroup
parameter_list|(
name|String
name|schemaGroup
parameter_list|)
block|{
name|this
operator|.
name|schemaGroup
operator|=
name|schemaGroup
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSchemaGroup
parameter_list|()
block|{
name|this
operator|.
name|schemaGroup
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field schemaGroup is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSchemaGroup
parameter_list|()
block|{
return|return
name|this
operator|.
name|schemaGroup
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSchemaGroupIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|schemaGroup
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
return|;
block|}
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDescription
parameter_list|()
block|{
name|this
operator|.
name|description
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field description is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDescription
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDescriptionIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|description
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SCHEMA_TYPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSchemaType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSchemaType
argument_list|(
operator|(
name|SchemaType
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CAT_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCatName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCatName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDbName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDbName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COMPATIBILITY
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCompatibility
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCompatibility
argument_list|(
operator|(
name|SchemaCompatibility
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VALIDATION_LEVEL
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetValidationLevel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setValidationLevel
argument_list|(
operator|(
name|SchemaValidation
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CAN_EVOLVE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCanEvolve
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCanEvolve
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SCHEMA_GROUP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSchemaGroup
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSchemaGroup
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DESCRIPTION
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDescription
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDescription
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SCHEMA_TYPE
case|:
return|return
name|getSchemaType
argument_list|()
return|;
case|case
name|NAME
case|:
return|return
name|getName
argument_list|()
return|;
case|case
name|CAT_NAME
case|:
return|return
name|getCatName
argument_list|()
return|;
case|case
name|DB_NAME
case|:
return|return
name|getDbName
argument_list|()
return|;
case|case
name|COMPATIBILITY
case|:
return|return
name|getCompatibility
argument_list|()
return|;
case|case
name|VALIDATION_LEVEL
case|:
return|return
name|getValidationLevel
argument_list|()
return|;
case|case
name|CAN_EVOLVE
case|:
return|return
name|isCanEvolve
argument_list|()
return|;
case|case
name|SCHEMA_GROUP
case|:
return|return
name|getSchemaGroup
argument_list|()
return|;
case|case
name|DESCRIPTION
case|:
return|return
name|getDescription
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SCHEMA_TYPE
case|:
return|return
name|isSetSchemaType
argument_list|()
return|;
case|case
name|NAME
case|:
return|return
name|isSetName
argument_list|()
return|;
case|case
name|CAT_NAME
case|:
return|return
name|isSetCatName
argument_list|()
return|;
case|case
name|DB_NAME
case|:
return|return
name|isSetDbName
argument_list|()
return|;
case|case
name|COMPATIBILITY
case|:
return|return
name|isSetCompatibility
argument_list|()
return|;
case|case
name|VALIDATION_LEVEL
case|:
return|return
name|isSetValidationLevel
argument_list|()
return|;
case|case
name|CAN_EVOLVE
case|:
return|return
name|isSetCanEvolve
argument_list|()
return|;
case|case
name|SCHEMA_GROUP
case|:
return|return
name|isSetSchemaGroup
argument_list|()
return|;
case|case
name|DESCRIPTION
case|:
return|return
name|isSetDescription
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|ISchema
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|ISchema
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|ISchema
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_schemaType
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSchemaType
argument_list|()
decl_stmt|;
name|boolean
name|that_present_schemaType
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSchemaType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_schemaType
operator|||
name|that_present_schemaType
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_schemaType
operator|&&
name|that_present_schemaType
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|schemaType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|schemaType
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_catName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCatName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_catName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCatName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_catName
operator|||
name|that_present_catName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_catName
operator|&&
name|that_present_catName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|catName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|catName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_dbName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDbName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_dbName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDbName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_dbName
operator|||
name|that_present_dbName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbName
operator|&&
name|that_present_dbName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_compatibility
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCompatibility
argument_list|()
decl_stmt|;
name|boolean
name|that_present_compatibility
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCompatibility
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_compatibility
operator|||
name|that_present_compatibility
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_compatibility
operator|&&
name|that_present_compatibility
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|compatibility
operator|.
name|equals
argument_list|(
name|that
operator|.
name|compatibility
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_validationLevel
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetValidationLevel
argument_list|()
decl_stmt|;
name|boolean
name|that_present_validationLevel
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetValidationLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_validationLevel
operator|||
name|that_present_validationLevel
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_validationLevel
operator|&&
name|that_present_validationLevel
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|validationLevel
operator|.
name|equals
argument_list|(
name|that
operator|.
name|validationLevel
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_canEvolve
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_canEvolve
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_canEvolve
operator|||
name|that_present_canEvolve
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_canEvolve
operator|&&
name|that_present_canEvolve
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|canEvolve
operator|!=
name|that
operator|.
name|canEvolve
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_schemaGroup
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSchemaGroup
argument_list|()
decl_stmt|;
name|boolean
name|that_present_schemaGroup
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSchemaGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_schemaGroup
operator|||
name|that_present_schemaGroup
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_schemaGroup
operator|&&
name|that_present_schemaGroup
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|schemaGroup
operator|.
name|equals
argument_list|(
name|that
operator|.
name|schemaGroup
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_description
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDescription
argument_list|()
decl_stmt|;
name|boolean
name|that_present_description
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDescription
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_description
operator|||
name|that_present_description
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_description
operator|&&
name|that_present_description
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|description
operator|.
name|equals
argument_list|(
name|that
operator|.
name|description
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|present_schemaType
init|=
literal|true
operator|&&
operator|(
name|isSetSchemaType
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_schemaType
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_schemaType
condition|)
name|list
operator|.
name|add
argument_list|(
name|schemaType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|present_name
init|=
literal|true
operator|&&
operator|(
name|isSetName
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_name
condition|)
name|list
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|boolean
name|present_catName
init|=
literal|true
operator|&&
operator|(
name|isSetCatName
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_catName
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_catName
condition|)
name|list
operator|.
name|add
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|boolean
name|present_dbName
init|=
literal|true
operator|&&
operator|(
name|isSetDbName
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_dbName
condition|)
name|list
operator|.
name|add
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|boolean
name|present_compatibility
init|=
literal|true
operator|&&
operator|(
name|isSetCompatibility
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_compatibility
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_compatibility
condition|)
name|list
operator|.
name|add
argument_list|(
name|compatibility
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|present_validationLevel
init|=
literal|true
operator|&&
operator|(
name|isSetValidationLevel
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_validationLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_validationLevel
condition|)
name|list
operator|.
name|add
argument_list|(
name|validationLevel
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|present_canEvolve
init|=
literal|true
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_canEvolve
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_canEvolve
condition|)
name|list
operator|.
name|add
argument_list|(
name|canEvolve
argument_list|)
expr_stmt|;
name|boolean
name|present_schemaGroup
init|=
literal|true
operator|&&
operator|(
name|isSetSchemaGroup
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_schemaGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_schemaGroup
condition|)
name|list
operator|.
name|add
argument_list|(
name|schemaGroup
argument_list|)
expr_stmt|;
name|boolean
name|present_description
init|=
literal|true
operator|&&
operator|(
name|isSetDescription
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_description
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_description
condition|)
name|list
operator|.
name|add
argument_list|(
name|description
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|ISchema
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSchemaType
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetSchemaType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSchemaType
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|schemaType
argument_list|,
name|other
operator|.
name|schemaType
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|other
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCatName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCatName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCatName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|catName
argument_list|,
name|other
operator|.
name|catName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDbName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetDbName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDbName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|dbName
argument_list|,
name|other
operator|.
name|dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCompatibility
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCompatibility
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCompatibility
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|compatibility
argument_list|,
name|other
operator|.
name|compatibility
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetValidationLevel
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetValidationLevel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetValidationLevel
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|validationLevel
argument_list|,
name|other
operator|.
name|validationLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCanEvolve
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCanEvolve
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCanEvolve
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|canEvolve
argument_list|,
name|other
operator|.
name|canEvolve
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSchemaGroup
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetSchemaGroup
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSchemaGroup
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|schemaGroup
argument_list|,
name|other
operator|.
name|schemaGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDescription
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetDescription
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDescription
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|description
argument_list|,
name|other
operator|.
name|description
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ISchema("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"schemaType:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|schemaType
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|schemaType
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"catName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|catName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|catName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"compatibility:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|compatibility
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|compatibility
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"validationLevel:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|validationLevel
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|validationLevel
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"canEvolve:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|canEvolve
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetSchemaGroup
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"schemaGroup:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|schemaGroup
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|schemaGroup
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetDescription
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"description:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|description
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|description
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ISchemaStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|ISchemaStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|ISchemaStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ISchemaStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|ISchema
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|ISchema
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// SCHEMA_TYPE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|schemaType
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaType
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setSchemaTypeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// CAT_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|catName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCatNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// DB_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|dbName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setDbNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// COMPATIBILITY
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|compatibility
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaCompatibility
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setCompatibilityIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// VALIDATION_LEVEL
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|validationLevel
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaValidation
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setValidationLevelIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// CAN_EVOLVE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|canEvolve
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCanEvolveIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// SCHEMA_GROUP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|schemaGroup
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSchemaGroupIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// DESCRIPTION
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|description
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setDescriptionIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|ISchema
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|schemaType
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SCHEMA_TYPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|schemaType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|catName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|CAT_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|catName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|dbName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|dbName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|compatibility
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COMPATIBILITY_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|compatibility
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|validationLevel
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|VALIDATION_LEVEL_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|validationLevel
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|CAN_EVOLVE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|canEvolve
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|schemaGroup
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetSchemaGroup
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SCHEMA_GROUP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|schemaGroup
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetDescription
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DESCRIPTION_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|description
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ISchemaTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|ISchemaTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|ISchemaTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ISchemaTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|ISchema
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|ISchema
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSchemaType
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCatName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDbName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCompatibility
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetValidationLevel
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCanEvolve
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSchemaGroup
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDescription
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|9
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSchemaType
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|schemaType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCatName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|catName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDbName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|dbName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCompatibility
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|compatibility
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetValidationLevel
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|validationLevel
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCanEvolve
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|canEvolve
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSchemaGroup
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|schemaGroup
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDescription
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|description
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|ISchema
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|schemaType
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaType
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setSchemaTypeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|catName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCatNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|dbName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setDbNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|struct
operator|.
name|compatibility
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaCompatibility
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setCompatibilityIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|struct
operator|.
name|validationLevel
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaValidation
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setValidationLevelIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|6
argument_list|)
condition|)
block|{
name|struct
operator|.
name|canEvolve
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCanEvolveIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|7
argument_list|)
condition|)
block|{
name|struct
operator|.
name|schemaGroup
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSchemaGroupIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|8
argument_list|)
condition|)
block|{
name|struct
operator|.
name|description
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setDescriptionIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

