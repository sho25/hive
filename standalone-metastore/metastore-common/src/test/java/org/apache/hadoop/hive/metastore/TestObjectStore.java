begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
operator|.
name|RetryingExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CurrentNotificationEventId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|CatalogBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|HiveObjectPrivilegeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|HiveObjectRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PrivilegeGrantInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|EventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|metrics
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|metrics
operator|.
name|MetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MNotificationLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MNotificationNextId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MetastoreUnitTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestObjectStore
block|{
specifier|private
name|ObjectStore
name|objectStore
init|=
literal|null
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB1
init|=
literal|"testobjectstoredb1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB2
init|=
literal|"testobjectstoredb2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE1
init|=
literal|"testobjectstoretable1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEY1
init|=
literal|"testobjectstorekey1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEY2
init|=
literal|"testobjectstorekey2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OWNER
init|=
literal|"testobjectstoreowner"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER1
init|=
literal|"testobjectstoreuser1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ROLE1
init|=
literal|"testobjectstorerole1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ROLE2
init|=
literal|"testobjectstorerole2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestObjectStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|LongSupplier
implements|implements
name|Supplier
argument_list|<
name|Long
argument_list|>
block|{
specifier|public
name|long
name|value
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Long
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|objectStore
operator|=
operator|new
name|ObjectStore
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dropAllStoreObjects
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
name|HiveMetaStore
operator|.
name|HMSHandler
operator|.
name|createDefaultCatalog
argument_list|(
name|objectStore
argument_list|,
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|catalogs
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|String
name|names
index|[]
init|=
block|{
literal|"cat1"
block|,
literal|"cat2"
block|}
decl_stmt|;
specifier|final
name|String
name|locations
index|[]
init|=
block|{
literal|"loc1"
block|,
literal|"loc2"
block|}
decl_stmt|;
specifier|final
name|String
name|descriptions
index|[]
init|=
block|{
literal|"description 1"
block|,
literal|"description 2"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
operator|.
name|setLocation
argument_list|(
name|locations
index|[
name|i
index|]
argument_list|)
operator|.
name|setDescription
argument_list|(
name|descriptions
index|[
name|i
index|]
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|fetchedNames
init|=
name|objectStore
operator|.
name|getCatalogs
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fetchedNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|names
index|[
name|i
index|]
argument_list|,
name|fetchedNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Catalog
name|cat
init|=
name|objectStore
operator|.
name|getCatalog
argument_list|(
name|fetchedNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|names
index|[
name|i
index|]
argument_list|,
name|cat
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|descriptions
index|[
name|i
index|]
argument_list|,
name|cat
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|locations
index|[
name|i
index|]
argument_list|,
name|cat
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Catalog
name|cat
init|=
name|objectStore
operator|.
name|getCatalog
argument_list|(
name|fetchedNames
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|cat
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_CATALOG_COMMENT
argument_list|,
name|cat
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
comment|// Location will vary by system.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|objectStore
operator|.
name|dropCatalog
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|fetchedNames
operator|=
name|objectStore
operator|.
name|getCatalogs
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fetchedNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getNoSuchCatalog
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|objectStore
operator|.
name|getCatalog
argument_list|(
literal|"no_such_catalog"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|dropNoSuchCatalog
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|objectStore
operator|.
name|dropCatalog
argument_list|(
literal|"no_such_catalog"
argument_list|)
expr_stmt|;
block|}
comment|// TODO test dropping non-empty catalog
comment|/**    * Test database operations    */
annotation|@
name|Test
specifier|public
name|void
name|testDatabaseOps
parameter_list|()
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
block|{
name|String
name|catName
init|=
literal|"tdo1_cat"
decl_stmt|;
name|createTestCatalog
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|Database
name|db1
init|=
operator|new
name|Database
argument_list|(
name|DB1
argument_list|,
literal|"description"
argument_list|,
literal|"locationurl"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Database
name|db2
init|=
operator|new
name|Database
argument_list|(
name|DB2
argument_list|,
literal|"description"
argument_list|,
literal|"locationurl"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|db1
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|db2
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db1
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|objectStore
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"databases: "
operator|+
name|databases
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB1
argument_list|,
name|databases
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB2
argument_list|,
name|databases
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|catName
argument_list|,
name|DB1
argument_list|)
expr_stmt|;
name|databases
operator|=
name|objectStore
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB2
argument_list|,
name|databases
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|catName
argument_list|,
name|DB2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test table operations    */
annotation|@
name|Test
specifier|public
name|void
name|testTableOps
parameter_list|()
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidInputException
block|{
name|Database
name|db1
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|DB1
argument_list|)
operator|.
name|setDescription
argument_list|(
literal|"description"
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"locationurl"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db1
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd1
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pk_col"
argument_list|,
literal|"double"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
literal|"location"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
operator|new
name|SerDeInfo
argument_list|(
literal|"SerDeName"
argument_list|,
literal|"serializationLib"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Table
name|tbl1
init|=
operator|new
name|Table
argument_list|(
name|TABLE1
argument_list|,
name|DB1
argument_list|,
literal|"owner"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|sd1
argument_list|,
literal|null
argument_list|,
name|params
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"MANAGED_TABLE"
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|tbl1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|objectStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TABLE1
argument_list|,
name|tables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd2
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"fk_col"
argument_list|,
literal|"double"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
literal|"location"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
operator|new
name|SerDeInfo
argument_list|(
literal|"SerDeName"
argument_list|,
literal|"serializationLib"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Table
name|newTbl1
init|=
operator|new
name|Table
argument_list|(
literal|"new"
operator|+
name|TABLE1
argument_list|,
name|DB1
argument_list|,
literal|"owner"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|sd2
argument_list|,
literal|null
argument_list|,
name|params
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"MANAGED_TABLE"
argument_list|)
decl_stmt|;
comment|// Change different fields and verify they were altered
name|newTbl1
operator|.
name|setOwner
argument_list|(
literal|"role1"
argument_list|)
expr_stmt|;
name|newTbl1
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|alterTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
name|newTbl1
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tables
operator|=
name|objectStore
operator|.
name|getTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
literal|"new*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"new"
operator|+
name|TABLE1
argument_list|,
name|tables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify fields were altered during the alterTable operation
name|Table
name|alteredTable
init|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
literal|"new"
operator|+
name|TABLE1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Owner of table was not altered"
argument_list|,
name|newTbl1
operator|.
name|getOwner
argument_list|()
argument_list|,
name|alteredTable
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Owner type of table was not altered"
argument_list|,
name|newTbl1
operator|.
name|getOwnerType
argument_list|()
argument_list|,
name|alteredTable
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|tbl1
argument_list|)
expr_stmt|;
name|tables
operator|=
name|objectStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
init|=
name|objectStore
operator|.
name|getForeignKeys
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|foreignKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SQLPrimaryKey
name|pk
init|=
operator|new
name|SQLPrimaryKey
argument_list|(
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|"pk_col"
argument_list|,
literal|1
argument_list|,
literal|"pk_const_1"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|pk
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|addPrimaryKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|pk
argument_list|)
argument_list|)
expr_stmt|;
name|SQLForeignKey
name|fk
init|=
operator|new
name|SQLForeignKey
argument_list|(
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|"pk_col"
argument_list|,
name|DB1
argument_list|,
literal|"new"
operator|+
name|TABLE1
argument_list|,
literal|"fk_col"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"fk_const_1"
argument_list|,
literal|"pk_const_1"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|addForeignKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|fk
argument_list|)
argument_list|)
expr_stmt|;
comment|// Retrieve from PK side
name|foreignKeys
operator|=
name|objectStore
operator|.
name|getForeignKeys
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DB1
argument_list|,
literal|"new"
operator|+
name|TABLE1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|foreignKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fks
init|=
name|objectStore
operator|.
name|getForeignKeys
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DB1
argument_list|,
literal|"new"
operator|+
name|TABLE1
argument_list|)
decl_stmt|;
if|if
condition|(
name|fks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SQLForeignKey
name|fkcol
range|:
name|fks
control|)
block|{
name|objectStore
operator|.
name|dropConstraint
argument_list|(
name|fkcol
operator|.
name|getCatName
argument_list|()
argument_list|,
name|fkcol
operator|.
name|getFktable_db
argument_list|()
argument_list|,
name|fkcol
operator|.
name|getFktable_name
argument_list|()
argument_list|,
name|fkcol
operator|.
name|getFk_name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Retrieve from FK side
name|foreignKeys
operator|=
name|objectStore
operator|.
name|getForeignKeys
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|foreignKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retrieve from PK side
name|foreignKeys
operator|=
name|objectStore
operator|.
name|getForeignKeys
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DB1
argument_list|,
literal|"new"
operator|+
name|TABLE1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|foreignKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|)
expr_stmt|;
name|tables
operator|=
name|objectStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
literal|"new"
operator|+
name|TABLE1
argument_list|)
expr_stmt|;
name|tables
operator|=
name|objectStore
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|db1
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|DB1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|StorageDescriptor
name|createFakeSd
parameter_list|(
name|String
name|location
parameter_list|)
block|{
return|return
operator|new
name|StorageDescriptor
argument_list|(
literal|null
argument_list|,
name|location
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
operator|new
name|SerDeInfo
argument_list|(
literal|"SerDeName"
argument_list|,
literal|"serializationLib"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Tests partition operations    */
annotation|@
name|Test
specifier|public
name|void
name|testPartitionOps
parameter_list|()
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidInputException
block|{
name|Database
name|db1
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|DB1
argument_list|)
operator|.
name|setDescription
argument_list|(
literal|"description"
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"locationurl"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db1
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
name|createFakeSd
argument_list|(
literal|"location"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableParams
operator|.
name|put
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|FieldSchema
name|partitionKey1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"Country"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|FieldSchema
name|partitionKey2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"State"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Table
name|tbl1
init|=
operator|new
name|Table
argument_list|(
name|TABLE1
argument_list|,
name|DB1
argument_list|,
literal|"owner"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|sd
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partitionKey1
argument_list|,
name|partitionKey2
argument_list|)
argument_list|,
name|tableParams
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"MANAGED_TABLE"
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|tbl1
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|partitionParams
operator|.
name|put
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|value1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"US"
argument_list|,
literal|"CA"
argument_list|)
decl_stmt|;
name|Partition
name|part1
init|=
operator|new
name|Partition
argument_list|(
name|value1
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|111
argument_list|,
literal|111
argument_list|,
name|sd
argument_list|,
name|partitionParams
argument_list|)
decl_stmt|;
name|part1
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|addPartition
argument_list|(
name|part1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|value2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"US"
argument_list|,
literal|"MA"
argument_list|)
decl_stmt|;
name|Partition
name|part2
init|=
operator|new
name|Partition
argument_list|(
name|value2
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|222
argument_list|,
literal|222
argument_list|,
name|sd
argument_list|,
name|partitionParams
argument_list|)
decl_stmt|;
name|part2
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|addPartition
argument_list|(
name|part2
argument_list|)
expr_stmt|;
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|objectStore
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|111
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|222
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numPartitions
init|=
name|objectStore
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partitions
operator|.
name|size
argument_list|()
argument_list|,
name|numPartitions
argument_list|)
expr_stmt|;
name|numPartitions
operator|=
name|objectStore
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|"country = \"US\""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numPartitions
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropPartition
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|objectStore
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|222
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropPartition
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|db1
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|DB1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if the JDO cache is able to handle directSQL partition drops in one session.    * @throws MetaException    * @throws InvalidObjectException    * @throws NoSuchObjectException    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testDirectSQLDropPartitionsCacheInSession
parameter_list|()
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidInputException
block|{
name|createPartitionedTable
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// query the partitions with JDO
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|objectStore
operator|.
name|getPartitionsInternal
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// drop partitions with directSql
name|objectStore
operator|.
name|dropPartitionsInternal
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test_part_col=a0"
argument_list|,
literal|"test_part_col=a1"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// query the partitions with JDO, checking the cache is not causing any problem
name|partitions
operator|=
name|objectStore
operator|.
name|getPartitionsInternal
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if the JDO cache is able to handle directSQL partition drops cross sessions.    * @throws MetaException    * @throws InvalidObjectException    * @throws NoSuchObjectException    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testDirectSQLDropPartitionsCacheCrossSession
parameter_list|()
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidInputException
block|{
name|ObjectStore
name|objectStore2
init|=
operator|new
name|ObjectStore
argument_list|()
decl_stmt|;
name|objectStore2
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|createPartitionedTable
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// query the partitions with JDO in the 1st session
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|objectStore
operator|.
name|getPartitionsInternal
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// query the partitions with JDO in the 2nd session
name|partitions
operator|=
name|objectStore2
operator|.
name|getPartitionsInternal
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// drop partitions with directSql in the 1st session
name|objectStore
operator|.
name|dropPartitionsInternal
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test_part_col=a0"
argument_list|,
literal|"test_part_col=a1"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// query the partitions with JDO in the 2nd session, checking the cache is not causing any
comment|// problem
name|partitions
operator|=
name|objectStore2
operator|.
name|getPartitionsInternal
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if the directSQL partition drop removes every connected data from the RDBMS tables.    * @throws MetaException    * @throws InvalidObjectException    * @throws NoSuchObjectException    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testDirectSQLDropParitionsCleanup
parameter_list|()
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
throws|,
name|SQLException
throws|,
name|InvalidInputException
block|{
name|createPartitionedTable
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Check, that every table in the expected state before the drop
name|checkBackendTableSize
argument_list|(
literal|"PARTITIONS"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"PART_PRIVS"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"PART_COL_PRIVS"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"PART_COL_STATS"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"PARTITION_PARAMS"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"PARTITION_KEY_VALS"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"SD_PARAMS"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"BUCKETING_COLS"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"SKEWED_COL_NAMES"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"SDS"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Table has an SDS
name|checkBackendTableSize
argument_list|(
literal|"SORT_COLS"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"SERDE_PARAMS"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"SERDES"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Table has a serde
comment|// drop the partitions
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"dropPartitions"
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropPartitionsInternal
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|,
name|TABLE1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test_part_col=a0"
argument_list|,
literal|"test_part_col=a1"
argument_list|,
literal|"test_part_col=a2"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Check, if every data is dropped connected to the partitions
name|checkBackendTableSize
argument_list|(
literal|"PARTITIONS"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"PART_PRIVS"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"PART_COL_PRIVS"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"PART_COL_STATS"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"PARTITION_PARAMS"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"PARTITION_KEY_VALS"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"SD_PARAMS"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"BUCKETING_COLS"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"SKEWED_COL_NAMES"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"SDS"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Table has an SDS
name|checkBackendTableSize
argument_list|(
literal|"SORT_COLS"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"SERDE_PARAMS"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBackendTableSize
argument_list|(
literal|"SERDES"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Table has a serde
block|}
comment|/**    * Creates DB1 database, TABLE1 table with 3 partitions.    * @param withPrivileges Should we create privileges as well    * @param withStatistics Should we create statitics as well    * @throws MetaException    * @throws InvalidObjectException    */
specifier|private
name|void
name|createPartitionedTable
parameter_list|(
name|boolean
name|withPrivileges
parameter_list|,
name|boolean
name|withStatistics
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidInputException
block|{
name|Database
name|db1
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|DB1
argument_list|)
operator|.
name|setDescription
argument_list|(
literal|"description"
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"locationurl"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db1
argument_list|)
expr_stmt|;
name|Table
name|tbl1
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB1
argument_list|)
operator|.
name|setTableName
argument_list|(
name|TABLE1
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col2"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"test_part_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_bucket_col"
argument_list|,
literal|"int"
argument_list|,
literal|"test bucket col comment"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_skewed_col"
argument_list|,
literal|"int"
argument_list|,
literal|"test skewed col comment"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_sort_col"
argument_list|,
literal|"int"
argument_list|,
literal|"test sort col comment"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|tbl1
argument_list|)
expr_stmt|;
name|PrivilegeBag
name|privilegeBag
init|=
operator|new
name|PrivilegeBag
argument_list|()
decl_stmt|;
comment|// Create partitions for the partitioned table
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Partition
name|part
init|=
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|tbl1
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
operator|.
name|addSerdeParam
argument_list|(
literal|"serdeParam"
argument_list|,
literal|"serdeParamValue"
argument_list|)
operator|.
name|addStorageDescriptorParam
argument_list|(
literal|"sdParam"
argument_list|,
literal|"sdParamValue"
argument_list|)
operator|.
name|addBucketCol
argument_list|(
literal|"test_bucket_col"
argument_list|)
operator|.
name|addSkewedColName
argument_list|(
literal|"test_skewed_col"
argument_list|)
operator|.
name|addSortCol
argument_list|(
literal|"test_sort_col"
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|withPrivileges
condition|)
block|{
name|HiveObjectRef
name|partitionReference
init|=
operator|new
name|HiveObjectRefBuilder
argument_list|()
operator|.
name|buildPartitionReference
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|partitionColumnReference
init|=
operator|new
name|HiveObjectRefBuilder
argument_list|()
operator|.
name|buildPartitionColumnReference
argument_list|(
name|tbl1
argument_list|,
literal|"test_part_col"
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|PrivilegeGrantInfo
name|privilegeGrantInfo
init|=
operator|new
name|PrivilegeGrantInfoBuilder
argument_list|()
operator|.
name|setPrivilege
argument_list|(
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveObjectPrivilege
name|partitionPriv
init|=
operator|new
name|HiveObjectPrivilegeBuilder
argument_list|()
operator|.
name|setHiveObjectRef
argument_list|(
name|partitionReference
argument_list|)
operator|.
name|setPrincipleName
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setPrincipalType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
operator|.
name|setGrantInfo
argument_list|(
name|privilegeGrantInfo
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|privilegeBag
operator|.
name|addToPrivileges
argument_list|(
name|partitionPriv
argument_list|)
expr_stmt|;
name|HiveObjectPrivilege
name|partitionColPriv
init|=
operator|new
name|HiveObjectPrivilegeBuilder
argument_list|()
operator|.
name|setHiveObjectRef
argument_list|(
name|partitionColumnReference
argument_list|)
operator|.
name|setPrincipleName
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setPrincipalType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
operator|.
name|setGrantInfo
argument_list|(
name|privilegeGrantInfo
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|privilegeBag
operator|.
name|addToPrivileges
argument_list|(
name|partitionColPriv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|withStatistics
condition|)
block|{
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setCatName
argument_list|(
name|tbl1
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDbName
argument_list|(
name|tbl1
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTableName
argument_list|(
name|tbl1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"test_part_col=a"
operator|+
name|i
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|stats
operator|.
name|setStatsObj
argument_list|(
name|statsObjList
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|BooleanColumnStatsData
name|boolStats
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|boolStats
operator|.
name|setNumTrues
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|boolStats
operator|.
name|setNumFalses
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|boolStats
operator|.
name|setNumNulls
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
name|boolStats
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|partStats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
literal|"test_part_col"
argument_list|,
literal|"int"
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|statsObjList
operator|.
name|add
argument_list|(
name|partStats
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|withPrivileges
condition|)
block|{
name|objectStore
operator|.
name|grantPrivileges
argument_list|(
name|privilegeBag
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks if the HMS backend db row number is as expected. If they are not, an    * {@link AssertionError} is thrown.    * @param tableName The table in which we count the rows    * @param size The expected row number    * @throws SQLException If there is a problem connecting to / querying the backend DB    */
specifier|private
name|void
name|checkBackendTableSize
parameter_list|(
name|String
name|tableName
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|connectionStr
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECT_URL_KEY
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectionStr
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT COUNT(1) FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
operator|+
literal|" table should contain "
operator|+
name|size
operator|+
literal|" rows"
argument_list|,
name|size
argument_list|,
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test master keys operation    */
annotation|@
name|Test
specifier|public
name|void
name|testMasterKeyOps
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|int
name|id1
init|=
name|objectStore
operator|.
name|addMasterKey
argument_list|(
name|KEY1
argument_list|)
decl_stmt|;
name|int
name|id2
init|=
name|objectStore
operator|.
name|addMasterKey
argument_list|(
name|KEY2
argument_list|)
decl_stmt|;
name|String
index|[]
name|keys
init|=
name|objectStore
operator|.
name|getMasterKeys
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|keys
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KEY1
argument_list|,
name|keys
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KEY2
argument_list|,
name|keys
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|updateMasterKey
argument_list|(
name|id1
argument_list|,
literal|"new"
operator|+
name|KEY1
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|updateMasterKey
argument_list|(
name|id2
argument_list|,
literal|"new"
operator|+
name|KEY2
argument_list|)
expr_stmt|;
name|keys
operator|=
name|objectStore
operator|.
name|getMasterKeys
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|keys
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"new"
operator|+
name|KEY1
argument_list|,
name|keys
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"new"
operator|+
name|KEY2
argument_list|,
name|keys
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|removeMasterKey
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|keys
operator|=
name|objectStore
operator|.
name|getMasterKeys
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keys
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"new"
operator|+
name|KEY2
argument_list|,
name|keys
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|removeMasterKey
argument_list|(
name|id2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test role operation    */
annotation|@
name|Test
specifier|public
name|void
name|testRoleOps
parameter_list|()
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|objectStore
operator|.
name|addRole
argument_list|(
name|ROLE1
argument_list|,
name|OWNER
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|addRole
argument_list|(
name|ROLE2
argument_list|,
name|OWNER
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
name|objectStore
operator|.
name|listRoleNames
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROLE2
argument_list|,
name|roles
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Role
name|role1
init|=
name|objectStore
operator|.
name|getRole
argument_list|(
name|ROLE1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OWNER
argument_list|,
name|role1
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|USER1
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|OWNER
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|revokeRole
argument_list|(
name|role1
argument_list|,
name|USER1
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|removeRole
argument_list|(
name|ROLE1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDirectSqlErrorMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METRICS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Metrics
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HIVE_CODAHALE_METRICS_REPORTER_CLASSES
argument_list|,
literal|"org.apache.hadoop.hive.common.metrics.metrics2.JsonFileMetricsReporter, "
operator|+
literal|"org.apache.hadoop.hive.common.metrics.metrics2.JmxMetricsReporter"
argument_list|)
expr_stmt|;
comment|// recall setup so that we get an object store with the metrics initalized
name|setUp
argument_list|()
expr_stmt|;
name|Counter
name|directSqlErrors
init|=
name|Metrics
operator|.
name|getRegistry
argument_list|()
operator|.
name|getCounters
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstants
operator|.
name|DIRECTSQL_ERRORS
argument_list|)
decl_stmt|;
name|objectStore
operator|.
expr|new
name|GetDbHelper
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|{       @
name|Override
specifier|protected
name|Database
name|getSqlResult
argument_list|(
name|ObjectStore
operator|.
name|GetHelper
argument_list|<
name|Database
argument_list|>
name|ctx
argument_list|)
throws|throws
name|MetaException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Database
name|getJdoResult
parameter_list|(
name|ObjectStore
operator|.
name|GetHelper
argument_list|<
name|Database
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
literal|null
return|;
block|}
block|}
operator|.
name|run
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|directSqlErrors
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
expr|new
name|GetDbHelper
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|{       @
name|Override
specifier|protected
name|Database
name|getSqlResult
argument_list|(
name|ObjectStore
operator|.
name|GetHelper
argument_list|<
name|Database
argument_list|>
name|ctx
argument_list|)
throws|throws
name|MetaException
block|{
throw|throw
argument_list|new
name|RuntimeException
argument_list|()
block|;       }
expr|@
name|Override
specifier|protected
name|Database
name|getJdoResult
argument_list|(
name|ObjectStore
operator|.
name|GetHelper
argument_list|<
name|Database
argument_list|>
name|ctx
argument_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
literal|null
return|;
block|}
end_class

begin_expr_stmt
unit|}.
name|run
argument_list|(
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|directSqlErrors
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    private
specifier|static
name|void
name|dropAllStoreObjects
parameter_list|(
name|RawStore
name|store
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
try|try
block|{
name|Deadline
operator|.
name|registerIfNot
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Function
argument_list|>
name|functions
init|=
name|store
operator|.
name|getAllFunctions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|Function
name|func
range|:
name|functions
control|)
block|{
name|store
operator|.
name|dropFunction
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|func
operator|.
name|getDbName
argument_list|()
argument_list|,
name|func
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|catName
range|:
name|store
operator|.
name|getCatalogs
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbs
init|=
name|store
operator|.
name|getAllDatabases
argument_list|(
name|catName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|db
range|:
name|dbs
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tbls
init|=
name|store
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tbl
range|:
name|tbls
control|)
block|{
name|Deadline
operator|.
name|startTimer
argument_list|(
literal|"getPartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|store
operator|.
name|getPartitions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|store
operator|.
name|dropPartition
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Find any constraints and drop them
name|Set
argument_list|<
name|String
argument_list|>
name|constraints
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pk
init|=
name|store
operator|.
name|getPrimaryKeys
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|pk
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SQLPrimaryKey
name|pkcol
range|:
name|pk
control|)
block|{
name|constraints
operator|.
name|add
argument_list|(
name|pkcol
operator|.
name|getPk_name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fks
init|=
name|store
operator|.
name|getForeignKeys
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|fks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SQLForeignKey
name|fkcol
range|:
name|fks
control|)
block|{
name|constraints
operator|.
name|add
argument_list|(
name|fkcol
operator|.
name|getFk_name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|constraint
range|:
name|constraints
control|)
block|{
name|store
operator|.
name|dropConstraint
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|,
name|constraint
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|dropTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|dropDatabase
argument_list|(
name|catName
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|dropCatalog
argument_list|(
name|catName
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
name|store
operator|.
name|listRoleNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|role
range|:
name|roles
control|)
block|{
name|store
operator|.
name|removeRole
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{     }
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testQueryCloseOnError
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectStore
name|spy
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|objectStore
argument_list|)
decl_stmt|;
name|spy
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|spy
operator|.
name|getAllFunctions
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|spy
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DB1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|getPartitionCount
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|spy
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|rollbackAndCleanup
argument_list|(
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|Query
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testRetryingExecutorSleep
parameter_list|()
throws|throws
name|Exception
block|{
name|RetryingExecutor
name|re
init|=
operator|new
name|ObjectStore
operator|.
name|RetryingExecutor
argument_list|(
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"invalid sleep value"
argument_list|,
name|re
operator|.
name|getSleepInterval
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Ignore
comment|// See comment in ObjectStore.getDataSourceProps
annotation|@
name|Test
specifier|public
name|void
name|testNonConfDatanucleusValueSet
parameter_list|()
block|{
name|String
name|key
init|=
literal|"datanucleus.no.such.key"
decl_stmt|;
name|String
name|value
init|=
literal|"test_value"
decl_stmt|;
name|String
name|key1
init|=
literal|"blabla.no.such.key"
decl_stmt|;
name|String
name|value1
init|=
literal|"another_value"
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Configuration
name|localConf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|localConf
argument_list|)
expr_stmt|;
name|localConf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|localConf
operator|.
name|set
argument_list|(
name|key1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|objectStore
operator|=
operator|new
name|ObjectStore
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|setConf
argument_list|(
name|localConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|objectStore
operator|.
name|getProp
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|objectStore
operator|.
name|getProp
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Test notification operations    */
end_comment

begin_comment
comment|// TODO MS-SPLIT uncomment once we move EventMessage over
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testNotificationOps
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|MetaException
block|{
specifier|final
name|int
name|NO_EVENT_ID
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|FIRST_EVENT_ID
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|SECOND_EVENT_ID
init|=
literal|2
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|EventMessage
operator|.
name|EventType
operator|.
name|CREATE_DATABASE
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|NotificationEventResponse
name|eventResponse
decl_stmt|;
name|CurrentNotificationEventId
name|eventId
decl_stmt|;
comment|// Verify that there is no notifications available yet
name|eventId
operator|=
name|objectStore
operator|.
name|getCurrentNotificationEventId
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NO_EVENT_ID
argument_list|,
name|eventId
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that addNotificationEvent() updates the NotificationEvent with the new event ID
name|objectStore
operator|.
name|addNotificationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FIRST_EVENT_ID
argument_list|,
name|event
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|addNotificationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SECOND_EVENT_ID
argument_list|,
name|event
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that objectStore fetches the latest notification event ID
name|eventId
operator|=
name|objectStore
operator|.
name|getCurrentNotificationEventId
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SECOND_EVENT_ID
argument_list|,
name|eventId
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that getNextNotification() returns all events
name|eventResponse
operator|=
name|objectStore
operator|.
name|getNextNotification
argument_list|(
operator|new
name|NotificationEventRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|eventResponse
operator|.
name|getEventsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FIRST_EVENT_ID
argument_list|,
name|eventResponse
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SECOND_EVENT_ID
argument_list|,
name|eventResponse
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that getNextNotification(last) returns events after a specified event
name|eventResponse
operator|=
name|objectStore
operator|.
name|getNextNotification
argument_list|(
operator|new
name|NotificationEventRequest
argument_list|(
name|FIRST_EVENT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|eventResponse
operator|.
name|getEventsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SECOND_EVENT_ID
argument_list|,
name|eventResponse
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that getNextNotification(last) returns zero events if there are no more notifications available
name|eventResponse
operator|=
name|objectStore
operator|.
name|getNextNotification
argument_list|(
operator|new
name|NotificationEventRequest
argument_list|(
name|SECOND_EVENT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|eventResponse
operator|.
name|getEventsSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that cleanNotificationEvents() cleans up all old notifications
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|cleanNotificationEvents
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|eventResponse
operator|=
name|objectStore
operator|.
name|getNextNotification
argument_list|(
operator|new
name|NotificationEventRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|eventResponse
operator|.
name|getEventsSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Ignore
argument_list|(
literal|"This test is here to allow testing with other databases like mysql / postgres etc\n"
operator|+
literal|" with  user changes to the code. This cannot be run on apache derby because of\n"
operator|+
literal|" https://db.apache.org/derby/docs/10.10/devguide/cdevconcepts842385.html"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentAddNotifications
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|MetaException
block|{
specifier|final
name|int
name|NUM_THREADS
init|=
literal|10
decl_stmt|;
name|CyclicBarrier
name|cyclicBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|NUM_THREADS
argument_list|,
parameter_list|()
lambda|->
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"test"
argument_list|)
operator|.
name|debug
argument_list|(
name|NUM_THREADS
operator|+
literal|" threads going to add notification"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetaStoreTestUtils
operator|.
name|setConfForStandloneMode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|/*        Below are the properties that need to be set based on what database this test is going to be run      */
comment|//    conf.setVar(HiveConf.ConfVars.METASTORE_CONNECTION_DRIVER, "com.mysql.jdbc.Driver");
comment|//    conf.setVar(HiveConf.ConfVars.METASTORECONNECTURLKEY,
comment|//        "jdbc:mysql://localhost:3306/metastore_db");
comment|//    conf.setVar(HiveConf.ConfVars.METASTORE_CONNECTION_USER_NAME, "");
comment|//    conf.setVar(HiveConf.ConfVars.METASTOREPWD, "");
comment|/*      we have to  add this one manually as for tests the db is initialized via the metastoreDiretSQL      and we don't run the schema creation sql that includes the an insert for notification_sequence      which can be locked. the entry in notification_sequence happens via notification_event insertion.     */
name|objectStore
operator|.
name|getPersistenceManager
argument_list|()
operator|.
name|newQuery
argument_list|(
name|MNotificationLog
operator|.
name|class
argument_list|,
literal|"eventType==''"
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|getPersistenceManager
argument_list|()
operator|.
name|newQuery
argument_list|(
name|MNotificationNextId
operator|.
name|class
argument_list|,
literal|"nextEventId==-1"
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|addNotificationEvent
argument_list|(
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|EventMessage
operator|.
name|EventType
operator|.
name|CREATE_DATABASE
operator|.
name|toString
argument_list|()
argument_list|,
literal|"CREATE DATABASE DB initial"
argument_list|)
argument_list|)
expr_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|NUM_THREADS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|n
init|=
name|i
decl_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
name|ObjectStore
name|store
init|=
operator|new
name|ObjectStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|eventType
init|=
name|EventMessage
operator|.
name|EventType
operator|.
name|CREATE_DATABASE
operator|.
name|toString
argument_list|()
decl_stmt|;
name|NotificationEvent
name|dbEvent
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|eventType
argument_list|,
literal|"CREATE DATABASE DB"
operator|+
name|n
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ADDING NOTIFICATION"
argument_list|)
expr_stmt|;
try|try
block|{
name|cyclicBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|store
operator|.
name|addNotificationEvent
argument_list|(
name|dbEvent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|BrokenBarrierException
decl||
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FINISH NOTIFICATION"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// we have to setup this again as the underlying PMF keeps getting reinitialized with original
comment|// reference closed
name|ObjectStore
name|store
init|=
operator|new
name|ObjectStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NotificationEventResponse
name|eventResponse
init|=
name|store
operator|.
name|getNextNotification
argument_list|(
operator|new
name|NotificationEventRequest
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NUM_THREADS
operator|+
literal|1
argument_list|,
name|eventResponse
operator|.
name|getEventsSize
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|previousId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NotificationEvent
name|event
range|:
name|eventResponse
operator|.
name|getEvents
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"previous:"
operator|+
name|previousId
operator|+
literal|" current:"
operator|+
name|event
operator|.
name|getEventId
argument_list|()
argument_list|,
name|previousId
operator|<
name|event
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|previousId
operator|+
literal|1
operator|==
name|event
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|previousId
operator|=
name|event
operator|.
name|getEventId
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|createTestCatalog
parameter_list|(
name|String
name|catName
parameter_list|)
throws|throws
name|MetaException
block|{
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"/tmp"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

