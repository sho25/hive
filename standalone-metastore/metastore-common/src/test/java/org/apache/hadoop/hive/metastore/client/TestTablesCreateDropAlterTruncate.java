begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ColumnType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CreationMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|CatalogBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_comment
comment|/**  * Test class for IMetaStoreClient API. Testing the Table related functions for metadata  * manipulation, like creating, dropping and altering tables.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTablesCreateDropAlterTruncate
extends|extends
name|MetaStoreClientTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DATABASE
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OTHER_DATABASE
init|=
literal|"dummy"
decl_stmt|;
specifier|private
specifier|final
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|Table
index|[]
name|testTables
init|=
operator|new
name|Table
index|[
literal|6
index|]
decl_stmt|;
specifier|private
name|Table
name|partitionedTable
init|=
literal|null
decl_stmt|;
specifier|private
name|Table
name|externalTable
init|=
literal|null
decl_stmt|;
specifier|public
name|TestTablesCreateDropAlterTruncate
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startMetaStores
parameter_list|()
block|{
name|Map
argument_list|<
name|MetastoreConf
operator|.
name|ConfVars
argument_list|,
name|String
argument_list|>
name|msConf
init|=
operator|new
name|HashMap
argument_list|<
name|MetastoreConf
operator|.
name|ConfVars
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Enable trash, so it can be tested
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraConf
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraConf
operator|.
name|put
argument_list|(
literal|"fs.trash.checkpoint.interval"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
comment|// FS_TRASH_CHECKPOINT_INTERVAL_KEY
name|extraConf
operator|.
name|put
argument_list|(
literal|"fs.trash.interval"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
comment|// FS_TRASH_INTERVAL_KEY (hadoop-2)
name|startMetaStores
argument_list|(
name|msConf
argument_list|,
name|extraConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Clean up the database
name|client
operator|.
name|dropDatabase
argument_list|(
name|OTHER_DATABASE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Drop every table in the default database
for|for
control|(
name|String
name|tableName
range|:
name|client
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
control|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Clean up trash
name|metaStore
operator|.
name|cleanWarehouseDirs
argument_list|()
expr_stmt|;
name|testTables
index|[
literal|0
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"test_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|1
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"test_view"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"VIRTUAL_VIEW"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|2
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"test_table_to_find_1"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|3
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"test_partitioned_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col1"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col2"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"test_part_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|4
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"external_table_for_test"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/external/table_dir"
argument_list|)
operator|.
name|addTableParam
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"EXTERNAL_TABLE"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|testTables
index|[
literal|5
index|]
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|OTHER_DATABASE
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create partitions for the partitioned table
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|testTables
index|[
literal|3
index|]
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add an external partition too
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|testTables
index|[
literal|3
index|]
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"a2"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/external/a2"
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add data files to the partitioned table
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|testTables
index|[
literal|3
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|3
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/dataFile"
argument_list|)
decl_stmt|;
name|metaStore
operator|.
name|createFile
argument_list|(
name|dataFile
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
block|}
comment|// Reload tables from the MetaStore, and create data files
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testTables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|testTables
index|[
name|i
index|]
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|testTables
index|[
name|i
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
name|i
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|testTables
index|[
name|i
index|]
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|testTables
index|[
name|i
index|]
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|testTables
index|[
name|i
index|]
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/dataFile"
argument_list|)
decl_stmt|;
name|metaStore
operator|.
name|createFile
argument_list|(
name|dataFile
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|partitionedTable
operator|=
name|testTables
index|[
literal|3
index|]
expr_stmt|;
name|externalTable
operator|=
name|testTables
index|[
literal|4
index|]
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// HIVE-19729: Shallow the exceptions based on the discussion in the Jira
block|}
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * This test creates and queries a table and then drops it. Good for testing the happy path    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateGetDeleteTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Try to create a table with all of the parameters set
name|Table
name|table
init|=
name|getTableWithAllParametersSet
argument_list|()
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Table
name|createdTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
comment|// The createTime will be set on the server side, so the comparison should skip it
name|table
operator|.
name|setCreateTime
argument_list|(
name|createdTable
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// The extra parameters will be added on server side, so check that the required ones are
comment|// present
for|for
control|(
name|String
name|key
range|:
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"parameters are the same"
argument_list|,
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|createdTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Reset the parameters, so we can compare
name|table
operator|.
name|setParameters
argument_list|(
name|createdTable
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setCreationMetadata
argument_list|(
name|createdTable
operator|.
name|getCreationMetadata
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"create/get table data"
argument_list|,
name|table
argument_list|,
name|createdTable
argument_list|)
expr_stmt|;
comment|// Check that the directory is created
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The directory should not be created"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|createdTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NoSuchObjectException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableDefaultValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
expr_stmt|;
name|table
operator|.
name|setTableName
argument_list|(
literal|"test_table_2"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"column_name"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Table
name|createdTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing OwnerType"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|createdTable
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Comparing OwnerName"
argument_list|,
name|createdTable
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Comparing CreateTime"
argument_list|,
literal|0
argument_list|,
name|createdTable
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing LastAccessTime"
argument_list|,
literal|0
argument_list|,
name|createdTable
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing Retention"
argument_list|,
literal|0
argument_list|,
name|createdTable
operator|.
name|getRetention
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing PartitionKeys"
argument_list|,
literal|0
argument_list|,
name|createdTable
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: If this test method is the first to run, then the parameters does not contain totalSize
comment|// and numFiles, if this runs after other tests (setUp/dropDatabase is successful), then the
comment|// totalSize and the numFiles are set.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing Parameters length"
argument_list|,
literal|1
argument_list|,
name|createdTable
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Comparing Parameters(transient_lastDdlTime)"
argument_list|,
literal|"0"
argument_list|,
name|createdTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"transient_lastDdlTime"
argument_list|)
argument_list|)
expr_stmt|;
comment|//    Assert.assertEquals("Comparing Parameters(totalSize)", "0",
comment|//        createdTable.getParameters().get("totalSize"));
comment|//    Assert.assertEquals("Comparing Parameters(numFiles)", "0",
comment|//        createdTable.getParameters().get("numFiles"));
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Comparing ViewOriginalText"
argument_list|,
name|createdTable
operator|.
name|getViewOriginalText
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Comparing ViewExpandedText"
argument_list|,
name|createdTable
operator|.
name|getViewExpandedText
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Comparing TableType"
argument_list|,
literal|"MANAGED_TABLE"
argument_list|,
name|createdTable
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Creation metadata should be empty"
argument_list|,
name|createdTable
operator|.
name|getCreationMetadata
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Storage Descriptor data
name|StorageDescriptor
name|createdSd
init|=
name|createdTable
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Storage descriptor cols"
argument_list|,
literal|1
argument_list|,
name|createdSd
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Storage descriptor cols[0].comment"
argument_list|,
name|createdSd
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Storage descriptor location"
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|createdSd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table path should be created"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|createdSd
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Embedded MetaStore changes the table object when client.createTable is called
comment|//Assert.assertNull("Original table storage descriptor location should be null",
comment|//    table.getSd().getLocation());
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Storage descriptor input format"
argument_list|,
name|createdSd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Storage descriptor output format"
argument_list|,
name|createdSd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Storage descriptor compressed"
argument_list|,
name|createdSd
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Storage descriptor num buckets"
argument_list|,
literal|0
argument_list|,
name|createdSd
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Storage descriptor bucket cols"
argument_list|,
literal|0
argument_list|,
name|createdSd
operator|.
name|getBucketCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Storage descriptor sort cols"
argument_list|,
literal|0
argument_list|,
name|createdSd
operator|.
name|getSortCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Storage descriptor parameters"
argument_list|,
literal|0
argument_list|,
name|createdSd
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Storage descriptor stored as subdir"
argument_list|,
name|createdSd
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
comment|// Serde info
name|SerDeInfo
name|serDeInfo
init|=
name|createdSd
operator|.
name|getSerdeInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"SerDeInfo name"
argument_list|,
name|serDeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"SerDeInfo serialization lib"
argument_list|,
name|serDeInfo
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"SerDeInfo parameters"
argument_list|,
literal|0
argument_list|,
name|serDeInfo
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Skewed info
name|SkewedInfo
name|skewedInfo
init|=
name|createdSd
operator|.
name|getSkewedInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Skewed info col names"
argument_list|,
literal|0
argument_list|,
name|skewedInfo
operator|.
name|getSkewedColNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Skewed info col values"
argument_list|,
literal|0
argument_list|,
name|skewedInfo
operator|.
name|getSkewedColValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Skewed info col value maps"
argument_list|,
literal|0
argument_list|,
name|skewedInfo
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableDefaultLocationInSpecificDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
name|OTHER_DATABASE
argument_list|)
expr_stmt|;
name|table
operator|.
name|setTableName
argument_list|(
literal|"test_table_2"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"column_name"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Table
name|createdTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Storage descriptor location"
argument_list|,
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|".db/"
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|createdTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableDefaultValuesView
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
expr_stmt|;
name|table
operator|.
name|setTableName
argument_list|(
literal|"test_table_2"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setTableType
argument_list|(
literal|"VIRTUAL_VIEW"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"column_name"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Table
name|createdTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
comment|// No location should be created for views
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Storage descriptor location should be null"
argument_list|,
name|createdTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTableNullDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTableNullTableName
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|table
operator|.
name|setTableName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTableInvalidTableName
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|table
operator|.
name|setTableName
argument_list|(
literal|"test_table;"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTableEmptyName
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|table
operator|.
name|setTableName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTableNullStorageDescriptor
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|table
operator|.
name|setSd
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Table
name|getNewTable
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
literal|"test_table_with_invalid_sd"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTableInvalidStorageDescriptorNullColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|getNewTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTableInvalidStorageDescriptorNullSerdeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|getNewTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|setSerdeInfo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTableInvalidStorageDescriptorNullColumnType
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|getNewTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTableInvalidStorageDescriptorInvalidColumnType
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|getNewTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setType
argument_list|(
literal|"xyz"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTableNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
literal|"no_such_database"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTableAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropTableNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
literal|"no_such_database"
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropTableNoSuchTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"no_such_table"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDropTableNoSuchTableInTheDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|OTHER_DATABASE
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableNullDatabase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Missing database in the query
try|try
block|{
name|client
operator|.
name|dropTable
argument_list|(
literal|null
argument_list|,
name|OTHER_DATABASE
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// TODO: Should be checked on server side. On Embedded metastore it throws MetaException,
comment|// on Remote metastore it throws TProtocolException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an MetaException or TProtocolException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableNullTableName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|DEFAULT_DATABASE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// TODO: Should be checked on server side. On Embedded metastore it throws MetaException,
comment|// on Remote metastore it throws TProtocolException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an MetaException or TProtocolException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableCaseInsensitive
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
comment|// Test in upper case
name|client
operator|.
name|dropTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NoSuchObjectException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
comment|// Test in mixed case
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
literal|"DeFaUlt"
argument_list|,
literal|"TeST_tAbLE"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NoSuchObjectException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableDeleteDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Partition
name|externalPartition
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|partitionedTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|partitionedTable
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|"test_part_col=a2"
argument_list|)
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Table path should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table path should be kept"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Drop table with partitions
name|client
operator|.
name|dropTable
argument_list|(
name|partitionedTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|partitionedTable
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Table path should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|partitionedTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Extra partition path should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|externalPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableIgnoreUnknown
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
comment|// Check what happens, when we ignore these errors
name|client
operator|.
name|dropTable
argument_list|(
literal|"no_such_database"
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"no_such_table"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|OTHER_DATABASE
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// TODO: Strangely the default parametrization is to ignore missing tables
name|client
operator|.
name|dropTable
argument_list|(
literal|"no_such_database"
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"no_such_table"
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|OTHER_DATABASE
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableWithPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Table path should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Table path should not be in trash"
argument_list|,
name|metaStore
operator|.
name|isPathExistsInTrash
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableWithoutPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Table path should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table path should be in trash"
argument_list|,
name|metaStore
operator|.
name|isPathExistsInTrash
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableExternalWithPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|externalTable
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table path should not be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Table path should not be in trash"
argument_list|,
name|metaStore
operator|.
name|isPathExistsInTrash
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTableExternalWithoutPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|externalTable
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table path should not be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Table path should be in trash"
argument_list|,
name|metaStore
operator|.
name|isPathExistsInTrash
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateTableUnpartitioned
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Unpartitioned table
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/dataFile"
argument_list|)
decl_stmt|;
name|client
operator|.
name|truncateTable
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Location should exist"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"DataFile should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateTablePartitioned
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Partitioned table - delete specific partitions a0, a2
name|List
argument_list|<
name|String
argument_list|>
name|partitionsToDelete
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitionsToDelete
operator|.
name|add
argument_list|(
literal|"test_part_col=a0"
argument_list|)
expr_stmt|;
name|partitionsToDelete
operator|.
name|add
argument_list|(
literal|"test_part_col=a2"
argument_list|)
expr_stmt|;
name|client
operator|.
name|truncateTable
argument_list|(
name|partitionedTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|partitionedTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partitionsToDelete
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Location should exist"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|partitionedTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|partitionedTable
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/dataFile"
argument_list|)
decl_stmt|;
if|if
condition|(
name|partition
operator|.
name|getValues
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a0"
argument_list|)
operator|||
name|partition
operator|.
name|getValues
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a2"
argument_list|)
condition|)
block|{
comment|// a0, a2 should be empty
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"DataFile should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Others (a1) should be kept
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"DataFile should not be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateTablePartitionedDeleteAll
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Partitioned table - delete all
name|client
operator|.
name|truncateTable
argument_list|(
name|partitionedTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|partitionedTable
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Location should exist"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|partitionedTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|partitionedTable
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/dataFile"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Every dataFile should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|String
name|originalTableName
init|=
name|originalTable
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|originalDatabase
init|=
name|originalTable
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|Table
name|newTable
init|=
name|getTableWithAllParametersSet
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|setTableName
argument_list|(
name|originalTableName
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setDbName
argument_list|(
name|originalDatabase
argument_list|)
expr_stmt|;
comment|// Partition keys can not be set, but getTableWithAllParametersSet is added one, so remove for
comment|// this test
name|newTable
operator|.
name|setPartitionKeys
argument_list|(
name|originalTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalDatabase
argument_list|,
name|originalTableName
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
name|Table
name|alteredTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|originalDatabase
argument_list|,
name|originalTableName
argument_list|)
decl_stmt|;
comment|// The extra parameters will be added on server side, so check that the required ones are
comment|// present
for|for
control|(
name|String
name|key
range|:
name|newTable
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"parameters are present"
argument_list|,
name|newTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|alteredTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The parameters are checked manually, so do not check them
name|newTable
operator|.
name|setParameters
argument_list|(
name|alteredTable
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
comment|// Some of the data is set on the server side, so reset those
name|newTable
operator|.
name|setCreateTime
argument_list|(
name|alteredTable
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|setCreationMetadata
argument_list|(
name|alteredTable
operator|.
name|getCreationMetadata
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table data should be the same"
argument_list|,
name|newTable
argument_list|,
name|alteredTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableRename
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|String
name|originalTableName
init|=
name|originalTable
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|originalDatabase
init|=
name|originalTable
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
comment|// Do not change the location, so it is tested that the location will be changed even if the
comment|// location is not set to null, just remain the same
name|newTable
operator|.
name|setTableName
argument_list|(
literal|"new_table"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalDatabase
argument_list|,
name|originalTableName
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|client
operator|.
name|getTables
argument_list|(
name|originalDatabase
argument_list|,
name|originalTableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Original table should be removed"
argument_list|,
literal|0
argument_list|,
name|tableNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Original table directory should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|originalTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|alteredTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"New table directory should exist"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"New directory should be set"
argument_list|,
operator|new
name|Path
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|alteredTable
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/dataFile"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"New directory should contain data"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// The following data should be changed
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table data should be the same"
argument_list|,
name|newTable
argument_list|,
name|alteredTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableChangingDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|String
name|originalTableName
init|=
name|originalTable
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|originalDatabase
init|=
name|originalTable
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|setDbName
argument_list|(
name|OTHER_DATABASE
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalDatabase
argument_list|,
name|originalTableName
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|client
operator|.
name|getTables
argument_list|(
name|originalDatabase
argument_list|,
name|originalTableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Original table should be removed"
argument_list|,
literal|0
argument_list|,
name|tableNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Original table directory should be removed"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|originalTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|alteredTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"New table directory should exist"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"New directory should be set"
argument_list|,
operator|new
name|Path
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|alteredTable
operator|.
name|getDbName
argument_list|()
operator|+
literal|".db/"
operator|+
name|alteredTable
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/dataFile"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"New directory should contain data"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// The following data should be changed, other data should be the same
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table data should be the same"
argument_list|,
name|newTable
argument_list|,
name|alteredTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableExternalTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|externalTable
decl_stmt|;
name|String
name|originalTableName
init|=
name|originalTable
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|originalDatabase
init|=
name|originalTable
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|setTableName
argument_list|(
literal|"new_external_table_for_test"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalDatabase
argument_list|,
name|originalTableName
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|client
operator|.
name|getTables
argument_list|(
name|originalDatabase
argument_list|,
name|originalTableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Original table should be removed"
argument_list|,
literal|0
argument_list|,
name|tableNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Original table directory should be kept"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|originalTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|alteredTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"New location should be the same"
argument_list|,
name|originalTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/dataFile"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The location should contain data"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// The extra parameters will be added on server side, so check that the required ones are
comment|// present
for|for
control|(
name|String
name|key
range|:
name|newTable
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"parameters are present"
argument_list|,
name|newTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|alteredTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The parameters are checked manually, so do not check them
name|newTable
operator|.
name|setParameters
argument_list|(
name|alteredTable
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table data should be the same"
argument_list|,
name|newTable
argument_list|,
name|alteredTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableExternalTableChangeLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|externalTable
decl_stmt|;
comment|// Change the location, and see the results
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"_modified"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
name|Table
name|alteredTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Original table directory should be kept"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|originalTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"New location should be the new one"
argument_list|,
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/dataFile"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The location should not contain data"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
name|dataFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// The extra parameters will be added on server side, so check that the required ones are
comment|// present
for|for
control|(
name|String
name|key
range|:
name|newTable
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"parameters are present"
argument_list|,
name|newTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|alteredTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The parameters are checked manually, so do not check them
name|newTable
operator|.
name|setParameters
argument_list|(
name|alteredTable
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
comment|// The following data should be changed, other data should be the same
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|alteredTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table data should be the same"
argument_list|,
name|newTable
argument_list|,
name|alteredTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableChangeCols
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|partitionedTable
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
comment|// Change a column
name|cols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setName
argument_list|(
literal|"modified_col"
argument_list|)
expr_stmt|;
comment|// Remove a column
name|cols
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Add a new column
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"new_col"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Store the changes
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
name|Table
name|alteredTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Original table directory should be kept"
argument_list|,
name|metaStore
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|originalTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// The following data might be changed
name|alteredTable
operator|.
name|setParameters
argument_list|(
name|newTable
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table data should be the same"
argument_list|,
name|newTable
argument_list|,
name|alteredTable
argument_list|)
expr_stmt|;
comment|// Modify partition column type, and comment
name|newTable
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setType
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setComment
argument_list|(
literal|"changed comment"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
name|alteredTable
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// The following data might be changed
name|alteredTable
operator|.
name|setParameters
argument_list|(
name|newTable
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table data should be the same"
argument_list|,
name|newTable
argument_list|,
name|alteredTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableCascade
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|partitionedTable
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"new_col_1"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run without cascade
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Table
name|alteredTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table data should be changed"
argument_list|,
name|newTable
argument_list|,
name|alteredTable
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Partition columns should not be changed"
argument_list|,
literal|2
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Run with cascade
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"new_col_2"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|alteredTable
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table data should be changed"
argument_list|,
name|newTable
argument_list|,
name|alteredTable
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Partition columns should be changed"
argument_list|,
literal|4
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Run using environment context with cascade
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"new_col_3"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|EnvironmentContext
name|context
init|=
operator|new
name|EnvironmentContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|putToProperties
argument_list|(
name|StatsSetupConst
operator|.
name|CASCADE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table_with_environmentContext
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|alteredTable
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The table data should be changed"
argument_list|,
name|newTable
argument_list|,
name|alteredTable
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Partition columns should be changed"
argument_list|,
literal|5
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableNullDatabaseInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|setDbName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableNullTableNameInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|setTableName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableInvalidTableNameInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|setTableName
argument_list|(
literal|"test_table;"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableEmptyTableNameInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|setTableName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableNullStorageDescriptorInNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|setSd
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableNullDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
literal|null
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableNullTableName
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableNullNewTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// TODO: Should be checked on server side. On Embedded metastore it throws
comment|// NullPointerException, on Remote metastore it throws TTransportException
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a NullPointerException or TTransportException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Embedded MetaStore
block|}
catch|catch
parameter_list|(
name|TTransportException
name|exception
parameter_list|)
block|{
comment|// Expected exception - Remote MetaStore
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableInvalidStorageDescriptorNullCols
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableInvalidStorageDescriptorNullSerdeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setSerdeInfo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableInvalidStorageDescriptorNullColumnType
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableInvalidStorageDescriptorNullLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableInvalidStorageDescriptorInvalidColumnType
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setType
argument_list|(
literal|"xyz"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableInvalidStorageDescriptorAddPartitionColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|addToPartitionKeys
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"new_part"
argument_list|,
literal|"int"
argument_list|,
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableInvalidStorageDescriptorAlterPartitionColumnName
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|partitionedTable
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setName
argument_list|(
literal|"altered_name"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableInvalidStorageDescriptorRemovePartitionColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|partitionedTable
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableNoSuchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
literal|"no_such_database"
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableNoSuchTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|"no_such_table_name"
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAlterTableNoSuchTableInThisDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|2
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|OTHER_DATABASE
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlterTableAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|originalTable
init|=
name|testTables
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|newTable
init|=
name|originalTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newTable
operator|.
name|setTableName
argument_list|(
name|testTables
index|[
literal|2
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Already existing table
name|client
operator|.
name|alter_table
argument_list|(
name|originalTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|originalTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
comment|// TODO: Maybe throw AlreadyExistsException.
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an InvalidOperationException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|exception
parameter_list|)
block|{
comment|// Expected exception
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|tablesInOtherCatalogs
parameter_list|()
throws|throws
name|TException
throws|,
name|URISyntaxException
block|{
name|String
name|catName
init|=
literal|"create_etc_tables_in_other_catalogs"
decl_stmt|;
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|catName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"db_in_other_catalog"
decl_stmt|;
comment|// For this one don't specify a location to make sure it gets put in the catalog directory
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|tableNames
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tableNames
index|[
name|i
index|]
operator|=
literal|"table_in_other_catalog_"
operator|+
name|i
expr_stmt|;
name|TableBuilder
name|builder
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col1_"
operator|+
name|i
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col2_"
operator|+
name|i
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
decl_stmt|;
comment|// Make one have a non-standard location
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|builder
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make one partitioned
if|if
condition|(
name|i
operator|==
literal|2
condition|)
name|builder
operator|.
name|addPartCol
argument_list|(
literal|"pcol1"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
comment|// Make one a materialized view
if|if
condition|(
name|i
operator|==
literal|3
condition|)
block|{
name|builder
operator|.
name|setType
argument_list|(
name|TableType
operator|.
name|MATERIALIZED_VIEW
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|setRewriteEnabled
argument_list|(
literal|true
argument_list|)
operator|.
name|addMaterializedViewReferencedTable
argument_list|(
name|dbName
operator|+
literal|"."
operator|+
name|tableNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add partitions for the partitioned table
name|String
index|[]
name|partVals
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|Table
name|partitionedTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partVals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|partVals
index|[
name|i
index|]
operator|=
literal|"part"
operator|+
name|i
expr_stmt|;
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|partitionedTable
argument_list|)
operator|.
name|addValue
argument_list|(
name|partVals
index|[
name|i
index|]
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Get tables, make sure the locations are correct
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Table
name|t
init|=
name|client
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|catName
argument_list|,
name|t
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedLocation
init|=
operator|(
name|i
operator|<
literal|1
operator|)
condition|?
operator|new
name|File
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
else|:
operator|new
name|File
argument_list|(
name|cat
operator|.
name|getLocationUri
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|dbName
operator|+
literal|".db"
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedLocation
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
name|dir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Make sure getting table in the wrong catalog does not work
try|try
block|{
name|Table
name|t
init|=
name|client
operator|.
name|getTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
comment|// test getAllTables
name|Set
argument_list|<
name|String
argument_list|>
name|fetchedNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableNames
operator|.
name|length
argument_list|,
name|fetchedNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fetchedNames
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|fetchedNames
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetchedNames
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// test getMaterializedViewsForRewriting
name|List
argument_list|<
name|String
argument_list|>
name|materializedViews
init|=
name|client
operator|.
name|getMaterializedViewsForRewriting
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|materializedViews
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableNames
index|[
literal|3
index|]
argument_list|,
name|materializedViews
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fetchedNames
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getMaterializedViewsForRewriting
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fetchedNames
operator|.
name|contains
argument_list|(
name|tableNames
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// test getTableObjectsByName
name|List
argument_list|<
name|Table
argument_list|>
name|fetchedTables
init|=
name|client
operator|.
name|getTableObjectsByName
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|tableNames
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fetchedTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|fetchedTables
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|fetchedTables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableNames
index|[
literal|1
index|]
argument_list|,
name|fetchedTables
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|fetchedTables
operator|=
name|client
operator|.
name|getTableObjectsByName
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|tableNames
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fetchedTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test altering the table
name|Table
name|t
init|=
name|client
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|t
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|t
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|deepCopy
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|t
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Alter a table in the wrong catalog
try|try
block|{
name|client
operator|.
name|alter_table
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
comment|// Update the metadata for the materialized view
name|CreationMetadata
name|cm
init|=
name|client
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|3
index|]
argument_list|)
operator|.
name|getCreationMetadata
argument_list|()
decl_stmt|;
name|cm
operator|.
name|addToTablesUsed
argument_list|(
name|dbName
operator|+
literal|"."
operator|+
name|tableNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|client
operator|.
name|updateCreationMetadata
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|3
index|]
argument_list|,
name|cm
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partVal
range|:
name|partVals
control|)
name|partNames
operator|.
name|add
argument_list|(
literal|"pcol1="
operator|+
name|partVal
argument_list|)
expr_stmt|;
comment|// Truncate a table
name|client
operator|.
name|truncateTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
comment|// Truncate a table in the wrong catalog
try|try
block|{
name|client
operator|.
name|truncateTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
decl||
name|TApplicationException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
comment|// Drop a table from the wrong catalog
try|try
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
decl||
name|TApplicationException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
comment|// Should ignore the failure
name|client
operator|.
name|dropTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Have to do this in reverse order so that we drop the materialized view first.
for|for
control|(
name|int
name|i
init|=
name|tableNames
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|t
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|File
name|tableDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableDir
operator|.
name|exists
argument_list|()
operator|&&
name|tableDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableNames
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|tableNames
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableDir
operator|.
name|exists
argument_list|()
operator|&&
name|tableDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|tableDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getAllTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|createTableInBogusCatalog
parameter_list|()
throws|throws
name|TException
block|{
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setCatName
argument_list|(
literal|"nosuch"
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"doomed"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col1"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col2"
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getTableInBogusCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|client
operator|.
name|getTable
argument_list|(
literal|"nosuch"
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAllTablesInBogusCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|client
operator|.
name|getAllTables
argument_list|(
literal|"nosuch"
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|names
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnknownDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getTableObjectsByNameBogusCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|client
operator|.
name|getTableObjectsByName
argument_list|(
literal|"nosuch"
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
name|testTables
index|[
literal|1
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getMaterializedViewsInBogusCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|client
operator|.
name|getMaterializedViewsForRewriting
argument_list|(
literal|"nosuch"
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|names
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|alterTableBogusCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|Table
name|t
init|=
name|testTables
index|[
literal|0
index|]
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|t
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
literal|"nosuch"
argument_list|,
name|t
operator|.
name|getDbName
argument_list|()
argument_list|,
name|t
operator|.
name|getTableName
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|moveTablesBetweenCatalogsOnAlter
parameter_list|()
throws|throws
name|TException
block|{
name|String
name|catName
init|=
literal|"move_table_between_catalogs_on_alter"
decl_stmt|;
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
name|catName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"a_db"
decl_stmt|;
comment|// For this one don't specify a location to make sure it gets put in the catalog directory
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setCatalogName
argument_list|(
name|catName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"non_movable_table"
decl_stmt|;
name|Table
name|before
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col1"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"col2"
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|after
init|=
name|before
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|after
operator|.
name|setCatName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|truncateTableBogusCatalog
parameter_list|()
throws|throws
name|TException
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|partitionedTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|partitionedTable
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|client
operator|.
name|truncateTable
argument_list|(
literal|"nosuch"
argument_list|,
name|partitionedTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|partitionedTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
comment|// For reasons I don't understand and am too lazy to debug at the moment the
comment|// NoSuchObjectException gets swallowed by a TApplicationException in remote mode.
block|}
catch|catch
parameter_list|(
name|TApplicationException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|//NOP
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchObjectException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|dropTableBogusCatalog
parameter_list|()
throws|throws
name|TException
block|{
name|client
operator|.
name|dropTable
argument_list|(
literal|"nosuch"
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testTables
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a Table with all of the parameters set. The temporary table is available only on HS2    * server, so do not use it.    * @return The Table object    */
specifier|private
name|Table
name|getTableWithAllParametersSet
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DEFAULT_DATABASE
argument_list|)
operator|.
name|setTableName
argument_list|(
literal|"test_table_with_all_parameters_set"
argument_list|)
operator|.
name|setCreateTime
argument_list|(
literal|100
argument_list|)
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"owner"
argument_list|)
operator|.
name|setLastAccessTime
argument_list|(
literal|200
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"part_col"
argument_list|,
literal|"int"
argument_list|,
literal|"part col comment"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_col"
argument_list|,
literal|"int"
argument_list|,
literal|"test col comment"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_bucket_col"
argument_list|,
literal|"int"
argument_list|,
literal|"test bucket col comment"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_skewed_col"
argument_list|,
literal|"int"
argument_list|,
literal|"test skewed col comment"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_sort_col"
argument_list|,
literal|"int"
argument_list|,
literal|"test sort col comment"
argument_list|)
operator|.
name|addBucketCol
argument_list|(
literal|"test_bucket_col"
argument_list|)
operator|.
name|addSkewedColName
argument_list|(
literal|"test_skewed_col"
argument_list|)
operator|.
name|addSortCol
argument_list|(
literal|"test_sort_col"
argument_list|,
literal|1
argument_list|)
operator|.
name|setCompressed
argument_list|(
literal|true
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"inputFormat"
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"outputFormat"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|metaStore
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/location"
argument_list|)
operator|.
name|setNumBuckets
argument_list|(
literal|4
argument_list|)
operator|.
name|setRetention
argument_list|(
literal|30000
argument_list|)
operator|.
name|setRewriteEnabled
argument_list|(
literal|true
argument_list|)
operator|.
name|setType
argument_list|(
literal|"VIEW"
argument_list|)
operator|.
name|setViewExpandedText
argument_list|(
literal|"viewExplainedText"
argument_list|)
operator|.
name|setViewOriginalText
argument_list|(
literal|"viewOriginalText"
argument_list|)
operator|.
name|setSerdeLib
argument_list|(
literal|"serdelib"
argument_list|)
operator|.
name|setSerdeName
argument_list|(
literal|"serdename"
argument_list|)
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|true
argument_list|)
operator|.
name|addSerdeParam
argument_list|(
literal|"serdeParam"
argument_list|,
literal|"serdeParamValue"
argument_list|)
operator|.
name|addTableParam
argument_list|(
literal|"tableParam"
argument_list|,
literal|"tableParamValue"
argument_list|)
operator|.
name|addStorageDescriptorParam
argument_list|(
literal|"sdParam"
argument_list|,
literal|"sdParamValue"
argument_list|)
operator|.
name|build
argument_list|(
name|metaStore
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

