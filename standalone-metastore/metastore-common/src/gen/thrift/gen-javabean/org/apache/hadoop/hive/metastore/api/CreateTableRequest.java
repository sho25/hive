begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.9.3)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"rawtypes"
block|,
literal|"serial"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Generated
argument_list|(
name|value
operator|=
literal|"Autogenerated by Thrift Compiler (0.9.3)"
argument_list|)
annotation|@
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|CreateTableRequest
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|CreateTableRequest
argument_list|,
name|CreateTableRequest
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|CreateTableRequest
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"CreateTableRequest"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"table"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ENV_CONTEXT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"envContext"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|PRIMARY_KEYS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"primaryKeys"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|FOREIGN_KEYS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"foreignKeys"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|UNIQUE_CONSTRAINTS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"uniqueConstraints"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|NOT_NULL_CONSTRAINTS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"notNullConstraints"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|DEFAULT_CONSTRAINTS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"defaultConstraints"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|CHECK_CONSTRAINTS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"checkConstraints"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|PROCESSOR_CAPABILITIES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"processorCapabilities"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|9
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|PROCESSOR_IDENTIFIER_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"processorIdentifier"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|CreateTableRequestStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|CreateTableRequestTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Table
name|table
decl_stmt|;
comment|// required
specifier|private
name|EnvironmentContext
name|envContext
decl_stmt|;
comment|// optional
specifier|private
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
decl_stmt|;
comment|// optional
specifier|private
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
decl_stmt|;
comment|// optional
specifier|private
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
decl_stmt|;
comment|// optional
specifier|private
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
decl_stmt|;
comment|// optional
specifier|private
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|defaultConstraints
decl_stmt|;
comment|// optional
specifier|private
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|checkConstraints
decl_stmt|;
comment|// optional
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|processorCapabilities
decl_stmt|;
comment|// optional
specifier|private
name|String
name|processorIdentifier
decl_stmt|;
comment|// optional
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|TABLE
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"table"
argument_list|)
block|,
name|ENV_CONTEXT
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"envContext"
argument_list|)
block|,
name|PRIMARY_KEYS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"primaryKeys"
argument_list|)
block|,
name|FOREIGN_KEYS
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"foreignKeys"
argument_list|)
block|,
name|UNIQUE_CONSTRAINTS
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"uniqueConstraints"
argument_list|)
block|,
name|NOT_NULL_CONSTRAINTS
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"notNullConstraints"
argument_list|)
block|,
name|DEFAULT_CONSTRAINTS
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"defaultConstraints"
argument_list|)
block|,
name|CHECK_CONSTRAINTS
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|,
literal|"checkConstraints"
argument_list|)
block|,
name|PROCESSOR_CAPABILITIES
argument_list|(
operator|(
name|short
operator|)
literal|9
argument_list|,
literal|"processorCapabilities"
argument_list|)
block|,
name|PROCESSOR_IDENTIFIER
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|,
literal|"processorIdentifier"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE
return|return
name|TABLE
return|;
case|case
literal|2
case|:
comment|// ENV_CONTEXT
return|return
name|ENV_CONTEXT
return|;
case|case
literal|3
case|:
comment|// PRIMARY_KEYS
return|return
name|PRIMARY_KEYS
return|;
case|case
literal|4
case|:
comment|// FOREIGN_KEYS
return|return
name|FOREIGN_KEYS
return|;
case|case
literal|5
case|:
comment|// UNIQUE_CONSTRAINTS
return|return
name|UNIQUE_CONSTRAINTS
return|;
case|case
literal|6
case|:
comment|// NOT_NULL_CONSTRAINTS
return|return
name|NOT_NULL_CONSTRAINTS
return|;
case|case
literal|7
case|:
comment|// DEFAULT_CONSTRAINTS
return|return
name|DEFAULT_CONSTRAINTS
return|;
case|case
literal|8
case|:
comment|// CHECK_CONSTRAINTS
return|return
name|CHECK_CONSTRAINTS
return|;
case|case
literal|9
case|:
comment|// PROCESSOR_CAPABILITIES
return|return
name|PROCESSOR_CAPABILITIES
return|;
case|case
literal|10
case|:
comment|// PROCESSOR_IDENTIFIER
return|return
name|PROCESSOR_IDENTIFIER
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|_Fields
name|optionals
index|[]
init|=
block|{
name|_Fields
operator|.
name|ENV_CONTEXT
block|,
name|_Fields
operator|.
name|PRIMARY_KEYS
block|,
name|_Fields
operator|.
name|FOREIGN_KEYS
block|,
name|_Fields
operator|.
name|UNIQUE_CONSTRAINTS
block|,
name|_Fields
operator|.
name|NOT_NULL_CONSTRAINTS
block|,
name|_Fields
operator|.
name|DEFAULT_CONSTRAINTS
block|,
name|_Fields
operator|.
name|CHECK_CONSTRAINTS
block|,
name|_Fields
operator|.
name|PROCESSOR_CAPABILITIES
block|,
name|_Fields
operator|.
name|PROCESSOR_IDENTIFIER
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"table"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|Table
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ENV_CONTEXT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"envContext"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|EnvironmentContext
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PRIMARY_KEYS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"primaryKeys"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|SQLPrimaryKey
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|FOREIGN_KEYS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"foreignKeys"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|SQLForeignKey
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|UNIQUE_CONSTRAINTS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"uniqueConstraints"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|SQLUniqueConstraint
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NOT_NULL_CONSTRAINTS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"notNullConstraints"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|SQLNotNullConstraint
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DEFAULT_CONSTRAINTS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"defaultConstraints"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|SQLDefaultConstraint
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|CHECK_CONSTRAINTS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"checkConstraints"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|SQLCheckConstraint
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PROCESSOR_CAPABILITIES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"processorCapabilities"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PROCESSOR_IDENTIFIER
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"processorIdentifier"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|CreateTableRequest
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CreateTableRequest
parameter_list|()
block|{   }
specifier|public
name|CreateTableRequest
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|CreateTableRequest
parameter_list|(
name|CreateTableRequest
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTable
argument_list|()
condition|)
block|{
name|this
operator|.
name|table
operator|=
operator|new
name|Table
argument_list|(
name|other
operator|.
name|table
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetEnvContext
argument_list|()
condition|)
block|{
name|this
operator|.
name|envContext
operator|=
operator|new
name|EnvironmentContext
argument_list|(
name|other
operator|.
name|envContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPrimaryKeys
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|__this__primaryKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|SQLPrimaryKey
argument_list|>
argument_list|(
name|other
operator|.
name|primaryKeys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SQLPrimaryKey
name|other_element
range|:
name|other
operator|.
name|primaryKeys
control|)
block|{
name|__this__primaryKeys
operator|.
name|add
argument_list|(
operator|new
name|SQLPrimaryKey
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|primaryKeys
operator|=
name|__this__primaryKeys
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetForeignKeys
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|__this__foreignKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|SQLForeignKey
argument_list|>
argument_list|(
name|other
operator|.
name|foreignKeys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SQLForeignKey
name|other_element
range|:
name|other
operator|.
name|foreignKeys
control|)
block|{
name|__this__foreignKeys
operator|.
name|add
argument_list|(
operator|new
name|SQLForeignKey
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|foreignKeys
operator|=
name|__this__foreignKeys
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetUniqueConstraints
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|__this__uniqueConstraints
init|=
operator|new
name|ArrayList
argument_list|<
name|SQLUniqueConstraint
argument_list|>
argument_list|(
name|other
operator|.
name|uniqueConstraints
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SQLUniqueConstraint
name|other_element
range|:
name|other
operator|.
name|uniqueConstraints
control|)
block|{
name|__this__uniqueConstraints
operator|.
name|add
argument_list|(
operator|new
name|SQLUniqueConstraint
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|uniqueConstraints
operator|=
name|__this__uniqueConstraints
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetNotNullConstraints
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|__this__notNullConstraints
init|=
operator|new
name|ArrayList
argument_list|<
name|SQLNotNullConstraint
argument_list|>
argument_list|(
name|other
operator|.
name|notNullConstraints
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SQLNotNullConstraint
name|other_element
range|:
name|other
operator|.
name|notNullConstraints
control|)
block|{
name|__this__notNullConstraints
operator|.
name|add
argument_list|(
operator|new
name|SQLNotNullConstraint
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|notNullConstraints
operator|=
name|__this__notNullConstraints
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetDefaultConstraints
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|__this__defaultConstraints
init|=
operator|new
name|ArrayList
argument_list|<
name|SQLDefaultConstraint
argument_list|>
argument_list|(
name|other
operator|.
name|defaultConstraints
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SQLDefaultConstraint
name|other_element
range|:
name|other
operator|.
name|defaultConstraints
control|)
block|{
name|__this__defaultConstraints
operator|.
name|add
argument_list|(
operator|new
name|SQLDefaultConstraint
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|defaultConstraints
operator|=
name|__this__defaultConstraints
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetCheckConstraints
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|__this__checkConstraints
init|=
operator|new
name|ArrayList
argument_list|<
name|SQLCheckConstraint
argument_list|>
argument_list|(
name|other
operator|.
name|checkConstraints
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SQLCheckConstraint
name|other_element
range|:
name|other
operator|.
name|checkConstraints
control|)
block|{
name|__this__checkConstraints
operator|.
name|add
argument_list|(
operator|new
name|SQLCheckConstraint
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|checkConstraints
operator|=
name|__this__checkConstraints
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetProcessorCapabilities
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__processorCapabilities
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|other
operator|.
name|processorCapabilities
argument_list|)
decl_stmt|;
name|this
operator|.
name|processorCapabilities
operator|=
name|__this__processorCapabilities
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetProcessorIdentifier
argument_list|()
condition|)
block|{
name|this
operator|.
name|processorIdentifier
operator|=
name|other
operator|.
name|processorIdentifier
expr_stmt|;
block|}
block|}
specifier|public
name|CreateTableRequest
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|CreateTableRequest
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|table
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|envContext
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|primaryKeys
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|foreignKeys
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|uniqueConstraints
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|notNullConstraints
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|defaultConstraints
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|checkConstraints
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|processorCapabilities
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|processorIdentifier
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|()
block|{
return|return
name|this
operator|.
name|table
return|;
block|}
specifier|public
name|void
name|setTable
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable
parameter_list|()
block|{
name|this
operator|.
name|table
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field table is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTable
parameter_list|()
block|{
return|return
name|this
operator|.
name|table
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|table
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|EnvironmentContext
name|getEnvContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|envContext
return|;
block|}
specifier|public
name|void
name|setEnvContext
parameter_list|(
name|EnvironmentContext
name|envContext
parameter_list|)
block|{
name|this
operator|.
name|envContext
operator|=
name|envContext
expr_stmt|;
block|}
specifier|public
name|void
name|unsetEnvContext
parameter_list|()
block|{
name|this
operator|.
name|envContext
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field envContext is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetEnvContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|envContext
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setEnvContextIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|envContext
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getPrimaryKeysSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|primaryKeys
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|primaryKeys
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeysIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|primaryKeys
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|primaryKeys
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToPrimaryKeys
parameter_list|(
name|SQLPrimaryKey
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|primaryKeys
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|primaryKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLPrimaryKey
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|primaryKeys
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeys
parameter_list|()
block|{
return|return
name|this
operator|.
name|primaryKeys
return|;
block|}
specifier|public
name|void
name|setPrimaryKeys
parameter_list|(
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|)
block|{
name|this
operator|.
name|primaryKeys
operator|=
name|primaryKeys
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPrimaryKeys
parameter_list|()
block|{
name|this
operator|.
name|primaryKeys
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field primaryKeys is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPrimaryKeys
parameter_list|()
block|{
return|return
name|this
operator|.
name|primaryKeys
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPrimaryKeysIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|primaryKeys
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getForeignKeysSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|foreignKeys
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|foreignKeys
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeysIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|foreignKeys
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|foreignKeys
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToForeignKeys
parameter_list|(
name|SQLForeignKey
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|foreignKeys
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|foreignKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLForeignKey
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|foreignKeys
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeys
parameter_list|()
block|{
return|return
name|this
operator|.
name|foreignKeys
return|;
block|}
specifier|public
name|void
name|setForeignKeys
parameter_list|(
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|)
block|{
name|this
operator|.
name|foreignKeys
operator|=
name|foreignKeys
expr_stmt|;
block|}
specifier|public
name|void
name|unsetForeignKeys
parameter_list|()
block|{
name|this
operator|.
name|foreignKeys
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field foreignKeys is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetForeignKeys
parameter_list|()
block|{
return|return
name|this
operator|.
name|foreignKeys
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setForeignKeysIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|foreignKeys
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getUniqueConstraintsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|uniqueConstraints
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|uniqueConstraints
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getUniqueConstraintsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|uniqueConstraints
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|uniqueConstraints
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToUniqueConstraints
parameter_list|(
name|SQLUniqueConstraint
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|uniqueConstraints
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|uniqueConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLUniqueConstraint
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|uniqueConstraints
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getUniqueConstraints
parameter_list|()
block|{
return|return
name|this
operator|.
name|uniqueConstraints
return|;
block|}
specifier|public
name|void
name|setUniqueConstraints
parameter_list|(
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
parameter_list|)
block|{
name|this
operator|.
name|uniqueConstraints
operator|=
name|uniqueConstraints
expr_stmt|;
block|}
specifier|public
name|void
name|unsetUniqueConstraints
parameter_list|()
block|{
name|this
operator|.
name|uniqueConstraints
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field uniqueConstraints is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetUniqueConstraints
parameter_list|()
block|{
return|return
name|this
operator|.
name|uniqueConstraints
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setUniqueConstraintsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|uniqueConstraints
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getNotNullConstraintsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|notNullConstraints
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|notNullConstraints
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getNotNullConstraintsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|notNullConstraints
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|notNullConstraints
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToNotNullConstraints
parameter_list|(
name|SQLNotNullConstraint
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|notNullConstraints
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|notNullConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLNotNullConstraint
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|notNullConstraints
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getNotNullConstraints
parameter_list|()
block|{
return|return
name|this
operator|.
name|notNullConstraints
return|;
block|}
specifier|public
name|void
name|setNotNullConstraints
parameter_list|(
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
parameter_list|)
block|{
name|this
operator|.
name|notNullConstraints
operator|=
name|notNullConstraints
expr_stmt|;
block|}
specifier|public
name|void
name|unsetNotNullConstraints
parameter_list|()
block|{
name|this
operator|.
name|notNullConstraints
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field notNullConstraints is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNotNullConstraints
parameter_list|()
block|{
return|return
name|this
operator|.
name|notNullConstraints
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNotNullConstraintsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|notNullConstraints
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getDefaultConstraintsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|defaultConstraints
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|defaultConstraints
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|getDefaultConstraintsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|defaultConstraints
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|defaultConstraints
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToDefaultConstraints
parameter_list|(
name|SQLDefaultConstraint
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|defaultConstraints
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|defaultConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLDefaultConstraint
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|defaultConstraints
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|getDefaultConstraints
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultConstraints
return|;
block|}
specifier|public
name|void
name|setDefaultConstraints
parameter_list|(
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|defaultConstraints
parameter_list|)
block|{
name|this
operator|.
name|defaultConstraints
operator|=
name|defaultConstraints
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDefaultConstraints
parameter_list|()
block|{
name|this
operator|.
name|defaultConstraints
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field defaultConstraints is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDefaultConstraints
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultConstraints
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDefaultConstraintsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|defaultConstraints
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getCheckConstraintsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|checkConstraints
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|checkConstraints
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|getCheckConstraintsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|checkConstraints
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|checkConstraints
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToCheckConstraints
parameter_list|(
name|SQLCheckConstraint
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|checkConstraints
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|checkConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLCheckConstraint
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|checkConstraints
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|getCheckConstraints
parameter_list|()
block|{
return|return
name|this
operator|.
name|checkConstraints
return|;
block|}
specifier|public
name|void
name|setCheckConstraints
parameter_list|(
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|checkConstraints
parameter_list|)
block|{
name|this
operator|.
name|checkConstraints
operator|=
name|checkConstraints
expr_stmt|;
block|}
specifier|public
name|void
name|unsetCheckConstraints
parameter_list|()
block|{
name|this
operator|.
name|checkConstraints
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field checkConstraints is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCheckConstraints
parameter_list|()
block|{
return|return
name|this
operator|.
name|checkConstraints
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setCheckConstraintsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|checkConstraints
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getProcessorCapabilitiesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|processorCapabilities
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|processorCapabilities
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getProcessorCapabilitiesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|processorCapabilities
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|processorCapabilities
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToProcessorCapabilities
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|processorCapabilities
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|processorCapabilities
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|processorCapabilities
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getProcessorCapabilities
parameter_list|()
block|{
return|return
name|this
operator|.
name|processorCapabilities
return|;
block|}
specifier|public
name|void
name|setProcessorCapabilities
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|processorCapabilities
parameter_list|)
block|{
name|this
operator|.
name|processorCapabilities
operator|=
name|processorCapabilities
expr_stmt|;
block|}
specifier|public
name|void
name|unsetProcessorCapabilities
parameter_list|()
block|{
name|this
operator|.
name|processorCapabilities
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field processorCapabilities is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetProcessorCapabilities
parameter_list|()
block|{
return|return
name|this
operator|.
name|processorCapabilities
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setProcessorCapabilitiesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|processorCapabilities
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getProcessorIdentifier
parameter_list|()
block|{
return|return
name|this
operator|.
name|processorIdentifier
return|;
block|}
specifier|public
name|void
name|setProcessorIdentifier
parameter_list|(
name|String
name|processorIdentifier
parameter_list|)
block|{
name|this
operator|.
name|processorIdentifier
operator|=
name|processorIdentifier
expr_stmt|;
block|}
specifier|public
name|void
name|unsetProcessorIdentifier
parameter_list|()
block|{
name|this
operator|.
name|processorIdentifier
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field processorIdentifier is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetProcessorIdentifier
parameter_list|()
block|{
return|return
name|this
operator|.
name|processorIdentifier
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setProcessorIdentifierIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|processorIdentifier
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTable
argument_list|(
operator|(
name|Table
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ENV_CONTEXT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetEnvContext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setEnvContext
argument_list|(
operator|(
name|EnvironmentContext
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PRIMARY_KEYS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPrimaryKeys
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPrimaryKeys
argument_list|(
operator|(
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FOREIGN_KEYS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetForeignKeys
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setForeignKeys
argument_list|(
operator|(
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UNIQUE_CONSTRAINTS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetUniqueConstraints
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setUniqueConstraints
argument_list|(
operator|(
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NOT_NULL_CONSTRAINTS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNotNullConstraints
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNotNullConstraints
argument_list|(
operator|(
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DEFAULT_CONSTRAINTS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDefaultConstraints
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDefaultConstraints
argument_list|(
operator|(
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CHECK_CONSTRAINTS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCheckConstraints
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCheckConstraints
argument_list|(
operator|(
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PROCESSOR_CAPABILITIES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetProcessorCapabilities
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setProcessorCapabilities
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PROCESSOR_IDENTIFIER
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetProcessorIdentifier
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setProcessorIdentifier
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE
case|:
return|return
name|getTable
argument_list|()
return|;
case|case
name|ENV_CONTEXT
case|:
return|return
name|getEnvContext
argument_list|()
return|;
case|case
name|PRIMARY_KEYS
case|:
return|return
name|getPrimaryKeys
argument_list|()
return|;
case|case
name|FOREIGN_KEYS
case|:
return|return
name|getForeignKeys
argument_list|()
return|;
case|case
name|UNIQUE_CONSTRAINTS
case|:
return|return
name|getUniqueConstraints
argument_list|()
return|;
case|case
name|NOT_NULL_CONSTRAINTS
case|:
return|return
name|getNotNullConstraints
argument_list|()
return|;
case|case
name|DEFAULT_CONSTRAINTS
case|:
return|return
name|getDefaultConstraints
argument_list|()
return|;
case|case
name|CHECK_CONSTRAINTS
case|:
return|return
name|getCheckConstraints
argument_list|()
return|;
case|case
name|PROCESSOR_CAPABILITIES
case|:
return|return
name|getProcessorCapabilities
argument_list|()
return|;
case|case
name|PROCESSOR_IDENTIFIER
case|:
return|return
name|getProcessorIdentifier
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE
case|:
return|return
name|isSetTable
argument_list|()
return|;
case|case
name|ENV_CONTEXT
case|:
return|return
name|isSetEnvContext
argument_list|()
return|;
case|case
name|PRIMARY_KEYS
case|:
return|return
name|isSetPrimaryKeys
argument_list|()
return|;
case|case
name|FOREIGN_KEYS
case|:
return|return
name|isSetForeignKeys
argument_list|()
return|;
case|case
name|UNIQUE_CONSTRAINTS
case|:
return|return
name|isSetUniqueConstraints
argument_list|()
return|;
case|case
name|NOT_NULL_CONSTRAINTS
case|:
return|return
name|isSetNotNullConstraints
argument_list|()
return|;
case|case
name|DEFAULT_CONSTRAINTS
case|:
return|return
name|isSetDefaultConstraints
argument_list|()
return|;
case|case
name|CHECK_CONSTRAINTS
case|:
return|return
name|isSetCheckConstraints
argument_list|()
return|;
case|case
name|PROCESSOR_CAPABILITIES
case|:
return|return
name|isSetProcessorCapabilities
argument_list|()
return|;
case|case
name|PROCESSOR_IDENTIFIER
case|:
return|return
name|isSetProcessorIdentifier
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|CreateTableRequest
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|CreateTableRequest
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|CreateTableRequest
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_table
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTable
argument_list|()
decl_stmt|;
name|boolean
name|that_present_table
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_table
operator|||
name|that_present_table
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table
operator|&&
name|that_present_table
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_envContext
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetEnvContext
argument_list|()
decl_stmt|;
name|boolean
name|that_present_envContext
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetEnvContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_envContext
operator|||
name|that_present_envContext
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_envContext
operator|&&
name|that_present_envContext
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|envContext
operator|.
name|equals
argument_list|(
name|that
operator|.
name|envContext
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_primaryKeys
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPrimaryKeys
argument_list|()
decl_stmt|;
name|boolean
name|that_present_primaryKeys
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPrimaryKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_primaryKeys
operator|||
name|that_present_primaryKeys
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_primaryKeys
operator|&&
name|that_present_primaryKeys
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|primaryKeys
operator|.
name|equals
argument_list|(
name|that
operator|.
name|primaryKeys
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_foreignKeys
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetForeignKeys
argument_list|()
decl_stmt|;
name|boolean
name|that_present_foreignKeys
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetForeignKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_foreignKeys
operator|||
name|that_present_foreignKeys
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_foreignKeys
operator|&&
name|that_present_foreignKeys
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|foreignKeys
operator|.
name|equals
argument_list|(
name|that
operator|.
name|foreignKeys
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_uniqueConstraints
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetUniqueConstraints
argument_list|()
decl_stmt|;
name|boolean
name|that_present_uniqueConstraints
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetUniqueConstraints
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_uniqueConstraints
operator|||
name|that_present_uniqueConstraints
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_uniqueConstraints
operator|&&
name|that_present_uniqueConstraints
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|uniqueConstraints
operator|.
name|equals
argument_list|(
name|that
operator|.
name|uniqueConstraints
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_notNullConstraints
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetNotNullConstraints
argument_list|()
decl_stmt|;
name|boolean
name|that_present_notNullConstraints
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetNotNullConstraints
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_notNullConstraints
operator|||
name|that_present_notNullConstraints
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_notNullConstraints
operator|&&
name|that_present_notNullConstraints
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|notNullConstraints
operator|.
name|equals
argument_list|(
name|that
operator|.
name|notNullConstraints
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_defaultConstraints
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDefaultConstraints
argument_list|()
decl_stmt|;
name|boolean
name|that_present_defaultConstraints
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDefaultConstraints
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_defaultConstraints
operator|||
name|that_present_defaultConstraints
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_defaultConstraints
operator|&&
name|that_present_defaultConstraints
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|defaultConstraints
operator|.
name|equals
argument_list|(
name|that
operator|.
name|defaultConstraints
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_checkConstraints
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCheckConstraints
argument_list|()
decl_stmt|;
name|boolean
name|that_present_checkConstraints
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCheckConstraints
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_checkConstraints
operator|||
name|that_present_checkConstraints
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_checkConstraints
operator|&&
name|that_present_checkConstraints
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|checkConstraints
operator|.
name|equals
argument_list|(
name|that
operator|.
name|checkConstraints
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_processorCapabilities
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetProcessorCapabilities
argument_list|()
decl_stmt|;
name|boolean
name|that_present_processorCapabilities
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetProcessorCapabilities
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_processorCapabilities
operator|||
name|that_present_processorCapabilities
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_processorCapabilities
operator|&&
name|that_present_processorCapabilities
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|processorCapabilities
operator|.
name|equals
argument_list|(
name|that
operator|.
name|processorCapabilities
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_processorIdentifier
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetProcessorIdentifier
argument_list|()
decl_stmt|;
name|boolean
name|that_present_processorIdentifier
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetProcessorIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_processorIdentifier
operator|||
name|that_present_processorIdentifier
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_processorIdentifier
operator|&&
name|that_present_processorIdentifier
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|processorIdentifier
operator|.
name|equals
argument_list|(
name|that
operator|.
name|processorIdentifier
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|present_table
init|=
literal|true
operator|&&
operator|(
name|isSetTable
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_table
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_table
condition|)
name|list
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|boolean
name|present_envContext
init|=
literal|true
operator|&&
operator|(
name|isSetEnvContext
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_envContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_envContext
condition|)
name|list
operator|.
name|add
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
name|boolean
name|present_primaryKeys
init|=
literal|true
operator|&&
operator|(
name|isSetPrimaryKeys
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_primaryKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_primaryKeys
condition|)
name|list
operator|.
name|add
argument_list|(
name|primaryKeys
argument_list|)
expr_stmt|;
name|boolean
name|present_foreignKeys
init|=
literal|true
operator|&&
operator|(
name|isSetForeignKeys
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_foreignKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_foreignKeys
condition|)
name|list
operator|.
name|add
argument_list|(
name|foreignKeys
argument_list|)
expr_stmt|;
name|boolean
name|present_uniqueConstraints
init|=
literal|true
operator|&&
operator|(
name|isSetUniqueConstraints
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_uniqueConstraints
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_uniqueConstraints
condition|)
name|list
operator|.
name|add
argument_list|(
name|uniqueConstraints
argument_list|)
expr_stmt|;
name|boolean
name|present_notNullConstraints
init|=
literal|true
operator|&&
operator|(
name|isSetNotNullConstraints
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_notNullConstraints
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_notNullConstraints
condition|)
name|list
operator|.
name|add
argument_list|(
name|notNullConstraints
argument_list|)
expr_stmt|;
name|boolean
name|present_defaultConstraints
init|=
literal|true
operator|&&
operator|(
name|isSetDefaultConstraints
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_defaultConstraints
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_defaultConstraints
condition|)
name|list
operator|.
name|add
argument_list|(
name|defaultConstraints
argument_list|)
expr_stmt|;
name|boolean
name|present_checkConstraints
init|=
literal|true
operator|&&
operator|(
name|isSetCheckConstraints
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_checkConstraints
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_checkConstraints
condition|)
name|list
operator|.
name|add
argument_list|(
name|checkConstraints
argument_list|)
expr_stmt|;
name|boolean
name|present_processorCapabilities
init|=
literal|true
operator|&&
operator|(
name|isSetProcessorCapabilities
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_processorCapabilities
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_processorCapabilities
condition|)
name|list
operator|.
name|add
argument_list|(
name|processorCapabilities
argument_list|)
expr_stmt|;
name|boolean
name|present_processorIdentifier
init|=
literal|true
operator|&&
operator|(
name|isSetProcessorIdentifier
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_processorIdentifier
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_processorIdentifier
condition|)
name|list
operator|.
name|add
argument_list|(
name|processorIdentifier
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|CreateTableRequest
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTable
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetTable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTable
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|table
argument_list|,
name|other
operator|.
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetEnvContext
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetEnvContext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetEnvContext
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|envContext
argument_list|,
name|other
operator|.
name|envContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPrimaryKeys
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetPrimaryKeys
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPrimaryKeys
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|primaryKeys
argument_list|,
name|other
operator|.
name|primaryKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetForeignKeys
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetForeignKeys
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetForeignKeys
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|foreignKeys
argument_list|,
name|other
operator|.
name|foreignKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetUniqueConstraints
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetUniqueConstraints
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetUniqueConstraints
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|uniqueConstraints
argument_list|,
name|other
operator|.
name|uniqueConstraints
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNotNullConstraints
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetNotNullConstraints
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNotNullConstraints
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|notNullConstraints
argument_list|,
name|other
operator|.
name|notNullConstraints
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDefaultConstraints
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetDefaultConstraints
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDefaultConstraints
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|defaultConstraints
argument_list|,
name|other
operator|.
name|defaultConstraints
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCheckConstraints
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCheckConstraints
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCheckConstraints
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|checkConstraints
argument_list|,
name|other
operator|.
name|checkConstraints
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetProcessorCapabilities
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetProcessorCapabilities
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetProcessorCapabilities
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|processorCapabilities
argument_list|,
name|other
operator|.
name|processorCapabilities
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetProcessorIdentifier
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetProcessorIdentifier
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetProcessorIdentifier
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|processorIdentifier
argument_list|,
name|other
operator|.
name|processorIdentifier
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"CreateTableRequest("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"table:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|table
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetEnvContext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"envContext:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|envContext
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|envContext
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetPrimaryKeys
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"primaryKeys:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|primaryKeys
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|primaryKeys
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetForeignKeys
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"foreignKeys:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|foreignKeys
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|foreignKeys
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetUniqueConstraints
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"uniqueConstraints:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|uniqueConstraints
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|uniqueConstraints
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetNotNullConstraints
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"notNullConstraints:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|notNullConstraints
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|notNullConstraints
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetDefaultConstraints
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"defaultConstraints:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|defaultConstraints
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|defaultConstraints
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetCheckConstraints
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"checkConstraints:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|checkConstraints
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|checkConstraints
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetProcessorCapabilities
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"processorCapabilities:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|processorCapabilities
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|processorCapabilities
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetProcessorIdentifier
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"processorIdentifier:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|processorIdentifier
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|processorIdentifier
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
if|if
condition|(
operator|!
name|isSetTable
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'table' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// check for sub-struct validity
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|envContext
operator|!=
literal|null
condition|)
block|{
name|envContext
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CreateTableRequestStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|CreateTableRequestStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|CreateTableRequestStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CreateTableRequestStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|CreateTableRequest
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|CreateTableRequest
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|table
operator|=
operator|new
name|Table
argument_list|()
expr_stmt|;
name|struct
operator|.
name|table
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setTableIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ENV_CONTEXT
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|envContext
operator|=
operator|new
name|EnvironmentContext
argument_list|()
expr_stmt|;
name|struct
operator|.
name|envContext
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setEnvContextIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// PRIMARY_KEYS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1048
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|primaryKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLPrimaryKey
argument_list|>
argument_list|(
name|_list1048
operator|.
name|size
argument_list|)
expr_stmt|;
name|SQLPrimaryKey
name|_elem1049
decl_stmt|;
for|for
control|(
name|int
name|_i1050
init|=
literal|0
init|;
name|_i1050
operator|<
name|_list1048
operator|.
name|size
condition|;
operator|++
name|_i1050
control|)
block|{
name|_elem1049
operator|=
operator|new
name|SQLPrimaryKey
argument_list|()
expr_stmt|;
name|_elem1049
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|primaryKeys
operator|.
name|add
argument_list|(
name|_elem1049
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setPrimaryKeysIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// FOREIGN_KEYS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1051
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|foreignKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLForeignKey
argument_list|>
argument_list|(
name|_list1051
operator|.
name|size
argument_list|)
expr_stmt|;
name|SQLForeignKey
name|_elem1052
decl_stmt|;
for|for
control|(
name|int
name|_i1053
init|=
literal|0
init|;
name|_i1053
operator|<
name|_list1051
operator|.
name|size
condition|;
operator|++
name|_i1053
control|)
block|{
name|_elem1052
operator|=
operator|new
name|SQLForeignKey
argument_list|()
expr_stmt|;
name|_elem1052
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|foreignKeys
operator|.
name|add
argument_list|(
name|_elem1052
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setForeignKeysIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// UNIQUE_CONSTRAINTS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1054
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|uniqueConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLUniqueConstraint
argument_list|>
argument_list|(
name|_list1054
operator|.
name|size
argument_list|)
expr_stmt|;
name|SQLUniqueConstraint
name|_elem1055
decl_stmt|;
for|for
control|(
name|int
name|_i1056
init|=
literal|0
init|;
name|_i1056
operator|<
name|_list1054
operator|.
name|size
condition|;
operator|++
name|_i1056
control|)
block|{
name|_elem1055
operator|=
operator|new
name|SQLUniqueConstraint
argument_list|()
expr_stmt|;
name|_elem1055
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|uniqueConstraints
operator|.
name|add
argument_list|(
name|_elem1055
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setUniqueConstraintsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// NOT_NULL_CONSTRAINTS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1057
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|notNullConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLNotNullConstraint
argument_list|>
argument_list|(
name|_list1057
operator|.
name|size
argument_list|)
expr_stmt|;
name|SQLNotNullConstraint
name|_elem1058
decl_stmt|;
for|for
control|(
name|int
name|_i1059
init|=
literal|0
init|;
name|_i1059
operator|<
name|_list1057
operator|.
name|size
condition|;
operator|++
name|_i1059
control|)
block|{
name|_elem1058
operator|=
operator|new
name|SQLNotNullConstraint
argument_list|()
expr_stmt|;
name|_elem1058
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|notNullConstraints
operator|.
name|add
argument_list|(
name|_elem1058
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setNotNullConstraintsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// DEFAULT_CONSTRAINTS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1060
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|defaultConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLDefaultConstraint
argument_list|>
argument_list|(
name|_list1060
operator|.
name|size
argument_list|)
expr_stmt|;
name|SQLDefaultConstraint
name|_elem1061
decl_stmt|;
for|for
control|(
name|int
name|_i1062
init|=
literal|0
init|;
name|_i1062
operator|<
name|_list1060
operator|.
name|size
condition|;
operator|++
name|_i1062
control|)
block|{
name|_elem1061
operator|=
operator|new
name|SQLDefaultConstraint
argument_list|()
expr_stmt|;
name|_elem1061
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|defaultConstraints
operator|.
name|add
argument_list|(
name|_elem1061
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setDefaultConstraintsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// CHECK_CONSTRAINTS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1063
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|checkConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLCheckConstraint
argument_list|>
argument_list|(
name|_list1063
operator|.
name|size
argument_list|)
expr_stmt|;
name|SQLCheckConstraint
name|_elem1064
decl_stmt|;
for|for
control|(
name|int
name|_i1065
init|=
literal|0
init|;
name|_i1065
operator|<
name|_list1063
operator|.
name|size
condition|;
operator|++
name|_i1065
control|)
block|{
name|_elem1064
operator|=
operator|new
name|SQLCheckConstraint
argument_list|()
expr_stmt|;
name|_elem1064
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|checkConstraints
operator|.
name|add
argument_list|(
name|_elem1064
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setCheckConstraintsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// PROCESSOR_CAPABILITIES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1066
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|processorCapabilities
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list1066
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_elem1067
decl_stmt|;
for|for
control|(
name|int
name|_i1068
init|=
literal|0
init|;
name|_i1068
operator|<
name|_list1066
operator|.
name|size
condition|;
operator|++
name|_i1068
control|)
block|{
name|_elem1067
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|processorCapabilities
operator|.
name|add
argument_list|(
name|_elem1067
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setProcessorCapabilitiesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// PROCESSOR_IDENTIFIER
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|processorIdentifier
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setProcessorIdentifierIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|CreateTableRequest
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|table
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|table
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|envContext
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetEnvContext
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ENV_CONTEXT_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|envContext
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|primaryKeys
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetPrimaryKeys
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PRIMARY_KEYS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|primaryKeys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SQLPrimaryKey
name|_iter1069
range|:
name|struct
operator|.
name|primaryKeys
control|)
block|{
name|_iter1069
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|foreignKeys
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetForeignKeys
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|FOREIGN_KEYS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|foreignKeys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SQLForeignKey
name|_iter1070
range|:
name|struct
operator|.
name|foreignKeys
control|)
block|{
name|_iter1070
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|uniqueConstraints
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetUniqueConstraints
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|UNIQUE_CONSTRAINTS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|uniqueConstraints
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SQLUniqueConstraint
name|_iter1071
range|:
name|struct
operator|.
name|uniqueConstraints
control|)
block|{
name|_iter1071
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|notNullConstraints
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetNotNullConstraints
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NOT_NULL_CONSTRAINTS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|notNullConstraints
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SQLNotNullConstraint
name|_iter1072
range|:
name|struct
operator|.
name|notNullConstraints
control|)
block|{
name|_iter1072
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|defaultConstraints
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetDefaultConstraints
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DEFAULT_CONSTRAINTS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|defaultConstraints
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SQLDefaultConstraint
name|_iter1073
range|:
name|struct
operator|.
name|defaultConstraints
control|)
block|{
name|_iter1073
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|checkConstraints
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetCheckConstraints
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|CHECK_CONSTRAINTS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|checkConstraints
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SQLCheckConstraint
name|_iter1074
range|:
name|struct
operator|.
name|checkConstraints
control|)
block|{
name|_iter1074
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|processorCapabilities
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetProcessorCapabilities
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PROCESSOR_CAPABILITIES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|processorCapabilities
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter1075
range|:
name|struct
operator|.
name|processorCapabilities
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter1075
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|processorIdentifier
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetProcessorIdentifier
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PROCESSOR_IDENTIFIER_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|processorIdentifier
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CreateTableRequestTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|CreateTableRequestTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|CreateTableRequestTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CreateTableRequestTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|CreateTableRequest
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|CreateTableRequest
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|struct
operator|.
name|table
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetEnvContext
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetPrimaryKeys
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetForeignKeys
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetUniqueConstraints
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetNotNullConstraints
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDefaultConstraints
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCheckConstraints
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetProcessorCapabilities
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetProcessorIdentifier
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|9
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetEnvContext
argument_list|()
condition|)
block|{
name|struct
operator|.
name|envContext
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetPrimaryKeys
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|primaryKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SQLPrimaryKey
name|_iter1076
range|:
name|struct
operator|.
name|primaryKeys
control|)
block|{
name|_iter1076
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetForeignKeys
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|foreignKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SQLForeignKey
name|_iter1077
range|:
name|struct
operator|.
name|foreignKeys
control|)
block|{
name|_iter1077
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetUniqueConstraints
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|uniqueConstraints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SQLUniqueConstraint
name|_iter1078
range|:
name|struct
operator|.
name|uniqueConstraints
control|)
block|{
name|_iter1078
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetNotNullConstraints
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|notNullConstraints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SQLNotNullConstraint
name|_iter1079
range|:
name|struct
operator|.
name|notNullConstraints
control|)
block|{
name|_iter1079
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDefaultConstraints
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|defaultConstraints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SQLDefaultConstraint
name|_iter1080
range|:
name|struct
operator|.
name|defaultConstraints
control|)
block|{
name|_iter1080
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCheckConstraints
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|checkConstraints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SQLCheckConstraint
name|_iter1081
range|:
name|struct
operator|.
name|checkConstraints
control|)
block|{
name|_iter1081
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetProcessorCapabilities
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|processorCapabilities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter1082
range|:
name|struct
operator|.
name|processorCapabilities
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter1082
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetProcessorIdentifier
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|processorIdentifier
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|CreateTableRequest
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|struct
operator|.
name|table
operator|=
operator|new
name|Table
argument_list|()
expr_stmt|;
name|struct
operator|.
name|table
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setTableIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|envContext
operator|=
operator|new
name|EnvironmentContext
argument_list|()
expr_stmt|;
name|struct
operator|.
name|envContext
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setEnvContextIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1083
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|primaryKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLPrimaryKey
argument_list|>
argument_list|(
name|_list1083
operator|.
name|size
argument_list|)
expr_stmt|;
name|SQLPrimaryKey
name|_elem1084
decl_stmt|;
for|for
control|(
name|int
name|_i1085
init|=
literal|0
init|;
name|_i1085
operator|<
name|_list1083
operator|.
name|size
condition|;
operator|++
name|_i1085
control|)
block|{
name|_elem1084
operator|=
operator|new
name|SQLPrimaryKey
argument_list|()
expr_stmt|;
name|_elem1084
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|primaryKeys
operator|.
name|add
argument_list|(
name|_elem1084
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setPrimaryKeysIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1086
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|foreignKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLForeignKey
argument_list|>
argument_list|(
name|_list1086
operator|.
name|size
argument_list|)
expr_stmt|;
name|SQLForeignKey
name|_elem1087
decl_stmt|;
for|for
control|(
name|int
name|_i1088
init|=
literal|0
init|;
name|_i1088
operator|<
name|_list1086
operator|.
name|size
condition|;
operator|++
name|_i1088
control|)
block|{
name|_elem1087
operator|=
operator|new
name|SQLForeignKey
argument_list|()
expr_stmt|;
name|_elem1087
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|foreignKeys
operator|.
name|add
argument_list|(
name|_elem1087
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setForeignKeysIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1089
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|uniqueConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLUniqueConstraint
argument_list|>
argument_list|(
name|_list1089
operator|.
name|size
argument_list|)
expr_stmt|;
name|SQLUniqueConstraint
name|_elem1090
decl_stmt|;
for|for
control|(
name|int
name|_i1091
init|=
literal|0
init|;
name|_i1091
operator|<
name|_list1089
operator|.
name|size
condition|;
operator|++
name|_i1091
control|)
block|{
name|_elem1090
operator|=
operator|new
name|SQLUniqueConstraint
argument_list|()
expr_stmt|;
name|_elem1090
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|uniqueConstraints
operator|.
name|add
argument_list|(
name|_elem1090
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setUniqueConstraintsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1092
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|notNullConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLNotNullConstraint
argument_list|>
argument_list|(
name|_list1092
operator|.
name|size
argument_list|)
expr_stmt|;
name|SQLNotNullConstraint
name|_elem1093
decl_stmt|;
for|for
control|(
name|int
name|_i1094
init|=
literal|0
init|;
name|_i1094
operator|<
name|_list1092
operator|.
name|size
condition|;
operator|++
name|_i1094
control|)
block|{
name|_elem1093
operator|=
operator|new
name|SQLNotNullConstraint
argument_list|()
expr_stmt|;
name|_elem1093
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|notNullConstraints
operator|.
name|add
argument_list|(
name|_elem1093
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setNotNullConstraintsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|5
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1095
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|defaultConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLDefaultConstraint
argument_list|>
argument_list|(
name|_list1095
operator|.
name|size
argument_list|)
expr_stmt|;
name|SQLDefaultConstraint
name|_elem1096
decl_stmt|;
for|for
control|(
name|int
name|_i1097
init|=
literal|0
init|;
name|_i1097
operator|<
name|_list1095
operator|.
name|size
condition|;
operator|++
name|_i1097
control|)
block|{
name|_elem1096
operator|=
operator|new
name|SQLDefaultConstraint
argument_list|()
expr_stmt|;
name|_elem1096
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|defaultConstraints
operator|.
name|add
argument_list|(
name|_elem1096
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setDefaultConstraintsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|6
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1098
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|checkConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|SQLCheckConstraint
argument_list|>
argument_list|(
name|_list1098
operator|.
name|size
argument_list|)
expr_stmt|;
name|SQLCheckConstraint
name|_elem1099
decl_stmt|;
for|for
control|(
name|int
name|_i1100
init|=
literal|0
init|;
name|_i1100
operator|<
name|_list1098
operator|.
name|size
condition|;
operator|++
name|_i1100
control|)
block|{
name|_elem1099
operator|=
operator|new
name|SQLCheckConstraint
argument_list|()
expr_stmt|;
name|_elem1099
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|checkConstraints
operator|.
name|add
argument_list|(
name|_elem1099
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setCheckConstraintsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|7
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list1101
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|processorCapabilities
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list1101
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_elem1102
decl_stmt|;
for|for
control|(
name|int
name|_i1103
init|=
literal|0
init|;
name|_i1103
operator|<
name|_list1101
operator|.
name|size
condition|;
operator|++
name|_i1103
control|)
block|{
name|_elem1102
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|processorCapabilities
operator|.
name|add
argument_list|(
name|_elem1102
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setProcessorCapabilitiesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|8
argument_list|)
condition|)
block|{
name|struct
operator|.
name|processorIdentifier
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setProcessorIdentifierIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

