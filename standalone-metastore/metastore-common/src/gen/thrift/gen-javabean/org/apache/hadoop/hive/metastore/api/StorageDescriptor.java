begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.9.3)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"rawtypes"
block|,
literal|"serial"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Generated
argument_list|(
name|value
operator|=
literal|"Autogenerated by Thrift Compiler (0.9.3)"
argument_list|)
annotation|@
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|StorageDescriptor
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|StorageDescriptor
argument_list|,
name|StorageDescriptor
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|StorageDescriptor
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"StorageDescriptor"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"cols"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|LOCATION_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"location"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|INPUT_FORMAT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"inputFormat"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|OUTPUT_FORMAT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"outputFormat"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COMPRESSED_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"compressed"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|NUM_BUCKETS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"numBuckets"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SERDE_INFO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"serdeInfo"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|BUCKET_COLS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"bucketCols"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SORT_COLS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"sortCols"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|9
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|PARAMETERS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"parameters"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SKEWED_INFO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"skewedInfo"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|11
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|STORED_AS_SUB_DIRECTORIES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"storedAsSubDirectories"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|12
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|StorageDescriptorStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|StorageDescriptorTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
decl_stmt|;
comment|// required
specifier|private
name|String
name|location
decl_stmt|;
comment|// required
specifier|private
name|String
name|inputFormat
decl_stmt|;
comment|// required
specifier|private
name|String
name|outputFormat
decl_stmt|;
comment|// required
specifier|private
name|boolean
name|compressed
decl_stmt|;
comment|// required
specifier|private
name|int
name|numBuckets
decl_stmt|;
comment|// required
specifier|private
name|SerDeInfo
name|serdeInfo
decl_stmt|;
comment|// required
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
decl_stmt|;
comment|// required
specifier|private
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
decl_stmt|;
comment|// required
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
comment|// required
specifier|private
name|SkewedInfo
name|skewedInfo
decl_stmt|;
comment|// optional
specifier|private
name|boolean
name|storedAsSubDirectories
decl_stmt|;
comment|// optional
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|COLS
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"cols"
argument_list|)
block|,
name|LOCATION
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"location"
argument_list|)
block|,
name|INPUT_FORMAT
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"inputFormat"
argument_list|)
block|,
name|OUTPUT_FORMAT
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"outputFormat"
argument_list|)
block|,
name|COMPRESSED
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"compressed"
argument_list|)
block|,
name|NUM_BUCKETS
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"numBuckets"
argument_list|)
block|,
name|SERDE_INFO
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"serdeInfo"
argument_list|)
block|,
name|BUCKET_COLS
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|,
literal|"bucketCols"
argument_list|)
block|,
name|SORT_COLS
argument_list|(
operator|(
name|short
operator|)
literal|9
argument_list|,
literal|"sortCols"
argument_list|)
block|,
name|PARAMETERS
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|,
literal|"parameters"
argument_list|)
block|,
name|SKEWED_INFO
argument_list|(
operator|(
name|short
operator|)
literal|11
argument_list|,
literal|"skewedInfo"
argument_list|)
block|,
name|STORED_AS_SUB_DIRECTORIES
argument_list|(
operator|(
name|short
operator|)
literal|12
argument_list|,
literal|"storedAsSubDirectories"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// COLS
return|return
name|COLS
return|;
case|case
literal|2
case|:
comment|// LOCATION
return|return
name|LOCATION
return|;
case|case
literal|3
case|:
comment|// INPUT_FORMAT
return|return
name|INPUT_FORMAT
return|;
case|case
literal|4
case|:
comment|// OUTPUT_FORMAT
return|return
name|OUTPUT_FORMAT
return|;
case|case
literal|5
case|:
comment|// COMPRESSED
return|return
name|COMPRESSED
return|;
case|case
literal|6
case|:
comment|// NUM_BUCKETS
return|return
name|NUM_BUCKETS
return|;
case|case
literal|7
case|:
comment|// SERDE_INFO
return|return
name|SERDE_INFO
return|;
case|case
literal|8
case|:
comment|// BUCKET_COLS
return|return
name|BUCKET_COLS
return|;
case|case
literal|9
case|:
comment|// SORT_COLS
return|return
name|SORT_COLS
return|;
case|case
literal|10
case|:
comment|// PARAMETERS
return|return
name|PARAMETERS
return|;
case|case
literal|11
case|:
comment|// SKEWED_INFO
return|return
name|SKEWED_INFO
return|;
case|case
literal|12
case|:
comment|// STORED_AS_SUB_DIRECTORIES
return|return
name|STORED_AS_SUB_DIRECTORIES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__COMPRESSED_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__NUMBUCKETS_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__STOREDASSUBDIRECTORIES_ISSET_ID
init|=
literal|2
decl_stmt|;
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|_Fields
name|optionals
index|[]
init|=
block|{
name|_Fields
operator|.
name|SKEWED_INFO
block|,
name|_Fields
operator|.
name|STORED_AS_SUB_DIRECTORIES
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"cols"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|FieldSchema
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|LOCATION
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"location"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|INPUT_FORMAT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"inputFormat"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|OUTPUT_FORMAT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"outputFormat"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COMPRESSED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"compressed"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NUM_BUCKETS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"numBuckets"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SERDE_INFO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"serdeInfo"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|SerDeInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|BUCKET_COLS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"bucketCols"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SORT_COLS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"sortCols"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|Order
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PARAMETERS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"parameters"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SKEWED_INFO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"skewedInfo"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|SkewedInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|STORED_AS_SUB_DIRECTORIES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"storedAsSubDirectories"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|StorageDescriptor
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StorageDescriptor
parameter_list|()
block|{   }
specifier|public
name|StorageDescriptor
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|String
name|location
parameter_list|,
name|String
name|inputFormat
parameter_list|,
name|String
name|outputFormat
parameter_list|,
name|boolean
name|compressed
parameter_list|,
name|int
name|numBuckets
parameter_list|,
name|SerDeInfo
name|serdeInfo
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|,
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|cols
operator|=
name|cols
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputFormat
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|inputFormat
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputFormat
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|outputFormat
argument_list|)
expr_stmt|;
name|this
operator|.
name|compressed
operator|=
name|compressed
expr_stmt|;
name|setCompressedIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|numBuckets
operator|=
name|numBuckets
expr_stmt|;
name|setNumBucketsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|serdeInfo
operator|=
name|serdeInfo
expr_stmt|;
name|this
operator|.
name|bucketCols
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|bucketCols
argument_list|)
expr_stmt|;
name|this
operator|.
name|sortCols
operator|=
name|sortCols
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|StorageDescriptor
parameter_list|(
name|StorageDescriptor
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetCols
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|__this__cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|other
operator|.
name|cols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|other_element
range|:
name|other
operator|.
name|cols
control|)
block|{
name|__this__cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|cols
operator|=
name|__this__cols
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetLocation
argument_list|()
condition|)
block|{
name|this
operator|.
name|location
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|other
operator|.
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetInputFormat
argument_list|()
condition|)
block|{
name|this
operator|.
name|inputFormat
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|other
operator|.
name|inputFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetOutputFormat
argument_list|()
condition|)
block|{
name|this
operator|.
name|outputFormat
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|other
operator|.
name|outputFormat
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|compressed
operator|=
name|other
operator|.
name|compressed
expr_stmt|;
name|this
operator|.
name|numBuckets
operator|=
name|other
operator|.
name|numBuckets
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetSerdeInfo
argument_list|()
condition|)
block|{
name|this
operator|.
name|serdeInfo
operator|=
operator|new
name|SerDeInfo
argument_list|(
name|other
operator|.
name|serdeInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetBucketCols
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__bucketCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|other
operator|.
name|bucketCols
argument_list|)
decl_stmt|;
name|this
operator|.
name|bucketCols
operator|=
name|__this__bucketCols
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetSortCols
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Order
argument_list|>
name|__this__sortCols
init|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|(
name|other
operator|.
name|sortCols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Order
name|other_element
range|:
name|other
operator|.
name|sortCols
control|)
block|{
name|__this__sortCols
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|sortCols
operator|=
name|__this__sortCols
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetParameters
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|__this__parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|other
operator|.
name|parameters
argument_list|)
decl_stmt|;
name|this
operator|.
name|parameters
operator|=
name|__this__parameters
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetSkewedInfo
argument_list|()
condition|)
block|{
name|this
operator|.
name|skewedInfo
operator|=
operator|new
name|SkewedInfo
argument_list|(
name|other
operator|.
name|skewedInfo
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|storedAsSubDirectories
operator|=
name|other
operator|.
name|storedAsSubDirectories
expr_stmt|;
block|}
specifier|public
name|StorageDescriptor
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|StorageDescriptor
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|cols
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|location
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|inputFormat
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|outputFormat
operator|=
literal|null
expr_stmt|;
name|setCompressedIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|compressed
operator|=
literal|false
expr_stmt|;
name|setNumBucketsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|numBuckets
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|serdeInfo
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|bucketCols
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|sortCols
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|skewedInfo
operator|=
literal|null
expr_stmt|;
name|setStoredAsSubDirectoriesIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|storedAsSubDirectories
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|int
name|getColsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|cols
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|cols
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|getColsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|cols
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|cols
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToCols
parameter_list|(
name|FieldSchema
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|cols
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|cols
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|cols
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|cols
return|;
block|}
specifier|public
name|void
name|setCols
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|)
block|{
name|this
operator|.
name|cols
operator|=
name|cols
expr_stmt|;
block|}
specifier|public
name|void
name|unsetCols
parameter_list|()
block|{
name|this
operator|.
name|cols
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field cols is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|cols
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|cols
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
return|;
block|}
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLocation
parameter_list|()
block|{
name|this
operator|.
name|location
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field location is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setLocationIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|location
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getInputFormat
parameter_list|()
block|{
return|return
name|this
operator|.
name|inputFormat
return|;
block|}
specifier|public
name|void
name|setInputFormat
parameter_list|(
name|String
name|inputFormat
parameter_list|)
block|{
name|this
operator|.
name|inputFormat
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|inputFormat
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetInputFormat
parameter_list|()
block|{
name|this
operator|.
name|inputFormat
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field inputFormat is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetInputFormat
parameter_list|()
block|{
return|return
name|this
operator|.
name|inputFormat
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setInputFormatIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|inputFormat
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getOutputFormat
parameter_list|()
block|{
return|return
name|this
operator|.
name|outputFormat
return|;
block|}
specifier|public
name|void
name|setOutputFormat
parameter_list|(
name|String
name|outputFormat
parameter_list|)
block|{
name|this
operator|.
name|outputFormat
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|outputFormat
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetOutputFormat
parameter_list|()
block|{
name|this
operator|.
name|outputFormat
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field outputFormat is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetOutputFormat
parameter_list|()
block|{
return|return
name|this
operator|.
name|outputFormat
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setOutputFormatIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|outputFormat
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isCompressed
parameter_list|()
block|{
return|return
name|this
operator|.
name|compressed
return|;
block|}
specifier|public
name|void
name|setCompressed
parameter_list|(
name|boolean
name|compressed
parameter_list|)
block|{
name|this
operator|.
name|compressed
operator|=
name|compressed
expr_stmt|;
name|setCompressedIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetCompressed
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__COMPRESSED_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field compressed is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCompressed
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__COMPRESSED_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCompressedIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__COMPRESSED_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNumBuckets
parameter_list|()
block|{
return|return
name|this
operator|.
name|numBuckets
return|;
block|}
specifier|public
name|void
name|setNumBuckets
parameter_list|(
name|int
name|numBuckets
parameter_list|)
block|{
name|this
operator|.
name|numBuckets
operator|=
name|numBuckets
expr_stmt|;
name|setNumBucketsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetNumBuckets
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__NUMBUCKETS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field numBuckets is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNumBuckets
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__NUMBUCKETS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNumBucketsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__NUMBUCKETS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SerDeInfo
name|getSerdeInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|serdeInfo
return|;
block|}
specifier|public
name|void
name|setSerdeInfo
parameter_list|(
name|SerDeInfo
name|serdeInfo
parameter_list|)
block|{
name|this
operator|.
name|serdeInfo
operator|=
name|serdeInfo
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSerdeInfo
parameter_list|()
block|{
name|this
operator|.
name|serdeInfo
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field serdeInfo is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSerdeInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|serdeInfo
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSerdeInfoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|serdeInfo
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getBucketColsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|bucketCols
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|bucketCols
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getBucketColsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|bucketCols
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|bucketCols
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToBucketCols
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|bucketCols
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|bucketCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|bucketCols
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBucketCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|bucketCols
return|;
block|}
specifier|public
name|void
name|setBucketCols
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|)
block|{
name|this
operator|.
name|bucketCols
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|bucketCols
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetBucketCols
parameter_list|()
block|{
name|this
operator|.
name|bucketCols
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field bucketCols is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetBucketCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|bucketCols
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setBucketColsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|bucketCols
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getSortColsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|sortCols
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|sortCols
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Order
argument_list|>
name|getSortColsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|sortCols
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|sortCols
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSortCols
parameter_list|(
name|Order
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|sortCols
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|sortCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|sortCols
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Order
argument_list|>
name|getSortCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|sortCols
return|;
block|}
specifier|public
name|void
name|setSortCols
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|)
block|{
name|this
operator|.
name|sortCols
operator|=
name|sortCols
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSortCols
parameter_list|()
block|{
name|this
operator|.
name|sortCols
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field sortCols is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSortCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|sortCols
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSortColsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|sortCols
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getParametersSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|parameters
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|parameters
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToParameters
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|parameters
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|parameters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|parameters
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|key
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|parameters
return|;
block|}
specifier|public
name|void
name|setParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetParameters
parameter_list|()
block|{
name|this
operator|.
name|parameters
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field parameters is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|parameters
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setParametersIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|parameters
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|SkewedInfo
name|getSkewedInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|skewedInfo
return|;
block|}
specifier|public
name|void
name|setSkewedInfo
parameter_list|(
name|SkewedInfo
name|skewedInfo
parameter_list|)
block|{
name|this
operator|.
name|skewedInfo
operator|=
name|skewedInfo
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSkewedInfo
parameter_list|()
block|{
name|this
operator|.
name|skewedInfo
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field skewedInfo is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSkewedInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|skewedInfo
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSkewedInfoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|skewedInfo
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isStoredAsSubDirectories
parameter_list|()
block|{
return|return
name|this
operator|.
name|storedAsSubDirectories
return|;
block|}
specifier|public
name|void
name|setStoredAsSubDirectories
parameter_list|(
name|boolean
name|storedAsSubDirectories
parameter_list|)
block|{
name|this
operator|.
name|storedAsSubDirectories
operator|=
name|storedAsSubDirectories
expr_stmt|;
name|setStoredAsSubDirectoriesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetStoredAsSubDirectories
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__STOREDASSUBDIRECTORIES_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field storedAsSubDirectories is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStoredAsSubDirectories
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__STOREDASSUBDIRECTORIES_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setStoredAsSubDirectoriesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__STOREDASSUBDIRECTORIES_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|COLS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCols
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCols
argument_list|(
operator|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LOCATION
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLocation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLocation
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INPUT_FORMAT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetInputFormat
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setInputFormat
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OUTPUT_FORMAT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetOutputFormat
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setOutputFormat
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COMPRESSED
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCompressed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCompressed
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NUM_BUCKETS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNumBuckets
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNumBuckets
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SERDE_INFO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSerdeInfo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSerdeInfo
argument_list|(
operator|(
name|SerDeInfo
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BUCKET_COLS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBucketCols
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBucketCols
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SORT_COLS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSortCols
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSortCols
argument_list|(
operator|(
name|List
argument_list|<
name|Order
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARAMETERS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetParameters
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setParameters
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SKEWED_INFO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSkewedInfo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSkewedInfo
argument_list|(
operator|(
name|SkewedInfo
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STORED_AS_SUB_DIRECTORIES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStoredAsSubDirectories
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStoredAsSubDirectories
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|COLS
case|:
return|return
name|getCols
argument_list|()
return|;
case|case
name|LOCATION
case|:
return|return
name|getLocation
argument_list|()
return|;
case|case
name|INPUT_FORMAT
case|:
return|return
name|getInputFormat
argument_list|()
return|;
case|case
name|OUTPUT_FORMAT
case|:
return|return
name|getOutputFormat
argument_list|()
return|;
case|case
name|COMPRESSED
case|:
return|return
name|isCompressed
argument_list|()
return|;
case|case
name|NUM_BUCKETS
case|:
return|return
name|getNumBuckets
argument_list|()
return|;
case|case
name|SERDE_INFO
case|:
return|return
name|getSerdeInfo
argument_list|()
return|;
case|case
name|BUCKET_COLS
case|:
return|return
name|getBucketCols
argument_list|()
return|;
case|case
name|SORT_COLS
case|:
return|return
name|getSortCols
argument_list|()
return|;
case|case
name|PARAMETERS
case|:
return|return
name|getParameters
argument_list|()
return|;
case|case
name|SKEWED_INFO
case|:
return|return
name|getSkewedInfo
argument_list|()
return|;
case|case
name|STORED_AS_SUB_DIRECTORIES
case|:
return|return
name|isStoredAsSubDirectories
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|COLS
case|:
return|return
name|isSetCols
argument_list|()
return|;
case|case
name|LOCATION
case|:
return|return
name|isSetLocation
argument_list|()
return|;
case|case
name|INPUT_FORMAT
case|:
return|return
name|isSetInputFormat
argument_list|()
return|;
case|case
name|OUTPUT_FORMAT
case|:
return|return
name|isSetOutputFormat
argument_list|()
return|;
case|case
name|COMPRESSED
case|:
return|return
name|isSetCompressed
argument_list|()
return|;
case|case
name|NUM_BUCKETS
case|:
return|return
name|isSetNumBuckets
argument_list|()
return|;
case|case
name|SERDE_INFO
case|:
return|return
name|isSetSerdeInfo
argument_list|()
return|;
case|case
name|BUCKET_COLS
case|:
return|return
name|isSetBucketCols
argument_list|()
return|;
case|case
name|SORT_COLS
case|:
return|return
name|isSetSortCols
argument_list|()
return|;
case|case
name|PARAMETERS
case|:
return|return
name|isSetParameters
argument_list|()
return|;
case|case
name|SKEWED_INFO
case|:
return|return
name|isSetSkewedInfo
argument_list|()
return|;
case|case
name|STORED_AS_SUB_DIRECTORIES
case|:
return|return
name|isSetStoredAsSubDirectories
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|StorageDescriptor
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|StorageDescriptor
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|StorageDescriptor
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_cols
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCols
argument_list|()
decl_stmt|;
name|boolean
name|that_present_cols
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_cols
operator|||
name|that_present_cols
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_cols
operator|&&
name|that_present_cols
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|cols
operator|.
name|equals
argument_list|(
name|that
operator|.
name|cols
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_location
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetLocation
argument_list|()
decl_stmt|;
name|boolean
name|that_present_location
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_location
operator|||
name|that_present_location
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_location
operator|&&
name|that_present_location
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|location
operator|.
name|equals
argument_list|(
name|that
operator|.
name|location
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_inputFormat
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetInputFormat
argument_list|()
decl_stmt|;
name|boolean
name|that_present_inputFormat
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetInputFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_inputFormat
operator|||
name|that_present_inputFormat
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_inputFormat
operator|&&
name|that_present_inputFormat
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|inputFormat
operator|.
name|equals
argument_list|(
name|that
operator|.
name|inputFormat
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_outputFormat
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetOutputFormat
argument_list|()
decl_stmt|;
name|boolean
name|that_present_outputFormat
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetOutputFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_outputFormat
operator|||
name|that_present_outputFormat
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_outputFormat
operator|&&
name|that_present_outputFormat
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|outputFormat
operator|.
name|equals
argument_list|(
name|that
operator|.
name|outputFormat
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_compressed
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_compressed
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_compressed
operator|||
name|that_present_compressed
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_compressed
operator|&&
name|that_present_compressed
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|compressed
operator|!=
name|that
operator|.
name|compressed
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_numBuckets
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_numBuckets
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_numBuckets
operator|||
name|that_present_numBuckets
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_numBuckets
operator|&&
name|that_present_numBuckets
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|numBuckets
operator|!=
name|that
operator|.
name|numBuckets
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_serdeInfo
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSerdeInfo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_serdeInfo
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSerdeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_serdeInfo
operator|||
name|that_present_serdeInfo
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_serdeInfo
operator|&&
name|that_present_serdeInfo
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|serdeInfo
operator|.
name|equals
argument_list|(
name|that
operator|.
name|serdeInfo
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_bucketCols
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetBucketCols
argument_list|()
decl_stmt|;
name|boolean
name|that_present_bucketCols
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetBucketCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_bucketCols
operator|||
name|that_present_bucketCols
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_bucketCols
operator|&&
name|that_present_bucketCols
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|bucketCols
operator|.
name|equals
argument_list|(
name|that
operator|.
name|bucketCols
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_sortCols
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSortCols
argument_list|()
decl_stmt|;
name|boolean
name|that_present_sortCols
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSortCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_sortCols
operator|||
name|that_present_sortCols
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_sortCols
operator|&&
name|that_present_sortCols
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|sortCols
operator|.
name|equals
argument_list|(
name|that
operator|.
name|sortCols
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_parameters
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetParameters
argument_list|()
decl_stmt|;
name|boolean
name|that_present_parameters
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_parameters
operator|||
name|that_present_parameters
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_parameters
operator|&&
name|that_present_parameters
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|parameters
operator|.
name|equals
argument_list|(
name|that
operator|.
name|parameters
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_skewedInfo
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSkewedInfo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_skewedInfo
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSkewedInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_skewedInfo
operator|||
name|that_present_skewedInfo
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_skewedInfo
operator|&&
name|that_present_skewedInfo
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|skewedInfo
operator|.
name|equals
argument_list|(
name|that
operator|.
name|skewedInfo
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_storedAsSubDirectories
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStoredAsSubDirectories
argument_list|()
decl_stmt|;
name|boolean
name|that_present_storedAsSubDirectories
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStoredAsSubDirectories
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_storedAsSubDirectories
operator|||
name|that_present_storedAsSubDirectories
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_storedAsSubDirectories
operator|&&
name|that_present_storedAsSubDirectories
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|storedAsSubDirectories
operator|!=
name|that
operator|.
name|storedAsSubDirectories
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|present_cols
init|=
literal|true
operator|&&
operator|(
name|isSetCols
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_cols
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_cols
condition|)
name|list
operator|.
name|add
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|boolean
name|present_location
init|=
literal|true
operator|&&
operator|(
name|isSetLocation
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_location
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_location
condition|)
name|list
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|boolean
name|present_inputFormat
init|=
literal|true
operator|&&
operator|(
name|isSetInputFormat
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_inputFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_inputFormat
condition|)
name|list
operator|.
name|add
argument_list|(
name|inputFormat
argument_list|)
expr_stmt|;
name|boolean
name|present_outputFormat
init|=
literal|true
operator|&&
operator|(
name|isSetOutputFormat
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_outputFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_outputFormat
condition|)
name|list
operator|.
name|add
argument_list|(
name|outputFormat
argument_list|)
expr_stmt|;
name|boolean
name|present_compressed
init|=
literal|true
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_compressed
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_compressed
condition|)
name|list
operator|.
name|add
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
name|boolean
name|present_numBuckets
init|=
literal|true
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_numBuckets
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_numBuckets
condition|)
name|list
operator|.
name|add
argument_list|(
name|numBuckets
argument_list|)
expr_stmt|;
name|boolean
name|present_serdeInfo
init|=
literal|true
operator|&&
operator|(
name|isSetSerdeInfo
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_serdeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_serdeInfo
condition|)
name|list
operator|.
name|add
argument_list|(
name|serdeInfo
argument_list|)
expr_stmt|;
name|boolean
name|present_bucketCols
init|=
literal|true
operator|&&
operator|(
name|isSetBucketCols
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_bucketCols
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_bucketCols
condition|)
name|list
operator|.
name|add
argument_list|(
name|bucketCols
argument_list|)
expr_stmt|;
name|boolean
name|present_sortCols
init|=
literal|true
operator|&&
operator|(
name|isSetSortCols
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_sortCols
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_sortCols
condition|)
name|list
operator|.
name|add
argument_list|(
name|sortCols
argument_list|)
expr_stmt|;
name|boolean
name|present_parameters
init|=
literal|true
operator|&&
operator|(
name|isSetParameters
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_parameters
condition|)
name|list
operator|.
name|add
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|boolean
name|present_skewedInfo
init|=
literal|true
operator|&&
operator|(
name|isSetSkewedInfo
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_skewedInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_skewedInfo
condition|)
name|list
operator|.
name|add
argument_list|(
name|skewedInfo
argument_list|)
expr_stmt|;
name|boolean
name|present_storedAsSubDirectories
init|=
literal|true
operator|&&
operator|(
name|isSetStoredAsSubDirectories
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_storedAsSubDirectories
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_storedAsSubDirectories
condition|)
name|list
operator|.
name|add
argument_list|(
name|storedAsSubDirectories
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|StorageDescriptor
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCols
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCols
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|cols
argument_list|,
name|other
operator|.
name|cols
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetLocation
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetLocation
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|location
argument_list|,
name|other
operator|.
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetInputFormat
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetInputFormat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetInputFormat
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|inputFormat
argument_list|,
name|other
operator|.
name|inputFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetOutputFormat
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetOutputFormat
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|outputFormat
argument_list|,
name|other
operator|.
name|outputFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCompressed
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCompressed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCompressed
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|compressed
argument_list|,
name|other
operator|.
name|compressed
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNumBuckets
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNumBuckets
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|numBuckets
argument_list|,
name|other
operator|.
name|numBuckets
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSerdeInfo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetSerdeInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSerdeInfo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|serdeInfo
argument_list|,
name|other
operator|.
name|serdeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBucketCols
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetBucketCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetBucketCols
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|bucketCols
argument_list|,
name|other
operator|.
name|bucketCols
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSortCols
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetSortCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSortCols
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|sortCols
argument_list|,
name|other
operator|.
name|sortCols
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetParameters
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetParameters
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetParameters
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|parameters
argument_list|,
name|other
operator|.
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSkewedInfo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetSkewedInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSkewedInfo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|skewedInfo
argument_list|,
name|other
operator|.
name|skewedInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStoredAsSubDirectories
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStoredAsSubDirectories
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|storedAsSubDirectories
argument_list|,
name|other
operator|.
name|storedAsSubDirectories
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"StorageDescriptor("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"cols:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cols
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|cols
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"location:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|location
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|location
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inputFormat:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|inputFormat
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|inputFormat
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"outputFormat:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|outputFormat
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|outputFormat
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"compressed:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|compressed
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"numBuckets:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|numBuckets
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"serdeInfo:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|serdeInfo
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|serdeInfo
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"bucketCols:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|bucketCols
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|bucketCols
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"sortCols:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|sortCols
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|sortCols
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"parameters:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|parameters
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|parameters
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetSkewedInfo
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"skewedInfo:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|skewedInfo
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|skewedInfo
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetStoredAsSubDirectories
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"storedAsSubDirectories:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|storedAsSubDirectories
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
if|if
condition|(
name|serdeInfo
operator|!=
literal|null
condition|)
block|{
name|serdeInfo
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|skewedInfo
operator|!=
literal|null
condition|)
block|{
name|skewedInfo
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StorageDescriptorStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|StorageDescriptorStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|StorageDescriptorStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StorageDescriptorStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|StorageDescriptor
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|StorageDescriptor
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// COLS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list172
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|cols
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|_list172
operator|.
name|size
argument_list|)
expr_stmt|;
name|FieldSchema
name|_elem173
decl_stmt|;
for|for
control|(
name|int
name|_i174
init|=
literal|0
init|;
name|_i174
operator|<
name|_list172
operator|.
name|size
condition|;
operator|++
name|_i174
control|)
block|{
name|_elem173
operator|=
operator|new
name|FieldSchema
argument_list|()
expr_stmt|;
name|_elem173
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|cols
operator|.
name|add
argument_list|(
name|_elem173
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// LOCATION
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|location
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|iprot
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setLocationIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// INPUT_FORMAT
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|inputFormat
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|iprot
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setInputFormatIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// OUTPUT_FORMAT
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|outputFormat
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|iprot
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setOutputFormatIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// COMPRESSED
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|compressed
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCompressedIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// NUM_BUCKETS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|numBuckets
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNumBucketsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// SERDE_INFO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|serdeInfo
operator|=
operator|new
name|SerDeInfo
argument_list|()
expr_stmt|;
name|struct
operator|.
name|serdeInfo
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setSerdeInfoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// BUCKET_COLS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list175
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|bucketCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list175
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_elem176
decl_stmt|;
for|for
control|(
name|int
name|_i177
init|=
literal|0
init|;
name|_i177
operator|<
name|_list175
operator|.
name|size
condition|;
operator|++
name|_i177
control|)
block|{
name|_elem176
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|bucketCols
operator|.
name|add
argument_list|(
name|_elem176
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|bucketCols
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|struct
operator|.
name|bucketCols
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setBucketColsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// SORT_COLS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list178
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|sortCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|(
name|_list178
operator|.
name|size
argument_list|)
expr_stmt|;
name|Order
name|_elem179
decl_stmt|;
for|for
control|(
name|int
name|_i180
init|=
literal|0
init|;
name|_i180
operator|<
name|_list178
operator|.
name|size
condition|;
operator|++
name|_i180
control|)
block|{
name|_elem179
operator|=
operator|new
name|Order
argument_list|()
expr_stmt|;
name|_elem179
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|sortCols
operator|.
name|add
argument_list|(
name|_elem179
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSortColsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// PARAMETERS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map181
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|parameters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map181
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_key182
decl_stmt|;
name|String
name|_val183
decl_stmt|;
for|for
control|(
name|int
name|_i184
init|=
literal|0
init|;
name|_i184
operator|<
name|_map181
operator|.
name|size
condition|;
operator|++
name|_i184
control|)
block|{
name|_key182
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val183
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|parameters
operator|.
name|put
argument_list|(
name|_key182
argument_list|,
name|_val183
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|parameters
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|struct
operator|.
name|parameters
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setParametersIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
comment|// SKEWED_INFO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|skewedInfo
operator|=
operator|new
name|SkewedInfo
argument_list|()
expr_stmt|;
name|struct
operator|.
name|skewedInfo
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setSkewedInfoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
comment|// STORED_AS_SUB_DIRECTORIES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|storedAsSubDirectories
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStoredAsSubDirectoriesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|StorageDescriptor
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|cols
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|cols
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|_iter185
range|:
name|struct
operator|.
name|cols
control|)
block|{
name|_iter185
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|location
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LOCATION_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|location
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|inputFormat
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|INPUT_FORMAT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|inputFormat
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|outputFormat
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|OUTPUT_FORMAT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|outputFormat
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COMPRESSED_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|compressed
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NUM_BUCKETS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|numBuckets
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|serdeInfo
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SERDE_INFO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|serdeInfo
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|bucketCols
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BUCKET_COLS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|bucketCols
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter186
range|:
name|struct
operator|.
name|bucketCols
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter186
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|sortCols
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SORT_COLS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|sortCols
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Order
name|_iter187
range|:
name|struct
operator|.
name|sortCols
control|)
block|{
name|_iter187
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|parameters
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PARAMETERS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|_iter188
range|:
name|struct
operator|.
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter188
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter188
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|skewedInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetSkewedInfo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SKEWED_INFO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|skewedInfo
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStoredAsSubDirectories
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STORED_AS_SUB_DIRECTORIES_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|storedAsSubDirectories
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StorageDescriptorTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|StorageDescriptorTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|StorageDescriptorTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StorageDescriptorTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|StorageDescriptor
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|StorageDescriptor
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetCols
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetLocation
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetInputFormat
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetOutputFormat
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCompressed
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetNumBuckets
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSerdeInfo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBucketCols
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSortCols
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetParameters
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSkewedInfo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStoredAsSubDirectories
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|11
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|12
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetCols
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|cols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|_iter189
range|:
name|struct
operator|.
name|cols
control|)
block|{
name|_iter189
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetLocation
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetInputFormat
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|inputFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetOutputFormat
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|outputFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCompressed
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|compressed
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetNumBuckets
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|numBuckets
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSerdeInfo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|serdeInfo
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBucketCols
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|bucketCols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter190
range|:
name|struct
operator|.
name|bucketCols
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter190
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSortCols
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|sortCols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Order
name|_iter191
range|:
name|struct
operator|.
name|sortCols
control|)
block|{
name|_iter191
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetParameters
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|_iter192
range|:
name|struct
operator|.
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter192
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter192
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSkewedInfo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|skewedInfo
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStoredAsSubDirectories
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|storedAsSubDirectories
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|StorageDescriptor
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|12
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list193
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|cols
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|_list193
operator|.
name|size
argument_list|)
expr_stmt|;
name|FieldSchema
name|_elem194
decl_stmt|;
for|for
control|(
name|int
name|_i195
init|=
literal|0
init|;
name|_i195
operator|<
name|_list193
operator|.
name|size
condition|;
operator|++
name|_i195
control|)
block|{
name|_elem194
operator|=
operator|new
name|FieldSchema
argument_list|()
expr_stmt|;
name|_elem194
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|cols
operator|.
name|add
argument_list|(
name|_elem194
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|location
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|iprot
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setLocationIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|inputFormat
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|iprot
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setInputFormatIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|outputFormat
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|iprot
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setOutputFormatIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|struct
operator|.
name|compressed
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCompressedIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|struct
operator|.
name|numBuckets
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNumBucketsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|6
argument_list|)
condition|)
block|{
name|struct
operator|.
name|serdeInfo
operator|=
operator|new
name|SerDeInfo
argument_list|()
expr_stmt|;
name|struct
operator|.
name|serdeInfo
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setSerdeInfoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|7
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list196
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|bucketCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list196
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_elem197
decl_stmt|;
for|for
control|(
name|int
name|_i198
init|=
literal|0
init|;
name|_i198
operator|<
name|_list196
operator|.
name|size
condition|;
operator|++
name|_i198
control|)
block|{
name|_elem197
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|bucketCols
operator|.
name|add
argument_list|(
name|_elem197
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|bucketCols
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|struct
operator|.
name|bucketCols
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setBucketColsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|8
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list199
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|sortCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|(
name|_list199
operator|.
name|size
argument_list|)
expr_stmt|;
name|Order
name|_elem200
decl_stmt|;
for|for
control|(
name|int
name|_i201
init|=
literal|0
init|;
name|_i201
operator|<
name|_list199
operator|.
name|size
condition|;
operator|++
name|_i201
control|)
block|{
name|_elem200
operator|=
operator|new
name|Order
argument_list|()
expr_stmt|;
name|_elem200
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|sortCols
operator|.
name|add
argument_list|(
name|_elem200
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSortColsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|9
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map202
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|parameters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map202
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_key203
decl_stmt|;
name|String
name|_val204
decl_stmt|;
for|for
control|(
name|int
name|_i205
init|=
literal|0
init|;
name|_i205
operator|<
name|_map202
operator|.
name|size
condition|;
operator|++
name|_i205
control|)
block|{
name|_key203
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val204
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|parameters
operator|.
name|put
argument_list|(
name|_key203
argument_list|,
name|_val204
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|parameters
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|intern
argument_list|(
name|struct
operator|.
name|parameters
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setParametersIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|10
argument_list|)
condition|)
block|{
name|struct
operator|.
name|skewedInfo
operator|=
operator|new
name|SkewedInfo
argument_list|()
expr_stmt|;
name|struct
operator|.
name|skewedInfo
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setSkewedInfoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|11
argument_list|)
condition|)
block|{
name|struct
operator|.
name|storedAsSubDirectories
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStoredAsSubDirectoriesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

