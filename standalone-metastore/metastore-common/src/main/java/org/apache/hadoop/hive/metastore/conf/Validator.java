begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
package|;
end_package

begin_comment
comment|/**  * validate value for a ConfVar, return non-null string for fail message  */
end_comment

begin_interface
specifier|public
interface|interface
name|Validator
block|{
comment|/**    * Validate if the given value is acceptable.    * @param value value to test    * @throws IllegalArgumentException if the value is invalid    */
name|void
name|validate
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IllegalArgumentException
function_decl|;
enum|enum
name|TYPE
block|{
name|INT
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|inRange
parameter_list|(
name|String
name|value
parameter_list|,
name|Object
name|lower
parameter_list|,
name|Object
name|upper
parameter_list|)
block|{
name|int
name|ivalue
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|lower
operator|!=
literal|null
operator|&&
name|ivalue
operator|<
operator|(
name|Integer
operator|)
name|lower
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|upper
operator|!=
literal|null
operator|&&
name|ivalue
operator|>
operator|(
name|Integer
operator|)
name|upper
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|,
name|LONG
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|inRange
parameter_list|(
name|String
name|value
parameter_list|,
name|Object
name|lower
parameter_list|,
name|Object
name|upper
parameter_list|)
block|{
name|long
name|lvalue
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|lower
operator|!=
literal|null
operator|&&
name|lvalue
operator|<
operator|(
name|Long
operator|)
name|lower
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|upper
operator|!=
literal|null
operator|&&
name|lvalue
operator|>
operator|(
name|Long
operator|)
name|upper
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|,
name|FLOAT
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|inRange
parameter_list|(
name|String
name|value
parameter_list|,
name|Object
name|lower
parameter_list|,
name|Object
name|upper
parameter_list|)
block|{
name|float
name|fvalue
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|lower
operator|!=
literal|null
operator|&&
name|fvalue
operator|<
operator|(
name|Float
operator|)
name|lower
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|upper
operator|!=
literal|null
operator|&&
name|fvalue
operator|>
operator|(
name|Float
operator|)
name|upper
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|;
specifier|public
specifier|static
name|TYPE
name|valueOf
parameter_list|(
name|Object
name|lower
parameter_list|,
name|Object
name|upper
parameter_list|)
block|{
if|if
condition|(
name|lower
operator|instanceof
name|Integer
operator|||
name|upper
operator|instanceof
name|Integer
condition|)
block|{
return|return
name|INT
return|;
block|}
elseif|else
if|if
condition|(
name|lower
operator|instanceof
name|Long
operator|||
name|upper
operator|instanceof
name|Long
condition|)
block|{
return|return
name|LONG
return|;
block|}
elseif|else
if|if
condition|(
name|lower
operator|instanceof
name|Float
operator|||
name|upper
operator|instanceof
name|Float
condition|)
block|{
return|return
name|FLOAT
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid range from "
operator|+
name|lower
operator|+
literal|" to "
operator|+
name|upper
argument_list|)
throw|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|inRange
parameter_list|(
name|String
name|value
parameter_list|,
name|Object
name|lower
parameter_list|,
name|Object
name|upper
parameter_list|)
function_decl|;
block|}
block|}
end_interface

end_unit

