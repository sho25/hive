begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Static utility methods related to LDAP authentication module.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LdapUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LdapUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Extracts a base DN from the provided distinguished name.    *<br>    *<b>Example:</b>    *<br>    * "ou=CORP,dc=mycompany,dc=com" is the base DN for "cn=user1,ou=CORP,dc=mycompany,dc=com"    *    * @param dn distinguished name    * @return base DN    */
specifier|public
specifier|static
name|String
name|extractBaseDn
parameter_list|(
name|String
name|dn
parameter_list|)
block|{
specifier|final
name|int
name|indexOfFirstDelimiter
init|=
name|dn
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexOfFirstDelimiter
operator|>
operator|-
literal|1
condition|)
block|{
return|return
name|dn
operator|.
name|substring
argument_list|(
name|indexOfFirstDelimiter
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Extracts the first Relative Distinguished Name (RDN).    *<br>    *<b>Example:</b>    *<br>    * For DN "cn=user1,ou=CORP,dc=mycompany,dc=com" this method will return "cn=user1"    * @param dn distinguished name    * @return first RDN    */
specifier|public
specifier|static
name|String
name|extractFirstRdn
parameter_list|(
name|String
name|dn
parameter_list|)
block|{
return|return
name|dn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dn
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Extracts username from user DN.    *<br>    *<b>Examples:</b>    *<pre>    * LdapUtils.extractUserName("UserName")                        = "UserName"    * LdapUtils.extractUserName("UserName@mycorp.com")             = "UserName"    * LdapUtils.extractUserName("cn=UserName,dc=mycompany,dc=com") = "UserName"    *</pre>    * @param userDn    * @return    */
specifier|public
specifier|static
name|String
name|extractUserName
parameter_list|(
name|String
name|userDn
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isDn
argument_list|(
name|userDn
argument_list|)
operator|&&
operator|!
name|hasDomain
argument_list|(
name|userDn
argument_list|)
condition|)
block|{
return|return
name|userDn
return|;
block|}
name|int
name|domainIdx
init|=
name|ServiceUtils
operator|.
name|indexOfDomainMatch
argument_list|(
name|userDn
argument_list|)
decl_stmt|;
if|if
condition|(
name|domainIdx
operator|>
literal|0
condition|)
block|{
return|return
name|userDn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|domainIdx
argument_list|)
return|;
block|}
if|if
condition|(
name|userDn
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
return|return
name|userDn
operator|.
name|substring
argument_list|(
name|userDn
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|,
name|userDn
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
argument_list|)
return|;
block|}
return|return
name|userDn
return|;
block|}
comment|/**    * Gets value part of the first attribute in the provided RDN.    *<br>    *<b>Example:</b>    *<br>    * For RDN "cn=user1,ou=CORP" this method will return "user1"    * @param rdn Relative Distinguished Name    * @return value part of the first attribute    */
specifier|public
specifier|static
name|String
name|getShortName
parameter_list|(
name|String
name|rdn
parameter_list|)
block|{
return|return
operator|(
operator|(
name|rdn
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|)
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
operator|)
index|[
literal|1
index|]
return|;
block|}
comment|/**    * Check for a domain part in the provided username.    *<br>    *<b>Example:</b>    *<br>    *<pre>    * LdapUtils.hasDomain("user1@mycorp.com") = true    * LdapUtils.hasDomain("user1")            = false    *</pre>    * @param userName username    * @return true if {@code userName} contains {@code @<domain>} part    */
specifier|public
specifier|static
name|boolean
name|hasDomain
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
return|return
operator|(
name|ServiceUtils
operator|.
name|indexOfDomainMatch
argument_list|(
name|userName
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
comment|/**    * Detects DN names.    *<br>    *<b>Example:</b>    *<br>    *<pre>    * LdapUtils.isDn("cn=UserName,dc=mycompany,dc=com") = true    * LdapUtils.isDn("user1")                           = false    *</pre>    * @param name name to be checked    * @return true if the provided name is a distinguished name    */
specifier|public
specifier|static
name|boolean
name|isDn
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
return|;
block|}
comment|/**    * Reads and parses DN patterns from Hive configuration.    *<br>    * If no patterns are provided in the configuration, then the base DN will be used.    * @param conf Hive configuration    * @param var variable to be read    * @return a list of DN patterns    * @see MetastoreConf.ConfVars#METASTORE_PLAIN_LDAP_BASEDN    * @see MetastoreConf.ConfVars#METASTORE_PLAIN_LDAP_GUIDKEY    * @see MetastoreConf.ConfVars#METASTORE_PLAIN_LDAP_GROUPDNPATTERN    * @see MetastoreConf.ConfVars#METASTORE_PLAIN_LDAP_USERDNPATTERN    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseDnPatterns
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MetastoreConf
operator|.
name|ConfVars
name|var
parameter_list|)
block|{
name|String
name|patternsString
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|var
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|patternsString
argument_list|)
condition|)
block|{
name|String
name|defaultBaseDn
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PLAIN_LDAP_BASEDN
argument_list|)
decl_stmt|;
name|String
name|guidAttr
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PLAIN_LDAP_GUIDKEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|defaultBaseDn
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|guidAttr
operator|+
literal|"=%s,"
operator|+
name|defaultBaseDn
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
index|[]
name|patterns
init|=
name|patternsString
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
operator|&&
name|pattern
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected format for "
operator|+
name|var
operator|+
literal|"..ignoring "
operator|+
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|patternToBaseDn
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|.
name|contains
argument_list|(
literal|"=%s"
argument_list|)
condition|)
block|{
return|return
name|pattern
operator|.
name|split
argument_list|(
literal|","
argument_list|,
literal|2
argument_list|)
index|[
literal|1
index|]
return|;
block|}
return|return
name|pattern
return|;
block|}
comment|/**    * Converts a collection of Distinguished Name patterns to a collection of base DNs.    * @param patterns Distinguished Name patterns    * @return a list of base DNs    * @see MetastoreConf.ConfVars#METASTORE_PLAIN_LDAP_GROUPDNPATTERN    * @see MetastoreConf.ConfVars#METASTORE_PLAIN_LDAP_USERDNPATTERN    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|patternsToBaseDns
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|patterns
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|patternToBaseDn
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Creates a list of principals to be used for user authentication.    * @param conf Hive configuration    * @param user username    * @return a list of user's principals    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|createCandidatePrincipals
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|user
parameter_list|)
block|{
if|if
condition|(
name|hasDomain
argument_list|(
name|user
argument_list|)
operator|||
name|isDn
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|user
argument_list|)
return|;
block|}
name|String
name|ldapDomain
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PLAIN_LDAP_DOMAIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|ldapDomain
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|user
operator|+
literal|"@"
operator|+
name|ldapDomain
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|userPatterns
init|=
name|parseDnPatterns
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PLAIN_LDAP_USERDNPATTERN
argument_list|)
decl_stmt|;
if|if
condition|(
name|userPatterns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|user
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|candidatePrincipals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|userPattern
range|:
name|userPatterns
control|)
block|{
name|candidatePrincipals
operator|.
name|add
argument_list|(
name|userPattern
operator|.
name|replaceAll
argument_list|(
literal|"%s"
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|candidatePrincipals
return|;
block|}
specifier|private
name|LdapUtils
parameter_list|()
block|{   }
block|}
end_class

end_unit

