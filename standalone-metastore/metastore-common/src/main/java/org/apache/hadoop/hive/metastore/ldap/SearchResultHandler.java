begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The object that handles Directory Service search results.  * In most cases it converts search results into a list of names in the namespace.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SearchResultHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SearchResultHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
argument_list|>
name|searchResults
decl_stmt|;
comment|/**    * Constructs a search result handler object for the provided search results.    * @param searchResults directory service search results    */
specifier|public
name|SearchResultHandler
parameter_list|(
name|Collection
argument_list|<
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
argument_list|>
name|searchResults
parameter_list|)
block|{
name|this
operator|.
name|searchResults
operator|=
name|searchResults
expr_stmt|;
block|}
comment|/**    * Returns all entries from the search result.    * @return a list of names in the namespace    * @throws NamingException    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllLdapNames
parameter_list|()
throws|throws
name|NamingException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|handle
argument_list|(
operator|new
name|RecordProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|process
parameter_list|(
name|SearchResult
name|record
parameter_list|)
throws|throws
name|NamingException
block|{
name|result
operator|.
name|add
argument_list|(
name|record
operator|.
name|getNameInNamespace
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Checks whether search result contains exactly one entry.    * @return true if the search result contains a single entry.    * @throws NamingException    */
specifier|public
name|boolean
name|hasSingleResult
parameter_list|()
throws|throws
name|NamingException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|allResults
init|=
name|getAllLdapNames
argument_list|()
decl_stmt|;
return|return
name|allResults
operator|!=
literal|null
operator|&&
name|allResults
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
comment|/**    * Returns a single entry from the search result.    * Throws {@code NamingException} if the search result doesn't contain exactly one entry.    * @return name in the namespace    * @throws NamingException    */
specifier|public
name|String
name|getSingleLdapName
parameter_list|()
throws|throws
name|NamingException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|allLdapNames
init|=
name|getAllLdapNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|allLdapNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|allLdapNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
throw|throw
operator|new
name|NamingException
argument_list|(
literal|"Single result was expected"
argument_list|)
throw|;
block|}
comment|/**    * Returns all entries and all attributes for these entries.    * @return a list that includes all entries and all attributes from these entries.    * @throws NamingException    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllLdapNamesAndAttributes
parameter_list|()
throws|throws
name|NamingException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|handle
argument_list|(
operator|new
name|RecordProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|process
parameter_list|(
name|SearchResult
name|record
parameter_list|)
throws|throws
name|NamingException
block|{
name|result
operator|.
name|add
argument_list|(
name|record
operator|.
name|getNameInNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
name|allAttributes
init|=
name|record
operator|.
name|getAttributes
argument_list|()
operator|.
name|getAll
argument_list|()
decl_stmt|;
while|while
condition|(
name|allAttributes
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|Attribute
name|attribute
init|=
name|allAttributes
operator|.
name|next
argument_list|()
decl_stmt|;
name|addAllAttributeValuesToResult
argument_list|(
name|attribute
operator|.
name|getAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|addAllAttributeValuesToResult
parameter_list|(
name|NamingEnumeration
name|values
parameter_list|)
throws|throws
name|NamingException
block|{
while|while
condition|(
name|values
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Allows for custom processing of the search results.    * @param processor {@link RecordProcessor} implementation    * @throws NamingException    */
specifier|public
name|void
name|handle
parameter_list|(
name|RecordProcessor
name|processor
parameter_list|)
throws|throws
name|NamingException
block|{
try|try
block|{
for|for
control|(
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|searchResult
range|:
name|searchResults
control|)
block|{
while|while
condition|(
name|searchResult
operator|.
name|hasMore
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|processor
operator|.
name|process
argument_list|(
name|searchResult
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
block|}
finally|finally
block|{
for|for
control|(
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|searchResult
range|:
name|searchResults
control|)
block|{
try|try
block|{
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close LDAP search result"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * An interface used by {@link SearchResultHandler} for processing records of    * a {@link SearchResult} on a per-record basis.    *<br>    * Implementations of this interface perform the actual work of processing each record,    * but don't need to worry about exception handling, closing underlying data structures,    * and combining results from several search requests.    * @see SearchResultHandler    */
specifier|public
interface|interface
name|RecordProcessor
block|{
comment|/**      * Implementations must implement this method to process each record in {@link SearchResult}.      * @param record the {@code SearchResult} to precess      * @return {@code true} to continue processing, {@code false} to stop iterating      * over search results      * @throws NamingException      */
name|boolean
name|process
parameter_list|(
name|SearchResult
name|record
parameter_list|)
throws|throws
name|NamingException
function_decl|;
block|}
block|}
end_class

end_unit

