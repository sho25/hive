begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This authentication provider implements the {@code CONFIG} authentication. It allows a {@link  * MetaStorePasswdAuthenticationProvider} to be specified at configuration time which may  * additionally  * implement {@link org.apache.hadoop.conf.Configurable Configurable} to grab HMS's {@link  * org.apache.hadoop.conf.Configuration Configuration}.  */
end_comment

begin_class
specifier|public
class|class
name|MetaStoreConfigAuthenticationProviderImpl
implements|implements
name|MetaStorePasswdAuthenticationProvider
block|{
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetaStoreConfigAuthenticationProviderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|MetaStoreConfigAuthenticationProviderImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|userName
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|THRIFT_AUTH_CONFIG_USERNAME
argument_list|)
expr_stmt|;
name|password
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|THRIFT_AUTH_CONFIG_PASSWORD
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|userName
operator|||
name|userName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"No username specified in "
operator|+
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|THRIFT_AUTH_CONFIG_USERNAME
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|password
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"No password specified in "
operator|+
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|THRIFT_AUTH_CONFIG_PASSWORD
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|Authenticate
parameter_list|(
name|String
name|authUser
parameter_list|,
name|String
name|authPassword
parameter_list|)
throws|throws
name|AuthenticationException
block|{
if|if
condition|(
operator|!
name|userName
operator|.
name|equals
argument_list|(
name|authUser
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Invalid user "
operator|+
name|authUser
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Invalid credentials"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|password
operator|.
name|equals
argument_list|(
name|authPassword
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Invalid password for user "
operator|+
name|authUser
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Invalid credentials"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"User "
operator|+
name|authUser
operator|+
literal|" successfully authenticated."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

