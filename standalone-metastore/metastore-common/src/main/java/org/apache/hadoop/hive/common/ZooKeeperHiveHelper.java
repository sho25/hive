begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|api
operator|.
name|ACLProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|recipes
operator|.
name|nodes
operator|.
name|PersistentEphemeralNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|ExponentialBackoffRetry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|// The class serves three purposes (for HiveServer2 and HiveMetaStore)
end_comment

begin_comment
comment|// 1. An instance of this class holds ZooKeeper related configuration parameter values from Hive
end_comment

begin_comment
comment|// configuration and metastore configuration.
end_comment

begin_comment
comment|// 2. For a server which is added to ZooKeeper specified by the configuration, an instance of
end_comment

begin_comment
comment|// this class holds the znode corresponding to that server, zookeeper client used to watch the
end_comment

begin_comment
comment|// znode.
end_comment

begin_comment
comment|// 3. For a metastore client it provides API to find server URIs from specified ZooKeeper.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// We could have differentiated these three functionality into three different classes by
end_comment

begin_comment
comment|// including an instance of first class in the second and the third, but there's isn't much stuff
end_comment

begin_comment
comment|// in the first and the third.. Also note that the third functionality overlaps with
end_comment

begin_comment
comment|// ZooKeeperHiveClientHelper class, but that overlap is very small. So for now all the three
end_comment

begin_comment
comment|// functionality are bundled in a single class.
end_comment

begin_comment
comment|/**  * ZooKeeperHiveHelper. A helper class to hold ZooKeeper related configuration, to register and  * deregister ZooKeeper node for a given server and to fetch registered server URIs for clients.  */
end_comment

begin_class
specifier|public
class|class
name|ZooKeeperHiveHelper
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZooKeeperHiveHelper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_PATH_SEPARATOR
init|=
literal|"/"
decl_stmt|;
specifier|private
name|String
name|quorum
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|clientPort
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|rootNamespace
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|deregisteredWithZooKeeper
init|=
literal|false
decl_stmt|;
comment|// Set to true only when deregistration happens
specifier|private
name|int
name|sessionTimeout
decl_stmt|;
specifier|private
name|int
name|baseSleepTime
decl_stmt|;
specifier|private
name|int
name|maxRetries
decl_stmt|;
specifier|private
name|CuratorFramework
name|zooKeeperClient
decl_stmt|;
specifier|private
name|PersistentEphemeralNode
name|znode
decl_stmt|;
specifier|public
name|ZooKeeperHiveHelper
parameter_list|(
name|String
name|quorum
parameter_list|,
name|String
name|clientPort
parameter_list|,
name|String
name|rootNamespace
parameter_list|,
name|int
name|sessionTimeout
parameter_list|,
name|int
name|baseSleepTime
parameter_list|,
name|int
name|maxRetries
parameter_list|)
block|{
comment|// Get the ensemble server addresses in the format host1:port1, host2:port2, ... . Append
comment|// the configured port to hostname if the hostname doesn't contain a port.
name|String
index|[]
name|hosts
init|=
name|quorum
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|StringBuilder
name|quorumServers
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|quorumServers
operator|.
name|append
argument_list|(
name|hosts
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hosts
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|quorumServers
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|quorumServers
operator|.
name|append
argument_list|(
name|clientPort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
name|hosts
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|quorumServers
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|quorum
operator|=
name|quorumServers
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|clientPort
operator|=
name|clientPort
expr_stmt|;
name|this
operator|.
name|rootNamespace
operator|=
name|rootNamespace
expr_stmt|;
name|this
operator|.
name|sessionTimeout
operator|=
name|sessionTimeout
expr_stmt|;
name|this
operator|.
name|baseSleepTime
operator|=
name|baseSleepTime
expr_stmt|;
name|this
operator|.
name|maxRetries
operator|=
name|maxRetries
expr_stmt|;
block|}
comment|/**    * Get the ensemble server addresses. The format is: host1:port, host2:port..    **/
specifier|public
name|String
name|getQuorumServers
parameter_list|()
block|{
return|return
name|quorum
return|;
block|}
comment|/**    * Adds a server instance to ZooKeeper as a znode.    *    * @throws Exception    */
specifier|public
name|void
name|addServerInstanceToZooKeeper
parameter_list|(
name|String
name|znodePathPrefix
parameter_list|,
name|String
name|znodeData
parameter_list|,
name|ACLProvider
name|zooKeeperAclProvider
parameter_list|,
name|ZKDeRegisterWatcher
name|watcher
parameter_list|)
throws|throws
name|Exception
block|{
comment|// This might be the first server getting added to the ZooKeeper, so the parent node may need
comment|// to be created.
name|zooKeeperClient
operator|=
name|startZookeeperClient
argument_list|(
name|zooKeeperAclProvider
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create a znode under the rootNamespace parent for the given path prefix for a server. Also
comment|// add a watcher to watch the znode.
try|try
block|{
name|String
name|pathPrefix
init|=
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
name|rootNamespace
operator|+
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
name|znodePathPrefix
decl_stmt|;
name|byte
index|[]
name|znodeDataUTF8
init|=
name|znodeData
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|znode
operator|=
operator|new
name|PersistentEphemeralNode
argument_list|(
name|zooKeeperClient
argument_list|,
name|PersistentEphemeralNode
operator|.
name|Mode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|,
name|pathPrefix
argument_list|,
name|znodeDataUTF8
argument_list|)
expr_stmt|;
name|znode
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// We'll wait for 120s for node creation
name|long
name|znodeCreationTimeout
init|=
literal|120
decl_stmt|;
if|if
condition|(
operator|!
name|znode
operator|.
name|waitForInitialCreate
argument_list|(
name|znodeCreationTimeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Max znode creation wait time: "
operator|+
name|znodeCreationTimeout
operator|+
literal|"s exhausted"
argument_list|)
throw|;
block|}
name|setDeregisteredWithZooKeeper
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|String
name|znodePath
init|=
name|znode
operator|.
name|getActualPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|zooKeeperClient
operator|.
name|checkExists
argument_list|()
operator|.
name|usingWatcher
argument_list|(
name|watcher
argument_list|)
operator|.
name|forPath
argument_list|(
name|znodePath
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// No node exists, throw exception
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to create znode with path prefix "
operator|+
name|znodePathPrefix
operator|+
literal|" and data "
operator|+
name|znodeData
operator|+
literal|" on ZooKeeper."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Created a znode (actual path "
operator|+
name|znodePath
operator|+
literal|") on ZooKeeper with path prefix "
operator|+
name|znodePathPrefix
operator|+
literal|" and data "
operator|+
name|znodeData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create znode with path prefix "
operator|+
name|znodePathPrefix
operator|+
literal|" and data "
operator|+
name|znodeData
operator|+
literal|" on ZooKeeper."
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|znode
operator|!=
literal|null
condition|)
block|{
name|znode
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
specifier|public
name|CuratorFramework
name|startZookeeperClient
parameter_list|(
name|ACLProvider
name|zooKeeperAclProvider
parameter_list|,
name|boolean
name|addParentNode
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|zooKeeperEnsemble
init|=
name|getQuorumServers
argument_list|()
decl_stmt|;
comment|// Create a CuratorFramework instance to be used as the ZooKeeper client.
comment|// Use the zooKeeperAclProvider, when specified, to create appropriate ACLs.
name|CuratorFrameworkFactory
operator|.
name|Builder
name|builder
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
name|zooKeeperEnsemble
argument_list|)
operator|.
name|sessionTimeoutMs
argument_list|(
name|sessionTimeout
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|ExponentialBackoffRetry
argument_list|(
name|baseSleepTime
argument_list|,
name|maxRetries
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|zooKeeperAclProvider
operator|!=
literal|null
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|aclProvider
argument_list|(
name|zooKeeperAclProvider
argument_list|)
expr_stmt|;
block|}
name|CuratorFramework
name|zkClient
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|zkClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Create the parent znodes recursively; ignore if the parent already exists.
if|if
condition|(
name|addParentNode
condition|)
block|{
try|try
block|{
name|zkClient
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|withMode
argument_list|(
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
operator|.
name|forPath
argument_list|(
name|ZooKeeperHiveHelper
operator|.
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
name|rootNamespace
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created the root name space: "
operator|+
name|rootNamespace
operator|+
literal|" on ZooKeeper"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create namespace: "
operator|+
name|rootNamespace
operator|+
literal|" on ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
return|return
name|zkClient
return|;
block|}
specifier|public
name|void
name|removeServerInstanceFromZooKeeper
parameter_list|()
throws|throws
name|Exception
block|{
name|setDeregisteredWithZooKeeper
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|znode
operator|!=
literal|null
condition|)
block|{
name|znode
operator|.
name|close
argument_list|()
expr_stmt|;
name|znode
operator|=
literal|null
expr_stmt|;
block|}
name|zooKeeperClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Server instance removed from ZooKeeper."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deregisterZnode
parameter_list|()
block|{
if|if
condition|(
name|znode
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|znode
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"This server instance with path "
operator|+
name|znode
operator|.
name|getActualPath
argument_list|()
operator|+
literal|" is now de-registered from ZooKeeper. "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close the persistent ephemeral znode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|setDeregisteredWithZooKeeper
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|znode
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|boolean
name|isDeregisteredWithZooKeeper
parameter_list|()
block|{
return|return
name|deregisteredWithZooKeeper
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|setDeregisteredWithZooKeeper
parameter_list|(
name|boolean
name|deregisteredWithZooKeeper
parameter_list|)
block|{
name|this
operator|.
name|deregisteredWithZooKeeper
operator|=
name|deregisteredWithZooKeeper
expr_stmt|;
block|}
comment|/**    * This method is supposed to be called from client code connecting to one of the servers    * managed by the configured ZooKeeper. It starts and closes its own ZooKeeper client instead    * of using the class member.    * @return list of server URIs stored under the configured zookeeper namespace    * @throws Exception    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getServerUris
parameter_list|()
throws|throws
name|Exception
block|{
name|CuratorFramework
name|zkClient
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|serverUris
decl_stmt|;
try|try
block|{
name|zkClient
operator|=
name|startZookeeperClient
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|serverNodes
init|=
name|zkClient
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
name|rootNamespace
argument_list|)
decl_stmt|;
name|serverUris
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|serverNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|serverNode
range|:
name|serverNodes
control|)
block|{
name|byte
index|[]
name|serverUriBytes
init|=
name|zkClient
operator|.
name|getData
argument_list|()
operator|.
name|forPath
argument_list|(
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
name|rootNamespace
operator|+
name|ZOOKEEPER_PATH_SEPARATOR
operator|+
name|serverNode
argument_list|)
decl_stmt|;
name|serverUris
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|serverUriBytes
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|serverUris
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|zkClient
operator|!=
literal|null
condition|)
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

