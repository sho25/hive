begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Builder class to make constructing {@link LockRequest} easier.  */
end_comment

begin_class
specifier|public
class|class
name|LockRequestBuilder
block|{
specifier|private
name|LockRequest
name|req
decl_stmt|;
specifier|private
name|LockTrie
name|trie
decl_stmt|;
specifier|private
name|boolean
name|userSet
decl_stmt|;
comment|/**    * @deprecated     */
specifier|public
name|LockRequestBuilder
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LockRequestBuilder
parameter_list|(
name|String
name|agentInfo
parameter_list|)
block|{
name|req
operator|=
operator|new
name|LockRequest
argument_list|()
expr_stmt|;
name|trie
operator|=
operator|new
name|LockTrie
argument_list|()
expr_stmt|;
name|userSet
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|agentInfo
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|setAgentInfo
argument_list|(
name|agentInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the constructed LockRequest.    * @return lock request    */
specifier|public
name|LockRequest
name|build
parameter_list|()
block|{
if|if
condition|(
operator|!
name|userSet
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot build a lock without giving a user"
argument_list|)
throw|;
block|}
name|trie
operator|.
name|addLocksToRequest
argument_list|(
name|req
argument_list|)
expr_stmt|;
try|try
block|{
name|req
operator|.
name|setHostname
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to determine our local host!"
argument_list|)
throw|;
block|}
return|return
name|req
return|;
block|}
comment|/**    * Set the transaction id.    * @param txnid transaction id    * @return reference to this builder    */
specifier|public
name|LockRequestBuilder
name|setTransactionId
parameter_list|(
name|long
name|txnid
parameter_list|)
block|{
name|req
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|LockRequestBuilder
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
name|user
operator|=
literal|"unknown"
expr_stmt|;
name|req
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|userSet
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Add a lock component to the lock request    * @param component to add    * @return reference to this builder    */
specifier|public
name|LockRequestBuilder
name|addLockComponent
parameter_list|(
name|LockComponent
name|component
parameter_list|)
block|{
name|trie
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Add a collection with lock components to the lock request    * @param components to add    * @return reference to this builder    */
specifier|public
name|LockRequestBuilder
name|addLockComponents
parameter_list|(
name|Collection
argument_list|<
name|LockComponent
argument_list|>
name|components
parameter_list|)
block|{
name|trie
operator|.
name|addAll
argument_list|(
name|components
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// For reasons that are completely incomprehensible to me the semantic
comment|// analyzers often ask for multiple locks on the same entity (for example
comment|// a shared_read and an exlcusive lock).  The db locking system gets confused
comment|// by this and dead locks on it.  To resolve that, we'll make sure in the
comment|// request that multiple locks are coalesced and promoted to the higher
comment|// level of locking.  To do this we put all locks components in trie based
comment|// on dbname, tablename, partition name and handle the promotion as new
comment|// requests come in.  This structure depends on the fact that null is a
comment|// valid key in a LinkedHashMap.  So a database lock will map to (dbname, null,
comment|// null).
specifier|private
specifier|static
class|class
name|LockTrie
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TableTrie
argument_list|>
name|trie
decl_stmt|;
name|LockTrie
parameter_list|()
block|{
name|trie
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|LockComponent
name|comp
parameter_list|)
block|{
name|TableTrie
name|tabs
init|=
name|trie
operator|.
name|get
argument_list|(
name|comp
operator|.
name|getDbname
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tabs
operator|==
literal|null
condition|)
block|{
name|tabs
operator|=
operator|new
name|TableTrie
argument_list|()
expr_stmt|;
name|trie
operator|.
name|put
argument_list|(
name|comp
operator|.
name|getDbname
argument_list|()
argument_list|,
name|tabs
argument_list|)
expr_stmt|;
block|}
name|setTable
argument_list|(
name|comp
argument_list|,
name|tabs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|LockComponent
argument_list|>
name|components
parameter_list|)
block|{
for|for
control|(
name|LockComponent
name|component
range|:
name|components
control|)
block|{
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addLocksToRequest
parameter_list|(
name|LockRequest
name|request
parameter_list|)
block|{
for|for
control|(
name|TableTrie
name|tab
range|:
name|trie
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|PartTrie
name|part
range|:
name|tab
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|LockComponent
name|lock
range|:
name|part
operator|.
name|values
argument_list|()
control|)
block|{
name|request
operator|.
name|addToComponent
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|setTable
parameter_list|(
name|LockComponent
name|comp
parameter_list|,
name|TableTrie
name|tabs
parameter_list|)
block|{
name|PartTrie
name|parts
init|=
name|tabs
operator|.
name|get
argument_list|(
name|comp
operator|.
name|getTablename
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|==
literal|null
condition|)
block|{
name|parts
operator|=
operator|new
name|PartTrie
argument_list|()
expr_stmt|;
name|tabs
operator|.
name|put
argument_list|(
name|comp
operator|.
name|getTablename
argument_list|()
argument_list|,
name|parts
argument_list|)
expr_stmt|;
block|}
name|setPart
argument_list|(
name|comp
argument_list|,
name|parts
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setPart
parameter_list|(
name|LockComponent
name|comp
parameter_list|,
name|PartTrie
name|parts
parameter_list|)
block|{
name|LockComponent
name|existing
init|=
name|parts
operator|.
name|get
argument_list|(
name|comp
operator|.
name|getPartitionname
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
comment|// No existing lock for this partition.
name|parts
operator|.
name|put
argument_list|(
name|comp
operator|.
name|getPartitionname
argument_list|()
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|existing
operator|.
name|getType
argument_list|()
operator|!=
name|LockType
operator|.
name|EXCLUSIVE
operator|&&
operator|(
name|comp
operator|.
name|getType
argument_list|()
operator|==
name|LockType
operator|.
name|EXCLUSIVE
operator|||
name|comp
operator|.
name|getType
argument_list|()
operator|==
name|LockType
operator|.
name|SHARED_WRITE
operator|)
condition|)
block|{
comment|// We only need to promote if comp.type is> existing.type.  For
comment|// efficiency we check if existing is exclusive (in which case we
comment|// need never promote) or if comp is exclusive or shared_write (in
comment|// which case we can promote even though they may both be shared
comment|// write).  If comp is shared_read there's never a need to promote.
name|parts
operator|.
name|put
argument_list|(
name|comp
operator|.
name|getPartitionname
argument_list|()
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TableTrie
extends|extends
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|PartTrie
argument_list|>
block|{     }
specifier|private
specifier|static
class|class
name|PartTrie
extends|extends
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|LockComponent
argument_list|>
block|{     }
block|}
block|}
end_class

end_unit

