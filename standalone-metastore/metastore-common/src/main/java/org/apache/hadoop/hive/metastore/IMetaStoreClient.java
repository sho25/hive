begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|RetrySemantics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|NoReconnect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CheckConstraintsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CmRecycleRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CmRecycleResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CommitTxnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ConfigValSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CreationMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CurrentNotificationEventId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DataOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DefaultConstraintsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FindSchemasByColsResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FindSchemasByColsRqst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FireEventRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FireEventResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ForeignKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetAllFunctionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetOpenTxnsInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetPrincipalsInRoleRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetPrincipalsInRoleResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetRoleGrantsForPrincipalRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetRoleGrantsForPrincipalResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HeartbeatTxnRangeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ISchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Materialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetadataPpdResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchLockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchTxnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotNullConstraintsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventsCountRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventsCountResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|OpenTxnsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionValuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionValuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrimaryKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|RuntimeStat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLCheckConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLDefaultConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLNotNullConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLUniqueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SchemaVersionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SetPartitionsStatsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableValidWriteIds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnAbortedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnOpenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnToWriteId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UniqueConstraintsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMFullResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMNullablePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMNullableResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMValidateResourcePlanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WriteNotificationLogRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|ObjectPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_comment
comment|/**  * Wrapper around hive metastore thrift api  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
interface|interface
name|IMetaStoreClient
block|{
comment|/**    * Returns whether current client is compatible with conf argument or not    * @return    */
name|boolean
name|isCompatibleWith
parameter_list|(
name|Configuration
name|conf
parameter_list|)
function_decl|;
comment|/**    * Set added jars path info to MetaStoreClient.    * @param addedJars the hive.added.jars.path. It is qualified paths separated by commas.    */
name|void
name|setHiveAddedJars
parameter_list|(
name|String
name|addedJars
parameter_list|)
function_decl|;
comment|/**    * Returns true if the current client is using an in process metastore (local metastore).    *    * @return    */
name|boolean
name|isLocalMetaStore
parameter_list|()
function_decl|;
comment|/**    *  Tries to reconnect this MetaStoreClient to the MetaStore.    */
name|void
name|reconnect
parameter_list|()
throws|throws
name|MetaException
function_decl|;
comment|/**    * close connection to meta store    */
annotation|@
name|NoReconnect
name|void
name|close
parameter_list|()
function_decl|;
comment|/**    * set meta variable which is open to end users    */
name|void
name|setMetaConf
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * get current meta variable    */
name|String
name|getMetaConf
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Create a new catalog.    * @param catalog catalog object to create.    * @throws AlreadyExistsException A catalog of this name already exists.    * @throws InvalidObjectException There is something wrong with the passed in catalog object.    * @throws MetaException something went wrong, usually either in the database or trying to    * create the directory for the catalog.    * @throws TException general thrift exception.    */
name|void
name|createCatalog
parameter_list|(
name|Catalog
name|catalog
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Alter an existing catalog.    * @param catalogName the name of the catalog to alter.    * @param newCatalog the new catalog object.  All relevant details of the catalog should be    *                   set, don't rely on the system to figure out what you changed and only copy    *                   that in.    * @throws NoSuchObjectException no catalog of this name exists    * @throws InvalidObjectException an attempt was made to make an unsupported change (such as    * catalog name).    * @throws MetaException usually indicates a database error    * @throws TException general thrift exception    */
name|void
name|alterCatalog
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|Catalog
name|newCatalog
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a catalog object.    * @param catName Name of the catalog to fetch.    * @return The catalog.    * @throws NoSuchObjectException no catalog of this name exists.    * @throws MetaException something went wrong, usually in the database.    * @throws TException general thrift exception.    */
name|Catalog
name|getCatalog
parameter_list|(
name|String
name|catName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a list of all catalogs known to the system.    * @return list of catalog names    * @throws MetaException something went wrong, usually in the database.    * @throws TException general thrift exception.    */
name|List
argument_list|<
name|String
argument_list|>
name|getCatalogs
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a catalog.  Catalogs must be empty to be dropped, there is no cascade for dropping a    * catalog.    * @param catName name of the catalog to drop    * @throws NoSuchObjectException no catalog of this name exists.    * @throws InvalidOperationException The catalog is not empty and cannot be dropped.    * @throws MetaException something went wrong, usually in the database.    * @throws TException general thrift exception.    */
name|void
name|dropCatalog
parameter_list|(
name|String
name|catName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get the names of all databases in the default catalog that match the given pattern.    * @param databasePattern pattern for the database name to patch    * @return List of database names.    * @throws MetaException error accessing RDBMS.    * @throws TException thrift transport error    */
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|databasePattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get all databases in a catalog whose names match a pattern.    * @param catName  catalog name.  Can be null, in which case the default catalog is assumed.    * @param databasePattern pattern for the database name to match    * @return list of database names    * @throws MetaException error accessing RDBMS.    * @throws TException thrift transport error    */
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|databasePattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get the names of all databases in the MetaStore.    * @return List of database names in the default catalog.    * @throws MetaException error accessing RDBMS.    * @throws TException thrift transport error    */
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get all databases in a catalog.    * @param catName catalog name.  Can be null, in which case the default catalog is assumed.    * @return list of all database names    * @throws MetaException error accessing RDBMS.    * @throws TException thrift transport error    */
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|(
name|String
name|catName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get the names of all tables in the specified database that satisfy the supplied    * table name pattern.    * @param dbName database name.    * @param tablePattern pattern for table name to conform to    * @return List of table names.    * @throws MetaException error fetching information from the RDBMS    * @throws TException thrift transport error    * @throws UnknownDBException indicated database to search in does not exist.    */
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tablePattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get the names of all tables in the specified database that satisfy the supplied    * table name pattern.    * @param catName catalog name.    * @param dbName database name.    * @param tablePattern pattern for table name to conform to    * @return List of table names.    * @throws MetaException error fetching information from the RDBMS    * @throws TException general thrift error    * @throws UnknownDBException indicated database to search in does not exist.    */
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tablePattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get the names of all tables in the specified database that satisfy the supplied    * table name pattern and table type (MANAGED_TABLE || EXTERNAL_TABLE || VIRTUAL_VIEW)    * @param dbName Name of the database to fetch tables in.    * @param tablePattern pattern to match for table names.    * @param tableType Type of the table in the HMS store. VIRTUAL_VIEW is for views.    * @return List of table names.    * @throws MetaException error fetching information from the RDBMS    * @throws TException thrift transport error    * @throws UnknownDBException indicated database does not exist.    */
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tablePattern
parameter_list|,
name|TableType
name|tableType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get the names of all tables in the specified database that satisfy the supplied    * table name pattern and table type (MANAGED_TABLE || EXTERNAL_TABLE || VIRTUAL_VIEW)    * @param catName catalog name.    * @param dbName Name of the database to fetch tables in.    * @param tablePattern pattern to match for table names.    * @param tableType Type of the table in the HMS store. VIRTUAL_VIEW is for views.    * @return List of table names.    * @throws MetaException error fetching information from the RDBMS    * @throws TException thrift transport error    * @throws UnknownDBException indicated database does not exist.    */
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tablePattern
parameter_list|,
name|TableType
name|tableType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get materialized views that have rewriting enabled.  This will use the default catalog.    * @param dbName Name of the database to fetch materialized views from.    * @return List of materialized view names.    * @throws MetaException error fetching from the RDBMS    * @throws TException thrift transport error    * @throws UnknownDBException no such database    */
name|List
argument_list|<
name|String
argument_list|>
name|getMaterializedViewsForRewriting
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get materialized views that have rewriting enabled.    * @param catName catalog name.    * @param dbName Name of the database to fetch materialized views from.    * @return List of materialized view names.    * @throws MetaException error fetching from the RDBMS    * @throws TException thrift transport error    * @throws UnknownDBException no such database    */
name|List
argument_list|<
name|String
argument_list|>
name|getMaterializedViewsForRewriting
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Fetches just table name and comments.  Useful when you need full table name    * (catalog.database.table) but don't need extra information like partition columns that    * require additional fetches from the database.    * @param dbPatterns database pattern to match, or null for all databases    * @param tablePatterns table pattern to match.    * @param tableTypes list of table types to fetch.    * @return list of TableMeta objects with information on matching tables    * @throws MetaException something went wrong with the fetch from the RDBMS    * @throws TException thrift transport error    * @throws UnknownDBException No databases match the provided pattern.    */
name|List
argument_list|<
name|TableMeta
argument_list|>
name|getTableMeta
parameter_list|(
name|String
name|dbPatterns
parameter_list|,
name|String
name|tablePatterns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Fetches just table name and comments.  Useful when you need full table name    * (catalog.database.table) but don't need extra information like partition columns that    * require additional fetches from the database.    * @param catName catalog to search in.  Search cannot cross catalogs.    * @param dbPatterns database pattern to match, or null for all databases    * @param tablePatterns table pattern to match.    * @param tableTypes list of table types to fetch.    * @return list of TableMeta objects with information on matching tables    * @throws MetaException something went wrong with the fetch from the RDBMS    * @throws TException thrift transport error    * @throws UnknownDBException No databases match the provided pattern.    */
name|List
argument_list|<
name|TableMeta
argument_list|>
name|getTableMeta
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbPatterns
parameter_list|,
name|String
name|tablePatterns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get the names of all tables in the specified database.    * @param dbName database name    * @return List of table names.    * @throws MetaException something went wrong with the fetch from the RDBMS    * @throws TException thrift transport error    * @throws UnknownDBException No databases match the provided pattern.    */
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get the names of all tables in the specified database.    * @param catName catalog name    * @param dbName database name    * @return List of table names.    * @throws MetaException something went wrong with the fetch from the RDBMS    * @throws TException thrift transport error    * @throws UnknownDBException No databases match the provided pattern.    */
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get a list of table names that match a filter.    * The filter operators are LIKE,&lt;,&lt;=,&gt;,&gt;=, =,&lt;&gt;    *    * In the filter statement, values interpreted as strings must be enclosed in quotes,    * while values interpreted as integers should not be.  Strings and integers are the only    * supported value types.    *    * The currently supported key names in the filter are:    * Constants.HIVE_FILTER_FIELD_OWNER, which filters on the tables' owner's name    *   and supports all filter operators    * Constants.HIVE_FILTER_FIELD_LAST_ACCESS, which filters on the last access times    *   and supports all filter operators except LIKE    * Constants.HIVE_FILTER_FIELD_PARAMS, which filters on the tables' parameter keys and values    *   and only supports the filter operators = and&lt;&gt;.    *   Append the parameter key name to HIVE_FILTER_FIELD_PARAMS in the filter statement.    *   For example, to filter on parameter keys called "retention", the key name in the filter    *   statement should be Constants.HIVE_FILTER_FIELD_PARAMS + "retention"    *   Also, = and&lt;&gt; only work for keys that exist in the tables.    *   E.g., filtering on tables where key1&lt;&gt; value will only    *   return tables that have a value for the parameter key1.    * Some example filter statements include:    * filter = Constants.HIVE_FILTER_FIELD_OWNER + " like \".*test.*\" and " +    *   Constants.HIVE_FILTER_FIELD_LAST_ACCESS + " = 0";    * filter = Constants.HIVE_FILTER_FIELD_OWNER + " = \"test_user\" and (" +    *   Constants.HIVE_FILTER_FIELD_PARAMS + "retention = \"30\" or " +    *   Constants.HIVE_FILTER_FIELD_PARAMS + "retention = \"90\")"    *    * @param dbName    *          The name of the database from which you will retrieve the table names    * @param filter    *          The filter string    * @param maxTables    *          The maximum number of tables returned    * @return  A list of table names that match the desired filter    * @throws InvalidOperationException invalid filter    * @throws UnknownDBException no such database    * @throws TException thrift transport error    */
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxTables
parameter_list|)
throws|throws
name|TException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get a list of table names that match a filter.    * The filter operators are LIKE,&lt;,&lt;=,&gt;,&gt;=, =,&lt;&gt;    *    * In the filter statement, values interpreted as strings must be enclosed in quotes,    * while values interpreted as integers should not be.  Strings and integers are the only    * supported value types.    *    * The currently supported key names in the filter are:    * Constants.HIVE_FILTER_FIELD_OWNER, which filters on the tables' owner's name    *   and supports all filter operators    * Constants.HIVE_FILTER_FIELD_LAST_ACCESS, which filters on the last access times    *   and supports all filter operators except LIKE    * Constants.HIVE_FILTER_FIELD_PARAMS, which filters on the tables' parameter keys and values    *   and only supports the filter operators = and&lt;&gt;.    *   Append the parameter key name to HIVE_FILTER_FIELD_PARAMS in the filter statement.    *   For example, to filter on parameter keys called "retention", the key name in the filter    *   statement should be Constants.HIVE_FILTER_FIELD_PARAMS + "retention"    *   Also, = and&lt;&gt; only work for keys that exist in the tables.    *   E.g., filtering on tables where key1&lt;&gt; value will only    *   return tables that have a value for the parameter key1.    * Some example filter statements include:    * filter = Constants.HIVE_FILTER_FIELD_OWNER + " like \".*test.*\" and " +    *   Constants.HIVE_FILTER_FIELD_LAST_ACCESS + " = 0";    * filter = Constants.HIVE_FILTER_FIELD_OWNER + " = \"test_user\" and (" +    *   Constants.HIVE_FILTER_FIELD_PARAMS + "retention = \"30\" or " +    *   Constants.HIVE_FILTER_FIELD_PARAMS + "retention = \"90\")"    *    * @param catName catalog name    * @param dbName    *          The name of the database from which you will retrieve the table names    * @param filter    *          The filter string    * @param maxTables    *          The maximum number of tables returned    * @return  A list of table names that match the desired filter    * @throws InvalidOperationException invalid filter    * @throws UnknownDBException no such database    * @throws TException thrift transport error    */
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|filter
parameter_list|,
name|int
name|maxTables
parameter_list|)
throws|throws
name|TException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Drop the table.    *    * @param dbname    *          The database for this table    * @param tableName    *          The table to drop    * @param deleteData    *          Should we delete the underlying data    * @param ignoreUnknownTab    *          don't throw if the requested table doesn't exist    * @throws MetaException    *           Could not drop table properly.    * @throws NoSuchObjectException    *           The table wasn't found.    * @throws TException    *           A thrift communication error occurred    *    */
name|void
name|dropTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownTab
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Drop the table.    *    * @param dbname    *          The database for this table    * @param tableName    *          The table to drop    * @param deleteData    *          Should we delete the underlying data    * @param ignoreUnknownTab    *          don't throw if the requested table doesn't exist    * @param ifPurge    *          completely purge the table (skipping trash) while removing data from warehouse    * @throws MetaException    *           Could not drop table properly.    * @throws NoSuchObjectException    *           The table wasn't found.    * @throws TException    *           A thrift communication error occurred    */
name|void
name|dropTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownTab
parameter_list|,
name|boolean
name|ifPurge
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Drop the table.    *    * @param dbname    *          The database for this table    * @param tableName    *          The table to drop    * @throws MetaException    *           Could not drop table properly.    * @throws NoSuchObjectException    *           The table wasn't found.    * @throws TException    *           A thrift communication error occurred    */
name|void
name|dropTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Drop a table.    * @param catName catalog the table is in.    * @param dbName database the table is in.    * @param tableName table name.    * @param deleteData whether associated data should be deleted.    * @param ignoreUnknownTable whether a non-existent table name should be ignored    * @param ifPurge whether dropped data should be immediately removed rather than placed in HDFS    *               trash.    * @throws MetaException something went wrong, usually in the RDBMS or storage.    * @throws NoSuchObjectException No table of this name exists, only thrown if    * ignoreUnknownTable is false.    * @throws TException general thrift error.    */
name|void
name|dropTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownTable
parameter_list|,
name|boolean
name|ifPurge
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a table.  Equivalent to    * {@link #dropTable(String, String, String, boolean, boolean, boolean)} with ifPurge set to    * false.    * @param catName catalog the table is in.    * @param dbName database the table is in.    * @param tableName table name.    * @param deleteData whether associated data should be deleted.    * @param ignoreUnknownTable whether a non-existent table name should be ignored    * @throws MetaException something went wrong, usually in the RDBMS or storage.    * @throws NoSuchObjectException No table of this name exists, only thrown if    * ignoreUnknownTable is false.    * @throws TException general thrift error.    */
specifier|default
name|void
name|dropTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownTable
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|dropTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|deleteData
argument_list|,
name|ignoreUnknownTable
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drop a table.  Equivalent to    * {@link #dropTable(String, String, String, boolean, boolean, boolean)} with deleteData    * set and ignoreUnknownTable set to true and ifPurge set to false.    * @param catName catalog the table is in.    * @param dbName database the table is in.    * @param tableName table name.    * @throws MetaException something went wrong, usually in the RDBMS or storage.    * @throws NoSuchObjectException No table of this name exists, only thrown if    * ignoreUnknownTable is false.    * @throws TException general thrift error.    */
specifier|default
name|void
name|dropTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|dropTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Truncate the table/partitions in the DEFAULT database.    * @param dbName    *          The db to which the table to be truncate belongs to    * @param tableName    *          The table to truncate    * @param partNames    *          List of partitions to truncate. NULL will truncate the whole table/all partitions    * @throws MetaException Failure in the RDBMS or storage    * @throws TException Thrift transport exception    */
name|void
name|truncateTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Truncate the table/partitions in the DEFAULT database.    * @param catName catalog name    * @param dbName    *          The db to which the table to be truncate belongs to    * @param tableName    *          The table to truncate    * @param partNames    *          List of partitions to truncate. NULL will truncate the whole table/all partitions    * @throws MetaException Failure in the RDBMS or storage    * @throws TException Thrift transport exception    */
name|void
name|truncateTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Recycles the files recursively from the input path to the cmroot directory either by copying or moving it.    *    * @param request Inputs for path of the data files to be recycled to cmroot and    *                isPurge flag when set to true files which needs to be recycled are not moved to Trash    * @return Response which is currently void    */
name|CmRecycleResponse
name|recycleDirToCmPath
parameter_list|(
name|CmRecycleRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Check whether a table exists in the default catalog.    * @param databaseName database name    * @param tableName table name    * @return true if the indicated table exists, false if not    * @throws MetaException error fetching form the RDBMS    * @throws TException thrift transport error    * @throws UnknownDBException the indicated database does not exist.    */
name|boolean
name|tableExists
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Check whether a table exists.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @return true if the indicated table exists, false if not    * @throws MetaException error fetching form the RDBMS    * @throws TException thrift transport error    * @throws UnknownDBException the indicated database does not exist.    */
name|boolean
name|tableExists
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get a Database Object in the default catalog    * @param databaseName  name of the database to fetch    * @return the database    * @throws NoSuchObjectException The database does not exist    * @throws MetaException Could not fetch the database    * @throws TException A thrift communication error occurred    */
name|Database
name|getDatabase
parameter_list|(
name|String
name|databaseName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a database.    * @param catalogName catalog name.  Can be null, in which case    * {@link Warehouse#DEFAULT_CATALOG_NAME} will be assumed.    * @param databaseName database name    * @return the database object    * @throws NoSuchObjectException No database with this name exists in the specified catalog    * @throws MetaException something went wrong, usually in the RDBMS    * @throws TException general thrift error    */
name|Database
name|getDatabase
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|databaseName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a table object in the default catalog.    *    * @param dbName    *          The database the table is located in.    * @param tableName    *          Name of the table to fetch.    * @return An object representing the table.    * @throws MetaException    *           Could not fetch the table    * @throws TException    *           A thrift communication error occurred    * @throws NoSuchObjectException    *           In case the table wasn't found.    */
name|Table
name|getTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get a table object.    * @param catName catalog the table is in.    * @param dbName database the table is in.    * @param tableName table name.    * @return table object.    * @throws MetaException Something went wrong, usually in the RDBMS.    * @throws TException general thrift error.    */
name|Table
name|getTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get tables as objects (rather than just fetching their names).  This is more expensive and    * should only be used if you actually need all the information about the tables.    * @param dbName    *          The database the tables are located in.    * @param tableNames    *          The names of the tables to fetch    * @return A list of objects representing the tables.    *          Only the tables that can be retrieved from the database are returned.  For example,    *          if none of the requested tables could be retrieved, an empty list is returned.    *          There is no guarantee of ordering of the returned tables.    * @throws InvalidOperationException    *          The input to this operation is invalid (e.g., the list of tables names is null)    * @throws UnknownDBException    *          The requested database could not be fetched.    * @throws TException    *          A thrift communication error occurred    * @throws MetaException    *          Any other errors    */
name|List
argument_list|<
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
comment|/**    * Get tables as objects (rather than just fetching their names).  This is more expensive and    * should only be used if you actually need all the information about the tables.    * @param catName catalog name    * @param dbName    *          The database the tables are located in.    * @param tableNames    *          The names of the tables to fetch    * @return A list of objects representing the tables.    *          Only the tables that can be retrieved from the database are returned.  For example,    *          if none of the requested tables could be retrieved, an empty list is returned.    *          There is no guarantee of ordering of the returned tables.    * @throws InvalidOperationException    *          The input to this operation is invalid (e.g., the list of tables names is null)    * @throws UnknownDBException    *          The requested database could not be fetched.    * @throws TException    *          A thrift communication error occurred    * @throws MetaException    *          Any other errors    */
name|List
argument_list|<
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
comment|/**    * Returns the invalidation information for the materialized views given as input.    */
name|Map
argument_list|<
name|String
argument_list|,
name|Materialization
argument_list|>
name|getMaterializationsInvalidationInfo
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|viewNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
comment|/**    * Updates the creation metadata for the materialized view.    */
name|void
name|updateCreationMetadata
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|CreationMetadata
name|cm
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Updates the creation metadata for the materialized view.    */
name|void
name|updateCreationMetadata
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|CreationMetadata
name|cm
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**   /**    * Add a partition to a table and get back the resulting Partition object.  This creates an    * empty default partition with just the partition values set.    * @param dbName database name    * @param tableName table name    * @param partVals partition values    * @return the partition object    * @throws InvalidObjectException no such table    * @throws AlreadyExistsException a partition with these values already exists    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|Partition
name|appendPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Add a partition to a table and get back the resulting Partition object.  This creates an    * empty default partition with just the partition values set.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param partVals partition values    * @return the partition object    * @throws InvalidObjectException no such table    * @throws AlreadyExistsException a partition with these values already exists    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|Partition
name|appendPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Add a partition to a table and get back the resulting Partition object.  This creates an    * empty default partition with just the partition value set.    * @param dbName database name.    * @param tableName table name.    * @param name name of the partition, should be in the form partkey=partval.    * @return new partition object.    * @throws InvalidObjectException No such table.    * @throws AlreadyExistsException Partition of this name already exists.    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|Partition
name|appendPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Add a partition to a table and get back the resulting Partition object.  This creates an    * empty default partition with just the partition value set.    * @param catName catalog name.    * @param dbName database name.    * @param tableName table name.    * @param name name of the partition, should be in the form partkey=partval.    * @return new partition object.    * @throws InvalidObjectException No such table.    * @throws AlreadyExistsException Partition of this name already exists.    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|Partition
name|appendPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Add a partition to the table.    *    * @param partition    *          The partition to add    * @return The partition added    * @throws InvalidObjectException    *           Could not find table to add to    * @throws AlreadyExistsException    *           Partition already exists    * @throws MetaException    *           Could not add partition    * @throws TException    *           Thrift exception    */
name|Partition
name|add_partition
parameter_list|(
name|Partition
name|partition
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Add partitions to the table.    *    * @param partitions    *          The partitions to add    * @throws InvalidObjectException    *           Could not find table to add to    * @throws AlreadyExistsException    *           Partition already exists    * @throws MetaException    *           Could not add partition    * @throws TException    *           Thrift exception    */
name|int
name|add_partitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Add a partitions using a spec proxy.    * @param partitionSpec partition spec proxy    * @return number of partitions that were added    * @throws InvalidObjectException the partitionSpec is malformed.    * @throws AlreadyExistsException one or more of the partitions already exist.    * @throws MetaException error accessing the RDBMS or storage.    * @throws TException thrift transport error    */
name|int
name|add_partitions_pspec
parameter_list|(
name|PartitionSpecProxy
name|partitionSpec
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Add partitions to the table.    *    * @param partitions The partitions to add    * @param ifNotExists only add partitions if they don't exist    * @param needResults Whether the results are needed    * @return the partitions that were added, or null if !needResults    */
name|List
argument_list|<
name|Partition
argument_list|>
name|add_partitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|boolean
name|needResults
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a partition.    * @param dbName database name    * @param tblName table name    * @param partVals partition values for this partition, must be in the same order as the    *                 partition keys of the table.    * @return the partition object    * @throws NoSuchObjectException no such partition    * @throws MetaException error access the RDBMS.    * @throws TException thrift transport error    */
name|Partition
name|getPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a partition.    * @param catName catalog name    * @param dbName database name    * @param tblName table name    * @param partVals partition values for this partition, must be in the same order as the    *                 partition keys of the table.    * @return the partition object    * @throws NoSuchObjectException no such partition    * @throws MetaException error access the RDBMS.    * @throws TException thrift transport error    */
name|Partition
name|getPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Move a partition from one table to another    * @param partitionSpecs key value pairs that describe the partition to be moved.    * @param sourceDb database of the source table    * @param sourceTable name of the source table    * @param destdb database of the destination table    * @param destTableName name of the destination table    * @return partition object    * @throws MetaException error accessing the RDBMS or storage    * @throws NoSuchObjectException no such table, for either source or destination table    * @throws InvalidObjectException error in partition specifications    * @throws TException thrift transport error    */
name|Partition
name|exchange_partition
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
parameter_list|,
name|String
name|sourceDb
parameter_list|,
name|String
name|sourceTable
parameter_list|,
name|String
name|destdb
parameter_list|,
name|String
name|destTableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Move a partition from one table to another    * @param partitionSpecs key value pairs that describe the partition to be moved.    * @param sourceCat catalog of the source table    * @param sourceDb database of the source table    * @param sourceTable name of the source table    * @param destCat catalog of the destination table, for now must the same as sourceCat    * @param destdb database of the destination table    * @param destTableName name of the destination table    * @return partition object    * @throws MetaException error accessing the RDBMS or storage    * @throws NoSuchObjectException no such table, for either source or destination table    * @throws InvalidObjectException error in partition specifications    * @throws TException thrift transport error    */
name|Partition
name|exchange_partition
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
parameter_list|,
name|String
name|sourceCat
parameter_list|,
name|String
name|sourceDb
parameter_list|,
name|String
name|sourceTable
parameter_list|,
name|String
name|destCat
parameter_list|,
name|String
name|destdb
parameter_list|,
name|String
name|destTableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|TException
function_decl|;
comment|/**    * With the one partitionSpecs to exchange, multiple partitions could be exchanged.    * e.g., year=2015/month/day, exchanging partition year=2015 results to all the partitions    * belonging to it exchanged. This function returns the list of affected partitions.    * @param partitionSpecs key value pairs that describe the partition(s) to be moved.    * @param sourceDb database of the source table    * @param sourceTable name of the source table    * @param destdb database of the destination table    * @param destTableName name of the destination table    * @throws MetaException error accessing the RDBMS or storage    * @throws NoSuchObjectException no such table, for either source or destination table    * @throws InvalidObjectException error in partition specifications    * @throws TException thrift transport error    * @return the list of the new partitions    */
name|List
argument_list|<
name|Partition
argument_list|>
name|exchange_partitions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
parameter_list|,
name|String
name|sourceDb
parameter_list|,
name|String
name|sourceTable
parameter_list|,
name|String
name|destdb
parameter_list|,
name|String
name|destTableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|TException
function_decl|;
comment|/**    * With the one partitionSpecs to exchange, multiple partitions could be exchanged.    * e.g., year=2015/month/day, exchanging partition year=2015 results to all the partitions    * belonging to it exchanged. This function returns the list of affected partitions.    * @param partitionSpecs key value pairs that describe the partition(s) to be moved.    * @param sourceCat catalog of the source table    * @param sourceDb database of the source table    * @param sourceTable name of the source table    * @param destCat catalog of the destination table, for now must the same as sourceCat    * @param destdb database of the destination table    * @param destTableName name of the destination table    * @throws MetaException error accessing the RDBMS or storage    * @throws NoSuchObjectException no such table, for either source or destination table    * @throws InvalidObjectException error in partition specifications    * @throws TException thrift transport error    * @return the list of the new partitions    */
name|List
argument_list|<
name|Partition
argument_list|>
name|exchange_partitions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
parameter_list|,
name|String
name|sourceCat
parameter_list|,
name|String
name|sourceDb
parameter_list|,
name|String
name|sourceTable
parameter_list|,
name|String
name|destCat
parameter_list|,
name|String
name|destdb
parameter_list|,
name|String
name|destTableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get a Partition by name.    * @param dbName database name.    * @param tblName table name.    * @param name - partition name i.e. 'ds=2010-02-03/ts=2010-02-03 18%3A16%3A01'    * @return the partition object    * @throws MetaException error access the RDBMS.    * @throws TException thrift transport error    */
name|Partition
name|getPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get a Partition by name.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param name - partition name i.e. 'ds=2010-02-03/ts=2010-02-03 18%3A16%3A01'    * @return the partition object    * @throws MetaException error access the RDBMS.    * @throws TException thrift transport error    */
name|Partition
name|getPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get a Partition along with authorization information.    * @param dbName database name    * @param tableName table name    * @param pvals partition values, must be in the same order as the tables partition keys    * @param userName name of the calling user    * @param groupNames groups the call    * @return the partition    * @throws MetaException error accessing the RDBMS    * @throws UnknownTableException no such table    * @throws NoSuchObjectException no such partition    * @throws TException thrift transport error    */
name|Partition
name|getPartitionWithAuthInfo
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|pvals
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get a Partition along with authorization information.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param pvals partition values, must be in the same order as the tables partition keys    * @param userName name of the calling user    * @param groupNames groups the call    * @return the partition    * @throws MetaException error accessing the RDBMS    * @throws UnknownTableException no such table    * @throws NoSuchObjectException no such partition    * @throws TException thrift transport error    */
name|Partition
name|getPartitionWithAuthInfo
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|pvals
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get a list of partittions for a table.    * @param db_name database name    * @param tbl_name table name    * @param max_parts maximum number of parts to return, -1 for all    * @return the list of partitions    * @throws NoSuchObjectException No such table.    * @throws MetaException error accessing RDBMS.    * @throws TException thrift transport error    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a list of partittions for a table.    * @param catName catalog name    * @param db_name database name    * @param tbl_name table name    * @param max_parts maximum number of parts to return, -1 for all    * @return the list of partitions    * @throws NoSuchObjectException No such table.    * @throws MetaException error accessing RDBMS.    * @throws TException thrift transport error    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|int
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a list of partitions from a table, returned in the form of PartitionSpecProxy    * @param dbName database name.    * @param tableName table name.    * @param maxParts maximum number of partitions to return, or -1 for all    * @return a PartitionSpecProxy    * @throws TException thrift transport error    */
name|PartitionSpecProxy
name|listPartitionSpecs
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|maxParts
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get a list of partitions from a table, returned in the form of PartitionSpecProxy    * @param catName catalog name.    * @param dbName database name.    * @param tableName table name.    * @param maxParts maximum number of partitions to return, or -1 for all    * @return a PartitionSpecProxy    * @throws TException thrift transport error    */
name|PartitionSpecProxy
name|listPartitionSpecs
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|maxParts
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get a list of partitions based on a (possibly partial) list of partition values.    * @param db_name database name.    * @param tbl_name table name.    * @param part_vals partition values, in order of the table partition keys.  These can be    *                  partial, or .* to match all values for a particular key.    * @param max_parts maximum number of partitions to return, or -1 for all.    * @return list of partitions    * @throws NoSuchObjectException no such table.    * @throws MetaException error accessing the database or processing the partition values.    * @throws TException thrift transport error.    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a list of partitions based on a (possibly partial) list of partition values.    * @param catName catalog name.    * @param db_name database name.    * @param tbl_name table name.    * @param part_vals partition values, in order of the table partition keys.  These can be    *                  partial, or .* to match all values for a particular key.    * @param max_parts maximum number of partitions to return, or -1 for all.    * @return list of partitions    * @throws NoSuchObjectException no such table.    * @throws MetaException error accessing the database or processing the partition values.    * @throws TException thrift transport error.    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|int
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * List Names of partitions in a table.    * @param db_name database name.    * @param tbl_name table name.    * @param max_parts maximum number of parts of fetch, or -1 to fetch them all.    * @return list of partition names.    * @throws NoSuchObjectException No such table.    * @throws MetaException Error accessing the RDBMS.    * @throws TException thrift transport error    */
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * List Names of partitions in a table.    * @param catName catalog name.    * @param db_name database name.    * @param tbl_name table name.    * @param max_parts maximum number of parts of fetch, or -1 to fetch them all.    * @return list of partition names.    * @throws NoSuchObjectException No such table.    * @throws MetaException Error accessing the RDBMS.    * @throws TException thrift transport error    */
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|int
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a list of partition names matching a partial specification of the partition values.    * @param db_name database name.    * @param tbl_name table name.    * @param part_vals partial list of partition values.  These must be given in the order of the    *                  partition keys.  If you wish to accept any value for a particular key you    *                  can pass ".*" for that value in this list.    * @param max_parts maximum number of partition names to return, or -1 to return all that are    *                  found.    * @return list of matching partition names.    * @throws MetaException error accessing the RDBMS.    * @throws TException thrift transport error.    * @throws NoSuchObjectException no such table.    */
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get a list of partition names matching a partial specification of the partition values.    * @param catName catalog name.    * @param db_name database name.    * @param tbl_name table name.    * @param part_vals partial list of partition values.  These must be given in the order of the    *                  partition keys.  If you wish to accept any value for a particular key you    *                  can pass ".*" for that value in this list.    * @param max_parts maximum number of partition names to return, or -1 to return all that are    *                  found.    * @return list of matching partition names.    * @throws MetaException error accessing the RDBMS.    * @throws TException thrift transport error.    * @throws NoSuchObjectException no such table.    */
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|int
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get a list of partition values    * @param request request    * @return reponse    * @throws MetaException error accessing RDBMS    * @throws TException thrift transport error    * @throws NoSuchObjectException no such table    */
name|PartitionValuesResponse
name|listPartitionValues
parameter_list|(
name|PartitionValuesRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get number of partitions matching specified filter    * @param dbName the database name    * @param tableName the table name    * @param filter the filter string,    *    for example "part1 = \"p1_abc\" and part2&lt;= "\p2_test\"". Filtering can    *    be done only on string partition keys.    * @return number of partitions    * @throws MetaException error accessing RDBMS or processing the filter    * @throws NoSuchObjectException no such table    * @throws TException thrift transport error    */
name|int
name|getNumPartitionsByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get number of partitions matching specified filter    * @param catName catalog name    * @param dbName the database name    * @param tableName the table name    * @param filter the filter string,    *    for example "part1 = \"p1_abc\" and part2&lt;= "\p2_test\"". Filtering can    *    be done only on string partition keys.    * @return number of partitions    * @throws MetaException error accessing RDBMS or processing the filter    * @throws NoSuchObjectException no such table    * @throws TException thrift transport error    */
name|int
name|getNumPartitionsByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get list of partitions matching specified filter    * @param db_name the database name    * @param tbl_name the table name    * @param filter the filter string,    *    for example "part1 = \"p1_abc\" and part2&lt;= "\p2_test\"". Filtering can    *    be done only on string partition keys.    * @param max_parts the maximum number of partitions to return,    *    all partitions are returned if -1 is passed    * @return list of partitions    * @throws MetaException Error accessing the RDBMS or processing the filter.    * @throws NoSuchObjectException No such table.    * @throws TException thrift transport error    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsByFilter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get list of partitions matching specified filter    * @param catName catalog name.    * @param db_name the database name    * @param tbl_name the table name    * @param filter the filter string,    *    for example "part1 = \"p1_abc\" and part2&lt;= "\p2_test\"". Filtering can    *    be done only on string partition keys.    * @param max_parts the maximum number of partitions to return,    *    all partitions are returned if -1 is passed    * @return list of partitions    * @throws MetaException Error accessing the RDBMS or processing the filter.    * @throws NoSuchObjectException No such table.    * @throws TException thrift transport error    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|int
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get a list of partitions in a PartitionSpec, using a filter to select which partitions to    * fetch.    * @param db_name database name    * @param tbl_name table name    * @param filter SQL where clause filter    * @param max_parts maximum number of partitions to fetch, or -1 for all    * @return PartitionSpec    * @throws MetaException error accessing RDBMS or processing the filter    * @throws NoSuchObjectException No table matches the request    * @throws TException thrift transport error    */
name|PartitionSpecProxy
name|listPartitionSpecsByFilter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|int
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get a list of partitions in a PartitionSpec, using a filter to select which partitions to    * fetch.    * @param catName catalog name    * @param db_name database name    * @param tbl_name table name    * @param filter SQL where clause filter    * @param max_parts maximum number of partitions to fetch, or -1 for all    * @return PartitionSpec    * @throws MetaException error accessing RDBMS or processing the filter    * @throws NoSuchObjectException No table matches the request    * @throws TException thrift transport error    */
name|PartitionSpecProxy
name|listPartitionSpecsByFilter
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|int
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get list of partitions matching specified serialized expression    * @param db_name the database name    * @param tbl_name the table name    * @param expr expression, serialized from ExprNodeDesc    * @param max_parts the maximum number of partitions to return,    *    all partitions are returned if -1 is passed    * @param default_partition_name Default partition name from configuration. If blank, the    *    metastore server-side configuration is used.    * @param result the resulting list of partitions    * @return whether the resulting list contains partitions which may or may not match the expr    * @throws TException thrift transport error or error executing the filter.    */
name|boolean
name|listPartitionsByExpr
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|default_partition_name
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get list of partitions matching specified serialized expression    * @param catName catalog name    * @param db_name the database name    * @param tbl_name the table name    * @param expr expression, serialized from ExprNodeDesc    * @param max_parts the maximum number of partitions to return,    *    all partitions are returned if -1 is passed    * @param default_partition_name Default partition name from configuration. If blank, the    *    metastore server-side configuration is used.    * @param result the resulting list of partitions    * @return whether the resulting list contains partitions which may or may not match the expr    * @throws TException thrift transport error or error executing the filter.    */
name|boolean
name|listPartitionsByExpr
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|default_partition_name
parameter_list|,
name|int
name|max_parts
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * List partitions, fetching the authorization information along with the partitions.    * @param dbName database name    * @param tableName table name    * @param maxParts maximum number of partitions to fetch, or -1 for all    * @param userName user to fetch privileges for    * @param groupNames groups to fetch privileges for    * @return the list of partitions    * @throws NoSuchObjectException no partitions matching the criteria were found    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsWithAuthInfo
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * List partitions, fetching the authorization information along with the partitions.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param maxParts maximum number of partitions to fetch, or -1 for all    * @param userName user to fetch privileges for    * @param groupNames groups to fetch privileges for    * @return the list of partitions    * @throws NoSuchObjectException no partitions matching the criteria were found    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsWithAuthInfo
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|maxParts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get partitions by a list of partition names.    * @param db_name database name    * @param tbl_name table name    * @param part_names list of partition names    * @return list of Partition objects    * @throws NoSuchObjectException No such partitions    * @throws MetaException error accessing the RDBMS.    * @throws TException thrift transport error    */
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_names
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get partitions by a list of partition names.    * @param catName catalog name    * @param db_name database name    * @param tbl_name table name    * @param part_names list of partition names    * @return list of Partition objects    * @throws NoSuchObjectException No such partitions    * @throws MetaException error accessing the RDBMS.    * @throws TException thrift transport error    */
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_names
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * List partitions along with privilege information for a user or groups    * @param dbName database name    * @param tableName table name    * @param partialPvals partition values, can be partial    * @param maxParts maximum number of partitions to fetch, or -1 for all    * @param userName user to fetch privilege information for    * @param groupNames group to fetch privilege information for    * @return the list of partitions    * @throws NoSuchObjectException no partitions matching the criteria were found    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsWithAuthInfo
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partialPvals
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * List partitions along with privilege information for a user or groups    * @param dbName database name    * @param tableName table name    * @param partialPvals partition values, can be partial    * @param maxParts maximum number of partitions to fetch, or -1 for all    * @param userName user to fetch privilege information for    * @param groupNames group to fetch privilege information for    * @return the list of partitions    * @throws NoSuchObjectException no partitions matching the criteria were found    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsWithAuthInfo
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partialPvals
parameter_list|,
name|int
name|maxParts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Mark an event as having occurred on a partition.    * @param db_name database name    * @param tbl_name table name    * @param partKVs key value pairs that describe the partition    * @param eventType type of the event    * @throws MetaException error access the RDBMS    * @throws NoSuchObjectException never throws this AFAICT    * @throws TException thrift transport error    * @throws UnknownTableException no such table    * @throws UnknownDBException no such database    * @throws UnknownPartitionException no such partition    * @throws InvalidPartitionException partition partKVs is invalid    */
name|void
name|markPartitionForEvent
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|,
name|PartitionEventType
name|eventType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|UnknownPartitionException
throws|,
name|InvalidPartitionException
function_decl|;
comment|/**    * Mark an event as having occurred on a partition.    * @param catName catalog name    * @param db_name database name    * @param tbl_name table name    * @param partKVs key value pairs that describe the partition    * @param eventType type of the event    * @throws MetaException error access the RDBMS    * @throws NoSuchObjectException never throws this AFAICT    * @throws TException thrift transport error    * @throws UnknownTableException no such table    * @throws UnknownDBException no such database    * @throws UnknownPartitionException no such partition    * @throws InvalidPartitionException partition partKVs is invalid    */
name|void
name|markPartitionForEvent
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|,
name|PartitionEventType
name|eventType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|UnknownPartitionException
throws|,
name|InvalidPartitionException
function_decl|;
comment|/**    * Determine whether a partition has been marked with a particular event type.    * @param db_name database name    * @param tbl_name table name.    * @param partKVs key value pairs that describe the partition.    * @param eventType event type    * @throws MetaException error access the RDBMS    * @throws NoSuchObjectException never throws this AFAICT    * @throws TException thrift transport error    * @throws UnknownTableException no such table    * @throws UnknownDBException no such database    * @throws UnknownPartitionException no such partition    * @throws InvalidPartitionException partition partKVs is invalid    */
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|,
name|PartitionEventType
name|eventType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|UnknownPartitionException
throws|,
name|InvalidPartitionException
function_decl|;
comment|/**    * Determine whether a partition has been marked with a particular event type.    * @param catName catalog name    * @param db_name database name    * @param tbl_name table name.    * @param partKVs key value pairs that describe the partition.    * @param eventType event type    * @throws MetaException error access the RDBMS    * @throws NoSuchObjectException never throws this AFAICT    * @throws TException thrift transport error    * @throws UnknownTableException no such table    * @throws UnknownDBException no such database    * @throws UnknownPartitionException no such partition    * @throws InvalidPartitionException partition partKVs is invalid    */
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|,
name|PartitionEventType
name|eventType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|UnknownPartitionException
throws|,
name|InvalidPartitionException
function_decl|;
comment|/**    * @param partVals    * @throws TException    * @throws MetaException    */
name|void
name|validatePartitionNameCharacters
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|TException
throws|,
name|MetaException
function_decl|;
comment|/**    * @param tbl    * @throws AlreadyExistsException    * @throws InvalidObjectException    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#create_table(org.apache.hadoop.hive.metastore.api.Table)    */
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Alter a table    * @param databaseName database name    * @param tblName table name    * @param table new table object, should be complete representation of the table, not just the    *             things you want to change.    * @throws InvalidOperationException something is wrong with the new table object or an    * operation was attempted that is not allowed (such as changing partition columns).    * @throws MetaException something went wrong, usually in the RDBMS    * @throws TException general thrift exception    */
name|void
name|alter_table
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Alter a table. Equivalent to    * {@link #alter_table(String, String, String, Table, EnvironmentContext)} with    * EnvironmentContext set to null.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param newTable new table object, should be complete representation of the table, not just the    *                 things you want to change.    * @throws InvalidOperationException something is wrong with the new table object or an    * operation was attempted that is not allowed (such as changing partition columns).    * @throws MetaException something went wrong, usually in the RDBMS    * @throws TException general thrift exception    */
specifier|default
name|void
name|alter_table
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|newTable
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|alter_table
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newTable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Alter a table.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param newTable new table object, should be complete representation of the table, not just the    *                 things you want to change.    * @param envContext options for the alter.    * @throws InvalidOperationException something is wrong with the new table object or an    * operation was attempted that is not allowed (such as changing partition columns).    * @throws MetaException something went wrong, usually in the RDBMS    * @throws TException general thrift exception    */
name|void
name|alter_table
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|newTable
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @deprecated Use alter_table_with_environmentContext instead of alter_table with cascade option    * passed in EnvironmentContext using {@code StatsSetupConst.CASCADE}    */
annotation|@
name|Deprecated
name|void
name|alter_table
parameter_list|(
name|String
name|defaultDatabaseName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|table
parameter_list|,
name|boolean
name|cascade
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Alter a table.    * @param databaseName database name    * @param tblName table name    * @param table new table object, should be complete representation of the table, not just the    *              things you want to change.    * @param environmentContext options for the alter.    * @throws InvalidOperationException something is wrong with the new table object or an    * operation was attempted that is not allowed (such as changing partition columns).    * @throws MetaException something went wrong, usually in the RDBMS    * @throws TException general thrift exception    */
name|void
name|alter_table_with_environmentContext
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|table
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Create a new database.    * @param db database object.  If the catalog name is null it will be assumed to be    *           {@link Warehouse#DEFAULT_CATALOG_NAME}.    * @throws InvalidObjectException There is something wrong with the database object.    * @throws AlreadyExistsException There is already a database of this name in the specified    * catalog.    * @throws MetaException something went wrong, usually in the RDBMS    * @throws TException general thrift error    */
name|void
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a database.    * @param name name of the database to drop.    * @throws NoSuchObjectException No such database exists.    * @throws InvalidOperationException The database cannot be dropped because it is not empty.    * @throws MetaException something went wrong, usually either in the RDMBS or in storage.    * @throws TException general thrift error.    */
name|void
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    *    * Drop a database.    * @param name name of the database to drop.    * @param deleteData whether to drop the underlying HDFS directory.    * @param ignoreUnknownDb whether to ignore an attempt to drop a non-existant database    * @throws NoSuchObjectException No database of this name exists in the specified catalog and    * ignoreUnknownDb is false.    * @throws InvalidOperationException The database cannot be dropped because it is not empty.    * @throws MetaException something went wrong, usually either in the RDMBS or in storage.    * @throws TException general thrift error.    */
name|void
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownDb
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    *    * Drop a database.    * @param name database name.    * @param deleteData whether to drop the underlying HDFS directory.    * @param ignoreUnknownDb whether to ignore an attempt to drop a non-existant database    * @param cascade whether to drop contained tables, etc.  If this is false and there are    *                objects still in the database the drop will fail.    * @throws NoSuchObjectException No database of this name exists in the specified catalog and    * ignoreUnknownDb is false.    * @throws InvalidOperationException The database contains objects and cascade is false.    * @throws MetaException something went wrong, usually either in the RDBMS or storage.    * @throws TException general thrift error.    */
name|void
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownDb
parameter_list|,
name|boolean
name|cascade
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a database.    * @param catName Catalog name.  This can be null, in which case    *                {@link Warehouse#DEFAULT_CATALOG_NAME} will be assumed.    * @param dbName database name.    * @param deleteData whether to drop the underlying HDFS directory.    * @param ignoreUnknownDb whether to ignore an attempt to drop a non-existant database    * @param cascade whether to drop contained tables, etc.  If this is false and there are    *                objects still in the database the drop will fail.    * @throws NoSuchObjectException No database of this name exists in the specified catalog and    * ignoreUnknownDb is false.    * @throws InvalidOperationException The database contains objects and cascade is false.    * @throws MetaException something went wrong, usually either in the RDBMS or storage.    * @throws TException general thrift error.    */
name|void
name|dropDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownDb
parameter_list|,
name|boolean
name|cascade
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a database.  Equivalent to    * {@link #dropDatabase(String, String, boolean, boolean, boolean)} with cascade = false.    * @param catName Catalog name.  This can be null, in which case    *                {@link Warehouse#DEFAULT_CATALOG_NAME} will be assumed.    * @param dbName database name.    * @param deleteData whether to drop the underlying HDFS directory.    * @param ignoreUnknownDb whether to ignore an attempt to drop a non-existant database    * @throws NoSuchObjectException No database of this name exists in the specified catalog and    * ignoreUnknownDb is false.    * @throws InvalidOperationException The database contains objects and cascade is false.    * @throws MetaException something went wrong, usually either in the RDBMS or storage.    * @throws TException general thrift error.    */
specifier|default
name|void
name|dropDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownDb
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|dropDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|deleteData
argument_list|,
name|ignoreUnknownDb
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drop a database.  Equivalent to    * {@link #dropDatabase(String, String, boolean, boolean, boolean)} with deleteData =    * true, ignoreUnknownDb = false, cascade = false.    * @param catName Catalog name.  This can be null, in which case    *                {@link Warehouse#DEFAULT_CATALOG_NAME} will be assumed.    * @param dbName database name.    * @throws NoSuchObjectException No database of this name exists in the specified catalog and    * ignoreUnknownDb is false.    * @throws InvalidOperationException The database contains objects and cascade is false.    * @throws MetaException something went wrong, usually either in the RDBMS or storage.    * @throws TException general thrift error.    */
specifier|default
name|void
name|dropDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|dropDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Alter a database.    * @param name database name.    * @param db new database object.    * @throws NoSuchObjectException No database of this name exists in the specified catalog.    * @throws MetaException something went wrong, usually in the RDBMS.    * @throws TException general thrift error.    */
name|void
name|alterDatabase
parameter_list|(
name|String
name|name
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Alter a database.    * @param catName Catalog name.  This can be null, in which case    *                {@link Warehouse#DEFAULT_CATALOG_NAME} will be assumed.    * @param dbName database name.    * @param newDb new database object.    * @throws NoSuchObjectException No database of this name exists in the specified catalog.    * @throws MetaException something went wrong, usually in the RDBMS.    * @throws TException general thrift error.    */
name|void
name|alterDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|Database
name|newDb
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a partition.    * @param db_name database name    * @param tbl_name table name    * @param part_vals partition values, in the same order as the partition keys    * @param deleteData    *          delete the underlying data or just delete the partition in metadata    * @return true or false    * @throws NoSuchObjectException partition does not exist    * @throws MetaException error accessing the RDBMS or the storage.    * @throws TException thrift transport error    */
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a partition.    * @param catName catalog name.    * @param db_name database name    * @param tbl_name table name    * @param part_vals partition values, in the same order as the partition keys    * @param deleteData    *          delete the underlying data or just delete the partition in metadata    * @return true or false    * @throws NoSuchObjectException partition does not exist    * @throws MetaException error accessing the RDBMS or the storage.    * @throws TException thrift transport error    */
name|boolean
name|dropPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a partition with the option to purge the partition data directly,    * rather than to move data to trash.    * @param db_name Name of the database.    * @param tbl_name Name of the table.    * @param part_vals Specification of the partitions being dropped.    * @param options PartitionDropOptions for the operation.    * @return True (if partitions are dropped), else false.    * @throws NoSuchObjectException partition does not exist    * @throws MetaException error accessing the RDBMS or the storage.    * @throws TException thrift transport error.    */
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|PartitionDropOptions
name|options
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a partition with the option to purge the partition data directly,    * rather than to move data to trash.    * @param catName catalog name.    * @param db_name Name of the database.    * @param tbl_name Name of the table.    * @param part_vals Specification of the partitions being dropped.    * @param options PartitionDropOptions for the operation.    * @return True (if partitions are dropped), else false.    * @throws NoSuchObjectException partition does not exist    * @throws MetaException error accessing the RDBMS or the storage.    * @throws TException thrift transport error.    */
name|boolean
name|dropPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|PartitionDropOptions
name|options
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop partitions based on an expression.    * @param dbName database name.    * @param tblName table name.    * @param partExprs I don't understand this fully, so can't completely explain it.  The second    *                  half of the object pair is an expression used to determine which partitions    *                  to drop.  The first half has something to do with archive level, but I    *                  don't understand what.  I'm also not sure what happens if you pass multiple    *                  expressions.    * @param deleteData whether to delete the data as well as the metadata.    * @param ifExists if true, it is not an error if no partitions match the expression(s).    * @return list of deleted partitions.    * @throws NoSuchObjectException No partition matches the expression(s), and ifExists was false.    * @throws MetaException error access the RDBMS or storage.    * @throws TException Thrift transport error.    */
name|List
argument_list|<
name|Partition
argument_list|>
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partExprs
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ifExists
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop partitions based on an expression.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param partExprs I don't understand this fully, so can't completely explain it.  The second    *                  half of the object pair is an expression used to determine which partitions    *                  to drop.  The first half has something to do with archive level, but I    *                  don't understand what.  I'm also not sure what happens if you pass multiple    *                  expressions.    * @param deleteData whether to delete the data as well as the metadata.    * @param ifExists if true, it is not an error if no partitions match the expression(s).    * @return list of deleted partitions.    * @throws NoSuchObjectException No partition matches the expression(s), and ifExists was false.    * @throws MetaException error access the RDBMS or storage.    * @throws TException Thrift transport error.    */
specifier|default
name|List
argument_list|<
name|Partition
argument_list|>
name|dropPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partExprs
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ifExists
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|dropPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partExprs
argument_list|,
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
operator|.
name|deleteData
argument_list|(
name|deleteData
argument_list|)
operator|.
name|ifExists
argument_list|(
name|ifExists
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Drop partitions based on an expression.    * @param dbName database name.    * @param tblName table name.    * @param partExprs I don't understand this fully, so can't completely explain it.  The second    *                  half of the object pair is an expression used to determine which partitions    *                  to drop.  The first half has something to do with archive level, but I    *                  don't understand what.  I'm also not sure what happens if you pass multiple    *                  expressions.    * @param deleteData whether to delete the data as well as the metadata.    * @param ifExists if true, it is not an error if no partitions match the expression(s).    * @param needResults if true, the list of deleted partitions will be returned, if not, null    *                    will be returned.    * @return list of deleted partitions.    * @throws NoSuchObjectException No partition matches the expression(s), and ifExists was false.    * @throws MetaException error access the RDBMS or storage.    * @throws TException Thrift transport error.    * @deprecated Use {@link #dropPartitions(String, String, String, List, boolean, boolean, boolean)}    */
annotation|@
name|Deprecated
name|List
argument_list|<
name|Partition
argument_list|>
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partExprs
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|boolean
name|needResults
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop partitions based on an expression.    * @param catName catalog name.    * @param dbName database name.    * @param tblName table name.    * @param partExprs I don't understand this fully, so can't completely explain it.  The second    *                  half of the object pair is an expression used to determine which partitions    *                  to drop.  The first half has something to do with archive level, but I    *                  don't understand what.  I'm also not sure what happens if you pass multiple    *                  expressions.    * @param deleteData whether to delete the data as well as the metadata.    * @param ifExists if true, it is not an error if no partitions match the expression(s).    * @param needResults if true, the list of deleted partitions will be returned, if not, null    *                    will be returned.    * @return list of deleted partitions, if needResults is true    * @throws NoSuchObjectException No partition matches the expression(s), and ifExists was false.    * @throws MetaException error access the RDBMS or storage.    * @throws TException Thrift transport error.    */
specifier|default
name|List
argument_list|<
name|Partition
argument_list|>
name|dropPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partExprs
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|boolean
name|needResults
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|dropPartitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partExprs
argument_list|,
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
operator|.
name|deleteData
argument_list|(
name|deleteData
argument_list|)
operator|.
name|ifExists
argument_list|(
name|ifExists
argument_list|)
operator|.
name|returnResults
argument_list|(
name|needResults
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Generalization of dropPartitions(),    * @param dbName Name of the database    * @param tblName Name of the table    * @param partExprs Partition-specification    * @param options Boolean options for dropping partitions    * @return List of Partitions dropped    * @throws NoSuchObjectException No partition matches the expression(s), and ifExists was false.    * @throws MetaException error access the RDBMS or storage.    * @throws TException On failure    */
name|List
argument_list|<
name|Partition
argument_list|>
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partExprs
parameter_list|,
name|PartitionDropOptions
name|options
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Generalization of dropPartitions(),    * @param catName catalog name    * @param dbName Name of the database    * @param tblName Name of the table    * @param partExprs Partition-specification    * @param options Boolean options for dropping partitions    * @return List of Partitions dropped    * @throws NoSuchObjectException No partition matches the expression(s), and ifExists was false.    * @throws MetaException error access the RDBMS or storage.    * @throws TException On failure    */
name|List
argument_list|<
name|Partition
argument_list|>
name|dropPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partExprs
parameter_list|,
name|PartitionDropOptions
name|options
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a partition.    * @param db_name database name.    * @param tbl_name table name.    * @param name partition name.    * @param deleteData whether to delete the data or just the metadata.    * @return true if the partition was dropped.    * @throws NoSuchObjectException no such partition.    * @throws MetaException error accessing the RDBMS or storage    * @throws TException thrift transport error    */
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a partition.    * @param catName catalog name.    * @param db_name database name.    * @param tbl_name table name.    * @param name partition name.    * @param deleteData whether to delete the data or just the metadata.    * @return true if the partition was dropped.    * @throws NoSuchObjectException no such partition.    * @throws MetaException error accessing the RDBMS or storage    * @throws TException thrift transport error    */
name|boolean
name|dropPartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * updates a partition to new partition    *    * @param dbName    *          database of the old partition    * @param tblName    *          table name of the old partition    * @param newPart    *          new partition    * @throws InvalidOperationException    *           if the old partition does not exist    * @throws MetaException    *           if error in updating metadata    * @throws TException    *           if error in communicating with metastore server    */
name|void
name|alter_partition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * updates a partition to new partition    * @param catName catalog name    * @param dbName    *          database of the old partition    * @param tblName    *          table name of the old partition    * @param newPart    *          new partition    * @throws InvalidOperationException    *           if the old partition does not exist    * @throws MetaException    *           if error in updating metadata    * @throws TException    *           if error in communicating with metastore server    */
specifier|default
name|void
name|alter_partition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|alter_partition
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newPart
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * updates a partition to new partition    *    * @param dbName    *          database of the old partition    * @param tblName    *          table name of the old partition    * @param newPart    *          new partition    * @throws InvalidOperationException    *           if the old partition does not exist    * @throws MetaException    *           if error in updating metadata    * @throws TException    *           if error in communicating with metastore server    */
name|void
name|alter_partition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Partition
name|newPart
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * updates a partition to new partition    * @param catName catalog name.    * @param dbName    *          database of the old partition    * @param tblName    *          table name of the old partition    * @param newPart    *          new partition    * @throws InvalidOperationException    *           if the old partition does not exist    * @throws MetaException    *           if error in updating metadata    * @throws TException    *           if error in communicating with metastore server    */
name|void
name|alter_partition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Partition
name|newPart
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * updates a list of partitions    *    * @param dbName    *          database of the old partition    * @param tblName    *          table name of the old partition    * @param newParts    *          list of partitions    * @throws InvalidOperationException    *           if the old partition does not exist    * @throws MetaException    *           if error in updating metadata    * @throws TException    *           if error in communicating with metastore server    */
name|void
name|alter_partitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * updates a list of partitions    *    * @param dbName    *          database of the old partition    * @param tblName    *          table name of the old partition    * @param newParts    *          list of partitions    * @param environmentContext key value pairs to pass to alter function.    * @throws InvalidOperationException    *           if the old partition does not exist    * @throws MetaException    *           if error in updating metadata    * @throws TException    *           if error in communicating with metastore server    */
name|void
name|alter_partitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * updates a list of partitions    * @param catName catalog name.    * @param dbName    *          database of the old partition    * @param tblName    *          table name of the old partition    * @param newParts    *          list of partitions    * @throws InvalidOperationException    *           if the old partition does not exist    * @throws MetaException    *           if error in updating metadata    * @throws TException    *           if error in communicating with metastore server    */
specifier|default
name|void
name|alter_partitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|alter_partitions
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newParts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * updates a list of partitions    * @param catName catalog name.    * @param dbName    *          database of the old partition    * @param tblName    *          table name of the old partition    * @param newParts    *          list of partitions    * @param environmentContext key value pairs to pass to alter function.    * @throws InvalidOperationException    *           if the old partition does not exist    * @throws MetaException    *           if error in updating metadata    * @throws TException    *           if error in communicating with metastore server    */
name|void
name|alter_partitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * rename a partition to a new partition    *    * @param dbname    *          database of the old partition    * @param tableName    *          table name of the old partition    * @param part_vals    *          values of the old partition    * @param newPart    *          new partition    * @throws InvalidOperationException    *           if srcFs and destFs are different    * @throws MetaException    *          if error in updating metadata    * @throws TException    *          if error in communicating with metastore server    */
name|void
name|renamePartition
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * rename a partition to a new partition    * @param catName catalog name.    * @param dbname    *          database of the old partition    * @param tableName    *          table name of the old partition    * @param part_vals    *          values of the old partition    * @param newPart    *          new partition    * @throws InvalidOperationException    *           if srcFs and destFs are different    * @throws MetaException    *          if error in updating metadata    * @throws TException    *          if error in communicating with metastore server    */
name|void
name|renamePartition
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get schema for a table, excluding the partition columns.    * @param db database name    * @param tableName table name    * @return  list of field schemas describing the table's schema    * @throws UnknownTableException no such table    * @throws UnknownDBException no such database    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFields
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get schema for a table, excluding the partition columns.    * @param catName catalog name    * @param db database name    * @param tableName table name    * @return  list of field schemas describing the table's schema    * @throws UnknownTableException no such table    * @throws UnknownDBException no such database    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFields
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get schema for a table, including the partition columns.    * @param db database name    * @param tableName table name    * @return  list of field schemas describing the table's schema    * @throws UnknownTableException no such table    * @throws UnknownDBException no such database    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getSchema
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get schema for a table, including the partition columns.    * @param catName catalog name    * @param db database name    * @param tableName table name    * @return  list of field schemas describing the table's schema    * @throws UnknownTableException no such table    * @throws UnknownDBException no such database    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getSchema
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * @param name    *          name of the configuration property to get the value of    * @param defaultValue    *          the value to return if property with the given name doesn't exist    * @return value of the specified configuration property    * @throws TException    * @throws ConfigValSecurityException    */
name|String
name|getConfigValue
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|TException
throws|,
name|ConfigValSecurityException
function_decl|;
comment|/**    *    * @param name    *          the partition name e.g. ("ds=2010-03-03/hr=12")    * @return a list containing the partition col values, in the same order as the name    * @throws MetaException    * @throws TException    */
name|List
argument_list|<
name|String
argument_list|>
name|partitionNameToVals
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    *    * @param name    *          the partition name e.g. ("ds=2010-03-03/hr=12")    * @return a map from the partition col to the value, as listed in the name    * @throws MetaException    * @throws TException    */
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionNameToSpec
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Write table level column statistics to persistent store    * @param statsObj    * @return boolean indicating the status of the operation    * @throws NoSuchObjectException    * @throws InvalidObjectException    * @throws MetaException    * @throws TException    * @throws InvalidInputException    */
name|boolean
name|updateTableColumnStatistics
parameter_list|(
name|ColumnStatistics
name|statsObj
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Write partition level column statistics to persistent store    * @param statsObj    * @return boolean indicating the status of the operation    * @throws NoSuchObjectException    * @throws InvalidObjectException    * @throws MetaException    * @throws TException    * @throws InvalidInputException    */
name|boolean
name|updatePartitionColumnStatistics
parameter_list|(
name|ColumnStatistics
name|statsObj
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Get the column statistics for a set of columns in a table.  This should only be used for    * non-partitioned tables.  For partitioned tables use    * {@link #getPartitionColumnStatistics(String, String, List, List)}.    * @param dbName database name    * @param tableName table name    * @param colNames list of column names    * @return list of column statistics objects, one per column    * @throws NoSuchObjectException no such table    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get the column statistics for a set of columns in a table.  This should only be used for    * non-partitioned tables.  For partitioned tables use    * {@link #getPartitionColumnStatistics(String, String, String, List, List)}.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param colNames list of column names    * @return list of column statistics objects, one per column    * @throws NoSuchObjectException no such table    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getTableColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get the column statistics for a set of columns in a partition.    * @param dbName database name    * @param tableName table name    * @param partNames partition names.  Since these are names they should be of the form    *                  "key1=value1[/key2=value2...]"    * @param colNames list of column names    * @return map of columns to statistics    * @throws NoSuchObjectException no such partition    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get the column statistics for a set of columns in a partition.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param partNames partition names.  Since these are names they should be of the form    *                  "key1=value1[/key2=value2...]"    * @param colNames list of column names    * @return map of columns to statistics    * @throws NoSuchObjectException no such partition    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Delete partition level column statistics given dbName, tableName, partName and colName, or    * all columns in a partition.    * @param dbName database name.    * @param tableName table name.    * @param partName partition name.    * @param colName column name, or null for all columns    * @return boolean indicating outcome of the operation    * @throws NoSuchObjectException no such partition exists    * @throws InvalidObjectException error dropping the stats data    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    * @throws InvalidInputException input is invalid or null.    */
name|boolean
name|deletePartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|TException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Delete partition level column statistics given dbName, tableName, partName and colName, or    * all columns in a partition.    * @param catName catalog name.    * @param dbName database name.    * @param tableName table name.    * @param partName partition name.    * @param colName column name, or null for all columns    * @return boolean indicating outcome of the operation    * @throws NoSuchObjectException no such partition exists    * @throws InvalidObjectException error dropping the stats data    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    * @throws InvalidInputException input is invalid or null.    */
name|boolean
name|deletePartitionColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|TException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Delete table level column statistics given dbName, tableName and colName, or all columns in    * a table.  This should be used for non-partitioned tables.    * @param dbName database name    * @param tableName table name    * @param colName column name, or null to drop stats for all columns    * @return boolean indicating the outcome of the operation    * @throws NoSuchObjectException No such table    * @throws MetaException error accessing the RDBMS    * @throws InvalidObjectException error dropping the stats    * @throws TException thrift transport error    * @throws InvalidInputException bad input, like a null table name.    */
name|boolean
name|deleteTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|TException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Delete table level column statistics given dbName, tableName and colName, or all columns in    * a table.  This should be used for non-partitioned tables.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param colName column name, or null to drop stats for all columns    * @return boolean indicating the outcome of the operation    * @throws NoSuchObjectException No such table    * @throws MetaException error accessing the RDBMS    * @throws InvalidObjectException error dropping the stats    * @throws TException thrift transport error    * @throws InvalidInputException bad input, like a null table name.    */
name|boolean
name|deleteTableColumnStatistics
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|TException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * @param role    *          role object    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|create_role
parameter_list|(
name|Role
name|role
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param role_name    *          role name    *    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|drop_role
parameter_list|(
name|String
name|role_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * list all role names    * @return list of names    * @throws TException    * @throws MetaException    */
name|List
argument_list|<
name|String
argument_list|>
name|listRoleNames
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    *    * @param role_name    * @param user_name    * @param principalType    * @param grantor    * @param grantorType    * @param grantOption    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|grant_role
parameter_list|(
name|String
name|role_name
parameter_list|,
name|String
name|user_name
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param role_name    *          role name    * @param user_name    *          user name    * @param principalType    *    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|revoke_role
parameter_list|(
name|String
name|role_name
parameter_list|,
name|String
name|user_name
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    *    * @param principalName    * @param principalType    * @return list of roles    * @throws MetaException    * @throws TException    */
name|List
argument_list|<
name|Role
argument_list|>
name|list_roles
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Return the privileges that the user, group have directly and indirectly through roles    * on the given hiveObject    * @param hiveObject    * @param user_name    * @param group_names    * @return the privilege set    * @throws MetaException    * @throws TException    */
name|PrincipalPrivilegeSet
name|get_privilege_set
parameter_list|(
name|HiveObjectRef
name|hiveObject
parameter_list|,
name|String
name|user_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Return the privileges that this principal has directly over the object (not through roles).    * @param principal_name    * @param principal_type    * @param hiveObject    * @return list of privileges    * @throws MetaException    * @throws TException    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_privileges
parameter_list|(
name|String
name|principal_name
parameter_list|,
name|PrincipalType
name|principal_type
parameter_list|,
name|HiveObjectRef
name|hiveObject
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param privileges    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|grant_privileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param privileges    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|revoke_privileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param revokePrivileges    * @param authorizer    * @param objToRefresh    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|refresh_privileges
parameter_list|(
name|HiveObjectRef
name|objToRefresh
parameter_list|,
name|String
name|authorizer
parameter_list|,
name|PrivilegeBag
name|grantPrivileges
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * This is expected to be a no-op when in local mode,    * which means that the implementation will return null.    * @param owner the intended owner for the token    * @param renewerKerberosPrincipalName    * @return the string of the token    * @throws MetaException    * @throws TException    */
name|String
name|getDelegationToken
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|renewerKerberosPrincipalName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param tokenStrForm    * @return the new expiration time    * @throws MetaException    * @throws TException    */
name|long
name|renewDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param tokenStrForm    * @throws MetaException    * @throws TException    */
name|void
name|cancelDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
name|String
name|getTokenStrForm
parameter_list|()
throws|throws
name|IOException
function_decl|;
name|boolean
name|addToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|,
name|String
name|delegationToken
parameter_list|)
throws|throws
name|TException
function_decl|;
name|boolean
name|removeToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
throws|throws
name|TException
function_decl|;
name|String
name|getToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
throws|throws
name|TException
function_decl|;
name|List
argument_list|<
name|String
argument_list|>
name|getAllTokenIdentifiers
parameter_list|()
throws|throws
name|TException
function_decl|;
name|int
name|addMasterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|updateMasterKey
parameter_list|(
name|Integer
name|seqNo
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|boolean
name|removeMasterKey
parameter_list|(
name|Integer
name|keySeq
parameter_list|)
throws|throws
name|TException
function_decl|;
name|String
index|[]
name|getMasterKeys
parameter_list|()
throws|throws
name|TException
function_decl|;
comment|/**    * Create a new function.    * @param func function specification    * @throws InvalidObjectException the function object is invalid    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|void
name|createFunction
parameter_list|(
name|Function
name|func
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Alter a function.    * @param dbName database name.    * @param funcName function name.    * @param newFunction new function specification.  This should be complete, not just the changes.    * @throws InvalidObjectException the function object is invalid    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|void
name|alterFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|,
name|Function
name|newFunction
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Alter a function.    * @param catName catalog name.    * @param dbName database name.    * @param funcName function name.    * @param newFunction new function specification.  This should be complete, not just the changes.    * @throws InvalidObjectException the function object is invalid    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|void
name|alterFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|,
name|Function
name|newFunction
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a function.    * @param dbName database name.    * @param funcName function name.    * @throws MetaException error accessing the RDBMS    * @throws NoSuchObjectException no such function    * @throws InvalidObjectException not sure when this is thrown    * @throws InvalidInputException not sure when this is thrown    * @throws TException thrift transport error    */
name|void
name|dropFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a function.    * @param catName catalog name.    * @param dbName database name.    * @param funcName function name.    * @throws MetaException error accessing the RDBMS    * @throws NoSuchObjectException no such function    * @throws InvalidObjectException not sure when this is thrown    * @throws InvalidInputException not sure when this is thrown    * @throws TException thrift transport error    */
name|void
name|dropFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
throws|,
name|TException
function_decl|;
comment|/**    * Get a function.    * @param dbName database name.    * @param funcName function name.    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|Function
name|getFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a function.    * @param catName catalog name.    * @param dbName database name.    * @param funcName function name.    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|Function
name|getFunction
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get all functions matching a pattern    * @param dbName database name.    * @param pattern to match.  This is a java regex pattern.    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|List
argument_list|<
name|String
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get all functions matching a pattern    * @param catName catalog name.    * @param dbName database name.    * @param pattern to match.  This is a java regex pattern.    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|List
argument_list|<
name|String
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get all functions in the default catalog.    * @return list of functions    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport error    */
name|GetAllFunctionsResponse
name|getAllFunctions
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a structure that details valid transactions.    * @return list of valid transactions    * @throws TException    */
name|ValidTxnList
name|getValidTxns
parameter_list|()
throws|throws
name|TException
function_decl|;
comment|/**    * Get a structure that details valid transactions.    * @param currentTxn The current transaction of the caller. This will be removed from the    *                   exceptions list so that the caller sees records from his own transaction.    * @return list of valid transactions and also valid write IDs for each input table.    * @throws TException    */
name|ValidTxnList
name|getValidTxns
parameter_list|(
name|long
name|currentTxn
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get a structure that details valid transactions.    * @param fullTableName full table name of format<db_name>.<table_name>    * @return list of valid write ids for the given table    * @throws TException    */
name|ValidWriteIdList
name|getValidWriteIds
parameter_list|(
name|String
name|fullTableName
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get a structure that details valid write ids list for all tables read by current txn.    * @param tablesList list of tables (format:<db_name>.<table_name>) read from the current transaction    *                   for which needs to populate the valid write ids    * @param validTxnList snapshot of valid txns for the current txn    * @return list of valid write ids for the given list of tables.    * @throws TException    */
name|List
argument_list|<
name|TableValidWriteIds
argument_list|>
name|getValidWriteIds
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tablesList
parameter_list|,
name|String
name|validTxnList
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Initiate a transaction.    * @param user User who is opening this transaction.  This is the Hive user,    *             not necessarily the OS user.  It is assumed that this user has already been    *             authenticated and authorized at this point.    * @return transaction identifier    * @throws TException    */
name|long
name|openTxn
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Initiate a transaction at the target cluster.    * @param replPolicy The replication policy to uniquely identify the source cluster.    * @param srcTxnIds The list of transaction ids at the source cluster    * @param user The user who has fired the repl load command.    * @return transaction identifiers    * @throws TException    */
name|List
argument_list|<
name|Long
argument_list|>
name|replOpenTxn
parameter_list|(
name|String
name|replPolicy
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|srcTxnIds
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Initiate a batch of transactions.  It is not guaranteed that the    * requested number of transactions will be instantiated.  The system has a    * maximum number instantiated per request, controlled by hive.txn.max    * .batch.open in hive-site.xml.  If the user requests more than this    * value, only the configured max will be returned.    *    *<p>Increasing the number of transactions requested in the batch will    * allow applications that stream data into Hive to place more commits in a    * single file, thus reducing load on the namenode and making reads of the    * data more efficient.  However, opening more transactions in a batch will    * also result in readers needing to keep a larger list of open    * transactions to ignore, potentially slowing their reads.  Users will    * need to test in their system to understand the optimal number of    * transactions to request in a batch.    *</p>    * @param user User who is opening this transaction.  This is the Hive user,    *             not necessarily the OS user.  It is assumed that this user has already been    *             authenticated and authorized at this point.    * @param numTxns number of requested transactions to open    * @return list of opened txn ids.  As noted above, this may be less than    * requested, so the user should check how many were returned rather than    * optimistically assuming that the result matches the request.    * @throws TException    */
name|OpenTxnsResponse
name|openTxns
parameter_list|(
name|String
name|user
parameter_list|,
name|int
name|numTxns
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Rollback a transaction.  This will also unlock any locks associated with    * this transaction.    * @param txnid id of transaction to be rolled back.    * @throws NoSuchTxnException if the requested transaction does not exist.    * Note that this can result from the transaction having timed out and been    * deleted.    * @throws TException    */
name|void
name|rollbackTxn
parameter_list|(
name|long
name|txnid
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TException
function_decl|;
comment|/**    * Rollback a transaction.  This will also unlock any locks associated with    * this transaction.    * @param srcTxnid id of transaction at source while is rolled back and to be replicated.    * @param replPolicy the replication policy to identify the source cluster    * @throws NoSuchTxnException if the requested transaction does not exist.    * Note that this can result from the transaction having timed out and been    * deleted.    * @throws TException    */
name|void
name|replRollbackTxn
parameter_list|(
name|long
name|srcTxnid
parameter_list|,
name|String
name|replPolicy
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TException
function_decl|;
comment|/**    * Commit a transaction.  This will also unlock any locks associated with    * this transaction.    * @param txnid id of transaction to be committed.    * @throws NoSuchTxnException if the requested transaction does not exist.    * This can result fro the transaction having timed out and been deleted by    * the compactor.    * @throws TxnAbortedException if the requested transaction has been    * aborted.  This can result from the transaction timing out.    * @throws TException    */
name|void
name|commitTxn
parameter_list|(
name|long
name|txnid
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
function_decl|;
comment|/**    * Commit a transaction.  This will also unlock any locks associated with    * this transaction.    * @param rqst Information containing the txn info and write event information    * of transaction at source which is committed and to be replicated    * @throws NoSuchTxnException if the requested transaction does not exist.    * This can result fro the transaction having timed out and been deleted by    * the compactor.    * @throws TxnAbortedException if the requested transaction has been    * aborted.  This can result from the transaction timing out.    * @throws TException    */
name|void
name|replCommitTxn
parameter_list|(
name|CommitTxnRequest
name|rqst
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
function_decl|;
comment|/**    * Abort a list of transactions. This is for use by "ABORT TRANSACTIONS" in the grammar.    * @throws TException    */
name|void
name|abortTxns
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|txnids
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Allocate a per table write ID and associate it with the given transaction.    * @param txnId id of transaction to which the allocated write ID to be associated.    * @param dbName name of DB in which the table belongs.    * @param tableName table to which the write ID to be allocated    * @throws TException    */
name|long
name|allocateTableWriteId
parameter_list|(
name|long
name|txnId
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Replicate Table Write Ids state to mark aborted write ids and writeid high water mark.    * @param validWriteIdList Snapshot of writeid list when the table/partition is dumped.    * @param dbName Database name    * @param tableName Table which is written.    * @param partNames List of partitions being written.    * @throws TException in case of failure to replicate the writeid state    */
name|void
name|replTableWriteIdState
parameter_list|(
name|String
name|validWriteIdList
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Allocate a per table write ID and associate it with the given transaction.    * @param txnIds ids of transaction batchto which the allocated write ID to be associated.    * @param dbName name of DB in which the table belongs.    * @param tableName table to which the write ID to be allocated    * @throws TException    */
name|List
argument_list|<
name|TxnToWriteId
argument_list|>
name|allocateTableWriteIdsBatch
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|txnIds
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Allocate a per table write ID and associate it with the given transaction. Used by replication load task.    * @param dbName name of DB in which the table belongs.    * @param tableName table to which the write ID to be allocated    * @param replPolicy Used by replication task to identify the source cluster.    * @param srcTxnToWriteIdList List of txn to write id map sent from the source cluster.    * @throws TException    */
name|List
argument_list|<
name|TxnToWriteId
argument_list|>
name|replAllocateTableWriteIdsBatch
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|replPolicy
parameter_list|,
name|List
argument_list|<
name|TxnToWriteId
argument_list|>
name|srcTxnToWriteIdList
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Show the list of currently open transactions.  This is for use by "show transactions" in the    * grammar, not for applications that want to find a list of current transactions to work with.    * Those wishing the latter should call {@link #getValidTxns()}.    * @return List of currently opened transactions, included aborted ones.    * @throws TException    */
name|GetOpenTxnsInfoResponse
name|showTxns
parameter_list|()
throws|throws
name|TException
function_decl|;
comment|/**    * Request a set of locks.  All locks needed for a particular query, DML,    * or DDL operation should be batched together and requested in one lock    * call.  This avoids deadlocks.  It also avoids blocking other users who    * only require some of the locks required by this user.    *    *<p>If the operation requires a transaction (INSERT, UPDATE,    * or DELETE) that transaction id must be provided as part this lock    * request.  All locks associated with a transaction will be released when    * that transaction is committed or rolled back.</p>    * *    *<p>Once a lock is acquired, {@link #heartbeat(long, long)} must be called    * on a regular basis to avoid the lock being timed out by the system.</p>    * @param request The lock request.  {@link LockRequestBuilder} can be used    *                construct this request.    * @return a lock response, which will provide two things,    * the id of the lock (to be used in all further calls regarding this lock)    * as well as a state of the lock.  If the state is ACQUIRED then the user    * can proceed.  If it is WAITING the user should wait and call    * {@link #checkLock(long)} before proceeding.  All components of the lock    * will have the same state.    * @throws NoSuchTxnException if the requested transaction does not exist.    * This can result fro the transaction having timed out and been deleted by    * the compactor.    * @throws TxnAbortedException if the requested transaction has been    * aborted.  This can result from the transaction timing out.    * @throws TException    */
annotation|@
name|RetrySemantics
operator|.
name|CannotRetry
name|LockResponse
name|lock
parameter_list|(
name|LockRequest
name|request
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
function_decl|;
comment|/**    * Check the status of a set of locks requested via a    * {@link #lock(org.apache.hadoop.hive.metastore.api.LockRequest)} call.    * Once a lock is acquired, {@link #heartbeat(long, long)} must be called    * on a regular basis to avoid the lock being timed out by the system.    * @param lockid lock id returned by lock().    * @return a lock response, which will provide two things,    * the id of the lock (to be used in all further calls regarding this lock)    * as well as a state of the lock.  If the state is ACQUIRED then the user    * can proceed.  If it is WAITING the user should wait and call    * this method again before proceeding.  All components of the lock    * will have the same state.    * @throws NoSuchTxnException if the requested transaction does not exist.    * This can result fro the transaction having timed out and been deleted by    * the compactor.    * @throws TxnAbortedException if the requested transaction has been    * aborted.  This can result from the transaction timing out.    * @throws NoSuchLockException if the requested lockid does not exist.    * This can result from the lock timing out and being unlocked by the system.    * @throws TException    */
name|LockResponse
name|checkLock
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|NoSuchLockException
throws|,
name|TException
function_decl|;
comment|/**    * Unlock a set of locks.  This can only be called when the locks are not    * assocaited with a transaction.    * @param lockid lock id returned by    * {@link #lock(org.apache.hadoop.hive.metastore.api.LockRequest)}    * @throws NoSuchLockException if the requested lockid does not exist.    * This can result from the lock timing out and being unlocked by the system.    * @throws TxnOpenException if the locks are are associated with a    * transaction.    * @throws TException    */
name|void
name|unlock
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|NoSuchLockException
throws|,
name|TxnOpenException
throws|,
name|TException
function_decl|;
comment|/**    * Show all currently held and waiting locks.    * @return List of currently held and waiting locks.    * @throws TException    */
annotation|@
name|Deprecated
name|ShowLocksResponse
name|showLocks
parameter_list|()
throws|throws
name|TException
function_decl|;
comment|/**    * Show all currently held and waiting locks.    * @param showLocksRequest SHOW LOCK request    * @return List of currently held and waiting locks.    * @throws TException    */
name|ShowLocksResponse
name|showLocks
parameter_list|(
name|ShowLocksRequest
name|showLocksRequest
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Send a heartbeat to indicate that the client holding these locks (if    * any) and that opened this transaction (if one exists) is still alive.    * The default timeout for transactions and locks is 300 seconds,    * though it is configurable.  To determine how often to heartbeat you will    * need to ask your system administrator how the metastore thrift service    * has been configured.    * @param txnid the id of the open transaction.  If no transaction is open    *              (it is a DDL or query) then this can be set to 0.    * @param lockid the id of the locks obtained.  If no locks have been    *               obtained then this can be set to 0.    * @throws NoSuchTxnException if the requested transaction does not exist.    * This can result fro the transaction having timed out and been deleted by    * the compactor.    * @throws TxnAbortedException if the requested transaction has been    * aborted.  This can result from the transaction timing out.    * @throws NoSuchLockException if the requested lockid does not exist.    * This can result from the lock timing out and being unlocked by the system.    * @throws TException    */
name|void
name|heartbeat
parameter_list|(
name|long
name|txnid
parameter_list|,
name|long
name|lockid
parameter_list|)
throws|throws
name|NoSuchLockException
throws|,
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
function_decl|;
comment|/**    * Send heartbeats for a range of transactions.  This is for the streaming ingest client that    * will have many transactions open at once.  Everyone else should use    * {@link #heartbeat(long, long)}.    * @param min minimum transaction id to heartbeat, inclusive    * @param max maximum transaction id to heartbeat, inclusive    * @return a pair of lists that tell which transactions in the list did not exist (they may    * have already been closed) and which were aborted.    * @throws TException    */
name|HeartbeatTxnRangeResponse
name|heartbeatTxnRange
parameter_list|(
name|long
name|min
parameter_list|,
name|long
name|max
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Send a request to compact a table or partition.  This will not block until the compaction is    * complete.  It will instead put a request on the queue for that table or partition to be    * compacted.  No checking is done on the dbname, tableName, or partitionName to make sure they    * refer to valid objects.  It is assumed this has already been done by the caller.    * @param dbname Name of the database the table is in.  If null, this will be assumed to be    *               'default'.    * @param tableName Name of the table to be compacted.  This cannot be null.  If partitionName    *                  is null, this must be a non-partitioned table.    * @param partitionName Name of the partition to be compacted    * @param type Whether this is a major or minor compaction.    * @throws TException    */
annotation|@
name|Deprecated
name|void
name|compact
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|CompactionType
name|type
parameter_list|)
throws|throws
name|TException
function_decl|;
annotation|@
name|Deprecated
name|void
name|compact
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|CompactionType
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblproperties
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Send a request to compact a table or partition.  This will not block until the compaction is    * complete.  It will instead put a request on the queue for that table or partition to be    * compacted.  No checking is done on the dbname, tableName, or partitionName to make sure they    * refer to valid objects.  It is assumed this has already been done by the caller.  At most one    * Compaction can be scheduled/running for any given resource at a time.    * @param dbname Name of the database the table is in.  If null, this will be assumed to be    *               'default'.    * @param tableName Name of the table to be compacted.  This cannot be null.  If partitionName    *                  is null, this must be a non-partitioned table.    * @param partitionName Name of the partition to be compacted    * @param type Whether this is a major or minor compaction.    * @param tblproperties the list of tblproperties to override for this compact. Can be null.    * @return id of newly scheduled compaction or id/state of one which is already scheduled/running    * @throws TException    */
name|CompactionResponse
name|compact2
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|CompactionType
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblproperties
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get a list of all compactions.    * @return List of all current compactions.  This includes compactions waiting to happen,    * in progress, and finished but waiting to clean the existing files.    * @throws TException    */
name|ShowCompactResponse
name|showCompactions
parameter_list|()
throws|throws
name|TException
function_decl|;
comment|/**    * @deprecated in Hive 1.3.0/2.1.0 - will be removed in 2 releases    */
annotation|@
name|Deprecated
name|void
name|addDynamicPartitions
parameter_list|(
name|long
name|txnId
parameter_list|,
name|long
name|writeId
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Send a list of partitions to the metastore to indicate which partitions were loaded    * dynamically.    * @param txnId id of the transaction    * @param writeId table write id for this txn    * @param dbName database name    * @param tableName table name    * @param partNames partition name, as constructed by Warehouse.makePartName    * @throws TException    */
name|void
name|addDynamicPartitions
parameter_list|(
name|long
name|txnId
parameter_list|,
name|long
name|writeId
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|DataOperationType
name|operationType
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Performs the commit/rollback to the metadata storage for insert operator from external storage handler.    * @param table table name    * @param overwrite true if the insert is overwrite    *    * @throws MetaException    */
name|void
name|insertTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * A filter provided by the client that determines if a given notification event should be    * returned.    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCatalog"
block|}
argument_list|)
interface|interface
name|NotificationFilter
block|{
comment|/**      * Whether a notification event should be accepted      * @param event      * @return if true, event will be added to list, if false it will be ignored      */
name|boolean
name|accept
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
function_decl|;
block|}
comment|/**    * Get the next set of notifications from the database.    * @param lastEventId The last event id that was consumed by this reader.  The returned    *                    notifications will start at the next eventId available after this eventId.    * @param maxEvents Maximum number of events to return.  If&lt; 1, then all available events will    *                  be returned.    * @param filter User provided filter to remove unwanted events.  If null, all events will be    *               returned.    * @return list of notifications, sorted by eventId.  It is guaranteed that the events are in    * the order that the operations were done on the database.    * @throws TException    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCatalog"
block|}
argument_list|)
name|NotificationEventResponse
name|getNextNotification
parameter_list|(
name|long
name|lastEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|,
name|NotificationFilter
name|filter
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get the last used notification event id.    * @return last used id    * @throws TException    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCatalog"
block|}
argument_list|)
name|CurrentNotificationEventId
name|getCurrentNotificationEventId
parameter_list|()
throws|throws
name|TException
function_decl|;
comment|/**    * Get the number of events from given eventID for the input database.    * @return number of events    * @throws TException    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCatalog"
block|}
argument_list|)
name|NotificationEventsCountResponse
name|getNotificationEventsCount
parameter_list|(
name|NotificationEventsCountRequest
name|rqst
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Request that the metastore fire an event.  Currently this is only supported for DML    * operations, since the metastore knows when DDL operations happen.    * @param request    * @return response, type depends on type of request    * @throws TException    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"Apache Hive, HCatalog"
block|}
argument_list|)
name|FireEventResponse
name|fireListenerEvent
parameter_list|(
name|FireEventRequest
name|request
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Add a event related to write operations in an ACID table.    * @param rqst message containing information for acid write operation.    * @throws TException    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"Apache Hive, HCatalog"
block|}
argument_list|)
name|void
name|addWriteNotificationLog
parameter_list|(
name|WriteNotificationLogRequest
name|rqst
parameter_list|)
throws|throws
name|TException
function_decl|;
class|class
name|IncompatibleMetastoreException
extends|extends
name|MetaException
block|{
name|IncompatibleMetastoreException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * get all role-grants for users/roles that have been granted the given role    * Note that in the returned list of RolePrincipalGrants, the roleName is    * redundant as it would match the role_name argument of this function    * @param getPrincRoleReq    * @return    * @throws MetaException    * @throws TException    */
name|GetPrincipalsInRoleResponse
name|get_principals_in_role
parameter_list|(
name|GetPrincipalsInRoleRequest
name|getPrincRoleReq
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * get all role-grants for roles that have been granted to given principal    * Note that in the returned list of RolePrincipalGrants, the principal information    * redundant as it would match the principal information in request    * @param getRolePrincReq    * @return    * @throws MetaException    * @throws TException    */
name|GetRoleGrantsForPrincipalResponse
name|get_role_grants_for_principal
parameter_list|(
name|GetRoleGrantsForPrincipalRequest
name|getRolePrincReq
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get aggregated column stats for a set of partitions.    * @param dbName database name    * @param tblName table name    * @param colNames list of column names    * @param partName list of partition names (not values).    * @return aggregated stats for requested partitions    * @throws NoSuchObjectException no such table    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport exception    */
name|AggrStats
name|getAggrColStatsFor
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get aggregated column stats for a set of partitions.    * @param catName catalog name    * @param dbName database name    * @param tblName table name    * @param colNames list of column names    * @param partNames list of partition names (not values).    * @return aggregated stats for requested partitions    * @throws NoSuchObjectException no such table    * @throws MetaException error accessing the RDBMS    * @throws TException thrift transport exception    */
name|AggrStats
name|getAggrColStatsFor
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Set table or partition column statistics.    * @param request request object, contains all the table, partition, and statistics information    * @return true if the set was successful.    * @throws NoSuchObjectException the table, partition, or columns specified do not exist.    * @throws InvalidObjectException the stats object is not valid.    * @throws MetaException error accessing the RDBMS.    * @throws TException thrift transport error.    * @throws InvalidInputException the input is invalid (eg, a null table name)    */
name|boolean
name|setPartitionColumnStatistics
parameter_list|(
name|SetPartitionsStatsRequest
name|request
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Flush any catalog objects held by the metastore implementation.  Note that this does not    * flush statistics objects.  This should be called at the beginning of each query.    */
name|void
name|flushCache
parameter_list|()
function_decl|;
comment|/**    * Gets file metadata, as cached by metastore, for respective file IDs.    * The metadata that is not cached in metastore may be missing.    */
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|>
name|getFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|TException
function_decl|;
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MetadataPpdResult
argument_list|>
argument_list|>
name|getFileMetadataBySarg
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|ByteBuffer
name|sarg
parameter_list|,
name|boolean
name|doGetFooters
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Cleares the file metadata cache for respective file IDs.    */
name|void
name|clearFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Adds file metadata for respective file IDs to metadata cache in metastore.    */
name|void
name|putFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|metadata
parameter_list|)
throws|throws
name|TException
function_decl|;
name|boolean
name|isSameConfObj
parameter_list|(
name|Configuration
name|c
parameter_list|)
function_decl|;
name|boolean
name|cacheFileMetadata
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|boolean
name|allParts
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get a primary key for a table.    * @param request Request info    * @return List of primary key columns    * @throws MetaException error reading the RDBMS    * @throws NoSuchObjectException no primary key exists on this table, or maybe no such table    * @throws TException thrift transport error    */
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeys
parameter_list|(
name|PrimaryKeysRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get a foreign key for a table.    * @param request Request info    * @return List of foreign key columns    * @throws MetaException error reading the RDBMS    * @throws NoSuchObjectException no foreign key exists on this table, or maybe no such table    * @throws TException thrift transport error    */
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeys
parameter_list|(
name|ForeignKeysRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get a unique constraint for a table.    * @param request Request info    * @return List of unique constraint columns    * @throws MetaException error reading the RDBMS    * @throws NoSuchObjectException no unique constraint on this table, or maybe no such table    * @throws TException thrift transport error    */
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getUniqueConstraints
parameter_list|(
name|UniqueConstraintsRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get a not null constraint for a table.    * @param request Request info    * @return List of not null constraint columns    * @throws MetaException error reading the RDBMS    * @throws NoSuchObjectException no not null constraint on this table, or maybe no such table    * @throws TException thrift transport error    */
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getNotNullConstraints
parameter_list|(
name|NotNullConstraintsRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|getDefaultConstraints
parameter_list|(
name|DefaultConstraintsRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|getCheckConstraints
parameter_list|(
name|CheckConstraintsRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
name|void
name|createTableWithConstraints
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tTbl
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|,
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
parameter_list|,
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
parameter_list|,
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|defaultConstraints
parameter_list|,
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|checkConstraints
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a constraint.  This can be used for primary keys, foreign keys, unique constraints, or    * not null constraints.    * @param dbName database name    * @param tableName table name    * @param constraintName name of the constraint    * @throws MetaException RDBMS access error    * @throws NoSuchObjectException no such constraint exists    * @throws TException thrift transport error    */
name|void
name|dropConstraint
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|constraintName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Drop a constraint.  This can be used for primary keys, foreign keys, unique constraints, or    * not null constraints.    * @param catName catalog name    * @param dbName database name    * @param tableName table name    * @param constraintName name of the constraint    * @throws MetaException RDBMS access error    * @throws NoSuchObjectException no such constraint exists    * @throws TException thrift transport error    */
name|void
name|dropConstraint
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|constraintName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Add a primary key.    * @param primaryKeyCols Primary key columns.    * @throws MetaException error reading or writing to the RDBMS or a primary key already exists    * @throws NoSuchObjectException no such table exists    * @throws TException thrift transport error    */
name|void
name|addPrimaryKey
parameter_list|(
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeyCols
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Add a foreign key    * @param foreignKeyCols Foreign key definition    * @throws MetaException error reading or writing to the RDBMS or foreign key already exists    * @throws NoSuchObjectException one of the tables in the foreign key does not exist.    * @throws TException thrift transport error    */
name|void
name|addForeignKey
parameter_list|(
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeyCols
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Add a unique constraint    * @param uniqueConstraintCols Unique constraint definition    * @throws MetaException error reading or writing to the RDBMS or unique constraint already exists    * @throws NoSuchObjectException no such table    * @throws TException thrift transport error    */
name|void
name|addUniqueConstraint
parameter_list|(
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraintCols
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Add a not null constraint    * @param notNullConstraintCols Notnull constraint definition    * @throws MetaException error reading or writing to the RDBMS or not null constraint already    * exists    * @throws NoSuchObjectException no such table    * @throws TException thrift transport error    */
name|void
name|addNotNullConstraint
parameter_list|(
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraintCols
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
name|void
name|addDefaultConstraint
parameter_list|(
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|defaultConstraints
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
name|void
name|addCheckConstraint
parameter_list|(
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|checkConstraints
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Gets the unique id of the backing database instance used for storing metadata    * @return unique id of the backing database instance    * @throws MetaException if HMS is not able to fetch the UUID or if there are multiple UUIDs found in the database    * @throws TException in case of Thrift errors    */
name|String
name|getMetastoreDbUuid
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|createResourcePlan
parameter_list|(
name|WMResourcePlan
name|resourcePlan
parameter_list|,
name|String
name|copyFromName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|WMFullResourcePlan
name|getResourcePlan
parameter_list|(
name|String
name|resourcePlanName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|List
argument_list|<
name|WMResourcePlan
argument_list|>
name|getAllResourcePlans
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|dropResourcePlan
parameter_list|(
name|String
name|resourcePlanName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|WMFullResourcePlan
name|alterResourcePlan
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|WMNullableResourcePlan
name|resourcePlan
parameter_list|,
name|boolean
name|canActivateDisabled
parameter_list|,
name|boolean
name|isForceDeactivate
parameter_list|,
name|boolean
name|isReplace
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|WMFullResourcePlan
name|getActiveResourcePlan
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
name|WMValidateResourcePlanResponse
name|validateResourcePlan
parameter_list|(
name|String
name|resourcePlanName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|createWMTrigger
parameter_list|(
name|WMTrigger
name|trigger
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|alterWMTrigger
parameter_list|(
name|WMTrigger
name|trigger
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|dropWMTrigger
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|List
argument_list|<
name|WMTrigger
argument_list|>
name|getTriggersForResourcePlan
parameter_list|(
name|String
name|resourcePlan
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|createWMPool
parameter_list|(
name|WMPool
name|pool
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|alterWMPool
parameter_list|(
name|WMNullablePool
name|pool
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|TException
function_decl|;
name|void
name|dropWMPool
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|poolPath
parameter_list|)
throws|throws
name|TException
function_decl|;
name|void
name|createOrUpdateWMMapping
parameter_list|(
name|WMMapping
name|mapping
parameter_list|,
name|boolean
name|isUpdate
parameter_list|)
throws|throws
name|TException
function_decl|;
name|void
name|dropWMMapping
parameter_list|(
name|WMMapping
name|mapping
parameter_list|)
throws|throws
name|TException
function_decl|;
name|void
name|createOrDropTriggerToPoolMapping
parameter_list|(
name|String
name|resourcePlanName
parameter_list|,
name|String
name|triggerName
parameter_list|,
name|String
name|poolPath
parameter_list|,
name|boolean
name|shouldDrop
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Create a new schema.  This is really a schema container, as there will be specific versions    * of the schema that have columns, etc.    * @param schema schema to create    * @throws AlreadyExistsException if a schema of this name already exists    * @throws NoSuchObjectException database references by this schema does not exist    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|void
name|createISchema
parameter_list|(
name|ISchema
name|schema
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Alter an existing schema.    * @param catName catalog name    * @param dbName database the schema is in    * @param schemaName name of the schema    * @param newSchema altered schema object    * @throws NoSuchObjectException no schema with this name could be found    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|void
name|alterISchema
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|ISchema
name|newSchema
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Fetch a schema.    * @param catName catalog name    * @param dbName database the schema is in    * @param name name of the schema    * @return the schema or null if no such schema    * @throws NoSuchObjectException no schema matching this name exists    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|ISchema
name|getISchema
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Drop an existing schema.  If there are schema versions of this, this call will fail.    * @param catName catalog name    * @param dbName database the schema is in    * @param name name of the schema to drop    * @throws NoSuchObjectException no schema with this name could be found    * @throws InvalidOperationException attempt to drop a schema that has versions    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|void
name|dropISchema
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Add a new version to an existing schema.    * @param schemaVersion version object to add    * @throws AlreadyExistsException a version of this schema with the same version id already exists    * @throws NoSuchObjectException no schema with this name could be found    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|void
name|addSchemaVersion
parameter_list|(
name|SchemaVersion
name|schemaVersion
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get a specific version of a schema.    * @param dbName database the schema is in    * @param schemaName name of the schema    * @param version version of the schema    * @return the schema version or null if no such schema version    * @throws NoSuchObjectException no schema matching this name and version exists    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|SchemaVersion
name|getSchemaVersion
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get the latest version of a schema.    * @param catName catalog name    * @param dbName database the schema is in    * @param schemaName name of the schema    * @return latest version of the schema or null if the schema does not exist or there are no    * version of the schema.    * @throws NoSuchObjectException no versions of schema matching this name exist    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|SchemaVersion
name|getSchemaLatestVersion
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|schemaName
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get all the extant versions of a schema.    * @param catName catalog name    * @param dbName database the schema is in    * @param schemaName name of the schema.    * @return list of all the schema versions or null if this schema does not exist or has no    * versions.    * @throws NoSuchObjectException no versions of schema matching this name exist    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|List
argument_list|<
name|SchemaVersion
argument_list|>
name|getSchemaAllVersions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|schemaName
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Drop a version of a schema.  Given that versions are supposed to be immutable you should    * think really hard before you call this method.  It should only be used for schema versions    * that were added in error and never referenced any data.    * @param catName catalog name    * @param dbName database the schema is in    * @param schemaName name of the schema    * @param version version of the schema    * @throws NoSuchObjectException no matching version of the schema could be found    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|void
name|dropSchemaVersion
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Find all schema versions that have columns that match a query.    * @param rqst query, this can include column names, namespaces (actually stored in the    *             description field in FieldSchema), and types.    * @return The (possibly empty) list of schema name/version pairs that match.    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|FindSchemasByColsResp
name|getSchemaByCols
parameter_list|(
name|FindSchemasByColsRqst
name|rqst
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Map a schema version to a serde.  This mapping is one-to-one, thus this will destroy any    * previous mappings for this schema version.    * @param catName catalog name    * @param dbName database the schema is in    * @param schemaName name of the schema    * @param version version of the schema    * @param serdeName name of the serde    * @throws NoSuchObjectException no matching version of the schema could be found or no serde    * of the provided name could be found    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|void
name|mapSchemaVersionToSerde
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|int
name|version
parameter_list|,
name|String
name|serdeName
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Set the state of a schema version.    * @param catName catalog name    * @param dbName database the schema is in    * @param schemaName name of the schema    * @param version version of the schema    * @param state state to set the schema too    * @throws NoSuchObjectException no matching version of the schema could be found    * @throws InvalidOperationException attempt to make a state change that is not valid    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|void
name|setSchemaVersionState
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|int
name|version
parameter_list|,
name|SchemaVersionState
name|state
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Add a serde.  This is primarily intended for use with SchemaRegistry objects, since serdes    * are automatically added when needed as part of creating and altering tables and partitions.    * @param serDeInfo serde to add    * @throws AlreadyExistsException serde of this name already exists    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|void
name|addSerDe
parameter_list|(
name|SerDeInfo
name|serDeInfo
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Fetch a serde.  This is primarily intended for use with SchemaRegistry objects, since serdes    * are automatically fetched along with other information for tables and partitions.    * @param serDeName name of the serde    * @return the serde.    * @throws NoSuchObjectException no serde with this name exists.    * @throws MetaException general metastore error    * @throws TException general thrift error    */
name|SerDeInfo
name|getSerDe
parameter_list|(
name|String
name|serDeName
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Acquire the materialization rebuild lock for a given view. We need to specify the fully    * qualified name of the materialized view and the open transaction ID so we can identify    * uniquely the lock.    * @param dbName db name for the materialized view    * @param tableName table name for the materialized view    * @param txnId transaction id for the rebuild    * @return the response from the metastore, where the lock id is equal to the txn id and    * the status can be either ACQUIRED or NOT ACQUIRED    */
name|LockResponse
name|lockMaterializationRebuild
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|long
name|txnId
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Method to refresh the acquisition of a given materialization rebuild lock.    * @param dbName db name for the materialized view    * @param tableName table name for the materialized view    * @param txnId transaction id for the rebuild    * @return true if the lock could be renewed, false otherwise    */
name|boolean
name|heartbeatLockMaterializationRebuild
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|long
name|txnId
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/** Adds a RuntimeStat for metastore persistence. */
name|void
name|addRuntimeStat
parameter_list|(
name|RuntimeStat
name|stat
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/** Reads runtime statistics. */
name|List
argument_list|<
name|RuntimeStat
argument_list|>
name|getRuntimeStats
parameter_list|(
name|int
name|maxWeight
parameter_list|,
name|int
name|maxCreateTime
parameter_list|)
throws|throws
name|TException
function_decl|;
block|}
end_interface

end_unit

