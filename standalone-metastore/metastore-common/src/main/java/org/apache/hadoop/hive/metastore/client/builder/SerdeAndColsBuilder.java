begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerdeType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This collects together SerdeInfo and columns, since StorageDescriptor and SchemaVersion share  * those traits.  * @param<T>  */
end_comment

begin_class
specifier|abstract
class|class
name|SerdeAndColsBuilder
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SERDE_LIB
init|=
literal|"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
decl_stmt|;
specifier|private
name|String
name|serdeName
decl_stmt|,
name|serdeLib
decl_stmt|,
name|serdeDescription
decl_stmt|,
name|serdeSerializerClass
decl_stmt|,
name|serdeDeserializerClass
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
decl_stmt|;
specifier|private
name|SerdeType
name|serdeType
decl_stmt|;
specifier|protected
name|T
name|child
decl_stmt|;
specifier|protected
name|SerdeAndColsBuilder
parameter_list|()
block|{
name|serdeParams
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|serdeLib
operator|=
name|SERDE_LIB
expr_stmt|;
block|}
specifier|protected
name|void
name|setChild
parameter_list|(
name|T
name|child
parameter_list|)
block|{
name|this
operator|.
name|child
operator|=
name|child
expr_stmt|;
block|}
specifier|protected
name|SerDeInfo
name|buildSerde
parameter_list|()
block|{
name|SerDeInfo
name|serDeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
name|serdeName
argument_list|,
name|serdeLib
argument_list|,
name|serdeParams
argument_list|)
decl_stmt|;
if|if
condition|(
name|serdeDescription
operator|!=
literal|null
condition|)
name|serDeInfo
operator|.
name|setDescription
argument_list|(
name|serdeDescription
argument_list|)
expr_stmt|;
if|if
condition|(
name|serdeSerializerClass
operator|!=
literal|null
condition|)
name|serDeInfo
operator|.
name|setSerializerClass
argument_list|(
name|serdeSerializerClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|serdeDeserializerClass
operator|!=
literal|null
condition|)
name|serDeInfo
operator|.
name|setDeserializerClass
argument_list|(
name|serdeDeserializerClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|serdeType
operator|!=
literal|null
condition|)
name|serDeInfo
operator|.
name|setSerdeType
argument_list|(
name|serdeType
argument_list|)
expr_stmt|;
return|return
name|serDeInfo
return|;
block|}
specifier|protected
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getCols
parameter_list|()
throws|throws
name|MetaException
block|{
if|if
condition|(
name|cols
operator|==
literal|null
condition|)
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"You must provide the columns"
argument_list|)
throw|;
return|return
name|cols
return|;
block|}
specifier|public
name|T
name|setCols
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|)
block|{
name|this
operator|.
name|cols
operator|=
name|cols
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|addCol
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|comment
parameter_list|)
block|{
if|if
condition|(
name|cols
operator|==
literal|null
condition|)
name|cols
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|comment
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|addCol
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|)
block|{
return|return
name|addCol
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|public
name|T
name|setSerdeName
parameter_list|(
name|String
name|serdeName
parameter_list|)
block|{
name|this
operator|.
name|serdeName
operator|=
name|serdeName
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setSerdeLib
parameter_list|(
name|String
name|serdeLib
parameter_list|)
block|{
name|this
operator|.
name|serdeLib
operator|=
name|serdeLib
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setSerdeDescription
parameter_list|(
name|String
name|serdeDescription
parameter_list|)
block|{
name|this
operator|.
name|serdeDescription
operator|=
name|serdeDescription
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setSerdeSerializerClass
parameter_list|(
name|String
name|serdeSerializerClass
parameter_list|)
block|{
name|this
operator|.
name|serdeSerializerClass
operator|=
name|serdeSerializerClass
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setSerdeDeserializerClass
parameter_list|(
name|String
name|serdeDeserializerClass
parameter_list|)
block|{
name|this
operator|.
name|serdeDeserializerClass
operator|=
name|serdeDeserializerClass
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setSerdeParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
parameter_list|)
block|{
name|this
operator|.
name|serdeParams
operator|=
name|serdeParams
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|addSerdeParam
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|serdeParams
operator|==
literal|null
condition|)
name|serdeParams
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|serdeParams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|T
name|setSerdeType
parameter_list|(
name|SerdeType
name|serdeType
parameter_list|)
block|{
name|this
operator|.
name|serdeType
operator|=
name|serdeType
expr_stmt|;
return|return
name|child
return|;
block|}
block|}
end_class

end_unit

