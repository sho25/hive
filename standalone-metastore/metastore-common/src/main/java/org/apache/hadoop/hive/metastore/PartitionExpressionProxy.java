begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FileMetadataExprType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_comment
comment|/**  * The proxy interface that metastore uses for variety of QL operations (metastore can't depend  * on QL because QL depends on metastore; creating metastore-client module would be a proper way  * to solve this problem).  */
end_comment

begin_interface
specifier|public
interface|interface
name|PartitionExpressionProxy
block|{
comment|/**    * Converts serialized Hive expression into filter in the format suitable for Filter.g.    * The isnull and isnotnull expressions are converted to = and != default partition respectively    * for push down to metastore SQL.    * @param exprBytes Serialized expression.    * @param defaultPartitionName Default partition name.    * @return Filter string.    */
name|String
name|convertExprToFilter
parameter_list|(
name|byte
index|[]
name|exprBytes
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Filters the partition names via serialized Hive expression.    * @param partColumns Partition columns in the underlying table.    * @param expr Serialized expression.    * @param defaultPartitionName Default partition name from job or server configuration.    * @param partitionNames Partition names; the list is modified in place.    * @return Whether there were any unknown partitions preserved in the name list.    */
name|boolean
name|filterPartitionsByExpr
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partColumns
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Determines the file metadata type from input format of the source table or partition.    * @param inputFormat Input format name.    * @return The file metadata type.    */
name|FileMetadataExprType
name|getMetadataType
parameter_list|(
name|String
name|inputFormat
parameter_list|)
function_decl|;
comment|/**    * Gets a separate proxy that can be used to call file-format-specific methods.    * @param type The file metadata type.    * @return The proxy.    */
name|FileFormatProxy
name|getFileFormatProxy
parameter_list|(
name|FileMetadataExprType
name|type
parameter_list|)
function_decl|;
comment|/**    * Creates SARG from serialized representation.    * @param expr SARG, serialized as Kryo.    * @return SARG.    */
name|SearchArgument
name|createSarg
parameter_list|(
name|byte
index|[]
name|expr
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

