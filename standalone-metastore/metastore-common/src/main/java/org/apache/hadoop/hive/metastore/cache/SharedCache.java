begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|StatObjectConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|IncrementalObjectSizeEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|IncrementalObjectSizeEstimator
operator|.
name|ObjectEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|normalizeIdentifier
import|;
end_import

begin_class
specifier|public
class|class
name|SharedCache
block|{
specifier|private
specifier|static
name|ReentrantReadWriteLock
name|cacheLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|isCatalogCachePrewarmed
init|=
literal|false
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Catalog
argument_list|>
name|catalogCache
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|catalogsDeletedDuringPrewarm
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|isCatalogCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// For caching Database objects. Key is database name
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Database
argument_list|>
name|databaseCache
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isDatabaseCachePrewarmed
init|=
literal|false
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|databasesDeletedDuringPrewarm
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|isDatabaseCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// For caching TableWrapper objects. Key is aggregate of database name and table name
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TableWrapper
argument_list|>
name|tableCache
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isTableCachePrewarmed
init|=
literal|false
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|tablesDeletedDuringPrewarm
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|isTableCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteArrayWrapper
argument_list|,
name|StorageDescriptorWrapper
argument_list|>
name|sdCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|MessageDigest
name|md
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SharedCache
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|AtomicLong
name|cacheUpdateCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
name|maxCacheSizeInBytes
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
name|long
name|currentCacheSizeInBytes
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ObjectEstimator
argument_list|>
name|sizeEstimators
init|=
literal|null
decl_stmt|;
enum|enum
name|StatsType
block|{
name|ALL
argument_list|(
literal|0
argument_list|)
block|,
name|ALLBUTDEFAULT
argument_list|(
literal|1
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|position
decl_stmt|;
name|StatsType
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
block|}
specifier|public
name|int
name|getPosition
parameter_list|()
block|{
return|return
name|position
return|;
block|}
block|}
static|static
block|{
try|try
block|{
name|md
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"should not happen"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|long
name|maxSharedCacheSizeInBytes
parameter_list|)
block|{
name|maxCacheSizeInBytes
operator|=
name|maxSharedCacheSizeInBytes
expr_stmt|;
comment|// Create estimators
if|if
condition|(
operator|(
name|maxCacheSizeInBytes
operator|>
literal|0
operator|)
operator|&&
operator|(
name|sizeEstimators
operator|==
literal|null
operator|)
condition|)
block|{
name|sizeEstimators
operator|=
name|IncrementalObjectSizeEstimator
operator|.
name|createEstimators
argument_list|(
name|SharedCache
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ObjectEstimator
name|getMemorySizeEstimator
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|ObjectEstimator
name|estimator
init|=
name|sizeEstimators
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|estimator
operator|==
literal|null
condition|)
block|{
name|IncrementalObjectSizeEstimator
operator|.
name|createEstimators
argument_list|(
name|clazz
argument_list|,
name|sizeEstimators
argument_list|)
expr_stmt|;
name|estimator
operator|=
name|sizeEstimators
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|estimator
return|;
block|}
specifier|static
class|class
name|TableWrapper
block|{
name|Table
name|t
decl_stmt|;
name|String
name|location
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
name|byte
index|[]
name|sdHash
decl_stmt|;
name|ReentrantReadWriteLock
name|tableLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// For caching column stats for an unpartitioned table
comment|// Key is column name and the value is the col stat object
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|tableColStatsCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|isTableColStatsCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// For caching partition objects
comment|// Ket is partition values and the value is a wrapper around the partition object
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PartitionWrapper
argument_list|>
name|partitionCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|PartitionWrapper
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|isPartitionCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// For caching column stats for a partitioned table
comment|// Key is aggregate of partition values, column name and the value is the col stat object
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|partitionColStatsCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|isPartitionColStatsCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// For caching aggregate column stats for all and all minus default partition
comment|// Key is column name and the value is a list of 2 col stat objects
comment|// (all partitions and all but default)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|aggrColStatsCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|isAggrPartitionColStatsCacheDirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TableWrapper
parameter_list|(
name|Table
name|t
parameter_list|,
name|byte
index|[]
name|sdHash
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
name|this
operator|.
name|sdHash
operator|=
name|sdHash
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|()
block|{
return|return
name|t
return|;
block|}
specifier|public
name|void
name|setTable
parameter_list|(
name|Table
name|t
parameter_list|)
block|{
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getSdHash
parameter_list|()
block|{
return|return
name|sdHash
return|;
block|}
specifier|public
name|void
name|setSdHash
parameter_list|(
name|byte
index|[]
name|sdHash
parameter_list|)
block|{
name|this
operator|.
name|sdHash
operator|=
name|sdHash
expr_stmt|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
specifier|public
name|void
name|setParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
name|boolean
name|sameDatabase
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
return|return
name|catName
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getCatName
argument_list|()
argument_list|)
operator|&&
name|dbName
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
return|;
block|}
name|void
name|cachePartition
parameter_list|(
name|Partition
name|part
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
block|{
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|PartitionWrapper
name|wrapper
init|=
name|makePartitionWrapper
argument_list|(
name|part
argument_list|,
name|sharedCache
argument_list|)
decl_stmt|;
name|partitionCache
operator|.
name|put
argument_list|(
name|CacheUtils
operator|.
name|buildPartitionCacheKey
argument_list|(
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Invalidate cached aggregate stats
if|if
condition|(
operator|!
name|aggrColStatsCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|aggrColStatsCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|cachePartitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
block|{
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|PartitionWrapper
name|ptnWrapper
init|=
name|makePartitionWrapper
argument_list|(
name|part
argument_list|,
name|sharedCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCacheSizeInBytes
operator|>
literal|0
condition|)
block|{
name|ObjectEstimator
name|ptnWrapperSizeEstimator
init|=
name|getMemorySizeEstimator
argument_list|(
name|PartitionWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|estimatedMemUsage
init|=
name|ptnWrapperSizeEstimator
operator|.
name|estimate
argument_list|(
name|ptnWrapper
argument_list|,
name|sizeEstimators
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Memory needed to cache Partition: {} is {} bytes"
argument_list|,
name|part
argument_list|,
name|estimatedMemUsage
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCacheMemoryFull
argument_list|(
name|estimatedMemUsage
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot cache Partition: {}. Memory needed is {} bytes, whereas the memory remaining is: {} bytes."
argument_list|,
name|part
argument_list|,
name|estimatedMemUsage
argument_list|,
operator|(
literal|0.8
operator|*
name|maxCacheSizeInBytes
operator|-
name|currentCacheSizeInBytes
operator|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|currentCacheSizeInBytes
operator|+=
name|estimatedMemUsage
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Current cache size: {} bytes"
argument_list|,
name|currentCacheSizeInBytes
argument_list|)
expr_stmt|;
block|}
name|partitionCache
operator|.
name|put
argument_list|(
name|CacheUtils
operator|.
name|buildPartitionCacheKey
argument_list|(
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|,
name|ptnWrapper
argument_list|)
expr_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Invalidate cached aggregate stats
if|if
condition|(
operator|!
name|aggrColStatsCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|aggrColStatsCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
block|{
name|Partition
name|part
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|PartitionWrapper
name|wrapper
init|=
name|partitionCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildPartitionCacheKey
argument_list|(
name|partVals
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapper
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|part
operator|=
name|CacheUtils
operator|.
name|assemble
argument_list|(
name|wrapper
argument_list|,
name|sharedCache
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|part
return|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|(
name|int
name|max
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
name|tableLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|PartitionWrapper
name|wrapper
range|:
name|partitionCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|max
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|max
condition|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|CacheUtils
operator|.
name|assemble
argument_list|(
name|wrapper
argument_list|,
name|sharedCache
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|tableLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
specifier|public
name|boolean
name|containsPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
name|boolean
name|containsPart
init|=
literal|false
decl_stmt|;
try|try
block|{
name|tableLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|containsPart
operator|=
name|partitionCache
operator|.
name|containsKey
argument_list|(
name|CacheUtils
operator|.
name|buildPartitionCacheKey
argument_list|(
name|partVals
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|containsPart
return|;
block|}
specifier|public
name|Partition
name|removePartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVal
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
block|{
name|Partition
name|part
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|PartitionWrapper
name|wrapper
init|=
name|partitionCache
operator|.
name|remove
argument_list|(
name|CacheUtils
operator|.
name|buildPartitionCacheKey
argument_list|(
name|partVal
argument_list|)
argument_list|)
decl_stmt|;
name|isPartitionCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrapper
operator|.
name|getSdHash
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sharedCache
operator|.
name|decrSd
argument_list|(
name|wrapper
operator|.
name|getSdHash
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|part
operator|=
name|CacheUtils
operator|.
name|assemble
argument_list|(
name|wrapper
argument_list|,
name|sharedCache
argument_list|)
expr_stmt|;
comment|// Remove col stats
name|String
name|partialKey
init|=
name|CacheUtils
operator|.
name|buildPartitionCacheKey
argument_list|(
name|partVal
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|iterator
init|=
name|partitionColStatsCache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|partialKey
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Invalidate cached aggregate stats
if|if
condition|(
operator|!
name|aggrColStatsCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|aggrColStatsCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|part
return|;
block|}
specifier|public
name|void
name|removePartitions
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
block|{
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|partVal
range|:
name|partVals
control|)
block|{
name|removePartition
argument_list|(
name|partVal
argument_list|,
name|sharedCache
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|alterPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|Partition
name|newPart
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
block|{
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|removePartition
argument_list|(
name|partVals
argument_list|,
name|sharedCache
argument_list|)
expr_stmt|;
name|cachePartition
argument_list|(
name|newPart
argument_list|,
name|sharedCache
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|alterPartitions
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValsList
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
block|{
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partValsList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|partValsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Partition
name|newPart
init|=
name|newParts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|alterPartition
argument_list|(
name|partVals
argument_list|,
name|newPart
argument_list|,
name|sharedCache
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refreshPartitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PartitionWrapper
argument_list|>
name|newPartitionCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PartitionWrapper
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|partitions
control|)
block|{
if|if
condition|(
name|isPartitionCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping partition cache update for table: "
operator|+
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|"; the partition list we have is dirty."
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|key
init|=
name|CacheUtils
operator|.
name|buildPartitionCacheKey
argument_list|(
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|PartitionWrapper
name|wrapper
init|=
name|partitionCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapper
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|wrapper
operator|.
name|getSdHash
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sharedCache
operator|.
name|decrSd
argument_list|(
name|wrapper
operator|.
name|getSdHash
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|wrapper
operator|=
name|makePartitionWrapper
argument_list|(
name|part
argument_list|,
name|sharedCache
argument_list|)
expr_stmt|;
name|newPartitionCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
block|}
name|partitionCache
operator|=
name|newPartitionCache
expr_stmt|;
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|updateTableColStats
parameter_list|(
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatsForTable
parameter_list|)
block|{
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|colStatObj
range|:
name|colStatsForTable
control|)
block|{
comment|// Get old stats object if present
name|String
name|key
init|=
name|colStatObj
operator|.
name|getColName
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|oldStatsObj
init|=
name|tableColStatsCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStatsObj
operator|!=
literal|null
condition|)
block|{
comment|// Update existing stat object's field
name|StatObjectConverter
operator|.
name|setFieldsIntoOldStats
argument_list|(
name|oldStatsObj
argument_list|,
name|colStatObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No stats exist for this key; add a new object to the cache
comment|// TODO: get rid of deepCopy after making sure callers don't use references
if|if
condition|(
name|maxCacheSizeInBytes
operator|>
literal|0
condition|)
block|{
name|ObjectEstimator
name|tblColStatsSizeEstimator
init|=
name|getMemorySizeEstimator
argument_list|(
name|ColumnStatisticsObj
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|estimatedMemUsage
init|=
name|tblColStatsSizeEstimator
operator|.
name|estimate
argument_list|(
name|colStatObj
argument_list|,
name|sizeEstimators
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Memory needed to cache Table Column Statistics Object: {} is {} bytes"
argument_list|,
name|colStatObj
argument_list|,
name|estimatedMemUsage
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCacheMemoryFull
argument_list|(
name|estimatedMemUsage
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot cache Table Column Statistics Object: {}. Memory needed is {} bytes, "
operator|+
literal|"whereas the memory remaining is: {} bytes."
argument_list|,
name|colStatObj
argument_list|,
name|estimatedMemUsage
argument_list|,
operator|(
literal|0.8
operator|*
name|maxCacheSizeInBytes
operator|-
name|currentCacheSizeInBytes
operator|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|currentCacheSizeInBytes
operator|+=
name|estimatedMemUsage
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Current cache size: {} bytes"
argument_list|,
name|currentCacheSizeInBytes
argument_list|)
expr_stmt|;
block|}
name|tableColStatsCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|colStatObj
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|isTableColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refreshTableColStats
parameter_list|(
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatsForTable
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|newTableColStatsCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|colStatObj
range|:
name|colStatsForTable
control|)
block|{
if|if
condition|(
name|isTableColStatsCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping table col stats cache update for table: "
operator|+
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|"; the table col stats list we have is dirty."
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|key
init|=
name|colStatObj
operator|.
name|getColName
argument_list|()
decl_stmt|;
comment|// TODO: get rid of deepCopy after making sure callers don't use references
name|newTableColStatsCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|colStatObj
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tableColStatsCache
operator|=
name|newTableColStatsCache
expr_stmt|;
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getCachedTableColStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|tableLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|colNames
control|)
block|{
name|ColumnStatisticsObj
name|colStatObj
init|=
name|tableColStatsCache
operator|.
name|get
argument_list|(
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|colStatObj
operator|!=
literal|null
condition|)
block|{
name|colStatObjs
operator|.
name|add
argument_list|(
name|colStatObj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|tableLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|colStatObjs
return|;
block|}
specifier|public
name|void
name|removeTableColStats
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|tableColStatsCache
operator|.
name|remove
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|isTableColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ColumnStatisticsObj
name|getPartitionColStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVal
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
try|try
block|{
name|tableLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|partitionColStatsCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildPartitonColStatsCacheKey
argument_list|(
name|partVal
argument_list|,
name|colName
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|tableLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|updatePartitionColStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVal
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatsObjs
parameter_list|)
block|{
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|colStatObj
range|:
name|colStatsObjs
control|)
block|{
comment|// Get old stats object if present
name|String
name|key
init|=
name|CacheUtils
operator|.
name|buildPartitonColStatsCacheKey
argument_list|(
name|partVal
argument_list|,
name|colStatObj
operator|.
name|getColName
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnStatisticsObj
name|oldStatsObj
init|=
name|partitionColStatsCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStatsObj
operator|!=
literal|null
condition|)
block|{
comment|// Update existing stat object's field
name|StatObjectConverter
operator|.
name|setFieldsIntoOldStats
argument_list|(
name|oldStatsObj
argument_list|,
name|colStatObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No stats exist for this key; add a new object to the cache
comment|// TODO: get rid of deepCopy after making sure callers don't use references
if|if
condition|(
name|maxCacheSizeInBytes
operator|>
literal|0
condition|)
block|{
name|ObjectEstimator
name|ptnColStatsSizeEstimator
init|=
name|getMemorySizeEstimator
argument_list|(
name|ColumnStatisticsObj
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|estimatedMemUsage
init|=
name|ptnColStatsSizeEstimator
operator|.
name|estimate
argument_list|(
name|colStatObj
argument_list|,
name|sizeEstimators
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Memory needed to cache Partition Column Statistics Object: {} is {} bytes"
argument_list|,
name|colStatObj
argument_list|,
name|estimatedMemUsage
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCacheMemoryFull
argument_list|(
name|estimatedMemUsage
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot cache Partition Column Statistics Object: {}. Memory needed is {} bytes, "
operator|+
literal|"whereas the memory remaining is: {} bytes."
argument_list|,
name|colStatObj
argument_list|,
name|estimatedMemUsage
argument_list|,
operator|(
literal|0.8
operator|*
name|maxCacheSizeInBytes
operator|-
name|currentCacheSizeInBytes
operator|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|currentCacheSizeInBytes
operator|+=
name|estimatedMemUsage
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Current cache size: {} bytes"
argument_list|,
name|currentCacheSizeInBytes
argument_list|)
expr_stmt|;
block|}
name|partitionColStatsCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|colStatObj
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|isPartitionColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Invalidate cached aggregate stats
if|if
condition|(
operator|!
name|aggrColStatsCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|aggrColStatsCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|removePartitionColStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|partitionColStatsCache
operator|.
name|remove
argument_list|(
name|CacheUtils
operator|.
name|buildPartitonColStatsCacheKey
argument_list|(
name|partVals
argument_list|,
name|colName
argument_list|)
argument_list|)
expr_stmt|;
name|isPartitionColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Invalidate cached aggregate stats
if|if
condition|(
operator|!
name|aggrColStatsCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|aggrColStatsCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refreshPartitionColStats
parameter_list|(
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|partitionColStats
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|newPartitionColStatsCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|String
name|tableName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnStatistics
name|cs
range|:
name|partitionColStats
control|)
block|{
if|if
condition|(
name|isPartitionColStatsCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping partition column stats cache update for table: "
operator|+
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|"; the partition column stats list we have is dirty"
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|partVal
decl_stmt|;
try|try
block|{
name|partVal
operator|=
name|Warehouse
operator|.
name|makeValsFromName
argument_list|(
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getPartName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatsObjs
init|=
name|cs
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|colStatObj
range|:
name|colStatsObjs
control|)
block|{
if|if
condition|(
name|isPartitionColStatsCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping partition column stats cache update for table: "
operator|+
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|"; the partition column list we have is dirty"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|key
init|=
name|CacheUtils
operator|.
name|buildPartitonColStatsCacheKey
argument_list|(
name|partVal
argument_list|,
name|colStatObj
operator|.
name|getColName
argument_list|()
argument_list|)
decl_stmt|;
name|newPartitionColStatsCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|colStatObj
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to cache partition column stats for table: "
operator|+
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|partitionColStatsCache
operator|=
name|newPartitionColStatsCache
expr_stmt|;
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getAggrPartitionColStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|StatsType
name|statsType
parameter_list|)
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|tableLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|colNames
control|)
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatList
init|=
name|aggrColStatsCache
operator|.
name|get
argument_list|(
name|colName
argument_list|)
decl_stmt|;
comment|// If unable to find stats for a column, return null so we can build stats
if|if
condition|(
name|colStatList
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ColumnStatisticsObj
name|colStatObj
init|=
name|colStatList
operator|.
name|get
argument_list|(
name|statsType
operator|.
name|getPosition
argument_list|()
argument_list|)
decl_stmt|;
comment|// If unable to find stats for this StatsType, return null so we can build stats
if|if
condition|(
name|colStatObj
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|colStats
operator|.
name|add
argument_list|(
name|colStatObj
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tableLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|colStats
return|;
block|}
specifier|public
name|void
name|cacheAggrPartitionColStats
parameter_list|(
name|AggrStats
name|aggrStatsAllPartitions
parameter_list|,
name|AggrStats
name|aggrStatsAllButDefaultPartition
parameter_list|)
block|{
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|aggrStatsAllPartitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ColumnStatisticsObj
name|statObj
range|:
name|aggrStatsAllPartitions
operator|.
name|getColStats
argument_list|()
control|)
block|{
if|if
condition|(
name|statObj
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|aggrStats
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
name|aggrStats
operator|.
name|add
argument_list|(
name|StatsType
operator|.
name|ALL
operator|.
name|ordinal
argument_list|()
argument_list|,
name|statObj
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
name|aggrColStatsCache
operator|.
name|put
argument_list|(
name|statObj
operator|.
name|getColName
argument_list|()
argument_list|,
name|aggrStats
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|aggrStatsAllButDefaultPartition
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ColumnStatisticsObj
name|statObj
range|:
name|aggrStatsAllButDefaultPartition
operator|.
name|getColStats
argument_list|()
control|)
block|{
if|if
condition|(
name|statObj
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|aggrStats
init|=
name|aggrColStatsCache
operator|.
name|get
argument_list|(
name|statObj
operator|.
name|getColName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggrStats
operator|==
literal|null
condition|)
block|{
name|aggrStats
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|aggrStats
operator|.
name|add
argument_list|(
name|StatsType
operator|.
name|ALLBUTDEFAULT
operator|.
name|ordinal
argument_list|()
argument_list|,
name|statObj
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|isAggrPartitionColStatsCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refreshAggrPartitionColStats
parameter_list|(
name|AggrStats
name|aggrStatsAllPartitions
parameter_list|,
name|AggrStats
name|aggrStatsAllButDefaultPartition
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|newAggrColStatsCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|aggrStatsAllPartitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ColumnStatisticsObj
name|statObj
range|:
name|aggrStatsAllPartitions
operator|.
name|getColStats
argument_list|()
control|)
block|{
if|if
condition|(
name|isAggrPartitionColStatsCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping aggregate stats cache update for table: "
operator|+
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|"; the aggregate stats list we have is dirty"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|statObj
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|aggrStats
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
name|aggrStats
operator|.
name|add
argument_list|(
name|StatsType
operator|.
name|ALL
operator|.
name|ordinal
argument_list|()
argument_list|,
name|statObj
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
name|newAggrColStatsCache
operator|.
name|put
argument_list|(
name|statObj
operator|.
name|getColName
argument_list|()
argument_list|,
name|aggrStats
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|aggrStatsAllButDefaultPartition
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ColumnStatisticsObj
name|statObj
range|:
name|aggrStatsAllButDefaultPartition
operator|.
name|getColStats
argument_list|()
control|)
block|{
if|if
condition|(
name|isAggrPartitionColStatsCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping aggregate stats cache update for table: "
operator|+
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|"; the aggregate stats list we have is dirty"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|statObj
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|aggrStats
init|=
name|newAggrColStatsCache
operator|.
name|get
argument_list|(
name|statObj
operator|.
name|getColName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggrStats
operator|==
literal|null
condition|)
block|{
name|aggrStats
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|aggrStats
operator|.
name|add
argument_list|(
name|StatsType
operator|.
name|ALLBUTDEFAULT
operator|.
name|ordinal
argument_list|()
argument_list|,
name|statObj
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|aggrColStatsCache
operator|=
name|newAggrColStatsCache
expr_stmt|;
block|}
finally|finally
block|{
name|tableLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateTableObj
parameter_list|(
name|Table
name|newTable
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
block|{
name|byte
index|[]
name|sdHash
init|=
name|getSdHash
argument_list|()
decl_stmt|;
comment|// Remove old table object's sd hash
if|if
condition|(
name|sdHash
operator|!=
literal|null
condition|)
block|{
name|sharedCache
operator|.
name|decrSd
argument_list|(
name|sdHash
argument_list|)
expr_stmt|;
block|}
name|Table
name|tblCopy
init|=
name|newTable
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
if|if
condition|(
name|tblCopy
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tblCopy
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|fs
operator|.
name|setName
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|setTable
argument_list|(
name|tblCopy
argument_list|)
expr_stmt|;
if|if
condition|(
name|tblCopy
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sdHash
operator|=
name|MetaStoreUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|tblCopy
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
name|tblCopy
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|sharedCache
operator|.
name|increSd
argument_list|(
name|sd
argument_list|,
name|sdHash
argument_list|)
expr_stmt|;
name|tblCopy
operator|.
name|setSd
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setSdHash
argument_list|(
name|sdHash
argument_list|)
expr_stmt|;
name|setLocation
argument_list|(
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|setParameters
argument_list|(
name|sd
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setSdHash
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setLocation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setParameters
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PartitionWrapper
name|makePartitionWrapper
parameter_list|(
name|Partition
name|part
parameter_list|,
name|SharedCache
name|sharedCache
parameter_list|)
block|{
name|Partition
name|partCopy
init|=
name|part
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|PartitionWrapper
name|wrapper
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|sdHash
init|=
name|MetaStoreUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
name|part
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|sharedCache
operator|.
name|increSd
argument_list|(
name|sd
argument_list|,
name|sdHash
argument_list|)
expr_stmt|;
name|partCopy
operator|.
name|setSd
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|wrapper
operator|=
operator|new
name|PartitionWrapper
argument_list|(
name|partCopy
argument_list|,
name|sdHash
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wrapper
operator|=
operator|new
name|PartitionWrapper
argument_list|(
name|partCopy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapper
return|;
block|}
block|}
specifier|static
class|class
name|PartitionWrapper
block|{
name|Partition
name|p
decl_stmt|;
name|String
name|location
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
name|byte
index|[]
name|sdHash
decl_stmt|;
name|PartitionWrapper
parameter_list|(
name|Partition
name|p
parameter_list|,
name|byte
index|[]
name|sdHash
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|sdHash
operator|=
name|sdHash
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
specifier|public
name|Partition
name|getPartition
parameter_list|()
block|{
return|return
name|p
return|;
block|}
specifier|public
name|byte
index|[]
name|getSdHash
parameter_list|()
block|{
return|return
name|sdHash
return|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
block|}
specifier|static
class|class
name|StorageDescriptorWrapper
block|{
name|StorageDescriptor
name|sd
decl_stmt|;
name|int
name|refCount
init|=
literal|0
decl_stmt|;
name|StorageDescriptorWrapper
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|int
name|refCount
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
name|this
operator|.
name|refCount
operator|=
name|refCount
expr_stmt|;
block|}
specifier|public
name|StorageDescriptor
name|getSd
parameter_list|()
block|{
return|return
name|sd
return|;
block|}
specifier|public
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|refCount
return|;
block|}
block|}
specifier|public
name|void
name|populateCatalogsInCache
parameter_list|(
name|Collection
argument_list|<
name|Catalog
argument_list|>
name|catalogs
parameter_list|)
block|{
for|for
control|(
name|Catalog
name|cat
range|:
name|catalogs
control|)
block|{
name|Catalog
name|catCopy
init|=
name|cat
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
comment|// ObjectStore also stores db name in lowercase
name|catCopy
operator|.
name|setName
argument_list|(
name|catCopy
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// Since we allow write operations on cache while prewarm is happening:
comment|// 1. Don't add databases that were deleted while we were preparing list for prewarm
comment|// 2. Skip overwriting exisiting db object
comment|// (which is present because it was added after prewarm started)
if|if
condition|(
name|catalogsDeletedDuringPrewarm
operator|.
name|contains
argument_list|(
name|catCopy
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|catalogCache
operator|.
name|putIfAbsent
argument_list|(
name|catCopy
operator|.
name|getName
argument_list|()
argument_list|,
name|catCopy
argument_list|)
expr_stmt|;
name|catalogsDeletedDuringPrewarm
operator|.
name|clear
argument_list|()
expr_stmt|;
name|isCatalogCachePrewarmed
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Catalog
name|getCatalogFromCache
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Catalog
name|cat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|catalogCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|cat
operator|=
name|catalogCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|deepCopy
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|cat
return|;
block|}
specifier|public
name|void
name|addCatalogToCache
parameter_list|(
name|Catalog
name|cat
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Catalog
name|catCopy
init|=
name|cat
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
comment|// ObjectStore also stores db name in lowercase
name|catCopy
operator|.
name|setName
argument_list|(
name|catCopy
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|catalogCache
operator|.
name|put
argument_list|(
name|cat
operator|.
name|getName
argument_list|()
argument_list|,
name|catCopy
argument_list|)
expr_stmt|;
name|isCatalogCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|alterCatalogInCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|Catalog
name|newCat
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|removeCatalogFromCache
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|addCatalogToCache
argument_list|(
name|newCat
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeCatalogFromCache
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|normalizeIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// If db cache is not yet prewarmed, add this to a set which the prewarm thread can check
comment|// so that the prewarm thread does not add it back
if|if
condition|(
operator|!
name|isCatalogCachePrewarmed
condition|)
block|{
name|catalogsDeletedDuringPrewarm
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|catalogCache
operator|.
name|remove
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|isCatalogCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listCachedCatalogs
parameter_list|()
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|catalogCache
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isCatalogCachePrewarmed
parameter_list|()
block|{
return|return
name|isCatalogCachePrewarmed
return|;
block|}
specifier|public
name|Database
name|getDatabaseFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Database
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|String
name|key
init|=
name|CacheUtils
operator|.
name|buildDbKey
argument_list|(
name|catName
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|databaseCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|db
operator|=
name|databaseCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|deepCopy
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|db
return|;
block|}
specifier|public
name|void
name|populateDatabasesInCache
parameter_list|(
name|List
argument_list|<
name|Database
argument_list|>
name|databases
parameter_list|)
block|{
for|for
control|(
name|Database
name|db
range|:
name|databases
control|)
block|{
name|Database
name|dbCopy
init|=
name|db
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
comment|// ObjectStore also stores db name in lowercase
name|dbCopy
operator|.
name|setName
argument_list|(
name|dbCopy
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// Since we allow write operations on cache while prewarm is happening:
comment|// 1. Don't add databases that were deleted while we were preparing list for prewarm
comment|// 2. Skip overwriting exisiting db object
comment|// (which is present because it was added after prewarm started)
name|String
name|key
init|=
name|CacheUtils
operator|.
name|buildDbKey
argument_list|(
name|dbCopy
operator|.
name|getCatalogName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|dbCopy
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|databasesDeletedDuringPrewarm
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|databaseCache
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|dbCopy
argument_list|)
expr_stmt|;
name|databasesDeletedDuringPrewarm
operator|.
name|clear
argument_list|()
expr_stmt|;
name|isDatabaseCachePrewarmed
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isDatabaseCachePrewarmed
parameter_list|()
block|{
return|return
name|isDatabaseCachePrewarmed
return|;
block|}
specifier|public
name|void
name|addDatabaseToCache
parameter_list|(
name|Database
name|db
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Database
name|dbCopy
init|=
name|db
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
comment|// ObjectStore also stores db name in lowercase
name|dbCopy
operator|.
name|setName
argument_list|(
name|dbCopy
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|dbCopy
operator|.
name|setCatalogName
argument_list|(
name|dbCopy
operator|.
name|getCatalogName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|databaseCache
operator|.
name|put
argument_list|(
name|CacheUtils
operator|.
name|buildDbKey
argument_list|(
name|dbCopy
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|dbCopy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|dbCopy
argument_list|)
expr_stmt|;
name|isDatabaseCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeDatabaseFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// If db cache is not yet prewarmed, add this to a set which the prewarm thread can check
comment|// so that the prewarm thread does not add it back
name|String
name|key
init|=
name|CacheUtils
operator|.
name|buildDbKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isDatabaseCachePrewarmed
condition|)
block|{
name|databasesDeletedDuringPrewarm
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|databaseCache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|isDatabaseCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listCachedDatabases
parameter_list|(
name|String
name|catName
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|pair
range|:
name|databaseCache
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
index|[]
name|n
init|=
name|CacheUtils
operator|.
name|splitDbName
argument_list|(
name|pair
argument_list|)
decl_stmt|;
if|if
condition|(
name|catName
operator|.
name|equals
argument_list|(
name|n
index|[
literal|0
index|]
argument_list|)
condition|)
name|results
operator|.
name|add
argument_list|(
name|n
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listCachedDatabases
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|pair
range|:
name|databaseCache
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
index|[]
name|n
init|=
name|CacheUtils
operator|.
name|splitDbName
argument_list|(
name|pair
argument_list|)
decl_stmt|;
if|if
condition|(
name|catName
operator|.
name|equals
argument_list|(
name|n
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|n
index|[
literal|1
index|]
operator|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|n
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|n
index|[
literal|1
index|]
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|n
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**    * Replaces the old db object with the new one. This will add the new database to cache if it does    * not exist.    */
specifier|public
name|void
name|alterDatabaseInCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|Database
name|newDb
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|removeDatabaseFromCache
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|addDatabaseToCache
argument_list|(
name|newDb
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
name|isDatabaseCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refreshDatabasesInCache
parameter_list|(
name|List
argument_list|<
name|Database
argument_list|>
name|databases
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDatabaseCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping database cache update; the database list we have is dirty."
argument_list|)
expr_stmt|;
return|return;
block|}
name|databaseCache
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Database
name|db
range|:
name|databases
control|)
block|{
name|addDatabaseToCache
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getCachedDatabaseCount
parameter_list|()
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|databaseCache
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|populateTableInCache
parameter_list|(
name|Table
name|table
parameter_list|,
name|ColumnStatistics
name|tableColStats
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|,
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|partitionColStats
parameter_list|,
name|AggrStats
name|aggrStatsAllPartitions
parameter_list|,
name|AggrStats
name|aggrStatsAllButDefaultPartition
parameter_list|)
block|{
name|String
name|catName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Since we allow write operations on cache while prewarm is happening:
comment|// 1. Don't add tables that were deleted while we were preparing list for prewarm
if|if
condition|(
name|tablesDeletedDuringPrewarm
operator|.
name|contains
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TableWrapper
name|tblWrapper
init|=
name|createTableWrapper
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCacheSizeInBytes
operator|>
literal|0
condition|)
block|{
name|ObjectEstimator
name|tblWrapperSizeEstimator
init|=
name|getMemorySizeEstimator
argument_list|(
name|TableWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|estimatedMemUsage
init|=
name|tblWrapperSizeEstimator
operator|.
name|estimate
argument_list|(
name|tblWrapper
argument_list|,
name|sizeEstimators
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Memory needed to cache Database: {}'s Table: {}, is {} bytes"
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|estimatedMemUsage
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCacheMemoryFull
argument_list|(
name|estimatedMemUsage
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot cache Database: {}'s Table: {}. Memory needed is {} bytes, "
operator|+
literal|"whereas the memory we have remaining is: {} bytes."
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|estimatedMemUsage
argument_list|,
operator|(
literal|0.8
operator|*
name|maxCacheSizeInBytes
operator|-
name|currentCacheSizeInBytes
operator|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|currentCacheSizeInBytes
operator|+=
name|estimatedMemUsage
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current cache size: {} bytes"
argument_list|,
name|currentCacheSizeInBytes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|table
operator|.
name|isSetPartitionKeys
argument_list|()
operator|&&
operator|(
name|tableColStats
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|tblWrapper
operator|.
name|updateTableColStats
argument_list|(
name|tableColStats
operator|.
name|getStatsObj
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|partitions
operator|!=
literal|null
condition|)
block|{
comment|// If the partitions were not added due to memory limit, return false
if|if
condition|(
operator|!
name|tblWrapper
operator|.
name|cachePartitions
argument_list|(
name|partitions
argument_list|,
name|this
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|partitionColStats
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ColumnStatistics
name|cs
range|:
name|partitionColStats
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVal
decl_stmt|;
try|try
block|{
name|partVal
operator|=
name|Warehouse
operator|.
name|makeValsFromName
argument_list|(
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getPartName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
init|=
name|cs
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tblWrapper
operator|.
name|updatePartitionColStats
argument_list|(
name|partVal
argument_list|,
name|colStats
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to cache partition column stats for table: "
operator|+
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|tblWrapper
operator|.
name|cacheAggrPartitionColStats
argument_list|(
name|aggrStatsAllPartitions
argument_list|,
name|aggrStatsAllButDefaultPartition
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// 2. Skip overwriting exisiting table object
comment|// (which is present because it was added after prewarm started)
name|tableCache
operator|.
name|putIfAbsent
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|tblWrapper
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isCacheMemoryFull
parameter_list|(
name|long
name|estimatedMemUsage
parameter_list|)
block|{
return|return
operator|(
literal|0.8
operator|*
name|maxCacheSizeInBytes
operator|)
operator|<
operator|(
name|currentCacheSizeInBytes
operator|+
name|estimatedMemUsage
operator|)
return|;
block|}
specifier|public
name|void
name|completeTableCachePrewarm
parameter_list|()
block|{
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|tablesDeletedDuringPrewarm
operator|.
name|clear
argument_list|()
expr_stmt|;
name|isTableCachePrewarmed
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Table
name|getTableFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|Table
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|t
operator|=
name|CacheUtils
operator|.
name|assemble
argument_list|(
name|tblWrapper
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|public
name|TableWrapper
name|addTableToCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|tbl
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|wrapper
init|=
name|createTableWrapper
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tbl
argument_list|)
decl_stmt|;
name|tableCache
operator|.
name|put
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
name|isTableCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|wrapper
return|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|TableWrapper
name|createTableWrapper
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|tbl
parameter_list|)
block|{
name|TableWrapper
name|wrapper
decl_stmt|;
name|Table
name|tblCopy
init|=
name|tbl
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|tblCopy
operator|.
name|setCatName
argument_list|(
name|normalizeIdentifier
argument_list|(
name|catName
argument_list|)
argument_list|)
expr_stmt|;
name|tblCopy
operator|.
name|setDbName
argument_list|(
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
name|tblCopy
operator|.
name|setTableName
argument_list|(
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tblCopy
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tblCopy
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|fs
operator|.
name|setName
argument_list|(
name|normalizeIdentifier
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|sdHash
init|=
name|MetaStoreUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
name|tbl
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|increSd
argument_list|(
name|sd
argument_list|,
name|sdHash
argument_list|)
expr_stmt|;
name|tblCopy
operator|.
name|setSd
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|wrapper
operator|=
operator|new
name|TableWrapper
argument_list|(
name|tblCopy
argument_list|,
name|sdHash
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wrapper
operator|=
operator|new
name|TableWrapper
argument_list|(
name|tblCopy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapper
return|;
block|}
specifier|public
name|void
name|removeTableFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// If table cache is not yet prewarmed, add this to a set which the prewarm thread can check
comment|// so that the prewarm thread does not add it back
if|if
condition|(
operator|!
name|isTableCachePrewarmed
condition|)
block|{
name|tablesDeletedDuringPrewarm
operator|.
name|add
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|remove
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sdHash
init|=
name|tblWrapper
operator|.
name|getSdHash
argument_list|()
decl_stmt|;
if|if
condition|(
name|sdHash
operator|!=
literal|null
condition|)
block|{
name|decrSd
argument_list|(
name|sdHash
argument_list|)
expr_stmt|;
block|}
name|isTableCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|alterTableInCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|newTable
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|remove
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|updateTableObj
argument_list|(
name|newTable
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|String
name|newDbName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|newTblName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|tableCache
operator|.
name|put
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|newDbName
argument_list|,
name|newTblName
argument_list|)
argument_list|,
name|tblWrapper
argument_list|)
expr_stmt|;
name|isTableCacheDirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|listCachedTables
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|TableWrapper
name|wrapper
range|:
name|tableCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|wrapper
operator|.
name|sameDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
condition|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|CacheUtils
operator|.
name|assemble
argument_list|(
name|wrapper
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|tables
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listCachedTableNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|TableWrapper
name|wrapper
range|:
name|tableCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|wrapper
operator|.
name|sameDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
condition|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|wrapper
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|tableNames
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listCachedTableNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|,
name|short
name|maxTables
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TableWrapper
name|wrapper
range|:
name|tableCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|wrapper
operator|.
name|sameDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
operator|&&
name|CacheUtils
operator|.
name|matches
argument_list|(
name|wrapper
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|pattern
argument_list|)
operator|&&
operator|(
name|maxTables
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|maxTables
operator|)
condition|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|wrapper
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|tableNames
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listCachedTableNames
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|,
name|TableType
name|tableType
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|TableWrapper
name|wrapper
range|:
name|tableCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|wrapper
operator|.
name|sameDatabase
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
operator|&&
name|CacheUtils
operator|.
name|matches
argument_list|(
name|wrapper
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|pattern
argument_list|)
operator|&&
name|wrapper
operator|.
name|getTable
argument_list|()
operator|.
name|getTableType
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|wrapper
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|tableNames
return|;
block|}
specifier|public
name|void
name|refreshTablesInCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|Table
argument_list|>
name|tables
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|isTableCacheDirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping table cache update; the table list we have is dirty."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|TableWrapper
argument_list|>
name|newTableCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Table
name|tbl
range|:
name|tables
control|)
block|{
name|String
name|tblName
init|=
name|StringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|updateTableObj
argument_list|(
name|tbl
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tblWrapper
operator|=
name|createTableWrapper
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
name|newTableCache
operator|.
name|put
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|,
name|tblWrapper
argument_list|)
expr_stmt|;
block|}
name|tableCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCache
operator|=
name|newTableCache
expr_stmt|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getTableColStatsFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatObjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|colStatObjs
operator|=
name|tblWrapper
operator|.
name|getCachedTableColStats
argument_list|(
name|colNames
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|colStatObjs
return|;
block|}
specifier|public
name|void
name|removeTableColStatsFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|removeTableColStats
argument_list|(
name|colName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateTableColStatsInCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatsForTable
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|updateTableColStats
argument_list|(
name|colStatsForTable
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refreshTableColStatsInCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatsForTable
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|refreshTableColStats
argument_list|(
name|colStatsForTable
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getCachedTableCount
parameter_list|()
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|tableCache
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|TableMeta
argument_list|>
name|getTableMeta
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbNames
parameter_list|,
name|String
name|tableNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
block|{
name|List
argument_list|<
name|TableMeta
argument_list|>
name|tableMetas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|listCachedDatabases
argument_list|(
name|catName
argument_list|)
control|)
block|{
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|dbName
argument_list|,
name|dbNames
argument_list|)
condition|)
block|{
for|for
control|(
name|Table
name|table
range|:
name|listCachedTables
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|)
control|)
block|{
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tableNames
argument_list|)
condition|)
block|{
if|if
condition|(
name|tableTypes
operator|==
literal|null
operator|||
name|tableTypes
operator|.
name|contains
argument_list|(
name|table
operator|.
name|getTableType
argument_list|()
argument_list|)
condition|)
block|{
name|TableMeta
name|metaData
init|=
operator|new
name|TableMeta
argument_list|(
name|dbName
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableType
argument_list|()
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|setCatName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setComments
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|tableMetas
operator|.
name|add
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|tableMetas
return|;
block|}
specifier|public
name|void
name|addPartitionToCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Partition
name|part
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|cachePartition
argument_list|(
name|part
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addPartitionsToCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|cachePartitions
argument_list|(
name|parts
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Partition
name|getPartitionFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
name|Partition
name|part
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|part
operator|=
name|tblWrapper
operator|.
name|getPartition
argument_list|(
name|partVals
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|part
return|;
block|}
specifier|public
name|boolean
name|existPartitionFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
name|boolean
name|existsPart
init|=
literal|false
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|existsPart
operator|=
name|tblWrapper
operator|.
name|containsPartition
argument_list|(
name|partVals
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|existsPart
return|;
block|}
specifier|public
name|Partition
name|removePartitionFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
name|Partition
name|part
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|part
operator|=
name|tblWrapper
operator|.
name|removePartition
argument_list|(
name|partVals
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|part
return|;
block|}
specifier|public
name|void
name|removePartitionsFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|removePartitions
argument_list|(
name|partVals
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listCachedPartitions
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|parts
operator|=
name|tblWrapper
operator|.
name|listPartitions
argument_list|(
name|max
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
specifier|public
name|void
name|alterPartitionInCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|Partition
name|newPart
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|alterPartition
argument_list|(
name|partVals
argument_list|,
name|newPart
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|alterPartitionsInCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValsList
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|alterPartitions
argument_list|(
name|partValsList
argument_list|,
name|newParts
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refreshPartitionsInCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|refreshPartitions
argument_list|(
name|partitions
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removePartitionColStatsFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|removePartitionColStats
argument_list|(
name|partVals
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updatePartitionColStatsInCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatsObjs
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|updatePartitionColStats
argument_list|(
name|partVals
argument_list|,
name|colStatsObjs
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ColumnStatisticsObj
name|getPartitionColStatsFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVal
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
name|ColumnStatisticsObj
name|colStatObj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|colStatObj
operator|=
name|tblWrapper
operator|.
name|getPartitionColStats
argument_list|(
name|partVal
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|colStatObj
return|;
block|}
specifier|public
name|void
name|refreshPartitionColStatsInCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|partitionColStats
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|refreshPartitionColStats
argument_list|(
name|partitionColStats
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getAggrStatsFromCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|StatsType
name|statsType
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
return|return
name|tblWrapper
operator|.
name|getAggrPartitionColStats
argument_list|(
name|colNames
argument_list|,
name|statsType
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|addAggregateStatsToCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|AggrStats
name|aggrStatsAllPartitions
parameter_list|,
name|AggrStats
name|aggrStatsAllButDefaultPartition
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|cacheAggrPartitionColStats
argument_list|(
name|aggrStatsAllPartitions
argument_list|,
name|aggrStatsAllButDefaultPartition
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refreshAggregateStatsInCache
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|AggrStats
name|aggrStatsAllPartitions
parameter_list|,
name|AggrStats
name|aggrStatsAllButDefaultPartition
parameter_list|)
block|{
try|try
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildTableKey
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|!=
literal|null
condition|)
block|{
name|tblWrapper
operator|.
name|refreshAggrPartitionColStats
argument_list|(
name|aggrStatsAllPartitions
argument_list|,
name|aggrStatsAllButDefaultPartition
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|increSd
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|byte
index|[]
name|sdHash
parameter_list|)
block|{
name|ByteArrayWrapper
name|byteArray
init|=
operator|new
name|ByteArrayWrapper
argument_list|(
name|sdHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|sdCache
operator|.
name|containsKey
argument_list|(
name|byteArray
argument_list|)
condition|)
block|{
name|sdCache
operator|.
name|get
argument_list|(
name|byteArray
argument_list|)
operator|.
name|refCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|StorageDescriptor
name|sdToCache
init|=
name|sd
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|sdToCache
operator|.
name|setLocation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sdToCache
operator|.
name|setParameters
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sdCache
operator|.
name|put
argument_list|(
name|byteArray
argument_list|,
operator|new
name|StorageDescriptorWrapper
argument_list|(
name|sdToCache
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|decrSd
parameter_list|(
name|byte
index|[]
name|sdHash
parameter_list|)
block|{
name|ByteArrayWrapper
name|byteArray
init|=
operator|new
name|ByteArrayWrapper
argument_list|(
name|sdHash
argument_list|)
decl_stmt|;
name|StorageDescriptorWrapper
name|sdWrapper
init|=
name|sdCache
operator|.
name|get
argument_list|(
name|byteArray
argument_list|)
decl_stmt|;
name|sdWrapper
operator|.
name|refCount
operator|--
expr_stmt|;
if|if
condition|(
name|sdWrapper
operator|.
name|getRefCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sdCache
operator|.
name|remove
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|StorageDescriptor
name|getSdFromCache
parameter_list|(
name|byte
index|[]
name|sdHash
parameter_list|)
block|{
name|StorageDescriptorWrapper
name|sdWrapper
init|=
name|sdCache
operator|.
name|get
argument_list|(
operator|new
name|ByteArrayWrapper
argument_list|(
name|sdHash
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|sdWrapper
operator|.
name|getSd
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
name|Map
argument_list|<
name|String
argument_list|,
name|Database
argument_list|>
name|getDatabaseCache
parameter_list|()
block|{
return|return
name|databaseCache
return|;
block|}
annotation|@
name|VisibleForTesting
name|Map
argument_list|<
name|String
argument_list|,
name|TableWrapper
argument_list|>
name|getTableCache
parameter_list|()
block|{
return|return
name|tableCache
return|;
block|}
annotation|@
name|VisibleForTesting
name|Map
argument_list|<
name|ByteArrayWrapper
argument_list|,
name|StorageDescriptorWrapper
argument_list|>
name|getSdCache
parameter_list|()
block|{
return|return
name|sdCache
return|;
block|}
comment|/**    * This resets the contents of the cataog cache so that we can re-fill it in another test.    */
name|void
name|resetCatalogCache
parameter_list|()
block|{
name|isCatalogCachePrewarmed
operator|=
literal|false
expr_stmt|;
name|catalogCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|catalogsDeletedDuringPrewarm
operator|.
name|clear
argument_list|()
expr_stmt|;
name|isCatalogCacheDirty
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getUpdateCount
parameter_list|()
block|{
return|return
name|cacheUpdateCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|incrementUpdateCount
parameter_list|()
block|{
name|cacheUpdateCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

