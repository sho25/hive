begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isBlank
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|CATALOG_DB_SEPARATOR
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreFilterHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableMeta
import|;
end_import

begin_comment
comment|/**  * Utilities common to Filtering operations.  */
end_comment

begin_class
specifier|public
class|class
name|FilterUtils
block|{
comment|/**    * Filter the DB if filtering is enabled. Otherwise, return original DB object    * @param isFilterEnabled true: filtering is enabled; false: filtring is disabled.    * @param filterHook: the object that does filtering    * @param db: the database object from HMS metadata    * @return the original database object if current user has access;    *         otherwise, throw NoSuchObjectException exception    * @throws MetaException    * @throws NoSuchObjectException    */
specifier|public
specifier|static
name|Database
name|filterDbIfEnabled
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
name|isFilterEnabled
condition|)
block|{
name|Database
name|filteredDb
init|=
name|filterHook
operator|.
name|filterDatabase
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredDb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"DB "
operator|+
name|db
operator|.
name|getName
argument_list|()
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
block|}
return|return
name|db
return|;
block|}
comment|/**    * Filter the list of databases if filtering is enabled. Otherwise, return original list    * @param isFilterEnabled true: filtering is enabled; false: filtring is disabled.    * @param filterHook: the object that does filtering    * @param dbNames: the list of database names to filter    * @return the list of database names that current user has access if filtering is enabled;    *         otherwise, the original list    * @throws MetaException    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|filterDbNamesIfEnabled
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|isFilterEnabled
condition|)
block|{
return|return
name|filterHook
operator|.
name|filterDatabases
argument_list|(
name|dbNames
argument_list|)
return|;
block|}
return|return
name|dbNames
return|;
block|}
comment|/**    * Filter the list of tables if filtering is enabled. Otherwise, return original list    * @param isFilterEnabled true: filtering is enabled; false: filtring is disabled.    * @param filterHook: the object that does filtering    * @param catName: the catalog name of the tables    * @param dbName: the database name to the tables    * @param tableNames: the list of table names to filter    * @return the list of table names that current user has access if filtering is enabled;    *         otherwise, the original list    * @throws MetaException    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|filterTableNamesIfEnabled
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|isFilterEnabled
condition|)
block|{
return|return
name|filterHook
operator|.
name|filterTableNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableNames
argument_list|)
return|;
block|}
return|return
name|tableNames
return|;
block|}
comment|/**    * Filter the list of tables if filtering is enabled. Otherwise, return original list    * @param isFilterEnabled true: filtering is enabled; false: filtring is disabled.    * @param filterHook: the object that does filtering    * @param tables: the list of table objects to filter    * @return the list of tables that current user has access if filtering is enabled;    *         otherwise, the original list    * @throws MetaException    */
specifier|public
specifier|static
name|List
argument_list|<
name|Table
argument_list|>
name|filterTablesIfEnabled
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
name|List
argument_list|<
name|Table
argument_list|>
name|tables
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|isFilterEnabled
condition|)
block|{
return|return
name|filterHook
operator|.
name|filterTables
argument_list|(
name|tables
argument_list|)
return|;
block|}
return|return
name|tables
return|;
block|}
comment|/**    * Filter the table if filtering is enabled. Otherwise, return original table object    * @param isFilterEnabled true: filtering is enabled; false: filtring is disabled.    * @param filterHook: the object that does filtering    * @param table: the table object from Hive meta data    * @return the table object if user has access or filtering is disabled;    *         throw NoSuchObjectException if user does not have access to this table    * @throws MetaException    * @throws NoSuchObjectException    */
specifier|public
specifier|static
name|Table
name|filterTableIfEnabled
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
name|isFilterEnabled
condition|)
block|{
name|Table
name|filteredTable
init|=
name|filterHook
operator|.
name|filterTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Table "
operator|+
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
block|}
return|return
name|table
return|;
block|}
comment|/**    * Filter list of meta data of tables if filtering is enabled. Otherwise, return original list    * @param isFilterEnabled true: filtering is enabled; false: filtring is disabled.    * @param filterHook: the object that does filtering    * @param catName: the catalog name    * @param dbName: the database name    * @param tableMetas: the list of meta data of tables    * @return the list of table meta data that current user has access if filtering is enabled;    *         otherwise, the original list    * @throws MetaException    * @throws NoSuchObjectException    */
specifier|public
specifier|static
name|List
argument_list|<
name|TableMeta
argument_list|>
name|filterTableMetasIfEnabled
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|TableMeta
argument_list|>
name|tableMetas
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
name|tableMetas
operator|==
literal|null
operator|||
name|tableMetas
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|tableMetas
return|;
block|}
if|if
condition|(
name|isFilterEnabled
condition|)
block|{
return|return
name|filterHook
operator|.
name|filterTableMetas
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableMetas
argument_list|)
return|;
block|}
return|return
name|tableMetas
return|;
block|}
comment|/**    * Filter the partition if filtering is enabled. Otherwise, return original object    * @param isFilterEnabled true: filtering is enabled; false: filtring is disabled.    * @param filterHook: the object that does filtering    * @param p: the partition object    * @return the partition object that user has access or original list if filtering is disabled;    *         Otherwise, throw NoSuchObjectException    * @throws MetaException    * @throws NoSuchObjectException    */
specifier|public
specifier|static
name|Partition
name|filterPartitionIfEnabled
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
name|Partition
name|p
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
name|isFilterEnabled
condition|)
block|{
name|Partition
name|filteredPartition
init|=
name|filterHook
operator|.
name|filterPartition
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredPartition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Partition in "
operator|+
name|p
operator|.
name|getCatName
argument_list|()
operator|+
name|CATALOG_DB_SEPARATOR
operator|+
name|p
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|p
operator|.
name|getTableName
argument_list|()
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
block|}
return|return
name|p
return|;
block|}
comment|/**    * Filter the list of partitions if filtering is enabled. Otherwise, return original list    * @param isFilterEnabled true: filtering is enabled; false: filtring is disabled.    * @param filterHook: the object that does filtering    * @param partitions: the list of partitions    * @return the list of partitions that user has access or original list if filtering is disabled;    * @throws MetaException    */
specifier|public
specifier|static
name|List
argument_list|<
name|Partition
argument_list|>
name|filterPartitionsIfEnabled
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|isFilterEnabled
condition|)
block|{
return|return
name|filterHook
operator|.
name|filterPartitions
argument_list|(
name|partitions
argument_list|)
return|;
block|}
return|return
name|partitions
return|;
block|}
comment|/**    * Filter the list of partitions if filtering is enabled. Otherwise, return original list    * @param isFilterEnabled true: filtering is enabled; false: filtring is disabled.    * @param filterHook: the object that does filtering    * @param catName: the catalog name    * @param dbName: the database name    * @param tableName: the table name    * @param partitionNames: the list of partition names    * @return the list of partitions that current user has access if filtering is enabled;    *         Otherwise, the original list    * @throws MetaException    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|filterPartitionNamesIfEnabled
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
specifier|final
name|String
name|catName
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|isFilterEnabled
condition|)
block|{
return|return
name|filterHook
operator|.
name|filterPartitionNames
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionNames
argument_list|)
return|;
block|}
return|return
name|partitionNames
return|;
block|}
comment|/**    * Filter the list of PartitionSpec if filtering is enabled; Otherwise, return original list    * @param isFilterEnabled true: filtering is enabled; false: filtring is disabled.    * @param filterHook: the object that does filtering    * @param partitionSpecs: the list of PartitionSpec    * @return the list of PartitionSpec that current user has access if filtering is enabled;    *         Otherwise, the original list    * @throws MetaException    */
specifier|public
specifier|static
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|filterPartitionSpecsIfEnabled
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|partitionSpecs
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|isFilterEnabled
condition|)
block|{
return|return
name|filterHook
operator|.
name|filterPartitionSpecs
argument_list|(
name|partitionSpecs
argument_list|)
return|;
block|}
return|return
name|partitionSpecs
return|;
block|}
comment|/**    * Filter the catalog if filtering is enabled; Otherwise, return original object    * @param isFilterEnabled true: filtering is enabled; false: filtring is disabled.    * @param filterHook: the object that does filtering    * @param catalog: the catalog object    * @return the catalog object that current user has access or filtering is disabled;    *         Otherwise, throw NoSuchObjectException    * @throws MetaException    * @throws NoSuchObjectException    */
specifier|public
specifier|static
name|Catalog
name|filterCatalogIfEnabled
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
name|Catalog
name|catalog
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
name|isFilterEnabled
condition|)
block|{
name|Catalog
name|filteredCatalog
init|=
name|filterHook
operator|.
name|filterCatalog
argument_list|(
name|catalog
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredCatalog
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Catalog "
operator|+
name|catalog
operator|.
name|getName
argument_list|()
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
block|}
return|return
name|catalog
return|;
block|}
comment|/**    * Filter list of catalog names if filtering is enabled; Otherwise, return original list    * @param isFilterEnabled true: filtering is enabled; false: filtring is disabled.    * @param filterHook: the object that does filtering    * @param catalogNames: the list of catalog names    * @return the list of catalog names that the current user has access or    *         original list if filtering is disabled;    * @throws MetaException    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|filterCatalogNamesIfEnabled
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|catalogNames
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|isFilterEnabled
condition|)
block|{
return|return
name|filterHook
operator|.
name|filterCatalogs
argument_list|(
name|catalogNames
argument_list|)
return|;
block|}
return|return
name|catalogNames
return|;
block|}
comment|/**    * Check if the current user has access to a given database and table name. Throw    * NoSuchObjectException if user has no access. When the db or table is filtered out, we don't need    * to even fetch the partitions. Therefore this check ensures table-level security and    * could improve performance when filtering partitions.    * @param dbName the database name    * @param tblName the table name contained in the database    * @throws NoSuchObjectException if the database or table is filtered out    */
specifier|public
specifier|static
name|void
name|checkDbAndTableFilters
parameter_list|(
name|boolean
name|isFilterEnabled
parameter_list|,
name|MetaStoreFilterHook
name|filterHook
parameter_list|,
specifier|final
name|String
name|catName
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
if|if
condition|(
name|catName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"catName is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isBlank
argument_list|(
name|catName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"catName is not valid"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"dbName is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isBlank
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"dbName is not valid"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|filteredDb
init|=
name|filterDbNamesIfEnabled
argument_list|(
name|isFilterEnabled
argument_list|,
name|filterHook
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|dbName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredDb
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Database "
operator|+
name|dbName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tblName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"tblName is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isBlank
argument_list|(
name|tblName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"tblName is not valid"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|filteredTable
init|=
name|filterTableNamesIfEnabled
argument_list|(
name|isFilterEnabled
argument_list|,
name|filterHook
argument_list|,
name|catName
argument_list|,
name|dbName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Table "
operator|+
name|tblName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

