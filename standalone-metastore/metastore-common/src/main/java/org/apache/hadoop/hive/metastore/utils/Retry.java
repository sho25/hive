begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
package|;
end_package

begin_comment
comment|/**  * Class to implement any retry logic in case of exceptions.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Retry
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
specifier|static
specifier|final
name|int
name|MAX_RETRIES
init|=
literal|3
decl_stmt|;
specifier|private
name|int
name|tries
init|=
literal|0
decl_stmt|;
specifier|private
name|Class
name|retryExceptionType
decl_stmt|;
specifier|public
name|Retry
parameter_list|(
name|Class
name|exceptionClassType
parameter_list|)
block|{
name|this
operator|.
name|retryExceptionType
operator|=
name|exceptionClassType
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|T
name|execute
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|public
name|T
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|execute
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|retryExceptionType
argument_list|)
condition|)
block|{
name|tries
operator|++
expr_stmt|;
if|if
condition|(
name|MAX_RETRIES
operator|==
name|tries
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
return|return
name|run
argument_list|()
return|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

