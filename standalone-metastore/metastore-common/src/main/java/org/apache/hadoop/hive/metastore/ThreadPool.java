begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_comment
comment|/**  * Utility singleton class to manage all the threads.  */
end_comment

begin_class
specifier|public
class|class
name|ThreadPool
block|{
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ThreadPool
name|self
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|ScheduledExecutorService
name|pool
decl_stmt|;
specifier|public
specifier|static
specifier|synchronized
name|ThreadPool
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|self
operator|==
literal|null
condition|)
block|{
name|self
operator|=
operator|new
name|ThreadPool
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"ThreadPool initialized"
argument_list|)
expr_stmt|;
block|}
return|return
name|self
return|;
block|}
specifier|private
name|ThreadPool
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|pool
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|MetastoreConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|THREAD_POOL_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ScheduledExecutorService
name|getPool
parameter_list|()
block|{
if|if
condition|(
name|self
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ThreadPool accessed before initialized"
argument_list|)
throw|;
block|}
return|return
name|pool
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|self
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|self
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

