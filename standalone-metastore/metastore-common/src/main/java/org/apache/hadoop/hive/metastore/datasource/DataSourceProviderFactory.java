begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|datasource
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_comment
comment|/**  * Create a DataSourceProvider for a connectionPool configured in a hadoop  * Configuration object.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DataSourceProviderFactory
block|{
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|DataSourceProvider
argument_list|>
name|FACTORIES
init|=
name|ImmutableList
operator|.
expr|<
name|DataSourceProvider
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|HikariCPDataSourceProvider
argument_list|()
argument_list|,
operator|new
name|BoneCPDataSourceProvider
argument_list|()
argument_list|,
operator|new
name|DbCPDataSourceProvider
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|/**    * @param hdpConfig hadoop configuration    * @return factory for the configured datanucleus.connectionPoolingType    */
specifier|public
specifier|static
name|DataSourceProvider
name|getDataSourceProvider
parameter_list|(
name|Configuration
name|hdpConfig
parameter_list|)
block|{
for|for
control|(
name|DataSourceProvider
name|factory
range|:
name|FACTORIES
control|)
block|{
if|if
condition|(
name|factory
operator|.
name|supports
argument_list|(
name|hdpConfig
argument_list|)
condition|)
block|{
return|return
name|factory
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * @param hdpConfig hadoop configuration    * @return true if the configuration contains settings specifically aimed for one    * of the supported conntection pool implementations.    */
specifier|public
specifier|static
name|boolean
name|hasProviderSpecificConfigurations
parameter_list|(
name|Configuration
name|hdpConfig
parameter_list|)
block|{
name|String
name|poolingType
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|hdpConfig
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECTION_POOLING_TYPE
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
return|return
name|Iterables
operator|.
name|any
argument_list|(
name|hdpConfig
argument_list|,
name|entry
lambda|->
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
return|return
name|key
operator|!=
literal|null
operator|&&
operator|(
name|key
operator|.
name|startsWith
argument_list|(
name|poolingType
argument_list|)
operator|)
return|;
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

