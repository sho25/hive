begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_comment
comment|/**  * A factory for common types of directory service search queries.  */
end_comment

begin_class
specifier|final
class|class
name|QueryFactory
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|USER_OBJECT_CLASSES
init|=
block|{
literal|"person"
block|,
literal|"user"
block|,
literal|"inetOrgPerson"
block|}
decl_stmt|;
specifier|private
specifier|final
name|String
name|guidAttr
decl_stmt|;
specifier|private
specifier|final
name|String
name|groupClassAttr
decl_stmt|;
specifier|private
specifier|final
name|String
name|groupMembershipAttr
decl_stmt|;
specifier|private
specifier|final
name|String
name|userMembershipAttr
decl_stmt|;
comment|/**    * Constructs the factory based on provided Hive configuration.    * @param conf Hive configuration    */
specifier|public
name|QueryFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|guidAttr
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PLAIN_LDAP_GUIDKEY
argument_list|)
expr_stmt|;
name|groupClassAttr
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PLAIN_LDAP_GROUPCLASS_KEY
argument_list|)
expr_stmt|;
name|groupMembershipAttr
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PLAIN_LDAP_GROUPMEMBERSHIP_KEY
argument_list|)
expr_stmt|;
name|userMembershipAttr
operator|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PLAIN_LDAP_USERMEMBERSHIP_KEY
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a query for finding Group DN based on group unique ID.    * @param groupId group unique identifier    * @return an instance of {@link Query}    */
specifier|public
name|Query
name|findGroupDnById
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
return|return
name|Query
operator|.
name|builder
argument_list|()
operator|.
name|filter
argument_list|(
literal|"(&(objectClass=<groupClassAttr>)(<guidAttr>=<groupID>))"
argument_list|)
operator|.
name|map
argument_list|(
literal|"guidAttr"
argument_list|,
name|guidAttr
argument_list|)
operator|.
name|map
argument_list|(
literal|"groupClassAttr"
argument_list|,
name|groupClassAttr
argument_list|)
operator|.
name|map
argument_list|(
literal|"groupID"
argument_list|,
name|groupId
argument_list|)
operator|.
name|limit
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a query for finding user DN based on user RDN.    * @param userRdn user RDN    * @return an instance of {@link Query}    */
specifier|public
name|Query
name|findUserDnByRdn
parameter_list|(
name|String
name|userRdn
parameter_list|)
block|{
return|return
name|Query
operator|.
name|builder
argument_list|()
operator|.
name|filter
argument_list|(
literal|"(&(|<classes:{ class |(objectClass=<class>)}>)"
operator|+
literal|"(<userRdn>))"
argument_list|)
operator|.
name|limit
argument_list|(
literal|2
argument_list|)
operator|.
name|map
argument_list|(
literal|"classes"
argument_list|,
name|USER_OBJECT_CLASSES
argument_list|)
operator|.
name|map
argument_list|(
literal|"userRdn"
argument_list|,
name|userRdn
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a query for finding user DN based on DN pattern.    *<br>    * Name of this method was derived from the original implementation of LDAP authentication.    * This method should be replaced by {@link QueryFactory#findUserDnByRdn(java.lang.String).    *    * @param rdn user RDN    * @return an instance of {@link Query}    */
specifier|public
name|Query
name|findDnByPattern
parameter_list|(
name|String
name|rdn
parameter_list|)
block|{
return|return
name|Query
operator|.
name|builder
argument_list|()
operator|.
name|filter
argument_list|(
literal|"(<rdn>)"
argument_list|)
operator|.
name|map
argument_list|(
literal|"rdn"
argument_list|,
name|rdn
argument_list|)
operator|.
name|limit
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a query for finding user DN based on user unique name.    * @param userName user unique name (uid or sAMAccountName)    * @return an instance of {@link Query}    */
specifier|public
name|Query
name|findUserDnByName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
return|return
name|Query
operator|.
name|builder
argument_list|()
operator|.
name|filter
argument_list|(
literal|"(&(|<classes:{ class |(objectClass=<class>)}>)"
operator|+
literal|"(|(uid=<userName>)(sAMAccountName=<userName>)))"
argument_list|)
operator|.
name|map
argument_list|(
literal|"classes"
argument_list|,
name|USER_OBJECT_CLASSES
argument_list|)
operator|.
name|map
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
operator|.
name|limit
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a query for finding groups to which the user belongs.    * @param userName username    * @param userDn user DN    * @return an instance of {@link Query}    */
specifier|public
name|Query
name|findGroupsForUser
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|userDn
parameter_list|)
block|{
return|return
name|Query
operator|.
name|builder
argument_list|()
operator|.
name|filter
argument_list|(
literal|"(&(objectClass=<groupClassAttr>)(|(<groupMembershipAttr>=<userDn>)"
operator|+
literal|"(<groupMembershipAttr>=<userName>)))"
argument_list|)
operator|.
name|map
argument_list|(
literal|"groupClassAttr"
argument_list|,
name|groupClassAttr
argument_list|)
operator|.
name|map
argument_list|(
literal|"groupMembershipAttr"
argument_list|,
name|groupMembershipAttr
argument_list|)
operator|.
name|map
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
operator|.
name|map
argument_list|(
literal|"userDn"
argument_list|,
name|userDn
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a query for checking whether specified user is a member of specified group.    *    * The query requires {@value MetastoreConf#METASTORE_AUTHENTICATION_LDAP_USERMEMBERSHIPKEY_NAME}    * Metastore configuration property to be set.    *    * @param userId user unique identifier    * @param groupDn group DN    * @return an instance of {@link Query}    * @see MetastoreConf.ConfVars#METASTORE_PLAIN_LDAP_USERMEMBERSHIP_KEY    * @throws NullPointerException when    * {@value MetastoreConf#METASTORE_AUTHENTICATION_LDAP_USERMEMBERSHIPKEY_NAME} is not set.    */
specifier|public
name|Query
name|isUserMemberOfGroup
parameter_list|(
name|String
name|userId
parameter_list|,
name|String
name|groupDn
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|userMembershipAttr
argument_list|)
argument_list|,
name|MetastoreConf
operator|.
name|METASTORE_AUTHENTICATION_LDAP_USERMEMBERSHIPKEY_NAME
operator|+
literal|" is not configured."
argument_list|)
expr_stmt|;
return|return
name|Query
operator|.
name|builder
argument_list|()
operator|.
name|filter
argument_list|(
literal|"(&(|<classes:{ class |(objectClass=<class>)}>)"
operator|+
literal|"(<userMembershipAttr>=<groupDn>)(<guidAttr>=<userId>))"
argument_list|)
operator|.
name|map
argument_list|(
literal|"classes"
argument_list|,
name|USER_OBJECT_CLASSES
argument_list|)
operator|.
name|map
argument_list|(
literal|"guidAttr"
argument_list|,
name|guidAttr
argument_list|)
operator|.
name|map
argument_list|(
literal|"userMembershipAttr"
argument_list|,
name|userMembershipAttr
argument_list|)
operator|.
name|map
argument_list|(
literal|"userId"
argument_list|,
name|userId
argument_list|)
operator|.
name|map
argument_list|(
literal|"groupDn"
argument_list|,
name|groupDn
argument_list|)
operator|.
name|limit
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a query object created for the custom filter.    *<br>    * This query is configured to return a group membership attribute as part of the search result.    * @param searchFilter custom search filter    * @return an instance of {@link Query}    */
specifier|public
name|Query
name|customQuery
parameter_list|(
name|String
name|searchFilter
parameter_list|)
block|{
name|Query
operator|.
name|QueryBuilder
name|builder
init|=
name|Query
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|filter
argument_list|(
name|searchFilter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|groupMembershipAttr
argument_list|)
condition|)
block|{
name|builder
operator|.
name|returnAttribute
argument_list|(
name|groupMembershipAttr
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

