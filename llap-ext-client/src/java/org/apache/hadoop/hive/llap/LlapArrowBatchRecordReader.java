begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|memory
operator|.
name|BufferAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|VectorSchemaRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|ipc
operator|.
name|ArrowStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowWrapperWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|RootAllocatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_comment
comment|/*  * Read from Arrow stream batch-by-batch  */
end_comment

begin_class
specifier|public
class|class
name|LlapArrowBatchRecordReader
extends|extends
name|LlapBaseRecordReader
argument_list|<
name|ArrowWrapperWritable
argument_list|>
block|{
specifier|private
name|BufferAllocator
name|allocator
decl_stmt|;
specifier|private
name|ArrowStreamReader
name|arrowStreamReader
decl_stmt|;
comment|//Allows client to provide and manage their own arrow BufferAllocator
specifier|public
name|LlapArrowBatchRecordReader
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|Class
argument_list|<
name|ArrowWrapperWritable
argument_list|>
name|clazz
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Closeable
name|client
parameter_list|,
name|Socket
name|socket
parameter_list|,
name|BufferAllocator
name|allocator
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|schema
argument_list|,
name|clazz
argument_list|,
name|job
argument_list|,
name|client
argument_list|,
name|socket
argument_list|)
expr_stmt|;
name|this
operator|.
name|allocator
operator|=
name|allocator
expr_stmt|;
name|this
operator|.
name|arrowStreamReader
operator|=
operator|new
name|ArrowStreamReader
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
block|}
comment|//Use the global arrow BufferAllocator
specifier|public
name|LlapArrowBatchRecordReader
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|Class
argument_list|<
name|ArrowWrapperWritable
argument_list|>
name|clazz
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Closeable
name|client
parameter_list|,
name|Socket
name|socket
parameter_list|,
name|long
name|arrowAllocatorLimit
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|in
argument_list|,
name|schema
argument_list|,
name|clazz
argument_list|,
name|job
argument_list|,
name|client
argument_list|,
name|socket
argument_list|,
name|RootAllocatorFactory
operator|.
name|INSTANCE
operator|.
name|getOrCreateRootAllocator
argument_list|(
name|arrowAllocatorLimit
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|ArrowWrapperWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// Need a way to know what thread to interrupt, since this is a blocking thread.
name|setReaderThread
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasInput
init|=
name|arrowStreamReader
operator|.
name|loadNextBatch
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasInput
condition|)
block|{
name|VectorSchemaRoot
name|vectorSchemaRoot
init|=
name|arrowStreamReader
operator|.
name|getVectorSchemaRoot
argument_list|()
decl_stmt|;
comment|//There must be at least one column vector
name|Preconditions
operator|.
name|checkState
argument_list|(
name|vectorSchemaRoot
operator|.
name|getFieldVectors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// We should continue even if FieldVectors are empty. The next read might have the
comment|// data. We should stop only when loadNextBatch returns false.
name|value
operator|.
name|setVectorSchemaRoot
argument_list|(
name|arrowStreamReader
operator|.
name|getVectorSchemaRoot
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|processReaderEvent
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|failOnInterruption
argument_list|(
name|io
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|arrowStreamReader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//allocator.close() will throw exception unless all buffers have been released
comment|//See org.apache.arrow.memory.BaseAllocator.close()
name|allocator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

