begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|ListUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapBaseRecordReader
operator|.
name|ReaderEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|FragmentRuntimeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|LlapOutputSocketInitMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SignableVertexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|VertexOrBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|ext
operator|.
name|LlapTaskUmbilicalExternalClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|ext
operator|.
name|LlapTaskUmbilicalExternalClient
operator|.
name|LlapTaskUmbilicalExternalResponder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|ServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|ServiceInstanceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapRegistryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tez
operator|.
name|Converters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplitWithLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezTaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|events
operator|.
name|TaskAttemptFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TezEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TezHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * Base LLAP input format to handle requesting of splits and communication with LLAP daemon.  */
end_comment

begin_class
specifier|public
class|class
name|LlapBaseInputFormat
parameter_list|<
name|V
extends|extends
name|WritableComparable
parameter_list|<
name|?
parameter_list|>
parameter_list|>
implements|implements
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapBaseInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|driverName
init|=
literal|"org.apache.hive.jdbc.HiveDriver"
decl_stmt|;
specifier|private
name|String
name|url
decl_stmt|;
comment|// "jdbc:hive2://localhost:10000/default"
specifier|private
name|String
name|user
decl_stmt|;
comment|// "hive",
specifier|private
name|String
name|pwd
decl_stmt|;
comment|// ""
specifier|private
name|String
name|query
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|URL_KEY
init|=
literal|"llap.if.hs2.connection"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_KEY
init|=
literal|"llap.if.query"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|USER_KEY
init|=
literal|"llap.if.user"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PWD_KEY
init|=
literal|"llap.if.pwd"
decl_stmt|;
specifier|public
specifier|final
name|String
name|SPLIT_QUERY
init|=
literal|"select get_splits(\"%s\",%d)"
decl_stmt|;
specifier|public
name|LlapBaseInputFormat
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|pwd
parameter_list|,
name|String
name|query
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|pwd
operator|=
name|pwd
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
specifier|public
name|LlapBaseInputFormat
parameter_list|()
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|V
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|LlapInputSplit
name|llapSplit
init|=
operator|(
name|LlapInputSplit
operator|)
name|split
decl_stmt|;
comment|// Set conf to use LLAP user rather than current user for LLAP Zk registry.
name|HiveConf
operator|.
name|setVar
argument_list|(
name|job
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ZK_REGISTRY_USER
argument_list|,
name|llapSplit
operator|.
name|getLlapUser
argument_list|()
argument_list|)
expr_stmt|;
name|SubmitWorkInfo
name|submitWorkInfo
init|=
name|SubmitWorkInfo
operator|.
name|fromBytes
argument_list|(
name|llapSplit
operator|.
name|getPlanBytes
argument_list|()
argument_list|)
decl_stmt|;
name|ServiceInstance
name|serviceInstance
init|=
name|getServiceInstance
argument_list|(
name|job
argument_list|,
name|llapSplit
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|serviceInstance
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|llapSubmitPort
init|=
name|serviceInstance
operator|.
name|getRpcPort
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found service instance for host "
operator|+
name|host
operator|+
literal|" with rpc port "
operator|+
name|llapSubmitPort
operator|+
literal|" and outputformat port "
operator|+
name|serviceInstance
operator|.
name|getOutputFormatPort
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|llapTokenBytes
init|=
name|llapSplit
operator|.
name|getTokenBytes
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|llapToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|llapTokenBytes
operator|!=
literal|null
condition|)
block|{
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|llapTokenBytes
argument_list|,
literal|0
argument_list|,
name|llapTokenBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|llapToken
operator|=
operator|new
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
argument_list|()
expr_stmt|;
name|llapToken
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|LlapRecordReaderTaskUmbilicalExternalResponder
name|umbilicalResponder
init|=
operator|new
name|LlapRecordReaderTaskUmbilicalExternalResponder
argument_list|()
decl_stmt|;
name|LlapTaskUmbilicalExternalClient
name|llapClient
init|=
operator|new
name|LlapTaskUmbilicalExternalClient
argument_list|(
name|job
argument_list|,
name|submitWorkInfo
operator|.
name|getTokenIdentifier
argument_list|()
argument_list|,
name|submitWorkInfo
operator|.
name|getToken
argument_list|()
argument_list|,
name|umbilicalResponder
argument_list|,
name|llapToken
argument_list|)
decl_stmt|;
name|llapClient
operator|.
name|init
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|llapClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|attemptNum
init|=
literal|0
decl_stmt|;
comment|// Use task attempt number from conf if provided
name|TaskAttemptID
name|taskAttemptId
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|job
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskAttemptId
operator|!=
literal|null
condition|)
block|{
name|attemptNum
operator|=
name|taskAttemptId
operator|.
name|getId
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting attempt number to "
operator|+
name|attemptNum
operator|+
literal|" from task attempt ID in conf: "
operator|+
name|job
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|TASK_ATTEMPT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|SubmitWorkRequestProto
name|request
init|=
name|constructSubmitWorkRequestProto
argument_list|(
name|submitWorkInfo
argument_list|,
name|llapSplit
operator|.
name|getSplitNum
argument_list|()
argument_list|,
name|attemptNum
argument_list|,
name|llapClient
operator|.
name|getAddress
argument_list|()
argument_list|,
name|submitWorkInfo
operator|.
name|getToken
argument_list|()
argument_list|,
name|llapSplit
operator|.
name|getFragmentBytes
argument_list|()
argument_list|,
name|llapSplit
operator|.
name|getFragmentBytesSignature
argument_list|()
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|llapClient
operator|.
name|submitWork
argument_list|(
name|request
argument_list|,
name|host
argument_list|,
name|llapSubmitPort
argument_list|)
expr_stmt|;
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|serviceInstance
operator|.
name|getOutputFormatPort
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Socket connected"
argument_list|)
expr_stmt|;
name|SignableVertexSpec
name|vertex
init|=
name|SignableVertexSpec
operator|.
name|parseFrom
argument_list|(
name|submitWorkInfo
operator|.
name|getVertexBinary
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|fragmentId
init|=
name|Converters
operator|.
name|createTaskAttemptId
argument_list|(
name|vertex
operator|.
name|getQueryIdentifier
argument_list|()
argument_list|,
name|vertex
operator|.
name|getVertexIndex
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentNumber
argument_list|()
argument_list|,
name|request
operator|.
name|getAttemptNumber
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OutputStream
name|socketStream
init|=
name|socket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|LlapOutputSocketInitMessage
operator|.
name|Builder
name|builder
init|=
name|LlapOutputSocketInitMessage
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFragmentId
argument_list|(
name|fragmentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|llapSplit
operator|.
name|getTokenBytes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setToken
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|llapSplit
operator|.
name|getTokenBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|socketStream
argument_list|)
expr_stmt|;
name|socketStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered id: "
operator|+
name|fragmentId
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|LlapBaseRecordReader
name|recordReader
init|=
operator|new
name|LlapBaseRecordReader
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|llapSplit
operator|.
name|getSchema
argument_list|()
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|job
argument_list|,
name|llapClient
argument_list|,
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|socket
argument_list|)
decl_stmt|;
name|umbilicalResponder
operator|.
name|setRecordReader
argument_list|(
name|recordReader
argument_list|)
expr_stmt|;
return|return
name|recordReader
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InputSplit
argument_list|>
name|ins
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
name|url
operator|=
name|job
operator|.
name|get
argument_list|(
name|URL_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
name|query
operator|=
name|job
operator|.
name|get
argument_list|(
name|QUERY_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
name|user
operator|=
name|job
operator|.
name|get
argument_list|(
name|USER_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|pwd
operator|==
literal|null
condition|)
name|pwd
operator|=
name|job
operator|.
name|get
argument_list|(
name|PWD_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
operator|||
name|query
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|driverName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|escapedQuery
init|=
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|query
argument_list|,
name|ESCAPE_CHAR
argument_list|,
name|escapedChars
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|String
operator|.
name|format
argument_list|(
name|SPLIT_QUERY
argument_list|,
name|escapedQuery
argument_list|,
name|numSplits
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|con
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
name|user
argument_list|,
name|pwd
argument_list|)
init|;
name|Statement
name|stmt
operator|=
name|con
operator|.
name|createStatement
argument_list|()
init|;
name|ResultSet
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
init|;
init|)
block|{
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
comment|// deserialize split
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|res
operator|.
name|getBinaryStream
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|InputSplitWithLocationInfo
name|is
init|=
operator|new
name|LlapInputSplit
argument_list|()
decl_stmt|;
name|is
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ins
operator|.
name|add
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ins
operator|.
name|toArray
argument_list|(
operator|new
name|InputSplit
index|[
name|ins
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|ServiceInstance
name|getServiceInstance
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|LlapInputSplit
name|llapSplit
parameter_list|)
throws|throws
name|IOException
block|{
name|LlapRegistryService
name|registryService
init|=
name|LlapRegistryService
operator|.
name|getClient
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|llapSplit
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|ServiceInstance
name|serviceInstance
init|=
name|getServiceInstanceForHost
argument_list|(
name|registryService
argument_list|,
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceInstance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No service instances found for "
operator|+
name|host
operator|+
literal|" in registry"
argument_list|)
throw|;
block|}
return|return
name|serviceInstance
return|;
block|}
specifier|private
name|ServiceInstance
name|getServiceInstanceForHost
parameter_list|(
name|LlapRegistryService
name|registryService
parameter_list|,
name|String
name|host
parameter_list|)
throws|throws
name|IOException
block|{
name|InetAddress
name|address
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|ServiceInstanceSet
name|instanceSet
init|=
name|registryService
operator|.
name|getInstances
argument_list|()
decl_stmt|;
name|ServiceInstance
name|serviceInstance
init|=
literal|null
decl_stmt|;
comment|// The name used in the service registry may not match the host name we're using.
comment|// Try hostname/canonical hostname/host address
name|String
name|name
init|=
name|address
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Searching service instance by hostname "
operator|+
name|name
argument_list|)
expr_stmt|;
name|serviceInstance
operator|=
name|selectServiceInstance
argument_list|(
name|instanceSet
operator|.
name|getByHost
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceInstance
operator|!=
literal|null
condition|)
block|{
return|return
name|serviceInstance
return|;
block|}
name|name
operator|=
name|address
operator|.
name|getCanonicalHostName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Searching service instance by canonical hostname "
operator|+
name|name
argument_list|)
expr_stmt|;
name|serviceInstance
operator|=
name|selectServiceInstance
argument_list|(
name|instanceSet
operator|.
name|getByHost
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceInstance
operator|!=
literal|null
condition|)
block|{
return|return
name|serviceInstance
return|;
block|}
name|name
operator|=
name|address
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Searching service instance by address "
operator|+
name|name
argument_list|)
expr_stmt|;
name|serviceInstance
operator|=
name|selectServiceInstance
argument_list|(
name|instanceSet
operator|.
name|getByHost
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceInstance
operator|!=
literal|null
condition|)
block|{
return|return
name|serviceInstance
return|;
block|}
return|return
name|serviceInstance
return|;
block|}
specifier|private
name|ServiceInstance
name|selectServiceInstance
parameter_list|(
name|Set
argument_list|<
name|ServiceInstance
argument_list|>
name|serviceInstances
parameter_list|)
block|{
if|if
condition|(
name|serviceInstances
operator|==
literal|null
operator|||
name|serviceInstances
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Get the first live service instance
for|for
control|(
name|ServiceInstance
name|serviceInstance
range|:
name|serviceInstances
control|)
block|{
if|if
condition|(
name|serviceInstance
operator|.
name|isAlive
argument_list|()
condition|)
block|{
return|return
name|serviceInstance
return|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"No live service instances were found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|SubmitWorkRequestProto
name|constructSubmitWorkRequestProto
parameter_list|(
name|SubmitWorkInfo
name|submitWorkInfo
parameter_list|,
name|int
name|taskNum
parameter_list|,
name|int
name|attemptNum
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|byte
index|[]
name|fragmentBytes
parameter_list|,
name|byte
index|[]
name|fragmentBytesSignature
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationId
name|appId
init|=
name|submitWorkInfo
operator|.
name|getFakeAppId
argument_list|()
decl_stmt|;
comment|// This works, assuming the executor is running within YARN.
name|String
name|user
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|USER
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting user in submitWorkRequest to: "
operator|+
name|user
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|attemptNum
argument_list|)
argument_list|,
name|taskNum
argument_list|)
decl_stmt|;
comment|// Credentials can change across DAGs. Ideally construct only once per DAG.
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|TokenCache
operator|.
name|setSessionToken
argument_list|(
name|token
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|ByteBuffer
name|credentialsBinary
init|=
name|serializeCredentials
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
name|FragmentRuntimeInfo
operator|.
name|Builder
name|runtimeInfo
init|=
name|FragmentRuntimeInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|runtimeInfo
operator|.
name|setCurrentAttemptStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|runtimeInfo
operator|.
name|setWithinDagPriority
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|runtimeInfo
operator|.
name|setDagStartTime
argument_list|(
name|submitWorkInfo
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
name|runtimeInfo
operator|.
name|setFirstAttemptStartTime
argument_list|(
name|submitWorkInfo
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
name|runtimeInfo
operator|.
name|setNumSelfAndUpstreamTasks
argument_list|(
name|submitWorkInfo
operator|.
name|getVertexParallelism
argument_list|()
argument_list|)
expr_stmt|;
name|runtimeInfo
operator|.
name|setNumSelfAndUpstreamCompletedTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|SubmitWorkRequestProto
operator|.
name|Builder
name|builder
init|=
name|SubmitWorkRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|VertexOrBinary
operator|.
name|Builder
name|vertexBuilder
init|=
name|VertexOrBinary
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|vertexBuilder
operator|.
name|setVertexBinary
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|submitWorkInfo
operator|.
name|getVertexBinary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|submitWorkInfo
operator|.
name|getVertexSignature
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Unsecure case?
name|builder
operator|.
name|setWorkSpecSignature
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|submitWorkInfo
operator|.
name|getVertexSignature
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setWorkSpec
argument_list|(
name|vertexBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFragmentNumber
argument_list|(
name|taskNum
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAttemptNumber
argument_list|(
name|attemptNum
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setContainerIdString
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAmHost
argument_list|(
name|LlapUtil
operator|.
name|getAmHostNameFromAddress
argument_list|(
name|address
argument_list|,
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAmPort
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCredentialsBinary
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|credentialsBinary
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFragmentRuntimeInfo
argument_list|(
name|runtimeInfo
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setInitialEventBytes
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|fragmentBytes
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fragmentBytesSignature
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setInitialEventSignature
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|fragmentBytesSignature
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|ByteBuffer
name|serializeCredentials
parameter_list|(
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|IOException
block|{
name|Credentials
name|containerCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|containerCredentials
operator|.
name|addAll
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|containerTokens_dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|containerCredentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|containerTokens_dob
argument_list|)
expr_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|containerTokens_dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|containerTokens_dob
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|char
name|ESCAPE_CHAR
init|=
literal|'\\'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|escapedChars
init|=
block|{
literal|'"'
block|,
name|ESCAPE_CHAR
block|}
decl_stmt|;
specifier|private
specifier|static
class|class
name|LlapRecordReaderTaskUmbilicalExternalResponder
implements|implements
name|LlapTaskUmbilicalExternalResponder
block|{
specifier|protected
name|LlapBaseRecordReader
argument_list|<
name|?
argument_list|>
name|recordReader
init|=
literal|null
decl_stmt|;
specifier|protected
name|LinkedBlockingQueue
argument_list|<
name|ReaderEvent
argument_list|>
name|queuedEvents
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|ReaderEvent
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|LlapRecordReaderTaskUmbilicalExternalResponder
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|submissionFailed
parameter_list|(
name|String
name|fragmentId
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
try|try
block|{
name|sendOrQueueEvent
argument_list|(
name|ReaderEvent
operator|.
name|errorEvent
argument_list|(
literal|"Received submission failed event for fragment ID "
operator|+
name|fragmentId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during heartbeat responder:"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|heartbeat
parameter_list|(
name|TezHeartbeatRequest
name|request
parameter_list|)
block|{
name|List
argument_list|<
name|TezEvent
argument_list|>
name|inEvents
init|=
name|request
operator|.
name|getEvents
argument_list|()
decl_stmt|;
for|for
control|(
name|TezEvent
name|tezEvent
range|:
name|ListUtils
operator|.
name|emptyIfNull
argument_list|(
name|inEvents
argument_list|)
control|)
block|{
name|EventType
name|eventType
init|=
name|tezEvent
operator|.
name|getEventType
argument_list|()
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|eventType
condition|)
block|{
case|case
name|TASK_ATTEMPT_COMPLETED_EVENT
case|:
name|sendOrQueueEvent
argument_list|(
name|ReaderEvent
operator|.
name|doneEvent
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TASK_ATTEMPT_FAILED_EVENT
case|:
name|TaskAttemptFailedEvent
name|taskFailedEvent
init|=
operator|(
name|TaskAttemptFailedEvent
operator|)
name|tezEvent
operator|.
name|getEvent
argument_list|()
decl_stmt|;
name|sendOrQueueEvent
argument_list|(
name|ReaderEvent
operator|.
name|errorEvent
argument_list|(
name|taskFailedEvent
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TASK_STATUS_UPDATE_EVENT
case|:
comment|// If we want to handle counters
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unhandled event type "
operator|+
name|eventType
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during heartbeat responder:"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|taskKilled
parameter_list|(
name|TezTaskAttemptID
name|taskAttemptId
parameter_list|)
block|{
try|try
block|{
name|sendOrQueueEvent
argument_list|(
name|ReaderEvent
operator|.
name|errorEvent
argument_list|(
literal|"Received task killed event for task ID "
operator|+
name|taskAttemptId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during heartbeat responder:"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|heartbeatTimeout
parameter_list|(
name|String
name|taskAttemptId
parameter_list|)
block|{
try|try
block|{
name|sendOrQueueEvent
argument_list|(
name|ReaderEvent
operator|.
name|errorEvent
argument_list|(
literal|"Timed out waiting for heartbeat for task ID "
operator|+
name|taskAttemptId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during heartbeat responder:"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|LlapBaseRecordReader
argument_list|<
name|?
argument_list|>
name|getRecordReader
parameter_list|()
block|{
return|return
name|recordReader
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setRecordReader
parameter_list|(
name|LlapBaseRecordReader
name|recordReader
parameter_list|)
block|{
name|this
operator|.
name|recordReader
operator|=
name|recordReader
expr_stmt|;
if|if
condition|(
name|recordReader
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// If any events were queued by the responder, give them to the record reader now.
while|while
condition|(
operator|!
name|queuedEvents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ReaderEvent
name|readerEvent
init|=
name|queuedEvents
operator|.
name|poll
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending queued event to record reader: "
operator|+
name|readerEvent
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|recordReader
operator|.
name|handleEvent
argument_list|(
name|readerEvent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Send the ReaderEvents to the record reader, if it is registered to this responder.      * If there is no registered record reader, add them to a list of pending reader events      * since we don't want to drop these events.      * @param readerEvent      */
specifier|protected
specifier|synchronized
name|void
name|sendOrQueueEvent
parameter_list|(
name|ReaderEvent
name|readerEvent
parameter_list|)
block|{
name|LlapBaseRecordReader
argument_list|<
name|?
argument_list|>
name|recordReader
init|=
name|getRecordReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|recordReader
operator|!=
literal|null
condition|)
block|{
name|recordReader
operator|.
name|handleEvent
argument_list|(
name|readerEvent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No registered record reader, queueing event "
operator|+
name|readerEvent
operator|.
name|getEventType
argument_list|()
operator|+
literal|" with message "
operator|+
name|readerEvent
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|queuedEvents
operator|.
name|put
argument_list|(
name|readerEvent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected exception while queueing reader event"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Clear the list of queued reader events if we are not interested in sending any pending events to any registering record reader.      */
specifier|public
name|void
name|clearQueuedEvents
parameter_list|()
block|{
name|queuedEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

