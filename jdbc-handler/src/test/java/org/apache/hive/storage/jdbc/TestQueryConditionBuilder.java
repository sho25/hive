begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|conf
operator|.
name|JdbcStorageConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalToIgnoringWhiteSpace
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
specifier|public
class|class
name|TestQueryConditionBuilder
block|{
specifier|private
specifier|static
name|String
name|condition1
decl_stmt|;
specifier|private
specifier|static
name|String
name|condition2
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|condition1
operator|=
name|readFileContents
argument_list|(
literal|"condition1.xml"
argument_list|)
expr_stmt|;
name|condition2
operator|=
name|readFileContents
argument_list|(
literal|"condition2.xml"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|readFileContents
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Scanner
name|s
init|=
operator|new
name|Scanner
argument_list|(
name|TestQueryConditionBuilder
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
argument_list|)
init|)
block|{
return|return
name|s
operator|.
name|useDelimiter
argument_list|(
literal|"\\Z"
argument_list|)
operator|.
name|next
argument_list|()
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleCondition_noTranslation
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|condition1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"visitor_id,sentiment,tracking_id"
argument_list|)
expr_stmt|;
name|String
name|condition
init|=
name|QueryConditionBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCondition
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|equalToIgnoringWhiteSpace
argument_list|(
literal|"(visitor_id = 'x')"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleCondition_withTranslation
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|condition1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"visitor_id,sentiment,tracking_id"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|COLUMN_MAPPING
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"visitor_id=vid, sentiment=sentiment, tracking_id=tracking_id"
argument_list|)
expr_stmt|;
name|String
name|condition
init|=
name|QueryConditionBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCondition
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|equalToIgnoringWhiteSpace
argument_list|(
literal|"(vid = 'x')"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleCondition_withDateType
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|condition1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"visitor_id,sentiment,tracking_id"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|COLUMN_MAPPING
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"visitor_id=vid:date, sentiment=sentiment, tracking_id=tracking_id"
argument_list|)
expr_stmt|;
name|String
name|condition
init|=
name|QueryConditionBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCondition
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|equalToIgnoringWhiteSpace
argument_list|(
literal|"({d vid} = 'x')"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleCondition_withVariedCaseMappings
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|condition1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"visitor_ID,sentiment,tracking_id"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|COLUMN_MAPPING
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"visitor_id=VID:date, sentiment=sentiment, tracking_id=tracking_id"
argument_list|)
expr_stmt|;
name|String
name|condition
init|=
name|QueryConditionBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCondition
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|equalToIgnoringWhiteSpace
argument_list|(
literal|"({d vid} = 'x')"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleConditions_noTranslation
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|condition2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"visitor_id,sentiment,tracking_id"
argument_list|)
expr_stmt|;
name|String
name|condition
init|=
name|QueryConditionBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCondition
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|equalToIgnoringWhiteSpace
argument_list|(
literal|"((visitor_id = 'x') and (sentiment = 'y'))"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleConditions_withTranslation
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|condition2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"visitor_id,sentiment,tracking_id"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|COLUMN_MAPPING
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"visitor_id=v,sentiment=s,tracking_id=t"
argument_list|)
expr_stmt|;
name|String
name|condition
init|=
name|QueryConditionBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCondition
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|equalToIgnoringWhiteSpace
argument_list|(
literal|"((v = 'x') and (s = 'y'))"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithNullConf
parameter_list|()
block|{
name|String
name|condition
init|=
name|QueryConditionBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCondition
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|condition
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithUndefinedFilterExpr
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"visitor_id,sentiment,tracking_id"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|COLUMN_MAPPING
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"visitor_id=v,sentiment=s,tracking_id=t"
argument_list|)
expr_stmt|;
name|String
name|condition
init|=
name|QueryConditionBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCondition
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|condition
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|condition
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

