begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|dao
operator|.
name|DatabaseAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|dao
operator|.
name|DatabaseAccessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|exception
operator|.
name|HiveJdbcDatabaseAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|BDDMockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|api
operator|.
name|mockito
operator|.
name|PowerMockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|core
operator|.
name|classloader
operator|.
name|annotations
operator|.
name|PrepareForTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|modules
operator|.
name|junit4
operator|.
name|PowerMockRunner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|PowerMockRunner
operator|.
name|class
argument_list|)
annotation|@
name|PrepareForTest
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestJdbcInputFormat
block|{
annotation|@
name|Mock
specifier|private
name|DatabaseAccessor
name|mockDatabaseAccessor
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testLimitSplit_noSpillOver
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
throws|,
name|IOException
block|{
name|PowerMockito
operator|.
name|mockStatic
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|BDDMockito
operator|.
name|given
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|mockDatabaseAccessor
argument_list|)
expr_stmt|;
name|JdbcInputFormat
name|f
init|=
operator|new
name|JdbcInputFormat
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockDatabaseAccessor
operator|.
name|getTotalNumberOfRecords
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/temp"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.numPartitions"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|f
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|splits
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|splits
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|splits
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
name|is
argument_list|(
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLimitSplit_withSpillOver
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
throws|,
name|IOException
block|{
name|PowerMockito
operator|.
name|mockStatic
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|BDDMockito
operator|.
name|given
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|mockDatabaseAccessor
argument_list|)
expr_stmt|;
name|JdbcInputFormat
name|f
init|=
operator|new
name|JdbcInputFormat
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockDatabaseAccessor
operator|.
name|getTotalNumberOfRecords
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/temp"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.numPartitions"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|f
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|splits
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|splits
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|splits
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|splits
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntervalSplit_Long
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
throws|,
name|IOException
block|{
name|PowerMockito
operator|.
name|mockStatic
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|BDDMockito
operator|.
name|given
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|mockDatabaseAccessor
argument_list|)
expr_stmt|;
name|JdbcInputFormat
name|f
init|=
operator|new
name|JdbcInputFormat
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockDatabaseAccessor
operator|.
name|getColumnNames
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/temp"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.partitionColumn"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.numPartitions"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.lowerBound"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.upperBound"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|f
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|splits
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|splits
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|2
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|2
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntervalSplit_Double
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
throws|,
name|IOException
block|{
name|PowerMockito
operator|.
name|mockStatic
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|BDDMockito
operator|.
name|given
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|mockDatabaseAccessor
argument_list|)
expr_stmt|;
name|JdbcInputFormat
name|f
init|=
operator|new
name|JdbcInputFormat
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockDatabaseAccessor
operator|.
name|getColumnNames
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/temp"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.partitionColumn"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.numPartitions"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.lowerBound"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.upperBound"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|f
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|splits
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|splits
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|)
operator|>
literal|3.3
operator|&&
name|Double
operator|.
name|parseDouble
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|)
operator|<
literal|3.4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|)
operator|>
literal|3.3
operator|&&
name|Double
operator|.
name|parseDouble
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|)
operator|<
literal|3.4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|)
operator|>
literal|6.6
operator|&&
name|Double
operator|.
name|parseDouble
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|)
operator|<
literal|6.7
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|2
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|)
operator|>
literal|6.6
operator|&&
name|Double
operator|.
name|parseDouble
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|2
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|)
operator|<
literal|6.7
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|2
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntervalSplit_Decimal
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
throws|,
name|IOException
block|{
name|PowerMockito
operator|.
name|mockStatic
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|BDDMockito
operator|.
name|given
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|mockDatabaseAccessor
argument_list|)
expr_stmt|;
name|JdbcInputFormat
name|f
init|=
operator|new
name|JdbcInputFormat
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockDatabaseAccessor
operator|.
name|getColumnNames
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/temp"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"decimal(10,5)"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.partitionColumn"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.numPartitions"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.lowerBound"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.upperBound"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|f
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|splits
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|splits
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|,
literal|"253.75000"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|,
literal|"253.75000"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|,
literal|"502.50000"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|2
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|,
literal|"502.50000"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|2
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|,
literal|"751.25000"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|3
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|,
literal|"751.25000"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|3
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntervalSplit_Timestamp
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
throws|,
name|IOException
block|{
name|PowerMockito
operator|.
name|mockStatic
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|BDDMockito
operator|.
name|given
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|mockDatabaseAccessor
argument_list|)
expr_stmt|;
name|JdbcInputFormat
name|f
init|=
operator|new
name|JdbcInputFormat
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockDatabaseAccessor
operator|.
name|getColumnNames
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockDatabaseAccessor
operator|.
name|getBounds
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ImmutablePair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|"2010-01-01 00:00:00.000000000"
argument_list|,
literal|"2018-01-01 "
operator|+
literal|"12:00:00.000000000"
argument_list|)
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/temp"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"timestamp"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.partitionColumn"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.numPartitions"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|f
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|splits
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|splits
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|,
literal|"2014-01-01 06:00:00.0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|,
literal|"2014-01-01 06:00:00.0"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntervalSplit_Date
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
throws|,
name|IOException
block|{
name|PowerMockito
operator|.
name|mockStatic
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|BDDMockito
operator|.
name|given
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|mockDatabaseAccessor
argument_list|)
expr_stmt|;
name|JdbcInputFormat
name|f
init|=
operator|new
name|JdbcInputFormat
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockDatabaseAccessor
operator|.
name|getColumnNames
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockDatabaseAccessor
operator|.
name|getBounds
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ImmutablePair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|"2010-01-01"
argument_list|,
literal|"2018-01-01"
argument_list|)
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/temp"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.partitionColumn"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.numPartitions"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|f
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|splits
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|splits
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|,
literal|"2012-09-01"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|,
literal|"2012-09-01"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|,
literal|"2015-05-03"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|2
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|,
literal|"2015-05-03"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|2
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntervalSplit_AutoShrink
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
throws|,
name|IOException
block|{
name|PowerMockito
operator|.
name|mockStatic
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|BDDMockito
operator|.
name|given
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|mockDatabaseAccessor
argument_list|)
expr_stmt|;
name|JdbcInputFormat
name|f
init|=
operator|new
name|JdbcInputFormat
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockDatabaseAccessor
operator|.
name|getColumnNames
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/temp"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.partitionColumn"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.numPartitions"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.lowerBound"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.upperBound"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|f
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|splits
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|splits
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getLowerBound
argument_list|()
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|1
index|]
operator|)
operator|.
name|getUpperBound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntervalSplit_NoSplit
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
throws|,
name|IOException
block|{
name|PowerMockito
operator|.
name|mockStatic
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|BDDMockito
operator|.
name|given
argument_list|(
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|willReturn
argument_list|(
name|mockDatabaseAccessor
argument_list|)
expr_stmt|;
name|JdbcInputFormat
name|f
init|=
operator|new
name|JdbcInputFormat
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockDatabaseAccessor
operator|.
name|getColumnNames
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
literal|"/temp"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.partitionColumn"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.numPartitions"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.lowerBound"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.sql.upperBound"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|f
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|splits
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|splits
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JdbcInputSplit
operator|)
name|splits
index|[
literal|0
index|]
operator|)
operator|.
name|getPartitionColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

