begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|conf
operator|.
name|JdbcStorageConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|exception
operator|.
name|HiveJdbcDatabaseAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalToIgnoringCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericJdbcDatabaseAccessor
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetColumnNames_starQuery
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
block|{
name|Configuration
name|conf
init|=
name|buildConfiguration
argument_list|()
decl_stmt|;
name|DatabaseAccessor
name|accessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|accessor
operator|.
name|getColumnNames
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|columnNames
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnNames
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|equalToIgnoringCase
argument_list|(
literal|"strategy_id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetColumnNames_fieldListQuery
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
block|{
name|Configuration
name|conf
init|=
name|buildConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"select name,referrer from test_strategy"
argument_list|)
expr_stmt|;
name|DatabaseAccessor
name|accessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|accessor
operator|.
name|getColumnNames
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|columnNames
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnNames
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|equalToIgnoringCase
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveJdbcDatabaseAccessException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetColumnNames_invalidQuery
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
block|{
name|Configuration
name|conf
init|=
name|buildConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"select * from invalid_strategy"
argument_list|)
expr_stmt|;
name|DatabaseAccessor
name|accessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|accessor
operator|.
name|getColumnNames
argument_list|(
name|conf
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTotalNumberOfRecords
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
block|{
name|Configuration
name|conf
init|=
name|buildConfiguration
argument_list|()
decl_stmt|;
name|DatabaseAccessor
name|accessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|numRecords
init|=
name|accessor
operator|.
name|getTotalNumberOfRecords
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|numRecords
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTotalNumberOfRecords_whereClause
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
block|{
name|Configuration
name|conf
init|=
name|buildConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"select * from test_strategy where strategy_id = '5'"
argument_list|)
expr_stmt|;
name|DatabaseAccessor
name|accessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|numRecords
init|=
name|accessor
operator|.
name|getTotalNumberOfRecords
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|numRecords
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTotalNumberOfRecords_noRecords
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
block|{
name|Configuration
name|conf
init|=
name|buildConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"select * from test_strategy where strategy_id = '25'"
argument_list|)
expr_stmt|;
name|DatabaseAccessor
name|accessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|numRecords
init|=
name|accessor
operator|.
name|getTotalNumberOfRecords
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|numRecords
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveJdbcDatabaseAccessException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetTotalNumberOfRecords_invalidQuery
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
block|{
name|Configuration
name|conf
init|=
name|buildConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"select * from strategyx where strategy_id = '5'"
argument_list|)
expr_stmt|;
name|DatabaseAccessor
name|accessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|int
name|numRecords
init|=
name|accessor
operator|.
name|getTotalNumberOfRecords
argument_list|(
name|conf
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRecordIterator
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
block|{
name|Configuration
name|conf
init|=
name|buildConfiguration
argument_list|()
decl_stmt|;
name|DatabaseAccessor
name|accessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JdbcRecordIterator
name|iterator
init|=
name|accessor
operator|.
name|getRecordIterator
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iterator
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|record
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|count
operator|++
expr_stmt|;
name|assertThat
argument_list|(
name|record
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|record
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|record
operator|.
name|get
argument_list|(
literal|"STRATEGY_ID"
argument_list|)
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|count
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|count
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRecordIterator_offsets
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
block|{
name|Configuration
name|conf
init|=
name|buildConfiguration
argument_list|()
decl_stmt|;
name|DatabaseAccessor
name|accessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JdbcRecordIterator
name|iterator
init|=
name|accessor
operator|.
name|getRecordIterator
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iterator
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|record
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|count
operator|++
expr_stmt|;
name|assertThat
argument_list|(
name|record
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|record
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|record
operator|.
name|get
argument_list|(
literal|"STRATEGY_ID"
argument_list|)
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|count
operator|+
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|count
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRecordIterator_emptyResultSet
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
block|{
name|Configuration
name|conf
init|=
name|buildConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"select * from test_strategy where strategy_id = '25'"
argument_list|)
expr_stmt|;
name|DatabaseAccessor
name|accessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JdbcRecordIterator
name|iterator
init|=
name|accessor
operator|.
name|getRecordIterator
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iterator
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRecordIterator_largeOffset
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
block|{
name|Configuration
name|conf
init|=
name|buildConfiguration
argument_list|()
decl_stmt|;
name|DatabaseAccessor
name|accessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JdbcRecordIterator
name|iterator
init|=
name|accessor
operator|.
name|getRecordIterator
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|,
literal|25
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iterator
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveJdbcDatabaseAccessException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetRecordIterator_invalidQuery
parameter_list|()
throws|throws
name|HiveJdbcDatabaseAccessException
block|{
name|Configuration
name|conf
init|=
name|buildConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"select * from strategyx"
argument_list|)
expr_stmt|;
name|DatabaseAccessor
name|accessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|JdbcRecordIterator
name|iterator
init|=
name|accessor
operator|.
name|getRecordIterator
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
block|}
specifier|private
name|Configuration
name|buildConfiguration
parameter_list|()
block|{
name|String
name|scriptPath
init|=
name|TestGenericJdbcDatabaseAccessor
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test_script.sql"
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|DATABASE_TYPE
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"H2"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|JDBC_DRIVER_CLASS
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"org.h2.Driver"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|JDBC_URL
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"jdbc:h2:mem:test;MODE=MySQL;INIT=runscript from '"
operator|+
name|scriptPath
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"select * from test_strategy"
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

