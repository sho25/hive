begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|config
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|conf
operator|.
name|DatabaseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|conf
operator|.
name|JdbcStorageConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|conf
operator|.
name|JdbcStorageConfigManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
specifier|public
class|class
name|TestJdbcStorageConfigManager
block|{
annotation|@
name|Test
specifier|public
name|void
name|testWithAllRequiredSettingsDefined
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|JdbcStorageConfig
operator|.
name|DATABASE_TYPE
operator|.
name|getPropertyName
argument_list|()
argument_list|,
name|DatabaseType
operator|.
name|MYSQL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|JdbcStorageConfig
operator|.
name|JDBC_URL
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"jdbc://localhost:3306/hive"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"SELECT col1,col2,col3 FROM sometable"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|JdbcStorageConfig
operator|.
name|JDBC_DRIVER_CLASS
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"com.mysql.jdbc.Driver"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|JdbcStorageConfigManager
operator|.
name|copyConfigurationToJob
argument_list|(
name|props
argument_list|,
name|jobMap
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jobMap
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jobMap
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jobMap
operator|.
name|get
argument_list|(
name|JdbcStorageConfig
operator|.
name|DATABASE_TYPE
operator|.
name|getPropertyName
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"MYSQL"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jobMap
operator|.
name|get
argument_list|(
name|JdbcStorageConfig
operator|.
name|JDBC_URL
operator|.
name|getPropertyName
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"jdbc://localhost:3306/hive"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jobMap
operator|.
name|get
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"SELECT col1,col2,col3 FROM sometable"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// since metastore connections don't require the url, this is allowable.
annotation|@
name|Ignore
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWithJdbcUrlMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|JdbcStorageConfig
operator|.
name|DATABASE_TYPE
operator|.
name|getPropertyName
argument_list|()
argument_list|,
name|DatabaseType
operator|.
name|MYSQL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"SELECT col1,col2,col3 FROM sometable"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|JdbcStorageConfigManager
operator|.
name|copyConfigurationToJob
argument_list|(
name|props
argument_list|,
name|jobMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWithDatabaseTypeMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|JdbcStorageConfig
operator|.
name|JDBC_URL
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"jdbc://localhost:3306/hive"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"SELECT col1,col2,col3 FROM sometable"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|JdbcStorageConfigManager
operator|.
name|copyConfigurationToJob
argument_list|(
name|props
argument_list|,
name|jobMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWithUnknownDatabaseType
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|JdbcStorageConfig
operator|.
name|DATABASE_TYPE
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"Postgres"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|JdbcStorageConfig
operator|.
name|JDBC_URL
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"jdbc://localhost:3306/hive"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|,
literal|"SELECT col1,col2,col3 FROM sometable"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|JdbcStorageConfigManager
operator|.
name|copyConfigurationToJob
argument_list|(
name|props
argument_list|,
name|jobMap
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

