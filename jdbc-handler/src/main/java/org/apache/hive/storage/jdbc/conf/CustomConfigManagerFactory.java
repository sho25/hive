begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Factory for creating custom config managers based on the database type  */
end_comment

begin_class
specifier|public
class|class
name|CustomConfigManagerFactory
block|{
specifier|private
specifier|static
name|CustomConfigManager
name|nopConfigManager
init|=
operator|new
name|NopCustomConfigManager
argument_list|()
decl_stmt|;
specifier|private
name|CustomConfigManagerFactory
parameter_list|()
block|{   }
specifier|public
specifier|static
name|CustomConfigManager
name|getCustomConfigManagerFor
parameter_list|(
name|DatabaseType
name|databaseType
parameter_list|)
block|{
switch|switch
condition|(
name|databaseType
condition|)
block|{
case|case
name|MYSQL
case|:
return|return
name|nopConfigManager
return|;
default|default:
return|return
name|nopConfigManager
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NopCustomConfigManager
implements|implements
name|CustomConfigManager
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkRequiredProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
end_class

end_unit

