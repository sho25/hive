begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|conf
operator|.
name|JdbcStorageConfig
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|XMLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Translates the hive query condition into a condition that can be run on the underlying database  */
end_comment

begin_class
specifier|public
class|class
name|QueryConditionBuilder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryConditionBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_STRING
init|=
literal|""
decl_stmt|;
specifier|private
specifier|static
name|QueryConditionBuilder
name|instance
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|QueryConditionBuilder
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|QueryConditionBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
specifier|private
name|QueryConditionBuilder
parameter_list|()
block|{    }
specifier|public
name|String
name|buildCondition
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY_STRING
return|;
block|}
name|String
name|filterXml
init|=
name|conf
operator|.
name|get
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|)
decl_stmt|;
name|String
name|hiveColumns
init|=
name|conf
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
name|String
name|columnMapping
init|=
name|conf
operator|.
name|get
argument_list|(
name|JdbcStorageConfig
operator|.
name|COLUMN_MAPPING
operator|.
name|getPropertyName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|filterXml
operator|==
literal|null
operator|)
operator|||
operator|(
operator|(
name|columnMapping
operator|==
literal|null
operator|)
operator|&&
operator|(
name|hiveColumns
operator|==
literal|null
operator|)
operator|)
condition|)
block|{
return|return
name|EMPTY_STRING
return|;
block|}
if|if
condition|(
name|hiveColumns
operator|==
literal|null
condition|)
block|{
name|hiveColumns
operator|=
literal|""
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnMap
init|=
name|buildColumnMapping
argument_list|(
name|columnMapping
argument_list|,
name|hiveColumns
argument_list|)
decl_stmt|;
name|String
name|condition
init|=
name|createConditionString
argument_list|(
name|filterXml
argument_list|,
name|columnMap
argument_list|)
decl_stmt|;
return|return
name|condition
return|;
block|}
comment|/*    * Build a Hive-to-X column mapping,    *    */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildColumnMapping
parameter_list|(
name|String
name|columnMapping
parameter_list|,
name|String
name|hiveColumns
parameter_list|)
block|{
if|if
condition|(
operator|(
name|columnMapping
operator|==
literal|null
operator|)
operator|||
operator|(
name|columnMapping
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
name|createIdentityMap
argument_list|(
name|hiveColumns
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|mappingPairs
init|=
name|columnMapping
operator|.
name|toLowerCase
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|mapPair
range|:
name|mappingPairs
control|)
block|{
name|String
index|[]
name|columns
init|=
name|mapPair
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
name|columns
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|columns
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|columnMap
return|;
block|}
comment|/*    * When no mapping is defined, it is assumed that the hive column names are equivalent to the column names in the    * underlying table    */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createIdentityMap
parameter_list|(
name|String
name|hiveColumns
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|columns
init|=
name|hiveColumns
operator|.
name|toLowerCase
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|columns
control|)
block|{
name|columnMap
operator|.
name|put
argument_list|(
name|col
operator|.
name|trim
argument_list|()
argument_list|,
name|col
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|columnMap
return|;
block|}
comment|/*    * Walk to Hive AST and translate the hive column names to their equivalent mappings. This is basically a cheat.    *    */
specifier|private
name|String
name|createConditionString
parameter_list|(
name|String
name|filterXml
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnMap
parameter_list|)
block|{
if|if
condition|(
operator|(
name|filterXml
operator|==
literal|null
operator|)
operator|||
operator|(
name|filterXml
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
name|EMPTY_STRING
return|;
block|}
try|try
init|(
name|XMLDecoder
name|decoder
init|=
operator|new
name|XMLDecoder
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|filterXml
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|Object
name|object
init|=
name|decoder
operator|.
name|readObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|ExprNodeDesc
operator|)
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Deserialized filter expression is not of the expected type"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Deserialized filter expression is not of the expected type"
argument_list|)
throw|;
block|}
name|ExprNodeDesc
name|conditionNode
init|=
operator|(
name|ExprNodeDesc
operator|)
name|object
decl_stmt|;
name|walkTreeAndTranslateColumnNames
argument_list|(
name|conditionNode
argument_list|,
name|columnMap
argument_list|)
expr_stmt|;
return|return
name|conditionNode
operator|.
name|getExprString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error during condition build"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|EMPTY_STRING
return|;
block|}
block|}
comment|/*    * Translate column names by walking the AST    */
specifier|private
name|void
name|walkTreeAndTranslateColumnNames
parameter_list|(
name|ExprNodeDesc
name|node
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnMap
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|node
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|column
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|node
decl_stmt|;
name|String
name|hiveColumnName
init|=
name|column
operator|.
name|getColumn
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnMap
operator|.
name|containsKey
argument_list|(
name|hiveColumnName
argument_list|)
condition|)
block|{
name|String
name|dbColumnName
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|hiveColumnName
argument_list|)
decl_stmt|;
name|String
name|finalName
init|=
name|formatColumnName
argument_list|(
name|dbColumnName
argument_list|)
decl_stmt|;
name|column
operator|.
name|setColumn
argument_list|(
name|finalName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|node
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|childNode
range|:
name|node
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|walkTreeAndTranslateColumnNames
argument_list|(
name|childNode
argument_list|,
name|columnMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * This is an ugly hack for handling date column types because Hive doesn't have a built-in type for dates    */
specifier|private
name|String
name|formatColumnName
parameter_list|(
name|String
name|dbColumnName
parameter_list|)
block|{
if|if
condition|(
name|dbColumnName
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|String
index|[]
name|typeSplit
init|=
name|dbColumnName
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeSplit
index|[
literal|1
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"date"
argument_list|)
condition|)
block|{
return|return
literal|"{d "
operator|+
name|typeSplit
index|[
literal|0
index|]
operator|+
literal|"}"
return|;
block|}
return|return
name|typeSplit
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
name|dbColumnName
return|;
block|}
block|}
block|}
end_class

end_unit

