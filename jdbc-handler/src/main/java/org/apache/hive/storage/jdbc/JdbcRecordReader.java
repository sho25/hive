begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|dao
operator|.
name|DatabaseAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|dao
operator|.
name|DatabaseAccessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|dao
operator|.
name|JdbcRecordIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_class
specifier|public
class|class
name|JdbcRecordReader
implements|implements
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|MapWritable
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JdbcRecordReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DatabaseAccessor
name|dbAccessor
init|=
literal|null
decl_stmt|;
specifier|private
name|JdbcRecordIterator
name|iterator
init|=
literal|null
decl_stmt|;
specifier|private
name|JdbcInputSplit
name|split
init|=
literal|null
decl_stmt|;
specifier|private
name|JobConf
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|pos
init|=
literal|0
decl_stmt|;
specifier|public
name|JdbcRecordReader
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|JdbcInputSplit
name|split
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Initializing JdbcRecordReader"
argument_list|)
expr_stmt|;
name|this
operator|.
name|split
operator|=
name|split
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|MapWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"JdbcRecordReader.next called"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbAccessor
operator|==
literal|null
condition|)
block|{
name|dbAccessor
operator|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|dbAccessor
operator|.
name|getRecordIterator
argument_list|(
name|conf
argument_list|,
name|split
operator|.
name|getLimit
argument_list|()
argument_list|,
name|split
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"JdbcRecordReader has more records to read."
argument_list|)
expr_stmt|;
name|key
operator|.
name|set
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|record
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|record
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|record
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|record
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|value
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
name|NullWritable
operator|.
name|get
argument_list|()
else|:
operator|new
name|Text
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"JdbcRecordReader got null record."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"JdbcRecordReader has no more records to read."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"An error occurred while reading the next record from DB."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|LongWritable
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|LongWritable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MapWritable
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|MapWritable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|iterator
operator|!=
literal|null
condition|)
block|{
name|iterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|split
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|split
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|?
name|pos
operator|/
operator|(
name|float
operator|)
name|split
operator|.
name|getLength
argument_list|()
else|:
literal|1.0f
return|;
block|}
block|}
specifier|public
name|void
name|setDbAccessor
parameter_list|(
name|DatabaseAccessor
name|dbAccessor
parameter_list|)
block|{
name|this
operator|.
name|dbAccessor
operator|=
name|dbAccessor
expr_stmt|;
block|}
specifier|public
name|void
name|setIterator
parameter_list|(
name|JdbcRecordIterator
name|iterator
parameter_list|)
block|{
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
block|}
block|}
end_class

end_unit

