begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|QueryConditionBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Main configuration handler class  */
end_comment

begin_class
specifier|public
class|class
name|JdbcStorageConfigManager
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_PREFIX
init|=
literal|"hive.sql"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|JdbcStorageConfig
argument_list|>
name|DEFAULT_REQUIRED_PROPERTIES
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|JdbcStorageConfig
operator|.
name|DATABASE_TYPE
argument_list|,
name|JdbcStorageConfig
operator|.
name|JDBC_URL
argument_list|,
name|JdbcStorageConfig
operator|.
name|JDBC_DRIVER_CLASS
argument_list|,
name|JdbcStorageConfig
operator|.
name|QUERY
argument_list|)
decl_stmt|;
specifier|private
name|JdbcStorageConfigManager
parameter_list|()
block|{   }
specifier|public
specifier|static
name|void
name|copyConfigurationToJob
parameter_list|(
name|Properties
name|props
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProps
parameter_list|)
block|{
name|checkRequiredPropertiesAreDefined
argument_list|(
name|props
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|jobProps
operator|.
name|put
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Configuration
name|convertPropertiesToConfiguration
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
name|checkRequiredPropertiesAreDefined
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
specifier|private
specifier|static
name|void
name|checkRequiredPropertiesAreDefined
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
for|for
control|(
name|JdbcStorageConfig
name|configKey
range|:
name|DEFAULT_REQUIRED_PROPERTIES
control|)
block|{
name|String
name|propertyKey
init|=
name|configKey
operator|.
name|getPropertyName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|props
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|props
operator|.
name|containsKey
argument_list|(
name|propertyKey
argument_list|)
operator|)
operator|||
operator|(
name|isEmptyString
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|propertyKey
argument_list|)
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|propertyKey
operator|+
literal|" is required."
argument_list|)
throw|;
block|}
block|}
name|DatabaseType
name|dbType
init|=
name|DatabaseType
operator|.
name|valueOf
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|JdbcStorageConfig
operator|.
name|DATABASE_TYPE
operator|.
name|getPropertyName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|CustomConfigManager
name|configManager
init|=
name|CustomConfigManagerFactory
operator|.
name|getCustomConfigManagerFor
argument_list|(
name|dbType
argument_list|)
decl_stmt|;
name|configManager
operator|.
name|checkRequiredProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getConfigValue
parameter_list|(
name|JdbcStorageConfig
name|key
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
return|return
name|config
operator|.
name|get
argument_list|(
name|key
operator|.
name|getPropertyName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getQueryToExecute
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|String
name|query
init|=
name|config
operator|.
name|get
argument_list|(
name|JdbcStorageConfig
operator|.
name|QUERY
operator|.
name|getPropertyName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|hiveFilterCondition
init|=
name|QueryConditionBuilder
operator|.
name|getInstance
argument_list|()
operator|.
name|buildCondition
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|hiveFilterCondition
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|hiveFilterCondition
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|query
operator|=
name|query
operator|+
literal|" WHERE "
operator|+
name|hiveFilterCondition
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isEmptyString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|value
operator|==
literal|null
operator|)
operator|||
operator|(
name|value
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

