begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|conf
operator|.
name|JdbcStorageConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|conf
operator|.
name|JdbcStorageConfigManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|dao
operator|.
name|DatabaseAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|dao
operator|.
name|DatabaseAccessorFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|JdbcSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JdbcSerDe
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|StructObjectInspector
name|objectInspector
decl_stmt|;
specifier|private
name|int
name|numColumns
decl_stmt|;
specifier|private
name|String
index|[]
name|hiveColumnTypeArray
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|row
decl_stmt|;
comment|/*    * This method gets called multiple times by Hive. On some invocations, the properties will be empty.    * We need to detect when the properties are not empty to initialise the class variables.    *    * @see org.apache.hadoop.hive.serde2.Deserializer#initialize(org.apache.hadoop.conf.Configuration, java.util.Properties)    */
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Initializing the SerDe"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|containsKey
argument_list|(
name|JdbcStorageConfig
operator|.
name|DATABASE_TYPE
operator|.
name|getPropertyName
argument_list|()
argument_list|)
condition|)
block|{
name|Configuration
name|tableConfig
init|=
name|JdbcStorageConfigManager
operator|.
name|convertPropertiesToConfiguration
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|DatabaseAccessor
name|dbAccessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|tableConfig
argument_list|)
decl_stmt|;
name|columnNames
operator|=
name|dbAccessor
operator|.
name|getColumnNames
argument_list|(
name|tableConfig
argument_list|)
expr_stmt|;
name|numColumns
operator|=
name|columnNames
operator|.
name|size
argument_list|()
expr_stmt|;
name|String
index|[]
name|hiveColumnNameArray
init|=
name|parseProperty
argument_list|(
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
argument_list|,
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|numColumns
operator|!=
name|hiveColumnNameArray
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Expected "
operator|+
name|numColumns
operator|+
literal|" columns. Table definition has "
operator|+
name|hiveColumnNameArray
operator|.
name|length
operator|+
literal|" columns"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|hiveColumnNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|hiveColumnNameArray
argument_list|)
decl_stmt|;
name|hiveColumnTypeArray
operator|=
name|parseProperty
argument_list|(
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hiveColumnTypeArray
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Received an empty Hive column type definition"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|numColumns
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColumns
condition|;
name|i
operator|++
control|)
block|{
name|PrimitiveTypeInfo
name|ti
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|hiveColumnTypeArray
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|ti
argument_list|)
decl_stmt|;
name|fieldInspectors
operator|.
name|add
argument_list|(
name|oi
argument_list|)
expr_stmt|;
block|}
name|objectInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|hiveColumnNames
argument_list|,
name|fieldInspectors
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|numColumns
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Caught exception while initializing the SqlSerDe"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
index|[]
name|parseProperty
parameter_list|(
name|String
name|propertyValue
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
if|if
condition|(
operator|(
name|propertyValue
operator|==
literal|null
operator|)
operator|||
operator|(
name|propertyValue
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{}
return|;
block|}
return|return
name|propertyValue
operator|.
name|split
argument_list|(
name|delimiter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Deserializing from SerDe"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|blob
operator|instanceof
name|MapWritable
operator|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Expected MapWritable. Got "
operator|+
name|blob
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|row
operator|==
literal|null
operator|)
operator|||
operator|(
name|columnNames
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"JDBC SerDe hasn't been initialized properly"
argument_list|)
throw|;
block|}
name|row
operator|.
name|clear
argument_list|()
expr_stmt|;
name|MapWritable
name|input
init|=
operator|(
name|MapWritable
operator|)
name|blob
decl_stmt|;
name|Text
name|columnKey
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColumns
condition|;
name|i
operator|++
control|)
block|{
name|columnKey
operator|.
name|set
argument_list|(
name|columnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Writable
name|value
init|=
name|input
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
name|value
operator|instanceof
name|NullWritable
condition|?
literal|null
else|:
operator|(
operator|(
name|ObjectWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|objectInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|MapWritable
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Writes are not allowed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

