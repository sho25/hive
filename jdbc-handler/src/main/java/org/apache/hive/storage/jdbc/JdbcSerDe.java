begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|conf
operator|.
name|JdbcStorageConfigManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|dao
operator|.
name|DatabaseAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|dao
operator|.
name|DatabaseAccessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|storage
operator|.
name|jdbc
operator|.
name|conf
operator|.
name|JdbcStorageConfig
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|JdbcSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JdbcSerDe
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
index|[]
name|hiveColumnNames
decl_stmt|;
specifier|private
name|PrimitiveTypeInfo
index|[]
name|hiveColumnTypes
decl_stmt|;
specifier|private
name|ObjectInspector
name|inspector
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|row
decl_stmt|;
comment|/*    * This method gets called multiple times by Hive. On some invocations, the properties will be empty.    * We need to detect when the properties are not empty to initialise the class variables.    *    * @see org.apache.hadoop.hive.serde2.Deserializer#initialize(org.apache.hadoop.conf.Configuration, java.util.Properties)    */
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|properties
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Initializing the JdbcSerDe"
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
name|JdbcStorageConfig
operator|.
name|DATABASE_TYPE
operator|.
name|getPropertyName
argument_list|()
argument_list|)
condition|)
block|{
name|Configuration
name|tableConfig
init|=
name|JdbcStorageConfigManager
operator|.
name|convertPropertiesToConfiguration
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|DatabaseAccessor
name|dbAccessor
init|=
name|DatabaseAccessorFactory
operator|.
name|getAccessor
argument_list|(
name|tableConfig
argument_list|)
decl_stmt|;
comment|// Extract column names and types from properties
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|hiveColumnTypesList
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
name|Constants
operator|.
name|JDBC_TABLE
argument_list|)
operator|&&
name|properties
operator|.
name|containsKey
argument_list|(
name|Constants
operator|.
name|JDBC_QUERY
argument_list|)
condition|)
block|{
comment|// The query has been autogenerated by Hive, the column names are the
comment|// same in the query pushed and the list of hiveColumnNames
name|String
name|fieldNamesProperty
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|JDBC_QUERY_FIELD_NAMES
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fieldTypesProperty
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|JDBC_QUERY_FIELD_TYPES
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|hiveColumnNames
operator|=
name|fieldNamesProperty
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|hiveColumnTypesList
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|fieldTypesProperty
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveColumnNames
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|hiveColumnTypesList
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hiveColumnNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Received an empty Hive column name definition"
argument_list|)
throw|;
block|}
if|if
condition|(
name|hiveColumnTypesList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Received an empty Hive column type definition"
argument_list|)
throw|;
block|}
comment|// Populate column types and inspector
name|hiveColumnTypes
operator|=
operator|new
name|PrimitiveTypeInfo
index|[
name|hiveColumnTypesList
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldInspectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|hiveColumnNames
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hiveColumnNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TypeInfo
name|ti
init|=
name|hiveColumnTypesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ti
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Non primitive types not supported yet"
argument_list|)
throw|;
block|}
name|hiveColumnTypes
index|[
name|i
index|]
operator|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|ti
expr_stmt|;
name|fieldInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|hiveColumnTypes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|hiveColumnNames
argument_list|)
argument_list|,
name|fieldInspectors
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|hiveColumnNames
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Caught exception while initializing the SqlSerDe"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Deserializing from SerDe"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|blob
operator|instanceof
name|MapWritable
operator|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Expected MapWritable. Got "
operator|+
name|blob
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|row
operator|==
literal|null
operator|)
operator|||
operator|(
name|hiveColumnNames
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"JDBC SerDe hasn't been initialized properly"
argument_list|)
throw|;
block|}
name|row
operator|.
name|clear
argument_list|()
expr_stmt|;
name|MapWritable
name|input
init|=
operator|(
name|MapWritable
operator|)
name|blob
decl_stmt|;
name|Text
name|columnKey
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hiveColumnNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columnKey
operator|.
name|set
argument_list|(
name|hiveColumnNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Writable
name|value
init|=
name|input
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
decl_stmt|;
name|Object
name|rowVal
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|NullWritable
condition|)
block|{
name|rowVal
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|rowVal
operator|=
operator|(
operator|(
name|ObjectWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|hiveColumnTypes
index|[
name|i
index|]
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|INT
case|:
case|case
name|SHORT
case|:
case|case
name|BYTE
case|:
if|if
condition|(
name|rowVal
operator|instanceof
name|Number
condition|)
block|{
name|rowVal
operator|=
operator|(
operator|(
name|Number
operator|)
name|rowVal
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rowVal
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|rowVal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LONG
case|:
if|if
condition|(
name|rowVal
operator|instanceof
name|Long
condition|)
block|{
name|rowVal
operator|=
operator|(
operator|(
name|Number
operator|)
name|rowVal
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rowVal
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|rowVal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FLOAT
case|:
if|if
condition|(
name|rowVal
operator|instanceof
name|Number
condition|)
block|{
name|rowVal
operator|=
operator|(
operator|(
name|Number
operator|)
name|rowVal
operator|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rowVal
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|rowVal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DOUBLE
case|:
if|if
condition|(
name|rowVal
operator|instanceof
name|Number
condition|)
block|{
name|rowVal
operator|=
operator|(
operator|(
name|Number
operator|)
name|rowVal
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rowVal
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|rowVal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DECIMAL
case|:
name|int
name|scale
init|=
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveColumnTypes
index|[
name|i
index|]
operator|)
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|rowVal
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|rowVal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HiveDecimal
operator|)
name|rowVal
operator|)
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|BigDecimal
operator|.
name|ROUND_HALF_EVEN
argument_list|)
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
if|if
condition|(
name|rowVal
operator|instanceof
name|Number
condition|)
block|{
name|rowVal
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|rowVal
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
case|case
name|STRING
case|:
name|rowVal
operator|=
name|rowVal
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|DATE
case|:
if|if
condition|(
name|rowVal
operator|instanceof
name|java
operator|.
name|sql
operator|.
name|Date
condition|)
block|{
name|java
operator|.
name|sql
operator|.
name|Date
name|dateRowVal
init|=
operator|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|)
name|rowVal
decl_stmt|;
name|rowVal
operator|=
name|Date
operator|.
name|ofEpochMilli
argument_list|(
name|dateRowVal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rowVal
operator|=
name|Date
operator|.
name|valueOf
argument_list|(
name|rowVal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|rowVal
operator|instanceof
name|java
operator|.
name|sql
operator|.
name|Timestamp
condition|)
block|{
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|timestampRowVal
init|=
operator|(
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|)
name|rowVal
decl_stmt|;
name|rowVal
operator|=
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|timestampRowVal
operator|.
name|getTime
argument_list|()
argument_list|,
name|timestampRowVal
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rowVal
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|rowVal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
comment|//do nothing
break|break;
block|}
block|}
name|row
operator|.
name|add
argument_list|(
name|rowVal
argument_list|)
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|inspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|MapWritable
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Writes are not allowed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

