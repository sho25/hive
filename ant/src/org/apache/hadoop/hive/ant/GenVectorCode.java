begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import

begin_comment
comment|/**  * This class generates java classes from the templates.  */
end_comment

begin_class
specifier|public
class|class
name|GenVectorCode
extends|extends
name|Task
block|{
specifier|private
specifier|static
name|String
index|[]
index|[]
name|templateExpansions
init|=
block|{
comment|// The following datetime/interval arithmetic operations can be done using the vectorized values
block|{
literal|"DTIColumnArithmeticDTIScalarNoConvert"
block|,
literal|"Add"
block|,
literal|"interval_year_month"
block|,
literal|"interval_year_month"
block|,
literal|"+"
block|}
block|,
block|{
literal|"DTIScalarArithmeticDTIColumnNoConvert"
block|,
literal|"Add"
block|,
literal|"interval_year_month"
block|,
literal|"interval_year_month"
block|,
literal|"+"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIColumnNoConvert"
block|,
literal|"Add"
block|,
literal|"interval_year_month"
block|,
literal|"interval_year_month"
block|,
literal|"+"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIScalarNoConvert"
block|,
literal|"Subtract"
block|,
literal|"interval_year_month"
block|,
literal|"interval_year_month"
block|,
literal|"-"
block|}
block|,
block|{
literal|"DTIScalarArithmeticDTIColumnNoConvert"
block|,
literal|"Subtract"
block|,
literal|"interval_year_month"
block|,
literal|"interval_year_month"
block|,
literal|"-"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIColumnNoConvert"
block|,
literal|"Subtract"
block|,
literal|"interval_year_month"
block|,
literal|"interval_year_month"
block|,
literal|"-"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIScalarNoConvert"
block|,
literal|"Add"
block|,
literal|"interval_day_time"
block|,
literal|"interval_day_time"
block|,
literal|"+"
block|}
block|,
block|{
literal|"DTIScalarArithmeticDTIColumnNoConvert"
block|,
literal|"Add"
block|,
literal|"interval_day_time"
block|,
literal|"interval_day_time"
block|,
literal|"+"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIColumnNoConvert"
block|,
literal|"Add"
block|,
literal|"interval_day_time"
block|,
literal|"interval_day_time"
block|,
literal|"+"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIScalarNoConvert"
block|,
literal|"Subtract"
block|,
literal|"interval_day_time"
block|,
literal|"interval_day_time"
block|,
literal|"-"
block|}
block|,
block|{
literal|"DTIScalarArithmeticDTIColumnNoConvert"
block|,
literal|"Subtract"
block|,
literal|"interval_day_time"
block|,
literal|"interval_day_time"
block|,
literal|"-"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIColumnNoConvert"
block|,
literal|"Subtract"
block|,
literal|"interval_day_time"
block|,
literal|"interval_day_time"
block|,
literal|"-"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIScalarNoConvert"
block|,
literal|"Add"
block|,
literal|"interval_day_time"
block|,
literal|"timestamp"
block|,
literal|"+"
block|}
block|,
block|{
literal|"DTIScalarArithmeticDTIColumnNoConvert"
block|,
literal|"Add"
block|,
literal|"interval_day_time"
block|,
literal|"timestamp"
block|,
literal|"+"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIColumnNoConvert"
block|,
literal|"Add"
block|,
literal|"interval_day_time"
block|,
literal|"timestamp"
block|,
literal|"+"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIScalarNoConvert"
block|,
literal|"Add"
block|,
literal|"timestamp"
block|,
literal|"interval_day_time"
block|,
literal|"+"
block|}
block|,
block|{
literal|"DTIScalarArithmeticDTIColumnNoConvert"
block|,
literal|"Add"
block|,
literal|"timestamp"
block|,
literal|"interval_day_time"
block|,
literal|"+"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIColumnNoConvert"
block|,
literal|"Add"
block|,
literal|"timestamp"
block|,
literal|"interval_day_time"
block|,
literal|"+"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIScalarNoConvert"
block|,
literal|"Subtract"
block|,
literal|"timestamp"
block|,
literal|"interval_day_time"
block|,
literal|"-"
block|}
block|,
block|{
literal|"DTIScalarArithmeticDTIColumnNoConvert"
block|,
literal|"Subtract"
block|,
literal|"timestamp"
block|,
literal|"interval_day_time"
block|,
literal|"-"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIColumnNoConvert"
block|,
literal|"Subtract"
block|,
literal|"timestamp"
block|,
literal|"interval_day_time"
block|,
literal|"-"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIScalarNoConvert"
block|,
literal|"Subtract"
block|,
literal|"timestamp"
block|,
literal|"timestamp"
block|,
literal|"-"
block|}
block|,
block|{
literal|"DTIScalarArithmeticDTIColumnNoConvert"
block|,
literal|"Subtract"
block|,
literal|"timestamp"
block|,
literal|"timestamp"
block|,
literal|"-"
block|}
block|,
block|{
literal|"DTIColumnArithmeticDTIColumnNoConvert"
block|,
literal|"Subtract"
block|,
literal|"timestamp"
block|,
literal|"timestamp"
block|,
literal|"-"
block|}
block|,
comment|// The following datetime/interval arithmetic functions require type conversion for one or both operands
block|{
literal|"ColumnArithmeticColumnWithConvert"
block|,
literal|"Subtract"
block|,
literal|"date"
block|,
literal|"date"
block|,
literal|"-"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|}
block|,
block|{
literal|"ScalarArithmeticColumnWithConvert"
block|,
literal|"Subtract"
block|,
literal|"date"
block|,
literal|"date"
block|,
literal|"-"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|}
block|,
block|{
literal|"ColumnArithmeticScalarWithConvert"
block|,
literal|"Subtract"
block|,
literal|"date"
block|,
literal|"date"
block|,
literal|"-"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|}
block|,
block|{
literal|"ColumnArithmeticColumnWithConvert"
block|,
literal|"Subtract"
block|,
literal|"date"
block|,
literal|"timestamp"
block|,
literal|"-"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|,
literal|""
block|}
block|,
block|{
literal|"ScalarArithmeticColumnWithConvert"
block|,
literal|"Subtract"
block|,
literal|"date"
block|,
literal|"timestamp"
block|,
literal|"-"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnArithmeticScalarWithConvert"
block|,
literal|"Subtract"
block|,
literal|"date"
block|,
literal|"timestamp"
block|,
literal|"-"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnArithmeticColumnWithConvert"
block|,
literal|"Subtract"
block|,
literal|"timestamp"
block|,
literal|"date"
block|,
literal|"-"
block|,
literal|""
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|}
block|,
block|{
literal|"ScalarArithmeticColumnWithConvert"
block|,
literal|"Subtract"
block|,
literal|"timestamp"
block|,
literal|"date"
block|,
literal|"-"
block|,
literal|""
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|}
block|,
block|{
literal|"ColumnArithmeticScalarWithConvert"
block|,
literal|"Subtract"
block|,
literal|"timestamp"
block|,
literal|"date"
block|,
literal|"-"
block|,
literal|""
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|}
block|,
block|{
literal|"ColumnArithmeticColumnWithConvert"
block|,
literal|"Add"
block|,
literal|"date"
block|,
literal|"interval_day_time"
block|,
literal|"+"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|,
literal|""
block|}
block|,
block|{
literal|"ScalarArithmeticColumnWithConvert"
block|,
literal|"Add"
block|,
literal|"date"
block|,
literal|"interval_day_time"
block|,
literal|"+"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnArithmeticScalarWithConvert"
block|,
literal|"Add"
block|,
literal|"date"
block|,
literal|"interval_day_time"
block|,
literal|"+"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnArithmeticColumnWithConvert"
block|,
literal|"Subtract"
block|,
literal|"date"
block|,
literal|"interval_day_time"
block|,
literal|"-"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|,
literal|""
block|}
block|,
block|{
literal|"ScalarArithmeticColumnWithConvert"
block|,
literal|"Subtract"
block|,
literal|"date"
block|,
literal|"interval_day_time"
block|,
literal|"-"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnArithmeticScalarWithConvert"
block|,
literal|"Subtract"
block|,
literal|"date"
block|,
literal|"interval_day_time"
block|,
literal|"-"
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnArithmeticColumnWithConvert"
block|,
literal|"Add"
block|,
literal|"interval_day_time"
block|,
literal|"date"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|}
block|,
block|{
literal|"ScalarArithmeticColumnWithConvert"
block|,
literal|"Add"
block|,
literal|"interval_day_time"
block|,
literal|"date"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|}
block|,
block|{
literal|"ColumnArithmeticScalarWithConvert"
block|,
literal|"Add"
block|,
literal|"interval_day_time"
block|,
literal|"date"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"TimestampUtils.daysToNanoseconds"
block|}
block|,
comment|// Most year-month interval arithmetic needs its own generation
block|{
literal|"DateTimeColumnArithmeticIntervalColumnWithConvert"
block|,
literal|"Add"
block|,
literal|"date"
block|,
literal|"interval_year_month"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"dtm.addMonthsToDays"
block|}
block|,
block|{
literal|"DateTimeScalarArithmeticIntervalColumnWithConvert"
block|,
literal|"Add"
block|,
literal|"date"
block|,
literal|"interval_year_month"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"dtm.addMonthsToDays"
block|}
block|,
block|{
literal|"DateTimeColumnArithmeticIntervalScalarWithConvert"
block|,
literal|"Add"
block|,
literal|"date"
block|,
literal|"interval_year_month"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"dtm.addMonthsToDays"
block|}
block|,
block|{
literal|"DateTimeColumnArithmeticIntervalColumnWithConvert"
block|,
literal|"Subtract"
block|,
literal|"date"
block|,
literal|"interval_year_month"
block|,
literal|"-"
block|,
literal|""
block|,
literal|"dtm.addMonthsToDays"
block|}
block|,
block|{
literal|"DateTimeScalarArithmeticIntervalColumnWithConvert"
block|,
literal|"Subtract"
block|,
literal|"date"
block|,
literal|"interval_year_month"
block|,
literal|"-"
block|,
literal|""
block|,
literal|"dtm.addMonthsToDays"
block|}
block|,
block|{
literal|"DateTimeColumnArithmeticIntervalScalarWithConvert"
block|,
literal|"Subtract"
block|,
literal|"date"
block|,
literal|"interval_year_month"
block|,
literal|"-"
block|,
literal|""
block|,
literal|"dtm.addMonthsToDays"
block|}
block|,
block|{
literal|"DateTimeColumnArithmeticIntervalColumnWithConvert"
block|,
literal|"Add"
block|,
literal|"timestamp"
block|,
literal|"interval_year_month"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"dtm.addMonthsToNanosUtc"
block|}
block|,
block|{
literal|"DateTimeScalarArithmeticIntervalColumnWithConvert"
block|,
literal|"Add"
block|,
literal|"timestamp"
block|,
literal|"interval_year_month"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"dtm.addMonthsToNanosUtc"
block|}
block|,
block|{
literal|"DateTimeColumnArithmeticIntervalScalarWithConvert"
block|,
literal|"Add"
block|,
literal|"timestamp"
block|,
literal|"interval_year_month"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"dtm.addMonthsToNanosUtc"
block|}
block|,
block|{
literal|"DateTimeColumnArithmeticIntervalColumnWithConvert"
block|,
literal|"Subtract"
block|,
literal|"timestamp"
block|,
literal|"interval_year_month"
block|,
literal|"-"
block|,
literal|""
block|,
literal|"dtm.addMonthsToNanosUtc"
block|}
block|,
block|{
literal|"DateTimeScalarArithmeticIntervalColumnWithConvert"
block|,
literal|"Subtract"
block|,
literal|"timestamp"
block|,
literal|"interval_year_month"
block|,
literal|"-"
block|,
literal|""
block|,
literal|"dtm.addMonthsToNanosUtc"
block|}
block|,
block|{
literal|"DateTimeColumnArithmeticIntervalScalarWithConvert"
block|,
literal|"Subtract"
block|,
literal|"timestamp"
block|,
literal|"interval_year_month"
block|,
literal|"-"
block|,
literal|""
block|,
literal|"dtm.addMonthsToNanosUtc"
block|}
block|,
block|{
literal|"IntervalColumnArithmeticDateTimeColumnWithConvert"
block|,
literal|"Add"
block|,
literal|"interval_year_month"
block|,
literal|"date"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"dtm.addMonthsToDays"
block|}
block|,
block|{
literal|"IntervalScalarArithmeticDateTimeColumnWithConvert"
block|,
literal|"Add"
block|,
literal|"interval_year_month"
block|,
literal|"date"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"dtm.addMonthsToDays"
block|}
block|,
block|{
literal|"IntervalColumnArithmeticDateTimeScalarWithConvert"
block|,
literal|"Add"
block|,
literal|"interval_year_month"
block|,
literal|"date"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"dtm.addMonthsToDays"
block|}
block|,
block|{
literal|"IntervalColumnArithmeticDateTimeColumnWithConvert"
block|,
literal|"Add"
block|,
literal|"interval_year_month"
block|,
literal|"timestamp"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"dtm.addMonthsToNanosUtc"
block|}
block|,
block|{
literal|"IntervalScalarArithmeticDateTimeColumnWithConvert"
block|,
literal|"Add"
block|,
literal|"interval_year_month"
block|,
literal|"timestamp"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"dtm.addMonthsToNanosUtc"
block|}
block|,
block|{
literal|"IntervalColumnArithmeticDateTimeScalarWithConvert"
block|,
literal|"Add"
block|,
literal|"interval_year_month"
block|,
literal|"timestamp"
block|,
literal|"+"
block|,
literal|""
block|,
literal|"dtm.addMonthsToNanosUtc"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Add"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Subtract"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Multiply"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Add"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Subtract"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Multiply"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Add"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Subtract"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Multiply"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Add"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Subtract"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Multiply"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnDivideScalar"
block|,
literal|"Divide"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ColumnDivideScalar"
block|,
literal|"Divide"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ColumnDivideScalar"
block|,
literal|"Divide"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ScalarDivideColumn"
block|,
literal|"Divide"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ScalarDivideColumn"
block|,
literal|"Divide"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ScalarDivideColumn"
block|,
literal|"Divide"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ColumnDivideColumn"
block|,
literal|"Divide"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ColumnDivideColumn"
block|,
literal|"Divide"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ColumnDivideColumn"
block|,
literal|"Divide"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ColumnDivideScalar"
block|,
literal|"Modulo"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnDivideScalar"
block|,
literal|"Modulo"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnDivideScalar"
block|,
literal|"Modulo"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnDivideScalar"
block|,
literal|"Modulo"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ScalarDivideColumn"
block|,
literal|"Modulo"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ScalarDivideColumn"
block|,
literal|"Modulo"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ScalarDivideColumn"
block|,
literal|"Modulo"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ScalarDivideColumn"
block|,
literal|"Modulo"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnDivideColumn"
block|,
literal|"Modulo"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnDivideColumn"
block|,
literal|"Modulo"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnDivideColumn"
block|,
literal|"Modulo"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnDivideColumn"
block|,
literal|"Modulo"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnArithmeticScalarDecimal"
block|,
literal|"Add"
block|}
block|,
block|{
literal|"ColumnArithmeticScalarDecimal"
block|,
literal|"Subtract"
block|}
block|,
block|{
literal|"ColumnArithmeticScalarDecimal"
block|,
literal|"Multiply"
block|}
block|,
block|{
literal|"ScalarArithmeticColumnDecimal"
block|,
literal|"Add"
block|}
block|,
block|{
literal|"ScalarArithmeticColumnDecimal"
block|,
literal|"Subtract"
block|}
block|,
block|{
literal|"ScalarArithmeticColumnDecimal"
block|,
literal|"Multiply"
block|}
block|,
block|{
literal|"ColumnArithmeticColumnDecimal"
block|,
literal|"Add"
block|}
block|,
block|{
literal|"ColumnArithmeticColumnDecimal"
block|,
literal|"Subtract"
block|}
block|,
block|{
literal|"ColumnArithmeticColumnDecimal"
block|,
literal|"Multiply"
block|}
block|,
block|{
literal|"ColumnDivideScalarDecimal"
block|,
literal|"Divide"
block|}
block|,
block|{
literal|"ColumnDivideScalarDecimal"
block|,
literal|"Modulo"
block|}
block|,
block|{
literal|"ScalarDivideColumnDecimal"
block|,
literal|"Divide"
block|}
block|,
block|{
literal|"ScalarDivideColumnDecimal"
block|,
literal|"Modulo"
block|}
block|,
block|{
literal|"ColumnDivideColumnDecimal"
block|,
literal|"Divide"
block|}
block|,
block|{
literal|"ColumnDivideColumnDecimal"
block|,
literal|"Modulo"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"ScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"TimestampColumnCompareTimestampScalar"
block|,
literal|"Equal"
block|}
block|,
block|{
literal|"TimestampColumnCompareTimestampScalar"
block|,
literal|"NotEqual"
block|}
block|,
block|{
literal|"TimestampColumnCompareTimestampScalar"
block|,
literal|"Less"
block|}
block|,
block|{
literal|"TimestampColumnCompareTimestampScalar"
block|,
literal|"LessEqual"
block|}
block|,
block|{
literal|"TimestampColumnCompareTimestampScalar"
block|,
literal|"Greater"
block|}
block|,
block|{
literal|"TimestampColumnCompareTimestampScalar"
block|,
literal|"GreaterEqual"
block|}
block|,
block|{
literal|"TimestampColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"long"
block|}
block|,
block|{
literal|"TimestampColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"double"
block|}
block|,
block|{
literal|"TimestampColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|}
block|,
block|{
literal|"TimestampColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|}
block|,
block|{
literal|"TimestampColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"long"
block|}
block|,
block|{
literal|"TimestampColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"double"
block|}
block|,
block|{
literal|"TimestampColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|}
block|,
block|{
literal|"TimestampColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|}
block|,
block|{
literal|"TimestampColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"long"
block|}
block|,
block|{
literal|"TimestampColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"double"
block|}
block|,
block|{
literal|"TimestampColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|}
block|,
block|{
literal|"TimestampColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|}
block|,
block|{
literal|"TimestampScalarCompareTimestampColumn"
block|,
literal|"Equal"
block|}
block|,
block|{
literal|"TimestampScalarCompareTimestampColumn"
block|,
literal|"NotEqual"
block|}
block|,
block|{
literal|"TimestampScalarCompareTimestampColumn"
block|,
literal|"Less"
block|}
block|,
block|{
literal|"TimestampScalarCompareTimestampColumn"
block|,
literal|"LessEqual"
block|}
block|,
block|{
literal|"TimestampScalarCompareTimestampColumn"
block|,
literal|"Greater"
block|}
block|,
block|{
literal|"TimestampScalarCompareTimestampColumn"
block|,
literal|"GreaterEqual"
block|}
block|,
block|{
literal|"ScalarCompareTimestampColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|}
block|,
block|{
literal|"ScalarCompareTimestampColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|}
block|,
block|{
literal|"ScalarCompareTimestampColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|}
block|,
block|{
literal|"ScalarCompareTimestampColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|}
block|,
block|{
literal|"ScalarCompareTimestampColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|}
block|,
block|{
literal|"ScalarCompareTimestampColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|}
block|,
block|{
literal|"ScalarCompareTimestampColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|}
block|,
block|{
literal|"ScalarCompareTimestampColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|}
block|,
block|{
literal|"ScalarCompareTimestampColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|}
block|,
block|{
literal|"ScalarCompareTimestampColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|}
block|,
block|{
literal|"ScalarCompareTimestampColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|}
block|,
block|{
literal|"ScalarCompareTimestampColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareTimestampScalar"
block|,
literal|"Equal"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareTimestampScalar"
block|,
literal|"NotEqual"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareTimestampScalar"
block|,
literal|"Less"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareTimestampScalar"
block|,
literal|"LessEqual"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareTimestampScalar"
block|,
literal|"Greater"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareTimestampScalar"
block|,
literal|"GreaterEqual"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"long"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"long"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"long"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|}
block|,
block|{
literal|"FilterTimestampColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterTimestampScalarCompareTimestampColumn"
block|,
literal|"Equal"
block|}
block|,
block|{
literal|"FilterTimestampScalarCompareTimestampColumn"
block|,
literal|"NotEqual"
block|}
block|,
block|{
literal|"FilterTimestampScalarCompareTimestampColumn"
block|,
literal|"Less"
block|}
block|,
block|{
literal|"FilterTimestampScalarCompareTimestampColumn"
block|,
literal|"LessEqual"
block|}
block|,
block|{
literal|"FilterTimestampScalarCompareTimestampColumn"
block|,
literal|"Greater"
block|}
block|,
block|{
literal|"FilterTimestampScalarCompareTimestampColumn"
block|,
literal|"GreaterEqual"
block|}
block|,
block|{
literal|"FilterScalarCompareTimestampColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|}
block|,
block|{
literal|"FilterScalarCompareTimestampColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterScalarCompareTimestampColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|}
block|,
block|{
literal|"FilterScalarCompareTimestampColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterScalarCompareTimestampColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|}
block|,
block|{
literal|"FilterScalarCompareTimestampColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterScalarCompareTimestampColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|}
block|,
block|{
literal|"FilterScalarCompareTimestampColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterScalarCompareTimestampColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|}
block|,
block|{
literal|"FilterScalarCompareTimestampColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterScalarCompareTimestampColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|}
block|,
block|{
literal|"FilterScalarCompareTimestampColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringGroupScalarBase"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringGroupScalarBase"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringGroupScalarBase"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringGroupScalarBase"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringGroupScalarBase"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringGroupScalarBase"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringScalar"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringScalar"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringScalar"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringScalar"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringScalar"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringScalar"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareTruncStringScalar"
block|,
literal|"VarChar"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareTruncStringScalar"
block|,
literal|"VarChar"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareTruncStringScalar"
block|,
literal|"VarChar"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareTruncStringScalar"
block|,
literal|"VarChar"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareTruncStringScalar"
block|,
literal|"VarChar"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareTruncStringScalar"
block|,
literal|"VarChar"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareTruncStringScalar"
block|,
literal|"Char"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareTruncStringScalar"
block|,
literal|"Char"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareTruncStringScalar"
block|,
literal|"Char"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareTruncStringScalar"
block|,
literal|"Char"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareTruncStringScalar"
block|,
literal|"Char"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareTruncStringScalar"
block|,
literal|"Char"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterStringColumnBetween"
block|,
literal|""
block|}
block|,
block|{
literal|"FilterStringColumnBetween"
block|,
literal|"!"
block|}
block|,
block|{
literal|"FilterTruncStringColumnBetween"
block|,
literal|"VarChar"
block|,
literal|""
block|}
block|,
block|{
literal|"FilterTruncStringColumnBetween"
block|,
literal|"VarChar"
block|,
literal|"!"
block|}
block|,
block|{
literal|"FilterTruncStringColumnBetween"
block|,
literal|"Char"
block|,
literal|""
block|}
block|,
block|{
literal|"FilterTruncStringColumnBetween"
block|,
literal|"Char"
block|,
literal|"!"
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringGroupScalarBase"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringGroupScalarBase"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringGroupScalarBase"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringGroupScalarBase"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringGroupScalarBase"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringGroupScalarBase"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringScalar"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringScalar"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringScalar"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringScalar"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringScalar"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringScalar"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"StringGroupColumnCompareTruncStringScalar"
block|,
literal|"VarChar"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"StringGroupColumnCompareTruncStringScalar"
block|,
literal|"VarChar"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"StringGroupColumnCompareTruncStringScalar"
block|,
literal|"VarChar"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"StringGroupColumnCompareTruncStringScalar"
block|,
literal|"VarChar"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"StringGroupColumnCompareTruncStringScalar"
block|,
literal|"VarChar"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"StringGroupColumnCompareTruncStringScalar"
block|,
literal|"VarChar"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"StringGroupColumnCompareTruncStringScalar"
block|,
literal|"Char"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"StringGroupColumnCompareTruncStringScalar"
block|,
literal|"Char"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"StringGroupColumnCompareTruncStringScalar"
block|,
literal|"Char"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"StringGroupColumnCompareTruncStringScalar"
block|,
literal|"Char"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"StringGroupColumnCompareTruncStringScalar"
block|,
literal|"Char"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"StringGroupColumnCompareTruncStringScalar"
block|,
literal|"Char"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterStringGroupScalarCompareStringGroupColumnBase"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterStringGroupScalarCompareStringGroupColumnBase"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterStringGroupScalarCompareStringGroupColumnBase"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterStringGroupScalarCompareStringGroupColumnBase"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterStringGroupScalarCompareStringGroupColumnBase"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterStringGroupScalarCompareStringGroupColumnBase"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterStringScalarCompareStringGroupColumn"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterStringScalarCompareStringGroupColumn"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterStringScalarCompareStringGroupColumn"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterStringScalarCompareStringGroupColumn"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterStringScalarCompareStringGroupColumn"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterStringScalarCompareStringGroupColumn"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterTruncStringScalarCompareStringGroupColumn"
block|,
literal|"VarChar"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterTruncStringScalarCompareStringGroupColumn"
block|,
literal|"VarChar"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterTruncStringScalarCompareStringGroupColumn"
block|,
literal|"VarChar"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterTruncStringScalarCompareStringGroupColumn"
block|,
literal|"VarChar"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterTruncStringScalarCompareStringGroupColumn"
block|,
literal|"VarChar"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterTruncStringScalarCompareStringGroupColumn"
block|,
literal|"VarChar"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterTruncStringScalarCompareStringGroupColumn"
block|,
literal|"Char"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterTruncStringScalarCompareStringGroupColumn"
block|,
literal|"Char"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterTruncStringScalarCompareStringGroupColumn"
block|,
literal|"Char"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterTruncStringScalarCompareStringGroupColumn"
block|,
literal|"Char"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterTruncStringScalarCompareStringGroupColumn"
block|,
literal|"Char"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterTruncStringScalarCompareStringGroupColumn"
block|,
literal|"Char"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterDecimalColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterDecimalColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterDecimalColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterDecimalColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterDecimalColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterDecimalColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterDecimalScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterDecimalScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterDecimalScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterDecimalScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterDecimalScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterDecimalScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterDecimalColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterDecimalColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterDecimalColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterDecimalColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterDecimalColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterDecimalColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"StringGroupScalarCompareStringGroupColumnBase"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"StringGroupScalarCompareStringGroupColumnBase"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"StringGroupScalarCompareStringGroupColumnBase"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"StringGroupScalarCompareStringGroupColumnBase"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"StringGroupScalarCompareStringGroupColumnBase"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"StringGroupScalarCompareStringGroupColumnBase"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"StringScalarCompareStringGroupColumn"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"StringScalarCompareStringGroupColumn"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"StringScalarCompareStringGroupColumn"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"StringScalarCompareStringGroupColumn"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"StringScalarCompareStringGroupColumn"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"StringScalarCompareStringGroupColumn"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"TruncStringScalarCompareStringGroupColumn"
block|,
literal|"VarChar"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"TruncStringScalarCompareStringGroupColumn"
block|,
literal|"VarChar"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"TruncStringScalarCompareStringGroupColumn"
block|,
literal|"VarChar"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"TruncStringScalarCompareStringGroupColumn"
block|,
literal|"VarChar"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"TruncStringScalarCompareStringGroupColumn"
block|,
literal|"VarChar"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"TruncStringScalarCompareStringGroupColumn"
block|,
literal|"VarChar"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"TruncStringScalarCompareStringGroupColumn"
block|,
literal|"Char"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"TruncStringScalarCompareStringGroupColumn"
block|,
literal|"Char"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"TruncStringScalarCompareStringGroupColumn"
block|,
literal|"Char"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"TruncStringScalarCompareStringGroupColumn"
block|,
literal|"Char"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"TruncStringScalarCompareStringGroupColumn"
block|,
literal|"Char"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"TruncStringScalarCompareStringGroupColumn"
block|,
literal|"Char"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringGroupColumn"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringGroupColumn"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringGroupColumn"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringGroupColumn"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringGroupColumn"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterStringGroupColumnCompareStringGroupColumn"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringGroupColumn"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringGroupColumn"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringGroupColumn"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringGroupColumn"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringGroupColumn"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"StringGroupColumnCompareStringGroupColumn"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnBetween"
block|,
literal|"long"
block|,
literal|""
block|}
block|,
block|{
literal|"FilterColumnBetween"
block|,
literal|"double"
block|,
literal|""
block|}
block|,
block|{
literal|"FilterColumnBetween"
block|,
literal|"long"
block|,
literal|"!"
block|}
block|,
block|{
literal|"FilterColumnBetween"
block|,
literal|"double"
block|,
literal|"!"
block|}
block|,
block|{
literal|"FilterDecimalColumnBetween"
block|,
literal|""
block|}
block|,
block|{
literal|"FilterDecimalColumnBetween"
block|,
literal|"!"
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"ColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
comment|// Interval comparisons
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"interval_day_time"
block|}
block|,
comment|// Date comparisons
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"date"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"date"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"date"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"date"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"date"
block|}
block|,
block|{
literal|"DTIScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"date"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"date"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"date"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"date"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"date"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"date"
block|}
block|,
block|{
literal|"DTIColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"date"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"date"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"date"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"date"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"date"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"date"
block|}
block|,
block|{
literal|"FilterDTIScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"date"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"date"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"date"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"date"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"date"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"date"
block|}
block|,
block|{
literal|"FilterDTIColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"date"
block|}
block|,
comment|// template,<ClassNamePrefix>,<ReturnType>,<OperandType>,<FuncName>,<OperandCast>,
comment|//<ResultCast>,<Cleanup><VectorExprArgType>
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncRound"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"MathExpr.round"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncBRound"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"MathExpr.bround"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
comment|// round(longCol) returns a long and is a no-op. So it will not be implemented here.
comment|// round(Col, N) is a special case and will be implemented separately from this template
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncFloor"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"Math.floor"
block|,
literal|""
block|,
literal|"(long)"
block|,
literal|""
block|,
literal|""
block|}
block|,
comment|// Floor on an integer argument is a noop, but it is less code to handle it this way.
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncFloor"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"Math.floor"
block|,
literal|""
block|,
literal|"(long)"
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncCeil"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"Math.ceil"
block|,
literal|""
block|,
literal|"(long)"
block|,
literal|""
block|,
literal|""
block|}
block|,
comment|// Ceil on an integer argument is a noop, but it is less code to handle it this way.
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncCeil"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"Math.ceil"
block|,
literal|""
block|,
literal|"(long)"
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncExp"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.exp"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncExp"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"Math.exp"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncLn"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.log"
block|,
literal|""
block|,
literal|""
block|,
literal|"MathExpr.NaNToNull(outputColVector, sel, batch.selectedInUse, n, true);"
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncLn"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"Math.log"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|"MathExpr.NaNToNull(outputColVector, sel, batch.selectedInUse, n, true);"
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncLog10"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.log10"
block|,
literal|""
block|,
literal|""
block|,
literal|"MathExpr.NaNToNull(outputColVector, sel, batch.selectedInUse, n, true);"
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncLog10"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"Math.log10"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|"MathExpr.NaNToNull(outputColVector, sel, batch.selectedInUse, n, true);"
block|,
literal|""
block|}
block|,
comment|// The MathExpr class contains helper functions for cases when existing library
comment|// routines can't be used directly.
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncLog2"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"MathExpr.log2"
block|,
literal|""
block|,
literal|""
block|,
literal|"MathExpr.NaNToNull(outputColVector, sel, batch.selectedInUse, n, true);"
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncLog2"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"MathExpr.log2"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|"MathExpr.NaNToNull(outputColVector, sel, batch.selectedInUse, n, true);"
block|,
literal|""
block|}
block|,
comment|// Log(base, Col) is a special case and will be implemented separately from this template
comment|// Pow(col, P) and Power(col, P) are special cases implemented separately from this template
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncSqrt"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.sqrt"
block|,
literal|""
block|,
literal|""
block|,
literal|"MathExpr.NaNToNull(outputColVector, sel, batch.selectedInUse, n);"
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncSqrt"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"Math.sqrt"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|"MathExpr.NaNToNull(outputColVector, sel, batch.selectedInUse, n);"
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncAbs"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.abs"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncAbs"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"MathExpr.abs"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncSin"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.sin"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncSin"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"Math.sin"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncASin"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.asin"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncASin"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"Math.asin"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncCos"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.cos"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncCos"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"Math.cos"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncACos"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.acos"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncACos"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"Math.acos"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncTan"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.tan"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncTan"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"Math.tan"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncATan"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.atan"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncATan"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"Math.atan"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncDegrees"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.toDegrees"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncDegrees"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"Math.toDegrees"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncRadians"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"Math.toRadians"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncRadians"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"Math.toRadians"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncSign"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"MathExpr.sign"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"FuncSign"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"MathExpr.sign"
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"DecimalColumnUnaryFunc"
block|,
literal|"FuncFloor"
block|,
literal|"decimal"
block|,
literal|"DecimalUtil.floor"
block|}
block|,
block|{
literal|"DecimalColumnUnaryFunc"
block|,
literal|"FuncCeil"
block|,
literal|"decimal"
block|,
literal|"DecimalUtil.ceiling"
block|}
block|,
block|{
literal|"DecimalColumnUnaryFunc"
block|,
literal|"FuncAbs"
block|,
literal|"decimal"
block|,
literal|"DecimalUtil.abs"
block|}
block|,
block|{
literal|"DecimalColumnUnaryFunc"
block|,
literal|"FuncSign"
block|,
literal|"long"
block|,
literal|"DecimalUtil.sign"
block|}
block|,
block|{
literal|"DecimalColumnUnaryFunc"
block|,
literal|"FuncRound"
block|,
literal|"decimal"
block|,
literal|"DecimalUtil.round"
block|}
block|,
block|{
literal|"DecimalColumnUnaryFunc"
block|,
literal|"FuncBRound"
block|,
literal|"decimal"
block|,
literal|"DecimalUtil.bround"
block|}
block|,
block|{
literal|"DecimalColumnUnaryFunc"
block|,
literal|"FuncNegate"
block|,
literal|"decimal"
block|,
literal|"DecimalUtil.negate"
block|}
block|,
comment|// Casts
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"Cast"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|""
block|,
literal|""
block|,
literal|"(long)"
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"Cast"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|""
block|,
literal|""
block|,
literal|"(double)"
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"CastTimestampToLongVia"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"MathExpr.fromTimestamp"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"CastTimestampToDoubleVia"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"MathExpr.fromTimestampToDouble"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"CastDoubleToBooleanVia"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"MathExpr.toBool"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"CastLongToBooleanVia"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"MathExpr.toBool"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"CastDateToBooleanVia"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"MathExpr.toBool"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|"date"
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"CastTimestampToBooleanVia"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"MathExpr.toBool"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"CastLongToTimestampVia"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"MathExpr.longToTimestamp"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"CastMillisecondsLongToTimestampVia"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"MathExpr.millisecondsLongToTimestamp"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
block|{
literal|"ColumnUnaryFunc"
block|,
literal|"CastDoubleToTimestampVia"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"MathExpr.doubleToTimestamp"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
block|,
comment|// Boolean to long is done with an IdentityExpression
comment|// Boolean to double is done with standard Long to Double cast
comment|// See org.apache.hadoop.hive.ql.exec.vector.expressions for remaining cast VectorExpression
comment|// classes
block|{
literal|"ColumnUnaryMinus"
block|,
literal|"long"
block|}
block|,
block|{
literal|"ColumnUnaryMinus"
block|,
literal|"double"
block|}
block|,
comment|// IF conditional expression
comment|// fileHeader, resultType, arg2Type, arg3Type
block|{
literal|"IfExprColumnColumn"
block|,
literal|"long"
block|}
block|,
block|{
literal|"IfExprColumnColumn"
block|,
literal|"double"
block|}
block|,
block|{
literal|"IfExprColumnScalar"
block|,
literal|"long"
block|,
literal|"long"
block|}
block|,
block|{
literal|"IfExprColumnScalar"
block|,
literal|"double"
block|,
literal|"long"
block|}
block|,
block|{
literal|"IfExprColumnScalar"
block|,
literal|"long"
block|,
literal|"double"
block|}
block|,
block|{
literal|"IfExprColumnScalar"
block|,
literal|"double"
block|,
literal|"double"
block|}
block|,
block|{
literal|"IfExprScalarColumn"
block|,
literal|"long"
block|,
literal|"long"
block|}
block|,
block|{
literal|"IfExprScalarColumn"
block|,
literal|"double"
block|,
literal|"long"
block|}
block|,
block|{
literal|"IfExprScalarColumn"
block|,
literal|"long"
block|,
literal|"double"
block|}
block|,
block|{
literal|"IfExprScalarColumn"
block|,
literal|"double"
block|,
literal|"double"
block|}
block|,
block|{
literal|"IfExprScalarScalar"
block|,
literal|"long"
block|,
literal|"long"
block|}
block|,
block|{
literal|"IfExprScalarScalar"
block|,
literal|"double"
block|,
literal|"long"
block|}
block|,
block|{
literal|"IfExprScalarScalar"
block|,
literal|"long"
block|,
literal|"double"
block|}
block|,
block|{
literal|"IfExprScalarScalar"
block|,
literal|"double"
block|,
literal|"double"
block|}
block|,
comment|// template,<ClassName>,<ValueType>,<OperatorSymbol>,<DescriptionName>,<DescriptionValue>
block|{
literal|"VectorUDAFMinMax"
block|,
literal|"VectorUDAFMinLong"
block|,
literal|"long"
block|,
literal|"<"
block|,
literal|"min"
block|,
literal|"_FUNC_(expr) - Returns the minimum value of expr (vectorized, type: long)"
block|}
block|,
block|{
literal|"VectorUDAFMinMax"
block|,
literal|"VectorUDAFMinDouble"
block|,
literal|"double"
block|,
literal|"<"
block|,
literal|"min"
block|,
literal|"_FUNC_(expr) - Returns the minimum value of expr (vectorized, type: double)"
block|}
block|,
block|{
literal|"VectorUDAFMinMax"
block|,
literal|"VectorUDAFMaxLong"
block|,
literal|"long"
block|,
literal|">"
block|,
literal|"max"
block|,
literal|"_FUNC_(expr) - Returns the maximum value of expr (vectorized, type: long)"
block|}
block|,
block|{
literal|"VectorUDAFMinMax"
block|,
literal|"VectorUDAFMaxDouble"
block|,
literal|"double"
block|,
literal|">"
block|,
literal|"max"
block|,
literal|"_FUNC_(expr) - Returns the maximum value of expr (vectorized, type: double)"
block|}
block|,
block|{
literal|"VectorUDAFMinMaxDecimal"
block|,
literal|"VectorUDAFMaxDecimal"
block|,
literal|"<"
block|,
literal|"max"
block|,
literal|"_FUNC_(expr) - Returns the maximum value of expr (vectorized, type: decimal)"
block|}
block|,
block|{
literal|"VectorUDAFMinMaxDecimal"
block|,
literal|"VectorUDAFMinDecimal"
block|,
literal|">"
block|,
literal|"min"
block|,
literal|"_FUNC_(expr) - Returns the minimum value of expr (vectorized, type: decimal)"
block|}
block|,
block|{
literal|"VectorUDAFMinMaxString"
block|,
literal|"VectorUDAFMinString"
block|,
literal|"<"
block|,
literal|"min"
block|,
literal|"_FUNC_(expr) - Returns the minimum value of expr (vectorized, type: string)"
block|}
block|,
block|{
literal|"VectorUDAFMinMaxString"
block|,
literal|"VectorUDAFMaxString"
block|,
literal|">"
block|,
literal|"max"
block|,
literal|"_FUNC_(expr) - Returns the minimum value of expr (vectorized, type: string)"
block|}
block|,
comment|//template,<ClassName>,<ValueType>
block|{
literal|"VectorUDAFSum"
block|,
literal|"VectorUDAFSumLong"
block|,
literal|"long"
block|}
block|,
block|{
literal|"VectorUDAFSum"
block|,
literal|"VectorUDAFSumDouble"
block|,
literal|"double"
block|}
block|,
block|{
literal|"VectorUDAFAvg"
block|,
literal|"VectorUDAFAvgLong"
block|,
literal|"long"
block|}
block|,
block|{
literal|"VectorUDAFAvg"
block|,
literal|"VectorUDAFAvgDouble"
block|,
literal|"double"
block|}
block|,
comment|// template,<ClassName>,<ValueType>,<VarianceFormula>,<DescriptionName>,
comment|//<DescriptionValue>
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFVarPopLong"
block|,
literal|"long"
block|,
literal|"myagg.variance / myagg.count"
block|,
literal|"variance, var_pop"
block|,
literal|"_FUNC_(x) - Returns the variance of a set of numbers (vectorized, long)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFVarPopDouble"
block|,
literal|"double"
block|,
literal|"myagg.variance / myagg.count"
block|,
literal|"variance, var_pop"
block|,
literal|"_FUNC_(x) - Returns the variance of a set of numbers (vectorized, double)"
block|}
block|,
block|{
literal|"VectorUDAFVarDecimal"
block|,
literal|"VectorUDAFVarPopDecimal"
block|,
literal|"myagg.variance / myagg.count"
block|,
literal|"variance, var_pop"
block|,
literal|"_FUNC_(x) - Returns the variance of a set of numbers (vectorized, decimal)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFVarSampLong"
block|,
literal|"long"
block|,
literal|"myagg.variance / (myagg.count-1.0)"
block|,
literal|"var_samp"
block|,
literal|"_FUNC_(x) - Returns the sample variance of a set of numbers (vectorized, long)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFVarSampDouble"
block|,
literal|"double"
block|,
literal|"myagg.variance / (myagg.count-1.0)"
block|,
literal|"var_samp"
block|,
literal|"_FUNC_(x) - Returns the sample variance of a set of numbers (vectorized, double)"
block|}
block|,
block|{
literal|"VectorUDAFVarDecimal"
block|,
literal|"VectorUDAFVarSampDecimal"
block|,
literal|"myagg.variance / (myagg.count-1.0)"
block|,
literal|"var_samp"
block|,
literal|"_FUNC_(x) - Returns the sample variance of a set of numbers (vectorized, decimal)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFStdPopLong"
block|,
literal|"long"
block|,
literal|"Math.sqrt(myagg.variance / (myagg.count))"
block|,
literal|"std,stddev,stddev_pop"
block|,
literal|"_FUNC_(x) - Returns the standard deviation of a set of numbers (vectorized, long)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFStdPopDouble"
block|,
literal|"double"
block|,
literal|"Math.sqrt(myagg.variance / (myagg.count))"
block|,
literal|"std,stddev,stddev_pop"
block|,
literal|"_FUNC_(x) - Returns the standard deviation of a set of numbers (vectorized, double)"
block|}
block|,
block|{
literal|"VectorUDAFVarDecimal"
block|,
literal|"VectorUDAFStdPopDecimal"
block|,
literal|"Math.sqrt(myagg.variance / (myagg.count))"
block|,
literal|"std,stddev,stddev_pop"
block|,
literal|"_FUNC_(x) - Returns the standard deviation of a set of numbers (vectorized, decimal)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFStdSampLong"
block|,
literal|"long"
block|,
literal|"Math.sqrt(myagg.variance / (myagg.count-1.0))"
block|,
literal|"stddev_samp"
block|,
literal|"_FUNC_(x) - Returns the sample standard deviation of a set of numbers (vectorized, long)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFStdSampDouble"
block|,
literal|"double"
block|,
literal|"Math.sqrt(myagg.variance / (myagg.count-1.0))"
block|,
literal|"stddev_samp"
block|,
literal|"_FUNC_(x) - Returns the sample standard deviation of a set of numbers (vectorized, double)"
block|}
block|,
block|{
literal|"VectorUDAFVarDecimal"
block|,
literal|"VectorUDAFStdSampDecimal"
block|,
literal|"Math.sqrt(myagg.variance / (myagg.count-1.0))"
block|,
literal|"stddev_samp"
block|,
literal|"_FUNC_(x) - Returns the sample standard deviation of a set of numbers (vectorized, decimal)"
block|}
block|,      }
decl_stmt|;
specifier|private
name|String
name|templateBaseDir
decl_stmt|;
specifier|private
name|String
name|buildDir
decl_stmt|;
specifier|private
name|String
name|expressionOutputDirectory
decl_stmt|;
specifier|private
name|String
name|expressionClassesDirectory
decl_stmt|;
specifier|private
name|String
name|expressionTemplateDirectory
decl_stmt|;
specifier|private
name|String
name|udafOutputDirectory
decl_stmt|;
specifier|private
name|String
name|udafClassesDirectory
decl_stmt|;
specifier|private
name|String
name|udafTemplateDirectory
decl_stmt|;
specifier|private
name|GenVectorTestCode
name|testCodeGen
decl_stmt|;
specifier|static
name|String
name|joinPath
parameter_list|(
name|String
modifier|...
name|parts
parameter_list|)
block|{
name|String
name|path
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|path
operator|+=
name|File
operator|.
name|separatorChar
operator|+
name|parts
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|String
name|templateBaseDir
parameter_list|,
name|String
name|buildDir
parameter_list|)
block|{
name|File
name|generationDirectory
init|=
operator|new
name|File
argument_list|(
name|templateBaseDir
argument_list|)
decl_stmt|;
name|String
name|buildPath
init|=
name|joinPath
argument_list|(
name|buildDir
argument_list|,
literal|"generated-sources"
argument_list|,
literal|"java"
argument_list|)
decl_stmt|;
name|String
name|compiledPath
init|=
name|joinPath
argument_list|(
name|buildDir
argument_list|,
literal|"classes"
argument_list|)
decl_stmt|;
name|String
name|expression
init|=
name|joinPath
argument_list|(
literal|"org"
argument_list|,
literal|"apache"
argument_list|,
literal|"hadoop"
argument_list|,
literal|"hive"
argument_list|,
literal|"ql"
argument_list|,
literal|"exec"
argument_list|,
literal|"vector"
argument_list|,
literal|"expressions"
argument_list|,
literal|"gen"
argument_list|)
decl_stmt|;
name|File
name|exprOutput
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|buildPath
argument_list|,
name|expression
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|exprClasses
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|compiledPath
argument_list|,
name|expression
argument_list|)
argument_list|)
decl_stmt|;
name|expressionOutputDirectory
operator|=
name|exprOutput
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|expressionClassesDirectory
operator|=
name|exprClasses
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|expressionTemplateDirectory
operator|=
name|joinPath
argument_list|(
name|generationDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"ExpressionTemplates"
argument_list|)
expr_stmt|;
name|String
name|udaf
init|=
name|joinPath
argument_list|(
literal|"org"
argument_list|,
literal|"apache"
argument_list|,
literal|"hadoop"
argument_list|,
literal|"hive"
argument_list|,
literal|"ql"
argument_list|,
literal|"exec"
argument_list|,
literal|"vector"
argument_list|,
literal|"expressions"
argument_list|,
literal|"aggregates"
argument_list|,
literal|"gen"
argument_list|)
decl_stmt|;
name|File
name|udafOutput
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|buildPath
argument_list|,
name|udaf
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|udafClasses
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|compiledPath
argument_list|,
name|udaf
argument_list|)
argument_list|)
decl_stmt|;
name|udafOutputDirectory
operator|=
name|udafOutput
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|udafClassesDirectory
operator|=
name|udafClasses
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|udafTemplateDirectory
operator|=
name|joinPath
argument_list|(
name|generationDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"UDAFTemplates"
argument_list|)
expr_stmt|;
name|File
name|testCodeOutput
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|buildDir
argument_list|,
literal|"generated-test-sources"
argument_list|,
literal|"java"
argument_list|,
literal|"org"
argument_list|,
literal|"apache"
argument_list|,
literal|"hadoop"
argument_list|,
literal|"hive"
argument_list|,
literal|"ql"
argument_list|,
literal|"exec"
argument_list|,
literal|"vector"
argument_list|,
literal|"expressions"
argument_list|,
literal|"gen"
argument_list|)
argument_list|)
decl_stmt|;
name|testCodeGen
operator|=
operator|new
name|GenVectorTestCode
argument_list|(
name|testCodeOutput
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|joinPath
argument_list|(
name|generationDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"TestTemplates"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param args    * @throws Exception    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|GenVectorCode
name|gen
init|=
operator|new
name|GenVectorCode
argument_list|()
decl_stmt|;
name|gen
operator|.
name|init
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|,
name|joinPath
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|,
literal|".."
argument_list|,
literal|".."
argument_list|,
literal|".."
argument_list|,
literal|".."
argument_list|,
literal|"build"
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|.
name|generate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
name|init
argument_list|(
name|templateBaseDir
argument_list|,
name|buildDir
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|generate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|generate
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Generating vector expression code"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
name|tdesc
range|:
name|templateExpansions
control|)
block|{
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnArithmeticScalar"
argument_list|)
operator|||
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnDivideScalar"
argument_list|)
condition|)
block|{
name|generateColumnArithmeticScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnArithmeticScalarDecimal"
argument_list|)
condition|)
block|{
name|generateColumnArithmeticScalarDecimal
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ScalarArithmeticColumnDecimal"
argument_list|)
condition|)
block|{
name|generateScalarArithmeticColumnDecimal
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnArithmeticColumnDecimal"
argument_list|)
condition|)
block|{
name|generateColumnArithmeticColumnDecimal
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnDivideScalarDecimal"
argument_list|)
condition|)
block|{
name|generateColumnDivideScalarDecimal
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ScalarDivideColumnDecimal"
argument_list|)
condition|)
block|{
name|generateScalarDivideColumnDecimal
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnDivideColumnDecimal"
argument_list|)
condition|)
block|{
name|generateColumnDivideColumnDecimal
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnCompareScalar"
argument_list|)
condition|)
block|{
name|generateColumnCompareScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ScalarCompareColumn"
argument_list|)
condition|)
block|{
name|generateScalarCompareColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"TimestampScalarCompareTimestampColumn"
argument_list|)
condition|)
block|{
name|generateTimestampScalarCompareTimestampColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ScalarCompareTimestampColumn"
argument_list|)
condition|)
block|{
name|generateScalarCompareTimestampColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"TimestampColumnCompareTimestampScalar"
argument_list|)
condition|)
block|{
name|generateTimestampColumnCompareTimestampScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"TimestampColumnCompareScalar"
argument_list|)
condition|)
block|{
name|generateTimestampColumnCompareScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterColumnCompareScalar"
argument_list|)
condition|)
block|{
name|generateFilterColumnCompareScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterScalarCompareColumn"
argument_list|)
condition|)
block|{
name|generateFilterScalarCompareColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterTimestampColumnCompareTimestampScalar"
argument_list|)
condition|)
block|{
name|generateFilterTimestampColumnCompareTimestampScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterTimestampColumnCompareScalar"
argument_list|)
condition|)
block|{
name|generateFilterTimestampColumnCompareScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterTimestampScalarCompareTimestampColumn"
argument_list|)
condition|)
block|{
name|generateFilterTimestampScalarCompareTimestampColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterScalarCompareTimestampColumn"
argument_list|)
condition|)
block|{
name|generateFilterScalarCompareTimestampColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterColumnBetween"
argument_list|)
condition|)
block|{
name|generateFilterColumnBetween
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ScalarArithmeticColumn"
argument_list|)
operator|||
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ScalarDivideColumn"
argument_list|)
condition|)
block|{
name|generateScalarArithmeticColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterColumnCompareColumn"
argument_list|)
condition|)
block|{
name|generateFilterColumnCompareColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnCompareColumn"
argument_list|)
condition|)
block|{
name|generateColumnCompareColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnArithmeticColumn"
argument_list|)
operator|||
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnDivideColumn"
argument_list|)
condition|)
block|{
name|generateColumnArithmeticColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnUnaryMinus"
argument_list|)
condition|)
block|{
name|generateColumnUnaryMinus
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnUnaryFunc"
argument_list|)
condition|)
block|{
name|generateColumnUnaryFunc
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"DecimalColumnUnaryFunc"
argument_list|)
condition|)
block|{
name|generateDecimalColumnUnaryFunc
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"VectorUDAFMinMax"
argument_list|)
condition|)
block|{
name|generateVectorUDAFMinMax
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"VectorUDAFMinMaxString"
argument_list|)
condition|)
block|{
name|generateVectorUDAFMinMaxString
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"VectorUDAFMinMaxDecimal"
argument_list|)
condition|)
block|{
name|generateVectorUDAFMinMaxDecimal
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"VectorUDAFSum"
argument_list|)
condition|)
block|{
name|generateVectorUDAFSum
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"VectorUDAFAvg"
argument_list|)
condition|)
block|{
name|generateVectorUDAFAvg
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"VectorUDAFVar"
argument_list|)
condition|)
block|{
name|generateVectorUDAFVar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"VectorUDAFVarDecimal"
argument_list|)
condition|)
block|{
name|generateVectorUDAFVarDecimal
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterStringGroupColumnCompareStringGroupScalarBase"
argument_list|)
condition|)
block|{
name|generateFilterStringGroupColumnCompareStringGroupScalarBase
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterStringGroupColumnCompareStringScalar"
argument_list|)
condition|)
block|{
name|generateFilterStringGroupColumnCompareStringScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterStringGroupColumnCompareTruncStringScalar"
argument_list|)
condition|)
block|{
name|generateFilterStringGroupColumnCompareTruncStringScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterStringColumnBetween"
argument_list|)
condition|)
block|{
name|generateFilterStringColumnBetween
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterTruncStringColumnBetween"
argument_list|)
condition|)
block|{
name|generateFilterTruncStringColumnBetween
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterDecimalColumnBetween"
argument_list|)
condition|)
block|{
name|generateFilterDecimalColumnBetween
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"StringGroupColumnCompareStringGroupScalarBase"
argument_list|)
condition|)
block|{
name|generateStringGroupColumnCompareStringGroupScalarBase
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"StringGroupColumnCompareStringScalar"
argument_list|)
condition|)
block|{
name|generateStringGroupColumnCompareStringScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"StringGroupColumnCompareTruncStringScalar"
argument_list|)
condition|)
block|{
name|generateStringGroupColumnCompareTruncStringScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterStringGroupScalarCompareStringGroupColumnBase"
argument_list|)
condition|)
block|{
name|generateFilterStringGroupScalarCompareStringGroupColumnBase
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterStringScalarCompareStringGroupColumn"
argument_list|)
condition|)
block|{
name|generateFilterStringScalarCompareStringGroupColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterTruncStringScalarCompareStringGroupColumn"
argument_list|)
condition|)
block|{
name|generateFilterTruncStringScalarCompareStringGroupColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"StringGroupScalarCompareStringGroupColumnBase"
argument_list|)
condition|)
block|{
name|generateStringGroupScalarCompareStringGroupColumnBase
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"StringScalarCompareStringGroupColumn"
argument_list|)
condition|)
block|{
name|generateStringScalarCompareStringGroupColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"TruncStringScalarCompareStringGroupColumn"
argument_list|)
condition|)
block|{
name|generateTruncStringScalarCompareStringGroupColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterStringGroupColumnCompareStringGroupColumn"
argument_list|)
condition|)
block|{
name|generateFilterStringGroupColumnCompareStringGroupColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"StringGroupColumnCompareStringGroupColumn"
argument_list|)
condition|)
block|{
name|generateStringGroupColumnCompareStringGroupColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"IfExprColumnColumn"
argument_list|)
condition|)
block|{
name|generateIfExprColumnColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"IfExprColumnScalar"
argument_list|)
condition|)
block|{
name|generateIfExprColumnScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"IfExprScalarColumn"
argument_list|)
condition|)
block|{
name|generateIfExprScalarColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"IfExprScalarScalar"
argument_list|)
condition|)
block|{
name|generateIfExprScalarScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterDecimalColumnCompareScalar"
argument_list|)
condition|)
block|{
name|generateFilterDecimalColumnCompareScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterDecimalScalarCompareColumn"
argument_list|)
condition|)
block|{
name|generateFilterDecimalScalarCompareColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterDecimalColumnCompareColumn"
argument_list|)
condition|)
block|{
name|generateFilterDecimalColumnCompareColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterDTIScalarCompareColumn"
argument_list|)
condition|)
block|{
name|generateFilterDTIScalarCompareColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterDTIColumnCompareScalar"
argument_list|)
condition|)
block|{
name|generateFilterDTIColumnCompareScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"DTIScalarCompareColumn"
argument_list|)
condition|)
block|{
name|generateDTIScalarCompareColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"DTIColumnCompareScalar"
argument_list|)
condition|)
block|{
name|generateDTIColumnCompareScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"DTIColumnArithmeticDTIScalarNoConvert"
argument_list|)
condition|)
block|{
name|generateColumnArithmeticScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"DTIScalarArithmeticDTIColumnNoConvert"
argument_list|)
condition|)
block|{
name|generateScalarArithmeticColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"DTIColumnArithmeticDTIColumnNoConvert"
argument_list|)
condition|)
block|{
name|generateColumnArithmeticColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnArithmeticColumnWithConvert"
argument_list|)
condition|)
block|{
name|generateColumnArithmeticColumnWithConvert
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ScalarArithmeticColumnWithConvert"
argument_list|)
condition|)
block|{
name|generateScalarArithmeticColumnWithConvert
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnArithmeticScalarWithConvert"
argument_list|)
condition|)
block|{
name|generateColumnArithmeticScalarWithConvert
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"DateTimeColumnArithmeticIntervalColumnWithConvert"
argument_list|)
condition|)
block|{
name|generateDateTimeColumnArithmeticIntervalColumnWithConvert
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"DateTimeScalarArithmeticIntervalColumnWithConvert"
argument_list|)
condition|)
block|{
name|generateDateTimeScalarArithmeticIntervalColumnWithConvert
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"DateTimeColumnArithmeticIntervalScalarWithConvert"
argument_list|)
condition|)
block|{
name|generateDateTimeColumnArithmeticIntervalScalarWithConvert
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"IntervalColumnArithmeticDateTimeColumnWithConvert"
argument_list|)
condition|)
block|{
name|generateDateTimeColumnArithmeticIntervalColumnWithConvert
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"IntervalScalarArithmeticDateTimeColumnWithConvert"
argument_list|)
condition|)
block|{
name|generateDateTimeScalarArithmeticIntervalColumnWithConvert
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"IntervalColumnArithmeticDateTimeScalarWithConvert"
argument_list|)
condition|)
block|{
name|generateDateTimeColumnArithmeticIntervalScalarWithConvert
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Generating vector expression test code"
argument_list|)
expr_stmt|;
name|testCodeGen
operator|.
name|generateTestSuites
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterStringColumnBetween
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|optionalNot
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterStringColumn"
operator|+
operator|(
name|optionalNot
operator|.
name|equals
argument_list|(
literal|"!"
argument_list|)
condition|?
literal|"Not"
else|:
literal|""
operator|)
operator|+
literal|"Between"
decl_stmt|;
comment|// Read the template into a string, expand it, and write it.
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OptionalNot>"
argument_list|,
name|optionalNot
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterTruncStringColumnBetween
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|truncStringTypeName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|truncStringHiveType
decl_stmt|;
name|String
name|truncStringHiveGetBytes
decl_stmt|;
if|if
condition|(
name|truncStringTypeName
operator|==
literal|"Char"
condition|)
block|{
name|truncStringHiveType
operator|=
literal|"HiveChar"
expr_stmt|;
name|truncStringHiveGetBytes
operator|=
literal|"getStrippedValue().getBytes()"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|truncStringTypeName
operator|==
literal|"VarChar"
condition|)
block|{
name|truncStringHiveType
operator|=
literal|"HiveVarchar"
expr_stmt|;
name|truncStringHiveGetBytes
operator|=
literal|"getValue().getBytes()"
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unsupported string type: "
operator|+
name|truncStringTypeName
argument_list|)
throw|;
block|}
name|String
name|optionalNot
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"Filter"
operator|+
name|truncStringTypeName
operator|+
literal|"Column"
operator|+
operator|(
name|optionalNot
operator|.
name|equals
argument_list|(
literal|"!"
argument_list|)
condition|?
literal|"Not"
else|:
literal|""
operator|)
operator|+
literal|"Between"
decl_stmt|;
comment|// Read the template into a string, expand it, and write it.
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TruncStringTypeName>"
argument_list|,
name|truncStringTypeName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TruncStringHiveType>"
argument_list|,
name|truncStringHiveType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TruncStringHiveGetBytes>"
argument_list|,
name|truncStringHiveGetBytes
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OptionalNot>"
argument_list|,
name|optionalNot
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterDecimalColumnBetween
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|optionalNot
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterDecimalColumn"
operator|+
operator|(
name|optionalNot
operator|.
name|equals
argument_list|(
literal|"!"
argument_list|)
condition|?
literal|"Not"
else|:
literal|""
operator|)
operator|+
literal|"Between"
decl_stmt|;
comment|// Read the template into a string, expand it, and write it.
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OptionalNot>"
argument_list|,
name|optionalNot
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterColumnBetween
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operandType
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|optionalNot
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"Filter"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Column"
operator|+
operator|(
name|optionalNot
operator|.
name|equals
argument_list|(
literal|"!"
argument_list|)
condition|?
literal|"Not"
else|:
literal|""
operator|)
operator|+
literal|"Between"
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|getColumnVectorType
argument_list|(
name|operandType
argument_list|)
decl_stmt|;
comment|// Read the template into a string, expand it, and write it.
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OptionalNot>"
argument_list|,
name|optionalNot
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnCompareColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|generateColumnCompareOperatorColumn
argument_list|(
name|tdesc
argument_list|,
literal|false
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateVectorUDAFMinMax
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|className
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|valueType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|descName
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|descValue
init|=
name|tdesc
index|[
literal|5
index|]
decl_stmt|;
name|String
name|columnType
init|=
name|getColumnVectorType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|writableType
init|=
name|getOutputWritableType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|inspectorType
init|=
name|getOutputObjectInspector
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|udafTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ValueType>"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionName>"
argument_list|,
name|descName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionValue>"
argument_list|,
name|descValue
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputType>"
argument_list|,
name|writableType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputTypeInspector>"
argument_list|,
name|inspectorType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|udafOutputDirectory
argument_list|,
name|udafClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateVectorUDAFMinMaxString
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|className
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|descName
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|descValue
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|udafTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionName>"
argument_list|,
name|descName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionValue>"
argument_list|,
name|descValue
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|udafOutputDirectory
argument_list|,
name|udafClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateVectorUDAFMinMaxDecimal
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|className
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|descName
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|descValue
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|udafTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionName>"
argument_list|,
name|descName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionValue>"
argument_list|,
name|descValue
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|udafOutputDirectory
argument_list|,
name|udafClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateVectorUDAFSum
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
comment|//template,<ClassName>,<ValueType>,<OutputType>,<OutputTypeInspector>
name|String
name|className
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|valueType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|columnType
init|=
name|getColumnVectorType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|writableType
init|=
name|getOutputWritableType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|inspectorType
init|=
name|getOutputObjectInspector
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|udafTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ValueType>"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputType>"
argument_list|,
name|writableType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputTypeInspector>"
argument_list|,
name|inspectorType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|udafOutputDirectory
argument_list|,
name|udafClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateVectorUDAFAvg
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|className
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|valueType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|columnType
init|=
name|getColumnVectorType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|udafTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ValueType>"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|udafOutputDirectory
argument_list|,
name|udafClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateVectorUDAFVar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|className
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|valueType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|varianceFormula
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|descriptionName
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|descriptionValue
init|=
name|tdesc
index|[
literal|5
index|]
decl_stmt|;
name|String
name|columnType
init|=
name|getColumnVectorType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|udafTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ValueType>"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VarianceFormula>"
argument_list|,
name|varianceFormula
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionName>"
argument_list|,
name|descriptionName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionValue>"
argument_list|,
name|descriptionValue
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|udafOutputDirectory
argument_list|,
name|udafClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateVectorUDAFVarDecimal
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|className
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|varianceFormula
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|descriptionName
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|descriptionValue
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|udafTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VarianceFormula>"
argument_list|,
name|varianceFormula
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionName>"
argument_list|,
name|descriptionName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionValue>"
argument_list|,
name|descriptionValue
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|udafOutputDirectory
argument_list|,
name|udafClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterStringGroupScalarCompareStringGroupColumnBase
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterStringGroupScalar"
operator|+
name|operatorName
operator|+
literal|"StringGroupColumnBase"
decl_stmt|;
comment|// Template expansion logic is the same for both column-scalar and scalar-column cases.
name|generateStringColumnCompareScalar
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterStringScalarCompareStringGroupColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterStringScalar"
operator|+
name|operatorName
operator|+
literal|"StringGroupColumn"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"FilterStringGroupScalar"
operator|+
name|operatorName
operator|+
literal|"StringGroupColumnBase"
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|String
name|compareOrEqual
decl_stmt|;
name|String
name|compareOrEqualReturnType
init|=
literal|"boolean"
decl_stmt|;
name|String
name|optionalCompare
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|operatorName
operator|.
name|equals
argument_list|(
literal|"Equal"
argument_list|)
condition|)
block|{
name|compareOrEqual
operator|=
literal|"StringExpr.equal"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operatorName
operator|.
name|equals
argument_list|(
literal|"NotEqual"
argument_list|)
condition|)
block|{
name|compareOrEqual
operator|=
literal|"!StringExpr.equal"
expr_stmt|;
block|}
else|else
block|{
name|compareOrEqual
operator|=
literal|"StringExpr.compare"
expr_stmt|;
name|compareOrEqualReturnType
operator|=
literal|"int"
expr_stmt|;
name|optionalCompare
operator|=
name|operatorSymbol
operator|+
literal|" 0"
expr_stmt|;
block|}
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CompareOrEqual>"
argument_list|,
name|compareOrEqual
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CompareOrEqualReturnType>"
argument_list|,
name|compareOrEqualReturnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OptionalCompare>"
argument_list|,
name|optionalCompare
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterTruncStringScalarCompareStringGroupColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|truncStringTypeName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"Filter"
operator|+
name|truncStringTypeName
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
literal|"StringGroupColumn"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"FilterStringGroupScalar"
operator|+
name|operatorName
operator|+
literal|"StringGroupColumnBase"
decl_stmt|;
name|generateStringCompareTruncStringScalar
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateStringGroupScalarCompareStringGroupColumnBase
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"StringGroupScalar"
operator|+
name|operatorName
operator|+
literal|"StringGroupColumnBase"
decl_stmt|;
comment|// Template expansion logic is the same for both column-scalar and scalar-column cases.
name|generateStringColumnCompareScalar
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateStringScalarCompareStringGroupColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"StringScalar"
operator|+
name|operatorName
operator|+
literal|"StringGroupColumn"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"StringGroupScalar"
operator|+
name|operatorName
operator|+
literal|"StringGroupColumnBase"
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|String
name|compareOrEqual
decl_stmt|;
name|String
name|compareOrEqualReturnType
init|=
literal|"boolean"
decl_stmt|;
name|String
name|optionalCompare
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|operatorName
operator|.
name|equals
argument_list|(
literal|"Equal"
argument_list|)
condition|)
block|{
name|compareOrEqual
operator|=
literal|"StringExpr.equal"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operatorName
operator|.
name|equals
argument_list|(
literal|"NotEqual"
argument_list|)
condition|)
block|{
name|compareOrEqual
operator|=
literal|"!StringExpr.equal"
expr_stmt|;
block|}
else|else
block|{
name|compareOrEqual
operator|=
literal|"StringExpr.compare"
expr_stmt|;
name|compareOrEqualReturnType
operator|=
literal|"int"
expr_stmt|;
name|optionalCompare
operator|=
name|operatorSymbol
operator|+
literal|" 0"
expr_stmt|;
block|}
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CompareOrEqual>"
argument_list|,
name|compareOrEqual
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CompareOrEqualReturnType>"
argument_list|,
name|compareOrEqualReturnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OptionalCompare>"
argument_list|,
name|optionalCompare
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateTruncStringScalarCompareStringGroupColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|truncStringTypeName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
name|truncStringTypeName
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
literal|"StringGroupColumn"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"StringGroupScalar"
operator|+
name|operatorName
operator|+
literal|"StringGroupColumnBase"
decl_stmt|;
name|generateStringCompareTruncStringScalar
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterStringGroupColumnCompareStringGroupScalarBase
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterStringGroupCol"
operator|+
name|operatorName
operator|+
literal|"StringGroupScalarBase"
decl_stmt|;
name|generateStringColumnCompareScalar
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterStringGroupColumnCompareStringScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterStringGroupCol"
operator|+
name|operatorName
operator|+
literal|"StringScalar"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"FilterStringGroupCol"
operator|+
name|operatorName
operator|+
literal|"StringGroupScalarBase"
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|String
name|compareOrEqual
decl_stmt|;
name|String
name|compareOrEqualReturnType
init|=
literal|"boolean"
decl_stmt|;
name|String
name|optionalCompare
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|operatorName
operator|.
name|equals
argument_list|(
literal|"Equal"
argument_list|)
condition|)
block|{
name|compareOrEqual
operator|=
literal|"StringExpr.equal"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operatorName
operator|.
name|equals
argument_list|(
literal|"NotEqual"
argument_list|)
condition|)
block|{
name|compareOrEqual
operator|=
literal|"!StringExpr.equal"
expr_stmt|;
block|}
else|else
block|{
name|compareOrEqual
operator|=
literal|"StringExpr.compare"
expr_stmt|;
name|compareOrEqualReturnType
operator|=
literal|"int"
expr_stmt|;
name|optionalCompare
operator|=
name|operatorSymbol
operator|+
literal|" 0"
expr_stmt|;
block|}
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CompareOrEqual>"
argument_list|,
name|compareOrEqual
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CompareOrEqualReturnType>"
argument_list|,
name|compareOrEqualReturnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OptionalCompare>"
argument_list|,
name|optionalCompare
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterStringGroupColumnCompareTruncStringScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|truncStringTypeName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterStringGroupCol"
operator|+
name|operatorName
operator|+
name|truncStringTypeName
operator|+
literal|"Scalar"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"FilterStringGroupCol"
operator|+
name|operatorName
operator|+
literal|"StringGroupScalarBase"
decl_stmt|;
name|generateStringCompareTruncStringScalar
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateStringGroupColumnCompareStringGroupScalarBase
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"StringGroupCol"
operator|+
name|operatorName
operator|+
literal|"StringGroupScalarBase"
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|String
name|compareOrEqual
decl_stmt|;
name|String
name|compareOrEqualReturnType
init|=
literal|"boolean"
decl_stmt|;
name|String
name|optionalCompare
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|operatorName
operator|.
name|equals
argument_list|(
literal|"Equal"
argument_list|)
condition|)
block|{
name|compareOrEqual
operator|=
literal|"StringExpr.equal"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operatorName
operator|.
name|equals
argument_list|(
literal|"NotEqual"
argument_list|)
condition|)
block|{
name|compareOrEqual
operator|=
literal|"!StringExpr.equal"
expr_stmt|;
block|}
else|else
block|{
name|compareOrEqual
operator|=
literal|"StringExpr.compare"
expr_stmt|;
name|compareOrEqualReturnType
operator|=
literal|"int"
expr_stmt|;
name|optionalCompare
operator|=
name|operatorSymbol
operator|+
literal|" 0"
expr_stmt|;
block|}
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CompareOrEqual>"
argument_list|,
name|compareOrEqual
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CompareOrEqualReturnType>"
argument_list|,
name|compareOrEqualReturnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OptionalCompare>"
argument_list|,
name|optionalCompare
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateStringGroupColumnCompareStringScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"StringGroupCol"
operator|+
name|operatorName
operator|+
literal|"StringScalar"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"StringGroupCol"
operator|+
name|operatorName
operator|+
literal|"StringGroupScalarBase"
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|String
name|compareOrEqual
decl_stmt|;
name|String
name|compareOrEqualReturnType
init|=
literal|"boolean"
decl_stmt|;
name|String
name|optionalCompare
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|operatorName
operator|.
name|equals
argument_list|(
literal|"Equal"
argument_list|)
condition|)
block|{
name|compareOrEqual
operator|=
literal|"StringExpr.equal"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operatorName
operator|.
name|equals
argument_list|(
literal|"NotEqual"
argument_list|)
condition|)
block|{
name|compareOrEqual
operator|=
literal|"!StringExpr.equal"
expr_stmt|;
block|}
else|else
block|{
name|compareOrEqual
operator|=
literal|"StringExpr.compare"
expr_stmt|;
name|compareOrEqualReturnType
operator|=
literal|"int"
expr_stmt|;
name|optionalCompare
operator|=
name|operatorSymbol
operator|+
literal|" 0"
expr_stmt|;
block|}
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CompareOrEqual>"
argument_list|,
name|compareOrEqual
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CompareOrEqualReturnType>"
argument_list|,
name|compareOrEqualReturnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OptionalCompare>"
argument_list|,
name|optionalCompare
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateStringGroupColumnCompareTruncStringScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|truncStringTypeName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"StringGroupCol"
operator|+
name|operatorName
operator|+
name|truncStringTypeName
operator|+
literal|"Scalar"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"StringGroupCol"
operator|+
name|operatorName
operator|+
literal|"StringGroupScalarBase"
decl_stmt|;
name|generateStringCompareTruncStringScalar
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterStringGroupColumnCompareStringGroupColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterStringGroupCol"
operator|+
name|operatorName
operator|+
literal|"StringGroupColumn"
decl_stmt|;
name|generateStringColumnCompareScalar
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateStringGroupColumnCompareStringGroupColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"StringGroupCol"
operator|+
name|operatorName
operator|+
literal|"StringGroupColumn"
decl_stmt|;
name|generateStringColumnCompareScalar
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateStringColumnCompareScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|String
name|compareOrEqual
decl_stmt|;
name|String
name|compareOrEqualReturnType
init|=
literal|"boolean"
decl_stmt|;
name|String
name|optionalCompare
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|operatorName
operator|.
name|equals
argument_list|(
literal|"Equal"
argument_list|)
condition|)
block|{
name|compareOrEqual
operator|=
literal|"StringExpr.equal"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operatorName
operator|.
name|equals
argument_list|(
literal|"NotEqual"
argument_list|)
condition|)
block|{
name|compareOrEqual
operator|=
literal|"!StringExpr.equal"
expr_stmt|;
block|}
else|else
block|{
name|compareOrEqual
operator|=
literal|"StringExpr.compare"
expr_stmt|;
name|compareOrEqualReturnType
operator|=
literal|"int"
expr_stmt|;
name|optionalCompare
operator|=
name|operatorSymbol
operator|+
literal|" 0"
expr_stmt|;
block|}
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CompareOrEqual>"
argument_list|,
name|compareOrEqual
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CompareOrEqualReturnType>"
argument_list|,
name|compareOrEqualReturnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OptionalCompare>"
argument_list|,
name|optionalCompare
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateStringCompareTruncStringScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|baseClassName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|truncStringTypeName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|truncStringHiveType
decl_stmt|;
name|String
name|truncStringHiveGetBytes
decl_stmt|;
if|if
condition|(
name|truncStringTypeName
operator|==
literal|"Char"
condition|)
block|{
name|truncStringHiveType
operator|=
literal|"HiveChar"
expr_stmt|;
name|truncStringHiveGetBytes
operator|=
literal|"getStrippedValue().getBytes()"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|truncStringTypeName
operator|==
literal|"VarChar"
condition|)
block|{
name|truncStringHiveType
operator|=
literal|"HiveVarchar"
expr_stmt|;
name|truncStringHiveGetBytes
operator|=
literal|"getValue().getBytes()"
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unsupported string type: "
operator|+
name|truncStringTypeName
argument_list|)
throw|;
block|}
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TruncStringTypeName>"
argument_list|,
name|truncStringTypeName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TruncStringHiveType>"
argument_list|,
name|truncStringHiveType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TruncStringHiveGetBytes>"
argument_list|,
name|truncStringHiveGetBytes
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterColumnCompareColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"Filter"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|generateColumnCompareOperatorColumn
argument_list|(
name|tdesc
argument_list|,
literal|true
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnUnaryMinus
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operandType
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|inputColumnVectorType
decl_stmt|;
name|String
name|returnType
init|=
name|operandType
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"ColUnaryMinus"
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|String
name|vectorExprArgType
init|=
name|operandType
decl_stmt|;
if|if
condition|(
name|operandType
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
comment|// interval types can use long version
name|vectorExprArgType
operator|=
literal|"int_interval_family"
expr_stmt|;
block|}
comment|// Expand, and write result
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType>"
argument_list|,
name|vectorExprArgType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateIfExprColumnColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operandType
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|inputColumnVectorType
decl_stmt|;
name|String
name|returnType
init|=
name|operandType
decl_stmt|;
name|String
name|className
init|=
literal|"IfExpr"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Column"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|expressionOutputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|String
name|vectorExprArgType
init|=
name|operandType
decl_stmt|;
comment|// Toss in timestamp and date.
if|if
condition|(
name|operandType
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
comment|// Let comparisons occur for DATE and TIMESTAMP, too.
name|vectorExprArgType
operator|=
literal|"int_datetime_interval_family"
expr_stmt|;
block|}
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType>"
argument_list|,
name|vectorExprArgType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateIfExprColumnScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType3
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|arg2ColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType2
argument_list|,
name|operandType3
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|className
init|=
literal|"IfExpr"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType3
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|expressionOutputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<Arg2ColumnVectorType>"
argument_list|,
name|arg2ColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType3>"
argument_list|,
name|operandType3
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|String
name|vectorExprArgType2
init|=
name|operandType2
decl_stmt|;
name|String
name|vectorExprArgType3
init|=
name|operandType3
decl_stmt|;
comment|// Toss in timestamp and date.
if|if
condition|(
name|operandType2
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
operator|&&
name|operandType3
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|vectorExprArgType2
operator|=
literal|"int_datetime_interval_family"
expr_stmt|;
name|vectorExprArgType3
operator|=
literal|"int_datetime_interval_family"
expr_stmt|;
block|}
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType2>"
argument_list|,
name|vectorExprArgType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType3>"
argument_list|,
name|vectorExprArgType3
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateIfExprScalarColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType3
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|arg3ColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType3
argument_list|)
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType2
argument_list|,
name|operandType3
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|className
init|=
literal|"IfExpr"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType3
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|expressionOutputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<Arg3ColumnVectorType>"
argument_list|,
name|arg3ColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType3>"
argument_list|,
name|operandType3
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|String
name|vectorExprArgType2
init|=
name|operandType2
decl_stmt|;
name|String
name|vectorExprArgType3
init|=
name|operandType3
decl_stmt|;
comment|// Toss in timestamp and date.
if|if
condition|(
name|operandType2
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
operator|&&
name|operandType3
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|vectorExprArgType2
operator|=
literal|"int_datetime_interval_family"
expr_stmt|;
name|vectorExprArgType3
operator|=
literal|"int_datetime_interval_family"
expr_stmt|;
block|}
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType2>"
argument_list|,
name|vectorExprArgType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType3>"
argument_list|,
name|vectorExprArgType3
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateIfExprScalarScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType3
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|arg3ColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType3
argument_list|)
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType2
argument_list|,
name|operandType3
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|className
init|=
literal|"IfExpr"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType3
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|expressionOutputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType3>"
argument_list|,
name|operandType3
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|String
name|vectorExprArgType2
init|=
name|operandType2
decl_stmt|;
name|String
name|vectorExprArgType3
init|=
name|operandType3
decl_stmt|;
comment|// Toss in timestamp and date.
if|if
condition|(
name|operandType2
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
operator|&&
name|operandType3
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|vectorExprArgType2
operator|=
literal|"int_datetime_interval_family"
expr_stmt|;
name|vectorExprArgType3
operator|=
literal|"int_datetime_interval_family"
expr_stmt|;
block|}
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType2>"
argument_list|,
name|vectorExprArgType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType3>"
argument_list|,
name|vectorExprArgType3
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
comment|// template,<ClassNamePrefix>,<ReturnType>,<FuncName>
specifier|private
name|void
name|generateDecimalColumnUnaryFunc
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|classNamePrefix
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|returnType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType
init|=
literal|"decimal"
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|classNamePrefix
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"To"
operator|+
name|getCamelCaseType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|String
name|funcName
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
comment|// Expand, and write result
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<FuncName>"
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
comment|// template,<ClassNamePrefix>,<ReturnType>,<OperandType>,<FuncName>,<OperandCast>,<ResultCast>
comment|//<Cleanup><VectorExprArgType>
specifier|private
name|void
name|generateColumnUnaryFunc
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|classNamePrefix
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType
argument_list|)
decl_stmt|;
name|String
name|returnType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|classNamePrefix
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"To"
operator|+
name|getCamelCaseType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|String
name|funcName
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|operandCast
init|=
name|tdesc
index|[
literal|5
index|]
decl_stmt|;
name|String
name|resultCast
init|=
name|tdesc
index|[
literal|6
index|]
decl_stmt|;
name|String
name|cleanup
init|=
name|tdesc
index|[
literal|7
index|]
decl_stmt|;
name|String
name|vectorExprArgType
init|=
name|tdesc
index|[
literal|8
index|]
operator|.
name|isEmpty
argument_list|()
condition|?
name|operandType
else|:
name|tdesc
index|[
literal|8
index|]
decl_stmt|;
comment|// Expand, and write result
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<FuncName>"
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandCast>"
argument_list|,
name|operandCast
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ResultCast>"
argument_list|,
name|resultCast
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<Cleanup>"
argument_list|,
name|cleanup
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType>"
argument_list|,
name|vectorExprArgType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnArithmeticColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType1
argument_list|,
name|operandType2
argument_list|)
decl_stmt|;
name|generateColumnArithmeticOperatorColumn
argument_list|(
name|tdesc
argument_list|,
name|returnType
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterColumnCompareScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"Filter"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|generateColumnCompareOperatorScalar
argument_list|(
name|tdesc
argument_list|,
literal|true
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterScalarCompareColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"Filter"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|generateScalarCompareOperatorColumn
argument_list|(
name|tdesc
argument_list|,
literal|true
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnCompareScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|generateColumnCompareOperatorScalar
argument_list|(
name|tdesc
argument_list|,
literal|false
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateScalarCompareColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|generateScalarCompareOperatorColumn
argument_list|(
name|tdesc
argument_list|,
literal|false
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnCompareOperatorColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|boolean
name|filter
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|inputColumnVectorType1
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType2
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|returnType
init|=
literal|"long"
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType1>"
argument_list|,
name|inputColumnVectorType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType2>"
argument_list|,
name|inputColumnVectorType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CamelReturnType>"
argument_list|,
name|getCamelCaseType
argument_list|(
name|returnType
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|vectorExprArgType1
init|=
name|operandType1
decl_stmt|;
name|String
name|vectorExprArgType2
init|=
name|operandType2
decl_stmt|;
comment|// For column to column only, we toss in timestamp and date.
comment|// But {timestamp|date} and scalar must be handled separately.
if|if
condition|(
name|operandType1
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
operator|&&
name|operandType2
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
comment|// Let comparisons occur for DATE and TIMESTAMP, too.
name|vectorExprArgType1
operator|=
literal|"int_datetime_interval_family"
expr_stmt|;
name|vectorExprArgType2
operator|=
literal|"int_datetime_interval_family"
expr_stmt|;
block|}
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType1>"
argument_list|,
name|vectorExprArgType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType2>"
argument_list|,
name|vectorExprArgType2
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
condition|)
block|{
name|testCodeGen
operator|.
name|addColumnColumnFilterTestCases
argument_list|(
name|className
argument_list|,
name|inputColumnVectorType1
argument_list|,
name|inputColumnVectorType2
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testCodeGen
operator|.
name|addColumnColumnOperationTestCases
argument_list|(
name|className
argument_list|,
name|inputColumnVectorType1
argument_list|,
name|inputColumnVectorType2
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|generateTimestampScalarCompareTimestampColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"TimestampScalar"
operator|+
name|operatorName
operator|+
literal|"TimestampColumn"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"LongScalar"
operator|+
name|operatorName
operator|+
literal|"LongColumn"
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateTimestampColumnCompareTimestampScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"TimestampCol"
operator|+
name|operatorName
operator|+
literal|"TimestampScalar"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"LongCol"
operator|+
name|operatorName
operator|+
literal|"LongScalar"
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterTimestampColumnCompareTimestampScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterTimestampCol"
operator|+
name|operatorName
operator|+
literal|"TimestampScalar"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"FilterLongCol"
operator|+
name|operatorName
operator|+
literal|"LongScalar"
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterTimestampScalarCompareTimestampColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterTimestampScalar"
operator|+
name|operatorName
operator|+
literal|"TimestampColumn"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"FilterLongScalar"
operator|+
name|operatorName
operator|+
literal|"LongColumn"
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|timestampScalarConversion
parameter_list|(
name|String
name|operandType
parameter_list|)
block|{
if|if
condition|(
name|operandType
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
return|return
literal|"secondsToNanoseconds"
return|;
block|}
elseif|else
if|if
condition|(
name|operandType
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
literal|"doubleToNanoseconds"
return|;
block|}
else|else
block|{
return|return
literal|"unknown"
return|;
block|}
block|}
specifier|private
name|void
name|generateScalarCompareTimestampColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
literal|"TimestampColumn"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"LongScalar"
operator|+
name|operatorName
operator|+
literal|"LongColumn"
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TimestampScalarConversion>"
argument_list|,
name|timestampScalarConversion
argument_list|(
name|operandType
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateTimestampColumnCompareScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"TimestampCol"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"LongCol"
operator|+
name|operatorName
operator|+
literal|"LongScalar"
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TimestampScalarConversion>"
argument_list|,
name|timestampScalarConversion
argument_list|(
name|operandType
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterTimestampColumnCompareScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterTimestampCol"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"FilterLongCol"
operator|+
name|operatorName
operator|+
literal|"LongScalar"
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TimestampScalarConversion>"
argument_list|,
name|timestampScalarConversion
argument_list|(
name|operandType
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterScalarCompareTimestampColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"Filter"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
literal|"TimestampColumn"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"FilterLongScalar"
operator|+
name|operatorName
operator|+
literal|"LongColumn"
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TimestampScalarConversion>"
argument_list|,
name|timestampScalarConversion
argument_list|(
name|operandType
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnArithmeticOperatorColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|String
name|returnType
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType1
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType2
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType1>"
argument_list|,
name|inputColumnVectorType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType2>"
argument_list|,
name|inputColumnVectorType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorName>"
argument_list|,
name|operatorName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CamelReturnType>"
argument_list|,
name|getCamelCaseType
argument_list|(
name|returnType
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
name|testCodeGen
operator|.
name|addColumnColumnOperationTestCases
argument_list|(
name|className
argument_list|,
name|inputColumnVectorType1
argument_list|,
name|inputColumnVectorType2
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnCompareOperatorScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|boolean
name|filter
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|returnType
init|=
literal|"long"
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CamelReturnType>"
argument_list|,
name|getCamelCaseType
argument_list|(
name|returnType
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|vectorExprArgType1
init|=
name|operandType1
decl_stmt|;
name|String
name|vectorExprArgType2
init|=
name|operandType2
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType1>"
argument_list|,
name|vectorExprArgType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType2>"
argument_list|,
name|vectorExprArgType2
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
condition|)
block|{
name|testCodeGen
operator|.
name|addColumnScalarFilterTestCases
argument_list|(
literal|true
argument_list|,
name|className
argument_list|,
name|inputColumnVectorType
argument_list|,
name|operandType2
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testCodeGen
operator|.
name|addColumnScalarOperationTestCases
argument_list|(
literal|true
argument_list|,
name|className
argument_list|,
name|inputColumnVectorType
argument_list|,
name|outputColumnVectorType
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|generateColumnArithmeticOperatorScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|String
name|returnType
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorName>"
argument_list|,
name|operatorName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
name|String
name|testScalarType
init|=
name|operandType2
decl_stmt|;
if|if
condition|(
name|isDateTimeIntervalType
argument_list|(
name|testScalarType
argument_list|)
condition|)
block|{
name|testScalarType
operator|=
literal|"long"
expr_stmt|;
block|}
name|testCodeGen
operator|.
name|addColumnScalarOperationTestCases
argument_list|(
literal|true
argument_list|,
name|className
argument_list|,
name|inputColumnVectorType
argument_list|,
name|outputColumnVectorType
argument_list|,
name|testScalarType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateScalarCompareOperatorColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|boolean
name|filter
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|returnType
init|=
literal|"long"
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CamelReturnType>"
argument_list|,
name|getCamelCaseType
argument_list|(
name|returnType
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|vectorExprArgType1
init|=
name|operandType1
decl_stmt|;
name|String
name|vectorExprArgType2
init|=
name|operandType2
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType1>"
argument_list|,
name|vectorExprArgType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType2>"
argument_list|,
name|vectorExprArgType2
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
condition|)
block|{
name|testCodeGen
operator|.
name|addColumnScalarFilterTestCases
argument_list|(
literal|false
argument_list|,
name|className
argument_list|,
name|inputColumnVectorType
argument_list|,
name|operandType1
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testCodeGen
operator|.
name|addColumnScalarOperationTestCases
argument_list|(
literal|false
argument_list|,
name|className
argument_list|,
name|inputColumnVectorType
argument_list|,
name|outputColumnVectorType
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|generateScalarArithmeticOperatorColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|String
name|returnType
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
operator|==
literal|null
condition|?
literal|"long"
else|:
name|returnType
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorName>"
argument_list|,
name|operatorName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CamelReturnType>"
argument_list|,
name|getCamelCaseType
argument_list|(
name|returnType
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
name|String
name|testScalarType
init|=
name|operandType1
decl_stmt|;
if|if
condition|(
name|isDateTimeIntervalType
argument_list|(
name|testScalarType
argument_list|)
condition|)
block|{
name|testScalarType
operator|=
literal|"long"
expr_stmt|;
block|}
name|testCodeGen
operator|.
name|addColumnScalarOperationTestCases
argument_list|(
literal|false
argument_list|,
name|className
argument_list|,
name|inputColumnVectorType
argument_list|,
name|outputColumnVectorType
argument_list|,
name|testScalarType
argument_list|)
expr_stmt|;
block|}
comment|//Binary arithmetic operator
specifier|private
name|void
name|generateColumnArithmeticScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType1
argument_list|,
name|operandType2
argument_list|)
decl_stmt|;
name|generateColumnArithmeticOperatorScalar
argument_list|(
name|tdesc
argument_list|,
name|returnType
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnArithmeticScalarDecimal
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"DecimalCol"
operator|+
name|operatorName
operator|+
literal|"DecimalScalar"
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<Operator>"
argument_list|,
name|operatorName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateScalarArithmeticColumnDecimal
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"DecimalScalar"
operator|+
name|operatorName
operator|+
literal|"DecimalColumn"
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<Operator>"
argument_list|,
name|operatorName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnArithmeticColumnDecimal
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"DecimalCol"
operator|+
name|operatorName
operator|+
literal|"DecimalColumn"
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<Operator>"
argument_list|,
name|operatorName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnDivideScalarDecimal
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"DecimalCol"
operator|+
name|getInitialCapWord
argument_list|(
name|operatorName
argument_list|)
operator|+
literal|"DecimalScalar"
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<Operator>"
argument_list|,
name|operatorName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateScalarDivideColumnDecimal
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"DecimalScalar"
operator|+
name|getInitialCapWord
argument_list|(
name|operatorName
argument_list|)
operator|+
literal|"DecimalColumn"
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<Operator>"
argument_list|,
name|operatorName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnDivideColumnDecimal
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"DecimalCol"
operator|+
name|getInitialCapWord
argument_list|(
name|operatorName
argument_list|)
operator|+
literal|"DecimalColumn"
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<Operator>"
argument_list|,
name|operatorName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateScalarArithmeticColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType1
argument_list|,
name|operandType2
argument_list|)
decl_stmt|;
name|generateScalarArithmeticOperatorColumn
argument_list|(
name|tdesc
argument_list|,
name|returnType
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterDecimalColumnCompareScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterDecimalCol"
operator|+
name|operatorName
operator|+
literal|"DecimalScalar"
decl_stmt|;
name|generateDecimalColumnCompare
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterDecimalScalarCompareColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterDecimalScalar"
operator|+
name|operatorName
operator|+
literal|"DecimalColumn"
decl_stmt|;
name|generateDecimalColumnCompare
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterDecimalColumnCompareColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterDecimalCol"
operator|+
name|operatorName
operator|+
literal|"DecimalColumn"
decl_stmt|;
name|generateDecimalColumnCompare
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateDecimalColumnCompare
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
comment|// Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
comment|// TODO: These can eventually be used to replace generateTimestampScalarCompareTimestampColumn()
specifier|private
name|void
name|generateDTIScalarCompareColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"LongScalar"
operator|+
name|operatorName
operator|+
literal|"LongColumn"
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterDTIScalarCompareColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"Filter"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"FilterLongScalar"
operator|+
name|operatorName
operator|+
literal|"LongColumn"
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateDTIColumnCompareScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"LongCol"
operator|+
name|operatorName
operator|+
literal|"LongScalar"
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterDTIColumnCompareScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"Filter"
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|String
name|baseClassName
init|=
literal|"FilterLongCol"
operator|+
name|operatorName
operator|+
literal|"LongScalar"
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<BaseClassName>"
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorExprArgType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnArithmeticColumnWithConvert
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|typeConversion1
init|=
name|tdesc
index|[
literal|5
index|]
decl_stmt|;
name|String
name|typeConversion2
init|=
name|tdesc
index|[
literal|6
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType1
argument_list|,
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType1
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType2
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
comment|// For date/timestamp/interval, this should be "long"
name|String
name|vectorOperandType1
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|inputColumnVectorType1
argument_list|)
decl_stmt|;
name|String
name|vectorOperandType2
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|inputColumnVectorType2
argument_list|)
decl_stmt|;
name|String
name|vectorReturnType
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|outputColumnVectorType
argument_list|)
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType1>"
argument_list|,
name|inputColumnVectorType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType2>"
argument_list|,
name|inputColumnVectorType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorName>"
argument_list|,
name|operatorName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorOperandType1>"
argument_list|,
name|vectorOperandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorOperandType2>"
argument_list|,
name|vectorOperandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorReturnType>"
argument_list|,
name|vectorReturnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TypeConversion1>"
argument_list|,
name|typeConversion1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TypeConversion2>"
argument_list|,
name|typeConversion2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CamelReturnType>"
argument_list|,
name|getCamelCaseType
argument_list|(
name|vectorReturnType
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
name|testCodeGen
operator|.
name|addColumnColumnOperationTestCases
argument_list|(
name|className
argument_list|,
name|inputColumnVectorType1
argument_list|,
name|inputColumnVectorType2
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateScalarArithmeticColumnWithConvert
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|typeConversion1
init|=
name|tdesc
index|[
literal|5
index|]
decl_stmt|;
name|String
name|typeConversion2
init|=
name|tdesc
index|[
literal|6
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType1
argument_list|,
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
operator|==
literal|null
condition|?
literal|"long"
else|:
name|returnType
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType1
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType2
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
comment|// For date/timestamp/interval, this should be "long"
name|String
name|vectorOperandType1
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|inputColumnVectorType1
argument_list|)
decl_stmt|;
name|String
name|vectorOperandType2
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|inputColumnVectorType2
argument_list|)
decl_stmt|;
name|String
name|vectorReturnType
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|outputColumnVectorType
argument_list|)
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorName>"
argument_list|,
name|operatorName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorOperandType1>"
argument_list|,
name|vectorOperandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorOperandType2>"
argument_list|,
name|vectorOperandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorReturnType>"
argument_list|,
name|vectorReturnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TypeConversion1>"
argument_list|,
name|typeConversion1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TypeConversion2>"
argument_list|,
name|typeConversion2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CamelReturnType>"
argument_list|,
name|getCamelCaseType
argument_list|(
name|vectorReturnType
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
name|String
name|testScalarType
init|=
name|operandType1
decl_stmt|;
if|if
condition|(
name|isDateTimeIntervalType
argument_list|(
name|testScalarType
argument_list|)
condition|)
block|{
name|testScalarType
operator|=
literal|"long"
expr_stmt|;
block|}
name|testCodeGen
operator|.
name|addColumnScalarOperationTestCases
argument_list|(
literal|false
argument_list|,
name|className
argument_list|,
name|inputColumnVectorType
argument_list|,
name|outputColumnVectorType
argument_list|,
name|testScalarType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnArithmeticScalarWithConvert
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|typeConversion1
init|=
name|tdesc
index|[
literal|5
index|]
decl_stmt|;
name|String
name|typeConversion2
init|=
name|tdesc
index|[
literal|6
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType1
argument_list|,
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType1
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType2
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
comment|// For date/timestamp/interval, this should be "long"
name|String
name|vectorOperandType1
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|inputColumnVectorType1
argument_list|)
decl_stmt|;
name|String
name|vectorOperandType2
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|inputColumnVectorType2
argument_list|)
decl_stmt|;
name|String
name|vectorReturnType
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|outputColumnVectorType
argument_list|)
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorName>"
argument_list|,
name|operatorName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorOperandType1>"
argument_list|,
name|vectorOperandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorOperandType2>"
argument_list|,
name|vectorOperandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorReturnType>"
argument_list|,
name|vectorReturnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TypeConversion1>"
argument_list|,
name|typeConversion1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TypeConversion2>"
argument_list|,
name|typeConversion2
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
name|String
name|testScalarType
init|=
name|operandType2
decl_stmt|;
if|if
condition|(
name|isDateTimeIntervalType
argument_list|(
name|testScalarType
argument_list|)
condition|)
block|{
name|testScalarType
operator|=
literal|"long"
expr_stmt|;
block|}
name|testCodeGen
operator|.
name|addColumnScalarOperationTestCases
argument_list|(
literal|true
argument_list|,
name|className
argument_list|,
name|inputColumnVectorType
argument_list|,
name|outputColumnVectorType
argument_list|,
name|testScalarType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateDateTimeColumnArithmeticIntervalColumnWithConvert
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|typeConversion
init|=
name|tdesc
index|[
literal|5
index|]
decl_stmt|;
name|String
name|operatorFunction
init|=
name|tdesc
index|[
literal|6
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType1
argument_list|,
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType1
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType2
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
comment|// For date/timestamp/interval, this should be "long"
name|String
name|vectorOperandType1
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|inputColumnVectorType1
argument_list|)
decl_stmt|;
name|String
name|vectorOperandType2
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|inputColumnVectorType2
argument_list|)
decl_stmt|;
name|String
name|vectorReturnType
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|outputColumnVectorType
argument_list|)
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType1>"
argument_list|,
name|inputColumnVectorType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType2>"
argument_list|,
name|inputColumnVectorType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorName>"
argument_list|,
name|operatorName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorOperandType1>"
argument_list|,
name|vectorOperandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorOperandType2>"
argument_list|,
name|vectorOperandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorReturnType>"
argument_list|,
name|vectorReturnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TypeConversionToMillis>"
argument_list|,
name|typeConversion
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorFunction>"
argument_list|,
name|operatorFunction
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CamelReturnType>"
argument_list|,
name|getCamelCaseType
argument_list|(
name|vectorReturnType
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
name|testCodeGen
operator|.
name|addColumnColumnOperationTestCases
argument_list|(
name|className
argument_list|,
name|inputColumnVectorType1
argument_list|,
name|inputColumnVectorType2
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateDateTimeScalarArithmeticIntervalColumnWithConvert
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|typeConversion
init|=
name|tdesc
index|[
literal|5
index|]
decl_stmt|;
name|String
name|operatorFunction
init|=
name|tdesc
index|[
literal|6
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType1
argument_list|,
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
operator|==
literal|null
condition|?
literal|"long"
else|:
name|returnType
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType1
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType2
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
comment|// For date/timestamp/interval, this should be "long"
name|String
name|vectorOperandType1
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|inputColumnVectorType1
argument_list|)
decl_stmt|;
name|String
name|vectorOperandType2
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|inputColumnVectorType2
argument_list|)
decl_stmt|;
name|String
name|vectorReturnType
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|outputColumnVectorType
argument_list|)
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorName>"
argument_list|,
name|operatorName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorOperandType1>"
argument_list|,
name|vectorOperandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorOperandType2>"
argument_list|,
name|vectorOperandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorReturnType>"
argument_list|,
name|vectorReturnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TypeConversionToMillis>"
argument_list|,
name|typeConversion
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorFunction>"
argument_list|,
name|operatorFunction
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<CamelReturnType>"
argument_list|,
name|getCamelCaseType
argument_list|(
name|vectorReturnType
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
name|String
name|testScalarType
init|=
name|operandType1
decl_stmt|;
if|if
condition|(
name|isDateTimeIntervalType
argument_list|(
name|testScalarType
argument_list|)
condition|)
block|{
name|testScalarType
operator|=
literal|"long"
expr_stmt|;
block|}
name|testCodeGen
operator|.
name|addColumnScalarOperationTestCases
argument_list|(
literal|false
argument_list|,
name|className
argument_list|,
name|inputColumnVectorType
argument_list|,
name|outputColumnVectorType
argument_list|,
name|testScalarType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateDateTimeColumnArithmeticIntervalScalarWithConvert
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|typeConversion
init|=
name|tdesc
index|[
literal|5
index|]
decl_stmt|;
name|String
name|operatorFunction
init|=
name|tdesc
index|[
literal|6
index|]
decl_stmt|;
name|String
name|className
init|=
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType1
argument_list|,
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType1
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType2
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
comment|// For date/timestamp/interval, this should be "long"
name|String
name|vectorOperandType1
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|inputColumnVectorType1
argument_list|)
decl_stmt|;
name|String
name|vectorOperandType2
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|inputColumnVectorType2
argument_list|)
decl_stmt|;
name|String
name|vectorReturnType
init|=
name|this
operator|.
name|getVectorPrimitiveType
argument_list|(
name|outputColumnVectorType
argument_list|)
decl_stmt|;
comment|//Read the template into a string;
name|File
name|templateFile
init|=
operator|new
name|File
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|expressionTemplateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorName>"
argument_list|,
name|operatorName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorOperandType1>"
argument_list|,
name|vectorOperandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorOperandType2>"
argument_list|,
name|vectorOperandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VectorReturnType>"
argument_list|,
name|vectorReturnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<TypeConversionToMillis>"
argument_list|,
name|typeConversion
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorFunction>"
argument_list|,
name|operatorFunction
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|templateFile
operator|.
name|lastModified
argument_list|()
argument_list|,
name|expressionOutputDirectory
argument_list|,
name|expressionClassesDirectory
argument_list|,
name|className
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
name|String
name|testScalarType
init|=
name|operandType2
decl_stmt|;
if|if
condition|(
name|isDateTimeIntervalType
argument_list|(
name|testScalarType
argument_list|)
condition|)
block|{
name|testScalarType
operator|=
literal|"long"
expr_stmt|;
block|}
name|testCodeGen
operator|.
name|addColumnScalarOperationTestCases
argument_list|(
literal|true
argument_list|,
name|className
argument_list|,
name|inputColumnVectorType
argument_list|,
name|outputColumnVectorType
argument_list|,
name|testScalarType
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|isDateTimeIntervalType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|.
name|equals
argument_list|(
literal|"date"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"timestamp"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"interval_year_month"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"interval_day_time"
argument_list|)
operator|)
return|;
block|}
specifier|static
name|void
name|writeFile
parameter_list|(
name|long
name|templateTime
parameter_list|,
name|String
name|outputDir
parameter_list|,
name|String
name|classesDir
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|outputFile
init|=
operator|new
name|File
argument_list|(
name|outputDir
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
name|File
name|outputClass
init|=
operator|new
name|File
argument_list|(
name|classesDir
argument_list|,
name|className
operator|+
literal|".class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFile
operator|.
name|lastModified
argument_list|()
operator|>
name|templateTime
operator|&&
name|outputFile
operator|.
name|length
argument_list|()
operator|==
name|str
operator|.
name|length
argument_list|()
operator|&&
name|outputClass
operator|.
name|lastModified
argument_list|()
operator|>
name|templateTime
condition|)
block|{
comment|// best effort
return|return;
block|}
name|writeFile
argument_list|(
name|outputFile
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeFile
parameter_list|(
name|File
name|outputFile
parameter_list|,
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedWriter
name|w
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|outputFile
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|static
name|String
name|readFile
parameter_list|(
name|String
name|templateFile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readFile
argument_list|(
operator|new
name|File
argument_list|(
name|templateFile
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|String
name|readFile
parameter_list|(
name|File
name|templateFile
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|templateFile
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|String
name|getCamelCaseType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
return|return
literal|"Long"
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
literal|"Double"
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"decimal"
argument_list|)
condition|)
block|{
return|return
literal|"Decimal"
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"interval_year_month"
argument_list|)
condition|)
block|{
return|return
literal|"IntervalYearMonth"
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"interval_day_time"
argument_list|)
condition|)
block|{
return|return
literal|"IntervalDayTime"
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"timestamp"
argument_list|)
condition|)
block|{
return|return
literal|"Timestamp"
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"date"
argument_list|)
condition|)
block|{
return|return
literal|"Date"
return|;
block|}
else|else
block|{
return|return
name|type
return|;
block|}
block|}
comment|/**    * Return the argument with the first letter capitalized    */
specifier|private
specifier|static
name|String
name|getInitialCapWord
parameter_list|(
name|String
name|word
parameter_list|)
block|{
name|String
name|firstLetterAsCap
init|=
name|word
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
return|return
name|firstLetterAsCap
operator|+
name|word
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|ARITHMETIC_RETURN_TYPES
index|[]
index|[]
init|=
block|{
block|{
literal|"interval_year_month"
block|,
literal|"interval_year_month"
block|,
literal|"interval_year_month"
block|}
block|,
block|{
literal|"interval_year_month"
block|,
literal|"date"
block|,
literal|"date"
block|}
block|,
block|{
literal|"date"
block|,
literal|"interval_year_month"
block|,
literal|"date"
block|}
block|,
block|{
literal|"interval_year_month"
block|,
literal|"timestamp"
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"timestamp"
block|,
literal|"interval_year_month"
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"interval_day_time"
block|,
literal|"interval_day_time"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"interval_day_time"
block|,
literal|"date"
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"date"
block|,
literal|"interval_day_time"
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"interval_day_time"
block|,
literal|"timestamp"
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"timestamp"
block|,
literal|"interval_day_time"
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"date"
block|,
literal|"date"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"timestamp"
block|,
literal|"timestamp"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"timestamp"
block|,
literal|"date"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"date"
block|,
literal|"timestamp"
block|,
literal|"interval_day_time"
block|}
block|,
block|{
literal|"*"
block|,
literal|"double"
block|,
literal|"double"
block|}
block|,
block|{
literal|"double"
block|,
literal|"*"
block|,
literal|"double"
block|}
block|,   }
decl_stmt|;
specifier|private
name|String
name|getArithmeticReturnType
parameter_list|(
name|String
name|operandType1
parameter_list|,
name|String
name|operandType2
parameter_list|)
block|{
comment|/*     if (operandType1.equals("double") ||         operandType2.equals("double")) {       return "double";     } else if (operandType1.equals("interval_year_month")&&         operandType2.equals("interval_year_month")) {       return "interval_year_month";     } else if (operandType1.equals("interval_year_month")&&         operandType2.equals("date")) {       return "date";     } else if (operandType1.equals("date")&&         operandType2.equals("interval_year_month")) {       return "date";     } else if (operandType1.equals("interval_day_time")&&         operandType2.equals("interval_day_time")) {       return "interval_day_time";     } else {       return "long";     } */
for|for
control|(
name|String
index|[]
name|combination
range|:
name|ARITHMETIC_RETURN_TYPES
control|)
block|{
if|if
condition|(
operator|(
name|combination
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
operator|||
name|combination
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|operandType1
argument_list|)
operator|)
operator|&&
operator|(
name|combination
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
operator|||
name|combination
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|operandType2
argument_list|)
operator|)
condition|)
block|{
return|return
name|combination
index|[
literal|2
index|]
return|;
block|}
block|}
return|return
literal|"long"
return|;
block|}
specifier|private
name|String
name|getColumnVectorType
parameter_list|(
name|String
name|primitiveType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
literal|"DoubleColumnVector"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
operator|||
name|isDateTimeIntervalType
argument_list|(
name|primitiveType
argument_list|)
condition|)
block|{
return|return
literal|"LongColumnVector"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"decimal"
argument_list|)
condition|)
block|{
return|return
literal|"DecimalColumnVector"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
return|return
literal|"BytesColumnVector"
return|;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unimplemented primitive column vector type: "
operator|+
name|primitiveType
argument_list|)
throw|;
block|}
specifier|private
name|String
name|getVectorPrimitiveType
parameter_list|(
name|String
name|columnVectorType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|columnVectorType
operator|.
name|equals
argument_list|(
literal|"LongColumnVector"
argument_list|)
condition|)
block|{
return|return
literal|"long"
return|;
block|}
elseif|else
if|if
condition|(
name|columnVectorType
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
literal|"double"
return|;
block|}
elseif|else
if|if
condition|(
name|columnVectorType
operator|.
name|equals
argument_list|(
literal|"DecimalColumnVector"
argument_list|)
condition|)
block|{
return|return
literal|"decimal"
return|;
block|}
elseif|else
if|if
condition|(
name|columnVectorType
operator|.
name|equals
argument_list|(
literal|"BytesColumnVector"
argument_list|)
condition|)
block|{
return|return
literal|"string"
return|;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Could not determine primitive type for column vector type: "
operator|+
name|columnVectorType
argument_list|)
throw|;
block|}
specifier|private
name|String
name|getOutputWritableType
parameter_list|(
name|String
name|primitiveType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
return|return
literal|"LongWritable"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
literal|"DoubleWritable"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"decimal"
argument_list|)
condition|)
block|{
return|return
literal|"HiveDecimalWritable"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"interval_year_month"
argument_list|)
condition|)
block|{
return|return
literal|"HiveIntervalYearMonthWritable"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"interval_day_time"
argument_list|)
condition|)
block|{
return|return
literal|"HiveIntervalDayTimeWritable"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"date"
argument_list|)
condition|)
block|{
return|return
literal|"HiveDateWritable"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"timestamp"
argument_list|)
condition|)
block|{
return|return
literal|"HiveTimestampWritable"
return|;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unimplemented primitive output writable: "
operator|+
name|primitiveType
argument_list|)
throw|;
block|}
specifier|private
name|String
name|getOutputObjectInspector
parameter_list|(
name|String
name|primitiveType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
return|return
literal|"PrimitiveObjectInspectorFactory.writableLongObjectInspector"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
literal|"PrimitiveObjectInspectorFactory.writableDoubleObjectInspector"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"decimal"
argument_list|)
condition|)
block|{
return|return
literal|"PrimitiveObjectInspectorFactory.writableHiveDecimalObjectInspector"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"interval_year_month"
argument_list|)
condition|)
block|{
return|return
literal|"PrimitiveObjectInspectorFactory.writableHiveIntervalYearMonthObjectInspector"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"interval_day_time"
argument_list|)
condition|)
block|{
return|return
literal|"PrimitiveObjectInspectorFactory.writableHiveIntervalDayTimeObjectInspector"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"date"
argument_list|)
condition|)
block|{
return|return
literal|"PrimitiveObjectInspectorFactory.writableDateObjectInspector"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"timestamp"
argument_list|)
condition|)
block|{
return|return
literal|"PrimitiveObjectInspectorFactory.writableTimestampObjectInspector"
return|;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unimplemented primitive output inspector: "
operator|+
name|primitiveType
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setTemplateBaseDir
parameter_list|(
name|String
name|templateBaseDir
parameter_list|)
block|{
name|this
operator|.
name|templateBaseDir
operator|=
name|templateBaseDir
expr_stmt|;
block|}
specifier|public
name|void
name|setBuildDir
parameter_list|(
name|String
name|buildDir
parameter_list|)
block|{
name|this
operator|.
name|buildDir
operator|=
name|buildDir
expr_stmt|;
block|}
block|}
end_class

end_unit

