begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|AntClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of the ant task<getversionpref property="nameoftheproperty" input="versionstring"/>.  *  * This ant task takes an input version string (e.g. 0.17.2) and set an ant property (whose name  * is specified in the property attribute) with the version prefix. For 0.17.2, the version prefix  * is 0.17. Similarly, for 0.18.0, the version prefix is 0.18. The version prefix is the first two  * components of the version string.  */
end_comment

begin_class
specifier|public
class|class
name|GetVersionPref
extends|extends
name|Task
block|{
comment|/**    * The name of the property that gets the version prefix.    */
specifier|protected
name|String
name|property
decl_stmt|;
comment|/**    * The input string that contains the version string.    */
specifier|protected
name|String
name|input
decl_stmt|;
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|property
parameter_list|)
block|{
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
block|}
specifier|public
name|String
name|getProperty
parameter_list|()
block|{
return|return
name|property
return|;
block|}
specifier|public
name|void
name|setInput
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
block|}
specifier|public
name|String
name|getInput
parameter_list|()
block|{
return|return
name|input
return|;
block|}
comment|/**    * Executes the ant task<getversionperf>.    *    * It extracts the version prefix using regular expressions on the version string. It then sets    * the property in the project with the extracted prefix. The property is set to an empty string    * in case no match is found for the prefix regular expression (which will happen in case the    * version string does not conform to the version format).    */
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"No property specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"No input stringspecified"
argument_list|)
throw|;
block|}
try|try
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+\\.\\d+).*"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
argument_list|,
name|m
operator|.
name|matches
argument_list|()
condition|?
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Failed with: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

