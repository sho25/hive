begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * This object represents a path as used by CLASSPATH or PATH environment variable. String   * representation of this object returns the path with unique elements to reduce the chances of  * exceeding  the character limit problem on windows by removing if there are duplicate files(JARs)  * in the original class path.  */
end_comment

begin_class
specifier|public
class|class
name|DistinctElementsClassPath
extends|extends
name|Path
block|{
comment|/**    * Invoked by IntrospectionHelper for<code>setXXX(Path p)</code>    * attribute setters.    * @param p the<code>Project</code> for this path.    * @param path the<code>String</code> path definition.    */
specifier|public
name|DistinctElementsClassPath
parameter_list|(
name|Project
name|p
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|p
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct an empty<code>Path</code>.    * @param project the<code>Project</code> for this path.    */
specifier|public
name|DistinctElementsClassPath
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
name|super
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the list of path elements after removing the duplicate files from the    * original Path    */
annotation|@
name|Override
specifier|public
name|String
index|[]
name|list
parameter_list|()
block|{
name|HashSet
name|includedElements
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|ArrayList
name|resultElements
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pathElement
range|:
name|super
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|pathElement
operator|!=
literal|null
operator|&&
operator|!
name|pathElement
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|p
init|=
operator|new
name|File
argument_list|(
name|pathElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|setItem
init|=
name|pathElement
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|setItem
operator|=
name|p
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|includedElements
operator|.
name|contains
argument_list|(
name|setItem
argument_list|)
condition|)
block|{
name|includedElements
operator|.
name|add
argument_list|(
name|setItem
argument_list|)
expr_stmt|;
name|resultElements
operator|.
name|add
argument_list|(
name|pathElement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|resultElements
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|resultElements
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Returns a textual representation of the path after removing the duplicate files from the    * original Path.    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
argument_list|(
name|this
operator|.
name|list
argument_list|()
argument_list|,
name|File
operator|.
name|pathSeparatorChar
argument_list|)
return|;
block|}
block|}
end_class

end_unit

