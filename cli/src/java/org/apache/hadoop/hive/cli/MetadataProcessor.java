begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandProcessor
import|;
end_import

begin_class
specifier|public
class|class
name|MetadataProcessor
implements|implements
name|CommandProcessor
block|{
specifier|public
name|int
name|run
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|table_name
init|=
name|command
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|table_name
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
try|try
block|{
name|MetaStoreClient
name|msc
init|=
operator|new
name|MetaStoreClient
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|msc
operator|.
name|tableExists
argument_list|(
name|table_name
argument_list|)
condition|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"table does not exist: "
operator|+
name|table_name
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
name|msc
operator|.
name|get_fields
argument_list|(
name|table_name
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|f
range|:
name|fields
control|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|f
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|err
parameter_list|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Got meta exception: "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Got exception: "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

