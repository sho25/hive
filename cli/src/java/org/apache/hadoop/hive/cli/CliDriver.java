begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|ArgumentCompletor
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|Completor
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|ConsoleReader
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|History
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|SimpleCompletor
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|ArgumentCompletor
operator|.
name|AbstractArgumentDelimiter
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|ArgumentCompletor
operator|.
name|ArgumentDelimiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|HiveInterruptUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
operator|.
name|LogInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|CachingPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HadoopJobExecHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
operator|.
name|StreamPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|VariableSubstitution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|service
operator|.
name|HiveClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|service
operator|.
name|HiveServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|Signal
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|SignalHandler
import|;
end_import

begin_comment
comment|/**  * CliDriver.  *  */
end_comment

begin_class
specifier|public
class|class
name|CliDriver
block|{
specifier|public
specifier|static
name|String
name|prompt
init|=
literal|"hive"
decl_stmt|;
specifier|public
specifier|static
name|String
name|prompt2
init|=
literal|"    "
decl_stmt|;
comment|// when ';' is not yet seen
specifier|public
specifier|static
specifier|final
name|int
name|LINES_TO_FETCH
init|=
literal|40
decl_stmt|;
comment|// number of lines to fetch in batch from remote hive server
specifier|public
specifier|static
specifier|final
name|String
name|HIVERCFILE
init|=
literal|".hiverc"
decl_stmt|;
specifier|private
specifier|final
name|LogHelper
name|console
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|CliDriver
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|conf
operator|=
operator|(
name|ss
operator|!=
literal|null
operator|)
condition|?
name|ss
operator|.
name|getConf
argument_list|()
else|:
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"CliDriver"
argument_list|)
decl_stmt|;
name|console
operator|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|processCmd
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|CliSessionState
name|ss
init|=
operator|(
name|CliSessionState
operator|)
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Flush the print stream, so it doesn't include output from the last command
name|ss
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|cmd_trimmed
init|=
name|cmd
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|tokenizeCmd
argument_list|(
name|cmd_trimmed
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cmd_trimmed
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"quit"
argument_list|)
operator|||
name|cmd_trimmed
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"exit"
argument_list|)
condition|)
block|{
comment|// if we have come this far - either the previous commands
comment|// are all successful or this is command line. in either case
comment|// this counts as a successful run
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokens
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"source"
argument_list|)
condition|)
block|{
name|String
name|cmd_1
init|=
name|getFirstCmd
argument_list|(
name|cmd_trimmed
argument_list|,
name|tokens
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|sourceFile
init|=
operator|new
name|File
argument_list|(
name|cmd_1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sourceFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"File: "
operator|+
name|cmd_1
operator|+
literal|" is not a file."
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|this
operator|.
name|processFile
argument_list|(
name|cmd_1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Failed processing file "
operator|+
name|cmd_1
operator|+
literal|" "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|1
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|cmd_trimmed
operator|.
name|startsWith
argument_list|(
literal|"!"
argument_list|)
condition|)
block|{
name|String
name|shell_cmd
init|=
name|cmd_trimmed
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|shell_cmd
operator|=
operator|new
name|VariableSubstitution
argument_list|()
operator|.
name|substitute
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
name|shell_cmd
argument_list|)
expr_stmt|;
comment|// shell_cmd = "/bin/bash -c \'" + shell_cmd + "\'";
try|try
block|{
name|Process
name|executor
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|shell_cmd
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ss
operator|.
name|out
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ss
operator|.
name|err
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|ret
operator|=
name|executor
operator|.
name|waitFor
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Command failed with exit code = "
operator|+
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Exception raised from Shell command "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tokens
index|[
literal|0
index|]
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"list"
argument_list|)
condition|)
block|{
name|SessionState
operator|.
name|ResourceType
name|t
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|<
literal|2
operator|||
operator|(
name|t
operator|=
name|SessionState
operator|.
name|find_resource_type
argument_list|(
name|tokens
index|[
literal|1
index|]
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Usage: list ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|SessionState
operator|.
name|ResourceType
operator|.
name|values
argument_list|()
argument_list|,
literal|"|"
argument_list|)
operator|+
literal|"] [<value> [<value>]*]"
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|filter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>=
literal|3
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|tokens
argument_list|,
literal|2
argument_list|,
name|tokens
argument_list|,
literal|0
argument_list|,
name|tokens
operator|.
name|length
operator|-
literal|2
argument_list|)
expr_stmt|;
name|filter
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|s
init|=
name|ss
operator|.
name|list_resource
argument_list|(
name|t
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|s
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|isRemoteMode
argument_list|()
condition|)
block|{
comment|// remote mode -- connecting to remote hive server
name|HiveClient
name|client
init|=
name|ss
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
name|ss
operator|.
name|out
decl_stmt|;
name|PrintStream
name|err
init|=
name|ss
operator|.
name|err
decl_stmt|;
try|try
block|{
name|client
operator|.
name|execute
argument_list|(
name|cmd_trimmed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
decl_stmt|;
do|do
block|{
name|results
operator|=
name|client
operator|.
name|fetchN
argument_list|(
name|LINES_TO_FETCH
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|results
control|)
block|{
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|results
operator|.
name|size
argument_list|()
operator|==
name|LINES_TO_FETCH
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|HiveServerException
name|e
parameter_list|)
block|{
name|ret
operator|=
name|e
operator|.
name|getErrorCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
comment|// OK if ret == 0 -- reached the EOF
name|String
name|errMsg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|errMsg
operator|==
literal|null
condition|)
block|{
name|errMsg
operator|=
name|e
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|ret
operator|=
name|e
operator|.
name|getErrorCode
argument_list|()
expr_stmt|;
name|err
operator|.
name|println
argument_list|(
literal|"[Hive Error]: "
operator|+
name|errMsg
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|errMsg
operator|==
literal|null
condition|)
block|{
name|errMsg
operator|=
name|e
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|ret
operator|=
operator|-
literal|10002
expr_stmt|;
name|err
operator|.
name|println
argument_list|(
literal|"[Thrift Error]: "
operator|+
name|errMsg
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|client
operator|.
name|clean
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|errMsg
operator|==
literal|null
condition|)
block|{
name|errMsg
operator|=
name|e
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|err
operator|.
name|println
argument_list|(
literal|"[Thrift Error]: Hive server is not cleaned due to thrift exception: "
operator|+
name|errMsg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// local mode
name|CommandProcessor
name|proc
init|=
name|CommandProcessorFactory
operator|.
name|get
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|,
operator|(
name|HiveConf
operator|)
name|conf
argument_list|)
decl_stmt|;
name|ret
operator|=
name|processLocalCmd
argument_list|(
name|cmd
argument_list|,
name|proc
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * For testing purposes to inject Configuration dependency    * @param conf to replace default    */
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Extract and clean up the first command in the input.    */
specifier|private
name|String
name|getFirstCmd
parameter_list|(
name|String
name|cmd
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|cmd
operator|.
name|substring
argument_list|(
name|length
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|private
name|String
index|[]
name|tokenizeCmd
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
name|cmd
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
return|;
block|}
name|int
name|processLocalCmd
parameter_list|(
name|String
name|cmd
parameter_list|,
name|CommandProcessor
name|proc
parameter_list|,
name|CliSessionState
name|ss
parameter_list|)
block|{
name|int
name|tryCount
init|=
literal|0
decl_stmt|;
name|boolean
name|needRetry
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
do|do
block|{
try|try
block|{
name|needRetry
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|proc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|proc
operator|instanceof
name|Driver
condition|)
block|{
name|Driver
name|qp
init|=
operator|(
name|Driver
operator|)
name|proc
decl_stmt|;
name|PrintStream
name|out
init|=
name|ss
operator|.
name|out
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getIsVerbose
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
name|qp
operator|.
name|setTryCount
argument_list|(
name|tryCount
argument_list|)
expr_stmt|;
name|ret
operator|=
name|qp
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
name|qp
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|printHeader
argument_list|(
name|qp
argument_list|,
name|out
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|qp
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|r
range|:
name|res
control|)
block|{
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|checkError
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Failed with exception "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|1
expr_stmt|;
block|}
name|int
name|cret
init|=
name|qp
operator|.
name|close
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
name|ret
operator|=
name|cret
expr_stmt|;
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|end
operator|>
name|start
condition|)
block|{
name|double
name|timeTaken
init|=
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|1000.0
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Time taken: "
operator|+
name|timeTaken
operator|+
literal|" seconds"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|firstToken
init|=
name|tokenizeCmd
argument_list|(
name|cmd
operator|.
name|trim
argument_list|()
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|String
name|cmd_1
init|=
name|getFirstCmd
argument_list|(
name|cmd
operator|.
name|trim
argument_list|()
argument_list|,
name|firstToken
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getIsVerbose
argument_list|()
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|firstToken
operator|+
literal|" "
operator|+
name|cmd_1
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|proc
operator|.
name|run
argument_list|(
name|cmd_1
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Retry query with a different approach..."
argument_list|)
expr_stmt|;
name|tryCount
operator|++
expr_stmt|;
name|needRetry
operator|=
literal|true
expr_stmt|;
block|}
block|}
do|while
condition|(
name|needRetry
condition|)
do|;
return|return
name|ret
return|;
block|}
comment|/**    * If enabled and applicable to this command, print the field headers    * for the output.    *    * @param qp Driver that executed the command    * @param out Printstream which to send output to    */
specifier|private
name|void
name|printHeader
parameter_list|(
name|Driver
name|qp
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
init|=
name|qp
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldSchemas
argument_list|()
decl_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CLI_PRINT_HEADER
argument_list|)
operator|&&
name|fieldSchemas
operator|!=
literal|null
condition|)
block|{
comment|// Print the column names
name|boolean
name|first_col
init|=
literal|true
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|fieldSchemas
control|)
block|{
if|if
condition|(
operator|!
name|first_col
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|first_col
operator|=
literal|false
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|processLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|processLine
argument_list|(
name|line
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Processes a line of semicolon separated commands    *    * @param line    *          The commands to process    * @param allowInterupting    *          When true the function will handle SIG_INT (Ctrl+C) by interrupting the processing and    *          returning -1    * @return 0 if ok    */
specifier|public
name|int
name|processLine
parameter_list|(
name|String
name|line
parameter_list|,
name|boolean
name|allowInterupting
parameter_list|)
block|{
name|SignalHandler
name|oldSignal
init|=
literal|null
decl_stmt|;
name|Signal
name|interupSignal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|allowInterupting
condition|)
block|{
comment|// Remember all threads that were running at the time we started line processing.
comment|// Hook up the custom Ctrl+C handler while processing this line
name|interupSignal
operator|=
operator|new
name|Signal
argument_list|(
literal|"INT"
argument_list|)
expr_stmt|;
name|oldSignal
operator|=
name|Signal
operator|.
name|handle
argument_list|(
name|interupSignal
argument_list|,
operator|new
name|SignalHandler
argument_list|()
block|{
specifier|private
specifier|final
name|Thread
name|cliThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|interruptRequested
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Signal
name|signal
parameter_list|)
block|{
name|boolean
name|initialRequest
init|=
operator|!
name|interruptRequested
decl_stmt|;
name|interruptRequested
operator|=
literal|true
expr_stmt|;
comment|// Kill the VM on second ctrl+c
if|if
condition|(
operator|!
name|initialRequest
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Exiting the JVM"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|127
argument_list|)
expr_stmt|;
block|}
comment|// Interrupt the CLI thread to stop the current statement and return
comment|// to prompt
name|console
operator|.
name|printInfo
argument_list|(
literal|"Interrupting... Be patient, this might take some time."
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Press Ctrl+C again to kill JVM"
argument_list|)
expr_stmt|;
comment|// First, kill any running MR jobs
name|HadoopJobExecHelper
operator|.
name|killRunningJobs
argument_list|()
expr_stmt|;
name|HiveInterruptUtils
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|this
operator|.
name|cliThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|lastRet
init|=
literal|0
decl_stmt|,
name|ret
init|=
literal|0
decl_stmt|;
name|String
name|command
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|oneCmd
range|:
name|line
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|endsWith
argument_list|(
name|oneCmd
argument_list|,
literal|"\\"
argument_list|)
condition|)
block|{
name|command
operator|+=
name|StringUtils
operator|.
name|chop
argument_list|(
name|oneCmd
argument_list|)
operator|+
literal|";"
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|command
operator|+=
name|oneCmd
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|command
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ret
operator|=
name|processCmd
argument_list|(
name|command
argument_list|)
expr_stmt|;
comment|//wipe cli query state
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|ss
operator|.
name|setCommandType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|command
operator|=
literal|""
expr_stmt|;
name|lastRet
operator|=
name|ret
expr_stmt|;
name|boolean
name|ignoreErrors
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|CLIIGNOREERRORS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
operator|&&
operator|!
name|ignoreErrors
condition|)
block|{
name|CommandProcessorFactory
operator|.
name|clean
argument_list|(
operator|(
name|HiveConf
operator|)
name|conf
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
name|CommandProcessorFactory
operator|.
name|clean
argument_list|(
operator|(
name|HiveConf
operator|)
name|conf
argument_list|)
expr_stmt|;
return|return
name|lastRet
return|;
block|}
finally|finally
block|{
comment|// Once we are done processing the line, restore the old handler
if|if
condition|(
name|oldSignal
operator|!=
literal|null
operator|&&
name|interupSignal
operator|!=
literal|null
condition|)
block|{
name|Signal
operator|.
name|handle
argument_list|(
name|interupSignal
argument_list|,
name|oldSignal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|processReader
parameter_list|(
name|BufferedReader
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|line
decl_stmt|;
name|StringBuilder
name|qsb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// Skipping through comments
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
name|qsb
operator|.
name|append
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|processLine
argument_list|(
name|qsb
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|int
name|processFile
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|FileReader
name|fileReader
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|bufferReader
init|=
literal|null
decl_stmt|;
name|int
name|rc
init|=
literal|0
decl_stmt|;
try|try
block|{
name|fileReader
operator|=
operator|new
name|FileReader
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|bufferReader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fileReader
argument_list|)
expr_stmt|;
name|rc
operator|=
name|processReader
argument_list|(
name|bufferReader
argument_list|)
expr_stmt|;
name|bufferReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|bufferReader
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|bufferReader
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|processInitFiles
parameter_list|(
name|CliSessionState
name|ss
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|saveSilent
init|=
name|ss
operator|.
name|getIsSilent
argument_list|()
decl_stmt|;
name|ss
operator|.
name|setIsSilent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|initFile
range|:
name|ss
operator|.
name|initFiles
control|)
block|{
name|int
name|rc
init|=
name|processFile
argument_list|(
name|initFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ss
operator|.
name|initFiles
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_HOME"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|hivercDefault
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_HOME"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
literal|"bin"
operator|+
name|File
operator|.
name|separator
operator|+
name|HIVERCFILE
decl_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|hivercDefault
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|int
name|rc
init|=
name|processFile
argument_list|(
name|hivercDefault
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|hivercUser
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|HIVERCFILE
decl_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|hivercUser
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|int
name|rc
init|=
name|processFile
argument_list|(
name|hivercUser
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|ss
operator|.
name|setIsSilent
argument_list|(
name|saveSilent
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Completor
name|getCommandCompletor
parameter_list|()
block|{
comment|// SimpleCompletor matches against a pre-defined wordlist
comment|// We start with an empty wordlist and build it up
name|SimpleCompletor
name|sc
init|=
operator|new
name|SimpleCompletor
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// We add Hive function names
comment|// For functions that aren't infix operators, we add an open
comment|// parenthesis at the end.
for|for
control|(
name|String
name|s
range|:
name|FunctionRegistry
operator|.
name|getFunctionNames
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|matches
argument_list|(
literal|"[a-z_]+"
argument_list|)
condition|)
block|{
name|sc
operator|.
name|addCandidateString
argument_list|(
name|s
operator|+
literal|"("
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sc
operator|.
name|addCandidateString
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We add Hive keywords, including lower-cased versions
for|for
control|(
name|String
name|s
range|:
name|ParseDriver
operator|.
name|getKeywords
argument_list|()
control|)
block|{
name|sc
operator|.
name|addCandidateString
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|sc
operator|.
name|addCandidateString
argument_list|(
name|s
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Because we use parentheses in addition to whitespace
comment|// as a keyword delimiter, we need to define a new ArgumentDelimiter
comment|// that recognizes parenthesis as a delimiter.
name|ArgumentDelimiter
name|delim
init|=
operator|new
name|AbstractArgumentDelimiter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isDelimiterChar
parameter_list|(
name|String
name|buffer
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|char
name|c
init|=
name|buffer
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
return|return
operator|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
operator|||
name|c
operator|==
literal|'('
operator|||
name|c
operator|==
literal|')'
operator|||
name|c
operator|==
literal|'['
operator|||
name|c
operator|==
literal|']'
operator|)
return|;
block|}
block|}
decl_stmt|;
comment|// The ArgumentCompletor allows us to match multiple tokens
comment|// in the same line.
specifier|final
name|ArgumentCompletor
name|ac
init|=
operator|new
name|ArgumentCompletor
argument_list|(
name|sc
argument_list|,
name|delim
argument_list|)
decl_stmt|;
comment|// By default ArgumentCompletor is in "strict" mode meaning
comment|// a token is only auto-completed if all prior tokens
comment|// match. We don't want that since there are valid tokens
comment|// that are not in our wordlist (eg. table and column names)
name|ac
operator|.
name|setStrict
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// ArgumentCompletor always adds a space after a matched token.
comment|// This is undesirable for function names because a space after
comment|// the opening parenthesis is unnecessary (and uncommon) in Hive.
comment|// We stack a custom Completor on top of our ArgumentCompletor
comment|// to reverse this.
name|Completor
name|completor
init|=
operator|new
name|Completor
argument_list|()
block|{
specifier|public
name|int
name|complete
parameter_list|(
name|String
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|List
name|completions
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|comp
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|completions
decl_stmt|;
name|int
name|ret
init|=
name|ac
operator|.
name|complete
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|completions
argument_list|)
decl_stmt|;
comment|// ConsoleReader will do the substitution if and only if there
comment|// is exactly one valid completion, so we ignore other cases.
if|if
condition|(
name|completions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"( "
argument_list|)
condition|)
block|{
name|comp
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|comp
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
decl_stmt|;
return|return
name|completor
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|ret
init|=
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionsProcessor
name|oproc
init|=
operator|new
name|OptionsProcessor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oproc
operator|.
name|process_stage1
argument_list|(
name|args
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// NOTE: It is critical to do this here so that log4j is reinitialized
comment|// before any of the other core hive classes are loaded
name|boolean
name|logInitFailed
init|=
literal|false
decl_stmt|;
name|String
name|logInitDetailMessage
decl_stmt|;
try|try
block|{
name|logInitDetailMessage
operator|=
name|LogUtils
operator|.
name|initHiveLog4j
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LogInitializationException
name|e
parameter_list|)
block|{
name|logInitFailed
operator|=
literal|true
expr_stmt|;
name|logInitDetailMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|CliSessionState
name|ss
init|=
operator|new
name|CliSessionState
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|SessionState
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ss
operator|.
name|in
operator|=
name|System
operator|.
name|in
expr_stmt|;
try|try
block|{
name|ss
operator|.
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|ss
operator|.
name|info
operator|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|ss
operator|.
name|err
operator|=
operator|new
name|CachingPrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
return|return
literal|3
return|;
block|}
if|if
condition|(
operator|!
name|oproc
operator|.
name|process_stage2
argument_list|(
name|ss
argument_list|)
condition|)
block|{
return|return
literal|2
return|;
block|}
if|if
condition|(
operator|!
name|ss
operator|.
name|getIsSilent
argument_list|()
condition|)
block|{
if|if
condition|(
name|logInitFailed
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|logInitDetailMessage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
name|logInitDetailMessage
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set all properties specified via command line
name|HiveConf
name|conf
init|=
name|ss
operator|.
name|getConf
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|item
range|:
name|ss
operator|.
name|cmdProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
operator|(
name|String
operator|)
name|item
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|getOverriddenConfigurations
argument_list|()
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|item
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
comment|// connect to Hive Server
if|if
condition|(
name|ss
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|connect
argument_list|()
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|isRemoteMode
argument_list|()
condition|)
block|{
name|prompt
operator|=
literal|"["
operator|+
name|ss
operator|.
name|host
operator|+
literal|':'
operator|+
name|ss
operator|.
name|port
operator|+
literal|"] "
operator|+
name|prompt
expr_stmt|;
name|char
index|[]
name|spaces
init|=
operator|new
name|char
index|[
name|prompt
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|spaces
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|prompt2
operator|=
operator|new
name|String
argument_list|(
name|spaces
argument_list|)
expr_stmt|;
block|}
block|}
comment|// CLI remote mode is a thin client: only load auxJars in local mode
if|if
condition|(
operator|!
name|ss
operator|.
name|isRemoteMode
argument_list|()
operator|&&
operator|!
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|usesJobShell
argument_list|()
condition|)
block|{
comment|// hadoop-20 and above - we need to augment classpath using hiveconf
comment|// components
comment|// see also: code in ExecDriver.java
name|ClassLoader
name|loader
init|=
name|conf
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|String
name|auxJars
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEAUXJARS
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|auxJars
argument_list|)
condition|)
block|{
name|loader
operator|=
name|Utilities
operator|.
name|addToClassPath
argument_list|(
name|loader
argument_list|,
name|StringUtils
operator|.
name|split
argument_list|(
name|auxJars
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setClassLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
name|CliDriver
name|cli
init|=
operator|new
name|CliDriver
argument_list|()
decl_stmt|;
name|cli
operator|.
name|setHiveVariables
argument_list|(
name|oproc
operator|.
name|getHiveVariables
argument_list|()
argument_list|)
expr_stmt|;
comment|// Execute -i init files (always in silent mode)
name|cli
operator|.
name|processInitFiles
argument_list|(
name|ss
argument_list|)
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|execString
operator|!=
literal|null
condition|)
block|{
return|return
name|cli
operator|.
name|processLine
argument_list|(
name|ss
operator|.
name|execString
argument_list|)
return|;
block|}
try|try
block|{
if|if
condition|(
name|ss
operator|.
name|fileName
operator|!=
literal|null
condition|)
block|{
return|return
name|cli
operator|.
name|processFile
argument_list|(
name|ss
operator|.
name|fileName
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not open input file for reading. ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|3
return|;
block|}
name|ConsoleReader
name|reader
init|=
operator|new
name|ConsoleReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setBellEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// reader.setDebug(new PrintWriter(new FileWriter("writer.debug", true)));
name|reader
operator|.
name|addCompletor
argument_list|(
name|getCommandCompletor
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
specifier|final
name|String
name|HISTORYFILE
init|=
literal|".hivehistory"
decl_stmt|;
name|String
name|historyFile
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|HISTORYFILE
decl_stmt|;
name|reader
operator|.
name|setHistory
argument_list|(
operator|new
name|History
argument_list|(
operator|new
name|File
argument_list|(
name|historyFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
name|String
name|curDB
init|=
name|getFormattedDb
argument_list|(
name|conf
argument_list|,
name|ss
argument_list|)
decl_stmt|;
name|String
name|curPrompt
init|=
name|prompt
operator|+
name|curDB
decl_stmt|;
name|String
name|dbSpaces
init|=
name|spacesForString
argument_list|(
name|curDB
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|(
name|curPrompt
operator|+
literal|"> "
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|prefix
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|prefix
operator|+=
literal|'\n'
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
operator|&&
operator|!
name|line
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"\\;"
argument_list|)
condition|)
block|{
name|line
operator|=
name|prefix
operator|+
name|line
expr_stmt|;
name|ret
operator|=
name|cli
operator|.
name|processLine
argument_list|(
name|line
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|""
expr_stmt|;
name|curDB
operator|=
name|getFormattedDb
argument_list|(
name|conf
argument_list|,
name|ss
argument_list|)
expr_stmt|;
name|curPrompt
operator|=
name|prompt
operator|+
name|curDB
expr_stmt|;
name|dbSpaces
operator|=
name|dbSpaces
operator|.
name|length
argument_list|()
operator|==
name|curDB
operator|.
name|length
argument_list|()
condition|?
name|dbSpaces
else|:
name|spacesForString
argument_list|(
name|curDB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|prefix
operator|+
name|line
expr_stmt|;
name|curPrompt
operator|=
name|prompt2
operator|+
name|dbSpaces
expr_stmt|;
continue|continue;
block|}
block|}
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Retrieve the current database name string to display, based on the    * configuration value.    * @param conf storing whether or not to show current db    * @param ss CliSessionState to query for db name    * @return String to show user for current db value    */
specifier|private
specifier|static
name|String
name|getFormattedDb
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|CliSessionState
name|ss
parameter_list|)
block|{
if|if
condition|(
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|CLIPRINTCURRENTDB
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|currDb
init|=
name|ss
operator|.
name|getCurrentDbName
argument_list|()
decl_stmt|;
if|if
condition|(
name|currDb
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
literal|" ("
operator|+
name|currDb
operator|+
literal|")"
return|;
block|}
comment|/**    * Generate a string of whitespace the same length as the parameter    *    * @param s String for which to generate equivalent whitespace    * @return  Whitespace    */
specifier|private
specifier|static
name|String
name|spacesForString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%1$-"
operator|+
name|s
operator|.
name|length
argument_list|()
operator|+
literal|"s"
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|public
name|void
name|setHiveVariables
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveVariables
parameter_list|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setHiveVariables
argument_list|(
name|hiveVariables
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

