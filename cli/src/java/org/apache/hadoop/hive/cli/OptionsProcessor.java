begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|cli
operator|.
name|CommonCliOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * OptionsProcessor.  *  */
end_comment

begin_class
specifier|public
class|class
name|OptionsProcessor
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|l4j
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OptionsProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
name|commandLine
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveVariables
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|public
name|OptionsProcessor
parameter_list|()
block|{
comment|// -database database
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"databasename"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"database"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Specify the database to use"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|// -e 'quoted-query-string'
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"quoted-query-string"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"SQL from command line"
argument_list|)
operator|.
name|create
argument_list|(
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -f<query-file>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"filename"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"SQL from files"
argument_list|)
operator|.
name|create
argument_list|(
literal|'f'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -i<init-query-file>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"filename"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Initialization SQL file"
argument_list|)
operator|.
name|create
argument_list|(
literal|'i'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -hiveconf x=y
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"hiveconf"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Use value for given property"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|// Substitution option -d, --define
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"key=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"define"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Variable substitution to apply to Hive commands. e.g. -d A=B or --define A=B"
argument_list|)
operator|.
name|create
argument_list|(
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
comment|// Substitution option --hivevar
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"key=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"hivevar"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Variable substitution to apply to Hive commands. e.g. --hivevar A=B"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|// [-S|--silent]
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"S"
argument_list|,
literal|"silent"
argument_list|,
literal|false
argument_list|,
literal|"Silent mode in interactive shell"
argument_list|)
argument_list|)
expr_stmt|;
comment|// [-v|--verbose]
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"v"
argument_list|,
literal|"verbose"
argument_list|,
literal|false
argument_list|,
literal|"Verbose mode (echo executed SQL to the console)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// [-H|--help]
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"H"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print help information"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|process_stage1
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
block|{
try|try
block|{
name|commandLine
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|Properties
name|confProps
init|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"hiveconf"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|confProps
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
comment|// with HIVE-11304, hive.root.logger cannot have both logger name and log level.
comment|// if we still see it, split logger and level separately for hive.root.logger
comment|// and hive.log.level respectively
if|if
condition|(
name|propKey
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"hive.root.logger"
argument_list|)
condition|)
block|{
name|CommonCliOptions
operator|.
name|splitAndSetLogger
argument_list|(
name|propKey
argument_list|,
name|confProps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|propKey
argument_list|,
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Properties
name|hiveVars
init|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"define"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|hiveVars
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|hiveVariables
operator|.
name|put
argument_list|(
name|propKey
argument_list|,
name|hiveVars
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Properties
name|hiveVars2
init|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"hivevar"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|hiveVars2
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|hiveVariables
operator|.
name|put
argument_list|(
name|propKey
argument_list|,
name|hiveVars2
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|process_stage2
parameter_list|(
name|CliSessionState
name|ss
parameter_list|)
block|{
name|ss
operator|.
name|getConf
argument_list|()
expr_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'H'
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ss
operator|.
name|setIsSilent
argument_list|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'S'
argument_list|)
argument_list|)
expr_stmt|;
name|ss
operator|.
name|database
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"database"
argument_list|)
expr_stmt|;
name|ss
operator|.
name|execString
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
name|ss
operator|.
name|fileName
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|'f'
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setIsVerbose
argument_list|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'v'
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|initFiles
init|=
name|commandLine
operator|.
name|getOptionValues
argument_list|(
literal|'i'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|initFiles
condition|)
block|{
name|ss
operator|.
name|initFiles
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|initFiles
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ss
operator|.
name|execString
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|fileName
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The '-e' and '-f' options cannot be specified simultaneously"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"hiveconf"
argument_list|)
condition|)
block|{
name|Properties
name|confProps
init|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"hiveconf"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|confProps
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|ss
operator|.
name|cmdProperties
operator|.
name|setProperty
argument_list|(
name|propKey
argument_list|,
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|printUsage
parameter_list|()
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
literal|"hive"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVariables
parameter_list|()
block|{
return|return
name|hiveVariables
return|;
block|}
block|}
end_class

end_unit

