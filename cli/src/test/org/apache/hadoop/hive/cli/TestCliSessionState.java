begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test CliSessionState  */
end_comment

begin_class
specifier|public
class|class
name|TestCliSessionState
block|{
specifier|private
specifier|static
name|TCPServer
name|server
decl_stmt|;
specifier|private
specifier|static
name|String
name|command
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start fake server
name|server
operator|=
operator|new
name|TCPServer
argument_list|()
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for start server;
while|while
condition|(
name|server
operator|.
name|getPort
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * test CliSessionState for remote    */
annotation|@
name|Test
specifier|public
name|void
name|testConnect
parameter_list|()
throws|throws
name|Exception
block|{
name|CliSessionState
name|sessionState
init|=
operator|new
name|CliSessionState
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
decl_stmt|;
name|sessionState
operator|.
name|port
operator|=
name|server
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|sessionState
operator|.
name|setHost
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
comment|// check connect
name|sessionState
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|sessionState
operator|.
name|isRemoteMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getPort
argument_list|()
argument_list|,
name|sessionState
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|sessionState
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessionState
operator|.
name|getClient
argument_list|()
argument_list|)
expr_stmt|;
name|sessionState
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close should send command clean
name|assertEquals
argument_list|(
name|command
argument_list|,
literal|"clean"
argument_list|)
expr_stmt|;
block|}
comment|/**    * test default db name    */
annotation|@
name|Test
specifier|public
name|void
name|testgetDbName
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|configuration
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|CliSessionState
name|sessionState
init|=
operator|new
name|CliSessionState
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|sessionState
operator|.
name|getCurrentDbName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * fake hive server    */
specifier|private
specifier|static
class|class
name|TCPServer
implements|implements
name|Runnable
block|{
specifier|private
name|int
name|port
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
specifier|private
name|ServerSocket
name|welcomeSocket
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|welcomeSocket
operator|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|port
operator|=
name|welcomeSocket
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|stop
condition|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|Socket
name|connectionSocket
init|=
name|welcomeSocket
operator|.
name|accept
argument_list|()
decl_stmt|;
name|InputStream
name|input
init|=
name|connectionSocket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|output
init|=
name|connectionSocket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|int
name|read
init|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
comment|// command without service bytes
name|command
operator|=
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|8
argument_list|,
name|read
operator|-
literal|13
argument_list|)
expr_stmt|;
comment|// send derived
name|output
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
empty_stmt|;
block|}
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|stop
operator|=
literal|true
expr_stmt|;
name|welcomeSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

