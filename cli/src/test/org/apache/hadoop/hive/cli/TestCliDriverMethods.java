begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|// Cannot call class TestCliDriver since that's the name of the generated
end_comment

begin_comment
comment|// code for the script-based testing
end_comment

begin_class
specifier|public
class|class
name|TestCliDriverMethods
extends|extends
name|TestCase
block|{
comment|// If the command has an associated schema, make sure it gets printed to use
specifier|public
name|void
name|testThatCliDriverPrintsHeaderForCommandsWithSchema
parameter_list|()
throws|throws
name|CommandNeedRetryException
block|{
name|Schema
name|mockSchema
init|=
name|mock
argument_list|(
name|Schema
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
literal|"FlightOfTheConchords"
decl_stmt|;
name|fieldSchemas
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|fieldName
argument_list|,
literal|"type"
argument_list|,
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockSchema
operator|.
name|getFieldSchemas
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fieldSchemas
argument_list|)
expr_stmt|;
name|PrintStream
name|mockOut
init|=
name|headerPrintingTestDriver
argument_list|(
name|mockSchema
argument_list|)
decl_stmt|;
comment|// Should have printed out the header for the field schema
name|verify
argument_list|(
name|mockOut
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|print
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
comment|// If the command has no schema, make sure nothing is printed
specifier|public
name|void
name|testThatCliDriverPrintsNoHeaderForCommandsWithNoSchema
parameter_list|()
throws|throws
name|CommandNeedRetryException
block|{
name|Schema
name|mockSchema
init|=
name|mock
argument_list|(
name|Schema
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockSchema
operator|.
name|getFieldSchemas
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|PrintStream
name|mockOut
init|=
name|headerPrintingTestDriver
argument_list|(
name|mockSchema
argument_list|)
decl_stmt|;
comment|// Should not have tried to print any thing.
name|verify
argument_list|(
name|mockOut
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|print
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Do the actual testing against a mocked CliDriver based on what type of schema    * @param mockSchema Schema to throw against test    * @return Output that would have been sent to the user    * @throws CommandNeedRetryException won't actually be thrown    */
specifier|private
name|PrintStream
name|headerPrintingTestDriver
parameter_list|(
name|Schema
name|mockSchema
parameter_list|)
throws|throws
name|CommandNeedRetryException
block|{
name|CliDriver
name|cliDriver
init|=
operator|new
name|CliDriver
argument_list|()
decl_stmt|;
comment|// We want the driver to try to print the header...
name|Configuration
name|conf
init|=
name|mock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|eq
argument_list|(
name|ConfVars
operator|.
name|HIVE_CLI_PRINT_HEADER
operator|.
name|varname
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cliDriver
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Driver
name|proc
init|=
name|mock
argument_list|(
name|Driver
operator|.
name|class
argument_list|)
decl_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|mock
argument_list|(
name|CommandProcessorResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|proc
operator|.
name|run
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
comment|// and then see what happens based on the provided schema
name|when
argument_list|(
name|proc
operator|.
name|getSchema
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockSchema
argument_list|)
expr_stmt|;
name|CliSessionState
name|mockSS
init|=
name|mock
argument_list|(
name|CliSessionState
operator|.
name|class
argument_list|)
decl_stmt|;
name|PrintStream
name|mockOut
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockSS
operator|.
name|out
operator|=
name|mockOut
expr_stmt|;
name|cliDriver
operator|.
name|processLocalCmd
argument_list|(
literal|"use default;"
argument_list|,
name|proc
argument_list|,
name|mockSS
argument_list|)
expr_stmt|;
return|return
name|mockOut
return|;
block|}
block|}
end_class

end_unit

