begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_comment
comment|/**  * Date and time interval  */
end_comment

begin_class
specifier|public
class|class
name|Interval
block|{
name|int
name|days
init|=
literal|0
decl_stmt|;
name|int
name|milliseconds
init|=
literal|0
decl_stmt|;
comment|/**    * Add or subtract interval value to the specified date    */
specifier|public
name|Date
name|dateChange
parameter_list|(
name|Date
name|in
parameter_list|,
name|boolean
name|add
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTimeInMillis
argument_list|(
name|in
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|calendarChange
argument_list|(
name|c
argument_list|,
name|add
argument_list|)
expr_stmt|;
return|return
operator|new
name|Date
argument_list|(
name|c
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Add or subtract interval value to the specified timestamp    */
specifier|public
name|Timestamp
name|timestampChange
parameter_list|(
name|Timestamp
name|in
parameter_list|,
name|boolean
name|add
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTimeInMillis
argument_list|(
name|in
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|calendarChange
argument_list|(
name|c
argument_list|,
name|add
argument_list|)
expr_stmt|;
return|return
operator|new
name|Timestamp
argument_list|(
name|c
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Add interval value to the specified Calendar value    */
specifier|public
name|Calendar
name|calendarChange
parameter_list|(
name|Calendar
name|c
parameter_list|,
name|boolean
name|add
parameter_list|)
block|{
name|int
name|a
init|=
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|add
condition|)
block|{
name|a
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|days
operator|!=
literal|0
condition|)
block|{
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
name|days
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|milliseconds
operator|!=
literal|0
condition|)
block|{
name|c
operator|.
name|setTimeInMillis
argument_list|(
name|c
operator|.
name|getTimeInMillis
argument_list|()
operator|+
name|milliseconds
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
comment|/**    * Set interval value    */
specifier|public
name|Interval
name|set
parameter_list|(
name|int
name|value
parameter_list|,
name|String
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"DAYS"
argument_list|)
operator|==
literal|0
operator|||
name|item
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"DAY"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|setDays
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|item
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"MICROSECONDS"
argument_list|)
operator|==
literal|0
operator|||
name|item
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"MICROSECOND"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|setMilliseconds
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Set interval items    */
specifier|public
name|void
name|setDays
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|this
operator|.
name|days
operator|=
name|days
expr_stmt|;
block|}
specifier|public
name|void
name|setMilliseconds
parameter_list|(
name|int
name|milliseconds
parameter_list|)
block|{
name|this
operator|.
name|milliseconds
operator|=
name|milliseconds
expr_stmt|;
block|}
comment|/**    * Convert interval to string    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|days
operator|!=
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|days
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|" days"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|milliseconds
operator|!=
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|milliseconds
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|" milliseconds"
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

