begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Metadata  */
end_comment

begin_class
specifier|public
class|class
name|Meta
block|{
comment|/**    * Normalize identifier name (convert "" [] to `` i.e.)    */
specifier|public
name|String
name|normalizeIdentifier
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|splitIdentifier
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|norm
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|norm
operator|.
name|append
argument_list|(
name|normalizeIdentifierPart
argument_list|(
name|parts
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|parts
operator|.
name|size
argument_list|()
condition|)
block|{
name|norm
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|norm
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|normalizeIdentifierPart
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Normalize identifier (single part)    */
specifier|public
name|String
name|normalizeIdentifierPart
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|char
name|start
init|=
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|char
name|end
init|=
name|name
operator|.
name|charAt
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|start
operator|==
literal|'['
operator|&&
name|end
operator|==
literal|']'
operator|)
operator|||
operator|(
name|start
operator|==
literal|'"'
operator|&&
name|end
operator|==
literal|'"'
operator|)
condition|)
block|{
return|return
literal|'`'
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|'`'
return|;
block|}
return|return
name|name
return|;
block|}
comment|/**    * Split identifier to parts (schema, table, colum name etc.)    * @return null if identifier contains single part    */
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|splitIdentifier
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|parts
init|=
literal|null
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|char
name|del
init|=
literal|'\0'
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'`'
operator|||
name|c
operator|==
literal|'"'
condition|)
block|{
name|del
operator|=
name|c
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'['
condition|)
block|{
name|del
operator|=
literal|']'
expr_stmt|;
block|}
if|if
condition|(
name|del
operator|!=
literal|'\0'
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
name|del
condition|)
block|{
break|break;
block|}
block|}
continue|continue;
block|}
if|if
condition|(
name|c
operator|==
literal|'.'
condition|)
block|{
if|if
condition|(
name|parts
operator|==
literal|null
condition|)
block|{
name|parts
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|parts
operator|.
name|add
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
block|}
end_class

end_unit

