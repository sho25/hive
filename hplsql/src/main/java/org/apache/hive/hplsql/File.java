begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * HDFS file operations  */
end_comment

begin_class
specifier|public
class|class
name|File
block|{
name|Path
name|path
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|FSDataInputStream
name|in
decl_stmt|;
name|FSDataOutputStream
name|out
decl_stmt|;
comment|/**    * Create FileSystem object    */
specifier|public
name|FileSystem
name|createFs
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
comment|/**    * Create a file    */
specifier|public
name|void
name|create
parameter_list|(
name|String
name|dir
parameter_list|,
name|String
name|file
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|file
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**   * Open an existing file   */
specifier|public
name|void
name|open
parameter_list|(
name|String
name|dir
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|file
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**   * Read a character from input   * @throws IOException    */
specifier|public
name|char
name|readChar
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|readChar
argument_list|()
return|;
block|}
comment|/**    * Write string to file    */
specifier|public
name|void
name|writeString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
try|try
block|{
name|out
operator|.
name|writeChars
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Close a file    */
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|in
operator|=
literal|null
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
name|path
operator|=
literal|null
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the fully-qualified path    * NOTE: FileSystem.resolvePath() is not available in Hadoop 1.2.1     * @throws IOException     */
specifier|public
name|Path
name|resolvePath
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
return|return
literal|"FILE<"
operator|+
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|">"
return|;
block|}
return|return
literal|"FILE<null>"
return|;
block|}
block|}
end_class

end_unit

