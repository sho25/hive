begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|Var
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Expressions  */
end_comment

begin_class
specifier|public
class|class
name|Expression
block|{
name|Exec
name|exec
decl_stmt|;
name|boolean
name|trace
init|=
literal|false
decl_stmt|;
name|Expression
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|exec
operator|=
name|e
expr_stmt|;
name|trace
operator|=
name|exec
operator|.
name|getTrace
argument_list|()
expr_stmt|;
block|}
comment|/**    * Evaluate an expression    */
specifier|public
name|void
name|exec
parameter_list|(
name|HplsqlParser
operator|.
name|ExprContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|T_ADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operatorAdd
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operatorSub
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|interval_item
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|createInterval
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visitChildren
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Evaluate an expression in executable SQL statement    */
specifier|public
name|void
name|execSql
parameter_list|(
name|HplsqlParser
operator|.
name|ExprContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_OPEN_P
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_ADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" + "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|interval_item
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|exec
operator|.
name|getFormattedText
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visitChildren
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|exec
operator|.
name|stackPop
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate a boolean expression    */
specifier|public
name|void
name|execBool
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_exprContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|T_OPEN_P
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|eval
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|bool_expr_atom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|eval
argument_list|(
name|ctx
operator|.
name|bool_expr_atom
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Var
name|result
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|bool_expr_logical_operator
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|bool_expr_logical_operator
argument_list|()
operator|.
name|T_AND
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|result
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|bool_expr_logical_operator
argument_list|()
operator|.
name|T_OR
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|result
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate a boolean expression in executable SQL statement    */
specifier|public
name|void
name|execBoolSql
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_exprContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_OPEN_P
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|bool_expr_atom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr_atom
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|bool_expr_logical_operator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|ctx
operator|.
name|bool_expr_logical_operator
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Binary boolean expression    */
specifier|public
name|Integer
name|execBoolBinary
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_expr_binaryContext
name|ctx
parameter_list|)
block|{
name|HplsqlParser
operator|.
name|Bool_expr_binary_operatorContext
name|op
init|=
name|ctx
operator|.
name|bool_expr_binary_operator
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|T_EQUAL
argument_list|()
operator|!=
literal|null
operator|||
name|op
operator|.
name|T_EQUAL2
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operatorEqual
argument_list|(
name|ctx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|.
name|T_NOTEQUAL
argument_list|()
operator|!=
literal|null
operator|||
name|op
operator|.
name|T_NOTEQUAL2
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operatorEqual
argument_list|(
name|ctx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|.
name|T_GREATER
argument_list|()
operator|!=
literal|null
operator|||
name|op
operator|.
name|T_LESS
argument_list|()
operator|!=
literal|null
operator|||
name|op
operator|.
name|T_GREATEREQUAL
argument_list|()
operator|!=
literal|null
operator|||
name|op
operator|.
name|T_LESSEQUAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|operatorCompare
argument_list|(
name|ctx
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|stackPush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Binary boolean expression in executable SQL statement    */
specifier|public
name|Integer
name|execBoolBinarySql
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_expr_binaryContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|exec
operator|.
name|getFormattedText
argument_list|(
name|ctx
operator|.
name|bool_expr_binary_operator
argument_list|()
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Unary boolean expression    */
specifier|public
name|Integer
name|execBoolUnary
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_expr_unaryContext
name|ctx
parameter_list|)
block|{
name|boolean
name|val
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_IS
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_NOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
operator|!
name|val
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_BETWEEN
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Var
name|v
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Var
name|v1
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|cmp
init|=
name|v
operator|.
name|compareTo
argument_list|(
name|v1
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|>=
literal|0
condition|)
block|{
name|Var
name|v2
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|cmp
operator|=
name|v
operator|.
name|compareTo
argument_list|(
name|v2
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|<=
literal|0
condition|)
block|{
name|val
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Unary boolean expression in executable SQL statement    */
specifier|public
name|Integer
name|execBoolUnarySql
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_expr_unaryContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_IS
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|exec
operator|.
name|getText
argument_list|(
name|ctx
argument_list|,
name|ctx
operator|.
name|T_IS
argument_list|()
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|ctx
operator|.
name|T_NULL
argument_list|()
operator|.
name|getSymbol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_BETWEEN
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|ctx
operator|.
name|T_BETWEEN
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|ctx
operator|.
name|T_AND
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|bool_expr_single_in
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|singleInClauseSql
argument_list|(
name|ctx
operator|.
name|bool_expr_single_in
argument_list|()
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|bool_expr_multi_in
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|multiInClauseSql
argument_list|(
name|ctx
operator|.
name|bool_expr_multi_in
argument_list|()
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Single value IN clause in executable SQL statement    */
specifier|public
name|void
name|singleInClauseSql
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_expr_single_inContext
name|ctx
parameter_list|,
name|StringBuilder
name|sql
parameter_list|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_NOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|ctx
operator|.
name|T_NOT
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|ctx
operator|.
name|T_IN
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" ("
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|select_stmt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_stmt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|cnt
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Multi-value IN clause in executable SQL statement    */
specifier|public
name|void
name|multiInClauseSql
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_expr_multi_inContext
name|ctx
parameter_list|,
name|StringBuilder
name|sql
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|cnt
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_NOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|ctx
operator|.
name|T_NOT
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|ctx
operator|.
name|T_IN
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" ("
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|select_stmt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_stmt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Addition operator    */
specifier|public
name|void
name|operatorAdd
parameter_list|(
name|HplsqlParser
operator|.
name|ExprContext
name|ctx
parameter_list|)
block|{
name|Var
name|v1
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Var
name|v2
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|v1
operator|.
name|value
operator|==
literal|null
operator|||
name|v2
operator|.
name|value
operator|==
literal|null
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|.
name|type
operator|==
name|Type
operator|.
name|BIGINT
operator|&&
name|v2
operator|.
name|type
operator|==
name|Type
operator|.
name|BIGINT
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
operator|(
name|Long
operator|)
name|v1
operator|.
name|value
operator|+
operator|(
name|Long
operator|)
name|v2
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|.
name|type
operator|==
name|Type
operator|.
name|BIGINT
operator|&&
name|v2
operator|.
name|type
operator|==
name|Type
operator|.
name|DATE
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|changeDateByInt
argument_list|(
operator|(
name|Date
operator|)
name|v2
operator|.
name|value
argument_list|,
operator|(
name|Long
operator|)
name|v1
operator|.
name|value
argument_list|,
literal|true
comment|/*add*/
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|.
name|type
operator|==
name|Type
operator|.
name|DATE
operator|&&
name|v2
operator|.
name|type
operator|==
name|Type
operator|.
name|BIGINT
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|changeDateByInt
argument_list|(
operator|(
name|Date
operator|)
name|v1
operator|.
name|value
argument_list|,
operator|(
name|Long
operator|)
name|v2
operator|.
name|value
argument_list|,
literal|true
comment|/*add*/
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|.
name|type
operator|==
name|Type
operator|.
name|DATE
operator|&&
name|v2
operator|.
name|type
operator|==
name|Type
operator|.
name|INTERVAL
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
operator|(
operator|(
name|Interval
operator|)
name|v2
operator|.
name|value
operator|)
operator|.
name|dateChange
argument_list|(
operator|(
name|Date
operator|)
name|v1
operator|.
name|value
argument_list|,
literal|true
comment|/*add*/
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|.
name|type
operator|==
name|Type
operator|.
name|TIMESTAMP
operator|&&
name|v2
operator|.
name|type
operator|==
name|Type
operator|.
name|INTERVAL
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
operator|(
operator|(
name|Interval
operator|)
name|v2
operator|.
name|value
operator|)
operator|.
name|timestampChange
argument_list|(
operator|(
name|Timestamp
operator|)
name|v1
operator|.
name|value
argument_list|,
literal|true
comment|/*add*/
argument_list|)
argument_list|,
name|v1
operator|.
name|scale
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Subtraction operator    */
specifier|public
name|void
name|operatorSub
parameter_list|(
name|HplsqlParser
operator|.
name|ExprContext
name|ctx
parameter_list|)
block|{
name|Var
name|v1
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Var
name|v2
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|v1
operator|.
name|value
operator|==
literal|null
operator|||
name|v2
operator|.
name|value
operator|==
literal|null
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|.
name|type
operator|==
name|Type
operator|.
name|BIGINT
operator|&&
name|v2
operator|.
name|type
operator|==
name|Type
operator|.
name|BIGINT
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
operator|(
name|Long
operator|)
name|v1
operator|.
name|value
operator|-
operator|(
name|Long
operator|)
name|v2
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|.
name|type
operator|==
name|Type
operator|.
name|DATE
operator|&&
name|v2
operator|.
name|type
operator|==
name|Type
operator|.
name|BIGINT
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|changeDateByInt
argument_list|(
operator|(
name|Date
operator|)
name|v1
operator|.
name|value
argument_list|,
operator|(
name|Long
operator|)
name|v2
operator|.
name|value
argument_list|,
literal|false
comment|/*subtract*/
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|.
name|type
operator|==
name|Type
operator|.
name|DATE
operator|&&
name|v2
operator|.
name|type
operator|==
name|Type
operator|.
name|INTERVAL
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
operator|(
operator|(
name|Interval
operator|)
name|v2
operator|.
name|value
operator|)
operator|.
name|dateChange
argument_list|(
operator|(
name|Date
operator|)
name|v1
operator|.
name|value
argument_list|,
literal|false
comment|/*subtract*/
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|.
name|type
operator|==
name|Type
operator|.
name|TIMESTAMP
operator|&&
name|v2
operator|.
name|type
operator|==
name|Type
operator|.
name|INTERVAL
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
operator|(
operator|(
name|Interval
operator|)
name|v2
operator|.
name|value
operator|)
operator|.
name|timestampChange
argument_list|(
operator|(
name|Timestamp
operator|)
name|v1
operator|.
name|value
argument_list|,
literal|false
comment|/*subtract*/
argument_list|)
argument_list|,
name|v1
operator|.
name|scale
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add or subtract the specified number of days from DATE    */
specifier|public
name|Var
name|changeDateByInt
parameter_list|(
name|Date
name|d
parameter_list|,
name|Long
name|i
parameter_list|,
name|boolean
name|add
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTimeInMillis
argument_list|(
name|d
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|days
init|=
name|i
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|add
condition|)
block|{
name|days
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
name|days
argument_list|)
expr_stmt|;
return|return
operator|new
name|Var
argument_list|(
operator|new
name|Date
argument_list|(
name|c
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Equality operator    */
specifier|public
name|void
name|operatorEqual
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_expr_binaryContext
name|ctx
parameter_list|,
name|boolean
name|equal
parameter_list|)
block|{
name|Var
name|v1
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Var
name|v2
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|eq
init|=
name|v1
operator|.
name|equals
argument_list|(
name|v2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|equal
condition|)
block|{
name|eq
operator|=
operator|!
name|eq
expr_stmt|;
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|eq
argument_list|)
expr_stmt|;
block|}
comment|/**    * Comparison operator    */
specifier|public
name|void
name|operatorCompare
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_expr_binaryContext
name|ctx
parameter_list|,
name|HplsqlParser
operator|.
name|Bool_expr_binary_operatorContext
name|op
parameter_list|)
block|{
name|Var
name|v1
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Var
name|v2
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|cmp
init|=
name|v1
operator|.
name|compareTo
argument_list|(
name|v2
argument_list|)
decl_stmt|;
name|boolean
name|bool
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|T_GREATER
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|bool
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|op
operator|.
name|T_GREATEREQUAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cmp
operator|>=
literal|0
condition|)
block|{
name|bool
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|.
name|T_LESS
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
name|bool
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|op
operator|.
name|T_LESSEQUAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cmp
operator|<=
literal|0
condition|)
block|{
name|bool
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|bool
argument_list|)
expr_stmt|;
block|}
comment|/**    * String concatenation operator    */
specifier|public
name|void
name|operatorConcat
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_concatContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|val
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|expr_concat_item
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|nulls
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|Var
name|c
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr_concat_item
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|val
operator|.
name|append
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|nulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nulls
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|evalString
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * String concatenation operator in executable SQL statement    */
specifier|public
name|void
name|operatorConcatSql
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_concatContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"CONCAT("
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|expr_concat_item
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr_concat_item
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|cnt
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simple CASE expression    */
specifier|public
name|void
name|execSimpleCase
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_case_simpleContext
name|ctx
parameter_list|)
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Var
name|val
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|cnt
condition|)
block|{
name|Var
name|when
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|compareTo
argument_list|(
name|when
argument_list|)
operator|==
literal|0
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|i
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|T_ELSE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|cnt
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evalNull
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Simple CASE expression in executable SQL statement    */
specifier|public
name|void
name|execSimpleCaseSql
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_case_simpleContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"CASE "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|T_WHEN
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" WHEN "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" THEN "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|T_ELSE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" ELSE "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|cnt
operator|*
literal|2
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|" END"
argument_list|)
expr_stmt|;
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Searched CASE expression    */
specifier|public
name|void
name|execSearchedCase
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_case_searchedContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|bool_expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|T_ELSE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evalNull
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Searched CASE expression in executable SQL statement    */
specifier|public
name|void
name|execSearchedCaseSql
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_case_searchedContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"CASE"
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|T_WHEN
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" WHEN "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" THEN "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|T_ELSE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" ELSE "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|cnt
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|" END"
argument_list|)
expr_stmt|;
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an interval variable    */
specifier|public
name|void
name|createInterval
parameter_list|(
name|HplsqlParser
operator|.
name|ExprContext
name|ctx
parameter_list|)
block|{
name|int
name|num
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Interval
name|interval
init|=
operator|new
name|Interval
argument_list|()
operator|.
name|set
argument_list|(
name|num
argument_list|,
name|ctx
operator|.
name|interval_item
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression and push the value to the stack    */
name|void
name|eval
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression and pop value from the stack    */
name|Var
name|evalPop
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exec
operator|.
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|stackPop
argument_list|()
return|;
block|}
return|return
name|Var
operator|.
name|Empty
return|;
block|}
comment|/**    * Evaluate the expression to specified String value    */
name|void
name|evalString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|evalString
parameter_list|(
name|StringBuilder
name|string
parameter_list|)
block|{
name|evalString
argument_list|(
name|string
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression to NULL    */
name|void
name|evalNull
parameter_list|()
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|Var
operator|.
name|Null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute rules    */
name|Integer
name|visit
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Execute children rules    */
name|Integer
name|visitChildren
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|visitChildren
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Trace information    */
specifier|public
name|void
name|trace
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|exec
operator|.
name|trace
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

