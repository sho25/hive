begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * HPL/SQL block scope  */
end_comment

begin_class
specifier|public
class|class
name|Scope
block|{
specifier|public
enum|enum
name|Type
block|{
name|GLOBAL
block|,
name|BEGIN_END
block|,
name|LOOP
block|,
name|HANDLER
block|,
name|PACKAGE
block|,
name|ROUTINE
block|}
empty_stmt|;
name|ArrayList
argument_list|<
name|Var
argument_list|>
name|vars
init|=
operator|new
name|ArrayList
argument_list|<
name|Var
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Handler
argument_list|>
name|handlers
init|=
operator|new
name|ArrayList
argument_list|<
name|Handler
argument_list|>
argument_list|()
decl_stmt|;
name|Scope
name|parent
decl_stmt|;
name|Type
name|type
decl_stmt|;
name|Package
name|pack
decl_stmt|;
name|Scope
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|pack
operator|=
literal|null
expr_stmt|;
block|}
name|Scope
parameter_list|(
name|Scope
name|parent
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|pack
operator|=
literal|null
expr_stmt|;
block|}
name|Scope
parameter_list|(
name|Scope
name|parent
parameter_list|,
name|Type
name|type
parameter_list|,
name|Package
name|pack
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|pack
operator|=
name|pack
expr_stmt|;
block|}
comment|/**    * Add a local variable    */
name|void
name|addVariable
parameter_list|(
name|Var
name|var
parameter_list|)
block|{
name|vars
operator|.
name|add
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a condition handler    */
name|void
name|addHandler
parameter_list|(
name|Handler
name|handler
parameter_list|)
block|{
name|handlers
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the parent scope    */
name|Scope
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
block|}
end_class

end_unit

