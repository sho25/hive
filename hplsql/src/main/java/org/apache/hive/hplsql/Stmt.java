begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|Var
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * HPL/SQL statements execution  */
end_comment

begin_class
specifier|public
class|class
name|Stmt
block|{
name|Exec
name|exec
init|=
literal|null
decl_stmt|;
name|Stack
argument_list|<
name|Var
argument_list|>
name|stack
init|=
literal|null
decl_stmt|;
name|Conf
name|conf
decl_stmt|;
name|Meta
name|meta
decl_stmt|;
name|boolean
name|trace
init|=
literal|false
decl_stmt|;
name|Stmt
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|exec
operator|=
name|e
expr_stmt|;
name|stack
operator|=
name|exec
operator|.
name|getStack
argument_list|()
expr_stmt|;
name|conf
operator|=
name|exec
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|meta
operator|=
name|exec
operator|.
name|getMeta
argument_list|()
expr_stmt|;
name|trace
operator|=
name|exec
operator|.
name|getTrace
argument_list|()
expr_stmt|;
block|}
comment|/**    * ALLOCATE CURSOR statement    */
specifier|public
name|Integer
name|allocateCursor
parameter_list|(
name|HplsqlParser
operator|.
name|Allocate_cursor_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"ALLOCATE CURSOR"
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|Var
name|cur
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_PROCEDURE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cur
operator|=
name|exec
operator|.
name|consumeReturnCursor
argument_list|(
name|ctx
operator|.
name|ident
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_RESULT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cur
operator|=
name|exec
operator|.
name|findVariable
argument_list|(
name|ctx
operator|.
name|ident
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cur
operator|!=
literal|null
operator|&&
name|cur
operator|.
name|type
operator|!=
name|Type
operator|.
name|RS_LOCATOR
condition|)
block|{
name|cur
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cur
operator|==
literal|null
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Cursor for procedure not found: "
operator|+
name|name
argument_list|)
expr_stmt|;
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|exec
operator|.
name|addVariable
argument_list|(
operator|new
name|Var
argument_list|(
name|name
argument_list|,
name|Type
operator|.
name|CURSOR
argument_list|,
name|cur
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * ASSOCIATE LOCATOR statement    */
specifier|public
name|Integer
name|associateLocator
parameter_list|(
name|HplsqlParser
operator|.
name|Associate_locator_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"ASSOCIATE LOCATOR"
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|cnt
operator|<
literal|2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|String
name|procedure
init|=
name|ctx
operator|.
name|ident
argument_list|(
name|cnt
operator|-
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Var
name|cur
init|=
name|exec
operator|.
name|consumeReturnCursor
argument_list|(
name|procedure
argument_list|)
decl_stmt|;
if|if
condition|(
name|cur
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|(
name|i
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|Var
name|loc
init|=
name|exec
operator|.
name|findVariable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|==
literal|null
condition|)
block|{
name|loc
operator|=
operator|new
name|Var
argument_list|(
name|name
argument_list|,
name|Type
operator|.
name|RS_LOCATOR
argument_list|,
name|cur
operator|.
name|value
argument_list|)
expr_stmt|;
name|exec
operator|.
name|addVariable
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loc
operator|.
name|setValue
argument_list|(
name|cur
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * DECLARE cursor statement    */
specifier|public
name|Integer
name|declareCursor
parameter_list|(
name|HplsqlParser
operator|.
name|Declare_cursor_itemContext
name|ctx
parameter_list|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"DECLARE CURSOR "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
operator|new
name|Query
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|expr
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setExprCtx
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|select_stmt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setSelectCtx
argument_list|(
name|ctx
operator|.
name|select_stmt
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|cursor_with_return
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setWithReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Var
name|var
init|=
operator|new
name|Var
argument_list|(
name|name
argument_list|,
name|Type
operator|.
name|CURSOR
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|exec
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * CREATE TABLE statement    */
specifier|public
name|Integer
name|createTable
parameter_list|(
name|HplsqlParser
operator|.
name|Create_table_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"CREATE TABLE"
argument_list|)
expr_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|ctx
operator|.
name|T_CREATE
argument_list|()
argument_list|,
name|ctx
operator|.
name|T_TABLE
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|evalPop
argument_list|(
name|ctx
operator|.
name|table_name
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ctx
operator|.
name|T_TABLE
argument_list|()
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|ctx
operator|.
name|table_name
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|last
init|=
name|ctx
operator|.
name|table_name
argument_list|()
operator|.
name|getStop
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|create_table_preoptions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|preopt
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|create_table_preoptions
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|preopt
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|preopt
argument_list|)
expr_stmt|;
block|}
name|last
operator|=
name|ctx
operator|.
name|create_table_preoptions
argument_list|()
operator|.
name|stop
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
name|createTableDefinition
argument_list|(
name|ctx
operator|.
name|create_table_definition
argument_list|()
argument_list|,
name|last
argument_list|)
argument_list|)
expr_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Get CREATE TABLE definition (columns or query)    */
name|String
name|createTableDefinition
parameter_list|(
name|HplsqlParser
operator|.
name|Create_table_definitionContext
name|ctx
parameter_list|,
name|Token
name|last
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|HplsqlParser
operator|.
name|Create_table_columnsContext
name|colCtx
init|=
name|ctx
operator|.
name|create_table_columns
argument_list|()
decl_stmt|;
if|if
condition|(
name|colCtx
operator|!=
literal|null
condition|)
block|{
name|int
name|cnt
init|=
name|colCtx
operator|.
name|create_table_columns_item
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|HplsqlParser
operator|.
name|Create_table_columns_itemContext
name|col
init|=
name|colCtx
operator|.
name|create_table_columns_item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|.
name|create_table_column_cons
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|last
operator|=
name|col
operator|.
name|getStop
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|evalPop
argument_list|(
name|col
operator|.
name|column_name
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|last
argument_list|,
name|col
operator|.
name|column_name
argument_list|()
operator|.
name|getStop
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|exec
operator|.
name|evalPop
argument_list|(
name|col
operator|.
name|dtype
argument_list|()
argument_list|,
name|col
operator|.
name|dtype_len
argument_list|()
argument_list|)
argument_list|,
name|col
operator|.
name|column_name
argument_list|()
operator|.
name|getStop
argument_list|()
argument_list|,
name|col
operator|.
name|dtype
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|last
operator|=
name|col
operator|.
name|getStop
argument_list|()
expr_stmt|;
block|}
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|ctx
operator|.
name|T_CLOSE_P
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
name|last
argument_list|,
name|ctx
operator|.
name|T_CLOSE_P
argument_list|()
operator|.
name|getSymbol
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// CREATE TABLE AS SELECT statement
else|else
block|{
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_stmt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|last
argument_list|,
name|ctx
operator|.
name|select_stmt
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_CLOSE_P
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|ctx
operator|.
name|T_CLOSE_P
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
name|ctx
operator|.
name|select_stmt
argument_list|()
operator|.
name|stop
argument_list|,
name|ctx
operator|.
name|T_CLOSE_P
argument_list|()
operator|.
name|getSymbol
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|HplsqlParser
operator|.
name|Create_table_optionsContext
name|options
init|=
name|ctx
operator|.
name|create_table_options
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
name|String
name|opt
init|=
name|evalPop
argument_list|(
name|options
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|opt
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sql
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * CREATE TABLE options for Hive    */
specifier|public
name|Integer
name|createTableHiveOptions
parameter_list|(
name|HplsqlParser
operator|.
name|Create_table_options_hive_itemContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|create_table_hive_row_format
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|createTableHiveRowFormat
argument_list|(
name|ctx
operator|.
name|create_table_hive_row_format
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_STORED
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|evalString
argument_list|(
name|exec
operator|.
name|getText
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|Integer
name|createTableHiveRowFormat
parameter_list|(
name|HplsqlParser
operator|.
name|Create_table_hive_row_formatContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"ROW FORMAT DELIMITED"
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|create_table_hive_row_format_fields
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|HplsqlParser
operator|.
name|Create_table_hive_row_format_fieldsContext
name|c
init|=
name|ctx
operator|.
name|create_table_hive_row_format_fields
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|T_FIELDS
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" FIELDS TERMINATED BY "
operator|+
name|evalPop
argument_list|(
name|c
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toSqlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|T_LINES
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" LINES TERMINATED BY "
operator|+
name|evalPop
argument_list|(
name|c
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toSqlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|evalString
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * CREATE TABLE options for MySQL    */
specifier|public
name|Integer
name|createTableMysqlOptions
parameter_list|(
name|HplsqlParser
operator|.
name|Create_table_options_mysql_itemContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|T_COMMENT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|evalString
argument_list|(
name|ctx
operator|.
name|T_COMMENT
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toSqlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * DECLARE TEMPORARY TABLE statement     */
specifier|public
name|Integer
name|declareTemporaryTable
parameter_list|(
name|HplsqlParser
operator|.
name|Declare_temporary_table_itemContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"DECLARE TEMPORARY TABLE"
argument_list|)
expr_stmt|;
return|return
name|createTemporaryTable
argument_list|(
name|ctx
operator|.
name|ident
argument_list|()
argument_list|,
name|ctx
operator|.
name|create_table_definition
argument_list|()
argument_list|,
name|ctx
operator|.
name|create_table_preoptions
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * CREATE DATABASE | SCHEMA statement    */
specifier|public
name|Integer
name|createDatabase
parameter_list|(
name|HplsqlParser
operator|.
name|Create_database_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"CREATE DATABASE"
argument_list|)
expr_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|T_CREATE
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_DATABASE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|T_DATABASE
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|T_SCHEMA
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|T_IF
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|exec
operator|.
name|getText
argument_list|(
name|ctx
argument_list|,
name|ctx
operator|.
name|T_IF
argument_list|()
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|ctx
operator|.
name|T_EXISTS
argument_list|()
operator|.
name|getSymbol
argument_list|()
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|create_database_option
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|HplsqlParser
operator|.
name|Create_database_optionContext
name|option
init|=
name|ctx
operator|.
name|create_database_option
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|.
name|T_COMMENT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|option
operator|.
name|T_COMMENT
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|evalPop
argument_list|(
name|option
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toSqlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|T_LOCATION
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|option
operator|.
name|T_LOCATION
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|evalPop
argument_list|(
name|option
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toSqlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * CREATE LOCAL TEMPORARY | VOLATILE TABLE statement     */
specifier|public
name|Integer
name|createLocalTemporaryTable
parameter_list|(
name|HplsqlParser
operator|.
name|Create_local_temp_table_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"CREATE LOCAL TEMPORARY TABLE"
argument_list|)
expr_stmt|;
return|return
name|createTemporaryTable
argument_list|(
name|ctx
operator|.
name|ident
argument_list|()
argument_list|,
name|ctx
operator|.
name|create_table_definition
argument_list|()
argument_list|,
name|ctx
operator|.
name|create_table_preoptions
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a temporary table statement     */
specifier|public
name|Integer
name|createTemporaryTable
parameter_list|(
name|HplsqlParser
operator|.
name|IdentContext
name|identCtx
parameter_list|,
name|HplsqlParser
operator|.
name|Create_table_definitionContext
name|defCtx
parameter_list|,
name|HplsqlParser
operator|.
name|Create_table_preoptionsContext
name|optCtx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|identCtx
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|managedName
init|=
literal|null
decl_stmt|;
name|Token
name|last
init|=
name|identCtx
operator|.
name|getStop
argument_list|()
decl_stmt|;
if|if
condition|(
name|optCtx
operator|!=
literal|null
condition|)
block|{
name|last
operator|=
name|optCtx
operator|.
name|stop
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|tempTables
operator|==
name|Conf
operator|.
name|TempTables
operator|.
name|NATIVE
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"CREATE TEMPORARY TABLE "
operator|+
name|name
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|createTableDefinition
argument_list|(
name|defCtx
argument_list|,
name|last
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|conf
operator|.
name|tempTables
operator|==
name|Conf
operator|.
name|TempTables
operator|.
name|MANAGED
condition|)
block|{
name|managedName
operator|=
name|name
operator|+
literal|"_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|tempTablesSchema
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|managedName
operator|=
name|conf
operator|.
name|tempTablesSchema
operator|+
literal|"."
operator|+
name|managedName
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|"CREATE TABLE "
operator|+
name|managedName
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|createTableDefinition
argument_list|(
name|defCtx
argument_list|,
name|last
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|tempTablesLocation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"\nLOCATION '"
operator|+
name|conf
operator|.
name|tempTablesLocation
operator|+
literal|"/"
operator|+
name|managedName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
literal|null
argument_list|,
literal|"Managed table name: "
operator|+
name|managedName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
literal|null
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sql
operator|!=
literal|null
condition|)
block|{
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
literal|null
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|managedName
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|addManagedTable
argument_list|(
name|name
argument_list|,
name|managedName
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * DESCRIBE statement    */
specifier|public
name|Integer
name|describe
parameter_list|(
name|HplsqlParser
operator|.
name|Describe_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"DESCRIBE"
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
literal|"DESCRIBE "
operator|+
name|evalPop
argument_list|(
name|ctx
operator|.
name|table_name
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
try|try
block|{
name|ResultSet
name|rs
init|=
name|query
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|ResultSetMetaData
name|rm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
name|rm
operator|=
name|rs
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
name|int
name|cols
init|=
name|rm
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|cols
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * DROP statement    */
specifier|public
name|Integer
name|drop
parameter_list|(
name|HplsqlParser
operator|.
name|Drop_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"DROP"
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_TABLE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|=
literal|"DROP TABLE "
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_EXISTS
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|+=
literal|"IF EXISTS "
expr_stmt|;
block|}
name|sql
operator|+=
name|evalPop
argument_list|(
name|ctx
operator|.
name|table_name
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_DATABASE
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|T_SCHEMA
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|=
literal|"DROP DATABASE "
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_EXISTS
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|+=
literal|"IF EXISTS "
expr_stmt|;
block|}
name|sql
operator|+=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sql
operator|!=
literal|null
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * TRUNCATE statement    */
specifier|public
name|Integer
name|truncate
parameter_list|(
name|HplsqlParser
operator|.
name|Truncate_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"TRUNCATE"
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
literal|"TRUNCATE TABLE "
operator|+
name|evalPop
argument_list|(
name|ctx
operator|.
name|table_name
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * OPEN cursor statement    */
specifier|public
name|Integer
name|open
parameter_list|(
name|HplsqlParser
operator|.
name|Open_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"OPEN"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|Var
name|var
init|=
literal|null
decl_stmt|;
name|String
name|cursor
init|=
name|ctx
operator|.
name|L_ID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_FOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// SELECT statement or dynamic SQL
if|if
condition|(
name|ctx
operator|.
name|expr
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sql
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_stmt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|query
operator|=
operator|new
name|Query
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|var
operator|=
name|exec
operator|.
name|findCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
comment|// Can be a ref cursor variable
if|if
condition|(
name|var
operator|==
literal|null
condition|)
block|{
name|var
operator|=
operator|new
name|Var
argument_list|(
name|cursor
argument_list|,
name|Type
operator|.
name|CURSOR
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|exec
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|var
operator|.
name|setValue
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Declared cursor
name|var
operator|=
name|exec
operator|.
name|findVariable
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
operator|&&
name|var
operator|.
name|type
operator|==
name|Type
operator|.
name|CURSOR
condition|)
block|{
name|query
operator|=
operator|(
name|Query
operator|)
name|var
operator|.
name|value
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|sqlExpr
operator|!=
literal|null
condition|)
block|{
name|sql
operator|=
name|evalPop
argument_list|(
name|query
operator|.
name|sqlExpr
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|query
operator|.
name|setSql
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|.
name|sqlSelect
operator|!=
literal|null
condition|)
block|{
name|sql
operator|=
name|evalPop
argument_list|(
name|query
operator|.
name|sqlSelect
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|query
operator|.
name|setSql
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
name|cursor
operator|+
literal|": "
operator|+
name|sql
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|executeQuery
argument_list|(
name|ctx
argument_list|,
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|exec
operator|.
name|getOffline
argument_list|()
condition|)
block|{
name|exec
operator|.
name|setSqlCode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|.
name|getWithReturn
argument_list|()
condition|)
block|{
name|exec
operator|.
name|addReturnCursor
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Cursor not found: "
operator|+
name|cursor
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setSqlCode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * FETCH cursor statement    */
specifier|public
name|Integer
name|fetch
parameter_list|(
name|HplsqlParser
operator|.
name|Fetch_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"FETCH"
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|ctx
operator|.
name|L_ID
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Var
name|cursor
init|=
name|exec
operator|.
name|findCursor
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursor
operator|==
literal|null
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Cursor not found: "
operator|+
name|name
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setSqlCode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|cursor
operator|.
name|value
operator|==
literal|null
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Cursor not open: "
operator|+
name|name
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setSqlCode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|exec
operator|.
name|getOffline
argument_list|()
condition|)
block|{
name|exec
operator|.
name|setSqlCode
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|NOTFOUND
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// Assign values from the row to local variables
try|try
block|{
name|Query
name|query
init|=
operator|(
name|Query
operator|)
name|cursor
operator|.
name|value
decl_stmt|;
name|ResultSet
name|rs
init|=
name|query
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|ResultSetMetaData
name|rsm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
name|rsm
operator|=
name|rs
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rs
operator|!=
literal|null
operator|&&
name|rsm
operator|!=
literal|null
condition|)
block|{
name|int
name|cols
init|=
name|ctx
operator|.
name|L_ID
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|query
operator|.
name|setFetch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|cols
condition|;
name|i
operator|++
control|)
block|{
name|Var
name|var
init|=
name|exec
operator|.
name|findVariable
argument_list|(
name|ctx
operator|.
name|L_ID
argument_list|(
name|i
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|var
operator|.
name|type
operator|!=
name|Var
operator|.
name|Type
operator|.
name|ROW
condition|)
block|{
name|var
operator|.
name|setValue
argument_list|(
name|rs
argument_list|,
name|rsm
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|var
operator|.
name|setValues
argument_list|(
name|rs
argument_list|,
name|rsm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
name|var
argument_list|,
name|rs
argument_list|,
name|rsm
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Variable not found: "
operator|+
name|ctx
operator|.
name|L_ID
argument_list|(
name|i
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|exec
operator|.
name|incRowCount
argument_list|()
expr_stmt|;
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setFetch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setSqlCode
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|exec
operator|.
name|setSqlCode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|exec
operator|.
name|setSqlCode
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * CLOSE cursor statement    */
specifier|public
name|Integer
name|close
parameter_list|(
name|HplsqlParser
operator|.
name|Close_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"CLOSE"
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|ctx
operator|.
name|L_ID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Var
name|var
init|=
name|exec
operator|.
name|findVariable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
operator|&&
name|var
operator|.
name|type
operator|==
name|Type
operator|.
name|CURSOR
condition|)
block|{
name|exec
operator|.
name|closeQuery
argument_list|(
operator|(
name|Query
operator|)
name|var
operator|.
name|value
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setSqlCode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Cursor not found: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * INCLUDE statement    */
specifier|public
name|Integer
name|include
parameter_list|(
name|HplsqlParser
operator|.
name|Include_stmtContext
name|ctx
parameter_list|)
block|{
name|String
name|file
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|file_name
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
name|ctx
operator|.
name|file_name
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"INCLUDE "
operator|+
name|file
argument_list|)
expr_stmt|;
name|exec
operator|.
name|includeFile
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * IF statement (PL/SQL syntax)    */
specifier|public
name|Integer
name|ifPlsql
parameter_list|(
name|HplsqlParser
operator|.
name|If_plsql_stmtContext
name|ctx
parameter_list|)
block|{
name|boolean
name|trueExecuted
init|=
literal|false
decl_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"IF"
argument_list|)
expr_stmt|;
if|if
condition|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"IF TRUE executed"
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|trueExecuted
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|elseif_block
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|elseif_block
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|elseif_block
argument_list|(
name|i
argument_list|)
operator|.
name|bool_expr
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"ELSE IF executed"
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|elseif_block
argument_list|(
name|i
argument_list|)
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|trueExecuted
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|trueExecuted
operator|&&
name|ctx
operator|.
name|else_block
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"ELSE executed"
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|else_block
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * IF statement (Transact-SQL syntax)    */
specifier|public
name|Integer
name|ifTsql
parameter_list|(
name|HplsqlParser
operator|.
name|If_tsql_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"IF"
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exec
operator|.
name|stackPop
argument_list|()
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"IF TRUE executed"
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|single_block_stmt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_ELSE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"ELSE executed"
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|single_block_stmt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * IF statement (BTEQ syntax)    */
specifier|public
name|Integer
name|ifBteq
parameter_list|(
name|HplsqlParser
operator|.
name|If_bteq_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"IF"
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exec
operator|.
name|stackPop
argument_list|()
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"IF TRUE executed"
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|single_block_stmt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Assignment from SELECT statement     */
specifier|public
name|Integer
name|assignFromSelect
parameter_list|(
name|HplsqlParser
operator|.
name|Assignment_stmt_select_itemContext
name|ctx
parameter_list|)
block|{
name|String
name|sql
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_stmt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|conn
init|=
name|exec
operator|.
name|getStatementConnection
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeQuery
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|,
name|conn
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
try|try
block|{
name|ResultSet
name|rs
init|=
name|query
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|ResultSetMetaData
name|rm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
name|rm
operator|=
name|rs
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|Var
name|var
init|=
name|exec
operator|.
name|findVariable
argument_list|(
name|ctx
operator|.
name|ident
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
name|var
operator|.
name|setValue
argument_list|(
name|rs
argument_list|,
name|rm
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"COLUMN: "
operator|+
name|rm
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
operator|+
literal|", "
operator|+
name|rm
operator|.
name|getColumnTypeName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SET "
operator|+
name|var
operator|.
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|var
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Variable not found: "
operator|+
name|ctx
operator|.
name|ident
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|exec
operator|.
name|incRowCount
argument_list|()
expr_stmt|;
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|setSqlCode
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|NOTFOUND
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
finally|finally
block|{
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * SQL INSERT statement    */
specifier|public
name|Integer
name|insert
parameter_list|(
name|HplsqlParser
operator|.
name|Insert_stmtContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|stmtConnList
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|select_stmt
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|insertSelect
argument_list|(
name|ctx
argument_list|)
return|;
block|}
return|return
name|insertValues
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * SQL INSERT SELECT statement    */
specifier|public
name|Integer
name|insertSelect
parameter_list|(
name|HplsqlParser
operator|.
name|Insert_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"INSERT SELECT"
argument_list|)
expr_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|T_INSERT
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_OVERWRITE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|T_OVERWRITE
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|ctx
operator|.
name|T_TABLE
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|T_INTO
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_TABLE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|T_TABLE
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|table_name
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_stmt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * SQL INSERT VALUES statement    */
specifier|public
name|Integer
name|insertValues
parameter_list|(
name|HplsqlParser
operator|.
name|Insert_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"INSERT VALUES"
argument_list|)
expr_stmt|;
name|String
name|table
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|table_name
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|conn
init|=
name|exec
operator|.
name|getObjectConnection
argument_list|(
name|ctx
operator|.
name|table_name
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|Conn
operator|.
name|Type
name|type
init|=
name|exec
operator|.
name|getConnectionType
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Conn
operator|.
name|Type
operator|.
name|HIVE
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|table
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|insertValues
operator|==
name|Conf
operator|.
name|InsertValues
operator|.
name|NATIVE
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"VALUES\n("
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"INSERT INTO "
operator|+
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|insert_stmt_cols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|exec
operator|.
name|getFormattedText
argument_list|(
name|ctx
operator|.
name|insert_stmt_cols
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|" VALUES\n("
argument_list|)
expr_stmt|;
block|}
name|int
name|rows
init|=
name|ctx
operator|.
name|insert_stmt_rows
argument_list|()
operator|.
name|insert_stmt_row
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
name|i
operator|++
control|)
block|{
name|HplsqlParser
operator|.
name|Insert_stmt_rowContext
name|row
init|=
name|ctx
operator|.
name|insert_stmt_rows
argument_list|()
operator|.
name|insert_stmt_row
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|cols
init|=
name|row
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
condition|;
name|j
operator|++
control|)
block|{
name|String
name|value
init|=
name|evalPop
argument_list|(
name|row
operator|.
name|expr
argument_list|(
name|j
argument_list|)
argument_list|)
operator|.
name|toSqlString
argument_list|()
decl_stmt|;
if|if
condition|(
name|j
operator|==
literal|0
operator|&&
name|type
operator|==
name|Conn
operator|.
name|Type
operator|.
name|HIVE
operator|&&
name|conf
operator|.
name|insertValues
operator|==
name|Conf
operator|.
name|InsertValues
operator|.
name|SELECT
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"SELECT "
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|+
literal|1
operator|!=
name|cols
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|!=
name|Conn
operator|.
name|Type
operator|.
name|HIVE
operator|||
name|conf
operator|.
name|insertValues
operator|==
name|Conf
operator|.
name|InsertValues
operator|.
name|NATIVE
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|rows
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"),\n("
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Conn
operator|.
name|Type
operator|.
name|HIVE
operator|&&
name|conf
operator|.
name|insertValues
operator|==
name|Conf
operator|.
name|InsertValues
operator|.
name|SELECT
condition|)
block|{
if|if
condition|(
name|conf
operator|.
name|dualTable
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" FROM "
operator|+
name|conf
operator|.
name|dualTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|rows
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"\nUNION ALL\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|,
name|conn
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|conn
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * INSERT DIRECTORY statement    */
specifier|public
name|Integer
name|insertDirectory
parameter_list|(
name|HplsqlParser
operator|.
name|Insert_directory_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"INSERT DIRECTORY"
argument_list|)
expr_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|T_INSERT
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|ctx
operator|.
name|T_OVERWRITE
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_LOCAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|T_LOCAL
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|T_DIRECTORY
argument_list|()
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr_file
argument_list|()
argument_list|)
operator|.
name|toSqlString
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr_select
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|conn
init|=
name|exec
operator|.
name|getStatementConnection
argument_list|()
decl_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|,
name|conn
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|conn
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * GET DIAGNOSTICS EXCEPTION statement    */
specifier|public
name|Integer
name|getDiagnosticsException
parameter_list|(
name|HplsqlParser
operator|.
name|Get_diag_stmt_exception_itemContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"GET DIAGNOSTICS EXCEPTION"
argument_list|)
expr_stmt|;
name|Signal
name|signal
init|=
name|exec
operator|.
name|signalPeek
argument_list|()
decl_stmt|;
if|if
condition|(
name|signal
operator|==
literal|null
operator|||
operator|(
name|signal
operator|!=
literal|null
operator|&&
name|signal
operator|.
name|type
operator|!=
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
operator|)
condition|)
block|{
name|signal
operator|=
name|exec
operator|.
name|currentSignal
expr_stmt|;
block|}
if|if
condition|(
name|signal
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|setVariable
argument_list|(
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
name|signal
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * GET DIAGNOSTICS ROW_COUNT statement    */
specifier|public
name|Integer
name|getDiagnosticsRowCount
parameter_list|(
name|HplsqlParser
operator|.
name|Get_diag_stmt_rowcount_itemContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"GET DIAGNOSTICS ROW_COUNT"
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setVariable
argument_list|(
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
name|exec
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * USE statement    */
specifier|public
name|Integer
name|use
parameter_list|(
name|HplsqlParser
operator|.
name|Use_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"USE"
argument_list|)
expr_stmt|;
return|return
name|use
argument_list|(
name|ctx
argument_list|,
name|ctx
operator|.
name|T_USE
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|meta
operator|.
name|normalizeIdentifierPart
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Integer
name|use
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SQL statement: "
operator|+
name|sql
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlCode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**     * VALUES statement    */
specifier|public
name|Integer
name|values
parameter_list|(
name|HplsqlParser
operator|.
name|Values_into_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"VALUES statement"
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Number of variables and assignment expressions
name|int
name|ecnt
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|(
name|i
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|ecnt
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Var
name|var
init|=
name|exec
operator|.
name|setVariable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SET "
operator|+
name|name
operator|+
literal|" = "
operator|+
name|var
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * WHILE statement    */
specifier|public
name|Integer
name|while_
parameter_list|(
name|HplsqlParser
operator|.
name|While_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"WHILE - ENTERED"
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|exec
operator|.
name|labelPop
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|exec
operator|.
name|enterScope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|LOOP
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|leaveScope
argument_list|()
expr_stmt|;
if|if
condition|(
name|canContinue
argument_list|(
name|label
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
break|break;
block|}
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"WHILE - LEFT"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * FOR cursor statement    */
specifier|public
name|Integer
name|forCursor
parameter_list|(
name|HplsqlParser
operator|.
name|For_cursor_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"FOR CURSOR - ENTERED"
argument_list|)
expr_stmt|;
name|exec
operator|.
name|enterScope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|LOOP
argument_list|)
expr_stmt|;
name|String
name|cursor
init|=
name|ctx
operator|.
name|L_ID
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_stmt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeQuery
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SELECT completed successfully"
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
try|try
block|{
name|ResultSet
name|rs
init|=
name|query
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
name|ResultSetMetaData
name|rm
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|int
name|cols
init|=
name|rm
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
name|Row
name|row
init|=
operator|new
name|Row
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|cols
condition|;
name|i
operator|++
control|)
block|{
name|row
operator|.
name|addColumn
argument_list|(
name|rm
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
argument_list|,
name|rm
operator|.
name|getColumnTypeName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Var
name|var
init|=
operator|new
name|Var
argument_list|(
name|cursor
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|exec
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|var
operator|.
name|setValues
argument_list|(
name|rs
argument_list|,
name|rm
argument_list|)
expr_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
name|var
argument_list|,
name|rs
argument_list|,
name|rm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|visit
argument_list|(
name|ctx
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|incRowCount
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
name|exec
operator|.
name|leaveScope
argument_list|()
expr_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"FOR CURSOR - LEFT"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * FOR (integer range) statement    */
specifier|public
name|Integer
name|forRange
parameter_list|(
name|HplsqlParser
operator|.
name|For_range_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"FOR RANGE - ENTERED"
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|step
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|1L
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|exec
operator|.
name|enterScope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|LOOP
argument_list|)
expr_stmt|;
name|Var
name|index
init|=
name|setIndex
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|exec
operator|.
name|addVariable
argument_list|(
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|+=
name|step
control|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|updateIndex
argument_list|(
name|step
argument_list|,
name|index
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|leaveScope
argument_list|()
expr_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"FOR RANGE - LEFT"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * To set the Value index for FOR Statement    */
specifier|private
name|Var
name|setIndex
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|HplsqlParser
operator|.
name|For_range_stmtContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|T_REVERSE
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|new
name|Var
argument_list|(
name|ctx
operator|.
name|L_ID
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
operator|new
name|Long
argument_list|(
name|start
argument_list|)
argument_list|)
return|;
else|else
return|return
operator|new
name|Var
argument_list|(
name|ctx
operator|.
name|L_ID
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
operator|new
name|Long
argument_list|(
name|end
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * To update the value of index for FOR Statement    */
specifier|private
name|void
name|updateIndex
parameter_list|(
name|int
name|step
parameter_list|,
name|Var
name|index
parameter_list|,
name|HplsqlParser
operator|.
name|For_range_stmtContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|T_REVERSE
argument_list|()
operator|==
literal|null
condition|)
name|index
operator|.
name|increment
argument_list|(
operator|new
name|Long
argument_list|(
name|step
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|index
operator|.
name|decrement
argument_list|(
operator|new
name|Long
argument_list|(
name|step
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * EXEC, EXECUTE and EXECUTE IMMEDIATE statement to execute dynamic SQL or stored procedure    */
specifier|public
name|Integer
name|exec
parameter_list|(
name|HplsqlParser
operator|.
name|Exec_stmtContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|execProc
argument_list|(
name|ctx
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"EXECUTE"
argument_list|)
expr_stmt|;
name|Var
name|vsql
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|vsql
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SQL statement: "
operator|+
name|sql
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|ResultSet
name|rs
init|=
name|query
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ResultSetMetaData
name|rm
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_INTO
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cols
init|=
name|ctx
operator|.
name|L_ID
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
condition|;
name|i
operator|++
control|)
block|{
name|Var
name|var
init|=
name|exec
operator|.
name|findVariable
argument_list|(
name|ctx
operator|.
name|L_ID
argument_list|(
name|i
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|var
operator|.
name|type
operator|!=
name|Var
operator|.
name|Type
operator|.
name|ROW
condition|)
block|{
name|var
operator|.
name|setValue
argument_list|(
name|rs
argument_list|,
name|rm
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|var
operator|.
name|setValues
argument_list|(
name|rs
argument_list|,
name|rm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
name|var
argument_list|,
name|rs
argument_list|,
name|rm
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Variable not found: "
operator|+
name|ctx
operator|.
name|L_ID
argument_list|(
name|i
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|exec
operator|.
name|setSqlCode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Print the results
else|else
block|{
name|int
name|cols
init|=
name|rm
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|cols
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|exec
operator|.
name|setSqlCode
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * EXEC to execute a stored procedure    */
specifier|public
name|Boolean
name|execProc
parameter_list|(
name|HplsqlParser
operator|.
name|Exec_stmtContext
name|ctx
parameter_list|)
block|{
name|String
name|name
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|exec
operator|.
name|function
operator|.
name|isProc
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|exec
operator|.
name|function
operator|.
name|execProc
argument_list|(
name|name
argument_list|,
name|ctx
operator|.
name|expr_func_params
argument_list|()
argument_list|,
name|ctx
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * EXIT statement (leave the specified loop with a condition)    */
specifier|public
name|Integer
name|exit
parameter_list|(
name|HplsqlParser
operator|.
name|Exit_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"EXIT"
argument_list|)
expr_stmt|;
name|String
name|label
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|L_ID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|label
operator|=
name|ctx
operator|.
name|L_ID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|T_WHEN
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|leaveLoop
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|leaveLoop
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * BREAK statement (leave the innermost loop unconditionally)    */
specifier|public
name|Integer
name|break_
parameter_list|(
name|HplsqlParser
operator|.
name|Break_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"BREAK"
argument_list|)
expr_stmt|;
name|leaveLoop
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * LEAVE statement (leave the specified loop unconditionally)    */
specifier|public
name|Integer
name|leave
parameter_list|(
name|HplsqlParser
operator|.
name|Leave_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"LEAVE"
argument_list|)
expr_stmt|;
name|String
name|label
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|L_ID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|label
operator|=
name|ctx
operator|.
name|L_ID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|leaveLoop
argument_list|(
name|label
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Leave the specified or innermost loop unconditionally    */
specifier|public
name|void
name|leaveLoop
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|LEAVE_LOOP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * UPDATE statement    */
specifier|public
name|Integer
name|update
parameter_list|(
name|HplsqlParser
operator|.
name|Update_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"UPDATE"
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
name|exec
operator|.
name|getFormattedText
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * DELETE statement    */
specifier|public
name|Integer
name|delete
parameter_list|(
name|HplsqlParser
operator|.
name|Delete_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"DELETE"
argument_list|)
expr_stmt|;
name|String
name|table
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|table_name
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_ALL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"DELETE FROM "
operator|+
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|where_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolean
name|oldBuildSql
init|=
name|exec
operator|.
name|buildSql
decl_stmt|;
name|exec
operator|.
name|buildSql
operator|=
literal|true
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|evalPop
argument_list|(
name|ctx
operator|.
name|where_clause
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|buildSql
operator|=
name|oldBuildSql
expr_stmt|;
block|}
block|}
else|else
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|table
argument_list|)
expr_stmt|;
block|}
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * MERGE statement    */
specifier|public
name|Integer
name|merge
parameter_list|(
name|HplsqlParser
operator|.
name|Merge_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"MERGE"
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
name|exec
operator|.
name|getFormattedText
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeSql
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * PRINT Statement     */
specifier|public
name|Integer
name|print
parameter_list|(
name|HplsqlParser
operator|.
name|Print_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"PRINT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|expr
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * QUIT Statement     */
specifier|public
name|Integer
name|quit
parameter_list|(
name|HplsqlParser
operator|.
name|Quit_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"QUIT"
argument_list|)
expr_stmt|;
name|String
name|rc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|expr
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|LEAVE_PROGRAM
argument_list|,
name|rc
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**     * SET current schema     */
specifier|public
name|Integer
name|setCurrentSchema
parameter_list|(
name|HplsqlParser
operator|.
name|Set_current_schema_optionContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SET CURRENT SCHEMA"
argument_list|)
expr_stmt|;
return|return
name|use
argument_list|(
name|ctx
argument_list|,
literal|"USE "
operator|+
name|meta
operator|.
name|normalizeIdentifierPart
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * SIGNAL statement    */
specifier|public
name|Integer
name|signal
parameter_list|(
name|HplsqlParser
operator|.
name|Signal_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SIGNAL"
argument_list|)
expr_stmt|;
name|Signal
name|signal
init|=
operator|new
name|Signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|USERDEFINED
argument_list|,
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|exec
operator|.
name|signal
argument_list|(
name|signal
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * RESIGNAL statement    */
specifier|public
name|Integer
name|resignal
parameter_list|(
name|HplsqlParser
operator|.
name|Resignal_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"RESIGNAL"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_SQLSTATE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|sqlstate
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|text
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_MESSAGE_TEXT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|text
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|SQLException
name|exception
init|=
operator|new
name|SQLException
argument_list|(
name|text
argument_list|,
name|sqlstate
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Signal
name|signal
init|=
operator|new
name|Signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
argument_list|,
name|text
argument_list|,
name|exception
argument_list|)
decl_stmt|;
name|exec
operator|.
name|setSqlCode
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|exec
operator|.
name|resignal
argument_list|(
name|signal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|resignal
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * RETURN statement    */
specifier|public
name|Integer
name|return_
parameter_list|(
name|HplsqlParser
operator|.
name|Return_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"RETURN"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|expr
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|eval
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|LEAVE_ROUTINE
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Check if an exception is raised or EXIT executed, and we should leave the block    */
name|boolean
name|canContinue
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|Signal
name|signal
init|=
name|exec
operator|.
name|signalPeek
argument_list|()
decl_stmt|;
if|if
condition|(
name|signal
operator|!=
literal|null
operator|&&
name|signal
operator|.
name|type
operator|==
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
condition|)
block|{
return|return
literal|false
return|;
block|}
name|signal
operator|=
name|exec
operator|.
name|signalPeek
argument_list|()
expr_stmt|;
if|if
condition|(
name|signal
operator|!=
literal|null
operator|&&
name|signal
operator|.
name|type
operator|==
name|Signal
operator|.
name|Type
operator|.
name|LEAVE_LOOP
condition|)
block|{
if|if
condition|(
name|signal
operator|.
name|value
operator|==
literal|null
operator|||
name|signal
operator|.
name|value
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|label
operator|!=
literal|null
operator|&&
name|label
operator|.
name|equalsIgnoreCase
argument_list|(
name|signal
operator|.
name|value
argument_list|)
operator|)
condition|)
block|{
name|exec
operator|.
name|signalPop
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Evaluate the expression and push the value to the stack    */
name|void
name|eval
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression to specified String value    */
name|void
name|evalString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|evalString
parameter_list|(
name|StringBuilder
name|string
parameter_list|)
block|{
name|evalString
argument_list|(
name|string
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression and pop value from the stack    */
name|Var
name|evalPop
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exec
operator|.
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|stackPop
argument_list|()
return|;
block|}
return|return
name|Var
operator|.
name|Empty
return|;
block|}
name|Var
name|evalPop
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|long
name|def
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
name|exec
operator|.
name|stackPop
argument_list|()
return|;
block|}
return|return
operator|new
name|Var
argument_list|(
name|def
argument_list|)
return|;
block|}
comment|/**    * Execute rules    */
name|Integer
name|visit
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Execute children rules    */
name|Integer
name|visitChildren
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|visitChildren
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Trace information    */
name|void
name|trace
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|exec
operator|.
name|trace
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|void
name|trace
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|Var
name|var
parameter_list|,
name|ResultSet
name|rs
parameter_list|,
name|ResultSetMetaData
name|rm
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|SQLException
block|{
name|exec
operator|.
name|trace
argument_list|(
name|ctx
argument_list|,
name|var
argument_list|,
name|rs
argument_list|,
name|rm
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

