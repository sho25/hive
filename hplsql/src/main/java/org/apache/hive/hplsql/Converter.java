begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_comment
comment|/**  * On-the-fly SQL Converter  */
end_comment

begin_class
specifier|public
class|class
name|Converter
block|{
name|Exec
name|exec
decl_stmt|;
name|boolean
name|trace
init|=
literal|false
decl_stmt|;
name|Converter
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|exec
operator|=
name|e
expr_stmt|;
name|trace
operator|=
name|exec
operator|.
name|getTrace
argument_list|()
expr_stmt|;
block|}
comment|/**    * Convert a data type    */
name|String
name|dataType
parameter_list|(
name|HplsqlParser
operator|.
name|DtypeContext
name|type
parameter_list|,
name|HplsqlParser
operator|.
name|Dtype_lenContext
name|len
parameter_list|)
block|{
name|String
name|d
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|T_VARCHAR2
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|d
operator|=
literal|"STRING"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|T_NUMBER
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|d
operator|=
literal|"DECIMAL"
expr_stmt|;
if|if
condition|(
name|len
operator|!=
literal|null
condition|)
block|{
name|d
operator|+=
name|exec
operator|.
name|getText
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
return|return
name|d
return|;
block|}
elseif|else
if|if
condition|(
name|len
operator|!=
literal|null
condition|)
block|{
return|return
name|exec
operator|.
name|getText
argument_list|(
name|type
argument_list|,
name|type
operator|.
name|getStart
argument_list|()
argument_list|,
name|len
operator|.
name|getStop
argument_list|()
argument_list|)
return|;
block|}
return|return
name|exec
operator|.
name|getText
argument_list|(
name|type
argument_list|,
name|type
operator|.
name|getStart
argument_list|()
argument_list|,
name|type
operator|.
name|getStop
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

