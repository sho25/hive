begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_class
specifier|public
class|class
name|Query
block|{
name|String
name|sql
decl_stmt|;
name|ParserRuleContext
name|sqlExpr
decl_stmt|;
name|ParserRuleContext
name|sqlSelect
decl_stmt|;
name|Connection
name|conn
decl_stmt|;
name|Statement
name|stmt
decl_stmt|;
name|ResultSet
name|rs
decl_stmt|;
name|Exception
name|exception
decl_stmt|;
name|Query
parameter_list|()
block|{   }
name|Query
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
block|}
comment|/**     * Set query objects    */
specifier|public
name|void
name|set
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Statement
name|stmt
parameter_list|,
name|ResultSet
name|rs
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|stmt
operator|=
name|stmt
expr_stmt|;
name|this
operator|.
name|rs
operator|=
name|rs
expr_stmt|;
block|}
comment|/**    * Get the number of rows    */
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
if|if
condition|(
operator|!
name|error
argument_list|()
operator|&&
name|stmt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|stmt
operator|.
name|getUpdateCount
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Close statement results    */
specifier|public
name|void
name|closeStatement
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|stmt
operator|!=
literal|null
condition|)
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set SQL statement    */
specifier|public
name|void
name|setSql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
block|}
comment|/**    * Set expression context    */
specifier|public
name|void
name|setExprCtx
parameter_list|(
name|ParserRuleContext
name|sqlExpr
parameter_list|)
block|{
name|this
operator|.
name|sqlExpr
operator|=
name|sqlExpr
expr_stmt|;
block|}
comment|/**    * Set SELECT statement context    */
specifier|public
name|void
name|setSelectCtx
parameter_list|(
name|ParserRuleContext
name|sqlSelect
parameter_list|)
block|{
name|this
operator|.
name|sqlSelect
operator|=
name|sqlSelect
expr_stmt|;
block|}
comment|/**    * Set an execution error    */
specifier|public
name|void
name|setError
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
comment|/**    * Print error stack trace    */
specifier|public
name|void
name|printStackTrace
parameter_list|()
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the result set object    */
specifier|public
name|ResultSet
name|getResultSet
parameter_list|()
block|{
return|return
name|rs
return|;
block|}
comment|/**    * Get the connection object    */
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|conn
return|;
block|}
comment|/**    * Return error information    */
specifier|public
name|boolean
name|error
parameter_list|()
block|{
return|return
name|exception
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|errorText
parameter_list|()
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|ClassNotFoundException
condition|)
block|{
return|return
literal|"ClassNotFoundException: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
return|;
block|}
return|return
name|exception
operator|.
name|getMessage
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
block|}
end_class

end_unit

