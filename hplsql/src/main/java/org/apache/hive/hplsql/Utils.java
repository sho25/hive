begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_class
specifier|public
class|class
name|Utils
block|{
comment|/**    * Unquote string and remove escape characters inside the script     */
specifier|public
specifier|static
name|String
name|unquoteString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|s2
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|char
name|ch2
init|=
operator|(
name|i
operator|<
name|len
operator|-
literal|1
operator|)
condition|?
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
name|len
operator|-
literal|1
operator|)
operator|&&
operator|(
name|ch
operator|==
literal|'\''
operator|||
name|ch
operator|==
literal|'"'
operator|)
condition|)
continue|continue;
elseif|else
comment|// \' and '' escape sequences
if|if
condition|(
operator|(
name|ch
operator|==
literal|'\\'
operator|&&
name|ch2
operator|==
literal|'\''
operator|)
operator|||
operator|(
name|ch
operator|==
literal|'\''
operator|&&
name|ch2
operator|==
literal|'\''
operator|)
condition|)
continue|continue;
name|s2
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
return|return
name|s2
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Quote string and escape characters - ab'c -> 'ab''c'    */
specifier|public
specifier|static
name|String
name|quoteString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|s2
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
operator|+
literal|2
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|s2
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\''
condition|)
block|{
name|s2
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
name|s2
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
return|return
name|s2
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Merge quoted strings: 'a' 'b' -> 'ab'; 'a''b' 'c' -> 'a''bc'    */
specifier|public
specifier|static
name|String
name|mergeQuotedStrings
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
literal|null
operator|||
name|s2
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|len1
init|=
name|s1
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|len2
init|=
name|s2
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len1
operator|==
literal|0
operator|||
name|len2
operator|==
literal|0
condition|)
block|{
return|return
name|s1
return|;
block|}
return|return
name|s1
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len1
operator|-
literal|1
argument_list|)
operator|+
name|s2
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * Convert String to Date    */
specifier|public
specifier|static
name|Date
name|toDate
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>=
literal|10
condition|)
block|{
name|int
name|c4
init|=
name|s
operator|.
name|charAt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|int
name|c7
init|=
name|s
operator|.
name|charAt
argument_list|(
literal|7
argument_list|)
decl_stmt|;
comment|// YYYY-MM-DD
if|if
condition|(
name|c4
operator|==
literal|'-'
operator|&&
name|c7
operator|==
literal|'-'
condition|)
block|{
return|return
name|Date
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Convert String to Timestamp    */
specifier|public
specifier|static
name|Timestamp
name|toTimestamp
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>=
literal|10
condition|)
block|{
name|int
name|c4
init|=
name|s
operator|.
name|charAt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|int
name|c7
init|=
name|s
operator|.
name|charAt
argument_list|(
literal|7
argument_list|)
decl_stmt|;
comment|// YYYY-MM-DD
if|if
condition|(
name|c4
operator|==
literal|'-'
operator|&&
name|c7
operator|==
literal|'-'
condition|)
block|{
comment|// Convert DB2 syntax: YYYY-MM-DD-HH.MI.SS.FFF
if|if
condition|(
name|len
operator|>
literal|19
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
literal|10
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|String
name|s2
init|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|+
literal|' '
operator|+
name|s
operator|.
name|substring
argument_list|(
literal|11
argument_list|,
literal|13
argument_list|)
operator|+
literal|':'
operator|+
name|s
operator|.
name|substring
argument_list|(
literal|14
argument_list|,
literal|16
argument_list|)
operator|+
literal|':'
operator|+
name|s
operator|.
name|substring
argument_list|(
literal|17
argument_list|)
decl_stmt|;
return|return
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|s2
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|len
operator|==
literal|10
condition|)
block|{
name|s
operator|+=
literal|" 00:00:00.000"
expr_stmt|;
block|}
return|return
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Compare two String values and return min or max     */
specifier|public
specifier|static
name|String
name|minMaxString
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|,
name|boolean
name|max
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
literal|null
condition|)
block|{
return|return
name|s2
return|;
block|}
elseif|else
if|if
condition|(
name|s2
operator|==
literal|null
condition|)
block|{
return|return
name|s1
return|;
block|}
name|int
name|cmp
init|=
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|max
operator|&&
name|cmp
operator|<
literal|0
operator|)
operator|||
operator|(
operator|!
name|max
operator|&&
name|cmp
operator|>
literal|0
operator|)
condition|)
block|{
return|return
name|s2
return|;
block|}
return|return
name|s1
return|;
block|}
comment|/**    * Compare two Int values and return min or max     */
specifier|public
specifier|static
name|Long
name|minMaxInt
parameter_list|(
name|Long
name|i1
parameter_list|,
name|String
name|s
parameter_list|,
name|boolean
name|max
parameter_list|)
block|{
name|Long
name|i2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|i2
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{}
if|if
condition|(
name|i1
operator|==
literal|null
condition|)
block|{
return|return
name|i2
return|;
block|}
elseif|else
if|if
condition|(
name|i2
operator|==
literal|null
condition|)
block|{
return|return
name|i1
return|;
block|}
if|if
condition|(
operator|(
name|max
operator|&&
name|i1
operator|.
name|longValue
argument_list|()
operator|<
name|i2
operator|.
name|longValue
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|max
operator|&&
name|i1
operator|.
name|longValue
argument_list|()
operator|>
name|i2
operator|.
name|longValue
argument_list|()
operator|)
condition|)
block|{
return|return
name|i2
return|;
block|}
return|return
name|i1
return|;
block|}
comment|/**    * Compare two Date values and return min or max     */
specifier|public
specifier|static
name|Date
name|minMaxDate
parameter_list|(
name|Date
name|d1
parameter_list|,
name|String
name|s
parameter_list|,
name|boolean
name|max
parameter_list|)
block|{
name|Date
name|d2
init|=
name|Utils
operator|.
name|toDate
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|d1
operator|==
literal|null
condition|)
block|{
return|return
name|d2
return|;
block|}
elseif|else
if|if
condition|(
name|d2
operator|==
literal|null
condition|)
block|{
return|return
name|d1
return|;
block|}
if|if
condition|(
operator|(
name|max
operator|&&
name|d1
operator|.
name|before
argument_list|(
name|d2
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|max
operator|&&
name|d1
operator|.
name|after
argument_list|(
name|d2
argument_list|)
operator|)
condition|)
block|{
return|return
name|d2
return|;
block|}
return|return
name|d1
return|;
block|}
comment|/**    * Convert String array to a string with the specified delimiter    */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|String
index|[]
name|a
parameter_list|,
name|char
name|del
parameter_list|)
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
name|a
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert SQL datetime format string to Java SimpleDateFormat    */
specifier|public
specifier|static
name|String
name|convertSqlDatetimeFormat
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|in
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|len
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|4
operator|<=
name|len
operator|&&
name|in
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|4
argument_list|)
operator|.
name|compareTo
argument_list|(
literal|"YYYY"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"yyyy"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|+
literal|2
operator|<=
name|len
operator|&&
name|in
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|2
argument_list|)
operator|.
name|compareTo
argument_list|(
literal|"mm"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"MM"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|+
literal|2
operator|<=
name|len
operator|&&
name|in
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|2
argument_list|)
operator|.
name|compareTo
argument_list|(
literal|"DD"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"dd"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|+
literal|4
operator|<=
name|len
operator|&&
name|in
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|4
argument_list|)
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"HH24"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"HH"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|+
literal|2
operator|<=
name|len
operator|&&
name|in
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|2
argument_list|)
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"MI"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"mm"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|+
literal|2
operator|<=
name|len
operator|&&
name|in
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|2
argument_list|)
operator|.
name|compareTo
argument_list|(
literal|"SS"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"ss"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the executable directory    */
specifier|public
specifier|static
name|String
name|getExecDir
parameter_list|()
block|{
name|String
name|dir
init|=
name|Hplsql
operator|.
name|class
operator|.
name|getProtectionDomain
argument_list|()
operator|.
name|getCodeSource
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|dir
operator|=
name|dir
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|dir
return|;
block|}
comment|/**    * Format size value specified in bytes    */
specifier|public
specifier|static
name|String
name|formatSizeInBytes
parameter_list|(
name|long
name|bytes
parameter_list|,
name|String
name|postfix
parameter_list|)
block|{
name|String
name|out
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|1
condition|)
block|{
name|out
operator|=
name|bytes
operator|+
literal|" byte"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytes
operator|<
literal|1024
condition|)
block|{
name|out
operator|=
name|bytes
operator|+
literal|" bytes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytes
operator|<
literal|1024
operator|*
literal|1024
condition|)
block|{
name|out
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%.1f"
argument_list|,
operator|(
operator|(
name|float
operator|)
name|bytes
operator|)
operator|/
literal|1024
argument_list|)
operator|+
literal|" KB"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytes
operator|<
literal|1024
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|out
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%.1f"
argument_list|,
operator|(
operator|(
name|float
operator|)
name|bytes
operator|)
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
operator|+
literal|" MB"
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%.1f"
argument_list|,
operator|(
operator|(
name|float
operator|)
name|bytes
operator|)
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
operator|+
literal|" GB"
expr_stmt|;
block|}
if|if
condition|(
name|postfix
operator|!=
literal|null
operator|&&
operator|!
name|postfix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|+=
name|postfix
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|String
name|formatSizeInBytes
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
return|return
name|Utils
operator|.
name|formatSizeInBytes
argument_list|(
name|bytes
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Format elasped time    */
specifier|public
specifier|static
name|String
name|formatTime
parameter_list|(
name|long
name|msElapsed
parameter_list|)
block|{
if|if
condition|(
name|msElapsed
operator|<
literal|60000
condition|)
block|{
return|return
name|msElapsed
operator|/
literal|1000
operator|+
literal|" sec"
return|;
block|}
elseif|else
if|if
condition|(
name|msElapsed
operator|<
literal|60000
operator|*
literal|60
condition|)
block|{
return|return
name|msElapsed
operator|/
literal|60000
operator|+
literal|" min "
operator|+
operator|(
name|msElapsed
operator|%
literal|60000
operator|)
operator|/
literal|1000
operator|+
literal|" sec"
return|;
block|}
return|return
literal|""
return|;
block|}
comment|/**    * Format bytes per second rate    */
specifier|public
specifier|static
name|String
name|formatBytesPerSec
parameter_list|(
name|long
name|bytes
parameter_list|,
name|long
name|msElapsed
parameter_list|)
block|{
if|if
condition|(
name|msElapsed
operator|<
literal|30
condition|)
block|{
return|return
literal|"n/a"
return|;
block|}
name|float
name|bytesPerSec
init|=
operator|(
operator|(
name|float
operator|)
name|bytes
operator|)
operator|/
name|msElapsed
operator|*
literal|1000
decl_stmt|;
return|return
name|Utils
operator|.
name|formatSizeInBytes
argument_list|(
operator|(
name|long
operator|)
name|bytesPerSec
argument_list|,
literal|"/sec"
argument_list|)
return|;
block|}
comment|/**    * Format percentage    */
specifier|public
specifier|static
name|String
name|formatPercent
parameter_list|(
name|long
name|current
parameter_list|,
name|long
name|all
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%.1f"
argument_list|,
operator|(
operator|(
name|float
operator|)
name|current
operator|)
operator|/
name|all
operator|*
literal|100
argument_list|)
operator|+
literal|"%"
return|;
block|}
comment|/**    * Format count    */
specifier|public
specifier|static
name|String
name|formatCnt
parameter_list|(
name|long
name|value
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|1
condition|)
block|{
return|return
name|value
operator|+
literal|" "
operator|+
name|suffix
return|;
block|}
return|return
name|value
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|"s"
return|;
block|}
specifier|public
specifier|static
name|String
name|formatCnt
parameter_list|(
name|long
name|value
parameter_list|,
name|String
name|suffix
parameter_list|,
name|String
name|suffix2
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|1
condition|)
block|{
return|return
name|value
operator|+
literal|" "
operator|+
name|suffix
return|;
block|}
return|return
name|value
operator|+
literal|" "
operator|+
name|suffix2
return|;
block|}
comment|/**    * Note. This stub is to resolve name conflict with ANTLR generated source using org.antlr.v4.runtime.misc.Utils.join    */
specifier|static
parameter_list|<
name|T
parameter_list|>
name|String
name|join
parameter_list|(
name|T
index|[]
name|array
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
return|return
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|misc
operator|.
name|Utils
operator|.
name|join
argument_list|(
name|array
argument_list|,
name|separator
argument_list|)
return|;
block|}
block|}
end_class

end_unit

