begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_class
specifier|public
class|class
name|Arguments
block|{
specifier|private
name|CommandLine
name|commandLine
decl_stmt|;
specifier|private
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|String
name|execString
decl_stmt|;
name|String
name|fileName
decl_stmt|;
name|String
name|main
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|vars
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
name|Arguments
parameter_list|()
block|{
comment|// -e 'query'
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"quoted-query-string"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"HPL/SQL from command line"
argument_list|)
operator|.
name|create
argument_list|(
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -f<file>
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"filename"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"HPL/SQL from a file"
argument_list|)
operator|.
name|create
argument_list|(
literal|'f'
argument_list|)
argument_list|)
expr_stmt|;
comment|// -main entry_point_name
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"procname"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Entry point (procedure or function name)"
argument_list|)
operator|.
name|create
argument_list|(
literal|"main"
argument_list|)
argument_list|)
expr_stmt|;
comment|// -hiveconf x=y
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"hiveconf"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Value for given property"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|// Substitution option -d, --define
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"key=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"define"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Variable substitution e.g. -d A=B or --define A=B"
argument_list|)
operator|.
name|create
argument_list|(
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
comment|// Substitution option --hivevar
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"key=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"hivevar"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Variable substitution e.g. --hivevar A=B"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|// [-version|--version]
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"version"
argument_list|,
literal|"version"
argument_list|,
literal|false
argument_list|,
literal|"Print HPL/SQL version"
argument_list|)
argument_list|)
expr_stmt|;
comment|// [-trace|--trace]
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"trace"
argument_list|,
literal|"trace"
argument_list|,
literal|false
argument_list|,
literal|"Print debug information"
argument_list|)
argument_list|)
expr_stmt|;
comment|// [-offline|--offline]
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"offline"
argument_list|,
literal|"offline"
argument_list|,
literal|false
argument_list|,
literal|"Offline mode - skip SQL execution"
argument_list|)
argument_list|)
expr_stmt|;
comment|// [-H|--help]
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"H"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print help information"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Parse the command line arguments    */
specifier|public
name|boolean
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|commandLine
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|execString
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|'f'
argument_list|)
expr_stmt|;
name|main
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"main"
argument_list|)
expr_stmt|;
name|Properties
name|p
init|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"hiveconf"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|p
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|vars
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|p
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"hivevar"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|p
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|vars
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|p
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"define"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|p
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|vars
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|p
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Get the value of execution option -e    */
specifier|public
name|String
name|getExecString
parameter_list|()
block|{
return|return
name|execString
return|;
block|}
comment|/**    * Get the value of file option -f    */
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
comment|/**    * Get the value of -main option    */
specifier|public
name|String
name|getMain
parameter_list|()
block|{
return|return
name|main
return|;
block|}
comment|/**    * Get the variables    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getVars
parameter_list|()
block|{
return|return
name|vars
return|;
block|}
comment|/**    * Test whether version option is set    */
specifier|public
name|boolean
name|hasVersionOption
parameter_list|()
block|{
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Test whether debug option is set    */
specifier|public
name|boolean
name|hasTraceOption
parameter_list|()
block|{
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"trace"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Test whether offline option is set    */
specifier|public
name|boolean
name|hasOfflineOption
parameter_list|()
block|{
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"offline"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Test whether help option is set    */
specifier|public
name|boolean
name|hasHelpOption
parameter_list|()
block|{
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'H'
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Print help information    */
specifier|public
name|void
name|printHelp
parameter_list|()
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
literal|"hplsql"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

