begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|Var
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_class
specifier|public
class|class
name|Copy
block|{
name|Exec
name|exec
decl_stmt|;
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|boolean
name|trace
init|=
literal|false
decl_stmt|;
name|boolean
name|info
init|=
literal|false
decl_stmt|;
name|long
name|srcSizeInBytes
init|=
literal|0
decl_stmt|;
name|String
name|delimiter
init|=
literal|"\t"
decl_stmt|;
name|boolean
name|sqlInsert
init|=
literal|false
decl_stmt|;
name|String
name|sqlInsertName
decl_stmt|;
name|String
name|targetConn
decl_stmt|;
name|int
name|batchSize
init|=
literal|1000
decl_stmt|;
name|boolean
name|overwrite
init|=
literal|false
decl_stmt|;
name|boolean
name|delete
init|=
literal|false
decl_stmt|;
name|boolean
name|ignore
init|=
literal|false
decl_stmt|;
name|Copy
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|exec
operator|=
name|e
expr_stmt|;
name|trace
operator|=
name|exec
operator|.
name|getTrace
argument_list|()
expr_stmt|;
name|info
operator|=
name|exec
operator|.
name|getInfo
argument_list|()
expr_stmt|;
block|}
comment|/**    * Run COPY command    */
name|Integer
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Copy_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"COPY"
argument_list|)
expr_stmt|;
name|initOptions
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|conn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|table_name
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|table
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|table_name
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conn
operator|=
name|exec
operator|.
name|getObjectConnection
argument_list|(
name|ctx
operator|.
name|table_name
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"SELECT * FROM "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_stmt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|=
name|exec
operator|.
name|getStatementConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Statement:\n"
operator|+
name|sql
argument_list|)
expr_stmt|;
block|}
block|}
name|Query
name|query
init|=
name|exec
operator|.
name|executeQuery
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|,
name|conn
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|targetConn
operator|!=
literal|null
condition|)
block|{
name|copyToTable
argument_list|(
name|ctx
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyToFile
argument_list|(
name|ctx
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
finally|finally
block|{
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Copy the query results to another table    * @throws Exception     */
name|void
name|copyToTable
parameter_list|(
name|HplsqlParser
operator|.
name|Copy_stmtContext
name|ctx
parameter_list|,
name|Query
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultSet
name|rs
init|=
name|query
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ResultSetMetaData
name|rm
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|int
name|cols
init|=
name|rm
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SELECT executed: "
operator|+
name|cols
operator|+
literal|" columns"
argument_list|)
expr_stmt|;
block|}
name|Connection
name|conn
init|=
name|exec
operator|.
name|getConnection
argument_list|(
name|targetConn
argument_list|)
decl_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"INSERT INTO "
operator|+
name|sqlInsertName
operator|+
literal|" VALUES ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
condition|;
name|i
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|cols
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|PreparedStatement
name|ps
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|timer
operator|.
name|start
argument_list|()
decl_stmt|;
name|long
name|prev
init|=
name|start
decl_stmt|;
name|boolean
name|batchOpen
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|cols
condition|;
name|i
operator|++
control|)
block|{
name|ps
operator|.
name|setObject
argument_list|(
name|i
argument_list|,
name|rs
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rows
operator|++
expr_stmt|;
if|if
condition|(
name|batchSize
operator|>
literal|1
condition|)
block|{
name|ps
operator|.
name|addBatch
argument_list|()
expr_stmt|;
name|batchOpen
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|rows
operator|%
name|batchSize
operator|==
literal|0
condition|)
block|{
name|ps
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|batchOpen
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|ps
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trace
operator|&&
name|rows
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|long
name|cur
init|=
name|timer
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|cur
operator|-
name|prev
operator|>
literal|10000
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Copying rows: "
operator|+
name|rows
operator|+
literal|" ("
operator|+
name|rows
operator|/
operator|(
operator|(
name|cur
operator|-
name|start
operator|)
operator|/
literal|1000
operator|)
operator|+
literal|" rows/sec)"
argument_list|)
expr_stmt|;
name|prev
operator|=
name|cur
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|batchOpen
condition|)
block|{
name|ps
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
name|exec
operator|.
name|returnConnection
argument_list|(
name|targetConn
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setRowCount
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|long
name|elapsed
init|=
name|timer
operator|.
name|stop
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|info
argument_list|(
name|ctx
argument_list|,
literal|"COPY completed: "
operator|+
name|rows
operator|+
literal|" row(s), "
operator|+
name|timer
operator|.
name|format
argument_list|()
operator|+
literal|", "
operator|+
name|rows
operator|/
operator|(
name|elapsed
operator|/
literal|1000
operator|)
operator|+
literal|" rows/sec"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Copy the query results to a file    * @throws Exception     */
name|void
name|copyToFile
parameter_list|(
name|HplsqlParser
operator|.
name|Copy_stmtContext
name|ctx
parameter_list|,
name|Query
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultSet
name|rs
init|=
name|query
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ResultSetMetaData
name|rm
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|copy_target
argument_list|()
operator|.
name|expr
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|filename
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|copy_target
argument_list|()
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|filename
operator|=
name|ctx
operator|.
name|copy_target
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|del
init|=
name|delimiter
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowdel
init|=
literal|"\n"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|nullstr
init|=
literal|"NULL"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|cols
init|=
name|rm
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
name|long
name|bytes
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|trace
operator|||
name|info
condition|)
block|{
name|String
name|mes
init|=
literal|"Query executed: "
operator|+
name|cols
operator|+
literal|" columns, output file: "
operator|+
name|filename
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
name|mes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
argument_list|(
name|ctx
argument_list|,
name|mes
argument_list|)
expr_stmt|;
block|}
block|}
name|java
operator|.
name|io
operator|.
name|File
name|file
init|=
literal|null
decl_stmt|;
name|File
name|hdfsFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_HDFS
argument_list|()
operator|==
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|java
operator|.
name|io
operator|.
name|File
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hdfsFile
operator|=
operator|new
name|File
argument_list|()
expr_stmt|;
block|}
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|,
literal|false
comment|/*append*/
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
name|hdfsFile
operator|.
name|create
argument_list|(
name|filename
argument_list|,
literal|true
comment|/*overwrite*/
argument_list|)
expr_stmt|;
block|}
name|String
name|col
decl_stmt|;
name|String
name|sql
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|sqlInsert
condition|)
block|{
name|sql
operator|=
literal|"INSERT INTO "
operator|+
name|sqlInsertName
operator|+
literal|" VALUES ("
expr_stmt|;
name|rowdel
operator|=
literal|");\n"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|sqlInsert
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|sql
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|cols
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|bytes
operator|+=
name|del
operator|.
name|length
expr_stmt|;
block|}
name|col
operator|=
name|rs
operator|.
name|getString
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sqlInsert
condition|)
block|{
name|col
operator|=
name|Utils
operator|.
name|quoteString
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|b
init|=
name|col
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|bytes
operator|+=
name|b
operator|.
name|length
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sqlInsert
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|nullstr
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|write
argument_list|(
name|rowdel
argument_list|)
expr_stmt|;
name|bytes
operator|+=
name|rowdel
operator|.
name|length
expr_stmt|;
name|rows
operator|++
expr_stmt|;
block|}
name|exec
operator|.
name|setRowCount
argument_list|(
name|rows
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|elapsed
init|=
name|timer
operator|.
name|stop
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|info
argument_list|(
name|ctx
argument_list|,
literal|"COPY completed: "
operator|+
name|rows
operator|+
literal|" row(s), "
operator|+
name|Utils
operator|.
name|formatSizeInBytes
argument_list|(
name|bytes
argument_list|)
operator|+
literal|", "
operator|+
name|timer
operator|.
name|format
argument_list|()
operator|+
literal|", "
operator|+
name|rows
operator|/
name|elapsed
operator|/
literal|1000
operator|+
literal|" rows/sec"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run COPY FROM LOCAL statement    */
specifier|public
name|Integer
name|runFromLocal
parameter_list|(
name|HplsqlParser
operator|.
name|Copy_from_local_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"COPY FROM LOCAL"
argument_list|)
expr_stmt|;
name|initFileOptions
argument_list|(
name|ctx
operator|.
name|copy_file_option
argument_list|()
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|srcFiles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|src
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|copy_source
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|dest
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|copy_target
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|srcItems
init|=
name|ctx
operator|.
name|copy_source
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcItems
condition|;
name|i
operator|++
control|)
block|{
name|createLocalFileList
argument_list|(
name|srcFiles
argument_list|,
name|evalPop
argument_list|(
name|ctx
operator|.
name|copy_source
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
condition|)
block|{
name|info
argument_list|(
name|ctx
argument_list|,
literal|"Files to copy: "
operator|+
name|srcFiles
operator|.
name|size
argument_list|()
operator|+
literal|" ("
operator|+
name|Utils
operator|.
name|formatSizeInBytes
argument_list|(
name|srcSizeInBytes
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srcFiles
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|exec
operator|.
name|setHostCode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|int
name|succeed
init|=
literal|0
decl_stmt|;
name|int
name|failed
init|=
literal|0
decl_stmt|;
name|long
name|copiedSize
init|=
literal|0
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|file
operator|.
name|createFs
argument_list|()
expr_stmt|;
name|boolean
name|multi
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|srcFiles
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|multi
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|i
range|:
name|srcFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|Path
name|s
init|=
operator|new
name|Path
argument_list|(
name|i
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|d
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|multi
condition|)
block|{
name|String
name|relativePath
init|=
name|i
operator|.
name|getValue
argument_list|()
operator|.
name|getLeft
argument_list|()
decl_stmt|;
if|if
condition|(
name|relativePath
operator|==
literal|null
condition|)
block|{
name|d
operator|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|,
name|s
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|,
name|relativePath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|s
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Path to file is specified (can be relative), so treat target as a file name (hadoop fs -put behavior)
if|if
condition|(
name|srcItems
operator|==
literal|1
operator|&&
name|i
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|d
operator|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
comment|// Source directory is specified, so treat the target as a directory
else|else
block|{
name|d
operator|=
operator|new
name|Path
argument_list|(
name|dest
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|s
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|delete
argument_list|,
name|overwrite
argument_list|,
name|s
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|succeed
operator|++
expr_stmt|;
name|long
name|size
init|=
name|i
operator|.
name|getValue
argument_list|()
operator|.
name|getRight
argument_list|()
decl_stmt|;
name|copiedSize
operator|+=
name|size
expr_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|info
argument_list|(
name|ctx
argument_list|,
literal|"Copied: "
operator|+
name|file
operator|.
name|resolvePath
argument_list|(
name|d
argument_list|)
operator|+
literal|" ("
operator|+
name|Utils
operator|.
name|formatSizeInBytes
argument_list|(
name|size
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failed
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|ignore
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setHostCode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
finally|finally
block|{
name|long
name|elapsed
init|=
name|timer
operator|.
name|stop
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|info
argument_list|(
name|ctx
argument_list|,
literal|"COPY completed: "
operator|+
name|succeed
operator|+
literal|" succeed, "
operator|+
name|failed
operator|+
literal|" failed, "
operator|+
name|timer
operator|.
name|format
argument_list|()
operator|+
literal|", "
operator|+
name|Utils
operator|.
name|formatSizeInBytes
argument_list|(
name|copiedSize
argument_list|)
operator|+
literal|", "
operator|+
name|Utils
operator|.
name|formatBytesPerSec
argument_list|(
name|copiedSize
argument_list|,
name|elapsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failed
operator|==
literal|0
condition|)
block|{
name|exec
operator|.
name|setHostCode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|setHostCode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Create the list of local files for the specified path (including subdirectories)    */
name|void
name|createLocalFileList
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|list
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|relativePath
parameter_list|)
block|{
name|java
operator|.
name|io
operator|.
name|File
name|file
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
for|for
control|(
name|java
operator|.
name|io
operator|.
name|File
name|i
range|:
name|file
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
name|rel
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|relativePath
operator|==
literal|null
condition|)
block|{
name|rel
operator|=
name|i
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rel
operator|=
name|relativePath
operator|+
name|java
operator|.
name|io
operator|.
name|File
operator|.
name|separator
operator|+
name|i
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|createLocalFileList
argument_list|(
name|list
argument_list|,
name|i
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|rel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|size
init|=
name|i
operator|.
name|length
argument_list|()
decl_stmt|;
name|list
operator|.
name|put
argument_list|(
name|i
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|relativePath
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|srcSizeInBytes
operator|+=
name|size
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|long
name|size
init|=
name|file
operator|.
name|length
argument_list|()
decl_stmt|;
name|list
operator|.
name|put
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|relativePath
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|srcSizeInBytes
operator|+=
name|size
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Initialize COPY command options    */
name|void
name|initOptions
parameter_list|(
name|HplsqlParser
operator|.
name|Copy_stmtContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|copy_option
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|HplsqlParser
operator|.
name|Copy_optionContext
name|option
init|=
name|ctx
operator|.
name|copy_option
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|.
name|T_DELIMITER
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|delimiter
operator|=
name|StringEscapeUtils
operator|.
name|unescapeJava
argument_list|(
name|evalPop
argument_list|(
name|option
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|T_SQLINSERT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sqlInsert
operator|=
literal|true
expr_stmt|;
name|delimiter
operator|=
literal|", "
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|ident
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sqlInsertName
operator|=
name|option
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|T_AT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|targetConn
operator|=
name|option
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|copy_target
argument_list|()
operator|.
name|expr
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sqlInsertName
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|copy_target
argument_list|()
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sqlInsertName
operator|=
name|ctx
operator|.
name|copy_target
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|T_BATCHSIZE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|batchSize
operator|=
name|evalPop
argument_list|(
name|option
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Initialize COPY FILE options    */
name|void
name|initFileOptions
parameter_list|(
name|List
argument_list|<
name|HplsqlParser
operator|.
name|Copy_file_optionContext
argument_list|>
name|options
parameter_list|)
block|{
name|srcSizeInBytes
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|HplsqlParser
operator|.
name|Copy_file_optionContext
name|i
range|:
name|options
control|)
block|{
if|if
condition|(
name|i
operator|.
name|T_OVERWRITE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|overwrite
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|.
name|T_DELETE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|delete
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|.
name|T_IGNORE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ignore
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Evaluate the expression and pop value from the stack    */
name|Var
name|evalPop
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exec
operator|.
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|stackPop
argument_list|()
return|;
block|}
return|return
name|Var
operator|.
name|Empty
return|;
block|}
comment|/**    * Trace and information    */
specifier|public
name|void
name|trace
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|exec
operator|.
name|trace
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|exec
operator|.
name|info
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

