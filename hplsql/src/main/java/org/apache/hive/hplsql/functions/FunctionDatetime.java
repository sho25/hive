begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|functions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|FunctionDatetime
extends|extends
name|Function
block|{
specifier|public
name|FunctionDatetime
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**     * Register functions    */
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|Function
name|f
parameter_list|)
block|{
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"DATE"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|date
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"FROM_UNIXTIME"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|fromUnixtime
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"NOW"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|now
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"TIMESTAMP_ISO"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|timestampIso
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"TO_TIMESTAMP"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|toTimestamp
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"UNIX_TIMESTAMP"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|unixTimestamp
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|specMap
operator|.
name|put
argument_list|(
literal|"CURRENT_DATE"
argument_list|,
operator|new
name|FuncSpecCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|currentDate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|specMap
operator|.
name|put
argument_list|(
literal|"CURRENT_TIMESTAMP"
argument_list|,
operator|new
name|FuncSpecCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|currentTimestamp
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|specMap
operator|.
name|put
argument_list|(
literal|"SYSDATE"
argument_list|,
operator|new
name|FuncSpecCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|currentTimestamp
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|specSqlMap
operator|.
name|put
argument_list|(
literal|"CURRENT_DATE"
argument_list|,
operator|new
name|FuncSpecCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|currentDateSql
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|specSqlMap
operator|.
name|put
argument_list|(
literal|"CURRENT_TIMESTAMP"
argument_list|,
operator|new
name|FuncSpecCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|currentTimestampSql
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * CURRENT_DATE    */
specifier|public
name|void
name|currentDate
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|evalVar
argument_list|(
name|currentDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Var
name|currentDate
parameter_list|()
block|{
name|SimpleDateFormat
name|f
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|f
operator|.
name|format
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Var
argument_list|(
name|Var
operator|.
name|Type
operator|.
name|DATE
argument_list|,
name|Utils
operator|.
name|toDate
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * CURRENT_DATE in executable SQL statement    */
specifier|public
name|void
name|currentDateSql
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|getConnectionType
argument_list|()
operator|==
name|Conn
operator|.
name|Type
operator|.
name|HIVE
condition|)
block|{
name|evalString
argument_list|(
literal|"TO_DATE(FROM_UNIXTIME(UNIX_TIMESTAMP()))"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evalString
argument_list|(
name|exec
operator|.
name|getFormattedText
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * CURRENT_TIMESTAMP    */
specifier|public
name|void
name|currentTimestamp
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|int
name|precision
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|3
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|evalVar
argument_list|(
name|currentTimestamp
argument_list|(
name|precision
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Var
name|currentTimestamp
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
name|String
name|format
init|=
literal|"yyyy-MM-dd HH:mm:ss"
decl_stmt|;
if|if
condition|(
name|precision
operator|>
literal|0
operator|&&
name|precision
operator|<=
literal|3
condition|)
block|{
name|format
operator|+=
literal|"."
operator|+
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"S"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
block|}
name|SimpleDateFormat
name|f
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|f
operator|.
name|format
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Var
argument_list|(
name|Utils
operator|.
name|toTimestamp
argument_list|(
name|s
argument_list|)
argument_list|,
name|precision
argument_list|)
return|;
block|}
comment|/**    * CURRENT_TIMESTAMP in executable SQL statement    */
specifier|public
name|void
name|currentTimestampSql
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|getConnectionType
argument_list|()
operator|==
name|Conn
operator|.
name|Type
operator|.
name|HIVE
condition|)
block|{
name|evalString
argument_list|(
literal|"FROM_UNIXTIME(UNIX_TIMESTAMP())"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evalString
argument_list|(
name|exec
operator|.
name|getFormattedText
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * DATE function    */
name|void
name|date
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|Var
name|var
init|=
operator|new
name|Var
argument_list|(
name|Var
operator|.
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|var
operator|.
name|cast
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|evalVar
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
comment|/**    * NOW() function (current date and time)    */
name|void
name|now
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|evalVar
argument_list|(
name|currentTimestamp
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * TIMESTAMP_ISO function    */
name|void
name|timestampIso
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|Var
name|var
init|=
operator|new
name|Var
argument_list|(
name|Var
operator|.
name|Type
operator|.
name|TIMESTAMP
argument_list|)
decl_stmt|;
name|var
operator|.
name|cast
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|evalVar
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
comment|/**    * TO_TIMESTAMP function    */
name|void
name|toTimestamp
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|value
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|sqlFormat
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|1
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|format
init|=
name|Utils
operator|.
name|convertSqlDatetimeFormat
argument_list|(
name|sqlFormat
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|timeInMs
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|format
argument_list|)
operator|.
name|parse
argument_list|(
name|value
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|evalVar
argument_list|(
operator|new
name|Var
argument_list|(
name|Var
operator|.
name|Type
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|timeInMs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|evalNull
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * FROM_UNIXTIME() function (convert seconds since 1970-01-01 00:00:00 to timestamp)    */
name|void
name|fromUnixtime
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|getParamCount
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|long
name|epoch
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|String
name|format
init|=
literal|"yyyy-MM-dd HH:mm:ss"
decl_stmt|;
if|if
condition|(
name|cnt
operator|>
literal|1
condition|)
block|{
name|format
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|1
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|evalString
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
name|format
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|epoch
operator|*
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * UNIX_TIMESTAMP() function (current date and time in seconds since 1970-01-01 00:00:00)    */
name|void
name|unixTimestamp
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|evalVar
argument_list|(
operator|new
name|Var
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

