begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|functions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|FunctionOra
extends|extends
name|Function
block|{
specifier|public
name|FunctionOra
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**     * Register functions    */
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|Function
name|f
parameter_list|)
block|{
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"DBMS_OUTPUT.PUT_LINE"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|execDbmsOutputPutLine
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"UTL_FILE.FOPEN"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|execUtlFileFopen
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"UTL_FILE.GET_LINE"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|execUtlFileGetLine
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"UTL_FILE.PUT_LINE"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|execUtlFilePutLine
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"UTL_FILE.PUT"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|execUtlFilePut
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"UTL_FILE.FCLOSE"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|execUtlFileFclose
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Print a text message    */
name|void
name|execDbmsOutputPutLine
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|exec
operator|.
name|stackPop
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Execute UTL_FILE.FOPEN function    */
specifier|public
name|void
name|execUtlFileFopen
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|String
name|dir
init|=
literal|""
decl_stmt|;
name|String
name|name
init|=
literal|""
decl_stmt|;
name|boolean
name|write
init|=
literal|true
decl_stmt|;
name|boolean
name|overwrite
init|=
literal|false
decl_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Directory
if|if
condition|(
name|cnt
operator|>
literal|0
condition|)
block|{
name|dir
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// File name
if|if
condition|(
name|cnt
operator|>
literal|1
condition|)
block|{
name|name
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// Mode
if|if
condition|(
name|cnt
operator|>=
literal|2
condition|)
block|{
name|String
name|mode
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"r"
argument_list|)
condition|)
block|{
name|write
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"w"
argument_list|)
condition|)
block|{
name|write
operator|=
literal|true
expr_stmt|;
name|overwrite
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|()
decl_stmt|;
if|if
condition|(
name|write
condition|)
block|{
name|file
operator|.
name|create
argument_list|(
name|dir
argument_list|,
name|name
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|open
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|Var
operator|.
name|Type
operator|.
name|FILE
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Read a text line from an open file    */
name|void
name|execUtlFileGetLine
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|Var
name|file
init|=
literal|null
decl_stmt|;
name|Var
name|str
init|=
literal|null
decl_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// File handle
if|if
condition|(
name|cnt
operator|>
literal|0
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
name|exec
operator|.
name|stackPop
argument_list|()
expr_stmt|;
block|}
comment|// String variable
if|if
condition|(
name|cnt
operator|>
literal|1
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|str
operator|=
name|exec
operator|.
name|stackPop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|FILE
condition|)
block|{
name|File
name|f
init|=
operator|(
name|File
operator|)
name|file
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"File: "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|char
name|c
init|=
name|f
operator|.
name|readChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
name|out
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|EOFException
operator|)
condition|)
block|{
name|out
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Set the new value to the output string variable
if|if
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|str
operator|.
name|setValue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"OUT "
operator|+
name|str
operator|.
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|str
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Variable of FILE type not found"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Execute UTL_FILE.PUT_LINE function    */
specifier|public
name|void
name|execUtlFilePutLine
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|execUtlFilePut
argument_list|(
name|ctx
argument_list|,
literal|true
comment|/*newline*/
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute UTL_FILE.PUT function    */
specifier|public
name|void
name|execUtlFilePut
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|execUtlFilePut
argument_list|(
name|ctx
argument_list|,
literal|false
comment|/*newline*/
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write a string to file    */
name|void
name|execUtlFilePut
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|,
name|boolean
name|newline
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|Var
name|file
init|=
literal|null
decl_stmt|;
name|String
name|str
init|=
literal|""
decl_stmt|;
comment|// File handle
if|if
condition|(
name|cnt
operator|>
literal|0
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
name|exec
operator|.
name|stackPop
argument_list|()
expr_stmt|;
block|}
comment|// Text string
if|if
condition|(
name|cnt
operator|>
literal|1
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|str
operator|=
name|exec
operator|.
name|stackPop
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|FILE
condition|)
block|{
name|File
name|f
init|=
operator|(
name|File
operator|)
name|file
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"File: "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|writeString
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|newline
condition|)
block|{
name|f
operator|.
name|writeString
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Variable of FILE type not found"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Execute UTL_FILE.FCLOSE function    */
name|void
name|execUtlFileFclose
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|Var
name|file
init|=
literal|null
decl_stmt|;
comment|// File handle
if|if
condition|(
name|cnt
operator|>
literal|0
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
name|exec
operator|.
name|stackPop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|FILE
condition|)
block|{
name|File
name|f
init|=
operator|(
name|File
operator|)
name|file
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"File: "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|file
operator|.
name|removeValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Variable of FILE type not found"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

