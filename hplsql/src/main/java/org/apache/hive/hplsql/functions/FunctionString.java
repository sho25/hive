begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|functions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|FunctionString
extends|extends
name|Function
block|{
specifier|public
name|FunctionString
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**     * Register functions    */
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|Function
name|f
parameter_list|)
block|{
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"CONCAT"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|concat
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"CHAR"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|char_
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"INSTR"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|instr
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"LEN"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|len
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"LENGTH"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|length
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"LOWER"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|lower
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"REPLACE"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|replace
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"SUBSTR"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|substr
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"SUBSTRING"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|substr
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"TO_CHAR"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|toChar
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"UPPER"
argument_list|,
operator|new
name|FuncCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|upper
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|specMap
operator|.
name|put
argument_list|(
literal|"SUBSTRING"
argument_list|,
operator|new
name|FuncSpecCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|substring
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|f
operator|.
name|specMap
operator|.
name|put
argument_list|(
literal|"TRIM"
argument_list|,
operator|new
name|FuncSpecCommand
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|trim
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * CONCAT function    */
name|void
name|concat
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|val
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|getParamCount
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|boolean
name|nulls
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|Var
name|c
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
name|i
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|val
operator|.
name|append
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|nulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nulls
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|evalString
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * CHAR function    */
name|void
name|char_
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|getParamCount
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|!=
literal|1
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|str
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|evalString
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**    * INSTR function    */
name|void
name|instr
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|getParamCount
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|<
literal|2
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|str
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|evalInt
argument_list|(
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|substr
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|1
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|1
decl_stmt|;
name|int
name|occur
init|=
literal|1
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cnt
operator|>=
literal|3
condition|)
block|{
name|pos
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|2
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|==
literal|0
condition|)
block|{
name|pos
operator|=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cnt
operator|>=
literal|4
condition|)
block|{
name|occur
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|3
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|occur
operator|<
literal|0
condition|)
block|{
name|occur
operator|=
literal|1
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|occur
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|idx
operator|=
name|str
operator|.
name|indexOf
argument_list|(
name|substr
argument_list|,
name|pos
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|str
operator|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|str
operator|.
name|length
argument_list|()
operator|-
name|pos
operator|*
operator|(
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|idx
operator|=
name|str
operator|.
name|lastIndexOf
argument_list|(
name|substr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
name|idx
operator|=
literal|0
expr_stmt|;
break|break;
block|}
else|else
block|{
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|pos
operator|=
name|idx
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|=
operator|(
name|str
operator|.
name|length
argument_list|()
operator|-
name|idx
operator|+
literal|1
operator|)
operator|*
operator|(
operator|-
literal|1
operator|)
expr_stmt|;
block|}
block|}
block|}
name|evalInt
argument_list|(
operator|new
name|Long
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * LEN function (excluding trailing spaces)    */
name|void
name|len
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|len
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
name|evalInt
argument_list|(
operator|new
name|Long
argument_list|(
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * LENGTH function    */
name|void
name|length
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|len
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
name|evalInt
argument_list|(
operator|new
name|Long
argument_list|(
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * LOWER function    */
name|void
name|lower
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|str
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|evalString
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**    * REPLACE function    */
name|void
name|replace
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|getParamCount
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|<
literal|3
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|str
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|what
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|1
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|with
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|2
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|evalString
argument_list|(
name|str
operator|.
name|replaceAll
argument_list|(
name|what
argument_list|,
name|with
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * SUBSTR and SUBSTRING function    */
name|void
name|substr
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|getParamCount
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|<
literal|2
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|str
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|1
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|len
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|0
condition|)
block|{
name|start
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|cnt
operator|>
literal|2
condition|)
block|{
name|len
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|2
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|substr
argument_list|(
name|str
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|void
name|substr
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|evalString
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|start
operator|==
literal|0
condition|)
block|{
name|start
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|start
operator|>
literal|0
condition|)
block|{
name|evalString
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|start
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|evalString
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|start
operator|-
literal|1
argument_list|,
name|start
operator|-
literal|1
operator|+
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * SUBSTRING FROM FOR function    */
name|void
name|substring
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|String
name|str
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|len
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|0
condition|)
block|{
name|start
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|T_FOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|len
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|substr
argument_list|(
name|str
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**    * TRIM function    */
name|void
name|trim
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|cnt
operator|!=
literal|1
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|str
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|evalString
argument_list|(
name|str
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * TO_CHAR function    */
name|void
name|toChar
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|getParamCount
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|!=
literal|1
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|str
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|evalString
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**    * UPPER function    */
name|void
name|upper
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|str
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|evalString
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

