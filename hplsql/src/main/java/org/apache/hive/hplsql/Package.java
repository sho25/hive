begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|HplsqlParser
operator|.
name|Package_spec_itemContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|HplsqlParser
operator|.
name|Package_body_itemContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|HplsqlParser
operator|.
name|Create_function_stmtContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|HplsqlParser
operator|.
name|Create_procedure_stmtContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|functions
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Program package  */
end_comment

begin_class
specifier|public
class|class
name|Package
block|{
name|String
name|name
decl_stmt|;
name|ArrayList
argument_list|<
name|Var
argument_list|>
name|vars
init|=
operator|new
name|ArrayList
argument_list|<
name|Var
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|publicVars
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|publicFuncs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|publicProcs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Create_function_stmtContext
argument_list|>
name|func
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Create_function_stmtContext
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Create_procedure_stmtContext
argument_list|>
name|proc
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Create_procedure_stmtContext
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|allMembersPublic
init|=
literal|false
decl_stmt|;
name|Exec
name|exec
decl_stmt|;
name|Function
name|function
decl_stmt|;
name|boolean
name|trace
init|=
literal|false
decl_stmt|;
name|Package
parameter_list|(
name|String
name|name
parameter_list|,
name|Exec
name|exec
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|exec
operator|=
name|exec
expr_stmt|;
name|this
operator|.
name|function
operator|=
operator|new
name|Function
argument_list|(
name|exec
argument_list|)
expr_stmt|;
name|this
operator|.
name|trace
operator|=
name|exec
operator|.
name|getTrace
argument_list|()
expr_stmt|;
block|}
comment|/**    * Add a local variable    */
name|void
name|addVariable
parameter_list|(
name|Var
name|var
parameter_list|)
block|{
name|vars
operator|.
name|add
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
comment|/**    * Find the variable by name    */
name|Var
name|findVariable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Var
name|var
range|:
name|vars
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|var
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|var
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Create the package specification    */
name|void
name|createSpecification
parameter_list|(
name|HplsqlParser
operator|.
name|Create_package_stmtContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|package_spec
argument_list|()
operator|.
name|package_spec_item
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|Package_spec_itemContext
name|c
init|=
name|ctx
operator|.
name|package_spec
argument_list|()
operator|.
name|package_spec_item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|declare_stmt_item
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visit
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|T_FUNCTION
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|publicFuncs
operator|.
name|add
argument_list|(
name|c
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|T_PROC
argument_list|()
operator|!=
literal|null
operator|||
name|c
operator|.
name|T_PROCEDURE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|publicProcs
operator|.
name|add
argument_list|(
name|c
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create the package body    */
name|void
name|createBody
parameter_list|(
name|HplsqlParser
operator|.
name|Create_package_body_stmtContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|package_body
argument_list|()
operator|.
name|package_body_item
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|Package_body_itemContext
name|c
init|=
name|ctx
operator|.
name|package_body
argument_list|()
operator|.
name|package_body_item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|declare_stmt_item
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visit
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|create_function_stmt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|func
operator|.
name|put
argument_list|(
name|c
operator|.
name|create_function_stmt
argument_list|()
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|c
operator|.
name|create_function_stmt
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|create_procedure_stmt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|proc
operator|.
name|put
argument_list|(
name|c
operator|.
name|create_procedure_stmt
argument_list|()
operator|.
name|ident
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|c
operator|.
name|create_procedure_stmt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Execute function    */
specifier|public
name|boolean
name|execFunc
parameter_list|(
name|String
name|name
parameter_list|,
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|Create_function_stmtContext
name|f
init|=
name|func
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
return|return
name|execProc
argument_list|(
name|name
argument_list|,
name|ctx
argument_list|,
literal|false
comment|/*trace error if not exists*/
argument_list|)
return|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"EXEC PACKAGE FUNCTION "
operator|+
name|this
operator|.
name|name
operator|+
literal|"."
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Var
argument_list|>
name|actualParams
init|=
name|function
operator|.
name|getActualCallParameters
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|exec
operator|.
name|enterScope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|ROUTINE
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|function
operator|.
name|setCallParameters
argument_list|(
name|ctx
argument_list|,
name|actualParams
argument_list|,
name|f
operator|.
name|create_routine_params
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|f
operator|.
name|single_block_stmt
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|leaveScope
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Execute procedure    */
specifier|public
name|boolean
name|execProc
parameter_list|(
name|String
name|name
parameter_list|,
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|,
name|boolean
name|traceNotExists
parameter_list|)
block|{
name|Create_procedure_stmtContext
name|p
init|=
name|proc
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|trace
operator|&&
name|traceNotExists
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Package procedure not found: "
operator|+
name|this
operator|.
name|name
operator|+
literal|"."
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"EXEC PACKAGE PROCEDURE "
operator|+
name|this
operator|.
name|name
operator|+
literal|"."
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Var
argument_list|>
name|actualParams
init|=
name|function
operator|.
name|getActualCallParameters
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Var
argument_list|>
name|out
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Var
argument_list|>
argument_list|()
decl_stmt|;
name|exec
operator|.
name|enterScope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|ROUTINE
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|exec
operator|.
name|callStackPush
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|declare_block_inplace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visit
argument_list|(
name|p
operator|.
name|declare_block_inplace
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|create_routine_params
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|function
operator|.
name|setCallParameters
argument_list|(
name|ctx
argument_list|,
name|actualParams
argument_list|,
name|p
operator|.
name|create_routine_params
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|visit
argument_list|(
name|p
operator|.
name|proc_block
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|callStackPop
argument_list|()
expr_stmt|;
name|exec
operator|.
name|leaveScope
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Var
argument_list|>
name|i
range|:
name|out
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Set OUT parameters
name|exec
operator|.
name|setVariable
argument_list|(
name|i
operator|.
name|getKey
argument_list|()
argument_list|,
name|i
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Set whether all members are public (when package specification is missed) or not     */
name|void
name|setAllMembersPublic
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|allMembersPublic
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Execute rules    */
name|Integer
name|visit
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Execute children rules    */
name|Integer
name|visitChildren
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|visitChildren
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Trace information    */
specifier|public
name|void
name|trace
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|exec
operator|.
name|trace
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

