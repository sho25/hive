begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ANTLRInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|CommonTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|misc
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|tree
operator|.
name|ParseTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|Var
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|functions
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * HPL/SQL script executor  *  */
end_comment

begin_class
specifier|public
class|class
name|Exec
extends|extends
name|HplsqlBaseVisitor
argument_list|<
name|Integer
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"HPL/SQL 0.3.13"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQLCODE
init|=
literal|"SQLCODE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQLSTATE
init|=
literal|"SQLSTATE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HOSTCODE
init|=
literal|"HOSTCODE"
decl_stmt|;
name|Exec
name|exec
init|=
literal|null
decl_stmt|;
name|ParseTree
name|tree
init|=
literal|null
decl_stmt|;
specifier|public
enum|enum
name|OnError
block|{
name|EXCEPTION
block|,
name|SETERROR
block|,
name|STOP
block|}
empty_stmt|;
comment|// Scopes of execution (code blocks) with own local variables, parameters and exception handlers
name|Stack
argument_list|<
name|Scope
argument_list|>
name|scopes
init|=
operator|new
name|Stack
argument_list|<
name|Scope
argument_list|>
argument_list|()
decl_stmt|;
name|Scope
name|globalScope
decl_stmt|;
name|Scope
name|currentScope
decl_stmt|;
name|Stack
argument_list|<
name|Var
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<
name|Var
argument_list|>
argument_list|()
decl_stmt|;
name|Stack
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|Stack
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Stack
argument_list|<
name|String
argument_list|>
name|callStack
init|=
operator|new
name|Stack
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Stack
argument_list|<
name|Signal
argument_list|>
name|signals
init|=
operator|new
name|Stack
argument_list|<
name|Signal
argument_list|>
argument_list|()
decl_stmt|;
name|Signal
name|currentSignal
decl_stmt|;
name|Scope
name|currentHandlerScope
decl_stmt|;
name|boolean
name|resignal
init|=
literal|false
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|managedTables
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|objectMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|objectConnMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|Var
argument_list|>
argument_list|>
name|returnCursors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|Var
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Package
argument_list|>
name|packages
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Package
argument_list|>
argument_list|()
decl_stmt|;
name|Package
name|currentPackageDecl
init|=
literal|null
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stmtConnList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Arguments
name|arguments
init|=
operator|new
name|Arguments
argument_list|()
decl_stmt|;
specifier|public
name|Conf
name|conf
decl_stmt|;
name|Expression
name|expr
decl_stmt|;
name|Function
name|function
decl_stmt|;
name|Converter
name|converter
decl_stmt|;
name|Meta
name|meta
decl_stmt|;
name|Select
name|select
decl_stmt|;
name|Stmt
name|stmt
decl_stmt|;
name|Conn
name|conn
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
name|String
name|execString
decl_stmt|;
name|String
name|execFile
decl_stmt|;
name|String
name|execMain
decl_stmt|;
name|StringBuilder
name|localUdf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|initRoutines
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|buildSql
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|inCallStmt
init|=
literal|false
decl_stmt|;
name|boolean
name|udfRegistered
init|=
literal|false
decl_stmt|;
name|boolean
name|udfRun
init|=
literal|false
decl_stmt|;
name|boolean
name|dotHplsqlrcExists
init|=
literal|false
decl_stmt|;
name|boolean
name|hplsqlrcExists
init|=
literal|false
decl_stmt|;
name|boolean
name|trace
init|=
literal|false
decl_stmt|;
name|boolean
name|info
init|=
literal|true
decl_stmt|;
name|boolean
name|offline
init|=
literal|false
decl_stmt|;
name|Exec
parameter_list|()
block|{
name|exec
operator|=
name|this
expr_stmt|;
block|}
name|Exec
parameter_list|(
name|Exec
name|exec
parameter_list|)
block|{
name|this
operator|.
name|exec
operator|=
name|exec
expr_stmt|;
block|}
comment|/**     * Set a variable using a value from the parameter or the stack     */
specifier|public
name|Var
name|setVariable
parameter_list|(
name|String
name|name
parameter_list|,
name|Var
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|==
name|Var
operator|.
name|Empty
condition|)
block|{
if|if
condition|(
name|exec
operator|.
name|stack
operator|.
name|empty
argument_list|()
condition|)
block|{
return|return
name|Var
operator|.
name|Empty
return|;
block|}
name|value
operator|=
name|exec
operator|.
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"hplsql."
argument_list|)
condition|)
block|{
name|exec
operator|.
name|conf
operator|.
name|setOption
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Var
operator|.
name|Empty
return|;
block|}
name|Var
name|var
init|=
name|findVariable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
name|var
operator|.
name|cast
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|var
operator|=
operator|new
name|Var
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|var
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|exec
operator|.
name|currentScope
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
return|return
name|var
return|;
block|}
specifier|public
name|Var
name|setVariable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|setVariable
argument_list|(
name|name
argument_list|,
name|Var
operator|.
name|Empty
argument_list|)
return|;
block|}
specifier|public
name|Var
name|setVariable
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|setVariable
argument_list|(
name|name
argument_list|,
operator|new
name|Var
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Var
name|setVariable
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
return|return
name|setVariable
argument_list|(
name|name
argument_list|,
operator|new
name|Var
argument_list|(
operator|new
name|Long
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**     * Set variable to NULL     */
specifier|public
name|Var
name|setVariableToNull
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Var
name|var
init|=
name|findVariable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
name|var
operator|.
name|removeValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|var
operator|=
operator|new
name|Var
argument_list|()
expr_stmt|;
name|var
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|exec
operator|.
name|currentScope
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
return|return
name|var
return|;
block|}
comment|/**    * Add a local variable to the current scope    */
specifier|public
name|void
name|addVariable
parameter_list|(
name|Var
name|var
parameter_list|)
block|{
if|if
condition|(
name|currentPackageDecl
operator|!=
literal|null
condition|)
block|{
name|currentPackageDecl
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exec
operator|.
name|currentScope
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|currentScope
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a condition handler to the current scope    */
specifier|public
name|void
name|addHandler
parameter_list|(
name|Handler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|currentScope
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|currentScope
operator|.
name|addHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a return cursor visible to procedure callers and clients    */
specifier|public
name|void
name|addReturnCursor
parameter_list|(
name|Var
name|var
parameter_list|)
block|{
name|String
name|routine
init|=
name|callStackPeek
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Var
argument_list|>
name|cursors
init|=
name|returnCursors
operator|.
name|get
argument_list|(
name|routine
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursors
operator|==
literal|null
condition|)
block|{
name|cursors
operator|=
operator|new
name|ArrayList
argument_list|<
name|Var
argument_list|>
argument_list|()
expr_stmt|;
name|returnCursors
operator|.
name|put
argument_list|(
name|routine
argument_list|,
name|cursors
argument_list|)
expr_stmt|;
block|}
name|cursors
operator|.
name|add
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the return cursor defined in the specified procedure    */
specifier|public
name|Var
name|consumeReturnCursor
parameter_list|(
name|String
name|routine
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Var
argument_list|>
name|cursors
init|=
name|returnCursors
operator|.
name|get
argument_list|(
name|routine
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursors
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Var
name|var
init|=
name|cursors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cursors
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
comment|/**    * Push a value to the stack    */
specifier|public
name|void
name|stackPush
parameter_list|(
name|Var
name|var
parameter_list|)
block|{
name|exec
operator|.
name|stack
operator|.
name|push
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
comment|/**    * Push a string value to the stack    */
specifier|public
name|void
name|stackPush
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|exec
operator|.
name|stack
operator|.
name|push
argument_list|(
operator|new
name|Var
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stackPush
parameter_list|(
name|StringBuilder
name|val
parameter_list|)
block|{
name|stackPush
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Push a boolean value to the stack    */
specifier|public
name|void
name|stackPush
parameter_list|(
name|Boolean
name|val
parameter_list|)
block|{
name|exec
operator|.
name|stack
operator|.
name|push
argument_list|(
operator|new
name|Var
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Select a value from the stack, but not remove    */
specifier|public
name|Var
name|stackPeek
parameter_list|()
block|{
return|return
name|exec
operator|.
name|stack
operator|.
name|peek
argument_list|()
return|;
block|}
comment|/**    * Pop a value from the stack    */
specifier|public
name|Var
name|stackPop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|stack
operator|.
name|pop
argument_list|()
return|;
block|}
return|return
name|Var
operator|.
name|Empty
return|;
block|}
comment|/**    * Push a value to the call stack    */
specifier|public
name|void
name|callStackPush
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|exec
operator|.
name|callStack
operator|.
name|push
argument_list|(
name|val
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Select a value from the call stack, but not remove    */
specifier|public
name|String
name|callStackPeek
parameter_list|()
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|callStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|callStack
operator|.
name|peek
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Pop a value from the call stack    */
specifier|public
name|String
name|callStackPop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|callStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|callStack
operator|.
name|pop
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**     * Find an existing variable by name     */
specifier|public
name|Var
name|findVariable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Var
name|var
init|=
literal|null
decl_stmt|;
name|String
name|name1
init|=
name|name
decl_stmt|;
name|String
name|name1a
init|=
literal|null
decl_stmt|;
name|String
name|name2
init|=
literal|null
decl_stmt|;
name|Scope
name|cur
init|=
name|exec
operator|.
name|currentScope
decl_stmt|;
name|Package
name|pack
init|=
literal|null
decl_stmt|;
name|Package
name|packCallContext
init|=
name|exec
operator|.
name|getPackageCallContext
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|qualified
init|=
name|exec
operator|.
name|meta
operator|.
name|splitIdentifier
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualified
operator|!=
literal|null
condition|)
block|{
name|name1
operator|=
name|qualified
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|name2
operator|=
name|qualified
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pack
operator|=
name|findPackage
argument_list|(
name|name1
argument_list|)
expr_stmt|;
if|if
condition|(
name|pack
operator|!=
literal|null
condition|)
block|{
name|var
operator|=
name|pack
operator|.
name|findVariable
argument_list|(
name|name2
argument_list|)
expr_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
return|return
name|var
return|;
block|}
block|}
block|}
if|if
condition|(
name|name1
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|name1a
operator|=
name|name1
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|cur
operator|!=
literal|null
condition|)
block|{
name|var
operator|=
name|findVariable
argument_list|(
name|cur
operator|.
name|vars
argument_list|,
name|name1
argument_list|)
expr_stmt|;
if|if
condition|(
name|var
operator|==
literal|null
operator|&&
name|name1a
operator|!=
literal|null
condition|)
block|{
name|var
operator|=
name|findVariable
argument_list|(
name|cur
operator|.
name|vars
argument_list|,
name|name1a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|var
operator|==
literal|null
operator|&&
name|packCallContext
operator|!=
literal|null
condition|)
block|{
name|var
operator|=
name|packCallContext
operator|.
name|findVariable
argument_list|(
name|name1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|qualified
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|var
operator|.
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|ROW
operator|&&
name|var
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
name|Row
name|row
init|=
operator|(
name|Row
operator|)
name|var
operator|.
name|value
decl_stmt|;
name|var
operator|=
name|row
operator|.
name|getValue
argument_list|(
name|name2
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|var
return|;
block|}
if|if
condition|(
name|cur
operator|.
name|type
operator|==
name|Scope
operator|.
name|Type
operator|.
name|ROUTINE
condition|)
block|{
name|cur
operator|=
name|exec
operator|.
name|globalScope
expr_stmt|;
block|}
else|else
block|{
name|cur
operator|=
name|cur
operator|.
name|parent
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Var
name|findVariable
parameter_list|(
name|Var
name|name
parameter_list|)
block|{
return|return
name|findVariable
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|Var
name|findVariable
parameter_list|(
name|ArrayList
argument_list|<
name|Var
argument_list|>
name|vars
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Var
name|var
range|:
name|vars
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|var
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|var
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Find a cursor variable by name    */
specifier|public
name|Var
name|findCursor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Var
name|cursor
init|=
name|exec
operator|.
name|findVariable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursor
operator|!=
literal|null
operator|&&
name|cursor
operator|.
name|type
operator|==
name|Type
operator|.
name|CURSOR
condition|)
block|{
return|return
name|cursor
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Find the package by name    */
name|Package
name|findPackage
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|packages
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Enter a new scope    */
specifier|public
name|void
name|enterScope
parameter_list|(
name|Scope
name|scope
parameter_list|)
block|{
name|exec
operator|.
name|scopes
operator|.
name|push
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|enterScope
parameter_list|(
name|Scope
operator|.
name|Type
name|type
parameter_list|)
block|{
name|enterScope
argument_list|(
name|type
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|enterScope
parameter_list|(
name|Scope
operator|.
name|Type
name|type
parameter_list|,
name|Package
name|pack
parameter_list|)
block|{
name|exec
operator|.
name|currentScope
operator|=
operator|new
name|Scope
argument_list|(
name|exec
operator|.
name|currentScope
argument_list|,
name|type
argument_list|,
name|pack
argument_list|)
expr_stmt|;
name|enterScope
argument_list|(
name|exec
operator|.
name|currentScope
argument_list|)
expr_stmt|;
block|}
name|void
name|enterGlobalScope
parameter_list|()
block|{
name|globalScope
operator|=
operator|new
name|Scope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|GLOBAL
argument_list|)
expr_stmt|;
name|currentScope
operator|=
name|globalScope
expr_stmt|;
name|enterScope
argument_list|(
name|globalScope
argument_list|)
expr_stmt|;
block|}
comment|/**    * Leave the current scope    */
specifier|public
name|void
name|leaveScope
parameter_list|()
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|signals
operator|.
name|empty
argument_list|()
condition|)
block|{
name|Scope
name|scope
init|=
name|exec
operator|.
name|scopes
operator|.
name|peek
argument_list|()
decl_stmt|;
name|Signal
name|signal
init|=
name|exec
operator|.
name|signals
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|exec
operator|.
name|conf
operator|.
name|onError
operator|!=
name|OnError
operator|.
name|SETERROR
condition|)
block|{
name|runExitHandler
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|signal
operator|.
name|type
operator|==
name|Signal
operator|.
name|Type
operator|.
name|LEAVE_ROUTINE
operator|&&
name|scope
operator|.
name|type
operator|==
name|Scope
operator|.
name|Type
operator|.
name|ROUTINE
condition|)
block|{
name|exec
operator|.
name|signals
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
name|exec
operator|.
name|currentScope
operator|=
name|exec
operator|.
name|scopes
operator|.
name|pop
argument_list|()
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
comment|/**    * Send a signal    */
specifier|public
name|void
name|signal
parameter_list|(
name|Signal
name|signal
parameter_list|)
block|{
name|exec
operator|.
name|signals
operator|.
name|push
argument_list|(
name|signal
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|signal
parameter_list|(
name|Signal
operator|.
name|Type
name|type
parameter_list|,
name|String
name|value
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
name|signal
argument_list|(
operator|new
name|Signal
argument_list|(
name|type
argument_list|,
name|value
argument_list|,
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|signal
parameter_list|(
name|Signal
operator|.
name|Type
name|type
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|setSqlCode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|signal
argument_list|(
name|type
argument_list|,
name|value
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|signal
parameter_list|(
name|Signal
operator|.
name|Type
name|type
parameter_list|)
block|{
name|setSqlCode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|signal
argument_list|(
name|type
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|signal
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|setSqlCode
argument_list|(
name|query
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
argument_list|,
name|query
operator|.
name|errorText
argument_list|()
argument_list|,
name|query
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|signal
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|setSqlCode
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
comment|/**    * Resignal the condition    */
specifier|public
name|void
name|resignal
parameter_list|()
block|{
name|resignal
argument_list|(
name|exec
operator|.
name|currentSignal
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|resignal
parameter_list|(
name|Signal
name|signal
parameter_list|)
block|{
if|if
condition|(
name|signal
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|resignal
operator|=
literal|true
expr_stmt|;
name|signal
argument_list|(
name|signal
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run CONTINUE handlers     */
name|boolean
name|runContinueHandler
parameter_list|()
block|{
name|Scope
name|cur
init|=
name|exec
operator|.
name|currentScope
decl_stmt|;
name|exec
operator|.
name|currentSignal
operator|=
name|exec
operator|.
name|signals
operator|.
name|pop
argument_list|()
expr_stmt|;
while|while
condition|(
name|cur
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Handler
name|h
range|:
name|cur
operator|.
name|handlers
control|)
block|{
if|if
condition|(
name|h
operator|.
name|execType
operator|!=
name|Handler
operator|.
name|ExecType
operator|.
name|CONTINUE
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
name|h
operator|.
name|type
operator|!=
name|Signal
operator|.
name|Type
operator|.
name|USERDEFINED
operator|&&
name|h
operator|.
name|type
operator|==
name|exec
operator|.
name|currentSignal
operator|.
name|type
operator|)
operator|||
operator|(
name|h
operator|.
name|type
operator|==
name|Signal
operator|.
name|Type
operator|.
name|USERDEFINED
operator|&&
name|h
operator|.
name|type
operator|==
name|exec
operator|.
name|currentSignal
operator|.
name|type
operator|&&
name|h
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|exec
operator|.
name|currentSignal
operator|.
name|value
argument_list|)
operator|)
condition|)
block|{
name|trace
argument_list|(
name|h
operator|.
name|ctx
argument_list|,
literal|"CONTINUE HANDLER"
argument_list|)
expr_stmt|;
name|enterScope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|HANDLER
argument_list|)
expr_stmt|;
name|exec
operator|.
name|currentHandlerScope
operator|=
name|h
operator|.
name|scope
expr_stmt|;
name|visit
argument_list|(
name|h
operator|.
name|ctx
operator|.
name|single_block_stmt
argument_list|()
argument_list|)
expr_stmt|;
name|leaveScope
argument_list|()
expr_stmt|;
name|exec
operator|.
name|currentSignal
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|cur
operator|=
name|cur
operator|.
name|parent
expr_stmt|;
block|}
name|exec
operator|.
name|signals
operator|.
name|push
argument_list|(
name|exec
operator|.
name|currentSignal
argument_list|)
expr_stmt|;
name|exec
operator|.
name|currentSignal
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * Run EXIT handler defined for the current scope     */
name|boolean
name|runExitHandler
parameter_list|()
block|{
name|exec
operator|.
name|currentSignal
operator|=
name|exec
operator|.
name|signals
operator|.
name|pop
argument_list|()
expr_stmt|;
for|for
control|(
name|Handler
name|h
range|:
name|currentScope
operator|.
name|handlers
control|)
block|{
if|if
condition|(
name|h
operator|.
name|execType
operator|!=
name|Handler
operator|.
name|ExecType
operator|.
name|EXIT
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
name|h
operator|.
name|type
operator|!=
name|Signal
operator|.
name|Type
operator|.
name|USERDEFINED
operator|&&
name|h
operator|.
name|type
operator|==
name|exec
operator|.
name|currentSignal
operator|.
name|type
operator|)
operator|||
operator|(
name|h
operator|.
name|type
operator|==
name|Signal
operator|.
name|Type
operator|.
name|USERDEFINED
operator|&&
name|h
operator|.
name|type
operator|==
name|exec
operator|.
name|currentSignal
operator|.
name|type
operator|&&
name|h
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|currentSignal
operator|.
name|value
argument_list|)
operator|)
condition|)
block|{
name|trace
argument_list|(
name|h
operator|.
name|ctx
argument_list|,
literal|"EXIT HANDLER"
argument_list|)
expr_stmt|;
name|enterScope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|HANDLER
argument_list|)
expr_stmt|;
name|exec
operator|.
name|currentHandlerScope
operator|=
name|h
operator|.
name|scope
expr_stmt|;
name|visit
argument_list|(
name|h
operator|.
name|ctx
operator|.
name|single_block_stmt
argument_list|()
argument_list|)
expr_stmt|;
name|leaveScope
argument_list|()
expr_stmt|;
name|exec
operator|.
name|currentSignal
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|exec
operator|.
name|signals
operator|.
name|push
argument_list|(
name|exec
operator|.
name|currentSignal
argument_list|)
expr_stmt|;
name|exec
operator|.
name|currentSignal
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * Pop the last signal    */
specifier|public
name|Signal
name|signalPop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|signals
operator|.
name|empty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|signals
operator|.
name|pop
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Peek the last signal    */
specifier|public
name|Signal
name|signalPeek
parameter_list|()
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|signals
operator|.
name|empty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|signals
operator|.
name|peek
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Pop the current label    */
specifier|public
name|String
name|labelPop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|labels
operator|.
name|empty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|labels
operator|.
name|pop
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
comment|/**    * Execute a SQL query (SELECT)    */
specifier|public
name|Query
name|executeQuery
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|Query
name|query
parameter_list|,
name|String
name|connProfile
parameter_list|)
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|offline
condition|)
block|{
name|exec
operator|.
name|rowCount
operator|=
literal|0
expr_stmt|;
name|exec
operator|.
name|conn
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|,
name|connProfile
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
name|setSqlNoData
argument_list|()
expr_stmt|;
name|info
argument_list|(
name|ctx
argument_list|,
literal|"Not executed - offline mode set"
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
specifier|public
name|Query
name|executeQuery
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|sql
parameter_list|,
name|String
name|connProfile
parameter_list|)
block|{
return|return
name|executeQuery
argument_list|(
name|ctx
argument_list|,
operator|new
name|Query
argument_list|(
name|sql
argument_list|)
argument_list|,
name|connProfile
argument_list|)
return|;
block|}
comment|/**    * Prepare a SQL query (SELECT)    */
specifier|public
name|Query
name|prepareQuery
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|Query
name|query
parameter_list|,
name|String
name|connProfile
parameter_list|)
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|offline
condition|)
block|{
name|exec
operator|.
name|rowCount
operator|=
literal|0
expr_stmt|;
name|exec
operator|.
name|conn
operator|.
name|prepareQuery
argument_list|(
name|query
argument_list|,
name|connProfile
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
name|setSqlNoData
argument_list|()
expr_stmt|;
name|info
argument_list|(
name|ctx
argument_list|,
literal|"Not executed - offline mode set"
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
specifier|public
name|Query
name|prepareQuery
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|sql
parameter_list|,
name|String
name|connProfile
parameter_list|)
block|{
return|return
name|prepareQuery
argument_list|(
name|ctx
argument_list|,
operator|new
name|Query
argument_list|(
name|sql
argument_list|)
argument_list|,
name|connProfile
argument_list|)
return|;
block|}
comment|/**    * Execute a SQL statement     */
specifier|public
name|Query
name|executeSql
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|sql
parameter_list|,
name|String
name|connProfile
parameter_list|)
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|offline
condition|)
block|{
name|exec
operator|.
name|rowCount
operator|=
literal|0
expr_stmt|;
name|Query
name|query
init|=
name|conn
operator|.
name|executeSql
argument_list|(
name|sql
argument_list|,
name|connProfile
argument_list|)
decl_stmt|;
name|exec
operator|.
name|rowCount
operator|=
name|query
operator|.
name|getRowCount
argument_list|()
expr_stmt|;
return|return
name|query
return|;
block|}
name|info
argument_list|(
name|ctx
argument_list|,
literal|"Not executed - offline mode set"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Query
argument_list|(
literal|""
argument_list|)
return|;
block|}
comment|/**    * Close the query object    */
specifier|public
name|void
name|closeQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|conn
parameter_list|)
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|offline
condition|)
block|{
name|exec
operator|.
name|conn
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Register JARs, FILEs and CREATE TEMPORARY FUNCTION for UDF call    */
specifier|public
name|void
name|registerUdf
parameter_list|()
block|{
if|if
condition|(
name|udfRegistered
condition|)
block|{
return|return;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|sql
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|dir
init|=
name|Utils
operator|.
name|getExecDir
argument_list|()
decl_stmt|;
name|sql
operator|.
name|add
argument_list|(
literal|"ADD JAR "
operator|+
name|dir
operator|+
literal|"hplsql.jar"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|add
argument_list|(
literal|"ADD JAR "
operator|+
name|dir
operator|+
literal|"antlr-runtime-4.5.jar"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|add
argument_list|(
literal|"ADD FILE "
operator|+
name|dir
operator|+
name|Conf
operator|.
name|SITE_XML
argument_list|)
expr_stmt|;
if|if
condition|(
name|dotHplsqlrcExists
condition|)
block|{
name|sql
operator|.
name|add
argument_list|(
literal|"ADD FILE "
operator|+
name|dir
operator|+
name|Conf
operator|.
name|DOT_HPLSQLRC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hplsqlrcExists
condition|)
block|{
name|sql
operator|.
name|add
argument_list|(
literal|"ADD FILE "
operator|+
name|dir
operator|+
name|Conf
operator|.
name|HPLSQLRC
argument_list|)
expr_stmt|;
block|}
name|String
name|lu
init|=
name|createLocalUdf
argument_list|()
decl_stmt|;
if|if
condition|(
name|lu
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|add
argument_list|(
literal|"ADD FILE "
operator|+
name|lu
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|add
argument_list|(
literal|"CREATE TEMPORARY FUNCTION hplsql AS 'org.apache.hive.hplsql.Udf'"
argument_list|)
expr_stmt|;
name|exec
operator|.
name|conn
operator|.
name|addPreSql
argument_list|(
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|udfRegistered
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Initialize options    */
name|void
name|initOptions
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|i
init|=
name|exec
operator|.
name|conf
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|item
init|=
operator|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
operator|(
name|String
operator|)
name|item
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|item
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
operator|||
name|value
operator|==
literal|null
operator|||
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"hplsql."
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|compareToIgnoreCase
argument_list|(
name|Conf
operator|.
name|CONN_DEFAULT
argument_list|)
operator|==
literal|0
condition|)
block|{
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"hplsql.conn.init."
argument_list|)
condition|)
block|{
name|exec
operator|.
name|conn
operator|.
name|addConnectionInit
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|17
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|Conf
operator|.
name|CONN_CONVERT
argument_list|)
condition|)
block|{
name|exec
operator|.
name|conf
operator|.
name|setConnectionConvert
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|20
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"hplsql.conn."
argument_list|)
condition|)
block|{
name|exec
operator|.
name|conn
operator|.
name|addConnection
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|12
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"hplsql."
argument_list|)
condition|)
block|{
name|exec
operator|.
name|conf
operator|.
name|setOption
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Set SQLCODE    */
specifier|public
name|void
name|setSqlCode
parameter_list|(
name|int
name|sqlcode
parameter_list|)
block|{
name|Var
name|var
init|=
name|findVariable
argument_list|(
name|SQLCODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
name|var
operator|.
name|setValue
argument_list|(
operator|new
name|Long
argument_list|(
name|sqlcode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setSqlCode
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|SQLException
condition|)
block|{
name|setSqlCode
argument_list|(
operator|(
operator|(
name|SQLException
operator|)
name|exception
operator|)
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|setSqlState
argument_list|(
operator|(
operator|(
name|SQLException
operator|)
name|exception
operator|)
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setSqlCode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setSqlState
argument_list|(
literal|"02000"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set SQLSTATE    */
specifier|public
name|void
name|setSqlState
parameter_list|(
name|String
name|sqlstate
parameter_list|)
block|{
name|Var
name|var
init|=
name|findVariable
argument_list|(
name|SQLSTATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
name|var
operator|.
name|setValue
argument_list|(
name|sqlstate
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set HOSTCODE    */
specifier|public
name|void
name|setHostCode
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|Var
name|var
init|=
name|findVariable
argument_list|(
name|HOSTCODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
name|var
operator|.
name|setValue
argument_list|(
operator|new
name|Long
argument_list|(
name|code
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set successful execution for SQL    */
specifier|public
name|void
name|setSqlSuccess
parameter_list|()
block|{
name|setSqlCode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setSqlState
argument_list|(
literal|"00000"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set SQL_NO_DATA as the result of SQL execution    */
specifier|public
name|void
name|setSqlNoData
parameter_list|()
block|{
name|setSqlCode
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|setSqlState
argument_list|(
literal|"01000"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compile and run HPL/SQL script     */
specifier|public
name|Integer
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|enterGlobalScope
argument_list|()
expr_stmt|;
if|if
condition|(
name|init
argument_list|(
name|args
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
name|Var
name|result
init|=
name|run
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|leaveScope
argument_list|()
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
name|printExceptions
argument_list|()
expr_stmt|;
return|return
name|getProgramReturnCode
argument_list|()
return|;
block|}
comment|/**    * Run already compiled HPL/SQL script (also used from Hive UDF)    */
specifier|public
name|Var
name|run
parameter_list|()
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|execMain
operator|!=
literal|null
condition|)
block|{
name|initRoutines
operator|=
literal|true
expr_stmt|;
name|visit
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|initRoutines
operator|=
literal|false
expr_stmt|;
name|exec
operator|.
name|function
operator|.
name|execProc
argument_list|(
name|execMain
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visit
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exec
operator|.
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|stackPop
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Initialize PL/HQL    */
name|Integer
name|init
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|parseArguments
argument_list|(
name|args
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// specify the default log4j2 properties file.
name|System
operator|.
name|setProperty
argument_list|(
literal|"log4j.configurationFile"
argument_list|,
literal|"hive-log4j2.xml"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Conf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|init
argument_list|()
expr_stmt|;
name|conn
operator|=
operator|new
name|Conn
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|meta
operator|=
operator|new
name|Meta
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|initOptions
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|Expression
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|select
operator|=
operator|new
name|Select
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|stmt
operator|=
operator|new
name|Stmt
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|converter
operator|=
operator|new
name|Converter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|function
operator|=
operator|new
name|Function
argument_list|(
name|this
argument_list|)
expr_stmt|;
operator|new
name|FunctionDatetime
argument_list|(
name|this
argument_list|)
operator|.
name|register
argument_list|(
name|function
argument_list|)
expr_stmt|;
operator|new
name|FunctionMisc
argument_list|(
name|this
argument_list|)
operator|.
name|register
argument_list|(
name|function
argument_list|)
expr_stmt|;
operator|new
name|FunctionString
argument_list|(
name|this
argument_list|)
operator|.
name|register
argument_list|(
name|function
argument_list|)
expr_stmt|;
operator|new
name|FunctionOra
argument_list|(
name|this
argument_list|)
operator|.
name|register
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|addVariable
argument_list|(
operator|new
name|Var
argument_list|(
name|SQLCODE
argument_list|,
name|Var
operator|.
name|Type
operator|.
name|BIGINT
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|addVariable
argument_list|(
operator|new
name|Var
argument_list|(
name|SQLSTATE
argument_list|,
name|Var
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|"00000"
argument_list|)
argument_list|)
expr_stmt|;
name|addVariable
argument_list|(
operator|new
name|Var
argument_list|(
name|HOSTCODE
argument_list|,
name|Var
operator|.
name|Type
operator|.
name|BIGINT
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|v
range|:
name|arguments
operator|.
name|getVars
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addVariable
argument_list|(
operator|new
name|Var
argument_list|(
name|v
operator|.
name|getKey
argument_list|()
argument_list|,
name|Var
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|v
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|input
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|execString
operator|!=
literal|null
condition|)
block|{
name|input
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|execString
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|input
operator|=
operator|new
name|FileInputStream
argument_list|(
name|execFile
argument_list|)
expr_stmt|;
block|}
name|HplsqlLexer
name|lexer
init|=
operator|new
name|HplsqlLexer
argument_list|(
operator|new
name|ANTLRInputStream
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|CommonTokenStream
name|tokens
init|=
operator|new
name|CommonTokenStream
argument_list|(
name|lexer
argument_list|)
decl_stmt|;
name|HplsqlParser
name|parser
init|=
operator|new
name|HplsqlParser
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
name|tree
operator|=
name|parser
operator|.
name|program
argument_list|()
expr_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Configuration file: "
operator|+
name|conf
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Parser tree: "
operator|+
name|tree
operator|.
name|toStringTree
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|includeRcFile
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Parse command line arguments    */
name|boolean
name|parseArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|boolean
name|parsed
init|=
name|arguments
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|parsed
operator|&&
name|arguments
operator|.
name|hasVersionOption
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|parsed
operator|||
name|arguments
operator|.
name|hasHelpOption
argument_list|()
operator|||
operator|(
name|arguments
operator|.
name|getExecString
argument_list|()
operator|==
literal|null
operator|&&
name|arguments
operator|.
name|getFileName
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|arguments
operator|.
name|printHelp
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|execString
operator|=
name|arguments
operator|.
name|getExecString
argument_list|()
expr_stmt|;
name|execFile
operator|=
name|arguments
operator|.
name|getFileName
argument_list|()
expr_stmt|;
name|execMain
operator|=
name|arguments
operator|.
name|getMain
argument_list|()
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|hasTraceOption
argument_list|()
condition|)
block|{
name|trace
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|arguments
operator|.
name|hasOfflineOption
argument_list|()
condition|)
block|{
name|offline
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|execString
operator|!=
literal|null
operator|&&
name|execFile
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The '-e' and '-f' options cannot be specified simultaneously."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Include statements from .hplsqlrc and hplsql rc files    */
name|void
name|includeRcFile
parameter_list|()
block|{
if|if
condition|(
name|includeFile
argument_list|(
name|Conf
operator|.
name|DOT_HPLSQLRC
argument_list|)
condition|)
block|{
name|dotHplsqlrcExists
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|includeFile
argument_list|(
name|Conf
operator|.
name|HPLSQLRC
argument_list|)
condition|)
block|{
name|hplsqlrcExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|udfRun
condition|)
block|{
name|includeFile
argument_list|(
name|Conf
operator|.
name|HPLSQL_LOCALS_SQL
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Include statements from a file    */
name|boolean
name|includeFile
parameter_list|(
name|String
name|file
parameter_list|)
block|{
try|try
block|{
name|String
name|content
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|File
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
operator|&&
operator|!
name|content
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
literal|null
argument_list|,
literal|"INLCUDE CONTENT "
operator|+
name|file
operator|+
literal|" (non-empty)"
argument_list|)
expr_stmt|;
block|}
operator|new
name|Exec
argument_list|(
name|this
argument_list|)
operator|.
name|include
argument_list|(
name|content
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
return|return
literal|false
return|;
block|}
comment|/**    * Execute statements from an include file    */
name|void
name|include
parameter_list|(
name|String
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|HplsqlLexer
name|lexer
init|=
operator|new
name|HplsqlLexer
argument_list|(
operator|new
name|ANTLRInputStream
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|CommonTokenStream
name|tokens
init|=
operator|new
name|CommonTokenStream
argument_list|(
name|lexer
argument_list|)
decl_stmt|;
name|HplsqlParser
name|parser
init|=
operator|new
name|HplsqlParser
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
name|ParseTree
name|tree
init|=
name|parser
operator|.
name|program
argument_list|()
decl_stmt|;
name|visit
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start executing HPL/SQL script    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitProgram
parameter_list|(
name|HplsqlParser
operator|.
name|ProgramContext
name|ctx
parameter_list|)
block|{
name|Integer
name|rc
init|=
name|visitChildren
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
return|return
name|rc
return|;
block|}
comment|/**    * Enter BEGIN-END block    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitBegin_end_block
parameter_list|(
name|HplsqlParser
operator|.
name|Begin_end_blockContext
name|ctx
parameter_list|)
block|{
name|enterScope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|BEGIN_END
argument_list|)
expr_stmt|;
name|Integer
name|rc
init|=
name|visitChildren
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|leaveScope
argument_list|()
expr_stmt|;
return|return
name|rc
return|;
block|}
comment|/**    * Free resources before exit    */
name|void
name|cleanup
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|i
range|:
name|managedTables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|sql
init|=
literal|"DROP TABLE IF EXISTS "
operator|+
name|i
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|executeSql
argument_list|(
literal|null
argument_list|,
name|sql
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
literal|null
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Output information about unhandled exceptions    */
name|void
name|printExceptions
parameter_list|()
block|{
while|while
condition|(
operator|!
name|signals
operator|.
name|empty
argument_list|()
condition|)
block|{
name|Signal
name|sig
init|=
name|signals
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|sig
operator|.
name|type
operator|==
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unhandled exception in HPL/SQL"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sig
operator|.
name|exception
operator|!=
literal|null
condition|)
block|{
name|sig
operator|.
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sig
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|sig
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the program return code    */
name|Integer
name|getProgramReturnCode
parameter_list|()
block|{
name|Integer
name|rc
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|signals
operator|.
name|empty
argument_list|()
condition|)
block|{
name|Signal
name|sig
init|=
name|signals
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|sig
operator|.
name|type
operator|==
name|Signal
operator|.
name|Type
operator|.
name|LEAVE_ROUTINE
operator|&&
name|sig
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rc
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sig
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|rc
operator|=
literal|1
expr_stmt|;
block|}
block|}
block|}
return|return
name|rc
return|;
block|}
comment|/**    * Executing a statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitStmt
parameter_list|(
name|HplsqlParser
operator|.
name|StmtContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|semicolon_stmt
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|initRoutines
operator|&&
name|ctx
operator|.
name|create_procedure_stmt
argument_list|()
operator|==
literal|null
operator|&&
name|ctx
operator|.
name|create_function_stmt
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|exec
operator|.
name|resignal
condition|)
block|{
if|if
condition|(
name|exec
operator|.
name|currentScope
operator|!=
name|exec
operator|.
name|currentHandlerScope
operator|.
name|parent
condition|)
block|{
return|return
literal|0
return|;
block|}
name|exec
operator|.
name|resignal
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exec
operator|.
name|signals
operator|.
name|empty
argument_list|()
operator|&&
name|exec
operator|.
name|conf
operator|.
name|onError
operator|!=
name|OnError
operator|.
name|SETERROR
condition|)
block|{
if|if
condition|(
operator|!
name|runContinueHandler
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
block|}
name|Var
name|prev
init|=
name|stackPop
argument_list|()
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
name|prev
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prev
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|visitChildren
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Executing or building SELECT statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitSelect_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Select_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|select
operator|.
name|select
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitCte_select_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Cte_select_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|select
operator|.
name|cte
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitFullselect_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Fullselect_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|select
operator|.
name|fullselect
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitSubselect_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Subselect_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|select
operator|.
name|subselect
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitSelect_list
parameter_list|(
name|HplsqlParser
operator|.
name|Select_listContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|select
operator|.
name|selectList
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitFrom_clause
parameter_list|(
name|HplsqlParser
operator|.
name|From_clauseContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|select
operator|.
name|from
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitFrom_table_name_clause
parameter_list|(
name|HplsqlParser
operator|.
name|From_table_name_clauseContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|select
operator|.
name|fromTable
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitFrom_subselect_clause
parameter_list|(
name|HplsqlParser
operator|.
name|From_subselect_clauseContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|select
operator|.
name|fromSubselect
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitFrom_join_clause
parameter_list|(
name|HplsqlParser
operator|.
name|From_join_clauseContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|select
operator|.
name|fromJoin
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitFrom_table_values_clause
parameter_list|(
name|HplsqlParser
operator|.
name|From_table_values_clauseContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|select
operator|.
name|fromTableValues
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitWhere_clause
parameter_list|(
name|HplsqlParser
operator|.
name|Where_clauseContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|select
operator|.
name|where
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitSelect_options_item
parameter_list|(
name|HplsqlParser
operator|.
name|Select_options_itemContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|select
operator|.
name|option
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Column name    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitColumn_name
parameter_list|(
name|HplsqlParser
operator|.
name|Column_nameContext
name|ctx
parameter_list|)
block|{
name|stackPush
argument_list|(
name|meta
operator|.
name|normalizeIdentifierPart
argument_list|(
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Table name    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitTable_name
parameter_list|(
name|HplsqlParser
operator|.
name|Table_nameContext
name|ctx
parameter_list|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|nameUp
init|=
name|name
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|String
name|nameNorm
init|=
name|meta
operator|.
name|normalizeIdentifier
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|actualName
init|=
name|exec
operator|.
name|managedTables
operator|.
name|get
argument_list|(
name|nameUp
argument_list|)
decl_stmt|;
name|String
name|conn
init|=
name|exec
operator|.
name|objectConnMap
operator|.
name|get
argument_list|(
name|nameUp
argument_list|)
decl_stmt|;
if|if
condition|(
name|conn
operator|==
literal|null
condition|)
block|{
name|conn
operator|=
name|conf
operator|.
name|defaultConnection
expr_stmt|;
block|}
name|stmtConnList
operator|.
name|add
argument_list|(
name|conn
argument_list|)
expr_stmt|;
if|if
condition|(
name|actualName
operator|!=
literal|null
condition|)
block|{
name|stackPush
argument_list|(
name|actualName
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|actualName
operator|=
name|exec
operator|.
name|objectMap
operator|.
name|get
argument_list|(
name|nameUp
argument_list|)
expr_stmt|;
if|if
condition|(
name|actualName
operator|!=
literal|null
condition|)
block|{
name|stackPush
argument_list|(
name|actualName
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|stackPush
argument_list|(
name|nameNorm
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * SQL INSERT statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitInsert_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Insert_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|insert
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * EXCEPTION block    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitException_block_item
parameter_list|(
name|HplsqlParser
operator|.
name|Exception_block_itemContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|signals
operator|.
name|empty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|exec
operator|.
name|conf
operator|.
name|onError
operator|==
name|OnError
operator|.
name|SETERROR
operator|||
name|exec
operator|.
name|conf
operator|.
name|onError
operator|==
name|OnError
operator|.
name|STOP
condition|)
block|{
name|exec
operator|.
name|signals
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|ctx
operator|.
name|L_ID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"OTHERS"
argument_list|)
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"EXCEPTION HANDLER"
argument_list|)
expr_stmt|;
name|exec
operator|.
name|signals
operator|.
name|pop
argument_list|()
expr_stmt|;
name|enterScope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|HANDLER
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|leaveScope
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * DECLARE variable statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitDeclare_var_item
parameter_list|(
name|HplsqlParser
operator|.
name|Declare_var_itemContext
name|ctx
parameter_list|)
block|{
name|String
name|type
init|=
literal|null
decl_stmt|;
name|Row
name|row
init|=
literal|null
decl_stmt|;
name|String
name|len
init|=
literal|null
decl_stmt|;
name|String
name|scale
init|=
literal|null
decl_stmt|;
name|Var
name|default_
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|dtype
argument_list|()
operator|.
name|T_ROWTYPE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|row
operator|=
name|meta
operator|.
name|getRowDataType
argument_list|(
name|ctx
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|,
name|ctx
operator|.
name|dtype
argument_list|()
operator|.
name|L_ID
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|Var
operator|.
name|DERIVED_ROWTYPE
expr_stmt|;
block|}
block|}
else|else
block|{
name|type
operator|=
name|getDataType
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|dtype_len
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|len
operator|=
name|ctx
operator|.
name|dtype_len
argument_list|()
operator|.
name|L_INT
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|dtype_len
argument_list|()
operator|.
name|L_INT
argument_list|(
literal|1
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|scale
operator|=
name|ctx
operator|.
name|dtype_len
argument_list|()
operator|.
name|L_INT
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ctx
operator|.
name|dtype_default
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|default_
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|dtype_default
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|cnt
init|=
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Number of variables declared with the same data type and default
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|(
name|i
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|Var
name|var
init|=
operator|new
name|Var
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|len
argument_list|,
name|scale
argument_list|,
name|default_
argument_list|)
decl_stmt|;
name|exec
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_CONSTANT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|var
operator|.
name|setConstant
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
if|if
condition|(
name|default_
operator|!=
literal|null
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"DECLARE "
operator|+
name|name
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" = "
operator|+
name|var
operator|.
name|toSqlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"DECLARE "
operator|+
name|name
operator|+
literal|" "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|exec
operator|.
name|addVariable
argument_list|(
operator|new
name|Var
argument_list|(
name|name
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"DECLARE "
operator|+
name|name
operator|+
literal|" "
operator|+
name|ctx
operator|.
name|dtype
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Get the variable data type    */
name|String
name|getDataType
parameter_list|(
name|HplsqlParser
operator|.
name|Declare_var_itemContext
name|ctx
parameter_list|)
block|{
name|String
name|type
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|dtype
argument_list|()
operator|.
name|T_TYPE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|meta
operator|.
name|getDataType
argument_list|(
name|ctx
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|,
name|ctx
operator|.
name|dtype
argument_list|()
operator|.
name|L_ID
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|Var
operator|.
name|DERIVED_TYPE
expr_stmt|;
block|}
block|}
else|else
block|{
name|type
operator|=
name|getFormattedText
argument_list|(
name|ctx
operator|.
name|dtype
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
comment|/**    * ALLOCATE CURSOR statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitAllocate_cursor_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Allocate_cursor_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|allocateCursor
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * ASSOCIATE LOCATOR statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitAssociate_locator_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Associate_locator_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|associateLocator
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * DECLARE cursor statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitDeclare_cursor_item
parameter_list|(
name|HplsqlParser
operator|.
name|Declare_cursor_itemContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|declareCursor
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * DROP statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitDrop_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Drop_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|drop
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * OPEN cursor statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitOpen_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Open_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|open
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * FETCH cursor statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitFetch_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Fetch_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|fetch
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * CLOSE cursor statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitClose_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Close_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|close
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * CMP statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitCmp_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Cmp_stmtContext
name|ctx
parameter_list|)
block|{
return|return
operator|new
name|Cmp
argument_list|(
name|exec
argument_list|)
operator|.
name|run
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * COPY statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitCopy_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Copy_stmtContext
name|ctx
parameter_list|)
block|{
return|return
operator|new
name|Copy
argument_list|(
name|exec
argument_list|)
operator|.
name|run
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * COPY FROM LOCAL statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitCopy_from_local_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Copy_from_local_stmtContext
name|ctx
parameter_list|)
block|{
return|return
operator|new
name|Copy
argument_list|(
name|exec
argument_list|)
operator|.
name|runFromLocal
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * DECLARE HANDLER statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitDeclare_handler_item
parameter_list|(
name|HplsqlParser
operator|.
name|Declare_handler_itemContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"DECLARE HANDLER"
argument_list|)
expr_stmt|;
name|Handler
operator|.
name|ExecType
name|execType
init|=
name|Handler
operator|.
name|ExecType
operator|.
name|EXIT
decl_stmt|;
name|Signal
operator|.
name|Type
name|type
init|=
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_CONTINUE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|execType
operator|=
name|Handler
operator|.
name|ExecType
operator|.
name|CONTINUE
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|ident
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|Signal
operator|.
name|Type
operator|.
name|USERDEFINED
expr_stmt|;
name|value
operator|=
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_NOT
argument_list|()
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|T_FOUND
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|Signal
operator|.
name|Type
operator|.
name|NOTFOUND
expr_stmt|;
block|}
name|addHandler
argument_list|(
operator|new
name|Handler
argument_list|(
name|execType
argument_list|,
name|type
argument_list|,
name|value
argument_list|,
name|exec
operator|.
name|currentScope
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * DECLARE CONDITION    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitDeclare_condition_item
parameter_list|(
name|HplsqlParser
operator|.
name|Declare_condition_itemContext
name|ctx
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
comment|/**    * DECLARE TEMPORARY TABLE statement     */
annotation|@
name|Override
specifier|public
name|Integer
name|visitDeclare_temporary_table_item
parameter_list|(
name|HplsqlParser
operator|.
name|Declare_temporary_table_itemContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|declareTemporaryTable
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * CREATE TABLE statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitCreate_table_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Create_table_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|createTable
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitCreate_table_options_hive_item
parameter_list|(
name|HplsqlParser
operator|.
name|Create_table_options_hive_itemContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|createTableHiveOptions
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitCreate_table_options_ora_item
parameter_list|(
name|HplsqlParser
operator|.
name|Create_table_options_ora_itemContext
name|ctx
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitCreate_table_options_mssql_item
parameter_list|(
name|HplsqlParser
operator|.
name|Create_table_options_mssql_itemContext
name|ctx
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
comment|/**    * CREATE LOCAL TEMPORARY | VOLATILE TABLE statement     */
annotation|@
name|Override
specifier|public
name|Integer
name|visitCreate_local_temp_table_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Create_local_temp_table_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|createLocalTemporaryTable
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * CREATE FUNCTION statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitCreate_function_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Create_function_stmtContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|function
operator|.
name|addUserFunction
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|addLocalUdf
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * CREATE PACKAGE specification statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitCreate_package_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Create_package_stmtContext
name|ctx
parameter_list|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|currentPackageDecl
operator|=
operator|new
name|Package
argument_list|(
name|name
argument_list|,
name|exec
argument_list|)
expr_stmt|;
name|packages
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|currentPackageDecl
argument_list|)
expr_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"CREATE PACKAGE"
argument_list|)
expr_stmt|;
name|currentPackageDecl
operator|.
name|createSpecification
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|currentPackageDecl
operator|=
literal|null
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * CREATE PACKAGE body statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitCreate_package_body_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Create_package_body_stmtContext
name|ctx
parameter_list|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|currentPackageDecl
operator|=
name|packages
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentPackageDecl
operator|==
literal|null
condition|)
block|{
name|currentPackageDecl
operator|=
operator|new
name|Package
argument_list|(
name|name
argument_list|,
name|exec
argument_list|)
expr_stmt|;
name|currentPackageDecl
operator|.
name|setAllMembersPublic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|packages
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|currentPackageDecl
argument_list|)
expr_stmt|;
block|}
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"CREATE PACKAGE BODY"
argument_list|)
expr_stmt|;
name|currentPackageDecl
operator|.
name|createBody
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|currentPackageDecl
operator|=
literal|null
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * CREATE PROCEDURE statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitCreate_procedure_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Create_procedure_stmtContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|function
operator|.
name|addUserProcedure
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|addLocalUdf
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
comment|// Add procedures as they can be invoked by functions
return|return
literal|0
return|;
block|}
comment|/**    * CREATE INDEX statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitCreate_index_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Create_index_stmtContext
name|ctx
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
comment|/**    * Add functions and procedures defined in the current script    */
name|void
name|addLocalUdf
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|==
name|this
condition|)
block|{
name|localUdf
operator|.
name|append
argument_list|(
name|exec
operator|.
name|getFormattedText
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|localUdf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Save local functions and procedures to a file (will be added to the distributed cache)     */
name|String
name|createLocalUdf
parameter_list|()
block|{
if|if
condition|(
name|localUdf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|String
name|file
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
operator|+
literal|"/"
operator|+
name|Conf
operator|.
name|HPLSQL_LOCALS_SQL
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|file
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|localUdf
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Assignment statement for single value    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitAssignment_stmt_single_item
parameter_list|(
name|HplsqlParser
operator|.
name|Assignment_stmt_single_itemContext
name|ctx
parameter_list|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
expr_stmt|;
name|Var
name|var
init|=
name|setVariable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SET "
operator|+
name|name
operator|+
literal|" = "
operator|+
name|var
operator|.
name|toSqlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Assignment statement for multiple values    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitAssignment_stmt_multiple_item
parameter_list|(
name|HplsqlParser
operator|.
name|Assignment_stmt_multiple_itemContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|ecnt
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|(
name|i
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|ecnt
condition|)
block|{
name|visit
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Var
name|var
init|=
name|setVariable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SET "
operator|+
name|name
operator|+
literal|" = "
operator|+
name|var
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Assignment from SELECT statement     */
annotation|@
name|Override
specifier|public
name|Integer
name|visitAssignment_stmt_select_item
parameter_list|(
name|HplsqlParser
operator|.
name|Assignment_stmt_select_itemContext
name|ctx
parameter_list|)
block|{
return|return
name|stmt
operator|.
name|assignFromSelect
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Evaluate an expression    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitExpr
parameter_list|(
name|HplsqlParser
operator|.
name|ExprContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|buildSql
condition|)
block|{
name|exec
operator|.
name|expr
operator|.
name|execSql
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|expr
operator|.
name|exec
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Evaluate a boolean expression    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitBool_expr
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_exprContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|buildSql
condition|)
block|{
name|exec
operator|.
name|expr
operator|.
name|execBoolSql
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|expr
operator|.
name|execBool
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitBool_expr_binary
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_expr_binaryContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|buildSql
condition|)
block|{
name|exec
operator|.
name|expr
operator|.
name|execBoolBinarySql
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|expr
operator|.
name|execBoolBinary
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitBool_expr_unary
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_expr_unaryContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|buildSql
condition|)
block|{
name|exec
operator|.
name|expr
operator|.
name|execBoolUnarySql
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|expr
operator|.
name|execBoolUnary
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Cursor attribute %ISOPEN, %FOUND and %NOTFOUND    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitExpr_cursor_attribute
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_cursor_attributeContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|expr
operator|.
name|execCursorAttribute
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Function call    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitExpr_func
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_funcContext
name|ctx
parameter_list|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|exec
operator|.
name|buildSql
condition|)
block|{
name|exec
operator|.
name|function
operator|.
name|execSql
argument_list|(
name|name
argument_list|,
name|ctx
operator|.
name|expr_func_params
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Package
name|packCallContext
init|=
name|exec
operator|.
name|getPackageCallContext
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|qualified
init|=
name|exec
operator|.
name|meta
operator|.
name|splitIdentifier
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|executed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|qualified
operator|!=
literal|null
condition|)
block|{
name|Package
name|pack
init|=
name|findPackage
argument_list|(
name|qualified
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pack
operator|!=
literal|null
condition|)
block|{
name|executed
operator|=
name|pack
operator|.
name|execFunc
argument_list|(
name|qualified
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ctx
operator|.
name|expr_func_params
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|executed
operator|&&
name|packCallContext
operator|!=
literal|null
condition|)
block|{
name|executed
operator|=
name|packCallContext
operator|.
name|execFunc
argument_list|(
name|name
argument_list|,
name|ctx
operator|.
name|expr_func_params
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|executed
condition|)
block|{
name|exec
operator|.
name|function
operator|.
name|exec
argument_list|(
name|name
argument_list|,
name|ctx
operator|.
name|expr_func_params
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Aggregate or window function call    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitExpr_agg_window_func
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_agg_window_funcContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|function
operator|.
name|execAggWindowSql
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Function with specific syntax    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitExpr_spec_func
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|buildSql
condition|)
block|{
name|exec
operator|.
name|function
operator|.
name|specExecSql
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|function
operator|.
name|specExec
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * INCLUDE statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitInclude_stmt
parameter_list|(
annotation|@
name|NotNull
name|HplsqlParser
operator|.
name|Include_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|include
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * IF statement (PL/SQL syntax)    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitIf_plsql_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|If_plsql_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|ifPlsql
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * IF statement (Transact-SQL syntax)    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitIf_tsql_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|If_tsql_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|ifTsql
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * USE statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitUse_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Use_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|use
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**     * VALUES statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitValues_into_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Values_into_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|values
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * WHILE statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitWhile_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|While_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|while_
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * FOR cursor statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitFor_cursor_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|For_cursor_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|forCursor
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * FOR (integer range) statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitFor_range_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|For_range_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|forRange
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * EXEC, EXECUTE and EXECUTE IMMEDIATE statement to execute dynamic SQL    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitExec_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Exec_stmtContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|inCallStmt
operator|=
literal|true
expr_stmt|;
name|Integer
name|rc
init|=
name|exec
operator|.
name|stmt
operator|.
name|exec
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|exec
operator|.
name|inCallStmt
operator|=
literal|false
expr_stmt|;
return|return
name|rc
return|;
block|}
comment|/**    * CALL statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitCall_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Call_stmtContext
name|ctx
parameter_list|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|Package
name|packCallContext
init|=
name|exec
operator|.
name|getPackageCallContext
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|qualified
init|=
name|exec
operator|.
name|meta
operator|.
name|splitIdentifier
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|exec
operator|.
name|inCallStmt
operator|=
literal|true
expr_stmt|;
name|boolean
name|executed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|qualified
operator|!=
literal|null
condition|)
block|{
name|Package
name|pack
init|=
name|findPackage
argument_list|(
name|qualified
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pack
operator|!=
literal|null
condition|)
block|{
name|executed
operator|=
name|pack
operator|.
name|execProc
argument_list|(
name|qualified
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ctx
operator|.
name|expr_func_params
argument_list|()
argument_list|,
literal|true
comment|/*trace error if not exists*/
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|executed
operator|&&
name|packCallContext
operator|!=
literal|null
condition|)
block|{
name|executed
operator|=
name|packCallContext
operator|.
name|execProc
argument_list|(
name|name
argument_list|,
name|ctx
operator|.
name|expr_func_params
argument_list|()
argument_list|,
literal|false
comment|/*trace error if not exists*/
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|executed
condition|)
block|{
name|exec
operator|.
name|function
operator|.
name|execProc
argument_list|(
name|name
argument_list|,
name|ctx
operator|.
name|expr_func_params
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|inCallStmt
operator|=
literal|false
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * EXIT statement (leave the specified loop with a condition)    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitExit_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Exit_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|exit
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * BREAK statement (leave the innermost loop unconditionally)    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitBreak_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Break_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|break_
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * LEAVE statement (leave the specified loop unconditionally)    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitLeave_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Leave_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|leave
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**     * PRINT statement     */
annotation|@
name|Override
specifier|public
name|Integer
name|visitPrint_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Print_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|print
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * SIGNAL statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitSignal_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Signal_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|signal
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * RESIGNAL statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitResignal_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Resignal_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|resignal
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * RETURN statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitReturn_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Return_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|return_
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**     * SET session options    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitSet_current_schema_option
parameter_list|(
name|HplsqlParser
operator|.
name|Set_current_schema_optionContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|setCurrentSchema
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * MAP OBJECT statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitMap_object_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Map_object_stmtContext
name|ctx
parameter_list|)
block|{
name|String
name|source
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|target
init|=
literal|null
decl_stmt|;
name|String
name|conn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_TO
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|target
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|exec
operator|.
name|objectMap
operator|.
name|put
argument_list|(
name|source
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|T_AT
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|T_TO
argument_list|()
operator|==
literal|null
condition|)
block|{
name|conn
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conn
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|exec
operator|.
name|objectConnMap
operator|.
name|put
argument_list|(
name|source
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|String
name|log
init|=
literal|"MAP OBJECT "
operator|+
name|source
decl_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|log
operator|+=
literal|" AS "
operator|+
name|target
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|log
operator|+=
literal|" AT "
operator|+
name|conn
expr_stmt|;
block|}
name|trace
argument_list|(
name|ctx
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * UPDATE statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitUpdate_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Update_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|stmt
operator|.
name|update
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * DELETE statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitDelete_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Delete_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|stmt
operator|.
name|delete
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * MERGE statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitMerge_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Merge_stmtContext
name|ctx
parameter_list|)
block|{
return|return
name|stmt
operator|.
name|merge
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Run a Hive command line    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitHive
parameter_list|(
annotation|@
name|NotNull
name|HplsqlParser
operator|.
name|HiveContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"HIVE"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|cmd
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|add
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
name|Var
name|params
init|=
operator|new
name|Var
argument_list|(
name|Var
operator|.
name|Type
operator|.
name|STRINGLIST
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|stackPush
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|visitChildren
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|stackPop
argument_list|()
expr_stmt|;
try|try
block|{
name|String
index|[]
name|cmdarr
init|=
operator|new
name|String
index|[
name|cmd
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|cmd
operator|.
name|toArray
argument_list|(
name|cmdarr
argument_list|)
expr_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"HIVE Parameters: "
operator|+
name|Utils
operator|.
name|toString
argument_list|(
name|cmdarr
argument_list|,
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|offline
condition|)
block|{
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdarr
argument_list|)
decl_stmt|;
operator|new
name|StreamGobbler
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|StreamGobbler
argument_list|(
name|p
operator|.
name|getErrorStream
argument_list|()
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|rc
init|=
name|p
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"HIVE Process exit code: "
operator|+
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|setSqlCode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Integer
name|visitHive_item
parameter_list|(
name|HplsqlParser
operator|.
name|Hive_itemContext
name|ctx
parameter_list|)
block|{
name|Var
name|params
init|=
name|stackPeek
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|a
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|params
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|P_e
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|add
argument_list|(
literal|"-e"
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|P_f
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|add
argument_list|(
literal|"-f"
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|P_hiveconf
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|add
argument_list|(
literal|"-hiveconf"
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|L_ID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"="
operator|+
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Executing OS command    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitHost_cmd
parameter_list|(
name|HplsqlParser
operator|.
name|Host_cmdContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"HOST"
argument_list|)
expr_stmt|;
name|execHost
argument_list|(
name|ctx
argument_list|,
name|ctx
operator|.
name|start
operator|.
name|getInputStream
argument_list|()
operator|.
name|getText
argument_list|(
operator|new
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|misc
operator|.
name|Interval
argument_list|(
name|ctx
operator|.
name|start
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|ctx
operator|.
name|stop
operator|.
name|getStopIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|visitHost_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Host_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"HOST"
argument_list|)
expr_stmt|;
name|execHost
argument_list|(
name|ctx
argument_list|,
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|execHost
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|cmd
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"HOST Command: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
block|}
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
operator|new
name|StreamGobbler
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|StreamGobbler
argument_list|(
name|p
operator|.
name|getErrorStream
argument_list|()
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|rc
init|=
name|p
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"HOST Process exit code: "
operator|+
name|rc
argument_list|)
expr_stmt|;
block|}
name|setHostCode
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|setHostCode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Standalone expression (as a statement)    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitExpr_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_stmtContext
name|ctx
parameter_list|)
block|{
name|visitChildren
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * String concatenation operator    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitExpr_concat
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_concatContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|buildSql
condition|)
block|{
name|exec
operator|.
name|expr
operator|.
name|operatorConcatSql
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|expr
operator|.
name|operatorConcat
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Simple CASE expression    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitExpr_case_simple
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_case_simpleContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|buildSql
condition|)
block|{
name|exec
operator|.
name|expr
operator|.
name|execSimpleCaseSql
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|expr
operator|.
name|execSimpleCase
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Searched CASE expression    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitExpr_case_searched
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_case_searchedContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|buildSql
condition|)
block|{
name|exec
operator|.
name|expr
operator|.
name|execSearchedCaseSql
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|expr
operator|.
name|execSearchedCase
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * GET DIAGNOSTICS EXCEPTION statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitGet_diag_stmt_exception_item
parameter_list|(
name|HplsqlParser
operator|.
name|Get_diag_stmt_exception_itemContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|getDiagnosticsException
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * GET DIAGNOSTICS ROW_COUNT statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitGet_diag_stmt_rowcount_item
parameter_list|(
name|HplsqlParser
operator|.
name|Get_diag_stmt_rowcount_itemContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|stmt
operator|.
name|getDiagnosticsRowCount
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * GRANT statement    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitGrant_stmt
parameter_list|(
name|HplsqlParser
operator|.
name|Grant_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"GRANT"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Label    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitLabel
parameter_list|(
name|HplsqlParser
operator|.
name|LabelContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|L_ID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|labels
operator|.
name|push
argument_list|(
name|ctx
operator|.
name|L_ID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|label
init|=
name|ctx
operator|.
name|L_LABEL
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|endsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|label
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|labels
operator|.
name|push
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Identifier    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitIdent
parameter_list|(
name|HplsqlParser
operator|.
name|IdentContext
name|ctx
parameter_list|)
block|{
name|String
name|ident
init|=
name|ctx
operator|.
name|getText
argument_list|()
decl_stmt|;
name|Var
name|var
init|=
name|findVariable
argument_list|(
name|ident
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|buildSql
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|ident
argument_list|,
name|Var
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|var
operator|.
name|toSqlString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|buildSql
operator|&&
operator|!
name|exec
operator|.
name|inCallStmt
operator|&&
name|exec
operator|.
name|function
operator|.
name|isProc
argument_list|(
name|ident
argument_list|)
operator|&&
name|exec
operator|.
name|function
operator|.
name|execProc
argument_list|(
name|ident
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|Var
operator|.
name|Type
operator|.
name|IDENT
argument_list|,
name|ident
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**     * Single quoted string literal     */
annotation|@
name|Override
specifier|public
name|Integer
name|visitSingle_quotedString
parameter_list|(
name|HplsqlParser
operator|.
name|Single_quotedStringContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|buildSql
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|Utils
operator|.
name|unquoteString
argument_list|(
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Integer literal, signed or unsigned    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitInt_number
parameter_list|(
name|HplsqlParser
operator|.
name|Int_numberContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|stack
operator|.
name|push
argument_list|(
operator|new
name|Var
argument_list|(
operator|new
name|Long
argument_list|(
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Interval number (1 DAYS i.e)    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitInterval_number
parameter_list|(
name|HplsqlParser
operator|.
name|Interval_numberContext
name|ctx
parameter_list|)
block|{
name|int
name|num
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|int_number
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Interval
name|interval
init|=
operator|new
name|Interval
argument_list|()
operator|.
name|set
argument_list|(
name|num
argument_list|,
name|ctx
operator|.
name|interval_item
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Decimal literal, signed or unsigned    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitDec_number
parameter_list|(
name|HplsqlParser
operator|.
name|Dec_numberContext
name|ctx
parameter_list|)
block|{
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|ctx
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Boolean literal    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitBool_literal
parameter_list|(
name|HplsqlParser
operator|.
name|Bool_literalContext
name|ctx
parameter_list|)
block|{
name|boolean
name|val
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_FALSE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
literal|false
expr_stmt|;
block|}
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
operator|new
name|Boolean
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * NULL constant    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitNull_const
parameter_list|(
name|HplsqlParser
operator|.
name|Null_constContext
name|ctx
parameter_list|)
block|{
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * DATE 'YYYY-MM-DD' literal    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitDate_literal
parameter_list|(
name|HplsqlParser
operator|.
name|Date_literalContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|buildSql
condition|)
block|{
name|String
name|str
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|string
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|Var
operator|.
name|Type
operator|.
name|DATE
argument_list|,
name|Utils
operator|.
name|toDate
argument_list|(
name|str
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stackPush
argument_list|(
name|getFormattedText
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * TIMESTAMP 'YYYY-MM-DD HH:MI:SS.FFF' literal    */
annotation|@
name|Override
specifier|public
name|Integer
name|visitTimestamp_literal
parameter_list|(
name|HplsqlParser
operator|.
name|Timestamp_literalContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
operator|!
name|exec
operator|.
name|buildSql
condition|)
block|{
name|String
name|str
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|string
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|precision
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|19
operator|&&
name|len
operator|<=
literal|29
condition|)
block|{
name|precision
operator|=
name|len
operator|-
literal|20
expr_stmt|;
if|if
condition|(
name|precision
operator|>
literal|3
condition|)
block|{
name|precision
operator|=
literal|3
expr_stmt|;
block|}
block|}
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|Utils
operator|.
name|toTimestamp
argument_list|(
name|str
argument_list|)
argument_list|,
name|precision
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stackPush
argument_list|(
name|getFormattedText
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Get the package context within which the current routine is executed    */
name|Package
name|getPackageCallContext
parameter_list|()
block|{
name|Scope
name|cur
init|=
name|exec
operator|.
name|currentScope
decl_stmt|;
while|while
condition|(
name|cur
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cur
operator|.
name|type
operator|==
name|Scope
operator|.
name|Type
operator|.
name|ROUTINE
condition|)
block|{
return|return
name|cur
operator|.
name|pack
return|;
block|}
name|cur
operator|=
name|cur
operator|.
name|parent
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Define the connection profile to execute the current statement    */
name|String
name|getStatementConnection
parameter_list|()
block|{
if|if
condition|(
name|exec
operator|.
name|stmtConnList
operator|.
name|contains
argument_list|(
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
condition|)
block|{
return|return
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|exec
operator|.
name|stmtConnList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|stmtConnList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
return|;
block|}
comment|/**    * Define the connection profile for the specified object    * @return    */
name|String
name|getObjectConnection
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|conn
init|=
name|exec
operator|.
name|objectConnMap
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
return|return
name|conn
return|;
block|}
return|return
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
return|;
block|}
comment|/**    * Get the connection (open the new connection if not available)    * @throws Exception     */
name|Connection
name|getConnection
parameter_list|(
name|String
name|conn
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|conn
operator|==
literal|null
operator|||
name|conn
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"default"
argument_list|)
condition|)
block|{
name|conn
operator|=
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
expr_stmt|;
block|}
return|return
name|exec
operator|.
name|conn
operator|.
name|getConnection
argument_list|(
name|conn
argument_list|)
return|;
block|}
comment|/**    * Return the connection to the pool    */
name|void
name|returnConnection
parameter_list|(
name|String
name|name
parameter_list|,
name|Connection
name|conn
parameter_list|)
block|{
name|exec
operator|.
name|conn
operator|.
name|returnConnection
argument_list|(
name|name
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Define the database type by profile name    */
name|Conn
operator|.
name|Type
name|getConnectionType
parameter_list|(
name|String
name|conn
parameter_list|)
block|{
return|return
name|exec
operator|.
name|conn
operator|.
name|getTypeByProfile
argument_list|(
name|conn
argument_list|)
return|;
block|}
comment|/**    * Get the current database type    */
specifier|public
name|Conn
operator|.
name|Type
name|getConnectionType
parameter_list|()
block|{
return|return
name|getConnectionType
argument_list|(
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
return|;
block|}
comment|/**     * Add managed temporary table    */
specifier|public
name|void
name|addManagedTable
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|managedName
parameter_list|)
block|{
name|exec
operator|.
name|managedTables
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|managedName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get node text including spaces    */
name|String
name|getText
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|start
operator|.
name|getInputStream
argument_list|()
operator|.
name|getText
argument_list|(
operator|new
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|misc
operator|.
name|Interval
argument_list|(
name|ctx
operator|.
name|start
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|ctx
operator|.
name|stop
operator|.
name|getStopIndex
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|String
name|getText
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|Token
name|start
parameter_list|,
name|Token
name|stop
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|start
operator|.
name|getInputStream
argument_list|()
operator|.
name|getText
argument_list|(
operator|new
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|misc
operator|.
name|Interval
argument_list|(
name|start
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|stop
operator|.
name|getStopIndex
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Evaluate the expression and pop value from the stack    */
name|Var
name|evalPop
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exec
operator|.
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|stackPop
argument_list|()
return|;
block|}
return|return
name|Var
operator|.
name|Empty
return|;
block|}
name|Var
name|evalPop
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|long
name|def
parameter_list|)
block|{
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exec
operator|.
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|stackPop
argument_list|()
return|;
block|}
return|return
operator|new
name|Var
argument_list|(
name|def
argument_list|)
return|;
block|}
comment|/**    * Evaluate the data type and length     *     */
name|String
name|evalPop
parameter_list|(
name|HplsqlParser
operator|.
name|DtypeContext
name|type
parameter_list|,
name|HplsqlParser
operator|.
name|Dtype_lenContext
name|len
parameter_list|)
block|{
if|if
condition|(
name|isConvert
argument_list|(
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
condition|)
block|{
return|return
name|exec
operator|.
name|converter
operator|.
name|dataType
argument_list|(
name|type
argument_list|,
name|len
argument_list|)
return|;
block|}
return|return
name|getText
argument_list|(
name|type
argument_list|,
name|type
operator|.
name|getStart
argument_list|()
argument_list|,
name|len
operator|.
name|getStop
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Evaluate the expression to NULL    */
name|void
name|evalNull
parameter_list|()
block|{
name|stackPush
argument_list|(
name|Var
operator|.
name|Null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get formatted text between 2 tokens    */
specifier|public
name|String
name|getFormattedText
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|start
operator|.
name|getInputStream
argument_list|()
operator|.
name|getText
argument_list|(
operator|new
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|misc
operator|.
name|Interval
argument_list|(
name|ctx
operator|.
name|start
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|ctx
operator|.
name|stop
operator|.
name|getStopIndex
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Flag whether executed from UDF or not    */
name|void
name|setUdfRun
parameter_list|(
name|boolean
name|udfRun
parameter_list|)
block|{
name|this
operator|.
name|udfRun
operator|=
name|udfRun
expr_stmt|;
block|}
comment|/**    * Whether on-the-fly SQL conversion is required for the connection     */
name|boolean
name|isConvert
parameter_list|(
name|String
name|connName
parameter_list|)
block|{
return|return
name|exec
operator|.
name|conf
operator|.
name|getConnectionConvert
argument_list|(
name|connName
argument_list|)
return|;
block|}
comment|/**    * Increment the row count    */
specifier|public
name|int
name|incRowCount
parameter_list|()
block|{
return|return
name|exec
operator|.
name|rowCount
operator|++
return|;
block|}
comment|/**    * Set the row count    */
specifier|public
name|void
name|setRowCount
parameter_list|(
name|int
name|rowCount
parameter_list|)
block|{
name|exec
operator|.
name|rowCount
operator|=
name|rowCount
expr_stmt|;
block|}
comment|/**    * Trace information    */
specifier|public
name|void
name|trace
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|trace
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Ln:"
operator|+
name|ctx
operator|.
name|getStart
argument_list|()
operator|.
name|getLine
argument_list|()
operator|+
literal|" "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Trace values retrived from the database    */
specifier|public
name|void
name|trace
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|Var
name|var
parameter_list|,
name|ResultSet
name|rs
parameter_list|,
name|ResultSetMetaData
name|rm
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|var
operator|.
name|type
operator|!=
name|Var
operator|.
name|Type
operator|.
name|ROW
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"COLUMN: "
operator|+
name|rm
operator|.
name|getColumnName
argument_list|(
name|idx
argument_list|)
operator|+
literal|", "
operator|+
name|rm
operator|.
name|getColumnTypeName
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SET "
operator|+
name|var
operator|.
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|var
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Row
name|row
init|=
operator|(
name|Row
operator|)
name|var
operator|.
name|value
decl_stmt|;
name|int
name|cnt
init|=
name|row
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|cnt
condition|;
name|j
operator|++
control|)
block|{
name|Var
name|v
init|=
name|row
operator|.
name|getValue
argument_list|(
name|j
operator|-
literal|1
argument_list|)
decl_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"COLUMN: "
operator|+
name|rm
operator|.
name|getColumnName
argument_list|(
name|j
argument_list|)
operator|+
literal|", "
operator|+
name|rm
operator|.
name|getColumnTypeName
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SET "
operator|+
name|v
operator|.
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|v
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Informational messages    */
specifier|public
name|void
name|info
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|info
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ln:"
operator|+
name|ctx
operator|.
name|getStart
argument_list|()
operator|.
name|getLine
argument_list|()
operator|+
literal|" "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Stack
argument_list|<
name|Var
argument_list|>
name|getStack
parameter_list|()
block|{
return|return
name|exec
operator|.
name|stack
return|;
block|}
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|exec
operator|.
name|rowCount
return|;
block|}
specifier|public
name|Conf
name|getConf
parameter_list|()
block|{
return|return
name|exec
operator|.
name|conf
return|;
block|}
specifier|public
name|Meta
name|getMeta
parameter_list|()
block|{
return|return
name|exec
operator|.
name|meta
return|;
block|}
specifier|public
name|boolean
name|getTrace
parameter_list|()
block|{
return|return
name|exec
operator|.
name|trace
return|;
block|}
specifier|public
name|boolean
name|getInfo
parameter_list|()
block|{
return|return
name|exec
operator|.
name|info
return|;
block|}
specifier|public
name|boolean
name|getOffline
parameter_list|()
block|{
return|return
name|exec
operator|.
name|offline
return|;
block|}
block|}
end_class

end_unit

