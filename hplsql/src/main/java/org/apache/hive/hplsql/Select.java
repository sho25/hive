begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|misc
operator|.
name|Interval
import|;
end_import

begin_class
specifier|public
class|class
name|Select
block|{
name|Exec
name|exec
init|=
literal|null
decl_stmt|;
name|Stack
argument_list|<
name|Var
argument_list|>
name|stack
init|=
literal|null
decl_stmt|;
name|Conf
name|conf
decl_stmt|;
name|boolean
name|trace
init|=
literal|false
decl_stmt|;
name|Select
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|exec
operator|=
name|e
expr_stmt|;
name|stack
operator|=
name|exec
operator|.
name|getStack
argument_list|()
expr_stmt|;
name|conf
operator|=
name|exec
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|trace
operator|=
name|exec
operator|.
name|getTrace
argument_list|()
expr_stmt|;
block|}
comment|/**    * Executing or building SELECT statement    */
specifier|public
name|Integer
name|select
parameter_list|(
name|HplsqlParser
operator|.
name|Select_stmtContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|parent
operator|instanceof
name|HplsqlParser
operator|.
name|StmtContext
condition|)
block|{
name|exec
operator|.
name|stmtConnList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SELECT"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|oldBuildSql
init|=
name|exec
operator|.
name|buildSql
decl_stmt|;
name|exec
operator|.
name|buildSql
operator|=
literal|true
expr_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|cte_select_stmt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|cte_select_stmt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|fullselect_stmt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|buildSql
operator|=
name|oldBuildSql
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|ctx
operator|.
name|parent
operator|instanceof
name|HplsqlParser
operator|.
name|StmtContext
operator|)
condition|)
block|{
comment|// No need to execute at this stage
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|trace
operator|&&
name|ctx
operator|.
name|parent
operator|instanceof
name|HplsqlParser
operator|.
name|StmtContext
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exec
operator|.
name|getOffline
argument_list|()
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Not executed - offline mode set"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|String
name|conn
init|=
name|exec
operator|.
name|getStatementConnection
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeQuery
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|,
name|conn
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SELECT completed successfully"
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
try|try
block|{
name|ResultSet
name|rs
init|=
name|query
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|ResultSetMetaData
name|rm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
name|rm
operator|=
name|rs
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
block|}
name|int
name|into_cnt
init|=
name|getIntoCount
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|into_cnt
operator|>
literal|0
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SELECT INTO statement executed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|into_cnt
condition|;
name|i
operator|++
control|)
block|{
name|String
name|into_name
init|=
name|getIntoVariable
argument_list|(
name|ctx
argument_list|,
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Var
name|var
init|=
name|exec
operator|.
name|findVariable
argument_list|(
name|into_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|var
operator|.
name|type
operator|!=
name|Var
operator|.
name|Type
operator|.
name|ROW
condition|)
block|{
name|var
operator|.
name|setValue
argument_list|(
name|rs
argument_list|,
name|rm
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|var
operator|.
name|setValues
argument_list|(
name|rs
argument_list|,
name|rm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
name|var
argument_list|,
name|rs
argument_list|,
name|rm
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Variable not found: "
operator|+
name|into_name
argument_list|)
expr_stmt|;
block|}
block|}
name|exec
operator|.
name|incRowCount
argument_list|()
expr_stmt|;
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|setSqlCode
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|NOTFOUND
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Print all results for standalone SELECT statement
elseif|else
if|if
condition|(
name|ctx
operator|.
name|parent
operator|instanceof
name|HplsqlParser
operator|.
name|StmtContext
condition|)
block|{
name|int
name|cols
init|=
name|rm
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Standalone SELECT executed: "
operator|+
name|cols
operator|+
literal|" columns in the result set"
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|cols
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|exec
operator|.
name|incRowCount
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Scalar subquery
else|else
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Scalar subquery executed, first row and first column fetched only"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|()
operator|.
name|setValue
argument_list|(
name|rs
argument_list|,
name|rm
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|evalNull
argument_list|()
expr_stmt|;
name|exec
operator|.
name|setSqlCode
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Common table expression (WITH clause)    */
specifier|public
name|Integer
name|cte
parameter_list|(
name|HplsqlParser
operator|.
name|Cte_select_stmtContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|cte_select_stmt_item
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"WITH "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|HplsqlParser
operator|.
name|Cte_select_stmt_itemContext
name|c
init|=
name|ctx
operator|.
name|cte_select_stmt_item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|c
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|cte_select_cols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|exec
operator|.
name|getFormattedText
argument_list|(
name|c
operator|.
name|cte_select_cols
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|" AS ("
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|cte_select_stmt_item
argument_list|(
name|i
argument_list|)
operator|.
name|fullselect_stmt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|!=
name|cnt
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Part of SELECT    */
specifier|public
name|Integer
name|fullselect
parameter_list|(
name|HplsqlParser
operator|.
name|Fullselect_stmtContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|fullselect_stmt_item
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|String
name|part
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|fullselect_stmt_item
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|!=
name|cnt
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"\n"
operator|+
name|getText
argument_list|(
name|ctx
operator|.
name|fullselect_set_clause
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
name|Integer
name|subselect
parameter_list|(
name|HplsqlParser
operator|.
name|Subselect_stmtContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|start
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_list
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ctx
operator|.
name|start
argument_list|,
name|ctx
operator|.
name|select_list
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|last
init|=
name|ctx
operator|.
name|select_list
argument_list|()
operator|.
name|stop
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|into_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|last
operator|=
name|ctx
operator|.
name|into_clause
argument_list|()
operator|.
name|stop
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|from_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|evalPop
argument_list|(
name|ctx
operator|.
name|from_clause
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|last
argument_list|,
name|ctx
operator|.
name|from_clause
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|last
operator|=
name|ctx
operator|.
name|from_clause
argument_list|()
operator|.
name|stop
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|conf
operator|.
name|dualTable
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" FROM "
operator|+
name|conf
operator|.
name|dualTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|where_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|evalPop
argument_list|(
name|ctx
operator|.
name|where_clause
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|last
argument_list|,
name|ctx
operator|.
name|where_clause
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|last
operator|=
name|ctx
operator|.
name|where_clause
argument_list|()
operator|.
name|stop
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|group_by_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|getText
argument_list|(
name|ctx
operator|.
name|group_by_clause
argument_list|()
argument_list|)
argument_list|,
name|last
argument_list|,
name|ctx
operator|.
name|group_by_clause
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|last
operator|=
name|ctx
operator|.
name|group_by_clause
argument_list|()
operator|.
name|stop
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|having_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|getText
argument_list|(
name|ctx
operator|.
name|having_clause
argument_list|()
argument_list|)
argument_list|,
name|last
argument_list|,
name|ctx
operator|.
name|having_clause
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|last
operator|=
name|ctx
operator|.
name|having_clause
argument_list|()
operator|.
name|stop
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|qualify_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|getText
argument_list|(
name|ctx
operator|.
name|qualify_clause
argument_list|()
argument_list|)
argument_list|,
name|last
argument_list|,
name|ctx
operator|.
name|qualify_clause
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|last
operator|=
name|ctx
operator|.
name|qualify_clause
argument_list|()
operator|.
name|stop
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|order_by_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|append
argument_list|(
name|sql
argument_list|,
name|getText
argument_list|(
name|ctx
operator|.
name|order_by_clause
argument_list|()
argument_list|)
argument_list|,
name|last
argument_list|,
name|ctx
operator|.
name|order_by_clause
argument_list|()
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|last
operator|=
name|ctx
operator|.
name|order_by_clause
argument_list|()
operator|.
name|stop
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|select_options
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Var
name|opt
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_options
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|opt
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|opt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ctx
operator|.
name|select_list
argument_list|()
operator|.
name|select_list_limit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" LIMIT "
operator|+
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_list
argument_list|()
operator|.
name|select_list_limit
argument_list|()
operator|.
name|expr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * SELECT list     */
specifier|public
name|Integer
name|selectList
parameter_list|(
name|HplsqlParser
operator|.
name|Select_listContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|select_list_set
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|exec
operator|.
name|getText
argument_list|(
name|ctx
operator|.
name|select_list_set
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|int
name|cnt
init|=
name|ctx
operator|.
name|select_list_item
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ctx
operator|.
name|select_list_item
argument_list|(
name|i
argument_list|)
operator|.
name|select_list_asterisk
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_list_item
argument_list|(
name|i
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|select_list_item
argument_list|(
name|i
argument_list|)
operator|.
name|select_list_alias
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|exec
operator|.
name|getText
argument_list|(
name|ctx
operator|.
name|select_list_item
argument_list|(
name|i
argument_list|)
operator|.
name|select_list_alias
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sql
operator|.
name|append
argument_list|(
name|exec
operator|.
name|getText
argument_list|(
name|ctx
operator|.
name|select_list_item
argument_list|(
name|i
argument_list|)
operator|.
name|select_list_asterisk
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|cnt
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * FROM clause    */
specifier|public
name|Integer
name|from
parameter_list|(
name|HplsqlParser
operator|.
name|From_clauseContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|T_FROM
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|from_table_clause
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|from_join_clause
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|from_join_clause
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Single table name in FROM    */
specifier|public
name|Integer
name|fromTable
parameter_list|(
name|HplsqlParser
operator|.
name|From_table_name_clauseContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|table_name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|from_alias_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|exec
operator|.
name|getText
argument_list|(
name|ctx
operator|.
name|from_alias_clause
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Subselect in FROM    */
specifier|public
name|Integer
name|fromSubselect
parameter_list|(
name|HplsqlParser
operator|.
name|From_subselect_clauseContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|select_stmt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|from_alias_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|exec
operator|.
name|getText
argument_list|(
name|ctx
operator|.
name|from_alias_clause
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * JOIN clause in FROM    */
specifier|public
name|Integer
name|fromJoin
parameter_list|(
name|HplsqlParser
operator|.
name|From_join_clauseContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_COMMA
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|from_table_clause
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|from_join_type_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|exec
operator|.
name|getText
argument_list|(
name|ctx
operator|.
name|from_join_type_clause
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|from_table_clause
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|exec
operator|.
name|getText
argument_list|(
name|ctx
argument_list|,
name|ctx
operator|.
name|T_ON
argument_list|()
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|ctx
operator|.
name|bool_expr
argument_list|()
operator|.
name|getStop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * FROM TABLE (VALUES ...) clause    */
specifier|public
name|Integer
name|fromTableValues
parameter_list|(
name|HplsqlParser
operator|.
name|From_table_values_clauseContext
name|ctx
parameter_list|)
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|rows
init|=
name|ctx
operator|.
name|from_table_values_row
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cols
init|=
name|ctx
operator|.
name|from_table_values_row
argument_list|(
name|i
argument_list|)
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|cols_as
init|=
name|ctx
operator|.
name|from_alias_clause
argument_list|()
operator|.
name|L_ID
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"SELECT "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
condition|;
name|j
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|from_table_values_row
argument_list|(
name|i
argument_list|)
operator|.
name|expr
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|<
name|cols_as
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" AS "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|from_alias_clause
argument_list|()
operator|.
name|L_ID
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|j
operator|+
literal|1
operator|<
name|cols
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|conf
operator|.
name|dualTable
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" FROM "
operator|+
name|conf
operator|.
name|dualTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|rows
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"\nUNION ALL\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|sql
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|from_alias_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|from_alias_clause
argument_list|()
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * WHERE clause    */
specifier|public
name|Integer
name|where
parameter_list|(
name|HplsqlParser
operator|.
name|Where_clauseContext
name|ctx
parameter_list|)
block|{
name|boolean
name|oldBuildSql
init|=
name|exec
operator|.
name|buildSql
decl_stmt|;
name|exec
operator|.
name|buildSql
operator|=
literal|true
expr_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|T_WHERE
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|evalPop
argument_list|(
name|ctx
operator|.
name|bool_expr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|exec
operator|.
name|buildSql
operator|=
name|oldBuildSql
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Get INTO clause    */
name|HplsqlParser
operator|.
name|Into_clauseContext
name|getIntoClause
parameter_list|(
name|HplsqlParser
operator|.
name|Select_stmtContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|fullselect_stmt
argument_list|()
operator|.
name|fullselect_stmt_item
argument_list|(
literal|0
argument_list|)
operator|.
name|subselect_stmt
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|ctx
operator|.
name|fullselect_stmt
argument_list|()
operator|.
name|fullselect_stmt_item
argument_list|(
literal|0
argument_list|)
operator|.
name|subselect_stmt
argument_list|()
operator|.
name|into_clause
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get number of elements in INTO or var=col assignment clause    */
name|int
name|getIntoCount
parameter_list|(
name|HplsqlParser
operator|.
name|Select_stmtContext
name|ctx
parameter_list|)
block|{
name|HplsqlParser
operator|.
name|Into_clauseContext
name|into
init|=
name|getIntoClause
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|into
operator|!=
literal|null
condition|)
block|{
return|return
name|into
operator|.
name|ident
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
name|List
argument_list|<
name|HplsqlParser
operator|.
name|Select_list_itemContext
argument_list|>
name|sl
init|=
name|ctx
operator|.
name|fullselect_stmt
argument_list|()
operator|.
name|fullselect_stmt_item
argument_list|(
literal|0
argument_list|)
operator|.
name|subselect_stmt
argument_list|()
operator|.
name|select_list
argument_list|()
operator|.
name|select_list_item
argument_list|()
decl_stmt|;
if|if
condition|(
name|sl
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|T_EQUAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|sl
operator|.
name|size
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Get variable name assigned in INTO or var=col clause by index     */
name|String
name|getIntoVariable
parameter_list|(
name|HplsqlParser
operator|.
name|Select_stmtContext
name|ctx
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|HplsqlParser
operator|.
name|Into_clauseContext
name|into
init|=
name|getIntoClause
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|into
operator|!=
literal|null
condition|)
block|{
return|return
name|into
operator|.
name|ident
argument_list|(
name|idx
argument_list|)
operator|.
name|getText
argument_list|()
return|;
block|}
name|HplsqlParser
operator|.
name|Select_list_itemContext
name|sl
init|=
name|ctx
operator|.
name|fullselect_stmt
argument_list|()
operator|.
name|fullselect_stmt_item
argument_list|(
literal|0
argument_list|)
operator|.
name|subselect_stmt
argument_list|()
operator|.
name|select_list
argument_list|()
operator|.
name|select_list_item
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
condition|)
block|{
return|return
name|sl
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**     * SELECT statement options - LIMIT n, WITH UR i.e    */
specifier|public
name|Integer
name|option
parameter_list|(
name|HplsqlParser
operator|.
name|Select_options_itemContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|T_LIMIT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
literal|"LIMIT "
operator|+
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Evaluate the expression to NULL    */
name|void
name|evalNull
parameter_list|()
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|Var
operator|.
name|Null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression and pop value from the stack    */
name|Var
name|evalPop
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exec
operator|.
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|stackPop
argument_list|()
return|;
block|}
return|return
name|Var
operator|.
name|Empty
return|;
block|}
comment|/**    * Get node text including spaces    */
name|String
name|getText
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|start
operator|.
name|getInputStream
argument_list|()
operator|.
name|getText
argument_list|(
operator|new
name|Interval
argument_list|(
name|ctx
operator|.
name|start
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|ctx
operator|.
name|stop
operator|.
name|getStopIndex
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Execute rules    */
name|Integer
name|visit
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Execute children rules    */
name|Integer
name|visitChildren
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|visitChildren
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Trace information    */
name|void
name|trace
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|exec
operator|.
name|trace
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|void
name|trace
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|Var
name|var
parameter_list|,
name|ResultSet
name|rs
parameter_list|,
name|ResultSetMetaData
name|rm
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|SQLException
block|{
name|exec
operator|.
name|trace
argument_list|(
name|ctx
argument_list|,
name|var
argument_list|,
name|rs
argument_list|,
name|rm
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

