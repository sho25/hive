begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|functions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|*
import|;
end_import

begin_interface
interface|interface
name|FuncCommand
block|{
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
function_decl|;
block|}
end_interface

begin_interface
interface|interface
name|FuncSpecCommand
block|{
name|void
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
function_decl|;
block|}
end_interface

begin_comment
comment|/**  * HPL/SQL functions  */
end_comment

begin_class
specifier|public
class|class
name|Function
block|{
name|Exec
name|exec
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|FuncCommand
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FuncCommand
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|FuncSpecCommand
argument_list|>
name|specMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FuncSpecCommand
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|FuncSpecCommand
argument_list|>
name|specSqlMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FuncSpecCommand
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|HplsqlParser
operator|.
name|Create_function_stmtContext
argument_list|>
name|userMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HplsqlParser
operator|.
name|Create_function_stmtContext
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|HplsqlParser
operator|.
name|Create_procedure_stmtContext
argument_list|>
name|procMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HplsqlParser
operator|.
name|Create_procedure_stmtContext
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|trace
init|=
literal|false
decl_stmt|;
specifier|public
name|Function
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|exec
operator|=
name|e
expr_stmt|;
name|trace
operator|=
name|exec
operator|.
name|getTrace
argument_list|()
expr_stmt|;
block|}
comment|/**     * Register functions    */
specifier|public
name|void
name|register
parameter_list|(
name|Function
name|f
parameter_list|)
block|{       }
comment|/**    * Execute a function    */
specifier|public
name|void
name|exec
parameter_list|(
name|String
name|name
parameter_list|,
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|execUser
argument_list|(
name|name
argument_list|,
name|ctx
argument_list|)
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|isProc
argument_list|(
name|name
argument_list|)
operator|&&
name|execProc
argument_list|(
name|name
argument_list|,
name|ctx
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Name can be qualified and spaces are allowed between parts
name|String
index|[]
name|parts
init|=
name|name
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|str
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|str
operator|.
name|append
argument_list|(
name|parts
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|name
operator|=
name|str
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trace
operator|&&
name|ctx
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|parent
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|parent
operator|.
name|parent
operator|instanceof
name|HplsqlParser
operator|.
name|Expr_stmtContext
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"FUNC "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|FuncCommand
name|func
init|=
name|map
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|!=
literal|null
condition|)
block|{
name|func
operator|.
name|run
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
argument_list|(
name|ctx
argument_list|,
literal|"Function not found: "
operator|+
name|name
argument_list|)
expr_stmt|;
name|evalNull
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * User-defined function in a SQL query    */
specifier|public
name|void
name|execSql
parameter_list|(
name|String
name|name
parameter_list|,
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|execUserSql
argument_list|(
name|ctx
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
name|i
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|cnt
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Aggregate or window function in a SQL query    */
specifier|public
name|void
name|execAggWindowSql
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_agg_window_funcContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|exec
operator|.
name|getFormattedText
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute a user-defined function    */
specifier|public
name|boolean
name|execUser
parameter_list|(
name|String
name|name
parameter_list|,
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|HplsqlParser
operator|.
name|Create_function_stmtContext
name|userCtx
init|=
name|userMap
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userCtx
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"EXEC FUNCTION "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Var
argument_list|>
name|actualParams
init|=
name|getActualCallParameters
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|exec
operator|.
name|enterScope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|ROUTINE
argument_list|)
expr_stmt|;
name|setCallParameters
argument_list|(
name|ctx
argument_list|,
name|actualParams
argument_list|,
name|userCtx
operator|.
name|create_routine_params
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|userCtx
operator|.
name|declare_block_inplace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visit
argument_list|(
name|userCtx
operator|.
name|declare_block_inplace
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|visit
argument_list|(
name|userCtx
operator|.
name|single_block_stmt
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|leaveScope
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Execute a HPL/SQL user-defined function in a query     */
specifier|public
name|boolean
name|execUserSql
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|HplsqlParser
operator|.
name|Create_function_stmtContext
name|userCtx
init|=
name|userMap
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userCtx
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"hplsql('"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|":"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|cnt
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|sql
operator|.
name|append
argument_list|(
literal|")'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cnt
operator|>
literal|0
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
name|i
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|cnt
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|exec
operator|.
name|stackPush
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|exec
operator|.
name|registerUdf
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Execute a stored procedure as the entry point of the script (defined by -main option)    */
specifier|public
name|boolean
name|execProc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
literal|"EXEC PROCEDURE "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|HplsqlParser
operator|.
name|Create_procedure_stmtContext
name|procCtx
init|=
name|procMap
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|procCtx
operator|==
literal|null
condition|)
block|{
name|trace
argument_list|(
literal|"Procedure not found"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|exec
operator|.
name|enterScope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|ROUTINE
argument_list|)
expr_stmt|;
name|exec
operator|.
name|callStackPush
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|procCtx
operator|.
name|create_routine_params
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setCallParameters
argument_list|(
name|procCtx
operator|.
name|create_routine_params
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|visit
argument_list|(
name|procCtx
operator|.
name|proc_block
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|callStackPop
argument_list|()
expr_stmt|;
name|exec
operator|.
name|leaveScope
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Check if the stored procedure with the specified name is defined    */
specifier|public
name|boolean
name|isProc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|procMap
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Execute a stored procedure using CALL or EXEC statement passing parameters    */
specifier|public
name|boolean
name|execProc
parameter_list|(
name|String
name|name
parameter_list|,
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|,
name|ParserRuleContext
name|callCtx
parameter_list|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|callCtx
argument_list|,
literal|"EXEC PROCEDURE "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|HplsqlParser
operator|.
name|Create_procedure_stmtContext
name|procCtx
init|=
name|procMap
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|procCtx
operator|==
literal|null
condition|)
block|{
name|trace
argument_list|(
name|callCtx
argument_list|,
literal|"Procedure not found"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ArrayList
argument_list|<
name|Var
argument_list|>
name|actualParams
init|=
name|getActualCallParameters
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Var
argument_list|>
name|out
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Var
argument_list|>
argument_list|()
decl_stmt|;
name|exec
operator|.
name|enterScope
argument_list|(
name|Scope
operator|.
name|Type
operator|.
name|ROUTINE
argument_list|)
expr_stmt|;
name|exec
operator|.
name|callStackPush
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|procCtx
operator|.
name|declare_block_inplace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visit
argument_list|(
name|procCtx
operator|.
name|declare_block_inplace
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|procCtx
operator|.
name|create_routine_params
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setCallParameters
argument_list|(
name|ctx
argument_list|,
name|actualParams
argument_list|,
name|procCtx
operator|.
name|create_routine_params
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|visit
argument_list|(
name|procCtx
operator|.
name|proc_block
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|callStackPop
argument_list|()
expr_stmt|;
name|exec
operator|.
name|leaveScope
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Var
argument_list|>
name|i
range|:
name|out
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Set OUT parameters
name|exec
operator|.
name|setVariable
argument_list|(
name|i
operator|.
name|getKey
argument_list|()
argument_list|,
name|i
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Set parameters for user-defined function call    */
specifier|public
name|void
name|setCallParameters
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|actual
parameter_list|,
name|ArrayList
argument_list|<
name|Var
argument_list|>
name|actualValues
parameter_list|,
name|HplsqlParser
operator|.
name|Create_routine_paramsContext
name|formal
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Var
argument_list|>
name|out
parameter_list|)
block|{
if|if
condition|(
name|actual
operator|==
literal|null
operator|||
name|actual
operator|.
name|func_param
argument_list|()
operator|==
literal|null
operator|||
name|actualValues
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|actualCnt
init|=
name|actualValues
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|formalCnt
init|=
name|formal
operator|.
name|create_routine_param_item
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actualCnt
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>=
name|formalCnt
condition|)
block|{
break|break;
block|}
name|HplsqlParser
operator|.
name|ExprContext
name|a
init|=
name|actual
operator|.
name|func_param
argument_list|(
name|i
argument_list|)
operator|.
name|expr
argument_list|()
decl_stmt|;
name|HplsqlParser
operator|.
name|Create_routine_param_itemContext
name|p
init|=
name|getCallParameter
argument_list|(
name|actual
argument_list|,
name|formal
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|p
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|p
operator|.
name|dtype
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|len
init|=
literal|null
decl_stmt|;
name|String
name|scale
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|dtype_len
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|len
operator|=
name|p
operator|.
name|dtype_len
argument_list|()
operator|.
name|L_INT
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|dtype_len
argument_list|()
operator|.
name|L_INT
argument_list|(
literal|1
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|scale
operator|=
name|p
operator|.
name|dtype_len
argument_list|()
operator|.
name|L_INT
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
name|Var
name|var
init|=
name|setCallParameter
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|len
argument_list|,
name|scale
argument_list|,
name|actualValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|actual
argument_list|,
literal|"SET PARAM "
operator|+
name|name
operator|+
literal|" = "
operator|+
name|var
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
operator|&&
name|a
operator|.
name|expr_atom
argument_list|()
operator|!=
literal|null
operator|&&
name|a
operator|.
name|expr_atom
argument_list|()
operator|.
name|ident
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|p
operator|.
name|T_OUT
argument_list|()
operator|!=
literal|null
operator|||
name|p
operator|.
name|T_INOUT
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|String
name|actualName
init|=
name|a
operator|.
name|expr_atom
argument_list|()
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualName
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|put
argument_list|(
name|actualName
argument_list|,
name|var
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Set parameters for entry-point call (Main procedure defined by -main option)    */
name|void
name|setCallParameters
parameter_list|(
name|HplsqlParser
operator|.
name|Create_routine_paramsContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|create_routine_param_item
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|HplsqlParser
operator|.
name|Create_routine_param_itemContext
name|p
init|=
name|ctx
operator|.
name|create_routine_param_item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|p
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|p
operator|.
name|dtype
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|len
init|=
literal|null
decl_stmt|;
name|String
name|scale
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|dtype_len
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|len
operator|=
name|p
operator|.
name|dtype_len
argument_list|()
operator|.
name|L_INT
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|dtype_len
argument_list|()
operator|.
name|L_INT
argument_list|(
literal|1
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|scale
operator|=
name|p
operator|.
name|dtype_len
argument_list|()
operator|.
name|L_INT
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
name|Var
name|value
init|=
name|exec
operator|.
name|findVariable
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Var
name|var
init|=
name|setCallParameter
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|len
argument_list|,
name|scale
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"SET PARAM "
operator|+
name|name
operator|+
literal|" = "
operator|+
name|var
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create a function or procedure parameter and set its value    */
name|Var
name|setCallParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|len
parameter_list|,
name|String
name|scale
parameter_list|,
name|Var
name|value
parameter_list|)
block|{
name|Var
name|var
init|=
operator|new
name|Var
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|len
argument_list|,
name|scale
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|var
operator|.
name|cast
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|exec
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
comment|/**    * Get call parameter definition by name (if specified) or position    */
name|HplsqlParser
operator|.
name|Create_routine_param_itemContext
name|getCallParameter
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|actual
parameter_list|,
name|HplsqlParser
operator|.
name|Create_routine_paramsContext
name|formal
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|String
name|named
init|=
literal|null
decl_stmt|;
name|int
name|out_pos
init|=
name|pos
decl_stmt|;
if|if
condition|(
name|actual
operator|.
name|func_param
argument_list|(
name|pos
argument_list|)
operator|.
name|ident
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|named
operator|=
name|actual
operator|.
name|func_param
argument_list|(
name|pos
argument_list|)
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
name|int
name|cnt
init|=
name|formal
operator|.
name|create_routine_param_item
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|named
operator|.
name|equalsIgnoreCase
argument_list|(
name|formal
operator|.
name|create_routine_param_item
argument_list|(
name|i
argument_list|)
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
block|{
name|out_pos
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|formal
operator|.
name|create_routine_param_item
argument_list|(
name|out_pos
argument_list|)
return|;
block|}
comment|/**    * Evaluate actual call parameters    */
specifier|public
name|ArrayList
argument_list|<
name|Var
argument_list|>
name|getActualCallParameters
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|actual
parameter_list|)
block|{
if|if
condition|(
name|actual
operator|==
literal|null
operator|||
name|actual
operator|.
name|func_param
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|cnt
init|=
name|actual
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Var
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Var
argument_list|>
argument_list|(
name|cnt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|evalPop
argument_list|(
name|actual
operator|.
name|func_param
argument_list|(
name|i
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**    * Add a user-defined function    */
specifier|public
name|void
name|addUserFunction
parameter_list|(
name|HplsqlParser
operator|.
name|Create_function_stmtContext
name|ctx
parameter_list|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"CREATE FUNCTION "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|userMap
operator|.
name|put
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a user-defined procedure    */
specifier|public
name|void
name|addUserProcedure
parameter_list|(
name|HplsqlParser
operator|.
name|Create_procedure_stmtContext
name|ctx
parameter_list|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|ident
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"CREATE PROCEDURE "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|procMap
operator|.
name|put
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the number of parameters in function call    */
specifier|public
name|int
name|getParamCount
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Execute a special function    */
specifier|public
name|void
name|specExec
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|start
operator|.
name|getText
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|trace
operator|&&
name|ctx
operator|.
name|parent
operator|.
name|parent
operator|instanceof
name|HplsqlParser
operator|.
name|Expr_stmtContext
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"FUNC "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|FuncSpecCommand
name|func
init|=
name|specMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|!=
literal|null
condition|)
block|{
name|func
operator|.
name|run
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_MAX_PART_STRING
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|execMaxPartString
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_MIN_PART_STRING
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|execMinPartString
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_MAX_PART_INT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|execMaxPartInt
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_MIN_PART_INT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|execMinPartInt
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_MAX_PART_DATE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|execMaxPartDate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_MIN_PART_DATE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|execMinPartDate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_PART_LOC
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|execPartLoc
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evalNull
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Execute a special function in executable SQL statement    */
specifier|public
name|void
name|specExecSql
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|String
name|name
init|=
name|ctx
operator|.
name|start
operator|.
name|getText
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|trace
operator|&&
name|ctx
operator|.
name|parent
operator|.
name|parent
operator|instanceof
name|HplsqlParser
operator|.
name|Expr_stmtContext
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"FUNC "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|FuncSpecCommand
name|func
init|=
name|specSqlMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|!=
literal|null
condition|)
block|{
name|func
operator|.
name|run
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|exec
operator|.
name|getFormattedText
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the current date    */
specifier|public
name|void
name|execCurrentDate
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"CURRENT_DATE"
argument_list|)
expr_stmt|;
block|}
name|SimpleDateFormat
name|f
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|f
operator|.
name|format
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|Var
operator|.
name|Type
operator|.
name|DATE
argument_list|,
name|Utils
operator|.
name|toDate
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute MAX_PART_STRING function    */
specifier|public
name|void
name|execMaxPartString
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"MAX_PART_STRING"
argument_list|)
expr_stmt|;
block|}
name|execMinMaxPart
argument_list|(
name|ctx
argument_list|,
name|Var
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|true
comment|/*max*/
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute MIN_PART_STRING function    */
specifier|public
name|void
name|execMinPartString
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"MIN_PART_STRING"
argument_list|)
expr_stmt|;
block|}
name|execMinMaxPart
argument_list|(
name|ctx
argument_list|,
name|Var
operator|.
name|Type
operator|.
name|STRING
argument_list|,
literal|false
comment|/*max*/
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute MAX_PART_INT function    */
specifier|public
name|void
name|execMaxPartInt
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"MAX_PART_INT"
argument_list|)
expr_stmt|;
block|}
name|execMinMaxPart
argument_list|(
name|ctx
argument_list|,
name|Var
operator|.
name|Type
operator|.
name|BIGINT
argument_list|,
literal|true
comment|/*max*/
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute MIN_PART_INT function    */
specifier|public
name|void
name|execMinPartInt
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"MIN_PART_INT"
argument_list|)
expr_stmt|;
block|}
name|execMinMaxPart
argument_list|(
name|ctx
argument_list|,
name|Var
operator|.
name|Type
operator|.
name|BIGINT
argument_list|,
literal|false
comment|/*max*/
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute MAX_PART_DATE function    */
specifier|public
name|void
name|execMaxPartDate
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"MAX_PART_DATE"
argument_list|)
expr_stmt|;
block|}
name|execMinMaxPart
argument_list|(
name|ctx
argument_list|,
name|Var
operator|.
name|Type
operator|.
name|DATE
argument_list|,
literal|true
comment|/*max*/
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute MIN_PART_DATE function    */
specifier|public
name|void
name|execMinPartDate
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"MIN_PART_DATE"
argument_list|)
expr_stmt|;
block|}
name|execMinMaxPart
argument_list|(
name|ctx
argument_list|,
name|Var
operator|.
name|Type
operator|.
name|DATE
argument_list|,
literal|false
comment|/*max*/
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute MIN or MAX partition function    */
specifier|public
name|void
name|execMinMaxPart
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|,
name|Var
operator|.
name|Type
name|type
parameter_list|,
name|boolean
name|max
parameter_list|)
block|{
name|String
name|tabname
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"SHOW PARTITIONS "
operator|+
name|tabname
decl_stmt|;
name|String
name|colname
init|=
literal|null
decl_stmt|;
name|int
name|colnum
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|exprnum
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Column name
if|if
condition|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|colname
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|colnum
operator|=
literal|0
expr_stmt|;
block|}
comment|// Partition filter
if|if
condition|(
name|exprnum
operator|>=
literal|4
condition|)
block|{
name|sql
operator|+=
literal|" PARTITION ("
expr_stmt|;
name|int
name|i
init|=
literal|2
decl_stmt|;
while|while
condition|(
name|i
operator|+
literal|1
operator|<
name|exprnum
condition|)
block|{
name|String
name|fcol
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|fval
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|toSqlString
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|2
condition|)
block|{
name|sql
operator|+=
literal|", "
expr_stmt|;
block|}
name|sql
operator|+=
name|fcol
operator|+
literal|"="
operator|+
name|fval
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
name|sql
operator|+=
literal|")"
expr_stmt|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Query: "
operator|+
name|sql
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exec
operator|.
name|getOffline
argument_list|()
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|Query
name|query
init|=
name|exec
operator|.
name|executeQuery
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|evalNullClose
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return;
block|}
name|ResultSet
name|rs
init|=
name|query
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|resultString
init|=
literal|null
decl_stmt|;
name|Long
name|resultInt
init|=
literal|null
decl_stmt|;
name|Date
name|resultDate
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
comment|// Find partition column by name
if|if
condition|(
name|colnum
operator|==
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|name
init|=
name|parts
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|colname
argument_list|)
condition|)
block|{
name|colnum
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
comment|// No partition column with the specified name exists
if|if
condition|(
name|colnum
operator|==
operator|-
literal|1
condition|)
block|{
name|evalNullClose
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|String
index|[]
name|pair
init|=
name|parts
index|[
name|colnum
index|]
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|STRING
condition|)
block|{
name|resultString
operator|=
name|Utils
operator|.
name|minMaxString
argument_list|(
name|resultString
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|BIGINT
condition|)
block|{
name|resultInt
operator|=
name|Utils
operator|.
name|minMaxInt
argument_list|(
name|resultInt
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|DATE
condition|)
block|{
name|resultDate
operator|=
name|Utils
operator|.
name|minMaxDate
argument_list|(
name|resultDate
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resultString
operator|!=
literal|null
condition|)
block|{
name|evalString
argument_list|(
name|resultString
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resultInt
operator|!=
literal|null
condition|)
block|{
name|evalInt
argument_list|(
name|resultInt
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resultDate
operator|!=
literal|null
condition|)
block|{
name|evalDate
argument_list|(
name|resultDate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evalNull
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{}
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute PART_LOC function    */
specifier|public
name|void
name|execPartLoc
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|String
name|tabname
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"DESCRIBE EXTENDED "
operator|+
name|tabname
decl_stmt|;
name|int
name|exprnum
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|hostname
init|=
literal|false
decl_stmt|;
comment|// Partition filter
if|if
condition|(
name|exprnum
operator|>
literal|1
condition|)
block|{
name|sql
operator|+=
literal|" PARTITION ("
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|+
literal|1
operator|<
name|exprnum
condition|)
block|{
name|String
name|col
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|toSqlString
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|2
condition|)
block|{
name|sql
operator|+=
literal|", "
expr_stmt|;
block|}
name|sql
operator|+=
name|col
operator|+
literal|"="
operator|+
name|val
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
name|sql
operator|+=
literal|")"
expr_stmt|;
block|}
comment|// With host name
if|if
condition|(
name|exprnum
operator|%
literal|2
operator|==
literal|0
operator|&&
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|exprnum
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
literal|1
condition|)
block|{
name|hostname
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Query: "
operator|+
name|sql
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exec
operator|.
name|getOffline
argument_list|()
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|Query
name|query
init|=
name|exec
operator|.
name|executeQuery
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|evalNullClose
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|result
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
name|query
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Detailed Partition Information"
argument_list|)
condition|)
block|{
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*, location:(.*?),.*"
argument_list|)
operator|.
name|matcher
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|result
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
comment|// Remove the host name
if|if
condition|(
operator|!
name|hostname
condition|)
block|{
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*://.*?(/.*)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|result
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|evalString
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evalNull
argument_list|()
expr_stmt|;
block|}
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression and push the value to the stack    */
name|void
name|eval
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression to the specified variable    */
name|void
name|evalVar
parameter_list|(
name|Var
name|var
parameter_list|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression to NULL    */
name|void
name|evalNull
parameter_list|()
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|Var
operator|.
name|Null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression to specified String value    */
name|void
name|evalString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|evalString
parameter_list|(
name|StringBuilder
name|string
parameter_list|)
block|{
name|evalString
argument_list|(
name|string
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression to specified Int value    */
name|void
name|evalInt
parameter_list|(
name|Long
name|i
parameter_list|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|evalInt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|evalInt
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression to specified Date value    */
name|void
name|evalDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
operator|new
name|Var
argument_list|(
name|Var
operator|.
name|Type
operator|.
name|DATE
argument_list|,
name|date
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the expression to NULL and close the query    */
name|void
name|evalNullClose
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|conn
parameter_list|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|Var
operator|.
name|Null
argument_list|)
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|conn
argument_list|)
expr_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|query
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Evaluate the expression and pop value from the stack    */
name|Var
name|evalPop
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
name|exec
operator|.
name|stackPop
argument_list|()
return|;
block|}
name|Var
name|evalPop
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
return|return
name|evalPop
argument_list|(
name|ctx
argument_list|)
return|;
block|}
return|return
operator|new
name|Var
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Execute rules    */
name|Integer
name|visit
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Execute children rules    */
name|Integer
name|visitChildren
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
name|exec
operator|.
name|visitChildren
argument_list|(
name|ctx
argument_list|)
return|;
block|}
comment|/**    * Trace information    */
specifier|public
name|void
name|trace
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|exec
operator|.
name|trace
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|trace
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|trace
argument_list|(
literal|null
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|exec
operator|.
name|info
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

