begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_class
specifier|public
class|class
name|Conn
block|{
specifier|public
enum|enum
name|Type
block|{
name|DB2
block|,
name|HIVE
block|,
name|MYSQL
block|,
name|TERADATA
block|}
empty_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Stack
argument_list|<
name|Connection
argument_list|>
argument_list|>
name|connections
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Stack
argument_list|<
name|Connection
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|connStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|connTypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|connInits
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|preSql
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Exec
name|exec
decl_stmt|;
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|boolean
name|trace
init|=
literal|false
decl_stmt|;
name|boolean
name|info
init|=
literal|false
decl_stmt|;
name|Conn
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|exec
operator|=
name|e
expr_stmt|;
name|trace
operator|=
name|exec
operator|.
name|getTrace
argument_list|()
expr_stmt|;
name|info
operator|=
name|exec
operator|.
name|getInfo
argument_list|()
expr_stmt|;
block|}
comment|/**    * Execute a SQL query    */
specifier|public
name|Query
name|executeQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|connName
parameter_list|)
block|{
try|try
block|{
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|connName
argument_list|)
decl_stmt|;
name|runPreSql
argument_list|(
name|connName
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|exec
operator|.
name|info
argument_list|(
literal|null
argument_list|,
literal|"Starting query"
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|query
operator|.
name|sql
argument_list|)
decl_stmt|;
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|conn
argument_list|,
name|stmt
argument_list|,
name|rs
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|exec
operator|.
name|info
argument_list|(
literal|null
argument_list|,
literal|"Query executed successfully ("
operator|+
name|timer
operator|.
name|format
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|query
operator|.
name|setError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|public
name|Query
name|executeQuery
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|connName
parameter_list|)
block|{
return|return
name|executeQuery
argument_list|(
operator|new
name|Query
argument_list|(
name|sql
argument_list|)
argument_list|,
name|connName
argument_list|)
return|;
block|}
comment|/**    * Prepare a SQL query    */
specifier|public
name|Query
name|prepareQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|connName
parameter_list|)
block|{
try|try
block|{
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|connName
argument_list|)
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|PreparedStatement
name|stmt
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|query
operator|.
name|sql
argument_list|)
decl_stmt|;
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|conn
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|exec
operator|.
name|info
argument_list|(
literal|null
argument_list|,
literal|"Prepared statement executed successfully ("
operator|+
name|timer
operator|.
name|format
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|query
operator|.
name|setError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
comment|/**    * Execute a SQL statement    */
specifier|public
name|Query
name|executeSql
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|connName
parameter_list|)
block|{
name|Query
name|query
init|=
operator|new
name|Query
argument_list|(
name|sql
argument_list|)
decl_stmt|;
try|try
block|{
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|connName
argument_list|)
decl_stmt|;
name|runPreSql
argument_list|(
name|connName
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|exec
operator|.
name|info
argument_list|(
literal|null
argument_list|,
literal|"Starting SQL statement"
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|stmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
condition|)
block|{
name|rs
operator|=
name|stmt
operator|.
name|getResultSet
argument_list|()
expr_stmt|;
block|}
name|query
operator|.
name|set
argument_list|(
name|conn
argument_list|,
name|stmt
argument_list|,
name|rs
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|exec
operator|.
name|info
argument_list|(
literal|null
argument_list|,
literal|"SQL statement executed successfully ("
operator|+
name|timer
operator|.
name|format
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|query
operator|.
name|setError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
comment|/**    * Close the query object    */
specifier|public
name|void
name|closeQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|connName
parameter_list|)
block|{
name|query
operator|.
name|closeStatement
argument_list|()
expr_stmt|;
name|returnConnection
argument_list|(
name|connName
argument_list|,
name|query
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run pre-SQL statements     * @throws SQLException     */
name|void
name|runPreSql
parameter_list|(
name|String
name|connName
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|sqls
init|=
name|preSql
operator|.
name|get
argument_list|(
name|connName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sqls
operator|!=
literal|null
condition|)
block|{
name|Statement
name|s
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|sql
range|:
name|sqls
control|)
block|{
name|exec
operator|.
name|info
argument_list|(
literal|null
argument_list|,
literal|"Starting pre-SQL statement"
argument_list|)
expr_stmt|;
name|s
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|preSql
operator|.
name|remove
argument_list|(
name|connName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Get a connection    * @throws Exception     */
specifier|synchronized
name|Connection
name|getConnection
parameter_list|(
name|String
name|connName
parameter_list|)
throws|throws
name|Exception
block|{
name|Stack
argument_list|<
name|Connection
argument_list|>
name|connStack
init|=
name|connections
operator|.
name|get
argument_list|(
name|connName
argument_list|)
decl_stmt|;
name|String
name|connStr
init|=
name|connStrings
operator|.
name|get
argument_list|(
name|connName
argument_list|)
decl_stmt|;
if|if
condition|(
name|connStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknown connection profile: "
operator|+
name|connName
argument_list|)
throw|;
block|}
if|if
condition|(
name|connStack
operator|!=
literal|null
operator|&&
operator|!
name|connStack
operator|.
name|empty
argument_list|()
condition|)
block|{
comment|// Reuse an existing connection
return|return
name|connStack
operator|.
name|pop
argument_list|()
return|;
block|}
name|Connection
name|c
init|=
name|openConnection
argument_list|(
name|connStr
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|sqls
init|=
name|connInits
operator|.
name|get
argument_list|(
name|connName
argument_list|)
decl_stmt|;
comment|// Run initialization statements on the connection
if|if
condition|(
name|sqls
operator|!=
literal|null
condition|)
block|{
name|Statement
name|s
init|=
name|c
operator|.
name|createStatement
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|sql
range|:
name|sqls
control|)
block|{
name|s
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
comment|/**    * Open a new connection    * @throws Exception     */
name|Connection
name|openConnection
parameter_list|(
name|String
name|connStr
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|driver
init|=
literal|"org.apache.hadoop.hive.jdbc.HiveDriver"
decl_stmt|;
name|StringBuilder
name|url
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|usr
init|=
literal|""
decl_stmt|;
name|String
name|pwd
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|connStr
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|c
init|=
name|connStr
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
name|driver
operator|=
name|c
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|url
operator|.
name|append
argument_list|(
literal|"jdbc:hive://"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|c
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|c
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|usr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|usr
operator|=
name|c
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pwd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pwd
operator|=
name|c
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|,
name|usr
argument_list|,
name|pwd
argument_list|)
decl_stmt|;
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|exec
operator|.
name|info
argument_list|(
literal|null
argument_list|,
literal|"Open connection: "
operator|+
name|url
operator|+
literal|" ("
operator|+
name|timer
operator|.
name|format
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|conn
return|;
block|}
comment|/**    * Get the database type by profile name    */
name|Conn
operator|.
name|Type
name|getTypeByProfile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|connTypes
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Get the database type by connection string    */
name|Conn
operator|.
name|Type
name|getType
parameter_list|(
name|String
name|connStr
parameter_list|)
block|{
if|if
condition|(
name|connStr
operator|.
name|contains
argument_list|(
literal|"hive."
argument_list|)
condition|)
block|{
return|return
name|Type
operator|.
name|HIVE
return|;
block|}
elseif|else
if|if
condition|(
name|connStr
operator|.
name|contains
argument_list|(
literal|"db2."
argument_list|)
condition|)
block|{
return|return
name|Type
operator|.
name|DB2
return|;
block|}
elseif|else
if|if
condition|(
name|connStr
operator|.
name|contains
argument_list|(
literal|"mysql."
argument_list|)
condition|)
block|{
return|return
name|Type
operator|.
name|MYSQL
return|;
block|}
elseif|else
if|if
condition|(
name|connStr
operator|.
name|contains
argument_list|(
literal|"teradata."
argument_list|)
condition|)
block|{
return|return
name|Type
operator|.
name|TERADATA
return|;
block|}
return|return
name|Type
operator|.
name|HIVE
return|;
block|}
comment|/**    * Return the connection to the pool    */
name|void
name|returnConnection
parameter_list|(
name|String
name|name
parameter_list|,
name|Connection
name|conn
parameter_list|)
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|connections
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|push
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a new connection string    */
specifier|public
name|void
name|addConnection
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|connStr
parameter_list|)
block|{
name|connections
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|Stack
argument_list|<
name|Connection
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|connStrings
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|connStr
argument_list|)
expr_stmt|;
name|connTypes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|getType
argument_list|(
name|connStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add initialization statements for the specified connection    */
specifier|public
name|void
name|addConnectionInit
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|connInit
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|a
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sa
init|=
name|connInit
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|sa
control|)
block|{
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|a
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|connInits
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add SQL statements to be executed before executing the next SQL statement (pre-SQL)    */
specifier|public
name|void
name|addPreSql
parameter_list|(
name|String
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|sql
parameter_list|)
block|{
name|preSql
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

