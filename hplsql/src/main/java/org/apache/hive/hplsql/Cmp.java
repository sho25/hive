begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_class
specifier|public
class|class
name|Cmp
implements|implements
name|Runnable
block|{
name|Exec
name|exec
decl_stmt|;
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|boolean
name|trace
init|=
literal|false
decl_stmt|;
name|boolean
name|info
init|=
literal|false
decl_stmt|;
name|Query
name|query
decl_stmt|;
name|String
name|conn
decl_stmt|;
name|HplsqlParser
operator|.
name|Cmp_stmtContext
name|ctx
decl_stmt|;
name|int
name|tests
init|=
literal|0
decl_stmt|;
name|int
name|failedTests
init|=
literal|0
decl_stmt|;
name|int
name|failedTestsHighDiff
init|=
literal|0
decl_stmt|;
name|Cmp
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|exec
operator|=
name|e
expr_stmt|;
name|trace
operator|=
name|exec
operator|.
name|getTrace
argument_list|()
expr_stmt|;
name|info
operator|=
name|exec
operator|.
name|getInfo
argument_list|()
expr_stmt|;
block|}
name|Cmp
parameter_list|(
name|Exec
name|e
parameter_list|,
name|HplsqlParser
operator|.
name|Cmp_stmtContext
name|c
parameter_list|,
name|Query
name|q
parameter_list|,
name|String
name|cn
parameter_list|)
block|{
name|exec
operator|=
name|e
expr_stmt|;
name|trace
operator|=
name|exec
operator|.
name|getTrace
argument_list|()
expr_stmt|;
name|info
operator|=
name|exec
operator|.
name|getInfo
argument_list|()
expr_stmt|;
name|ctx
operator|=
name|c
expr_stmt|;
name|query
operator|=
name|q
expr_stmt|;
name|conn
operator|=
name|cn
expr_stmt|;
block|}
comment|/**    * Run CMP command    */
name|Integer
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Cmp_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"CMP"
argument_list|)
expr_stmt|;
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|StringBuilder
name|conn1
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|conn2
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Query
name|query1
init|=
operator|new
name|Query
argument_list|()
decl_stmt|;
name|Query
name|query2
init|=
operator|new
name|Query
argument_list|()
decl_stmt|;
name|Boolean
name|equal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|sql1
init|=
name|getSql
argument_list|(
name|ctx
argument_list|,
name|conn1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|sql2
init|=
name|getSql
argument_list|(
name|ctx
argument_list|,
name|conn2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Query 1: "
operator|+
name|sql1
argument_list|)
expr_stmt|;
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Query 2: "
operator|+
name|sql2
argument_list|)
expr_stmt|;
block|}
name|query1
operator|.
name|setSql
argument_list|(
name|sql1
argument_list|)
expr_stmt|;
name|query2
operator|.
name|setSql
argument_list|(
name|sql2
argument_list|)
expr_stmt|;
name|Cmp
name|cmp1
init|=
operator|new
name|Cmp
argument_list|(
name|exec
argument_list|,
name|ctx
argument_list|,
name|query1
argument_list|,
name|conn1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Cmp
name|cmp2
init|=
operator|new
name|Cmp
argument_list|(
name|exec
argument_list|,
name|ctx
argument_list|,
name|query2
argument_list|,
name|conn2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
name|cmp1
argument_list|)
decl_stmt|;
name|Thread
name|t2
init|=
operator|new
name|Thread
argument_list|(
name|cmp2
argument_list|)
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
name|equal
operator|=
name|compare
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
finally|finally
block|{
name|long
name|elapsed
init|=
name|timer
operator|.
name|stop
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|String
name|message
init|=
literal|"CMP "
decl_stmt|;
if|if
condition|(
name|equal
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|equal
condition|)
block|{
name|message
operator|+=
literal|"Equal, "
operator|+
name|tests
operator|+
literal|" tests"
expr_stmt|;
block|}
else|else
block|{
name|message
operator|+=
literal|"Not Equal, "
operator|+
name|failedTests
operator|+
literal|" of "
operator|+
name|tests
operator|+
literal|" tests failed"
expr_stmt|;
name|message
operator|+=
literal|", "
operator|+
name|failedTestsHighDiff
operator|+
literal|" failed tests with more than 0.01% difference"
expr_stmt|;
block|}
block|}
else|else
block|{
name|message
operator|+=
literal|"Failed"
expr_stmt|;
block|}
name|info
argument_list|(
name|ctx
argument_list|,
name|message
operator|+
literal|", "
operator|+
name|timer
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|closeQuery
argument_list|(
name|query1
argument_list|,
name|conn1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query2
argument_list|,
name|conn2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Get data for comparison from the source    */
specifier|public
name|void
name|run
parameter_list|()
block|{
name|exec
operator|.
name|executeQuery
argument_list|(
name|ctx
argument_list|,
name|query
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compare the results    */
name|Boolean
name|compare
parameter_list|(
name|Query
name|query1
parameter_list|,
name|Query
name|query2
parameter_list|)
block|{
if|if
condition|(
name|query1
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query1
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|query2
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|query2
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ResultSet
name|rs1
init|=
name|query1
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|ResultSet
name|rs2
init|=
name|query2
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs1
operator|==
literal|null
operator|||
name|rs2
operator|==
literal|null
condition|)
block|{
name|exec
operator|.
name|setSqlCode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|boolean
name|equal
init|=
literal|true
decl_stmt|;
name|tests
operator|=
literal|0
expr_stmt|;
name|failedTests
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|ResultSetMetaData
name|rm1
init|=
name|rs1
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSetMetaData
name|rm2
init|=
name|rs2
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|int
name|cnt1
init|=
name|rm1
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
name|int
name|cnt2
init|=
name|rm2
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
name|tests
operator|=
name|cnt1
expr_stmt|;
while|while
condition|(
name|rs1
operator|.
name|next
argument_list|()
operator|&&
name|rs2
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|tests
condition|;
name|i
operator|++
control|)
block|{
name|Var
name|v1
init|=
operator|new
name|Var
argument_list|(
name|Var
operator|.
name|Type
operator|.
name|DERIVED_TYPE
argument_list|)
decl_stmt|;
name|Var
name|v2
init|=
operator|new
name|Var
argument_list|(
name|Var
operator|.
name|Type
operator|.
name|DERIVED_TYPE
argument_list|)
decl_stmt|;
name|v1
operator|.
name|setValue
argument_list|(
name|rs1
argument_list|,
name|rm1
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
name|cnt2
condition|)
block|{
name|v2
operator|.
name|setValue
argument_list|(
name|rs2
argument_list|,
name|rm2
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|boolean
name|e
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|v1
operator|.
name|isNull
argument_list|()
operator|&&
name|v2
operator|.
name|isNull
argument_list|()
operator|)
operator|&&
operator|!
name|v1
operator|.
name|equals
argument_list|(
name|v2
argument_list|)
condition|)
block|{
name|equal
operator|=
literal|false
expr_stmt|;
name|e
operator|=
literal|false
expr_stmt|;
name|failedTests
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|trace
operator|||
name|info
condition|)
block|{
name|String
name|m
init|=
name|rm1
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
operator|+
literal|"\t"
operator|+
name|v1
operator|.
name|toString
argument_list|()
operator|+
literal|"\t"
operator|+
name|v2
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|e
condition|)
block|{
name|m
operator|+=
literal|"\tNot equal"
expr_stmt|;
name|BigDecimal
name|diff
init|=
name|v1
operator|.
name|percentDiff
argument_list|(
name|v2
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|diff
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|m
operator|+=
literal|", "
operator|+
name|diff
operator|+
literal|"% difference"
expr_stmt|;
name|failedTestsHighDiff
operator|++
expr_stmt|;
block|}
else|else
block|{
name|m
operator|+=
literal|", less then 0.01% difference"
expr_stmt|;
block|}
block|}
else|else
block|{
name|failedTestsHighDiff
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
argument_list|(
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|equal
condition|)
block|{
name|exec
operator|.
name|setSqlSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|setSqlCode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Boolean
argument_list|(
name|equal
argument_list|)
return|;
block|}
comment|/**    * Define the SQL query to access data    */
name|String
name|getSql
parameter_list|(
name|HplsqlParser
operator|.
name|Cmp_stmtContext
name|ctx
parameter_list|,
name|StringBuilder
name|conn
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|table
init|=
literal|null
decl_stmt|;
name|String
name|query
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|cmp_source
argument_list|(
name|idx
argument_list|)
operator|.
name|table_name
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|table
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|cmp_source
argument_list|(
name|idx
argument_list|)
operator|.
name|table_name
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|cmp_source
argument_list|(
name|idx
argument_list|)
operator|.
name|select_stmt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|cmp_source
argument_list|(
name|idx
argument_list|)
operator|.
name|T_AT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|cmp_source
argument_list|(
name|idx
argument_list|)
operator|.
name|ident
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|append
argument_list|(
name|exec
operator|.
name|getObjectConnection
argument_list|(
name|ctx
operator|.
name|cmp_source
argument_list|(
name|idx
argument_list|)
operator|.
name|table_name
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conn
operator|.
name|append
argument_list|(
name|exec
operator|.
name|getStatementConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|"SELECT "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|getSelectList
argument_list|(
name|ctx
argument_list|,
name|conn
operator|.
name|toString
argument_list|()
argument_list|,
name|table
argument_list|,
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" FROM "
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|cmp_source
argument_list|(
name|idx
argument_list|)
operator|.
name|where_clause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|evalPop
argument_list|(
name|ctx
operator|.
name|cmp_source
argument_list|(
name|idx
argument_list|)
operator|.
name|where_clause
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sql
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|") t"
argument_list|)
expr_stmt|;
block|}
return|return
name|sql
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Define SELECT listto access data    */
name|String
name|getSelectList
parameter_list|(
name|HplsqlParser
operator|.
name|Cmp_stmtContext
name|ctx
parameter_list|,
name|String
name|conn
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"COUNT(1) AS row_count"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|T_SUM
argument_list|()
operator|!=
literal|null
operator|&&
name|table
operator|!=
literal|null
condition|)
block|{
name|Row
name|row
init|=
name|exec
operator|.
name|meta
operator|.
name|getRowDataType
argument_list|(
name|ctx
argument_list|,
name|conn
argument_list|,
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|Column
argument_list|>
name|cols
init|=
name|row
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|row
operator|.
name|size
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|Column
name|col
init|=
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|col
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Var
operator|.
name|Type
name|type
init|=
name|Var
operator|.
name|defineType
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"COUNT("
operator|+
name|name
operator|+
literal|") AS "
operator|+
name|name
operator|+
literal|"_COUNT_NOT_NULL"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|STRING
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"SUM(LENGTH("
operator|+
name|name
operator|+
literal|")) AS "
operator|+
name|name
operator|+
literal|"_SUM_LENGTH,\n"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"MIN(LENGTH("
operator|+
name|name
operator|+
literal|")) AS "
operator|+
name|name
operator|+
literal|"_MIN_LENGTH,\n"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"MAX(LENGTH("
operator|+
name|name
operator|+
literal|")) AS "
operator|+
name|name
operator|+
literal|"_MAX_LENGTH"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|BIGINT
operator|||
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|DECIMAL
operator|||
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"SUM("
operator|+
name|name
operator|+
literal|") AS "
operator|+
name|name
operator|+
literal|"_SUM,\n"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"MIN("
operator|+
name|name
operator|+
literal|") AS "
operator|+
name|name
operator|+
literal|"_MIN,\n"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"MAX("
operator|+
name|name
operator|+
literal|") AS "
operator|+
name|name
operator|+
literal|"_MAX"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|DATE
operator|||
name|type
operator|==
name|Var
operator|.
name|Type
operator|.
name|TIMESTAMP
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"SUM(YEAR("
operator|+
name|name
operator|+
literal|")) AS "
operator|+
name|name
operator|+
literal|"_SUM_YEAR,\n"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"SUM(MONTH("
operator|+
name|name
operator|+
literal|")) AS "
operator|+
name|name
operator|+
literal|"_SUM_MONTH,\n"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"SUM(DAY("
operator|+
name|name
operator|+
literal|")) AS "
operator|+
name|name
operator|+
literal|"_SUM_DAY,\n"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"MIN("
operator|+
name|name
operator|+
literal|") AS "
operator|+
name|name
operator|+
literal|"_MIN,\n"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"MAX("
operator|+
name|name
operator|+
literal|") AS "
operator|+
name|name
operator|+
literal|"_MAX"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|cnt
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|sql
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Evaluate the expression and pop value from the stack    */
name|Var
name|evalPop
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exec
operator|.
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|stackPop
argument_list|()
return|;
block|}
return|return
name|Var
operator|.
name|Empty
return|;
block|}
comment|/**    * Trace and information    */
specifier|public
name|void
name|trace
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|exec
operator|.
name|trace
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|exec
operator|.
name|info
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

