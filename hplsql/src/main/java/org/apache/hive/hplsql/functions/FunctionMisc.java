begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|functions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|FunctionMisc
extends|extends
name|Function
block|{
specifier|public
name|FunctionMisc
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**     * Register functions    */
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|Function
name|f
parameter_list|)
block|{
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"COALESCE"
argument_list|,
name|this
operator|::
name|nvl
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"DECODE"
argument_list|,
name|this
operator|::
name|decode
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"NVL"
argument_list|,
name|this
operator|::
name|nvl
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"NVL2"
argument_list|,
name|this
operator|::
name|nvl2
argument_list|)
expr_stmt|;
name|f
operator|.
name|map
operator|.
name|put
argument_list|(
literal|"PART_COUNT_BY"
argument_list|,
name|this
operator|::
name|partCountBy
argument_list|)
expr_stmt|;
name|f
operator|.
name|specMap
operator|.
name|put
argument_list|(
literal|"ACTIVITY_COUNT"
argument_list|,
name|this
operator|::
name|activityCount
argument_list|)
expr_stmt|;
name|f
operator|.
name|specMap
operator|.
name|put
argument_list|(
literal|"CAST"
argument_list|,
name|this
operator|::
name|cast
argument_list|)
expr_stmt|;
name|f
operator|.
name|specMap
operator|.
name|put
argument_list|(
literal|"CURRENT"
argument_list|,
name|this
operator|::
name|current
argument_list|)
expr_stmt|;
name|f
operator|.
name|specMap
operator|.
name|put
argument_list|(
literal|"CURRENT_USER"
argument_list|,
name|this
operator|::
name|currentUser
argument_list|)
expr_stmt|;
name|f
operator|.
name|specMap
operator|.
name|put
argument_list|(
literal|"PART_COUNT"
argument_list|,
name|this
operator|::
name|partCount
argument_list|)
expr_stmt|;
name|f
operator|.
name|specMap
operator|.
name|put
argument_list|(
literal|"USER"
argument_list|,
name|this
operator|::
name|currentUser
argument_list|)
expr_stmt|;
name|f
operator|.
name|specSqlMap
operator|.
name|put
argument_list|(
literal|"CURRENT"
argument_list|,
name|this
operator|::
name|currentSql
argument_list|)
expr_stmt|;
block|}
comment|/**    * ACTIVITY_COUNT function (built-in variable)    */
name|void
name|activityCount
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|evalInt
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|exec
operator|.
name|getRowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * CAST function    */
name|void
name|cast
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|type
init|=
name|ctx
operator|.
name|dtype
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|len
init|=
literal|null
decl_stmt|;
name|String
name|scale
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|dtype_len
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|len
operator|=
name|ctx
operator|.
name|dtype_len
argument_list|()
operator|.
name|L_INT
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|dtype_len
argument_list|()
operator|.
name|L_INT
argument_list|(
literal|1
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|scale
operator|=
name|ctx
operator|.
name|dtype_len
argument_list|()
operator|.
name|L_INT
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
name|Var
name|var
init|=
operator|new
name|Var
argument_list|(
literal|null
argument_list|,
name|type
argument_list|,
name|len
argument_list|,
name|scale
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|var
operator|.
name|cast
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|evalVar
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
comment|/**    * CURRENT<VALUE> function    */
name|void
name|current
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|T_DATE
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|evalVar
argument_list|(
name|FunctionDatetime
operator|.
name|currentDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_TIMESTAMP
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|precision
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|3
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|evalVar
argument_list|(
name|FunctionDatetime
operator|.
name|currentTimestamp
argument_list|(
name|precision
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_USER
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|evalVar
argument_list|(
name|FunctionMisc
operator|.
name|currentUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evalNull
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * CURRENT<VALUE> function in executable SQL statement    */
name|void
name|currentSql
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|T_DATE
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exec
operator|.
name|getConnectionType
argument_list|()
operator|==
name|Conn
operator|.
name|Type
operator|.
name|HIVE
condition|)
block|{
name|evalString
argument_list|(
literal|"TO_DATE(FROM_UNIXTIME(UNIX_TIMESTAMP()))"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evalString
argument_list|(
literal|"CURRENT_DATE"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|T_TIMESTAMP
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exec
operator|.
name|getConnectionType
argument_list|()
operator|==
name|Conn
operator|.
name|Type
operator|.
name|HIVE
condition|)
block|{
name|evalString
argument_list|(
literal|"FROM_UNIXTIME(UNIX_TIMESTAMP())"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evalString
argument_list|(
literal|"CURRENT_TIMESTAMP"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|evalString
argument_list|(
name|exec
operator|.
name|getFormattedText
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * CURRENT_USER function    */
name|void
name|currentUser
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|evalVar
argument_list|(
name|currentUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Var
name|currentUser
parameter_list|()
block|{
return|return
operator|new
name|Var
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * DECODE function    */
name|void
name|decode
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|cnt
operator|<
literal|3
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|Var
name|value
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|+
literal|1
operator|<
name|cnt
condition|)
block|{
name|Var
name|when
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
name|i
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|value
operator|.
name|isNull
argument_list|()
operator|&&
name|when
operator|.
name|isNull
argument_list|()
operator|)
operator|||
name|value
operator|.
name|equals
argument_list|(
name|when
argument_list|)
condition|)
block|{
name|eval
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|i
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|cnt
condition|)
block|{
comment|// ELSE expression
name|eval
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
name|i
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evalNull
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * NVL function - Return first non-NULL expression    */
name|void
name|nvl
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Var
name|v
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
name|i
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|type
operator|!=
name|Var
operator|.
name|Type
operator|.
name|NULL
condition|)
block|{
name|exec
operator|.
name|stackPush
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|evalNull
argument_list|()
expr_stmt|;
block|}
comment|/**    * NVL2 function - If expr1 is not NULL return expr2, otherwise expr3    */
name|void
name|nvl2
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
if|if
condition|(
operator|!
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|eval
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|1
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eval
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|2
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|evalNull
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * PART_COUNT function    */
specifier|public
name|void
name|partCount
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_spec_funcContext
name|ctx
parameter_list|)
block|{
name|String
name|tabname
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"SHOW PARTITIONS "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|tabname
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|expr
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|cnt
operator|>
literal|1
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|" PARTITION ("
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|+
literal|1
operator|<
name|cnt
condition|)
block|{
name|String
name|col
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|toSqlString
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|2
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"Query: "
operator|+
name|sql
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exec
operator|.
name|getOffline
argument_list|()
condition|)
block|{
name|evalNull
argument_list|()
expr_stmt|;
return|return;
block|}
name|Query
name|query
init|=
name|exec
operator|.
name|executeQuery
argument_list|(
name|ctx
argument_list|,
name|sql
operator|.
name|toString
argument_list|()
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|evalNullClose
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|result
init|=
literal|0
decl_stmt|;
name|ResultSet
name|rs
init|=
name|query
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|result
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|evalNullClose
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return;
block|}
name|evalInt
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
block|}
comment|/**    * PART_COUNT_BY function    */
specifier|public
name|void
name|partCountBy
parameter_list|(
name|HplsqlParser
operator|.
name|Expr_func_paramsContext
name|ctx
parameter_list|)
block|{
name|int
name|cnt
init|=
name|ctx
operator|.
name|func_param
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|cnt
operator|<
literal|1
operator|||
name|exec
operator|.
name|getOffline
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|tabname
init|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
literal|0
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cnt
operator|>
literal|1
condition|)
block|{
name|keys
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|evalPop
argument_list|(
name|ctx
operator|.
name|func_param
argument_list|(
name|i
argument_list|)
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|sql
init|=
literal|"SHOW PARTITIONS "
operator|+
name|tabname
decl_stmt|;
name|Query
name|query
init|=
name|exec
operator|.
name|executeQuery
argument_list|(
name|ctx
argument_list|,
name|sql
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|error
argument_list|()
condition|)
block|{
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return;
block|}
name|ResultSet
name|rs
init|=
name|query
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|group
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|part
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|part
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|cnt
operator|>
literal|1
condition|)
block|{
name|StringBuilder
name|k
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
operator|.
name|contains
argument_list|(
name|parts
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
index|[
literal|0
index|]
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|k
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|k
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|k
operator|.
name|append
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|key
operator|=
name|k
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|Integer
name|count
init|=
name|group
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cnt
operator|==
literal|1
condition|)
block|{
name|evalInt
argument_list|(
name|group
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|i
range|:
name|group
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|.
name|getKey
argument_list|()
operator|+
literal|'\t'
operator|+
name|i
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|exec
operator|.
name|closeQuery
argument_list|(
name|query
argument_list|,
name|exec
operator|.
name|conf
operator|.
name|defaultConnection
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

