begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hplsql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_class
specifier|public
class|class
name|Ftp
implements|implements
name|Runnable
block|{
name|String
name|host
decl_stmt|;
name|String
name|user
decl_stmt|;
name|String
name|pwd
decl_stmt|;
name|String
name|dir
decl_stmt|;
name|String
name|targetDir
decl_stmt|;
name|String
name|filePattern
decl_stmt|;
name|boolean
name|subdir
init|=
literal|false
decl_stmt|;
name|boolean
name|local
init|=
literal|false
decl_stmt|;
name|boolean
name|newOnly
init|=
literal|false
decl_stmt|;
name|int
name|sessions
init|=
literal|1
decl_stmt|;
name|int
name|fileCnt
init|=
literal|0
decl_stmt|;
name|int
name|dirCnt
init|=
literal|0
decl_stmt|;
name|long
name|ftpSizeInBytes
init|=
literal|0
decl_stmt|;
name|FTPClient
name|ftp
init|=
literal|null
decl_stmt|;
name|ConcurrentLinkedQueue
argument_list|<
name|String
argument_list|>
name|filesQueue
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|FTPFile
argument_list|>
name|filesMap
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|FTPFile
argument_list|>
argument_list|()
decl_stmt|;
name|AtomicInteger
name|currentFileCnt
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicInteger
name|currentThreadCnt
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|fileCntSuccess
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicLong
name|bytesTransferredAll
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Exec
name|exec
decl_stmt|;
name|boolean
name|trace
init|=
literal|false
decl_stmt|;
name|boolean
name|info
init|=
literal|false
decl_stmt|;
name|Ftp
parameter_list|(
name|Exec
name|e
parameter_list|)
block|{
name|exec
operator|=
name|e
expr_stmt|;
name|trace
operator|=
name|exec
operator|.
name|getTrace
argument_list|()
expr_stmt|;
name|info
operator|=
name|exec
operator|.
name|getInfo
argument_list|()
expr_stmt|;
block|}
comment|/**    * Run COPY FROM FTP command    */
name|Integer
name|run
parameter_list|(
name|HplsqlParser
operator|.
name|Copy_from_ftp_stmtContext
name|ctx
parameter_list|)
block|{
name|trace
argument_list|(
name|ctx
argument_list|,
literal|"COPY FROM FTP"
argument_list|)
expr_stmt|;
name|initOptions
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|ftp
operator|=
name|openConnection
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|ftp
operator|!=
literal|null
condition|)
block|{
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|timer
operator|.
name|start
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|info
argument_list|(
name|ctx
argument_list|,
literal|"Retrieving directory listing"
argument_list|)
expr_stmt|;
block|}
name|retrieveFileList
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|long
name|elapsed
init|=
name|timer
operator|.
name|stop
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|info
argument_list|(
name|ctx
argument_list|,
literal|"Files to copy: "
operator|+
name|Utils
operator|.
name|formatSizeInBytes
argument_list|(
name|ftpSizeInBytes
argument_list|)
operator|+
literal|", "
operator|+
name|Utils
operator|.
name|formatCnt
argument_list|(
name|fileCnt
argument_list|,
literal|"file"
argument_list|)
operator|+
literal|", "
operator|+
name|Utils
operator|.
name|formatCnt
argument_list|(
name|dirCnt
argument_list|,
literal|"subdirectory"
argument_list|,
literal|"subdirectories"
argument_list|)
operator|+
literal|" scanned ("
operator|+
name|timer
operator|.
name|format
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileCnt
operator|>
literal|0
condition|)
block|{
name|copyFiles
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Copy the specified files from FTP    */
name|void
name|copyFiles
parameter_list|(
name|HplsqlParser
operator|.
name|Copy_from_ftp_stmtContext
name|ctx
parameter_list|)
block|{
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|timer
operator|.
name|start
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileCnt
operator|>
literal|1
operator|&&
name|sessions
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|sessions
operator|>
name|fileCnt
condition|)
block|{
name|sessions
operator|=
name|fileCnt
expr_stmt|;
block|}
try|try
block|{
name|Thread
name|threads
index|[]
init|=
operator|new
name|Thread
index|[
name|sessions
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sessions
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sessions
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{        }
block|}
else|else
block|{
comment|// Transfer files in the single session
name|run
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|info
condition|)
block|{
name|long
name|elapsed
init|=
name|timer
operator|.
name|stop
argument_list|()
decl_stmt|;
name|long
name|bytesAll
init|=
name|bytesTransferredAll
operator|.
name|get
argument_list|()
decl_stmt|;
name|info
argument_list|(
name|ctx
argument_list|,
literal|"Transfer complete: "
operator|+
name|Utils
operator|.
name|formatSizeInBytes
argument_list|(
name|bytesAll
argument_list|)
operator|+
literal|", "
operator|+
name|fileCntSuccess
operator|.
name|get
argument_list|()
operator|+
literal|" files ok, "
operator|+
operator|(
name|fileCnt
operator|-
name|fileCntSuccess
operator|.
name|get
argument_list|()
operator|)
operator|+
literal|" failed, "
operator|+
name|Utils
operator|.
name|formatTime
argument_list|(
name|elapsed
argument_list|)
operator|+
literal|", "
operator|+
name|Utils
operator|.
name|formatBytesPerSec
argument_list|(
name|bytesAll
argument_list|,
name|elapsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run a thread to transfer files    */
specifier|public
name|void
name|run
parameter_list|()
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|FTPClient
name|ftp
init|=
name|this
operator|.
name|ftp
decl_stmt|;
if|if
condition|(
name|currentThreadCnt
operator|.
name|getAndIncrement
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ftp
operator|=
name|openConnection
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|file
init|=
name|filesQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|int
name|num
init|=
name|currentFileCnt
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|FTPFile
name|ftpFile
init|=
name|filesMap
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|long
name|ftpSizeInBytes
init|=
name|ftpFile
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|String
name|fmtSizeInBytes
init|=
name|Utils
operator|.
name|formatSizeInBytes
argument_list|(
name|ftpSizeInBytes
argument_list|)
decl_stmt|;
name|String
name|targetFile
init|=
name|getTargetFileName
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|info
argument_list|(
literal|null
argument_list|,
literal|"  "
operator|+
name|file
operator|+
literal|" - started ("
operator|+
name|num
operator|+
literal|" of "
operator|+
name|fileCnt
operator|+
literal|", "
operator|+
name|fmtSizeInBytes
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|InputStream
name|in
init|=
name|ftp
operator|.
name|retrieveFileStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
name|java
operator|.
name|io
operator|.
name|File
name|targetLocalFile
init|=
literal|null
decl_stmt|;
name|File
name|targetHdfsFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|local
condition|)
block|{
name|targetLocalFile
operator|=
operator|new
name|java
operator|.
name|io
operator|.
name|File
argument_list|(
name|targetFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|targetLocalFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|targetLocalFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|targetLocalFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|targetLocalFile
argument_list|,
literal|false
comment|/*append*/
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|targetHdfsFile
operator|=
operator|new
name|File
argument_list|()
expr_stmt|;
name|out
operator|=
name|targetHdfsFile
operator|.
name|create
argument_list|(
name|targetFile
argument_list|,
literal|true
comment|/*overwrite*/
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|data
operator|=
operator|new
name|byte
index|[
literal|3
operator|*
literal|1024
operator|*
literal|1024
index|]
expr_stmt|;
block|}
name|int
name|bytesRead
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|bytesReadAll
init|=
literal|0
decl_stmt|;
name|long
name|start
init|=
name|timer
operator|.
name|start
argument_list|()
decl_stmt|;
name|long
name|prev
init|=
name|start
decl_stmt|;
name|long
name|readTime
init|=
literal|0
decl_stmt|;
name|long
name|writeTime
init|=
literal|0
decl_stmt|;
name|long
name|cur
decl_stmt|,
name|cur2
decl_stmt|,
name|cur3
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|cur
operator|=
name|timer
operator|.
name|current
argument_list|()
expr_stmt|;
name|bytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cur2
operator|=
name|timer
operator|.
name|current
argument_list|()
expr_stmt|;
name|readTime
operator|+=
operator|(
name|cur2
operator|-
name|cur
operator|)
expr_stmt|;
if|if
condition|(
name|bytesRead
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|cur3
operator|=
name|timer
operator|.
name|current
argument_list|()
expr_stmt|;
name|writeTime
operator|+=
operator|(
name|cur3
operator|-
name|cur2
operator|)
expr_stmt|;
name|bytesReadAll
operator|+=
name|bytesRead
expr_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|cur
operator|=
name|timer
operator|.
name|current
argument_list|()
expr_stmt|;
if|if
condition|(
name|cur
operator|-
name|prev
operator|>
literal|13000
condition|)
block|{
name|long
name|elapsed
init|=
name|cur
operator|-
name|start
decl_stmt|;
name|info
argument_list|(
literal|null
argument_list|,
literal|"  "
operator|+
name|file
operator|+
literal|" - in progress ("
operator|+
name|Utils
operator|.
name|formatSizeInBytes
argument_list|(
name|bytesReadAll
argument_list|)
operator|+
literal|" of "
operator|+
name|fmtSizeInBytes
operator|+
literal|", "
operator|+
name|Utils
operator|.
name|formatPercent
argument_list|(
name|bytesReadAll
argument_list|,
name|ftpSizeInBytes
argument_list|)
operator|+
literal|", "
operator|+
name|Utils
operator|.
name|formatTime
argument_list|(
name|elapsed
argument_list|)
operator|+
literal|", "
operator|+
name|Utils
operator|.
name|formatBytesPerSec
argument_list|(
name|bytesReadAll
argument_list|,
name|elapsed
argument_list|)
operator|+
literal|", "
operator|+
name|Utils
operator|.
name|formatBytesPerSec
argument_list|(
name|bytesReadAll
argument_list|,
name|readTime
argument_list|)
operator|+
literal|" read, "
operator|+
name|Utils
operator|.
name|formatBytesPerSec
argument_list|(
name|bytesReadAll
argument_list|,
name|writeTime
argument_list|)
operator|+
literal|" write)"
argument_list|)
expr_stmt|;
name|prev
operator|=
name|cur
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ftp
operator|.
name|completePendingCommand
argument_list|()
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|cur
operator|=
name|timer
operator|.
name|current
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|readTime
operator|+=
operator|(
name|timer
operator|.
name|current
argument_list|()
operator|-
name|cur
operator|)
expr_stmt|;
name|bytesTransferredAll
operator|.
name|addAndGet
argument_list|(
name|bytesReadAll
argument_list|)
expr_stmt|;
name|fileCntSuccess
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|long
name|elapsed
init|=
name|timer
operator|.
name|stop
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|null
argument_list|,
literal|"  "
operator|+
name|file
operator|+
literal|" - complete ("
operator|+
name|Utils
operator|.
name|formatSizeInBytes
argument_list|(
name|bytesReadAll
argument_list|)
operator|+
literal|", "
operator|+
name|Utils
operator|.
name|formatTime
argument_list|(
name|elapsed
argument_list|)
operator|+
literal|", "
operator|+
name|Utils
operator|.
name|formatBytesPerSec
argument_list|(
name|bytesReadAll
argument_list|,
name|elapsed
argument_list|)
operator|+
literal|", "
operator|+
name|Utils
operator|.
name|formatBytesPerSec
argument_list|(
name|bytesReadAll
argument_list|,
name|readTime
argument_list|)
operator|+
literal|" read, "
operator|+
name|Utils
operator|.
name|formatBytesPerSec
argument_list|(
name|bytesReadAll
argument_list|,
name|writeTime
argument_list|)
operator|+
literal|" write)"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|info
argument_list|(
literal|null
argument_list|,
literal|"  "
operator|+
name|file
operator|+
literal|" - failed"
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
argument_list|,
literal|"File transfer failed: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|ftp
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|ftp
operator|.
name|logout
argument_list|()
expr_stmt|;
name|ftp
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{           }
block|}
comment|/**    * Get the list of files to transfer    */
name|void
name|retrieveFileList
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
if|if
condition|(
name|info
condition|)
block|{
if|if
condition|(
name|dir
operator|==
literal|null
operator|||
name|dir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|info
argument_list|(
literal|null
argument_list|,
literal|"  Listing the current working FTP directory"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
argument_list|(
literal|null
argument_list|,
literal|"  Listing "
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|FTPFile
index|[]
name|files
init|=
name|ftp
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|FTPFile
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|FTPFile
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FTPFile
name|file
range|:
name|files
control|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|filePattern
operator|==
literal|null
operator|||
name|Pattern
operator|.
name|matches
argument_list|(
name|filePattern
argument_list|,
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
operator|&&
operator|!
name|dir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|=
name|dir
operator|+
literal|"/"
operator|+
name|name
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|newOnly
operator|||
operator|!
name|isTargetExists
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|fileCnt
operator|++
expr_stmt|;
name|ftpSizeInBytes
operator|+=
name|file
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|filesQueue
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|filesMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|subdir
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
name|dirCnt
operator|++
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|subdir
condition|)
block|{
for|for
control|(
name|FTPFile
name|d
range|:
name|dirs
control|)
block|{
name|String
name|sd
init|=
name|d
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
operator|&&
operator|!
name|dir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sd
operator|=
name|dir
operator|+
literal|"/"
operator|+
name|sd
expr_stmt|;
block|}
name|retrieveFileList
argument_list|(
name|sd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Open and initialize FTP    */
name|FTPClient
name|openConnection
parameter_list|(
name|HplsqlParser
operator|.
name|Copy_from_ftp_stmtContext
name|ctx
parameter_list|)
block|{
name|FTPClient
name|ftp
init|=
operator|new
name|FTPClient
argument_list|()
decl_stmt|;
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|timer
operator|.
name|start
argument_list|()
decl_stmt|;
try|try
block|{
name|ftp
operator|.
name|connect
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|enterLocalPassiveMode
argument_list|()
expr_stmt|;
name|ftp
operator|.
name|setFileType
argument_list|(
name|FTP
operator|.
name|BINARY_FILE_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ftp
operator|.
name|login
argument_list|(
name|user
argument_list|,
name|pwd
argument_list|)
condition|)
block|{
if|if
condition|(
name|ftp
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|ftp
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
name|exec
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|Type
operator|.
name|SQLEXCEPTION
argument_list|,
literal|"Cannot login to FTP server: "
operator|+
name|host
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|long
name|elapsed
init|=
name|timer
operator|.
name|stop
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|info
argument_list|(
name|ctx
argument_list|,
literal|"Connected to ftp: "
operator|+
name|host
operator|+
literal|" ("
operator|+
name|timer
operator|.
name|format
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exec
operator|.
name|signal
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ftp
return|;
block|}
comment|/**    * Check if the file already exists in the target file system    */
name|boolean
name|isTargetExists
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|target
init|=
name|getTargetFileName
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|local
condition|)
block|{
if|if
condition|(
operator|new
name|java
operator|.
name|io
operator|.
name|File
argument_list|(
name|target
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|new
name|File
argument_list|()
operator|.
name|exists
argument_list|(
name|target
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{           }
return|return
literal|false
return|;
block|}
comment|/**    * Get the target file relative path and name    */
name|String
name|getTargetFileName
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|int
name|len
init|=
name|dir
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
name|targetDir
operator|+
name|file
operator|.
name|substring
argument_list|(
name|len
argument_list|)
return|;
block|}
comment|/**    * Initialize COPY FROM FTP command options    */
name|void
name|initOptions
parameter_list|(
name|HplsqlParser
operator|.
name|Copy_from_ftp_stmtContext
name|ctx
parameter_list|)
block|{
name|host
operator|=
name|evalPop
argument_list|(
name|ctx
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|cnt
init|=
name|ctx
operator|.
name|copy_ftp_option
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|HplsqlParser
operator|.
name|Copy_ftp_optionContext
name|option
init|=
name|ctx
operator|.
name|copy_ftp_option
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|.
name|T_USER
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|user
operator|=
name|evalPop
argument_list|(
name|option
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|T_PWD
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pwd
operator|=
name|evalPop
argument_list|(
name|option
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|T_DIR
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|option
operator|.
name|file_name
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dir
operator|=
name|option
operator|.
name|file_name
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|evalPop
argument_list|(
name|option
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|T_FILES
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|filePattern
operator|=
name|evalPop
argument_list|(
name|option
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|T_NEW
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newOnly
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|T_SUBDIR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|subdir
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|T_SESSIONS
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sessions
operator|=
name|evalPop
argument_list|(
name|option
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|T_TO
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|option
operator|.
name|file_name
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|targetDir
operator|=
name|option
operator|.
name|file_name
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|targetDir
operator|=
name|evalPop
argument_list|(
name|option
operator|.
name|expr
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|.
name|T_LOCAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|local
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Evaluate the expression and pop value from the stack    */
name|Var
name|evalPop
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
name|exec
operator|.
name|visit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exec
operator|.
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|exec
operator|.
name|stackPop
argument_list|()
return|;
block|}
return|return
name|Var
operator|.
name|Empty
return|;
block|}
comment|/**    * Trace and information    */
specifier|public
name|void
name|trace
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|exec
operator|.
name|trace
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|ParserRuleContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|exec
operator|.
name|info
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

