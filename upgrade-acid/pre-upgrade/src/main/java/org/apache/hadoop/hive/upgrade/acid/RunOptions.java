begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|upgrade
operator|.
name|acid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_comment
comment|/**  * This class's instance holds the option values were passed by the user via the command line.  */
end_comment

begin_class
specifier|public
class|class
name|RunOptions
block|{
specifier|public
specifier|static
name|RunOptions
name|fromCommandLine
parameter_list|(
name|CommandLine
name|commandLine
parameter_list|)
block|{
name|String
name|tableTypeText
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"tableType"
argument_list|)
decl_stmt|;
return|return
operator|new
name|RunOptions
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"location"
argument_list|,
literal|"."
argument_list|)
argument_list|,
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"execute"
argument_list|)
argument_list|,
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"dbRegex"
argument_list|,
literal|".*"
argument_list|)
argument_list|,
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"tableRegex"
argument_list|,
literal|".*"
argument_list|)
argument_list|,
name|tableTypeText
operator|==
literal|null
condition|?
literal|null
else|:
name|TableType
operator|.
name|valueOf
argument_list|(
name|tableTypeText
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|String
name|outputDir
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|execute
decl_stmt|;
specifier|private
specifier|final
name|String
name|dbRegex
decl_stmt|;
specifier|private
specifier|final
name|String
name|tableRegex
decl_stmt|;
specifier|private
specifier|final
name|TableType
name|tableType
decl_stmt|;
specifier|public
name|RunOptions
parameter_list|(
name|String
name|outputDir
parameter_list|,
name|boolean
name|execute
parameter_list|,
name|String
name|dbRegex
parameter_list|,
name|String
name|tableRegex
parameter_list|,
name|TableType
name|tableType
parameter_list|)
block|{
name|this
operator|.
name|outputDir
operator|=
name|outputDir
expr_stmt|;
name|this
operator|.
name|execute
operator|=
name|execute
expr_stmt|;
name|this
operator|.
name|dbRegex
operator|=
name|dbRegex
expr_stmt|;
name|this
operator|.
name|tableRegex
operator|=
name|tableRegex
expr_stmt|;
name|this
operator|.
name|tableType
operator|=
name|tableType
expr_stmt|;
block|}
specifier|public
name|String
name|getOutputDir
parameter_list|()
block|{
return|return
name|outputDir
return|;
block|}
specifier|public
name|boolean
name|isExecute
parameter_list|()
block|{
return|return
name|execute
return|;
block|}
specifier|public
name|String
name|getDbRegex
parameter_list|()
block|{
return|return
name|dbRegex
return|;
block|}
specifier|public
name|String
name|getTableRegex
parameter_list|()
block|{
return|return
name|tableRegex
return|;
block|}
specifier|public
name|TableType
name|getTableType
parameter_list|()
block|{
return|return
name|tableType
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RunOptions{"
operator|+
literal|"outputDir='"
operator|+
name|outputDir
operator|+
literal|'\''
operator|+
literal|", execute="
operator|+
name|execute
operator|+
literal|", dbRegex='"
operator|+
name|dbRegex
operator|+
literal|'\''
operator|+
literal|", tableRegex='"
operator|+
name|tableRegex
operator|+
literal|'\''
operator|+
literal|", tableType="
operator|+
name|tableType
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

