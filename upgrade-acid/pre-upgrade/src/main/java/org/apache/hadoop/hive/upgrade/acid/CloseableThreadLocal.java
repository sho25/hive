begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|upgrade
operator|.
name|acid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class has similar functionality as java.lang.ThreadLocal.  * Plus it provides a close function to clean up unmanaged resources in all threads where the resource was initialized.  * @param<T> - type of resource  */
end_comment

begin_class
specifier|public
class|class
name|CloseableThreadLocal
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CloseableThreadLocal
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Thread
argument_list|,
name|T
argument_list|>
name|threadLocalMap
decl_stmt|;
specifier|private
specifier|final
name|Supplier
argument_list|<
name|T
argument_list|>
name|initialValue
decl_stmt|;
specifier|private
specifier|final
name|Consumer
argument_list|<
name|T
argument_list|>
name|closeFunction
decl_stmt|;
specifier|public
name|CloseableThreadLocal
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|initialValue
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|closeFunction
parameter_list|,
name|int
name|poolSize
parameter_list|)
block|{
name|this
operator|.
name|initialValue
operator|=
name|initialValue
expr_stmt|;
name|threadLocalMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|closeFunction
operator|=
name|closeFunction
expr_stmt|;
block|}
specifier|public
name|T
name|get
parameter_list|()
block|{
return|return
name|threadLocalMap
operator|.
name|computeIfAbsent
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|thread
lambda|->
name|initialValue
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|threadLocalMap
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|closeQuietly
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|closeQuietly
parameter_list|(
name|T
name|resource
parameter_list|)
block|{
try|try
block|{
name|closeFunction
operator|.
name|accept
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while closing resource."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

