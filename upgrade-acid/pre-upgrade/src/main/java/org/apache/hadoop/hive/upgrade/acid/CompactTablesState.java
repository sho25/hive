begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|upgrade
operator|.
name|acid
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Store result of database and table scan: compaction commands and meta info.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CompactTablesState
block|{
specifier|public
specifier|static
name|CompactTablesState
name|empty
parameter_list|()
block|{
return|return
operator|new
name|CompactTablesState
argument_list|(
name|emptyList
argument_list|()
argument_list|,
operator|new
name|CompactionMetaInfo
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CompactTablesState
name|compactions
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|compactionCommands
parameter_list|,
name|CompactionMetaInfo
name|compactionMetaInfo
parameter_list|)
block|{
return|return
operator|new
name|CompactTablesState
argument_list|(
name|compactionCommands
argument_list|,
name|compactionMetaInfo
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|compactionCommands
decl_stmt|;
specifier|private
specifier|final
name|CompactionMetaInfo
name|compactionMetaInfo
decl_stmt|;
specifier|private
name|CompactTablesState
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|compactionCommands
parameter_list|,
name|CompactionMetaInfo
name|compactionMetaInfo
parameter_list|)
block|{
name|this
operator|.
name|compactionCommands
operator|=
name|compactionCommands
expr_stmt|;
name|this
operator|.
name|compactionMetaInfo
operator|=
name|compactionMetaInfo
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCompactionCommands
parameter_list|()
block|{
return|return
name|compactionCommands
return|;
block|}
specifier|public
name|CompactionMetaInfo
name|getMetaInfo
parameter_list|()
block|{
return|return
name|compactionMetaInfo
return|;
block|}
specifier|public
name|CompactTablesState
name|merge
parameter_list|(
name|CompactTablesState
name|other
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|compactionCommands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|compactionCommands
argument_list|)
decl_stmt|;
name|compactionCommands
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|compactionCommands
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompactTablesState
argument_list|(
name|compactionCommands
argument_list|,
name|this
operator|.
name|compactionMetaInfo
operator|.
name|merge
argument_list|(
name|other
operator|.
name|compactionMetaInfo
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

