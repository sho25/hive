begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|upgrade
operator|.
name|acid
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|upgrade
operator|.
name|acid
operator|.
name|PreUpgradeTool
operator|.
name|createCommandLineOptions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
specifier|public
class|class
name|TestRunOptions
block|{
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expectedEx
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testTablePoolSizeIs5WhenSpecified
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-tablePoolSize"
block|,
literal|"5"
block|}
decl_stmt|;
name|RunOptions
name|runOptions
init|=
name|RunOptions
operator|.
name|fromCommandLine
argument_list|(
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|createCommandLineOptions
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|runOptions
operator|.
name|getTablePoolSize
argument_list|()
argument_list|,
name|is
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceptionIsThrownWhenTablePoolSizeIsNotANumber
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedEx
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedEx
operator|.
name|expectMessage
argument_list|(
literal|"Please specify a positive integer option value for tablePoolSize"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-tablePoolSize"
block|,
literal|"notANumber"
block|}
decl_stmt|;
name|RunOptions
operator|.
name|fromCommandLine
argument_list|(
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|createCommandLineOptions
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceptionIsThrownWhenTablePoolSizeIsLessThan1
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedEx
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedEx
operator|.
name|expectMessage
argument_list|(
literal|"Please specify a positive integer option value for tablePoolSize"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-tablePoolSize"
block|,
literal|"0"
block|}
decl_stmt|;
name|RunOptions
operator|.
name|fromCommandLine
argument_list|(
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|createCommandLineOptions
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceptionIsThrownWhenTablePoolSizeIsNotInteger
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedEx
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedEx
operator|.
name|expectMessage
argument_list|(
literal|"Please specify a positive integer option value for tablePoolSize"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-tablePoolSize"
block|,
literal|"0.5"
block|}
decl_stmt|;
name|RunOptions
operator|.
name|fromCommandLine
argument_list|(
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|createCommandLineOptions
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

