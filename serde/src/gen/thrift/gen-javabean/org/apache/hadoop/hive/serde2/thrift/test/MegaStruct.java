begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.9.2)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"rawtypes"
block|,
literal|"serial"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Generated
argument_list|(
name|value
operator|=
literal|"Autogenerated by Thrift Compiler (0.9.2)"
argument_list|,
name|date
operator|=
literal|"2015-8-17"
argument_list|)
specifier|public
class|class
name|MegaStruct
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|MegaStruct
argument_list|,
name|MegaStruct
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|MegaStruct
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"MegaStruct"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_BOOL_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_bool"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_BYTE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_byte"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BYTE
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_16BIT_INT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_16bit_int"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I16
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_32BIT_INT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_32bit_int"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_64BIT_INT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_64bit_int"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_DOUBLE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_double"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|DOUBLE
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_STRING_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_string"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_BINARY_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_binary"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_STRING_STRING_MAP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_string_string_map"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|9
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_STRING_ENUM_MAP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_string_enum_map"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_ENUM_STRING_MAP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_enum_string_map"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|11
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_ENUM_STRUCT_MAP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_enum_struct_map"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|12
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_ENUM_STRINGLIST_MAP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_enum_stringlist_map"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|13
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_ENUM_STRUCTLIST_MAP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_enum_structlist_map"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|14
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_STRINGLIST_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_stringlist"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|15
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_STRUCTLIST_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_structlist"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|16
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_ENUMLIST_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_enumlist"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|17
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_STRINGSET_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_stringset"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|SET
argument_list|,
operator|(
name|short
operator|)
literal|18
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_ENUMSET_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_enumset"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|SET
argument_list|,
operator|(
name|short
operator|)
literal|19
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MY_STRUCTSET_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"my_structset"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|SET
argument_list|,
operator|(
name|short
operator|)
literal|20
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|MegaStructStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|MegaStructTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|my_bool
decl_stmt|;
comment|// optional
specifier|private
name|byte
name|my_byte
decl_stmt|;
comment|// optional
specifier|private
name|short
name|my_16bit_int
decl_stmt|;
comment|// optional
specifier|private
name|int
name|my_32bit_int
decl_stmt|;
comment|// optional
specifier|private
name|long
name|my_64bit_int
decl_stmt|;
comment|// optional
specifier|private
name|double
name|my_double
decl_stmt|;
comment|// optional
specifier|private
name|String
name|my_string
decl_stmt|;
comment|// optional
specifier|private
name|ByteBuffer
name|my_binary
decl_stmt|;
comment|// optional
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|my_string_string_map
decl_stmt|;
comment|// optional
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MyEnum
argument_list|>
name|my_string_enum_map
decl_stmt|;
comment|// optional
specifier|private
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|String
argument_list|>
name|my_enum_string_map
decl_stmt|;
comment|// optional
specifier|private
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|MiniStruct
argument_list|>
name|my_enum_struct_map
decl_stmt|;
comment|// optional
specifier|private
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|my_enum_stringlist_map
decl_stmt|;
comment|// optional
specifier|private
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
argument_list|>
name|my_enum_structlist_map
decl_stmt|;
comment|// optional
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|my_stringlist
decl_stmt|;
comment|// optional
specifier|private
name|List
argument_list|<
name|MiniStruct
argument_list|>
name|my_structlist
decl_stmt|;
comment|// optional
specifier|private
name|List
argument_list|<
name|MyEnum
argument_list|>
name|my_enumlist
decl_stmt|;
comment|// optional
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|my_stringset
decl_stmt|;
comment|// optional
specifier|private
name|Set
argument_list|<
name|MyEnum
argument_list|>
name|my_enumset
decl_stmt|;
comment|// optional
specifier|private
name|Set
argument_list|<
name|MiniStruct
argument_list|>
name|my_structset
decl_stmt|;
comment|// optional
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|MY_BOOL
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"my_bool"
argument_list|)
block|,
name|MY_BYTE
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"my_byte"
argument_list|)
block|,
name|MY_16BIT_INT
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"my_16bit_int"
argument_list|)
block|,
name|MY_32BIT_INT
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"my_32bit_int"
argument_list|)
block|,
name|MY_64BIT_INT
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"my_64bit_int"
argument_list|)
block|,
name|MY_DOUBLE
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"my_double"
argument_list|)
block|,
name|MY_STRING
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"my_string"
argument_list|)
block|,
name|MY_BINARY
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|,
literal|"my_binary"
argument_list|)
block|,
name|MY_STRING_STRING_MAP
argument_list|(
operator|(
name|short
operator|)
literal|9
argument_list|,
literal|"my_string_string_map"
argument_list|)
block|,
name|MY_STRING_ENUM_MAP
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|,
literal|"my_string_enum_map"
argument_list|)
block|,
name|MY_ENUM_STRING_MAP
argument_list|(
operator|(
name|short
operator|)
literal|11
argument_list|,
literal|"my_enum_string_map"
argument_list|)
block|,
name|MY_ENUM_STRUCT_MAP
argument_list|(
operator|(
name|short
operator|)
literal|12
argument_list|,
literal|"my_enum_struct_map"
argument_list|)
block|,
name|MY_ENUM_STRINGLIST_MAP
argument_list|(
operator|(
name|short
operator|)
literal|13
argument_list|,
literal|"my_enum_stringlist_map"
argument_list|)
block|,
name|MY_ENUM_STRUCTLIST_MAP
argument_list|(
operator|(
name|short
operator|)
literal|14
argument_list|,
literal|"my_enum_structlist_map"
argument_list|)
block|,
name|MY_STRINGLIST
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|,
literal|"my_stringlist"
argument_list|)
block|,
name|MY_STRUCTLIST
argument_list|(
operator|(
name|short
operator|)
literal|16
argument_list|,
literal|"my_structlist"
argument_list|)
block|,
name|MY_ENUMLIST
argument_list|(
operator|(
name|short
operator|)
literal|17
argument_list|,
literal|"my_enumlist"
argument_list|)
block|,
name|MY_STRINGSET
argument_list|(
operator|(
name|short
operator|)
literal|18
argument_list|,
literal|"my_stringset"
argument_list|)
block|,
name|MY_ENUMSET
argument_list|(
operator|(
name|short
operator|)
literal|19
argument_list|,
literal|"my_enumset"
argument_list|)
block|,
name|MY_STRUCTSET
argument_list|(
operator|(
name|short
operator|)
literal|20
argument_list|,
literal|"my_structset"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// MY_BOOL
return|return
name|MY_BOOL
return|;
case|case
literal|2
case|:
comment|// MY_BYTE
return|return
name|MY_BYTE
return|;
case|case
literal|3
case|:
comment|// MY_16BIT_INT
return|return
name|MY_16BIT_INT
return|;
case|case
literal|4
case|:
comment|// MY_32BIT_INT
return|return
name|MY_32BIT_INT
return|;
case|case
literal|5
case|:
comment|// MY_64BIT_INT
return|return
name|MY_64BIT_INT
return|;
case|case
literal|6
case|:
comment|// MY_DOUBLE
return|return
name|MY_DOUBLE
return|;
case|case
literal|7
case|:
comment|// MY_STRING
return|return
name|MY_STRING
return|;
case|case
literal|8
case|:
comment|// MY_BINARY
return|return
name|MY_BINARY
return|;
case|case
literal|9
case|:
comment|// MY_STRING_STRING_MAP
return|return
name|MY_STRING_STRING_MAP
return|;
case|case
literal|10
case|:
comment|// MY_STRING_ENUM_MAP
return|return
name|MY_STRING_ENUM_MAP
return|;
case|case
literal|11
case|:
comment|// MY_ENUM_STRING_MAP
return|return
name|MY_ENUM_STRING_MAP
return|;
case|case
literal|12
case|:
comment|// MY_ENUM_STRUCT_MAP
return|return
name|MY_ENUM_STRUCT_MAP
return|;
case|case
literal|13
case|:
comment|// MY_ENUM_STRINGLIST_MAP
return|return
name|MY_ENUM_STRINGLIST_MAP
return|;
case|case
literal|14
case|:
comment|// MY_ENUM_STRUCTLIST_MAP
return|return
name|MY_ENUM_STRUCTLIST_MAP
return|;
case|case
literal|15
case|:
comment|// MY_STRINGLIST
return|return
name|MY_STRINGLIST
return|;
case|case
literal|16
case|:
comment|// MY_STRUCTLIST
return|return
name|MY_STRUCTLIST
return|;
case|case
literal|17
case|:
comment|// MY_ENUMLIST
return|return
name|MY_ENUMLIST
return|;
case|case
literal|18
case|:
comment|// MY_STRINGSET
return|return
name|MY_STRINGSET
return|;
case|case
literal|19
case|:
comment|// MY_ENUMSET
return|return
name|MY_ENUMSET
return|;
case|case
literal|20
case|:
comment|// MY_STRUCTSET
return|return
name|MY_STRUCTSET
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__MY_BOOL_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__MY_BYTE_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__MY_16BIT_INT_ISSET_ID
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__MY_32BIT_INT_ISSET_ID
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__MY_64BIT_INT_ISSET_ID
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__MY_DOUBLE_ISSET_ID
init|=
literal|5
decl_stmt|;
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|_Fields
name|optionals
index|[]
init|=
block|{
name|_Fields
operator|.
name|MY_BOOL
block|,
name|_Fields
operator|.
name|MY_BYTE
block|,
name|_Fields
operator|.
name|MY_16BIT_INT
block|,
name|_Fields
operator|.
name|MY_32BIT_INT
block|,
name|_Fields
operator|.
name|MY_64BIT_INT
block|,
name|_Fields
operator|.
name|MY_DOUBLE
block|,
name|_Fields
operator|.
name|MY_STRING
block|,
name|_Fields
operator|.
name|MY_BINARY
block|,
name|_Fields
operator|.
name|MY_STRING_STRING_MAP
block|,
name|_Fields
operator|.
name|MY_STRING_ENUM_MAP
block|,
name|_Fields
operator|.
name|MY_ENUM_STRING_MAP
block|,
name|_Fields
operator|.
name|MY_ENUM_STRUCT_MAP
block|,
name|_Fields
operator|.
name|MY_ENUM_STRINGLIST_MAP
block|,
name|_Fields
operator|.
name|MY_ENUM_STRUCTLIST_MAP
block|,
name|_Fields
operator|.
name|MY_STRINGLIST
block|,
name|_Fields
operator|.
name|MY_STRUCTLIST
block|,
name|_Fields
operator|.
name|MY_ENUMLIST
block|,
name|_Fields
operator|.
name|MY_STRINGSET
block|,
name|_Fields
operator|.
name|MY_ENUMSET
block|,
name|_Fields
operator|.
name|MY_STRUCTSET
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_BOOL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_bool"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_BYTE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_byte"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BYTE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_16BIT_INT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_16bit_int"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_32BIT_INT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_32bit_int"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_64BIT_INT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_64bit_int"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_DOUBLE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_double"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|DOUBLE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_STRING
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_string"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_BINARY
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_binary"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_STRING_STRING_MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_string_string_map"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_STRING_ENUM_MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_string_enum_map"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|MyEnum
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_ENUM_STRING_MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_enum_string_map"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|MyEnum
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_ENUM_STRUCT_MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_enum_struct_map"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|MyEnum
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|MiniStruct
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_ENUM_STRINGLIST_MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_enum_stringlist_map"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|MyEnum
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_ENUM_STRUCTLIST_MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_enum_structlist_map"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|MyEnum
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|MiniStruct
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_STRINGLIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_stringlist"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_STRUCTLIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_structlist"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|MiniStruct
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_ENUMLIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_enumlist"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|MyEnum
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_STRINGSET
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_stringset"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|SetMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|SET
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_ENUMSET
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_enumset"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|SetMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|SET
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|MyEnum
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MY_STRUCTSET
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"my_structset"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|SetMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|SET
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|MiniStruct
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|MegaStruct
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MegaStruct
parameter_list|()
block|{   }
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|MegaStruct
parameter_list|(
name|MegaStruct
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
name|this
operator|.
name|my_bool
operator|=
name|other
operator|.
name|my_bool
expr_stmt|;
name|this
operator|.
name|my_byte
operator|=
name|other
operator|.
name|my_byte
expr_stmt|;
name|this
operator|.
name|my_16bit_int
operator|=
name|other
operator|.
name|my_16bit_int
expr_stmt|;
name|this
operator|.
name|my_32bit_int
operator|=
name|other
operator|.
name|my_32bit_int
expr_stmt|;
name|this
operator|.
name|my_64bit_int
operator|=
name|other
operator|.
name|my_64bit_int
expr_stmt|;
name|this
operator|.
name|my_double
operator|=
name|other
operator|.
name|my_double
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetMy_string
argument_list|()
condition|)
block|{
name|this
operator|.
name|my_string
operator|=
name|other
operator|.
name|my_string
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_binary
argument_list|()
condition|)
block|{
name|this
operator|.
name|my_binary
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|other
operator|.
name|my_binary
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_string_string_map
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|__this__my_string_string_map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|other
operator|.
name|my_string_string_map
argument_list|)
decl_stmt|;
name|this
operator|.
name|my_string_string_map
operator|=
name|__this__my_string_string_map
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_string_enum_map
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MyEnum
argument_list|>
name|__this__my_string_enum_map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MyEnum
argument_list|>
argument_list|(
name|other
operator|.
name|my_string_enum_map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MyEnum
argument_list|>
name|other_element
range|:
name|other
operator|.
name|my_string_enum_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|MyEnum
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__my_string_enum_map_copy_key
init|=
name|other_element_key
decl_stmt|;
name|MyEnum
name|__this__my_string_enum_map_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__my_string_enum_map
operator|.
name|put
argument_list|(
name|__this__my_string_enum_map_copy_key
argument_list|,
name|__this__my_string_enum_map_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|my_string_enum_map
operator|=
name|__this__my_string_enum_map
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_enum_string_map
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|String
argument_list|>
name|__this__my_enum_string_map
init|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|String
argument_list|>
argument_list|(
name|other
operator|.
name|my_enum_string_map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MyEnum
argument_list|,
name|String
argument_list|>
name|other_element
range|:
name|other
operator|.
name|my_enum_string_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MyEnum
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|MyEnum
name|__this__my_enum_string_map_copy_key
init|=
name|other_element_key
decl_stmt|;
name|String
name|__this__my_enum_string_map_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__my_enum_string_map
operator|.
name|put
argument_list|(
name|__this__my_enum_string_map_copy_key
argument_list|,
name|__this__my_enum_string_map_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|my_enum_string_map
operator|=
name|__this__my_enum_string_map
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_enum_struct_map
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|MiniStruct
argument_list|>
name|__this__my_enum_struct_map
init|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|MiniStruct
argument_list|>
argument_list|(
name|other
operator|.
name|my_enum_struct_map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MyEnum
argument_list|,
name|MiniStruct
argument_list|>
name|other_element
range|:
name|other
operator|.
name|my_enum_struct_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MyEnum
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|MiniStruct
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|MyEnum
name|__this__my_enum_struct_map_copy_key
init|=
name|other_element_key
decl_stmt|;
name|MiniStruct
name|__this__my_enum_struct_map_copy_value
init|=
operator|new
name|MiniStruct
argument_list|(
name|other_element_value
argument_list|)
decl_stmt|;
name|__this__my_enum_struct_map
operator|.
name|put
argument_list|(
name|__this__my_enum_struct_map_copy_key
argument_list|,
name|__this__my_enum_struct_map_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|my_enum_struct_map
operator|=
name|__this__my_enum_struct_map
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_enum_stringlist_map
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|__this__my_enum_stringlist_map
init|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|other
operator|.
name|my_enum_stringlist_map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|other_element
range|:
name|other
operator|.
name|my_enum_stringlist_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MyEnum
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|MyEnum
name|__this__my_enum_stringlist_map_copy_key
init|=
name|other_element_key
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|__this__my_enum_stringlist_map_copy_value
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|other_element_value
argument_list|)
decl_stmt|;
name|__this__my_enum_stringlist_map
operator|.
name|put
argument_list|(
name|__this__my_enum_stringlist_map_copy_key
argument_list|,
name|__this__my_enum_stringlist_map_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|my_enum_stringlist_map
operator|=
name|__this__my_enum_stringlist_map
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_enum_structlist_map
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
argument_list|>
name|__this__my_enum_structlist_map
init|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
argument_list|>
argument_list|(
name|other
operator|.
name|my_enum_structlist_map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
argument_list|>
name|other_element
range|:
name|other
operator|.
name|my_enum_structlist_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MyEnum
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MiniStruct
argument_list|>
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|MyEnum
name|__this__my_enum_structlist_map_copy_key
init|=
name|other_element_key
decl_stmt|;
name|List
argument_list|<
name|MiniStruct
argument_list|>
name|__this__my_enum_structlist_map_copy_value
init|=
operator|new
name|ArrayList
argument_list|<
name|MiniStruct
argument_list|>
argument_list|(
name|other_element_value
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MiniStruct
name|other_element_value_element
range|:
name|other_element_value
control|)
block|{
name|__this__my_enum_structlist_map_copy_value
operator|.
name|add
argument_list|(
operator|new
name|MiniStruct
argument_list|(
name|other_element_value_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|__this__my_enum_structlist_map
operator|.
name|put
argument_list|(
name|__this__my_enum_structlist_map_copy_key
argument_list|,
name|__this__my_enum_structlist_map_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|my_enum_structlist_map
operator|=
name|__this__my_enum_structlist_map
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_stringlist
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__my_stringlist
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|other
operator|.
name|my_stringlist
argument_list|)
decl_stmt|;
name|this
operator|.
name|my_stringlist
operator|=
name|__this__my_stringlist
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_structlist
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|MiniStruct
argument_list|>
name|__this__my_structlist
init|=
operator|new
name|ArrayList
argument_list|<
name|MiniStruct
argument_list|>
argument_list|(
name|other
operator|.
name|my_structlist
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MiniStruct
name|other_element
range|:
name|other
operator|.
name|my_structlist
control|)
block|{
name|__this__my_structlist
operator|.
name|add
argument_list|(
operator|new
name|MiniStruct
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|my_structlist
operator|=
name|__this__my_structlist
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_enumlist
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|MyEnum
argument_list|>
name|__this__my_enumlist
init|=
operator|new
name|ArrayList
argument_list|<
name|MyEnum
argument_list|>
argument_list|(
name|other
operator|.
name|my_enumlist
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MyEnum
name|other_element
range|:
name|other
operator|.
name|my_enumlist
control|)
block|{
name|__this__my_enumlist
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|my_enumlist
operator|=
name|__this__my_enumlist
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_stringset
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|__this__my_stringset
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|other
operator|.
name|my_stringset
argument_list|)
decl_stmt|;
name|this
operator|.
name|my_stringset
operator|=
name|__this__my_stringset
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_enumset
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|MyEnum
argument_list|>
name|__this__my_enumset
init|=
operator|new
name|HashSet
argument_list|<
name|MyEnum
argument_list|>
argument_list|(
name|other
operator|.
name|my_enumset
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MyEnum
name|other_element
range|:
name|other
operator|.
name|my_enumset
control|)
block|{
name|__this__my_enumset
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|my_enumset
operator|=
name|__this__my_enumset
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMy_structset
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|MiniStruct
argument_list|>
name|__this__my_structset
init|=
operator|new
name|HashSet
argument_list|<
name|MiniStruct
argument_list|>
argument_list|(
name|other
operator|.
name|my_structset
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MiniStruct
name|other_element
range|:
name|other
operator|.
name|my_structset
control|)
block|{
name|__this__my_structset
operator|.
name|add
argument_list|(
operator|new
name|MiniStruct
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|my_structset
operator|=
name|__this__my_structset
expr_stmt|;
block|}
block|}
specifier|public
name|MegaStruct
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|MegaStruct
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setMy_boolIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|my_bool
operator|=
literal|false
expr_stmt|;
name|setMy_byteIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|my_byte
operator|=
literal|0
expr_stmt|;
name|setMy_16bit_intIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|my_16bit_int
operator|=
literal|0
expr_stmt|;
name|setMy_32bit_intIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|my_32bit_int
operator|=
literal|0
expr_stmt|;
name|setMy_64bit_intIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|my_64bit_int
operator|=
literal|0
expr_stmt|;
name|setMy_doubleIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|my_double
operator|=
literal|0.0
expr_stmt|;
name|this
operator|.
name|my_string
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_binary
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_string_string_map
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_string_enum_map
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_enum_string_map
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_enum_struct_map
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_enum_stringlist_map
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_enum_structlist_map
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_stringlist
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_structlist
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_enumlist
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_stringset
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_enumset
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|my_structset
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMy_bool
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_bool
return|;
block|}
specifier|public
name|void
name|setMy_bool
parameter_list|(
name|boolean
name|my_bool
parameter_list|)
block|{
name|this
operator|.
name|my_bool
operator|=
name|my_bool
expr_stmt|;
name|setMy_boolIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_bool
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_BOOL_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field my_bool is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_bool
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_BOOL_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMy_boolIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_BOOL_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|byte
name|getMy_byte
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_byte
return|;
block|}
specifier|public
name|void
name|setMy_byte
parameter_list|(
name|byte
name|my_byte
parameter_list|)
block|{
name|this
operator|.
name|my_byte
operator|=
name|my_byte
expr_stmt|;
name|setMy_byteIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_byte
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_BYTE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field my_byte is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_byte
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_BYTE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMy_byteIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_BYTE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|short
name|getMy_16bit_int
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_16bit_int
return|;
block|}
specifier|public
name|void
name|setMy_16bit_int
parameter_list|(
name|short
name|my_16bit_int
parameter_list|)
block|{
name|this
operator|.
name|my_16bit_int
operator|=
name|my_16bit_int
expr_stmt|;
name|setMy_16bit_intIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_16bit_int
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_16BIT_INT_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field my_16bit_int is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_16bit_int
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_16BIT_INT_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMy_16bit_intIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_16BIT_INT_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getMy_32bit_int
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_32bit_int
return|;
block|}
specifier|public
name|void
name|setMy_32bit_int
parameter_list|(
name|int
name|my_32bit_int
parameter_list|)
block|{
name|this
operator|.
name|my_32bit_int
operator|=
name|my_32bit_int
expr_stmt|;
name|setMy_32bit_intIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_32bit_int
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_32BIT_INT_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field my_32bit_int is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_32bit_int
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_32BIT_INT_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMy_32bit_intIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_32BIT_INT_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getMy_64bit_int
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_64bit_int
return|;
block|}
specifier|public
name|void
name|setMy_64bit_int
parameter_list|(
name|long
name|my_64bit_int
parameter_list|)
block|{
name|this
operator|.
name|my_64bit_int
operator|=
name|my_64bit_int
expr_stmt|;
name|setMy_64bit_intIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_64bit_int
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_64BIT_INT_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field my_64bit_int is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_64bit_int
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_64BIT_INT_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMy_64bit_intIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_64BIT_INT_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|double
name|getMy_double
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_double
return|;
block|}
specifier|public
name|void
name|setMy_double
parameter_list|(
name|double
name|my_double
parameter_list|)
block|{
name|this
operator|.
name|my_double
operator|=
name|my_double
expr_stmt|;
name|setMy_doubleIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_double
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_DOUBLE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field my_double is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_double
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_DOUBLE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMy_doubleIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MY_DOUBLE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getMy_string
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_string
return|;
block|}
specifier|public
name|void
name|setMy_string
parameter_list|(
name|String
name|my_string
parameter_list|)
block|{
name|this
operator|.
name|my_string
operator|=
name|my_string
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_string
parameter_list|()
block|{
name|this
operator|.
name|my_string
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_string is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_string
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_string
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_stringIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_string
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getMy_binary
parameter_list|()
block|{
name|setMy_binary
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|my_binary
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|my_binary
operator|==
literal|null
condition|?
literal|null
else|:
name|my_binary
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForMy_binary
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|my_binary
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMy_binary
parameter_list|(
name|byte
index|[]
name|my_binary
parameter_list|)
block|{
name|this
operator|.
name|my_binary
operator|=
name|my_binary
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|my_binary
argument_list|,
name|my_binary
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMy_binary
parameter_list|(
name|ByteBuffer
name|my_binary
parameter_list|)
block|{
name|this
operator|.
name|my_binary
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|my_binary
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_binary
parameter_list|()
block|{
name|this
operator|.
name|my_binary
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_binary is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_binary
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_binary
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_binaryIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_binary
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMy_string_string_mapSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_string_string_map
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|my_string_string_map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToMy_string_string_map
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|my_string_string_map
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|my_string_string_map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|my_string_string_map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMy_string_string_map
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_string_string_map
return|;
block|}
specifier|public
name|void
name|setMy_string_string_map
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|my_string_string_map
parameter_list|)
block|{
name|this
operator|.
name|my_string_string_map
operator|=
name|my_string_string_map
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_string_string_map
parameter_list|()
block|{
name|this
operator|.
name|my_string_string_map
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_string_string_map is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_string_string_map
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_string_string_map
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_string_string_mapIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_string_string_map
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMy_string_enum_mapSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_string_enum_map
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|my_string_enum_map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToMy_string_enum_map
parameter_list|(
name|String
name|key
parameter_list|,
name|MyEnum
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|my_string_enum_map
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|my_string_enum_map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MyEnum
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|my_string_enum_map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|MyEnum
argument_list|>
name|getMy_string_enum_map
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_string_enum_map
return|;
block|}
specifier|public
name|void
name|setMy_string_enum_map
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MyEnum
argument_list|>
name|my_string_enum_map
parameter_list|)
block|{
name|this
operator|.
name|my_string_enum_map
operator|=
name|my_string_enum_map
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_string_enum_map
parameter_list|()
block|{
name|this
operator|.
name|my_string_enum_map
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_string_enum_map is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_string_enum_map
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_string_enum_map
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_string_enum_mapIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_string_enum_map
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMy_enum_string_mapSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_enum_string_map
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|my_enum_string_map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToMy_enum_string_map
parameter_list|(
name|MyEnum
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|my_enum_string_map
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|my_enum_string_map
operator|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|my_enum_string_map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|String
argument_list|>
name|getMy_enum_string_map
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_enum_string_map
return|;
block|}
specifier|public
name|void
name|setMy_enum_string_map
parameter_list|(
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|String
argument_list|>
name|my_enum_string_map
parameter_list|)
block|{
name|this
operator|.
name|my_enum_string_map
operator|=
name|my_enum_string_map
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_enum_string_map
parameter_list|()
block|{
name|this
operator|.
name|my_enum_string_map
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_enum_string_map is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_enum_string_map
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_enum_string_map
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_enum_string_mapIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_enum_string_map
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMy_enum_struct_mapSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_enum_struct_map
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|my_enum_struct_map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToMy_enum_struct_map
parameter_list|(
name|MyEnum
name|key
parameter_list|,
name|MiniStruct
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|my_enum_struct_map
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|my_enum_struct_map
operator|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|MiniStruct
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|my_enum_struct_map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|MiniStruct
argument_list|>
name|getMy_enum_struct_map
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_enum_struct_map
return|;
block|}
specifier|public
name|void
name|setMy_enum_struct_map
parameter_list|(
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|MiniStruct
argument_list|>
name|my_enum_struct_map
parameter_list|)
block|{
name|this
operator|.
name|my_enum_struct_map
operator|=
name|my_enum_struct_map
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_enum_struct_map
parameter_list|()
block|{
name|this
operator|.
name|my_enum_struct_map
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_enum_struct_map is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_enum_struct_map
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_enum_struct_map
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_enum_struct_mapIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_enum_struct_map
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMy_enum_stringlist_mapSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_enum_stringlist_map
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|my_enum_stringlist_map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToMy_enum_stringlist_map
parameter_list|(
name|MyEnum
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|my_enum_stringlist_map
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|my_enum_stringlist_map
operator|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|my_enum_stringlist_map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getMy_enum_stringlist_map
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_enum_stringlist_map
return|;
block|}
specifier|public
name|void
name|setMy_enum_stringlist_map
parameter_list|(
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|my_enum_stringlist_map
parameter_list|)
block|{
name|this
operator|.
name|my_enum_stringlist_map
operator|=
name|my_enum_stringlist_map
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_enum_stringlist_map
parameter_list|()
block|{
name|this
operator|.
name|my_enum_stringlist_map
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_enum_stringlist_map is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_enum_stringlist_map
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_enum_stringlist_map
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_enum_stringlist_mapIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_enum_stringlist_map
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMy_enum_structlist_mapSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_enum_structlist_map
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|my_enum_structlist_map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToMy_enum_structlist_map
parameter_list|(
name|MyEnum
name|key
parameter_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|my_enum_structlist_map
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|my_enum_structlist_map
operator|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|my_enum_structlist_map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
argument_list|>
name|getMy_enum_structlist_map
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_enum_structlist_map
return|;
block|}
specifier|public
name|void
name|setMy_enum_structlist_map
parameter_list|(
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
argument_list|>
name|my_enum_structlist_map
parameter_list|)
block|{
name|this
operator|.
name|my_enum_structlist_map
operator|=
name|my_enum_structlist_map
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_enum_structlist_map
parameter_list|()
block|{
name|this
operator|.
name|my_enum_structlist_map
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_enum_structlist_map is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_enum_structlist_map
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_enum_structlist_map
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_enum_structlist_mapIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_enum_structlist_map
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMy_stringlistSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_stringlist
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|my_stringlist
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getMy_stringlistIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_stringlist
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|my_stringlist
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToMy_stringlist
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|my_stringlist
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|my_stringlist
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|my_stringlist
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMy_stringlist
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_stringlist
return|;
block|}
specifier|public
name|void
name|setMy_stringlist
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|my_stringlist
parameter_list|)
block|{
name|this
operator|.
name|my_stringlist
operator|=
name|my_stringlist
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_stringlist
parameter_list|()
block|{
name|this
operator|.
name|my_stringlist
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_stringlist is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_stringlist
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_stringlist
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_stringlistIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_stringlist
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMy_structlistSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_structlist
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|my_structlist
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|MiniStruct
argument_list|>
name|getMy_structlistIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_structlist
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|my_structlist
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToMy_structlist
parameter_list|(
name|MiniStruct
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|my_structlist
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|my_structlist
operator|=
operator|new
name|ArrayList
argument_list|<
name|MiniStruct
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|my_structlist
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|MiniStruct
argument_list|>
name|getMy_structlist
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_structlist
return|;
block|}
specifier|public
name|void
name|setMy_structlist
parameter_list|(
name|List
argument_list|<
name|MiniStruct
argument_list|>
name|my_structlist
parameter_list|)
block|{
name|this
operator|.
name|my_structlist
operator|=
name|my_structlist
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_structlist
parameter_list|()
block|{
name|this
operator|.
name|my_structlist
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_structlist is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_structlist
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_structlist
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_structlistIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_structlist
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMy_enumlistSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_enumlist
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|my_enumlist
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|MyEnum
argument_list|>
name|getMy_enumlistIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_enumlist
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|my_enumlist
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToMy_enumlist
parameter_list|(
name|MyEnum
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|my_enumlist
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|my_enumlist
operator|=
operator|new
name|ArrayList
argument_list|<
name|MyEnum
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|my_enumlist
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|MyEnum
argument_list|>
name|getMy_enumlist
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_enumlist
return|;
block|}
specifier|public
name|void
name|setMy_enumlist
parameter_list|(
name|List
argument_list|<
name|MyEnum
argument_list|>
name|my_enumlist
parameter_list|)
block|{
name|this
operator|.
name|my_enumlist
operator|=
name|my_enumlist
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_enumlist
parameter_list|()
block|{
name|this
operator|.
name|my_enumlist
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_enumlist is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_enumlist
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_enumlist
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_enumlistIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_enumlist
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMy_stringsetSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_stringset
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|my_stringset
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getMy_stringsetIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_stringset
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|my_stringset
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToMy_stringset
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|my_stringset
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|my_stringset
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|my_stringset
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getMy_stringset
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_stringset
return|;
block|}
specifier|public
name|void
name|setMy_stringset
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|my_stringset
parameter_list|)
block|{
name|this
operator|.
name|my_stringset
operator|=
name|my_stringset
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_stringset
parameter_list|()
block|{
name|this
operator|.
name|my_stringset
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_stringset is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_stringset
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_stringset
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_stringsetIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_stringset
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMy_enumsetSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_enumset
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|my_enumset
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|MyEnum
argument_list|>
name|getMy_enumsetIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_enumset
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|my_enumset
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToMy_enumset
parameter_list|(
name|MyEnum
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|my_enumset
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|my_enumset
operator|=
operator|new
name|HashSet
argument_list|<
name|MyEnum
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|my_enumset
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|MyEnum
argument_list|>
name|getMy_enumset
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_enumset
return|;
block|}
specifier|public
name|void
name|setMy_enumset
parameter_list|(
name|Set
argument_list|<
name|MyEnum
argument_list|>
name|my_enumset
parameter_list|)
block|{
name|this
operator|.
name|my_enumset
operator|=
name|my_enumset
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_enumset
parameter_list|()
block|{
name|this
operator|.
name|my_enumset
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_enumset is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_enumset
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_enumset
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_enumsetIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_enumset
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMy_structsetSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_structset
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|my_structset
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|MiniStruct
argument_list|>
name|getMy_structsetIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|my_structset
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|my_structset
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToMy_structset
parameter_list|(
name|MiniStruct
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|my_structset
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|my_structset
operator|=
operator|new
name|HashSet
argument_list|<
name|MiniStruct
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|my_structset
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|MiniStruct
argument_list|>
name|getMy_structset
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_structset
return|;
block|}
specifier|public
name|void
name|setMy_structset
parameter_list|(
name|Set
argument_list|<
name|MiniStruct
argument_list|>
name|my_structset
parameter_list|)
block|{
name|this
operator|.
name|my_structset
operator|=
name|my_structset
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMy_structset
parameter_list|()
block|{
name|this
operator|.
name|my_structset
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field my_structset is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMy_structset
parameter_list|()
block|{
return|return
name|this
operator|.
name|my_structset
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMy_structsetIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|my_structset
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|MY_BOOL
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_bool
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_bool
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_BYTE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_byte
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_byte
argument_list|(
operator|(
name|Byte
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_16BIT_INT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_16bit_int
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_16bit_int
argument_list|(
operator|(
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_32BIT_INT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_32bit_int
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_32bit_int
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_64BIT_INT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_64bit_int
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_64bit_int
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_DOUBLE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_double
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_double
argument_list|(
operator|(
name|Double
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_STRING
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_string
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_string
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_BINARY
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_binary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_binary
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_STRING_STRING_MAP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_string_string_map
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_string_string_map
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_STRING_ENUM_MAP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_string_enum_map
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_string_enum_map
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|MyEnum
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_ENUM_STRING_MAP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_enum_string_map
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_enum_string_map
argument_list|(
operator|(
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_ENUM_STRUCT_MAP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_enum_struct_map
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_enum_struct_map
argument_list|(
operator|(
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|MiniStruct
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_ENUM_STRINGLIST_MAP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_enum_stringlist_map
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_enum_stringlist_map
argument_list|(
operator|(
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_ENUM_STRUCTLIST_MAP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_enum_structlist_map
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_enum_structlist_map
argument_list|(
operator|(
name|Map
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_STRINGLIST
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_stringlist
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_stringlist
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_STRUCTLIST
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_structlist
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_structlist
argument_list|(
operator|(
name|List
argument_list|<
name|MiniStruct
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_ENUMLIST
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_enumlist
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_enumlist
argument_list|(
operator|(
name|List
argument_list|<
name|MyEnum
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_STRINGSET
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_stringset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_stringset
argument_list|(
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_ENUMSET
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_enumset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_enumset
argument_list|(
operator|(
name|Set
argument_list|<
name|MyEnum
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MY_STRUCTSET
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMy_structset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMy_structset
argument_list|(
operator|(
name|Set
argument_list|<
name|MiniStruct
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|MY_BOOL
case|:
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isMy_bool
argument_list|()
argument_list|)
return|;
case|case
name|MY_BYTE
case|:
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|getMy_byte
argument_list|()
argument_list|)
return|;
case|case
name|MY_16BIT_INT
case|:
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|getMy_16bit_int
argument_list|()
argument_list|)
return|;
case|case
name|MY_32BIT_INT
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getMy_32bit_int
argument_list|()
argument_list|)
return|;
case|case
name|MY_64BIT_INT
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getMy_64bit_int
argument_list|()
argument_list|)
return|;
case|case
name|MY_DOUBLE
case|:
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|getMy_double
argument_list|()
argument_list|)
return|;
case|case
name|MY_STRING
case|:
return|return
name|getMy_string
argument_list|()
return|;
case|case
name|MY_BINARY
case|:
return|return
name|getMy_binary
argument_list|()
return|;
case|case
name|MY_STRING_STRING_MAP
case|:
return|return
name|getMy_string_string_map
argument_list|()
return|;
case|case
name|MY_STRING_ENUM_MAP
case|:
return|return
name|getMy_string_enum_map
argument_list|()
return|;
case|case
name|MY_ENUM_STRING_MAP
case|:
return|return
name|getMy_enum_string_map
argument_list|()
return|;
case|case
name|MY_ENUM_STRUCT_MAP
case|:
return|return
name|getMy_enum_struct_map
argument_list|()
return|;
case|case
name|MY_ENUM_STRINGLIST_MAP
case|:
return|return
name|getMy_enum_stringlist_map
argument_list|()
return|;
case|case
name|MY_ENUM_STRUCTLIST_MAP
case|:
return|return
name|getMy_enum_structlist_map
argument_list|()
return|;
case|case
name|MY_STRINGLIST
case|:
return|return
name|getMy_stringlist
argument_list|()
return|;
case|case
name|MY_STRUCTLIST
case|:
return|return
name|getMy_structlist
argument_list|()
return|;
case|case
name|MY_ENUMLIST
case|:
return|return
name|getMy_enumlist
argument_list|()
return|;
case|case
name|MY_STRINGSET
case|:
return|return
name|getMy_stringset
argument_list|()
return|;
case|case
name|MY_ENUMSET
case|:
return|return
name|getMy_enumset
argument_list|()
return|;
case|case
name|MY_STRUCTSET
case|:
return|return
name|getMy_structset
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|MY_BOOL
case|:
return|return
name|isSetMy_bool
argument_list|()
return|;
case|case
name|MY_BYTE
case|:
return|return
name|isSetMy_byte
argument_list|()
return|;
case|case
name|MY_16BIT_INT
case|:
return|return
name|isSetMy_16bit_int
argument_list|()
return|;
case|case
name|MY_32BIT_INT
case|:
return|return
name|isSetMy_32bit_int
argument_list|()
return|;
case|case
name|MY_64BIT_INT
case|:
return|return
name|isSetMy_64bit_int
argument_list|()
return|;
case|case
name|MY_DOUBLE
case|:
return|return
name|isSetMy_double
argument_list|()
return|;
case|case
name|MY_STRING
case|:
return|return
name|isSetMy_string
argument_list|()
return|;
case|case
name|MY_BINARY
case|:
return|return
name|isSetMy_binary
argument_list|()
return|;
case|case
name|MY_STRING_STRING_MAP
case|:
return|return
name|isSetMy_string_string_map
argument_list|()
return|;
case|case
name|MY_STRING_ENUM_MAP
case|:
return|return
name|isSetMy_string_enum_map
argument_list|()
return|;
case|case
name|MY_ENUM_STRING_MAP
case|:
return|return
name|isSetMy_enum_string_map
argument_list|()
return|;
case|case
name|MY_ENUM_STRUCT_MAP
case|:
return|return
name|isSetMy_enum_struct_map
argument_list|()
return|;
case|case
name|MY_ENUM_STRINGLIST_MAP
case|:
return|return
name|isSetMy_enum_stringlist_map
argument_list|()
return|;
case|case
name|MY_ENUM_STRUCTLIST_MAP
case|:
return|return
name|isSetMy_enum_structlist_map
argument_list|()
return|;
case|case
name|MY_STRINGLIST
case|:
return|return
name|isSetMy_stringlist
argument_list|()
return|;
case|case
name|MY_STRUCTLIST
case|:
return|return
name|isSetMy_structlist
argument_list|()
return|;
case|case
name|MY_ENUMLIST
case|:
return|return
name|isSetMy_enumlist
argument_list|()
return|;
case|case
name|MY_STRINGSET
case|:
return|return
name|isSetMy_stringset
argument_list|()
return|;
case|case
name|MY_ENUMSET
case|:
return|return
name|isSetMy_enumset
argument_list|()
return|;
case|case
name|MY_STRUCTSET
case|:
return|return
name|isSetMy_structset
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|MegaStruct
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|MegaStruct
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|MegaStruct
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_my_bool
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_bool
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_bool
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_bool
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_bool
operator|||
name|that_present_my_bool
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_bool
operator|&&
name|that_present_my_bool
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|my_bool
operator|!=
name|that
operator|.
name|my_bool
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_byte
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_byte
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_byte
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_byte
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_byte
operator|||
name|that_present_my_byte
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_byte
operator|&&
name|that_present_my_byte
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|my_byte
operator|!=
name|that
operator|.
name|my_byte
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_16bit_int
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_16bit_int
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_16bit_int
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_16bit_int
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_16bit_int
operator|||
name|that_present_my_16bit_int
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_16bit_int
operator|&&
name|that_present_my_16bit_int
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|my_16bit_int
operator|!=
name|that
operator|.
name|my_16bit_int
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_32bit_int
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_32bit_int
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_32bit_int
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_32bit_int
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_32bit_int
operator|||
name|that_present_my_32bit_int
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_32bit_int
operator|&&
name|that_present_my_32bit_int
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|my_32bit_int
operator|!=
name|that
operator|.
name|my_32bit_int
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_64bit_int
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_64bit_int
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_64bit_int
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_64bit_int
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_64bit_int
operator|||
name|that_present_my_64bit_int
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_64bit_int
operator|&&
name|that_present_my_64bit_int
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|my_64bit_int
operator|!=
name|that
operator|.
name|my_64bit_int
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_double
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_double
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_double
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_double
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_double
operator|||
name|that_present_my_double
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_double
operator|&&
name|that_present_my_double
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|my_double
operator|!=
name|that
operator|.
name|my_double
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_string
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_string
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_string
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_string
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_string
operator|||
name|that_present_my_string
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_string
operator|&&
name|that_present_my_string
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_string
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_string
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_binary
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_binary
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_binary
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_binary
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_binary
operator|||
name|that_present_my_binary
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_binary
operator|&&
name|that_present_my_binary
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_binary
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_binary
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_string_string_map
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_string_string_map
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_string_string_map
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_string_string_map
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_string_string_map
operator|||
name|that_present_my_string_string_map
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_string_string_map
operator|&&
name|that_present_my_string_string_map
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_string_string_map
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_string_string_map
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_string_enum_map
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_string_enum_map
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_string_enum_map
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_string_enum_map
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_string_enum_map
operator|||
name|that_present_my_string_enum_map
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_string_enum_map
operator|&&
name|that_present_my_string_enum_map
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_string_enum_map
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_string_enum_map
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_enum_string_map
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_enum_string_map
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_enum_string_map
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_enum_string_map
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_enum_string_map
operator|||
name|that_present_my_enum_string_map
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_enum_string_map
operator|&&
name|that_present_my_enum_string_map
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_enum_string_map
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_enum_string_map
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_enum_struct_map
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_enum_struct_map
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_enum_struct_map
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_enum_struct_map
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_enum_struct_map
operator|||
name|that_present_my_enum_struct_map
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_enum_struct_map
operator|&&
name|that_present_my_enum_struct_map
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_enum_struct_map
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_enum_struct_map
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_enum_stringlist_map
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_enum_stringlist_map
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_enum_stringlist_map
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_enum_stringlist_map
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_enum_stringlist_map
operator|||
name|that_present_my_enum_stringlist_map
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_enum_stringlist_map
operator|&&
name|that_present_my_enum_stringlist_map
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_enum_stringlist_map
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_enum_stringlist_map
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_enum_structlist_map
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_enum_structlist_map
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_enum_structlist_map
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_enum_structlist_map
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_enum_structlist_map
operator|||
name|that_present_my_enum_structlist_map
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_enum_structlist_map
operator|&&
name|that_present_my_enum_structlist_map
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_enum_structlist_map
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_enum_structlist_map
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_stringlist
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_stringlist
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_stringlist
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_stringlist
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_stringlist
operator|||
name|that_present_my_stringlist
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_stringlist
operator|&&
name|that_present_my_stringlist
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_stringlist
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_stringlist
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_structlist
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_structlist
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_structlist
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_structlist
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_structlist
operator|||
name|that_present_my_structlist
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_structlist
operator|&&
name|that_present_my_structlist
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_structlist
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_structlist
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_enumlist
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_enumlist
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_enumlist
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_enumlist
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_enumlist
operator|||
name|that_present_my_enumlist
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_enumlist
operator|&&
name|that_present_my_enumlist
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_enumlist
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_enumlist
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_stringset
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_stringset
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_stringset
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_stringset
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_stringset
operator|||
name|that_present_my_stringset
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_stringset
operator|&&
name|that_present_my_stringset
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_stringset
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_stringset
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_enumset
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_enumset
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_enumset
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_enumset
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_enumset
operator|||
name|that_present_my_enumset
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_enumset
operator|&&
name|that_present_my_enumset
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_enumset
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_enumset
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_my_structset
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMy_structset
argument_list|()
decl_stmt|;
name|boolean
name|that_present_my_structset
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMy_structset
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_my_structset
operator|||
name|that_present_my_structset
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_my_structset
operator|&&
name|that_present_my_structset
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|my_structset
operator|.
name|equals
argument_list|(
name|that
operator|.
name|my_structset
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|present_my_bool
init|=
literal|true
operator|&&
operator|(
name|isSetMy_bool
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_bool
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_bool
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_bool
argument_list|)
expr_stmt|;
name|boolean
name|present_my_byte
init|=
literal|true
operator|&&
operator|(
name|isSetMy_byte
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_byte
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_byte
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_byte
argument_list|)
expr_stmt|;
name|boolean
name|present_my_16bit_int
init|=
literal|true
operator|&&
operator|(
name|isSetMy_16bit_int
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_16bit_int
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_16bit_int
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_16bit_int
argument_list|)
expr_stmt|;
name|boolean
name|present_my_32bit_int
init|=
literal|true
operator|&&
operator|(
name|isSetMy_32bit_int
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_32bit_int
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_32bit_int
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_32bit_int
argument_list|)
expr_stmt|;
name|boolean
name|present_my_64bit_int
init|=
literal|true
operator|&&
operator|(
name|isSetMy_64bit_int
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_64bit_int
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_64bit_int
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_64bit_int
argument_list|)
expr_stmt|;
name|boolean
name|present_my_double
init|=
literal|true
operator|&&
operator|(
name|isSetMy_double
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_double
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_double
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_double
argument_list|)
expr_stmt|;
name|boolean
name|present_my_string
init|=
literal|true
operator|&&
operator|(
name|isSetMy_string
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_string
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_string
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_string
argument_list|)
expr_stmt|;
name|boolean
name|present_my_binary
init|=
literal|true
operator|&&
operator|(
name|isSetMy_binary
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_binary
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_binary
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_binary
argument_list|)
expr_stmt|;
name|boolean
name|present_my_string_string_map
init|=
literal|true
operator|&&
operator|(
name|isSetMy_string_string_map
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_string_string_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_string_string_map
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_string_string_map
argument_list|)
expr_stmt|;
name|boolean
name|present_my_string_enum_map
init|=
literal|true
operator|&&
operator|(
name|isSetMy_string_enum_map
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_string_enum_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_string_enum_map
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_string_enum_map
argument_list|)
expr_stmt|;
name|boolean
name|present_my_enum_string_map
init|=
literal|true
operator|&&
operator|(
name|isSetMy_enum_string_map
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_enum_string_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_enum_string_map
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_enum_string_map
argument_list|)
expr_stmt|;
name|boolean
name|present_my_enum_struct_map
init|=
literal|true
operator|&&
operator|(
name|isSetMy_enum_struct_map
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_enum_struct_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_enum_struct_map
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_enum_struct_map
argument_list|)
expr_stmt|;
name|boolean
name|present_my_enum_stringlist_map
init|=
literal|true
operator|&&
operator|(
name|isSetMy_enum_stringlist_map
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_enum_stringlist_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_enum_stringlist_map
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_enum_stringlist_map
argument_list|)
expr_stmt|;
name|boolean
name|present_my_enum_structlist_map
init|=
literal|true
operator|&&
operator|(
name|isSetMy_enum_structlist_map
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_enum_structlist_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_enum_structlist_map
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_enum_structlist_map
argument_list|)
expr_stmt|;
name|boolean
name|present_my_stringlist
init|=
literal|true
operator|&&
operator|(
name|isSetMy_stringlist
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_stringlist
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_stringlist
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_stringlist
argument_list|)
expr_stmt|;
name|boolean
name|present_my_structlist
init|=
literal|true
operator|&&
operator|(
name|isSetMy_structlist
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_structlist
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_structlist
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_structlist
argument_list|)
expr_stmt|;
name|boolean
name|present_my_enumlist
init|=
literal|true
operator|&&
operator|(
name|isSetMy_enumlist
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_enumlist
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_enumlist
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_enumlist
argument_list|)
expr_stmt|;
name|boolean
name|present_my_stringset
init|=
literal|true
operator|&&
operator|(
name|isSetMy_stringset
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_stringset
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_stringset
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_stringset
argument_list|)
expr_stmt|;
name|boolean
name|present_my_enumset
init|=
literal|true
operator|&&
operator|(
name|isSetMy_enumset
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_enumset
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_enumset
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_enumset
argument_list|)
expr_stmt|;
name|boolean
name|present_my_structset
init|=
literal|true
operator|&&
operator|(
name|isSetMy_structset
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_my_structset
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_my_structset
condition|)
name|list
operator|.
name|add
argument_list|(
name|my_structset
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|MegaStruct
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_bool
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_bool
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_bool
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_bool
argument_list|,
name|other
operator|.
name|my_bool
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_byte
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_byte
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_byte
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_byte
argument_list|,
name|other
operator|.
name|my_byte
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_16bit_int
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_16bit_int
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_16bit_int
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_16bit_int
argument_list|,
name|other
operator|.
name|my_16bit_int
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_32bit_int
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_32bit_int
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_32bit_int
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_32bit_int
argument_list|,
name|other
operator|.
name|my_32bit_int
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_64bit_int
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_64bit_int
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_64bit_int
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_64bit_int
argument_list|,
name|other
operator|.
name|my_64bit_int
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_double
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_double
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_double
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_double
argument_list|,
name|other
operator|.
name|my_double
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_string
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_string
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_string
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_string
argument_list|,
name|other
operator|.
name|my_string
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_binary
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_binary
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_binary
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_binary
argument_list|,
name|other
operator|.
name|my_binary
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_string_string_map
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_string_string_map
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_string_string_map
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_string_string_map
argument_list|,
name|other
operator|.
name|my_string_string_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_string_enum_map
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_string_enum_map
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_string_enum_map
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_string_enum_map
argument_list|,
name|other
operator|.
name|my_string_enum_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_enum_string_map
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_enum_string_map
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_enum_string_map
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_enum_string_map
argument_list|,
name|other
operator|.
name|my_enum_string_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_enum_struct_map
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_enum_struct_map
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_enum_struct_map
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_enum_struct_map
argument_list|,
name|other
operator|.
name|my_enum_struct_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_enum_stringlist_map
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_enum_stringlist_map
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_enum_stringlist_map
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_enum_stringlist_map
argument_list|,
name|other
operator|.
name|my_enum_stringlist_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_enum_structlist_map
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_enum_structlist_map
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_enum_structlist_map
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_enum_structlist_map
argument_list|,
name|other
operator|.
name|my_enum_structlist_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_stringlist
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_stringlist
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_stringlist
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_stringlist
argument_list|,
name|other
operator|.
name|my_stringlist
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_structlist
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_structlist
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_structlist
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_structlist
argument_list|,
name|other
operator|.
name|my_structlist
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_enumlist
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_enumlist
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_enumlist
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_enumlist
argument_list|,
name|other
operator|.
name|my_enumlist
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_stringset
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_stringset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_stringset
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_stringset
argument_list|,
name|other
operator|.
name|my_stringset
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_enumset
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_enumset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_enumset
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_enumset
argument_list|,
name|other
operator|.
name|my_enumset
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMy_structset
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMy_structset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMy_structset
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|my_structset
argument_list|,
name|other
operator|.
name|my_structset
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"MegaStruct("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|isSetMy_bool
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"my_bool:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_bool
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_byte
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_byte:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_byte
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_16bit_int
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_16bit_int:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_16bit_int
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_32bit_int
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_32bit_int:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_32bit_int
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_64bit_int
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_64bit_int:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_64bit_int
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_double
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_double:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_double
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_string
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_string:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_string
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_string
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_binary
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_binary:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_binary
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|toString
argument_list|(
name|this
operator|.
name|my_binary
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_string_string_map
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_string_string_map:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_string_string_map
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_string_string_map
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_string_enum_map
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_string_enum_map:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_string_enum_map
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_string_enum_map
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_enum_string_map
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_enum_string_map:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_enum_string_map
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_enum_string_map
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_enum_struct_map
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_enum_struct_map:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_enum_struct_map
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_enum_struct_map
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_enum_stringlist_map
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_enum_stringlist_map:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_enum_stringlist_map
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_enum_stringlist_map
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_enum_structlist_map
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_enum_structlist_map:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_enum_structlist_map
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_enum_structlist_map
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_stringlist
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_stringlist:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_stringlist
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_stringlist
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_structlist
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_structlist:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_structlist
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_structlist
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_enumlist
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_enumlist:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_enumlist
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_enumlist
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_stringset
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_stringset:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_stringset
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_stringset
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_enumset
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_enumset:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_enumset
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_enumset
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMy_structset
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"my_structset:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|my_structset
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|my_structset
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MegaStructStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|MegaStructStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|MegaStructStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MegaStructStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|MegaStruct
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|MegaStruct
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// MY_BOOL
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|my_bool
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_boolIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// MY_BYTE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BYTE
condition|)
block|{
name|struct
operator|.
name|my_byte
operator|=
name|iprot
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_byteIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// MY_16BIT_INT
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I16
condition|)
block|{
name|struct
operator|.
name|my_16bit_int
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_16bit_intIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// MY_32BIT_INT
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|my_32bit_int
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_32bit_intIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// MY_64BIT_INT
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|my_64bit_int
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_64bit_intIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// MY_DOUBLE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|DOUBLE
condition|)
block|{
name|struct
operator|.
name|my_double
operator|=
name|iprot
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_doubleIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// MY_STRING
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|my_string
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_stringIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// MY_BINARY
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|my_binary
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_binaryIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// MY_STRING_STRING_MAP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map0
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|my_string_string_map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map0
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_key1
decl_stmt|;
name|String
name|_val2
decl_stmt|;
for|for
control|(
name|int
name|_i3
init|=
literal|0
init|;
name|_i3
operator|<
name|_map0
operator|.
name|size
condition|;
operator|++
name|_i3
control|)
block|{
name|_key1
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val2
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|my_string_string_map
operator|.
name|put
argument_list|(
name|_key1
argument_list|,
name|_val2
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMy_string_string_mapIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// MY_STRING_ENUM_MAP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map4
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|my_string_enum_map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MyEnum
argument_list|>
argument_list|(
literal|2
operator|*
name|_map4
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_key5
decl_stmt|;
name|MyEnum
name|_val6
decl_stmt|;
for|for
control|(
name|int
name|_i7
init|=
literal|0
init|;
name|_i7
operator|<
name|_map4
operator|.
name|size
condition|;
operator|++
name|_i7
control|)
block|{
name|_key5
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val6
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|my_string_enum_map
operator|.
name|put
argument_list|(
name|_key5
argument_list|,
name|_val6
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMy_string_enum_mapIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
comment|// MY_ENUM_STRING_MAP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map8
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|my_enum_string_map
operator|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map8
operator|.
name|size
argument_list|)
expr_stmt|;
name|MyEnum
name|_key9
decl_stmt|;
name|String
name|_val10
decl_stmt|;
for|for
control|(
name|int
name|_i11
init|=
literal|0
init|;
name|_i11
operator|<
name|_map8
operator|.
name|size
condition|;
operator|++
name|_i11
control|)
block|{
name|_key9
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|_val10
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|my_enum_string_map
operator|.
name|put
argument_list|(
name|_key9
argument_list|,
name|_val10
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMy_enum_string_mapIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
comment|// MY_ENUM_STRUCT_MAP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map12
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|my_enum_struct_map
operator|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|MiniStruct
argument_list|>
argument_list|(
literal|2
operator|*
name|_map12
operator|.
name|size
argument_list|)
expr_stmt|;
name|MyEnum
name|_key13
decl_stmt|;
name|MiniStruct
name|_val14
decl_stmt|;
for|for
control|(
name|int
name|_i15
init|=
literal|0
init|;
name|_i15
operator|<
name|_map12
operator|.
name|size
condition|;
operator|++
name|_i15
control|)
block|{
name|_key13
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|_val14
operator|=
operator|new
name|MiniStruct
argument_list|()
expr_stmt|;
name|_val14
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|my_enum_struct_map
operator|.
name|put
argument_list|(
name|_key13
argument_list|,
name|_val14
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMy_enum_struct_mapIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|13
case|:
comment|// MY_ENUM_STRINGLIST_MAP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map16
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|my_enum_stringlist_map
operator|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
literal|2
operator|*
name|_map16
operator|.
name|size
argument_list|)
expr_stmt|;
name|MyEnum
name|_key17
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|_val18
decl_stmt|;
for|for
control|(
name|int
name|_i19
init|=
literal|0
init|;
name|_i19
operator|<
name|_map16
operator|.
name|size
condition|;
operator|++
name|_i19
control|)
block|{
name|_key17
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list20
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|_val18
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list20
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_elem21
decl_stmt|;
for|for
control|(
name|int
name|_i22
init|=
literal|0
init|;
name|_i22
operator|<
name|_list20
operator|.
name|size
condition|;
operator|++
name|_i22
control|)
block|{
name|_elem21
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val18
operator|.
name|add
argument_list|(
name|_elem21
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|my_enum_stringlist_map
operator|.
name|put
argument_list|(
name|_key17
argument_list|,
name|_val18
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMy_enum_stringlist_mapIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|14
case|:
comment|// MY_ENUM_STRUCTLIST_MAP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map23
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|my_enum_structlist_map
operator|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
argument_list|>
argument_list|(
literal|2
operator|*
name|_map23
operator|.
name|size
argument_list|)
expr_stmt|;
name|MyEnum
name|_key24
decl_stmt|;
name|List
argument_list|<
name|MiniStruct
argument_list|>
name|_val25
decl_stmt|;
for|for
control|(
name|int
name|_i26
init|=
literal|0
init|;
name|_i26
operator|<
name|_map23
operator|.
name|size
condition|;
operator|++
name|_i26
control|)
block|{
name|_key24
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list27
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|_val25
operator|=
operator|new
name|ArrayList
argument_list|<
name|MiniStruct
argument_list|>
argument_list|(
name|_list27
operator|.
name|size
argument_list|)
expr_stmt|;
name|MiniStruct
name|_elem28
decl_stmt|;
for|for
control|(
name|int
name|_i29
init|=
literal|0
init|;
name|_i29
operator|<
name|_list27
operator|.
name|size
condition|;
operator|++
name|_i29
control|)
block|{
name|_elem28
operator|=
operator|new
name|MiniStruct
argument_list|()
expr_stmt|;
name|_elem28
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|_val25
operator|.
name|add
argument_list|(
name|_elem28
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|my_enum_structlist_map
operator|.
name|put
argument_list|(
name|_key24
argument_list|,
name|_val25
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMy_enum_structlist_mapIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|15
case|:
comment|// MY_STRINGLIST
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list30
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|my_stringlist
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list30
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_elem31
decl_stmt|;
for|for
control|(
name|int
name|_i32
init|=
literal|0
init|;
name|_i32
operator|<
name|_list30
operator|.
name|size
condition|;
operator|++
name|_i32
control|)
block|{
name|_elem31
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|my_stringlist
operator|.
name|add
argument_list|(
name|_elem31
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMy_stringlistIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|16
case|:
comment|// MY_STRUCTLIST
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list33
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|my_structlist
operator|=
operator|new
name|ArrayList
argument_list|<
name|MiniStruct
argument_list|>
argument_list|(
name|_list33
operator|.
name|size
argument_list|)
expr_stmt|;
name|MiniStruct
name|_elem34
decl_stmt|;
for|for
control|(
name|int
name|_i35
init|=
literal|0
init|;
name|_i35
operator|<
name|_list33
operator|.
name|size
condition|;
operator|++
name|_i35
control|)
block|{
name|_elem34
operator|=
operator|new
name|MiniStruct
argument_list|()
expr_stmt|;
name|_elem34
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|my_structlist
operator|.
name|add
argument_list|(
name|_elem34
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMy_structlistIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|17
case|:
comment|// MY_ENUMLIST
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list36
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|my_enumlist
operator|=
operator|new
name|ArrayList
argument_list|<
name|MyEnum
argument_list|>
argument_list|(
name|_list36
operator|.
name|size
argument_list|)
expr_stmt|;
name|MyEnum
name|_elem37
decl_stmt|;
for|for
control|(
name|int
name|_i38
init|=
literal|0
init|;
name|_i38
operator|<
name|_list36
operator|.
name|size
condition|;
operator|++
name|_i38
control|)
block|{
name|_elem37
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|my_enumlist
operator|.
name|add
argument_list|(
name|_elem37
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMy_enumlistIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|18
case|:
comment|// MY_STRINGSET
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|SET
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
name|_set39
init|=
name|iprot
operator|.
name|readSetBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|my_stringset
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_set39
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_elem40
decl_stmt|;
for|for
control|(
name|int
name|_i41
init|=
literal|0
init|;
name|_i41
operator|<
name|_set39
operator|.
name|size
condition|;
operator|++
name|_i41
control|)
block|{
name|_elem40
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|my_stringset
operator|.
name|add
argument_list|(
name|_elem40
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readSetEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMy_stringsetIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|19
case|:
comment|// MY_ENUMSET
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|SET
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
name|_set42
init|=
name|iprot
operator|.
name|readSetBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|my_enumset
operator|=
operator|new
name|HashSet
argument_list|<
name|MyEnum
argument_list|>
argument_list|(
literal|2
operator|*
name|_set42
operator|.
name|size
argument_list|)
expr_stmt|;
name|MyEnum
name|_elem43
decl_stmt|;
for|for
control|(
name|int
name|_i44
init|=
literal|0
init|;
name|_i44
operator|<
name|_set42
operator|.
name|size
condition|;
operator|++
name|_i44
control|)
block|{
name|_elem43
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|my_enumset
operator|.
name|add
argument_list|(
name|_elem43
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readSetEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMy_enumsetIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|20
case|:
comment|// MY_STRUCTSET
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|SET
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
name|_set45
init|=
name|iprot
operator|.
name|readSetBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|my_structset
operator|=
operator|new
name|HashSet
argument_list|<
name|MiniStruct
argument_list|>
argument_list|(
literal|2
operator|*
name|_set45
operator|.
name|size
argument_list|)
expr_stmt|;
name|MiniStruct
name|_elem46
decl_stmt|;
for|for
control|(
name|int
name|_i47
init|=
literal|0
init|;
name|_i47
operator|<
name|_set45
operator|.
name|size
condition|;
operator|++
name|_i47
control|)
block|{
name|_elem46
operator|=
operator|new
name|MiniStruct
argument_list|()
expr_stmt|;
name|_elem46
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|my_structset
operator|.
name|add
argument_list|(
name|_elem46
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readSetEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMy_structsetIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|MegaStruct
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetMy_bool
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_BOOL_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|my_bool
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_byte
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_BYTE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeByte
argument_list|(
name|struct
operator|.
name|my_byte
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_16bit_int
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_16BIT_INT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI16
argument_list|(
name|struct
operator|.
name|my_16bit_int
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_32bit_int
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_32BIT_INT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_32bit_int
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_64bit_int
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_64BIT_INT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|my_64bit_int
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_double
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_DOUBLE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeDouble
argument_list|(
name|struct
operator|.
name|my_double
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|my_string
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_string
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_STRING_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|my_string
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_binary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_binary
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_BINARY_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|my_binary
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_string_string_map
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_string_string_map
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_STRING_STRING_MAP_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|my_string_string_map
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|_iter48
range|:
name|struct
operator|.
name|my_string_string_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter48
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter48
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_string_enum_map
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_string_enum_map
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_STRING_ENUM_MAP_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|struct
operator|.
name|my_string_enum_map
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MyEnum
argument_list|>
name|_iter49
range|:
name|struct
operator|.
name|my_string_enum_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter49
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter49
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_enum_string_map
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_enum_string_map
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_ENUM_STRING_MAP_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|my_enum_string_map
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MyEnum
argument_list|,
name|String
argument_list|>
name|_iter50
range|:
name|struct
operator|.
name|my_enum_string_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter50
operator|.
name|getKey
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter50
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_enum_struct_map
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_enum_struct_map
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_ENUM_STRUCT_MAP_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|my_enum_struct_map
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MyEnum
argument_list|,
name|MiniStruct
argument_list|>
name|_iter51
range|:
name|struct
operator|.
name|my_enum_struct_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter51
operator|.
name|getKey
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|_iter51
operator|.
name|getValue
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_enum_stringlist_map
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_enum_stringlist_map
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_ENUM_STRINGLIST_MAP_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|struct
operator|.
name|my_enum_stringlist_map
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|_iter52
range|:
name|struct
operator|.
name|my_enum_stringlist_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter52
operator|.
name|getKey
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|_iter52
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter53
range|:
name|_iter52
operator|.
name|getValue
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter53
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_enum_structlist_map
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_enum_structlist_map
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_ENUM_STRUCTLIST_MAP_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|struct
operator|.
name|my_enum_structlist_map
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
argument_list|>
name|_iter54
range|:
name|struct
operator|.
name|my_enum_structlist_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter54
operator|.
name|getKey
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|_iter54
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MiniStruct
name|_iter55
range|:
name|_iter54
operator|.
name|getValue
argument_list|()
control|)
block|{
name|_iter55
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_stringlist
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_stringlist
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_STRINGLIST_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|my_stringlist
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter56
range|:
name|struct
operator|.
name|my_stringlist
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter56
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_structlist
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_structlist
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_STRUCTLIST_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|my_structlist
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MiniStruct
name|_iter57
range|:
name|struct
operator|.
name|my_structlist
control|)
block|{
name|_iter57
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_enumlist
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_enumlist
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_ENUMLIST_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|struct
operator|.
name|my_enumlist
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MyEnum
name|_iter58
range|:
name|struct
operator|.
name|my_enumlist
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter58
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_stringset
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_stringset
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_STRINGSET_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeSetBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|my_stringset
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter59
range|:
name|struct
operator|.
name|my_stringset
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter59
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeSetEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_enumset
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_enumset
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_ENUMSET_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeSetBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|struct
operator|.
name|my_enumset
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MyEnum
name|_iter60
range|:
name|struct
operator|.
name|my_enumset
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter60
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeSetEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|my_structset
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetMy_structset
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_STRUCTSET_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeSetBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|my_structset
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MiniStruct
name|_iter61
range|:
name|struct
operator|.
name|my_structset
control|)
block|{
name|_iter61
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeSetEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MegaStructTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|MegaStructTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|MegaStructTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MegaStructTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|MegaStruct
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|MegaStruct
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetMy_bool
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_byte
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_16bit_int
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_32bit_int
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_64bit_int
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_double
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_string
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_binary
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_string_string_map
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_string_enum_map
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_enum_string_map
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_enum_struct_map
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|11
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_enum_stringlist_map
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|12
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_enum_structlist_map
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|13
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_stringlist
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|14
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_structlist
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|15
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_enumlist
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|16
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_stringset
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|17
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_enumset
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|18
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_structset
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|19
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|20
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetMy_bool
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|my_bool
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_byte
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeByte
argument_list|(
name|struct
operator|.
name|my_byte
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_16bit_int
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI16
argument_list|(
name|struct
operator|.
name|my_16bit_int
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_32bit_int
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_32bit_int
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_64bit_int
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|my_64bit_int
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_double
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeDouble
argument_list|(
name|struct
operator|.
name|my_double
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_string
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|my_string
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_binary
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|my_binary
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_string_string_map
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_string_string_map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|_iter62
range|:
name|struct
operator|.
name|my_string_string_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter62
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter62
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_string_enum_map
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_string_enum_map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MyEnum
argument_list|>
name|_iter63
range|:
name|struct
operator|.
name|my_string_enum_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter63
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter63
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_enum_string_map
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_enum_string_map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MyEnum
argument_list|,
name|String
argument_list|>
name|_iter64
range|:
name|struct
operator|.
name|my_enum_string_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter64
operator|.
name|getKey
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter64
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_enum_struct_map
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_enum_struct_map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MyEnum
argument_list|,
name|MiniStruct
argument_list|>
name|_iter65
range|:
name|struct
operator|.
name|my_enum_struct_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter65
operator|.
name|getKey
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|_iter65
operator|.
name|getValue
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_enum_stringlist_map
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_enum_stringlist_map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|_iter66
range|:
name|struct
operator|.
name|my_enum_stringlist_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter66
operator|.
name|getKey
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter66
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter67
range|:
name|_iter66
operator|.
name|getValue
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter67
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_enum_structlist_map
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_enum_structlist_map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
argument_list|>
name|_iter68
range|:
name|struct
operator|.
name|my_enum_structlist_map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter68
operator|.
name|getKey
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter68
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MiniStruct
name|_iter69
range|:
name|_iter68
operator|.
name|getValue
argument_list|()
control|)
block|{
name|_iter69
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_stringlist
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_stringlist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter70
range|:
name|struct
operator|.
name|my_stringlist
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter70
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_structlist
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_structlist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MiniStruct
name|_iter71
range|:
name|struct
operator|.
name|my_structlist
control|)
block|{
name|_iter71
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_enumlist
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_enumlist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MyEnum
name|_iter72
range|:
name|struct
operator|.
name|my_enumlist
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter72
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_stringset
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_stringset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter73
range|:
name|struct
operator|.
name|my_stringset
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter73
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_enumset
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_enumset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MyEnum
name|_iter74
range|:
name|struct
operator|.
name|my_enumset
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter74
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMy_structset
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|my_structset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MiniStruct
name|_iter75
range|:
name|struct
operator|.
name|my_structset
control|)
block|{
name|_iter75
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|MegaStruct
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|my_bool
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_boolIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|my_byte
operator|=
name|iprot
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_byteIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|my_16bit_int
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_16bit_intIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|my_32bit_int
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_32bit_intIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|struct
operator|.
name|my_64bit_int
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_64bit_intIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|struct
operator|.
name|my_double
operator|=
name|iprot
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_doubleIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|6
argument_list|)
condition|)
block|{
name|struct
operator|.
name|my_string
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_stringIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|7
argument_list|)
condition|)
block|{
name|struct
operator|.
name|my_binary
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMy_binaryIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|8
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map76
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|my_string_string_map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map76
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_key77
decl_stmt|;
name|String
name|_val78
decl_stmt|;
for|for
control|(
name|int
name|_i79
init|=
literal|0
init|;
name|_i79
operator|<
name|_map76
operator|.
name|size
condition|;
operator|++
name|_i79
control|)
block|{
name|_key77
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val78
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|my_string_string_map
operator|.
name|put
argument_list|(
name|_key77
argument_list|,
name|_val78
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMy_string_string_mapIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|9
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map80
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|my_string_enum_map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MyEnum
argument_list|>
argument_list|(
literal|2
operator|*
name|_map80
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_key81
decl_stmt|;
name|MyEnum
name|_val82
decl_stmt|;
for|for
control|(
name|int
name|_i83
init|=
literal|0
init|;
name|_i83
operator|<
name|_map80
operator|.
name|size
condition|;
operator|++
name|_i83
control|)
block|{
name|_key81
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val82
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|my_string_enum_map
operator|.
name|put
argument_list|(
name|_key81
argument_list|,
name|_val82
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMy_string_enum_mapIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|10
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map84
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|my_enum_string_map
operator|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map84
operator|.
name|size
argument_list|)
expr_stmt|;
name|MyEnum
name|_key85
decl_stmt|;
name|String
name|_val86
decl_stmt|;
for|for
control|(
name|int
name|_i87
init|=
literal|0
init|;
name|_i87
operator|<
name|_map84
operator|.
name|size
condition|;
operator|++
name|_i87
control|)
block|{
name|_key85
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|_val86
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|my_enum_string_map
operator|.
name|put
argument_list|(
name|_key85
argument_list|,
name|_val86
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMy_enum_string_mapIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|11
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map88
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|my_enum_struct_map
operator|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|MiniStruct
argument_list|>
argument_list|(
literal|2
operator|*
name|_map88
operator|.
name|size
argument_list|)
expr_stmt|;
name|MyEnum
name|_key89
decl_stmt|;
name|MiniStruct
name|_val90
decl_stmt|;
for|for
control|(
name|int
name|_i91
init|=
literal|0
init|;
name|_i91
operator|<
name|_map88
operator|.
name|size
condition|;
operator|++
name|_i91
control|)
block|{
name|_key89
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|_val90
operator|=
operator|new
name|MiniStruct
argument_list|()
expr_stmt|;
name|_val90
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|my_enum_struct_map
operator|.
name|put
argument_list|(
name|_key89
argument_list|,
name|_val90
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMy_enum_struct_mapIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|12
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map92
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|my_enum_stringlist_map
operator|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
literal|2
operator|*
name|_map92
operator|.
name|size
argument_list|)
expr_stmt|;
name|MyEnum
name|_key93
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|_val94
decl_stmt|;
for|for
control|(
name|int
name|_i95
init|=
literal|0
init|;
name|_i95
operator|<
name|_map92
operator|.
name|size
condition|;
operator|++
name|_i95
control|)
block|{
name|_key93
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list96
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|_val94
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list96
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_elem97
decl_stmt|;
for|for
control|(
name|int
name|_i98
init|=
literal|0
init|;
name|_i98
operator|<
name|_list96
operator|.
name|size
condition|;
operator|++
name|_i98
control|)
block|{
name|_elem97
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val94
operator|.
name|add
argument_list|(
name|_elem97
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|my_enum_stringlist_map
operator|.
name|put
argument_list|(
name|_key93
argument_list|,
name|_val94
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMy_enum_stringlist_mapIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|13
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map99
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|my_enum_structlist_map
operator|=
operator|new
name|HashMap
argument_list|<
name|MyEnum
argument_list|,
name|List
argument_list|<
name|MiniStruct
argument_list|>
argument_list|>
argument_list|(
literal|2
operator|*
name|_map99
operator|.
name|size
argument_list|)
expr_stmt|;
name|MyEnum
name|_key100
decl_stmt|;
name|List
argument_list|<
name|MiniStruct
argument_list|>
name|_val101
decl_stmt|;
for|for
control|(
name|int
name|_i102
init|=
literal|0
init|;
name|_i102
operator|<
name|_map99
operator|.
name|size
condition|;
operator|++
name|_i102
control|)
block|{
name|_key100
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list103
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|_val101
operator|=
operator|new
name|ArrayList
argument_list|<
name|MiniStruct
argument_list|>
argument_list|(
name|_list103
operator|.
name|size
argument_list|)
expr_stmt|;
name|MiniStruct
name|_elem104
decl_stmt|;
for|for
control|(
name|int
name|_i105
init|=
literal|0
init|;
name|_i105
operator|<
name|_list103
operator|.
name|size
condition|;
operator|++
name|_i105
control|)
block|{
name|_elem104
operator|=
operator|new
name|MiniStruct
argument_list|()
expr_stmt|;
name|_elem104
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|_val101
operator|.
name|add
argument_list|(
name|_elem104
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|my_enum_structlist_map
operator|.
name|put
argument_list|(
name|_key100
argument_list|,
name|_val101
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMy_enum_structlist_mapIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|14
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list106
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|my_stringlist
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list106
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_elem107
decl_stmt|;
for|for
control|(
name|int
name|_i108
init|=
literal|0
init|;
name|_i108
operator|<
name|_list106
operator|.
name|size
condition|;
operator|++
name|_i108
control|)
block|{
name|_elem107
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|my_stringlist
operator|.
name|add
argument_list|(
name|_elem107
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMy_stringlistIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|15
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list109
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|my_structlist
operator|=
operator|new
name|ArrayList
argument_list|<
name|MiniStruct
argument_list|>
argument_list|(
name|_list109
operator|.
name|size
argument_list|)
expr_stmt|;
name|MiniStruct
name|_elem110
decl_stmt|;
for|for
control|(
name|int
name|_i111
init|=
literal|0
init|;
name|_i111
operator|<
name|_list109
operator|.
name|size
condition|;
operator|++
name|_i111
control|)
block|{
name|_elem110
operator|=
operator|new
name|MiniStruct
argument_list|()
expr_stmt|;
name|_elem110
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|my_structlist
operator|.
name|add
argument_list|(
name|_elem110
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMy_structlistIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|16
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list112
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|my_enumlist
operator|=
operator|new
name|ArrayList
argument_list|<
name|MyEnum
argument_list|>
argument_list|(
name|_list112
operator|.
name|size
argument_list|)
expr_stmt|;
name|MyEnum
name|_elem113
decl_stmt|;
for|for
control|(
name|int
name|_i114
init|=
literal|0
init|;
name|_i114
operator|<
name|_list112
operator|.
name|size
condition|;
operator|++
name|_i114
control|)
block|{
name|_elem113
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|my_enumlist
operator|.
name|add
argument_list|(
name|_elem113
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMy_enumlistIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|17
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
name|_set115
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|my_stringset
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_set115
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_elem116
decl_stmt|;
for|for
control|(
name|int
name|_i117
init|=
literal|0
init|;
name|_i117
operator|<
name|_set115
operator|.
name|size
condition|;
operator|++
name|_i117
control|)
block|{
name|_elem116
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|my_stringset
operator|.
name|add
argument_list|(
name|_elem116
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMy_stringsetIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|18
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
name|_set118
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|my_enumset
operator|=
operator|new
name|HashSet
argument_list|<
name|MyEnum
argument_list|>
argument_list|(
literal|2
operator|*
name|_set118
operator|.
name|size
argument_list|)
expr_stmt|;
name|MyEnum
name|_elem119
decl_stmt|;
for|for
control|(
name|int
name|_i120
init|=
literal|0
init|;
name|_i120
operator|<
name|_set118
operator|.
name|size
condition|;
operator|++
name|_i120
control|)
block|{
name|_elem119
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|MyEnum
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|my_enumset
operator|.
name|add
argument_list|(
name|_elem119
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMy_enumsetIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|19
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
name|_set121
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSet
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|my_structset
operator|=
operator|new
name|HashSet
argument_list|<
name|MiniStruct
argument_list|>
argument_list|(
literal|2
operator|*
name|_set121
operator|.
name|size
argument_list|)
expr_stmt|;
name|MiniStruct
name|_elem122
decl_stmt|;
for|for
control|(
name|int
name|_i123
init|=
literal|0
init|;
name|_i123
operator|<
name|_set121
operator|.
name|size
condition|;
operator|++
name|_i123
control|)
block|{
name|_elem122
operator|=
operator|new
name|MiniStruct
argument_list|()
expr_stmt|;
name|_elem122
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|my_structset
operator|.
name|add
argument_list|(
name|_elem122
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMy_structsetIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

