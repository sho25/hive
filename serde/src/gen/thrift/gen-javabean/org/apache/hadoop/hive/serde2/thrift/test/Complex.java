begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.7.0)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|Complex
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|Complex
argument_list|,
name|Complex
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"Complex"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|AINT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"aint"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|A_STRING_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"aString"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|LINT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"lint"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|L_STRING_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"lString"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|LINT_STRING_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"lintString"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|M_STRING_STRING_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"mStringString"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
name|int
name|aint
decl_stmt|;
comment|// required
specifier|private
name|String
name|aString
decl_stmt|;
comment|// required
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|lint
decl_stmt|;
comment|// required
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|lString
decl_stmt|;
comment|// required
specifier|private
name|List
argument_list|<
name|IntString
argument_list|>
name|lintString
decl_stmt|;
comment|// required
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mStringString
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|AINT
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"aint"
argument_list|)
block|,
name|A_STRING
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"aString"
argument_list|)
block|,
name|LINT
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"lint"
argument_list|)
block|,
name|L_STRING
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"lString"
argument_list|)
block|,
name|LINT_STRING
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"lintString"
argument_list|)
block|,
name|M_STRING_STRING
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"mStringString"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// AINT
return|return
name|AINT
return|;
case|case
literal|2
case|:
comment|// A_STRING
return|return
name|A_STRING
return|;
case|case
literal|3
case|:
comment|// LINT
return|return
name|LINT
return|;
case|case
literal|4
case|:
comment|// L_STRING
return|return
name|L_STRING
return|;
case|case
literal|5
case|:
comment|// LINT_STRING
return|return
name|LINT_STRING
return|;
case|case
literal|6
case|:
comment|// M_STRING_STRING
return|return
name|M_STRING_STRING
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__AINT_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|AINT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"aint"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|A_STRING
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"aString"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|LINT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"lint"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|L_STRING
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"lString"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|LINT_STRING
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"lintString"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|IntString
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|M_STRING_STRING
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"mStringString"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|Complex
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Complex
parameter_list|()
block|{   }
specifier|public
name|Complex
parameter_list|(
name|int
name|aint
parameter_list|,
name|String
name|aString
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|lint
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|lString
parameter_list|,
name|List
argument_list|<
name|IntString
argument_list|>
name|lintString
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mStringString
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|aint
operator|=
name|aint
expr_stmt|;
name|setAintIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|aString
operator|=
name|aString
expr_stmt|;
name|this
operator|.
name|lint
operator|=
name|lint
expr_stmt|;
name|this
operator|.
name|lString
operator|=
name|lString
expr_stmt|;
name|this
operator|.
name|lintString
operator|=
name|lintString
expr_stmt|;
name|this
operator|.
name|mStringString
operator|=
name|mStringString
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|Complex
parameter_list|(
name|Complex
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|aint
operator|=
name|other
operator|.
name|aint
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAString
argument_list|()
condition|)
block|{
name|this
operator|.
name|aString
operator|=
name|other
operator|.
name|aString
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetLint
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|__this__lint
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|other_element
range|:
name|other
operator|.
name|lint
control|)
block|{
name|__this__lint
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|lint
operator|=
name|__this__lint
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetLString
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__lString
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|lString
control|)
block|{
name|__this__lString
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|lString
operator|=
name|__this__lString
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetLintString
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|IntString
argument_list|>
name|__this__lintString
init|=
operator|new
name|ArrayList
argument_list|<
name|IntString
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IntString
name|other_element
range|:
name|other
operator|.
name|lintString
control|)
block|{
name|__this__lintString
operator|.
name|add
argument_list|(
operator|new
name|IntString
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|lintString
operator|=
name|__this__lintString
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMStringString
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|__this__mStringString
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|other_element
range|:
name|other
operator|.
name|mStringString
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__mStringString_copy_key
init|=
name|other_element_key
decl_stmt|;
name|String
name|__this__mStringString_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__mStringString
operator|.
name|put
argument_list|(
name|__this__mStringString_copy_key
argument_list|,
name|__this__mStringString_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mStringString
operator|=
name|__this__mStringString
expr_stmt|;
block|}
block|}
specifier|public
name|Complex
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|Complex
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setAintIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|aint
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|aString
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|lint
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|lString
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|lintString
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|mStringString
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getAint
parameter_list|()
block|{
return|return
name|this
operator|.
name|aint
return|;
block|}
specifier|public
name|void
name|setAint
parameter_list|(
name|int
name|aint
parameter_list|)
block|{
name|this
operator|.
name|aint
operator|=
name|aint
expr_stmt|;
name|setAintIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetAint
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__AINT_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field aint is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAint
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__AINT_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setAintIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__AINT_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getAString
parameter_list|()
block|{
return|return
name|this
operator|.
name|aString
return|;
block|}
specifier|public
name|void
name|setAString
parameter_list|(
name|String
name|aString
parameter_list|)
block|{
name|this
operator|.
name|aString
operator|=
name|aString
expr_stmt|;
block|}
specifier|public
name|void
name|unsetAString
parameter_list|()
block|{
name|this
operator|.
name|aString
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field aString is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAString
parameter_list|()
block|{
return|return
name|this
operator|.
name|aString
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAStringIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|aString
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getLintSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|lint
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|lint
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|getLintIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|lint
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|lint
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToLint
parameter_list|(
name|int
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|lint
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|lint
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|lint
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getLint
parameter_list|()
block|{
return|return
name|this
operator|.
name|lint
return|;
block|}
specifier|public
name|void
name|setLint
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|lint
parameter_list|)
block|{
name|this
operator|.
name|lint
operator|=
name|lint
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLint
parameter_list|()
block|{
name|this
operator|.
name|lint
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field lint is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetLint
parameter_list|()
block|{
return|return
name|this
operator|.
name|lint
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setLintIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|lint
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getLStringSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|lString
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|lString
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getLStringIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|lString
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|lString
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToLString
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|lString
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|lString
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|lString
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLString
parameter_list|()
block|{
return|return
name|this
operator|.
name|lString
return|;
block|}
specifier|public
name|void
name|setLString
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|lString
parameter_list|)
block|{
name|this
operator|.
name|lString
operator|=
name|lString
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLString
parameter_list|()
block|{
name|this
operator|.
name|lString
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field lString is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetLString
parameter_list|()
block|{
return|return
name|this
operator|.
name|lString
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setLStringIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|lString
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getLintStringSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|lintString
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|lintString
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|IntString
argument_list|>
name|getLintStringIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|lintString
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|lintString
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToLintString
parameter_list|(
name|IntString
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|lintString
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|lintString
operator|=
operator|new
name|ArrayList
argument_list|<
name|IntString
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|lintString
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|IntString
argument_list|>
name|getLintString
parameter_list|()
block|{
return|return
name|this
operator|.
name|lintString
return|;
block|}
specifier|public
name|void
name|setLintString
parameter_list|(
name|List
argument_list|<
name|IntString
argument_list|>
name|lintString
parameter_list|)
block|{
name|this
operator|.
name|lintString
operator|=
name|lintString
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLintString
parameter_list|()
block|{
name|this
operator|.
name|lintString
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field lintString is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetLintString
parameter_list|()
block|{
return|return
name|this
operator|.
name|lintString
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setLintStringIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|lintString
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMStringStringSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|mStringString
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|mStringString
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToMStringString
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|mStringString
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|mStringString
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mStringString
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMStringString
parameter_list|()
block|{
return|return
name|this
operator|.
name|mStringString
return|;
block|}
specifier|public
name|void
name|setMStringString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mStringString
parameter_list|)
block|{
name|this
operator|.
name|mStringString
operator|=
name|mStringString
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMStringString
parameter_list|()
block|{
name|this
operator|.
name|mStringString
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field mStringString is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMStringString
parameter_list|()
block|{
return|return
name|this
operator|.
name|mStringString
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMStringStringIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|mStringString
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|AINT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAint
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAint
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|A_STRING
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAString
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LINT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLint
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLint
argument_list|(
operator|(
name|List
argument_list|<
name|Integer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|L_STRING
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLString
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LINT_STRING
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLintString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLintString
argument_list|(
operator|(
name|List
argument_list|<
name|IntString
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|M_STRING_STRING
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMStringString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMStringString
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|AINT
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getAint
argument_list|()
argument_list|)
return|;
case|case
name|A_STRING
case|:
return|return
name|getAString
argument_list|()
return|;
case|case
name|LINT
case|:
return|return
name|getLint
argument_list|()
return|;
case|case
name|L_STRING
case|:
return|return
name|getLString
argument_list|()
return|;
case|case
name|LINT_STRING
case|:
return|return
name|getLintString
argument_list|()
return|;
case|case
name|M_STRING_STRING
case|:
return|return
name|getMStringString
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|AINT
case|:
return|return
name|isSetAint
argument_list|()
return|;
case|case
name|A_STRING
case|:
return|return
name|isSetAString
argument_list|()
return|;
case|case
name|LINT
case|:
return|return
name|isSetLint
argument_list|()
return|;
case|case
name|L_STRING
case|:
return|return
name|isSetLString
argument_list|()
return|;
case|case
name|LINT_STRING
case|:
return|return
name|isSetLintString
argument_list|()
return|;
case|case
name|M_STRING_STRING
case|:
return|return
name|isSetMStringString
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|Complex
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|Complex
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Complex
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_aint
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_aint
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_aint
operator|||
name|that_present_aint
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_aint
operator|&&
name|that_present_aint
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|aint
operator|!=
name|that
operator|.
name|aint
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_aString
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAString
argument_list|()
decl_stmt|;
name|boolean
name|that_present_aString
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAString
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_aString
operator|||
name|that_present_aString
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_aString
operator|&&
name|that_present_aString
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|aString
operator|.
name|equals
argument_list|(
name|that
operator|.
name|aString
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_lint
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetLint
argument_list|()
decl_stmt|;
name|boolean
name|that_present_lint
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetLint
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_lint
operator|||
name|that_present_lint
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_lint
operator|&&
name|that_present_lint
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|lint
operator|.
name|equals
argument_list|(
name|that
operator|.
name|lint
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_lString
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetLString
argument_list|()
decl_stmt|;
name|boolean
name|that_present_lString
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetLString
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_lString
operator|||
name|that_present_lString
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_lString
operator|&&
name|that_present_lString
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|lString
operator|.
name|equals
argument_list|(
name|that
operator|.
name|lString
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_lintString
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetLintString
argument_list|()
decl_stmt|;
name|boolean
name|that_present_lintString
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetLintString
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_lintString
operator|||
name|that_present_lintString
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_lintString
operator|&&
name|that_present_lintString
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|lintString
operator|.
name|equals
argument_list|(
name|that
operator|.
name|lintString
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_mStringString
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMStringString
argument_list|()
decl_stmt|;
name|boolean
name|that_present_mStringString
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMStringString
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_mStringString
operator|||
name|that_present_mStringString
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_mStringString
operator|&&
name|that_present_mStringString
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|mStringString
operator|.
name|equals
argument_list|(
name|that
operator|.
name|mStringString
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Complex
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|Complex
name|typedOther
init|=
operator|(
name|Complex
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAint
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAint
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAint
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|aint
argument_list|,
name|typedOther
operator|.
name|aint
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAString
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAString
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|aString
argument_list|,
name|typedOther
operator|.
name|aString
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetLint
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetLint
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetLint
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|lint
argument_list|,
name|typedOther
operator|.
name|lint
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetLString
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetLString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetLString
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|lString
argument_list|,
name|typedOther
operator|.
name|lString
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetLintString
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetLintString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetLintString
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|lintString
argument_list|,
name|typedOther
operator|.
name|lintString
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMStringString
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetMStringString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMStringString
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|mStringString
argument_list|,
name|typedOther
operator|.
name|mStringString
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// AINT
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|aint
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setAintIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// A_STRING
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|aString
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// LINT
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list0
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|lint
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|_list0
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i1
init|=
literal|0
init|;
name|_i1
operator|<
name|_list0
operator|.
name|size
condition|;
operator|++
name|_i1
control|)
block|{
name|int
name|_elem2
decl_stmt|;
comment|// required
name|_elem2
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|lint
operator|.
name|add
argument_list|(
name|_elem2
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// L_STRING
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list3
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|lString
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list3
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i4
init|=
literal|0
init|;
name|_i4
operator|<
name|_list3
operator|.
name|size
condition|;
operator|++
name|_i4
control|)
block|{
name|String
name|_elem5
decl_stmt|;
comment|// required
name|_elem5
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|lString
operator|.
name|add
argument_list|(
name|_elem5
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// LINT_STRING
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list6
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|lintString
operator|=
operator|new
name|ArrayList
argument_list|<
name|IntString
argument_list|>
argument_list|(
name|_list6
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i7
init|=
literal|0
init|;
name|_i7
operator|<
name|_list6
operator|.
name|size
condition|;
operator|++
name|_i7
control|)
block|{
name|IntString
name|_elem8
decl_stmt|;
comment|// required
name|_elem8
operator|=
operator|new
name|IntString
argument_list|()
expr_stmt|;
name|_elem8
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|lintString
operator|.
name|add
argument_list|(
name|_elem8
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// M_STRING_STRING
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map9
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|mStringString
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map9
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i10
init|=
literal|0
init|;
name|_i10
operator|<
name|_map9
operator|.
name|size
condition|;
operator|++
name|_i10
control|)
block|{
name|String
name|_key11
decl_stmt|;
comment|// required
name|String
name|_val12
decl_stmt|;
comment|// required
name|_key11
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val12
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|mStringString
operator|.
name|put
argument_list|(
name|_key11
argument_list|,
name|_val12
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|AINT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|aint
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|aString
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|A_STRING_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|aString
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|lint
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LINT_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
name|this
operator|.
name|lint
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_iter13
range|:
name|this
operator|.
name|lint
control|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter13
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|lString
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|L_STRING_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|lString
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter14
range|:
name|this
operator|.
name|lString
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter14
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|lintString
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LINT_STRING_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|lintString
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|IntString
name|_iter15
range|:
name|this
operator|.
name|lintString
control|)
block|{
name|_iter15
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|mStringString
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|M_STRING_STRING_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|mStringString
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|_iter16
range|:
name|this
operator|.
name|mStringString
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter16
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter16
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Complex("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"aint:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|aint
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"aString:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|aString
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|aString
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"lint:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|lint
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|lint
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"lString:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|lString
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|lString
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"lintString:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|lintString
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|lintString
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"mStringString:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mStringString
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|mStringString
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

