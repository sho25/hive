begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|RandomAccessOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
operator|.
name|VInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * DateWritable  * Writable equivalent of java.sql.Date.  *  * Dates are of the format  *    YYYY-MM-DD  *  */
end_comment

begin_class
specifier|public
class|class
name|DateWritable
implements|implements
name|WritableComparable
argument_list|<
name|DateWritable
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DateWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MILLIS_PER_DAY
init|=
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Local time zone.
comment|// Java TimeZone has no mention of thread safety. Use thread local instance to be safe.
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|TimeZone
argument_list|>
name|LOCAL_TIMEZONE
init|=
operator|new
name|ThreadLocal
argument_list|<
name|TimeZone
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TimeZone
name|initialValue
parameter_list|()
block|{
return|return
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTimeZone
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|// Internal representation is an integer representing day offset from our epoch value 1970-01-01
specifier|private
name|int
name|daysSinceEpoch
init|=
literal|0
decl_stmt|;
comment|/* Constructors */
specifier|public
name|DateWritable
parameter_list|()
block|{   }
specifier|public
name|DateWritable
parameter_list|(
name|DateWritable
name|d
parameter_list|)
block|{
name|set
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DateWritable
parameter_list|(
name|Date
name|d
parameter_list|)
block|{
name|set
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DateWritable
parameter_list|(
name|int
name|d
parameter_list|)
block|{
name|set
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the DateWritable based on the days since epoch date.    * @param d integer value representing days since epoch date    */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|d
parameter_list|)
block|{
name|daysSinceEpoch
operator|=
name|d
expr_stmt|;
block|}
comment|/**    * Set the DateWritable based on the year/month/day of the date in the local timezone.    * @param d Date value    */
specifier|public
name|void
name|set
parameter_list|(
name|Date
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|daysSinceEpoch
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|set
argument_list|(
name|dateToDays
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|DateWritable
name|d
parameter_list|)
block|{
name|set
argument_list|(
name|d
operator|.
name|daysSinceEpoch
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @return Date value corresponding to the date in the local time zone    */
specifier|public
name|Date
name|get
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|(
name|daysToMillis
argument_list|(
name|daysSinceEpoch
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getDays
parameter_list|()
block|{
return|return
name|daysSinceEpoch
return|;
block|}
comment|/**    *    * @return time in seconds corresponding to this DateWritable    */
specifier|public
name|long
name|getTimeInSeconds
parameter_list|()
block|{
return|return
name|get
argument_list|()
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
return|;
block|}
specifier|public
specifier|static
name|Date
name|timeToDate
parameter_list|(
name|long
name|l
parameter_list|)
block|{
return|return
operator|new
name|Date
argument_list|(
name|l
operator|*
literal|1000
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|daysToMillis
parameter_list|(
name|int
name|d
parameter_list|)
block|{
comment|// Convert from day offset to ms in UTC, then apply local timezone offset.
name|long
name|millisUtc
init|=
name|d
operator|*
name|MILLIS_PER_DAY
decl_stmt|;
name|long
name|tmp
init|=
name|millisUtc
operator|-
name|LOCAL_TIMEZONE
operator|.
name|get
argument_list|()
operator|.
name|getOffset
argument_list|(
name|millisUtc
argument_list|)
decl_stmt|;
comment|// Between millisUtc and tmp, the time zone offset may have changed due to DST.
comment|// Look up the offset again.
return|return
name|millisUtc
operator|-
name|LOCAL_TIMEZONE
operator|.
name|get
argument_list|()
operator|.
name|getOffset
argument_list|(
name|tmp
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|millisToDays
parameter_list|(
name|long
name|millisLocal
parameter_list|)
block|{
name|long
name|millisUtc
init|=
name|millisLocal
operator|+
name|LOCAL_TIMEZONE
operator|.
name|get
argument_list|()
operator|.
name|getOffset
argument_list|(
name|millisLocal
argument_list|)
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|millisUtc
operator|/
name|MILLIS_PER_DAY
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|dateToDays
parameter_list|(
name|Date
name|d
parameter_list|)
block|{
comment|// convert to equivalent time in UTC, then get day offset
name|long
name|millisLocal
init|=
name|d
operator|.
name|getTime
argument_list|()
decl_stmt|;
return|return
name|millisToDays
argument_list|(
name|millisLocal
argument_list|)
return|;
block|}
specifier|public
name|void
name|setFromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|VInt
name|vInt
parameter_list|)
block|{
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|vInt
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|length
operator|==
name|vInt
operator|.
name|length
operator|)
assert|;
name|set
argument_list|(
name|vInt
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeToByteStream
parameter_list|(
name|RandomAccessOutput
name|byteStream
parameter_list|)
block|{
name|LazyBinaryUtils
operator|.
name|writeVInt
argument_list|(
name|byteStream
argument_list|,
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|daysSinceEpoch
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|daysSinceEpoch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|DateWritable
name|d
parameter_list|)
block|{
return|return
name|daysSinceEpoch
operator|-
name|d
operator|.
name|daysSinceEpoch
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|DateWritable
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
operator|(
name|DateWritable
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|get
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|daysSinceEpoch
return|;
block|}
block|}
end_class

end_unit

