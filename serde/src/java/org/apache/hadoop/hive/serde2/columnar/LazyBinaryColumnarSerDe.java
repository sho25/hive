begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
operator|.
name|SerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * LazyBinaryColumnarSerDe. This serde combines elements of columnar serde and lazybinary serde  * to produce a serde which serializes columns into a BytesRefArrayWritable in a compact binary  * format and which is deserialized in a lazy, i.e. on-demand fashion.  *   */
end_comment

begin_class
specifier|public
class|class
name|LazyBinaryColumnarSerDe
extends|extends
name|ColumnarSerDeBase
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"["
operator|+
name|columnNames
operator|+
literal|":"
operator|+
name|columnTypes
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
name|SerDeParameters
name|serdeParams
init|=
operator|new
name|SerDeParameters
argument_list|()
decl_stmt|;
name|LazyUtils
operator|.
name|extractColumnInfo
argument_list|(
name|tbl
argument_list|,
name|serdeParams
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|columnNames
operator|=
name|serdeParams
operator|.
name|getColumnNames
argument_list|()
expr_stmt|;
name|columnTypes
operator|=
name|serdeParams
operator|.
name|getColumnTypes
argument_list|()
expr_stmt|;
name|cachedObjectInspector
operator|=
name|LazyBinaryFactory
operator|.
name|createColumnarStructInspector
argument_list|(
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|notSkipIDs
init|=
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|cachedLazyStruct
operator|=
operator|new
name|LazyBinaryColumnarStruct
argument_list|(
name|cachedObjectInspector
argument_list|,
name|notSkipIDs
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|columnTypes
operator|.
name|size
argument_list|()
decl_stmt|;
name|super
operator|.
name|initialize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|final
name|byte
index|[]
name|INVALID_UTF__SINGLE_BYTE
init|=
block|{
operator|(
name|byte
operator|)
name|Integer
operator|.
name|parseInt
argument_list|(
literal|"10111111"
argument_list|,
literal|2
argument_list|)
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|objInspector
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" can only serialize struct types, but we got: "
operator|+
name|objInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|soi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|boolean
name|warnedOnceNullMapKey
init|=
literal|false
decl_stmt|;
name|serializeStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serializedSize
operator|=
literal|0
expr_stmt|;
name|int
name|streamOffset
init|=
literal|0
decl_stmt|;
comment|// Serialize each field
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Get the field objectInspector and the field object.
name|ObjectInspector
name|foi
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|Object
name|f
init|=
operator|(
name|list
operator|==
literal|null
condition|?
literal|null
else|:
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
comment|//empty strings are marked by an invalid utf single byte sequence. A valid utf stream cannot
comment|//produce this sequence
if|if
condition|(
operator|(
name|f
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|foi
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|foi
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
operator|.
name|STRING
argument_list|)
operator|&&
operator|(
operator|(
name|StringObjectInspector
operator|)
name|foi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|f
argument_list|)
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|serializeStream
operator|.
name|write
argument_list|(
name|INVALID_UTF__SINGLE_BYTE
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LazyBinarySerDe
operator|.
name|serialize
argument_list|(
name|serializeStream
argument_list|,
name|f
argument_list|,
name|foi
argument_list|,
literal|true
argument_list|,
name|warnedOnceNullMapKey
argument_list|)
expr_stmt|;
block|}
name|field
index|[
name|i
index|]
operator|.
name|set
argument_list|(
name|serializeStream
operator|.
name|getData
argument_list|()
argument_list|,
name|streamOffset
argument_list|,
name|serializeStream
operator|.
name|getCount
argument_list|()
operator|-
name|streamOffset
argument_list|)
expr_stmt|;
name|streamOffset
operator|=
name|serializeStream
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
name|serializedSize
operator|=
name|serializeStream
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|lastOperationSerialize
operator|=
literal|true
expr_stmt|;
name|lastOperationDeserialize
operator|=
literal|false
expr_stmt|;
return|return
name|serializeCache
return|;
block|}
block|}
end_class

end_unit

