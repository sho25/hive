begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * ColumnarStruct is different from LazyStruct in that ColumnarStruct's field  * Object get parsed at its initialize time when call  * {@link #init(BytesRefArrayWritable cols)}, while LazyStruct parse fields in a  * lazy way.  *  */
end_comment

begin_class
specifier|public
class|class
name|ColumnarStruct
extends|extends
name|ColumnarStructBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ColumnarStruct
operator|.
name|class
argument_list|)
decl_stmt|;
name|Text
name|nullSequence
decl_stmt|;
name|int
name|lengthNullSequence
decl_stmt|;
comment|/**    * Construct a ColumnarStruct object with the TypeInfo. It creates the first    * level object at the first place    *    * @param oi    *          the ObjectInspector representing the type of this LazyStruct.    * @param notSkippedColumnIDs    *          the column ids that should not be skipped    */
specifier|public
name|ColumnarStruct
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|notSkippedColumnIDs
parameter_list|,
name|Text
name|nullSequence
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|,
name|notSkippedColumnIDs
argument_list|)
expr_stmt|;
if|if
condition|(
name|nullSequence
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|nullSequence
operator|=
name|nullSequence
expr_stmt|;
name|this
operator|.
name|lengthNullSequence
operator|=
name|nullSequence
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getLength
parameter_list|(
name|ObjectInspector
name|objectInspector
parameter_list|,
name|ByteArrayRef
name|cachedByteArrayRef
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|fieldLen
parameter_list|)
block|{
if|if
condition|(
name|fieldLen
operator|==
name|lengthNullSequence
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|cachedByteArrayRef
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|LazyUtils
operator|.
name|compare
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|fieldLen
argument_list|,
name|nullSequence
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|lengthNullSequence
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
name|fieldLen
return|;
block|}
annotation|@
name|Override
specifier|protected
name|LazyObjectBase
name|createLazyObjectBase
parameter_list|(
name|ObjectInspector
name|objectInspector
parameter_list|)
block|{
return|return
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|objectInspector
argument_list|)
return|;
block|}
block|}
end_class

end_unit

