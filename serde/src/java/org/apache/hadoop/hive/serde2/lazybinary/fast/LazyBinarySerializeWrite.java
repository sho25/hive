begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|SerializeWrite
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
operator|.
name|LIST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
operator|.
name|MAP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
operator|.
name|UNION
import|;
end_import

begin_comment
comment|/*  * Directly serialize, field-by-field, the LazyBinary format. *  * This is an alternative way to serialize than what is provided by LazyBinarySerDe.   */
end_comment

begin_class
specifier|public
class|class
name|LazyBinarySerializeWrite
implements|implements
name|SerializeWrite
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LazyBinarySerializeWrite
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Output
name|output
decl_stmt|;
specifier|private
name|int
name|rootFieldCount
decl_stmt|;
specifier|private
name|boolean
name|skipLengthPrefix
init|=
literal|false
decl_stmt|;
comment|// For thread safety, we allocate private writable objects for our use only.
specifier|private
name|TimestampWritableV2
name|timestampWritable
decl_stmt|;
specifier|private
name|HiveIntervalYearMonthWritable
name|hiveIntervalYearMonthWritable
decl_stmt|;
specifier|private
name|HiveIntervalDayTimeWritable
name|hiveIntervalDayTimeWritable
decl_stmt|;
specifier|private
name|HiveIntervalDayTime
name|hiveIntervalDayTime
decl_stmt|;
specifier|private
name|HiveDecimalWritable
name|hiveDecimalWritable
decl_stmt|;
specifier|private
name|byte
index|[]
name|vLongBytes
decl_stmt|;
specifier|private
name|long
index|[]
name|scratchLongs
decl_stmt|;
specifier|private
name|byte
index|[]
name|scratchBuffer
decl_stmt|;
specifier|private
name|Field
name|root
decl_stmt|;
specifier|private
name|Deque
argument_list|<
name|Field
argument_list|>
name|stack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|LazyBinarySerDe
operator|.
name|BooleanRef
name|warnedOnceNullMapKey
decl_stmt|;
specifier|private
specifier|static
class|class
name|Field
block|{
name|Category
name|type
decl_stmt|;
name|int
name|fieldCount
decl_stmt|;
name|int
name|fieldIndex
decl_stmt|;
name|int
name|byteSizeStart
decl_stmt|;
name|int
name|start
decl_stmt|;
name|long
name|nullOffset
decl_stmt|;
name|byte
name|nullByte
decl_stmt|;
name|Field
parameter_list|(
name|Category
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
specifier|public
name|LazyBinarySerializeWrite
parameter_list|(
name|int
name|fieldCount
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|vLongBytes
operator|=
operator|new
name|byte
index|[
name|LazyBinaryUtils
operator|.
name|VLONG_BYTES_LEN
index|]
expr_stmt|;
name|this
operator|.
name|rootFieldCount
operator|=
name|fieldCount
expr_stmt|;
name|resetWithoutOutput
argument_list|()
expr_stmt|;
block|}
comment|// Not public since we must have the field count and other information.
specifier|private
name|LazyBinarySerializeWrite
parameter_list|()
block|{   }
comment|/*    * Set the buffer that will receive the serialized data.  The output buffer will be reset.    */
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|Output
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resetWithoutOutput
argument_list|()
expr_stmt|;
block|}
comment|/*    * Set the buffer that will receive the serialized data.  The output buffer will NOT be reset.    */
annotation|@
name|Override
specifier|public
name|void
name|setAppend
parameter_list|(
name|Output
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|resetWithoutOutput
argument_list|()
expr_stmt|;
name|root
operator|.
name|nullOffset
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|/*    * Reset the previously supplied buffer that will receive the serialized data.    */
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resetWithoutOutput
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|resetWithoutOutput
parameter_list|()
block|{
name|root
operator|=
operator|new
name|Field
argument_list|(
name|STRUCT
argument_list|)
expr_stmt|;
name|root
operator|.
name|fieldCount
operator|=
name|rootFieldCount
expr_stmt|;
name|stack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|warnedOnceNullMapKey
operator|=
literal|null
expr_stmt|;
block|}
comment|/*    * Write a NULL field.    */
annotation|@
name|Override
specifier|public
name|void
name|writeNull
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Field
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|type
operator|==
name|STRUCT
condition|)
block|{
comment|// Every 8 fields we write a NULL byte.
if|if
condition|(
operator|(
name|current
operator|.
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|fieldIndex
operator|>
literal|0
condition|)
block|{
comment|// Write back previous 8 field's NULL byte.
name|output
operator|.
name|writeByte
argument_list|(
name|current
operator|.
name|nullOffset
argument_list|,
name|current
operator|.
name|nullByte
argument_list|)
expr_stmt|;
name|current
operator|.
name|nullByte
operator|=
literal|0
expr_stmt|;
name|current
operator|.
name|nullOffset
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|// Allocate next NULL byte.
name|output
operator|.
name|reserve
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// We DO NOT set a bit in the NULL byte when we are writing a NULL.
name|current
operator|.
name|fieldIndex
operator|++
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|fieldIndex
operator|==
name|current
operator|.
name|fieldCount
condition|)
block|{
comment|// Write back the final NULL byte before the last fields.
name|output
operator|.
name|writeByte
argument_list|(
name|current
operator|.
name|nullOffset
argument_list|,
name|current
operator|.
name|nullByte
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * BOOLEAN.    */
annotation|@
name|Override
specifier|public
name|void
name|writeBoolean
parameter_list|(
name|boolean
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
condition|?
literal|1
else|:
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * BYTE.    */
annotation|@
name|Override
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * SHORT.    */
annotation|@
name|Override
specifier|public
name|void
name|writeShort
parameter_list|(
name|short
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * INT.    */
annotation|@
name|Override
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
name|writeVInt
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * LONG.    */
annotation|@
name|Override
specifier|public
name|void
name|writeLong
parameter_list|(
name|long
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
name|writeVLong
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * FLOAT.    */
annotation|@
name|Override
specifier|public
name|void
name|writeFloat
parameter_list|(
name|float
name|vf
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
name|int
name|v
init|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|vf
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * DOUBLE.    */
annotation|@
name|Override
specifier|public
name|void
name|writeDouble
parameter_list|(
name|double
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
name|LazyBinaryUtils
operator|.
name|writeDouble
argument_list|(
name|output
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * STRING.    *    * Can be used to write CHAR and VARCHAR when the caller takes responsibility for    * truncation/padding issues.    */
annotation|@
name|Override
specifier|public
name|void
name|writeString
parameter_list|(
name|byte
index|[]
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
specifier|final
name|int
name|length
init|=
name|v
operator|.
name|length
decl_stmt|;
name|writeVInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|v
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeString
parameter_list|(
name|byte
index|[]
name|v
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
name|writeVInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|v
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * CHAR.    */
annotation|@
name|Override
specifier|public
name|void
name|writeHiveChar
parameter_list|(
name|HiveChar
name|hiveChar
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|string
init|=
name|hiveChar
operator|.
name|getStrippedValue
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|string
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|writeString
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/*    * VARCHAR.    */
annotation|@
name|Override
specifier|public
name|void
name|writeHiveVarchar
parameter_list|(
name|HiveVarchar
name|hiveVarchar
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|string
init|=
name|hiveVarchar
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|string
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|writeString
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/*    * BINARY.    */
annotation|@
name|Override
specifier|public
name|void
name|writeBinary
parameter_list|(
name|byte
index|[]
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|writeString
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeBinary
parameter_list|(
name|byte
index|[]
name|v
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|writeString
argument_list|(
name|v
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/*    * DATE.    */
annotation|@
name|Override
specifier|public
name|void
name|writeDate
parameter_list|(
name|Date
name|date
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
name|writeVInt
argument_list|(
name|DateWritableV2
operator|.
name|dateToDays
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|// We provide a faster way to write a date without a Date object.
annotation|@
name|Override
specifier|public
name|void
name|writeDate
parameter_list|(
name|int
name|dateAsDays
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
name|writeVInt
argument_list|(
name|dateAsDays
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * TIMESTAMP.    */
annotation|@
name|Override
specifier|public
name|void
name|writeTimestamp
parameter_list|(
name|Timestamp
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|timestampWritable
operator|==
literal|null
condition|)
block|{
name|timestampWritable
operator|=
operator|new
name|TimestampWritableV2
argument_list|()
expr_stmt|;
block|}
name|timestampWritable
operator|.
name|set
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|timestampWritable
operator|.
name|writeToByteStream
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * INTERVAL_YEAR_MONTH.    */
annotation|@
name|Override
specifier|public
name|void
name|writeHiveIntervalYearMonth
parameter_list|(
name|HiveIntervalYearMonth
name|viyt
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|hiveIntervalYearMonthWritable
operator|==
literal|null
condition|)
block|{
name|hiveIntervalYearMonthWritable
operator|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|()
expr_stmt|;
block|}
name|hiveIntervalYearMonthWritable
operator|.
name|set
argument_list|(
name|viyt
argument_list|)
expr_stmt|;
name|hiveIntervalYearMonthWritable
operator|.
name|writeToByteStream
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeHiveIntervalYearMonth
parameter_list|(
name|int
name|totalMonths
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|hiveIntervalYearMonthWritable
operator|==
literal|null
condition|)
block|{
name|hiveIntervalYearMonthWritable
operator|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|()
expr_stmt|;
block|}
name|hiveIntervalYearMonthWritable
operator|.
name|set
argument_list|(
name|totalMonths
argument_list|)
expr_stmt|;
name|hiveIntervalYearMonthWritable
operator|.
name|writeToByteStream
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * INTERVAL_DAY_TIME.    */
annotation|@
name|Override
specifier|public
name|void
name|writeHiveIntervalDayTime
parameter_list|(
name|HiveIntervalDayTime
name|vidt
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|hiveIntervalDayTimeWritable
operator|==
literal|null
condition|)
block|{
name|hiveIntervalDayTimeWritable
operator|=
operator|new
name|HiveIntervalDayTimeWritable
argument_list|()
expr_stmt|;
block|}
name|hiveIntervalDayTimeWritable
operator|.
name|set
argument_list|(
name|vidt
argument_list|)
expr_stmt|;
name|hiveIntervalDayTimeWritable
operator|.
name|writeToByteStream
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * DECIMAL.    *    * NOTE: The scale parameter is for text serialization (e.g. HiveDecimal.toFormatString) that    * creates trailing zeroes output decimals.    */
annotation|@
name|Override
specifier|public
name|void
name|writeDecimal64
parameter_list|(
name|long
name|decimal64Long
parameter_list|,
name|int
name|scale
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hiveDecimalWritable
operator|==
literal|null
condition|)
block|{
name|hiveDecimalWritable
operator|=
operator|new
name|HiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
name|hiveDecimalWritable
operator|.
name|deserialize64
argument_list|(
name|decimal64Long
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|writeHiveDecimal
argument_list|(
name|hiveDecimalWritable
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeHiveDecimal
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|,
name|int
name|scale
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|scratchLongs
operator|==
literal|null
condition|)
block|{
name|scratchLongs
operator|=
operator|new
name|long
index|[
name|HiveDecimal
operator|.
name|SCRATCH_LONGS_LEN
index|]
expr_stmt|;
name|scratchBuffer
operator|=
operator|new
name|byte
index|[
name|HiveDecimal
operator|.
name|SCRATCH_BUFFER_LEN_BIG_INTEGER_BYTES
index|]
expr_stmt|;
block|}
name|LazyBinarySerDe
operator|.
name|writeToByteStream
argument_list|(
name|output
argument_list|,
name|dec
argument_list|,
name|scratchLongs
argument_list|,
name|scratchBuffer
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeHiveDecimal
parameter_list|(
name|HiveDecimalWritable
name|decWritable
parameter_list|,
name|int
name|scale
parameter_list|)
throws|throws
name|IOException
block|{
name|beginElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|scratchLongs
operator|==
literal|null
condition|)
block|{
name|scratchLongs
operator|=
operator|new
name|long
index|[
name|HiveDecimal
operator|.
name|SCRATCH_LONGS_LEN
index|]
expr_stmt|;
name|scratchBuffer
operator|=
operator|new
name|byte
index|[
name|HiveDecimal
operator|.
name|SCRATCH_BUFFER_LEN_BIG_INTEGER_BYTES
index|]
expr_stmt|;
block|}
name|LazyBinarySerDe
operator|.
name|writeToByteStream
argument_list|(
name|output
argument_list|,
name|decWritable
argument_list|,
name|scratchLongs
argument_list|,
name|scratchBuffer
argument_list|)
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
comment|/*    * Write a VInt using our temporary byte buffer instead of paying the thread local performance    * cost of LazyBinaryUtils.writeVInt    */
specifier|private
name|void
name|writeVInt
parameter_list|(
name|int
name|v
parameter_list|)
block|{
specifier|final
name|int
name|len
init|=
name|LazyBinaryUtils
operator|.
name|writeVLongToByteArray
argument_list|(
name|vLongBytes
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|vLongBytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeVLong
parameter_list|(
name|long
name|v
parameter_list|)
block|{
specifier|final
name|int
name|len
init|=
name|LazyBinaryUtils
operator|.
name|writeVLongToByteArray
argument_list|(
name|vLongBytes
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|vLongBytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beginList
parameter_list|(
name|List
name|list
parameter_list|)
block|{
specifier|final
name|Field
name|current
init|=
operator|new
name|Field
argument_list|(
name|LIST
argument_list|)
decl_stmt|;
name|beginComplex
argument_list|(
name|current
argument_list|)
expr_stmt|;
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|current
operator|.
name|fieldCount
operator|=
name|size
expr_stmt|;
if|if
condition|(
operator|!
name|skipLengthPrefix
condition|)
block|{
comment|// 1/ reserve spaces for the byte size of the list
comment|// which is a integer and takes four bytes
name|current
operator|.
name|byteSizeStart
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|output
operator|.
name|reserve
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|current
operator|.
name|start
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|// 2/ write the size of the list as a VInt
name|LazyBinaryUtils
operator|.
name|writeVInt
argument_list|(
name|output
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// 3/ write the null bytes
name|byte
name|nullByte
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|eid
init|=
literal|0
init|;
name|eid
operator|<
name|size
condition|;
name|eid
operator|++
control|)
block|{
comment|// set the bit to 1 if an element is not null
if|if
condition|(
literal|null
operator|!=
name|list
operator|.
name|get
argument_list|(
name|eid
argument_list|)
condition|)
block|{
name|nullByte
operator||=
literal|1
operator|<<
operator|(
name|eid
operator|%
literal|8
operator|)
expr_stmt|;
block|}
comment|// store the byte every eight elements or
comment|// if this is the last element
if|if
condition|(
literal|7
operator|==
name|eid
operator|%
literal|8
operator|||
name|eid
operator|==
name|size
operator|-
literal|1
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|nullByte
argument_list|)
expr_stmt|;
name|nullByte
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|separateList
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|finishList
parameter_list|()
block|{
specifier|final
name|Field
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|skipLengthPrefix
condition|)
block|{
comment|// 5/ update the list byte size
name|int
name|listEnd
init|=
name|output
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|listSize
init|=
name|listEnd
operator|-
name|current
operator|.
name|start
decl_stmt|;
name|writeSizeAtOffset
argument_list|(
name|output
argument_list|,
name|current
operator|.
name|byteSizeStart
argument_list|,
name|listSize
argument_list|)
expr_stmt|;
block|}
name|finishComplex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beginMap
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
block|{
specifier|final
name|Field
name|current
init|=
operator|new
name|Field
argument_list|(
name|MAP
argument_list|)
decl_stmt|;
name|beginComplex
argument_list|(
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|skipLengthPrefix
condition|)
block|{
comment|// 1/ reserve spaces for the byte size of the map
comment|// which is a integer and takes four bytes
name|current
operator|.
name|byteSizeStart
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|output
operator|.
name|reserve
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|current
operator|.
name|start
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|// 2/ write the size of the map which is a VInt
specifier|final
name|int
name|size
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|current
operator|.
name|fieldIndex
operator|=
name|size
expr_stmt|;
name|LazyBinaryUtils
operator|.
name|writeVInt
argument_list|(
name|output
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// 3/ write the null bytes
name|int
name|b
init|=
literal|0
decl_stmt|;
name|byte
name|nullByte
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// set the bit to 1 if a key is not null
if|if
condition|(
literal|null
operator|!=
name|entry
operator|.
name|getKey
argument_list|()
condition|)
block|{
name|nullByte
operator||=
literal|1
operator|<<
operator|(
name|b
operator|%
literal|8
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|warnedOnceNullMapKey
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|warnedOnceNullMapKey
operator|.
name|value
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Null map key encountered! Ignoring similar problems."
argument_list|)
expr_stmt|;
block|}
name|warnedOnceNullMapKey
operator|.
name|value
operator|=
literal|true
expr_stmt|;
block|}
name|b
operator|++
expr_stmt|;
comment|// set the bit to 1 if a value is not null
if|if
condition|(
literal|null
operator|!=
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|nullByte
operator||=
literal|1
operator|<<
operator|(
name|b
operator|%
literal|8
operator|)
expr_stmt|;
block|}
name|b
operator|++
expr_stmt|;
comment|// write the byte to stream every 4 key-value pairs
comment|// or if this is the last key-value pair
if|if
condition|(
literal|0
operator|==
name|b
operator|%
literal|8
operator|||
name|b
operator|==
name|size
operator|*
literal|2
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|nullByte
argument_list|)
expr_stmt|;
name|nullByte
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|separateKey
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|separateKeyValuePair
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|finishMap
parameter_list|()
block|{
specifier|final
name|Field
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|skipLengthPrefix
condition|)
block|{
comment|// 5/ update the byte size of the map
name|int
name|mapEnd
init|=
name|output
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|mapSize
init|=
name|mapEnd
operator|-
name|current
operator|.
name|start
decl_stmt|;
name|writeSizeAtOffset
argument_list|(
name|output
argument_list|,
name|current
operator|.
name|byteSizeStart
argument_list|,
name|mapSize
argument_list|)
expr_stmt|;
block|}
name|finishComplex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beginStruct
parameter_list|(
name|List
name|fieldValues
parameter_list|)
block|{
specifier|final
name|Field
name|current
init|=
operator|new
name|Field
argument_list|(
name|STRUCT
argument_list|)
decl_stmt|;
name|beginComplex
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|.
name|fieldCount
operator|=
name|fieldValues
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|skipLengthPrefix
condition|)
block|{
comment|// 1/ reserve spaces for the byte size of the struct
comment|// which is a integer and takes four bytes
name|current
operator|.
name|byteSizeStart
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|output
operator|.
name|reserve
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|current
operator|.
name|start
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
name|current
operator|.
name|nullOffset
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|separateStruct
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|finishStruct
parameter_list|()
block|{
specifier|final
name|Field
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|skipLengthPrefix
condition|)
block|{
comment|// 3/ update the byte size of the struct
name|int
name|typeEnd
init|=
name|output
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|typeSize
init|=
name|typeEnd
operator|-
name|current
operator|.
name|start
decl_stmt|;
name|writeSizeAtOffset
argument_list|(
name|output
argument_list|,
name|current
operator|.
name|byteSizeStart
argument_list|,
name|typeSize
argument_list|)
expr_stmt|;
block|}
name|finishComplex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beginUnion
parameter_list|(
name|int
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Field
name|current
init|=
operator|new
name|Field
argument_list|(
name|UNION
argument_list|)
decl_stmt|;
name|beginComplex
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|.
name|fieldCount
operator|=
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|skipLengthPrefix
condition|)
block|{
comment|// 1/ reserve spaces for the byte size of the struct
comment|// which is a integer and takes four bytes
name|current
operator|.
name|byteSizeStart
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|output
operator|.
name|reserve
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|current
operator|.
name|start
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|// 2/ serialize the union
name|output
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|finishUnion
parameter_list|()
block|{
specifier|final
name|Field
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|skipLengthPrefix
condition|)
block|{
comment|// 3/ update the byte size of the struct
name|int
name|typeEnd
init|=
name|output
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|typeSize
init|=
name|typeEnd
operator|-
name|current
operator|.
name|start
decl_stmt|;
name|writeSizeAtOffset
argument_list|(
name|output
argument_list|,
name|current
operator|.
name|byteSizeStart
argument_list|,
name|typeSize
argument_list|)
expr_stmt|;
block|}
name|finishComplex
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|beginElement
parameter_list|()
block|{
specifier|final
name|Field
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|type
operator|==
name|STRUCT
condition|)
block|{
comment|// Every 8 fields we write a NULL byte.
if|if
condition|(
operator|(
name|current
operator|.
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|fieldIndex
operator|>
literal|0
condition|)
block|{
comment|// Write back previous 8 field's NULL byte.
name|output
operator|.
name|writeByte
argument_list|(
name|current
operator|.
name|nullOffset
argument_list|,
name|current
operator|.
name|nullByte
argument_list|)
expr_stmt|;
name|current
operator|.
name|nullByte
operator|=
literal|0
expr_stmt|;
name|current
operator|.
name|nullOffset
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|// Allocate next NULL byte.
name|output
operator|.
name|reserve
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Set bit in NULL byte when a field is NOT NULL.
name|current
operator|.
name|nullByte
operator||=
literal|1
operator|<<
operator|(
name|current
operator|.
name|fieldIndex
operator|%
literal|8
operator|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|finishElement
parameter_list|()
block|{
specifier|final
name|Field
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|type
operator|==
name|STRUCT
condition|)
block|{
name|current
operator|.
name|fieldIndex
operator|++
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|fieldIndex
operator|==
name|current
operator|.
name|fieldCount
condition|)
block|{
comment|// Write back the final NULL byte before the last fields.
name|output
operator|.
name|writeByte
argument_list|(
name|current
operator|.
name|nullOffset
argument_list|,
name|current
operator|.
name|nullByte
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|beginComplex
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
name|beginElement
argument_list|()
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|finishComplex
parameter_list|()
block|{
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|finishElement
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeSizeAtOffset
parameter_list|(
name|ByteStream
operator|.
name|RandomAccessOutput
name|byteStream
parameter_list|,
name|int
name|byteSizeStart
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|byteStream
operator|.
name|writeInt
argument_list|(
name|byteSizeStart
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

