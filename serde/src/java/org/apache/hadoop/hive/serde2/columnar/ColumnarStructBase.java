begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStatsStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|StructObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|ColumnarStructBase
implements|implements
name|StructObject
implements|,
name|SerDeStatsStruct
block|{
class|class
name|FieldInfo
block|{
name|LazyObjectBase
name|field
decl_stmt|;
comment|/*      * use an array instead of only one object in case in future hive does not do      * the byte copy.      */
name|ByteArrayRef
name|cachedByteArrayRef
decl_stmt|;
name|BytesRefWritable
name|rawBytesField
decl_stmt|;
name|boolean
name|inited
decl_stmt|;
name|boolean
name|fieldSkipped
decl_stmt|;
name|ObjectInspector
name|objectInspector
decl_stmt|;
specifier|public
name|FieldInfo
parameter_list|(
name|LazyObjectBase
name|lazyObject
parameter_list|,
name|boolean
name|fieldSkipped
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
block|{
name|field
operator|=
name|lazyObject
expr_stmt|;
name|cachedByteArrayRef
operator|=
operator|new
name|ByteArrayRef
argument_list|()
expr_stmt|;
name|objectInspector
operator|=
name|oi
expr_stmt|;
if|if
condition|(
name|fieldSkipped
condition|)
block|{
name|this
operator|.
name|fieldSkipped
operator|=
literal|true
expr_stmt|;
name|inited
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|inited
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/*      * ============================ [PERF] ===================================      * This function is called for every row. Setting up the selected/projected      * columns at the first call, and don't do that for the following calls.      * Ideally this should be done in the constructor where we don't need to      * branch in the function for each row.      * =========================================================================      */
specifier|public
name|void
name|init
parameter_list|(
name|BytesRefWritable
name|col
parameter_list|)
block|{
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
name|rawBytesField
operator|=
name|col
expr_stmt|;
name|inited
operator|=
literal|false
expr_stmt|;
name|fieldSkipped
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// select columns that actually do not exist in the file.
name|fieldSkipped
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * Return the uncompressed size of this field      */
specifier|public
name|long
name|getSerializedSize
parameter_list|()
block|{
if|if
condition|(
name|rawBytesField
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|rawBytesField
operator|.
name|getLength
argument_list|()
return|;
block|}
comment|/**      * Get the field out of the row without checking parsed. This is called by      * both getField and getFieldsAsList.      *      * @return The value of the field      */
specifier|protected
name|Object
name|uncheckedGetField
parameter_list|()
block|{
if|if
condition|(
name|fieldSkipped
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|inited
condition|)
block|{
try|try
block|{
name|cachedByteArrayRef
operator|.
name|setData
argument_list|(
name|rawBytesField
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|inited
operator|=
literal|true
expr_stmt|;
name|int
name|byteLength
init|=
name|getLength
argument_list|(
name|objectInspector
argument_list|,
name|cachedByteArrayRef
argument_list|,
name|rawBytesField
operator|.
name|getStart
argument_list|()
argument_list|,
name|rawBytesField
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|byteLength
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|field
operator|.
name|init
argument_list|(
name|cachedByteArrayRef
argument_list|,
name|rawBytesField
operator|.
name|getStart
argument_list|()
argument_list|,
name|byteLength
argument_list|)
expr_stmt|;
return|return
name|field
operator|.
name|getObject
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|getLength
argument_list|(
name|objectInspector
argument_list|,
name|cachedByteArrayRef
argument_list|,
name|rawBytesField
operator|.
name|getStart
argument_list|()
argument_list|,
name|rawBytesField
operator|.
name|getLength
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|field
operator|.
name|getObject
argument_list|()
return|;
block|}
block|}
block|}
specifier|protected
name|int
index|[]
name|prjColIDs
init|=
literal|null
decl_stmt|;
specifier|private
name|FieldInfo
index|[]
name|fieldInfoList
init|=
literal|null
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|cachedList
decl_stmt|;
specifier|public
name|ColumnarStructBase
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|notSkippedColumnIDs
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|int
name|num
init|=
name|fieldRefs
operator|.
name|size
argument_list|()
decl_stmt|;
name|fieldInfoList
operator|=
operator|new
name|FieldInfo
index|[
name|num
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|ObjectInspector
name|foi
init|=
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|fieldInfoList
index|[
name|i
index|]
operator|=
operator|new
name|FieldInfo
argument_list|(
name|createLazyObjectBase
argument_list|(
name|foi
argument_list|)
argument_list|,
operator|!
name|notSkippedColumnIDs
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|,
name|foi
argument_list|)
expr_stmt|;
block|}
comment|// maintain a list of non-NULL column IDs
name|int
name|min
init|=
name|notSkippedColumnIDs
operator|.
name|size
argument_list|()
operator|>
name|num
condition|?
name|num
else|:
name|notSkippedColumnIDs
operator|.
name|size
argument_list|()
decl_stmt|;
name|prjColIDs
operator|=
operator|new
name|int
index|[
name|min
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|index
init|=
literal|0
init|;
name|i
operator|<
name|notSkippedColumnIDs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|readCol
init|=
name|notSkippedColumnIDs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|readCol
operator|<
name|num
condition|)
block|{
name|prjColIDs
index|[
name|index
index|]
operator|=
name|readCol
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get one field out of the struct.    *    * If the field is a primitive field, return the actual object. Otherwise    * return the LazyObject. This is because PrimitiveObjectInspector does not    * have control over the object used by the user - the user simply directly    * use the Object instead of going through Object    * PrimitiveObjectInspector.get(Object).    *    * NOTE: separator and nullSequence has to be the same each time this method    * is called. These two parameters are used only once to parse each record.    *    * @param fieldID    *          The field ID    * @return The field as a LazyObject    */
specifier|public
name|Object
name|getField
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
return|return
name|fieldInfoList
index|[
name|fieldID
index|]
operator|.
name|uncheckedGetField
argument_list|()
return|;
block|}
comment|/**    * Check if the object is null and return the length of the stream    *    * @param objectInspector    * @param cachedByteArrayRef    *          the bytes of the object    * @param start    *          the start offset    * @param length    *          the length    *    * @return -1 for null,>=0 for length    */
specifier|protected
specifier|abstract
name|int
name|getLength
parameter_list|(
name|ObjectInspector
name|objectInspector
parameter_list|,
name|ByteArrayRef
name|cachedByteArrayRef
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
function_decl|;
comment|/**    * create the lazy object for this field    *    * @param objectInspector    *          the object inspector for the field    * @return the lazy object for the field    */
specifier|protected
specifier|abstract
name|LazyObjectBase
name|createLazyObjectBase
parameter_list|(
name|ObjectInspector
name|objectInspector
parameter_list|)
function_decl|;
specifier|public
name|void
name|init
parameter_list|(
name|BytesRefArrayWritable
name|cols
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prjColIDs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|fieldIndex
init|=
name|prjColIDs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|fieldIndex
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|)
block|{
name|fieldInfoList
index|[
name|fieldIndex
index|]
operator|.
name|init
argument_list|(
name|cols
operator|.
name|unCheckedGet
argument_list|(
name|fieldIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// select columns that actually do not exist in the file.
name|fieldInfoList
index|[
name|fieldIndex
index|]
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the values of the fields as an ArrayList.    *    * @return The values of the fields as an ArrayList.    */
specifier|public
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|getFieldsAsList
parameter_list|()
block|{
if|if
condition|(
name|cachedList
operator|==
literal|null
condition|)
block|{
name|cachedList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cachedList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldInfoList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cachedList
operator|.
name|add
argument_list|(
name|fieldInfoList
index|[
name|i
index|]
operator|.
name|uncheckedGetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cachedList
return|;
block|}
specifier|public
name|long
name|getRawDataSerializedSize
parameter_list|()
block|{
name|long
name|serializedSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldInfoList
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|serializedSize
operator|+=
name|fieldInfoList
index|[
name|i
index|]
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
block|}
return|return
name|serializedSize
return|;
block|}
block|}
end_class

end_unit

