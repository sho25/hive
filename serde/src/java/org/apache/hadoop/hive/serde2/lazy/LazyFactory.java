begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|LazyFactory
block|{
comment|/**    * Create a lazy primitive class given the java class.     */
specifier|public
specifier|static
name|LazyPrimitive
argument_list|<
name|?
argument_list|>
name|createLazyPrimitiveClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
operator|new
name|LazyString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Integer
operator|.
name|class
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
operator|new
name|LazyInteger
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|class
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
operator|new
name|LazyDouble
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Byte
operator|.
name|class
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
operator|new
name|LazyByte
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Short
operator|.
name|class
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
operator|new
name|LazyShort
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Long
operator|.
name|class
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
operator|new
name|LazyLong
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Create a hierarchical LazyObject based on the given typeInfo.    */
specifier|public
specifier|static
name|LazyObject
name|createLazyObject
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|ObjectInspector
operator|.
name|Category
name|c
init|=
name|typeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
name|PRIMITIVE
case|:
return|return
name|createLazyPrimitiveClass
argument_list|(
name|typeInfo
operator|.
name|getPrimitiveClass
argument_list|()
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
operator|new
name|LazyMap
argument_list|(
name|typeInfo
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
operator|new
name|LazyArray
argument_list|(
name|typeInfo
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
operator|new
name|LazyStruct
argument_list|(
name|typeInfo
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive LazySerDe Internal error."
argument_list|)
throw|;
block|}
comment|/**    * Create a hierarchical ObjectInspector for LazyObject with the given    * typeInfo.    * @param typeInfo  The type information for the LazyObject    * @param separator The array of separators for delimiting each level    * @param separatorIndex  The current level (for separators). List(array),     *                        struct uses 1 level of separator, and map uses 2    *                        levels: the first one for delimiting entries, the    *                        second one for delimiting key and values.     * @param nullSequence    The sequence of bytes representing NULL.    * @return  The ObjectInspector    */
specifier|public
specifier|static
name|ObjectInspector
name|createLazyObjectInspector
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|byte
index|[]
name|separator
parameter_list|,
name|int
name|separatorIndex
parameter_list|,
name|Text
name|nullSequence
parameter_list|)
block|{
name|ObjectInspector
operator|.
name|Category
name|c
init|=
name|typeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
name|PRIMITIVE
case|:
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|typeInfo
operator|.
name|getPrimitiveClass
argument_list|()
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
name|ObjectInspectorFactory
operator|.
name|getLazySimpleMapObjectInspector
argument_list|(
name|createLazyObjectInspector
argument_list|(
name|typeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|,
name|separator
argument_list|,
name|separatorIndex
operator|+
literal|2
argument_list|,
name|nullSequence
argument_list|)
argument_list|,
name|createLazyObjectInspector
argument_list|(
name|typeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|,
name|separator
argument_list|,
name|separatorIndex
operator|+
literal|2
argument_list|,
name|nullSequence
argument_list|)
argument_list|,
name|separator
index|[
name|separatorIndex
index|]
argument_list|,
name|separator
index|[
name|separatorIndex
operator|+
literal|1
index|]
argument_list|,
name|nullSequence
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
name|ObjectInspectorFactory
operator|.
name|getLazySimpleListObjectInspector
argument_list|(
name|createLazyObjectInspector
argument_list|(
name|typeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|,
name|separator
argument_list|,
name|separatorIndex
operator|+
literal|1
argument_list|,
name|nullSequence
argument_list|)
argument_list|,
name|separator
index|[
name|separatorIndex
index|]
argument_list|,
name|nullSequence
argument_list|)
return|;
case|case
name|STRUCT
case|:
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|typeInfo
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|typeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|fieldTypeInfos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldTypeInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|createLazyObjectInspector
argument_list|(
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|separator
argument_list|,
name|separatorIndex
operator|+
literal|1
argument_list|,
name|nullSequence
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ObjectInspectorFactory
operator|.
name|getLazySimpleStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldObjectInspectors
argument_list|,
name|separator
index|[
name|separatorIndex
index|]
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive LazySerDe Internal error."
argument_list|)
throw|;
block|}
comment|/**    * Create a hierarchical ObjectInspector for LazyStruct with the given    * columnNames and columnTypeInfos.    *     * @param lastColumnTakesRest whether the last column of the struct should take    *                            the rest of the row if there are extra fields.     * @see LazyFactory#createLazyObjectInspector(TypeInfo, byte[], int, Text)    */
specifier|public
specifier|static
name|ObjectInspector
name|createLazyStructInspector
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
parameter_list|,
name|byte
index|[]
name|separators
parameter_list|,
name|Text
name|nullSequence
parameter_list|,
name|boolean
name|lastColumnTakesRest
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|columnObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|typeInfos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|columnObjectInspectors
operator|.
name|add
argument_list|(
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|typeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|separators
argument_list|,
literal|1
argument_list|,
name|nullSequence
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ObjectInspectorFactory
operator|.
name|getLazySimpleStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|columnObjectInspectors
argument_list|,
name|separators
index|[
literal|0
index|]
argument_list|,
name|nullSequence
argument_list|,
name|lastColumnTakesRest
argument_list|)
return|;
block|}
block|}
end_class

end_unit

