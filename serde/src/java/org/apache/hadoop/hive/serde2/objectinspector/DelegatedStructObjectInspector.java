begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|DelegatedStructObjectInspector
extends|extends
name|StructObjectInspector
block|{
specifier|private
name|StructObjectInspector
name|delegate
decl_stmt|;
specifier|private
name|List
argument_list|<
name|DelegatedStructField
argument_list|>
name|fields
decl_stmt|;
specifier|protected
name|DelegatedStructObjectInspector
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DelegatedStructObjectInspector
parameter_list|(
name|StructObjectInspector
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|StructObjectInspector
name|current
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|current
expr_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|newFields
init|=
name|delegate
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|DelegatedStructField
name|field
range|:
name|fields
control|)
block|{
name|field
operator|.
name|field
operator|=
name|newFields
operator|.
name|get
argument_list|(
name|index
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|DelegatedStructField
implements|implements
name|StructField
block|{
specifier|private
name|StructField
name|field
decl_stmt|;
specifier|public
name|DelegatedStructField
parameter_list|(
name|StructField
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|field
operator|.
name|getFieldName
argument_list|()
return|;
block|}
specifier|public
name|ObjectInspector
name|getFieldObjectInspector
parameter_list|()
block|{
return|return
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
return|;
block|}
specifier|public
name|int
name|getFieldID
parameter_list|()
block|{
return|return
name|field
operator|.
name|getFieldID
argument_list|()
return|;
block|}
specifier|public
name|String
name|getFieldComment
parameter_list|()
block|{
return|return
name|field
operator|.
name|getFieldComment
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|getAllStructFieldRefs
parameter_list|()
block|{
if|if
condition|(
name|fields
operator|!=
literal|null
operator|||
name|delegate
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|fields
return|;
block|}
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|delegate
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DelegatedStructField
argument_list|>
name|delegate
init|=
operator|new
name|ArrayList
argument_list|<
name|DelegatedStructField
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|delegate
operator|.
name|add
argument_list|(
operator|new
name|DelegatedStructField
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|fields
operator|=
name|delegate
return|;
block|}
annotation|@
name|Override
specifier|public
name|StructField
name|getStructFieldRef
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|StructField
name|field
init|=
name|delegate
operator|.
name|getStructFieldRef
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
return|return
name|field
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|DelegatedStructField
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getStructFieldData
parameter_list|(
name|Object
name|data
parameter_list|,
name|StructField
name|fieldRef
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getStructFieldData
argument_list|(
name|data
argument_list|,
operator|(
operator|(
name|DelegatedStructField
operator|)
name|fieldRef
operator|)
operator|.
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getStructFieldsDataAsList
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getTypeName
argument_list|()
return|;
block|}
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getCategory
argument_list|()
return|;
block|}
block|}
end_class

end_unit

