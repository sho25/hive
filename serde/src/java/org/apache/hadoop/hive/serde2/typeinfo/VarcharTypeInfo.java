begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_class
specifier|public
class|class
name|VarcharTypeInfo
extends|extends
name|BaseCharTypeInfo
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|// no-arg constructor to make kyro happy.
specifier|public
name|VarcharTypeInfo
parameter_list|()
block|{   }
specifier|public
name|VarcharTypeInfo
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|VarcharUtils
operator|.
name|validateParameter
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|getQualifiedName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
operator|!
operator|(
name|other
operator|instanceof
name|VarcharTypeInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|VarcharTypeInfo
name|pti
init|=
operator|(
name|VarcharTypeInfo
operator|)
name|other
decl_stmt|;
return|return
name|this
operator|.
name|typeName
operator|.
name|equals
argument_list|(
name|pti
operator|.
name|typeName
argument_list|)
operator|&&
name|this
operator|.
name|getLength
argument_list|()
operator|==
name|pti
operator|.
name|getLength
argument_list|()
return|;
block|}
comment|/**    * Generate the hashCode for this TypeInfo.    */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getQualifiedName
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getQualifiedName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

