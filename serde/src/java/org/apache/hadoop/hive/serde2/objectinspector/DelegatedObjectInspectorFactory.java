begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_class
specifier|public
class|class
name|DelegatedObjectInspectorFactory
block|{
specifier|public
specifier|static
name|ObjectInspector
name|wrap
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|)
block|{
switch|switch
condition|(
name|inspector
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
return|return
name|inspector
return|;
case|case
name|LIST
case|:
return|return
operator|new
name|DelegatedListObjectInspector
argument_list|(
operator|(
name|ListObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
operator|new
name|DelegatedMapObjectInspector
argument_list|(
operator|(
name|MapObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
operator|new
name|DelegatedStructObjectInspector
argument_list|(
operator|(
name|StructObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|UNION
case|:
return|return
operator|new
name|DelegatedUnionObjectInspector
argument_list|(
operator|(
name|UnionObjectInspector
operator|)
name|inspector
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"invalid category "
operator|+
name|inspector
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ObjectInspector
name|reset
parameter_list|(
name|ObjectInspector
name|prev
parameter_list|,
name|ObjectInspector
name|current
parameter_list|)
block|{
switch|switch
condition|(
name|current
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
break|break;
case|case
name|LIST
case|:
operator|(
operator|(
name|DelegatedListObjectInspector
operator|)
name|prev
operator|)
operator|.
name|reset
argument_list|(
operator|(
name|ListObjectInspector
operator|)
name|current
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
operator|(
operator|(
name|DelegatedMapObjectInspector
operator|)
name|prev
operator|)
operator|.
name|reset
argument_list|(
operator|(
name|MapObjectInspector
operator|)
name|current
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
operator|(
operator|(
name|DelegatedStructObjectInspector
operator|)
name|prev
operator|)
operator|.
name|reset
argument_list|(
operator|(
name|StructObjectInspector
operator|)
name|current
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNION
case|:
operator|(
operator|(
name|DelegatedUnionObjectInspector
operator|)
name|prev
operator|)
operator|.
name|reset
argument_list|(
operator|(
name|UnionObjectInspector
operator|)
name|current
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"invalid category "
operator|+
name|current
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|prev
return|;
block|}
block|}
end_class

end_unit

