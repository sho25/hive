begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyBinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_class
specifier|public
class|class
name|LazyBinary
extends|extends
name|LazyPrimitive
argument_list|<
name|LazyBinaryObjectInspector
argument_list|,
name|BytesWritable
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LazyBinary
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG_LOG_ENABLED
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
name|LazyBinary
parameter_list|(
name|LazyBinaryObjectInspector
name|oi
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|LazyBinary
parameter_list|(
name|LazyBinary
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|BytesWritable
name|incoming
init|=
name|other
operator|.
name|getWritableObject
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|incoming
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|incoming
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|incoming
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|BytesWritable
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ByteArrayRef
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|recv
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|recv
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decoded
init|=
name|decodeIfNeeded
argument_list|(
name|recv
argument_list|)
decl_stmt|;
comment|// use the original bytes in case decoding should fail
name|decoded
operator|=
name|decoded
operator|.
name|length
operator|>
literal|0
condition|?
name|decoded
else|:
name|recv
expr_stmt|;
name|data
operator|.
name|set
argument_list|(
name|decoded
argument_list|,
literal|0
argument_list|,
name|decoded
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// todo this should be configured in serde
specifier|public
specifier|static
name|byte
index|[]
name|decodeIfNeeded
parameter_list|(
name|byte
index|[]
name|recv
parameter_list|)
block|{
name|boolean
name|arrayByteBase64
init|=
name|Base64
operator|.
name|isArrayByteBase64
argument_list|(
name|recv
argument_list|)
decl_stmt|;
if|if
condition|(
name|DEBUG_LOG_ENABLED
operator|&&
name|arrayByteBase64
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data only contains Base64 alphabets only so try to decode the data."
argument_list|)
expr_stmt|;
block|}
return|return
name|arrayByteBase64
condition|?
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|recv
argument_list|)
else|:
name|recv
return|;
block|}
block|}
end_class

end_unit

