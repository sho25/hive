begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_comment
comment|/**  *<tt>BytesRefArrayWritable</tt> holds an array reference to BytesRefWritable,  * and is able to resize without recreating new array if not necessary.  *<p>  *  * Each<tt>BytesRefArrayWritable holds</tt> instance has a<i>valid</i> field,  * which is the desired valid number of<tt>BytesRefWritable</tt> it holds.  *<tt>resetValid</tt> can reset the valid, but it will not care the underlying  * BytesRefWritable.  */
end_comment

begin_class
specifier|public
class|class
name|BytesRefArrayWritable
implements|implements
name|Writable
implements|,
name|Comparable
argument_list|<
name|BytesRefArrayWritable
argument_list|>
block|{
specifier|private
name|BytesRefWritable
index|[]
name|bytesRefWritables
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|valid
init|=
literal|0
decl_stmt|;
comment|/**    * Constructs an empty array with the specified capacity.    *    * @param capacity    *          initial capacity    * @exception IllegalArgumentException    *              if the specified initial capacity is negative    */
specifier|public
name|BytesRefArrayWritable
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
if|if
condition|(
name|capacity
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Capacity can not be negative."
argument_list|)
throw|;
block|}
name|bytesRefWritables
operator|=
operator|new
name|BytesRefWritable
index|[
literal|0
index|]
expr_stmt|;
name|ensureCapacity
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an empty array with a capacity of ten.    */
specifier|public
name|BytesRefArrayWritable
parameter_list|()
block|{
name|this
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the number of valid elements.    *    * @return the number of valid elements    */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|valid
return|;
block|}
comment|/**    * Gets the BytesRefWritable at the specified position. Make sure the position    * is valid by first call resetValid.    *    * @param index    *          the position index, starting from zero    * @throws IndexOutOfBoundsException    */
specifier|public
name|BytesRefWritable
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|valid
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"This BytesRefArrayWritable only has "
operator|+
name|valid
operator|+
literal|" valid values."
argument_list|)
throw|;
block|}
return|return
name|bytesRefWritables
index|[
name|index
index|]
return|;
block|}
comment|/**    * Gets the BytesRefWritable at the specified position without checking.    *    * @param index    *          the position index, starting from zero    * @throws IndexOutOfBoundsException    */
specifier|public
name|BytesRefWritable
name|unCheckedGet
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|bytesRefWritables
index|[
name|index
index|]
return|;
block|}
comment|/**    * Set the BytesRefWritable at the specified position with the specified    * BytesRefWritable.    *    * @param index    *          index position    * @param bytesRefWritable    *          the new element    * @throws IllegalArgumentException    *           if the specified new element is null    */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|BytesRefWritable
name|bytesRefWritable
parameter_list|)
block|{
name|ensureCapacity
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|bytesRefWritables
index|[
name|index
index|]
operator|=
name|bytesRefWritable
expr_stmt|;
if|if
condition|(
name|valid
operator|<=
name|index
condition|)
block|{
name|valid
operator|=
name|index
operator|+
literal|1
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|BytesRefArrayWritable
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument can not be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|sizeDiff
init|=
name|valid
operator|-
name|other
operator|.
name|valid
decl_stmt|;
if|if
condition|(
name|sizeDiff
operator|!=
literal|0
condition|)
block|{
return|return
name|sizeDiff
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valid
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|other
operator|.
name|contains
argument_list|(
name|bytesRefWritables
index|[
name|i
index|]
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Returns<tt>true</tt> if this instance contains one or more the specified    * BytesRefWritable.    *    * @param bytesRefWritable    *          BytesRefWritable element to be tested    * @return<tt>true</tt> if contains the specified element    * @throws IllegalArgumentException    *           if the specified element is null    */
specifier|public
name|boolean
name|contains
parameter_list|(
name|BytesRefWritable
name|bytesRefWritable
parameter_list|)
block|{
if|if
condition|(
name|bytesRefWritable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument can not be null."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valid
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bytesRefWritables
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|bytesRefWritable
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|BytesRefArrayWritable
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
operator|(
name|BytesRefArrayWritable
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * Removes all elements.    */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|valid
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * enlarge the capacity if necessary, to ensure that it can hold the number of    * elements specified by newValidCapacity argument. It will also narrow the    * valid capacity when needed. Notice: it only enlarge or narrow the valid    * capacity with no care of the already stored invalid BytesRefWritable.    *    * @param newValidCapacity    *          the desired capacity    */
specifier|public
name|void
name|resetValid
parameter_list|(
name|int
name|newValidCapacity
parameter_list|)
block|{
name|ensureCapacity
argument_list|(
name|newValidCapacity
argument_list|)
expr_stmt|;
name|valid
operator|=
name|newValidCapacity
expr_stmt|;
block|}
specifier|protected
name|void
name|ensureCapacity
parameter_list|(
name|int
name|newCapacity
parameter_list|)
block|{
name|int
name|size
init|=
name|bytesRefWritables
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|size
operator|<
name|newCapacity
condition|)
block|{
name|bytesRefWritables
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|bytesRefWritables
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
while|while
condition|(
name|size
operator|<
name|newCapacity
condition|)
block|{
name|bytesRefWritables
index|[
name|size
index|]
operator|=
operator|new
name|BytesRefWritable
argument_list|()
expr_stmt|;
name|size
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|ensureCapacity
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|bytesRefWritables
index|[
name|i
index|]
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|valid
operator|=
name|count
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|valid
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valid
condition|;
name|i
operator|++
control|)
block|{
name|BytesRefWritable
name|cu
init|=
name|bytesRefWritables
index|[
name|i
index|]
decl_stmt|;
name|cu
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
static|static
block|{
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|BytesRefArrayWritable
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|BytesRefArrayWritable
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

