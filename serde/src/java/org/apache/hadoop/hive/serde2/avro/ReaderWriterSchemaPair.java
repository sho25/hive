begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_comment
comment|/**  * Simple pair class used for memoizing schema-reencoding operations.  */
end_comment

begin_class
class|class
name|ReaderWriterSchemaPair
block|{
specifier|final
name|Schema
name|reader
decl_stmt|;
specifier|final
name|Schema
name|writer
decl_stmt|;
specifier|public
name|ReaderWriterSchemaPair
parameter_list|(
name|Schema
name|writer
parameter_list|,
name|Schema
name|reader
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
specifier|public
name|Schema
name|getReader
parameter_list|()
block|{
return|return
name|reader
return|;
block|}
specifier|public
name|Schema
name|getWriter
parameter_list|()
block|{
return|return
name|writer
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ReaderWriterSchemaPair
name|that
init|=
operator|(
name|ReaderWriterSchemaPair
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|equals
argument_list|(
name|that
operator|.
name|reader
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|writer
operator|.
name|equals
argument_list|(
name|that
operator|.
name|writer
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|reader
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|writer
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

