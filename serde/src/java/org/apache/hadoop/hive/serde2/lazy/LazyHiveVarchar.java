begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyHiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * LazyObject for storing a value of HiveVarchar.  *  */
end_comment

begin_class
specifier|public
class|class
name|LazyHiveVarchar
extends|extends
name|LazyPrimitive
argument_list|<
name|LazyHiveVarcharObjectInspector
argument_list|,
name|HiveVarcharWritable
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LazyHiveVarchar
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|maxLength
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|LazyHiveVarchar
parameter_list|(
name|LazyHiveVarcharObjectInspector
name|oi
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|VarcharTypeParams
name|typeParams
init|=
operator|(
name|VarcharTypeParams
operator|)
name|oi
operator|.
name|getTypeParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeParams
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"varchar type used without type params"
argument_list|)
throw|;
block|}
name|maxLength
operator|=
name|typeParams
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|data
operator|=
operator|new
name|HiveVarcharWritable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|LazyHiveVarchar
parameter_list|(
name|LazyHiveVarchar
name|copy
parameter_list|)
block|{
name|super
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
name|copy
operator|.
name|maxLength
expr_stmt|;
name|data
operator|=
operator|new
name|HiveVarcharWritable
argument_list|(
name|copy
operator|.
name|data
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|LazyHiveVarchar
name|copy
parameter_list|)
block|{
name|data
operator|.
name|set
argument_list|(
name|copy
operator|.
name|data
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ByteArrayRef
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|String
name|byteData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byteData
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|data
operator|.
name|set
argument_list|(
name|byteData
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
name|isNull
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
name|isNull
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the HiveVarchar data type range so converted to null."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

