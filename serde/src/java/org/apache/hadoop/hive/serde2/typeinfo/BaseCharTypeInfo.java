begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
specifier|abstract
class|class
name|BaseCharTypeInfo
extends|extends
name|PrimitiveTypeInfo
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|length
decl_stmt|;
comment|// no-arg constructor to make kyro happy.
specifier|public
name|BaseCharTypeInfo
parameter_list|()
block|{   }
specifier|public
name|BaseCharTypeInfo
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|super
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BaseCharTypeInfo
parameter_list|(
name|String
name|typeName
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQualifiedName
parameter_list|()
block|{
return|return
name|getQualifiedName
argument_list|(
name|typeName
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**    * Utility method to build the fully qualified data type. For example:    * (char,16) becomes char(16).    *    * @param typeName The name of the data type (char or varchar)    * @param length The maximum length of the data type    * @return A fully qualified field name    */
specifier|protected
name|String
name|getQualifiedName
parameter_list|(
name|String
name|typeName
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|typeName
operator|+
literal|'('
operator|+
name|length
operator|+
literal|')'
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTypeName
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
comment|// type name should already be set by subclass
return|return;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|length
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BaseCharTypeInfo
name|other
init|=
operator|(
name|BaseCharTypeInfo
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|length
operator|!=
name|other
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

