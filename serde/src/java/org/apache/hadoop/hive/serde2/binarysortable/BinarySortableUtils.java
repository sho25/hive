begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|BinarySortableSerDe
operator|.
name|ONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|BinarySortableSerDe
operator|.
name|ZERO
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_comment
comment|/**  * Utility class for BinarySortable classes.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|BinarySortableUtils
block|{
specifier|public
specifier|static
name|void
name|fillOrderArrays
parameter_list|(
name|Properties
name|inputProperties
parameter_list|,
name|boolean
index|[]
name|columnSortOrderIsDesc
parameter_list|,
name|byte
index|[]
name|columnNullMarker
parameter_list|,
name|byte
index|[]
name|columnNotNullMarker
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|inputProperties
argument_list|,
literal|"inputProperties can not be null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|columnSortOrderIsDesc
argument_list|,
literal|"columnSortOrderIsDesc can not be null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|columnNullMarker
argument_list|,
literal|"columnNullMarker can not be null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|columnNotNullMarker
argument_list|,
literal|"columnNotNullMarker can not be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnSortOrderIsDesc
operator|.
name|length
operator|!=
name|columnNullMarker
operator|.
name|length
operator|||
name|columnSortOrderIsDesc
operator|.
name|length
operator|!=
name|columnNotNullMarker
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"columnSortOrderIsDesc, columnNullMarker and columnNotNullMarker arrays should have same length."
argument_list|)
throw|;
block|}
comment|// Get the sort order
name|String
name|columnSortOrder
init|=
name|inputProperties
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_SORT_ORDER
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnSortOrder
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|columnSortOrder
operator|.
name|length
argument_list|()
operator|<
name|columnSortOrderIsDesc
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"From %d columns only %d has sort order specified."
argument_list|,
name|columnSortOrderIsDesc
operator|.
name|length
argument_list|,
name|columnSortOrder
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnSortOrderIsDesc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columnSortOrderIsDesc
index|[
name|i
index|]
operator|=
name|columnSortOrder
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'-'
expr_stmt|;
block|}
block|}
comment|// Null first/last
name|String
name|columnNullOrder
init|=
name|inputProperties
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_SORT_ORDER
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnNullOrder
operator|!=
literal|null
operator|&&
name|columnNullOrder
operator|.
name|length
argument_list|()
operator|<
name|columnNullMarker
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"From %d columns only %d has null sort order specified."
argument_list|,
name|columnNullMarker
operator|.
name|length
argument_list|,
name|columnNullOrder
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnSortOrderIsDesc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|columnSortOrderIsDesc
index|[
name|i
index|]
condition|)
block|{
comment|// Descending
if|if
condition|(
name|columnNullOrder
operator|!=
literal|null
operator|&&
name|columnNullOrder
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'a'
condition|)
block|{
comment|// Null first
name|columnNullMarker
index|[
name|i
index|]
operator|=
name|ONE
expr_stmt|;
name|columnNotNullMarker
index|[
name|i
index|]
operator|=
name|ZERO
expr_stmt|;
block|}
else|else
block|{
comment|// Null last
name|columnNullMarker
index|[
name|i
index|]
operator|=
name|ZERO
expr_stmt|;
name|columnNotNullMarker
index|[
name|i
index|]
operator|=
name|ONE
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Ascending
if|if
condition|(
name|columnNullOrder
operator|!=
literal|null
operator|&&
name|columnNullOrder
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'z'
condition|)
block|{
comment|// Null last
name|columnNullMarker
index|[
name|i
index|]
operator|=
name|ONE
expr_stmt|;
name|columnNotNullMarker
index|[
name|i
index|]
operator|=
name|ZERO
expr_stmt|;
block|}
else|else
block|{
comment|// Null first
name|columnNullMarker
index|[
name|i
index|]
operator|=
name|ZERO
expr_stmt|;
name|columnNotNullMarker
index|[
name|i
index|]
operator|=
name|ONE
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|BinarySortableUtils
parameter_list|()
block|{   }
block|}
end_class

end_unit

