begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|dynamic_type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|ConfigurableTProtocol
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|DynamicSerDe
implements|implements
name|SerDe
implements|,
name|Serializable
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DynamicSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|type_name
decl_stmt|;
specifier|private
name|DynamicSerDeStructBase
name|bt
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|META_TABLE_NAME
init|=
literal|"name"
decl_stmt|;
specifier|transient
specifier|private
name|thrift_grammar
name|parse_tree
decl_stmt|;
specifier|transient
specifier|protected
name|ByteStream
operator|.
name|Input
name|bis_
decl_stmt|;
specifier|transient
specifier|protected
name|ByteStream
operator|.
name|Output
name|bos_
decl_stmt|;
comment|/**    * protocols are protected in case any of their properties need to be queried from another    * class in this package. For TCTLSeparatedProtocol for example, may want to query the separators.    */
specifier|transient
specifier|protected
name|TProtocol
name|oprot_
decl_stmt|;
specifier|transient
specifier|protected
name|TProtocol
name|iprot_
decl_stmt|;
name|TIOStreamTransport
name|tios
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|String
name|ddl
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_DDL
argument_list|)
decl_stmt|;
name|type_name
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|String
name|protoName
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|protoName
operator|==
literal|null
condition|)
block|{
name|protoName
operator|=
literal|"com.facebook.thrift.protocol.TBinaryProtocol"
expr_stmt|;
block|}
name|TProtocolFactory
name|protFactory
init|=
name|TReflectionUtils
operator|.
name|getProtocolFactoryByName
argument_list|(
name|protoName
argument_list|)
decl_stmt|;
name|bos_
operator|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
expr_stmt|;
name|bis_
operator|=
operator|new
name|ByteStream
operator|.
name|Input
argument_list|()
expr_stmt|;
name|tios
operator|=
operator|new
name|TIOStreamTransport
argument_list|(
name|bis_
argument_list|,
name|bos_
argument_list|)
expr_stmt|;
name|oprot_
operator|=
name|protFactory
operator|.
name|getProtocol
argument_list|(
name|tios
argument_list|)
expr_stmt|;
name|iprot_
operator|=
name|protFactory
operator|.
name|getProtocol
argument_list|(
name|tios
argument_list|)
expr_stmt|;
comment|/**        * initialize the protocols        */
if|if
condition|(
name|oprot_
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|ConfigurableTProtocol
condition|)
block|{
operator|(
operator|(
name|ConfigurableTProtocol
operator|)
name|oprot_
operator|)
operator|.
name|initialize
argument_list|(
name|job
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iprot_
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|ConfigurableTProtocol
condition|)
block|{
operator|(
operator|(
name|ConfigurableTProtocol
operator|)
name|iprot_
operator|)
operator|.
name|initialize
argument_list|(
name|job
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
comment|// in theory the include path should come from the configuration
name|List
argument_list|<
name|String
argument_list|>
name|include_path
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|include_path
operator|.
name|add
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"ddl="
operator|+
name|ddl
argument_list|)
expr_stmt|;
name|this
operator|.
name|parse_tree
operator|=
operator|new
name|thrift_grammar
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|ddl
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|include_path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|parse_tree
operator|.
name|Start
argument_list|()
expr_stmt|;
name|this
operator|.
name|bt
operator|=
operator|(
name|DynamicSerDeStructBase
operator|)
name|this
operator|.
name|parse_tree
operator|.
name|types
operator|.
name|get
argument_list|(
name|type_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|bt
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|bt
operator|=
operator|(
name|DynamicSerDeStructBase
operator|)
name|this
operator|.
name|parse_tree
operator|.
name|tables
operator|.
name|get
argument_list|(
name|type_name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|bt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Could not lookup table type "
operator|+
name|type_name
operator|+
literal|" in this ddl: "
operator|+
name|ddl
argument_list|)
throw|;
block|}
name|this
operator|.
name|bt
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|Object
name|deserializeReuse
init|=
literal|null
decl_stmt|;
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|field
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
if|if
condition|(
name|field
operator|instanceof
name|Text
condition|)
block|{
name|Text
name|b
init|=
operator|(
name|Text
operator|)
name|field
decl_stmt|;
name|bis_
operator|.
name|reset
argument_list|(
name|b
operator|.
name|getBytes
argument_list|()
argument_list|,
name|b
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BytesWritable
name|b
init|=
operator|(
name|BytesWritable
operator|)
name|field
decl_stmt|;
name|bis_
operator|.
name|reset
argument_list|(
name|b
operator|.
name|get
argument_list|()
argument_list|,
name|b
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deserializeReuse
operator|=
name|this
operator|.
name|bt
operator|.
name|deserialize
argument_list|(
name|deserializeReuse
argument_list|,
name|iprot_
argument_list|)
expr_stmt|;
return|return
name|deserializeReuse
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ObjectInspector
name|dynamicSerDeStructBaseToObjectInspector
parameter_list|(
name|DynamicSerDeTypeBase
name|bt
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|bt
operator|.
name|isList
argument_list|()
condition|)
block|{
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|dynamicSerDeStructBaseToObjectInspector
argument_list|(
operator|(
operator|(
name|DynamicSerDeTypeList
operator|)
name|bt
operator|)
operator|.
name|getElementType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|bt
operator|.
name|isMap
argument_list|()
condition|)
block|{
name|DynamicSerDeTypeMap
name|btMap
init|=
operator|(
name|DynamicSerDeTypeMap
operator|)
name|bt
decl_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|dynamicSerDeStructBaseToObjectInspector
argument_list|(
name|btMap
operator|.
name|getKeyType
argument_list|()
argument_list|)
argument_list|,
name|dynamicSerDeStructBaseToObjectInspector
argument_list|(
name|btMap
operator|.
name|getValueType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|bt
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|bt
operator|.
name|getRealType
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// Must be a struct
name|DynamicSerDeStructBase
name|btStruct
init|=
operator|(
name|DynamicSerDeStructBase
operator|)
name|bt
decl_stmt|;
name|DynamicSerDeFieldList
name|fieldList
init|=
name|btStruct
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
name|DynamicSerDeField
index|[]
name|fields
init|=
name|fieldList
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|fields
operator|.
name|length
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|fields
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|name
argument_list|)
expr_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|dynamicSerDeStructBaseToObjectInspector
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|getFieldType
argument_list|()
operator|.
name|getMyType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldObjectInspectors
argument_list|)
return|;
block|}
block|}
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|dynamicSerDeStructBaseToObjectInspector
argument_list|(
name|this
operator|.
name|bt
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|BytesWritable
operator|.
name|class
return|;
block|}
name|BytesWritable
name|ret
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|bos_
operator|.
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|bt
operator|.
name|serialize
argument_list|(
name|obj
argument_list|,
name|objInspector
argument_list|,
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ret
operator|.
name|set
argument_list|(
name|bos_
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bos_
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

