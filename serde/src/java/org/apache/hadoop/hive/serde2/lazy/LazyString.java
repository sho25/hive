begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * LazyObject for storing a value of String.  */
end_comment

begin_class
specifier|public
class|class
name|LazyString
extends|extends
name|LazyPrimitive
argument_list|<
name|LazyStringObjectInspector
argument_list|,
name|Text
argument_list|>
block|{
specifier|public
name|LazyString
parameter_list|(
name|LazyStringObjectInspector
name|oi
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
specifier|public
name|LazyString
parameter_list|(
name|LazyString
name|copy
parameter_list|)
block|{
name|super
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
name|copy
operator|.
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ByteArrayRef
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|oi
operator|.
name|isEscaped
argument_list|()
condition|)
block|{
name|byte
name|escapeChar
init|=
name|oi
operator|.
name|getEscapeChar
argument_list|()
decl_stmt|;
name|byte
index|[]
name|inputBytes
init|=
name|bytes
operator|.
name|getData
argument_list|()
decl_stmt|;
comment|// First calculate the length of the output string
name|int
name|outputLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|inputBytes
index|[
name|start
operator|+
name|i
index|]
operator|!=
name|escapeChar
condition|)
block|{
name|outputLength
operator|++
expr_stmt|;
block|}
else|else
block|{
name|outputLength
operator|++
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|// Copy the data over, so that the internal state of Text will be set to
comment|// the required outputLength.
name|data
operator|.
name|set
argument_list|(
name|bytes
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|outputLength
argument_list|)
expr_stmt|;
comment|// We need to copy the data byte by byte only in case the
comment|// "outputLength< length" (which means there is at least one escaped
comment|// byte.
if|if
condition|(
name|outputLength
operator|<
name|length
condition|)
block|{
name|int
name|k
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|outputBytes
init|=
name|data
operator|.
name|getBytes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
name|inputBytes
index|[
name|start
operator|+
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|!=
name|escapeChar
operator|||
name|i
operator|==
name|length
operator|-
literal|1
condition|)
block|{
name|outputBytes
index|[
name|k
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
else|else
block|{
comment|// get the next byte
name|i
operator|++
expr_stmt|;
name|outputBytes
index|[
name|k
operator|++
index|]
operator|=
name|inputBytes
index|[
name|start
operator|+
name|i
index|]
expr_stmt|;
block|}
block|}
assert|assert
operator|(
name|k
operator|==
name|outputLength
operator|)
assert|;
block|}
block|}
else|else
block|{
comment|// if the data is not escaped, simply copy the data.
name|data
operator|.
name|set
argument_list|(
name|bytes
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

