begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedBytes
import|;
end_import

begin_comment
comment|/**  * Always use the ObjectInspectorFactory to create new ObjectInspector objects,  * instead of directly creating an instance of this class.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
class|class
name|ThriftUnionObjectInspector
extends|extends
name|ReflectionStructObjectInspector
implements|implements
name|UnionObjectInspector
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_METADATA_MAP
init|=
literal|"metaDataMap"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
decl_stmt|;
specifier|private
name|List
argument_list|<
name|StandardStructObjectInspector
operator|.
name|MyField
argument_list|>
name|fields
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|shouldIgnoreField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|startsWith
argument_list|(
literal|"__isset"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|getObjectInspectors
parameter_list|()
block|{
return|return
name|ois
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTag
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|TFieldIdEnum
name|setField
init|=
operator|(
operator|(
name|TUnion
argument_list|<
name|?
extends|extends
name|TUnion
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|,
name|?
extends|extends
name|TFieldIdEnum
argument_list|>
operator|)
name|o
operator|)
operator|.
name|getSetField
argument_list|()
decl_stmt|;
return|return
name|UnsignedBytes
operator|.
name|checkedCast
argument_list|(
operator|(
name|setField
operator|.
name|getThriftFieldId
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getField
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
operator|(
name|TUnion
argument_list|<
name|?
extends|extends
name|TUnion
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|,
name|?
extends|extends
name|TFieldIdEnum
argument_list|>
operator|)
name|o
operator|)
operator|.
name|getFieldValue
argument_list|()
return|;
block|}
comment|/**    * This method is only intended to be used by Utilities class in this package.    * The reason that this method is not recursive by itself is because we want    * to allow recursive types.    */
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|(
name|Type
name|type
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|objectClass
parameter_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
name|options
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|verifyObjectClassType
argument_list|(
name|objectClass
argument_list|)
expr_stmt|;
name|this
operator|.
name|objectClass
operator|=
name|objectClass
expr_stmt|;
specifier|final
name|Field
name|fieldMetaData
decl_stmt|;
try|try
block|{
name|fieldMetaData
operator|=
name|objectClass
operator|.
name|getDeclaredField
argument_list|(
name|FIELD_METADATA_MAP
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|fieldMetaData
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
assert|;
name|fieldMetaData
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to find field metadata for thrift union field "
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|Map
argument_list|<
name|?
extends|extends
name|TFieldIdEnum
argument_list|,
name|FieldMetaData
argument_list|>
name|fieldMap
init|=
operator|(
name|Map
argument_list|<
name|?
extends|extends
name|TFieldIdEnum
argument_list|,
name|FieldMetaData
argument_list|>
operator|)
name|fieldMetaData
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|StandardStructObjectInspector
operator|.
name|MyField
argument_list|>
argument_list|(
name|fieldMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|ois
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|TFieldIdEnum
argument_list|,
name|FieldMetaData
argument_list|>
name|metadata
range|:
name|fieldMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|fieldId
init|=
name|metadata
operator|.
name|getKey
argument_list|()
operator|.
name|getThriftFieldId
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|metadata
operator|.
name|getValue
argument_list|()
operator|.
name|fieldName
decl_stmt|;
specifier|final
name|Type
name|fieldType
init|=
name|ThriftObjectInspectorUtils
operator|.
name|getFieldType
argument_list|(
name|objectClass
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
specifier|final
name|ObjectInspector
name|reflectionObjectInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|fieldType
argument_list|,
name|options
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|StandardStructObjectInspector
operator|.
name|MyField
argument_list|(
name|fieldId
argument_list|,
name|fieldName
argument_list|,
name|reflectionObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|ois
operator|.
name|add
argument_list|(
name|reflectionObjectInspector
argument_list|)
expr_stmt|;
block|}
name|inited
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to find field metadata for thrift union field "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|UNION
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|getAllStructFieldRefs
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|ObjectInspectorUtils
operator|.
name|getStandardUnionTypeName
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

