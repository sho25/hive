begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * LazyObject for storing a struct.  * The field of a struct can be primitive or non-primitive.  *   */
end_comment

begin_class
specifier|public
class|class
name|LazyStruct
extends|extends
name|LazyObject
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LazyStruct
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LazyObject
index|[]
name|fields
decl_stmt|;
name|boolean
index|[]
name|fieldIsPrimitive
decl_stmt|;
name|byte
name|separator
decl_stmt|;
name|Text
name|nullSequence
decl_stmt|;
name|boolean
name|lastColumnTakesAll
decl_stmt|;
name|boolean
name|parsed
decl_stmt|;
comment|/**    * Create a new LazyStruct Object.    * @param fields     The field LazyObjects    * @param separator  The separator for delimiting the fields in the byte[]    * @param nullSequence  The sequence for null value    * @param lastColumnTakesAll  whether the additional fields should be all put into the last column    *                            in case the data contains more columns than the schema.      */
specifier|public
name|LazyStruct
parameter_list|(
name|LazyObject
index|[]
name|fields
parameter_list|,
name|byte
name|separator
parameter_list|,
name|Text
name|nullSequence
parameter_list|,
name|boolean
name|lastColumnTakesAll
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
name|this
operator|.
name|nullSequence
operator|=
name|nullSequence
expr_stmt|;
name|this
operator|.
name|lastColumnTakesAll
operator|=
name|lastColumnTakesAll
expr_stmt|;
name|parsed
operator|=
literal|false
expr_stmt|;
name|fieldIsPrimitive
operator|=
operator|new
name|boolean
index|[
name|fields
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fieldIsPrimitive
index|[
name|i
index|]
operator|=
operator|(
name|fields
index|[
name|i
index|]
operator|instanceof
name|LazyPrimitive
operator|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the row data for this LazyStruct.    */
specifier|protected
name|void
name|setAll
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
operator|.
name|setAll
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|parsed
operator|=
literal|false
expr_stmt|;
block|}
name|boolean
name|missingFieldWarned
init|=
literal|false
decl_stmt|;
name|boolean
name|extraFieldWarned
init|=
literal|false
decl_stmt|;
comment|/**    * Parse the byte[] and fill each field.    */
specifier|private
name|void
name|parse
parameter_list|()
block|{
name|int
name|structByteEnd
init|=
name|start
operator|+
name|length
decl_stmt|;
name|int
name|fieldId
init|=
literal|0
decl_stmt|;
name|int
name|fieldByteBegin
init|=
name|start
decl_stmt|;
name|int
name|fieldByteEnd
init|=
name|start
decl_stmt|;
comment|// Go through all bytes in the byte[]
while|while
condition|(
name|fieldByteEnd
operator|<=
name|structByteEnd
condition|)
block|{
if|if
condition|(
name|fieldByteEnd
operator|==
name|structByteEnd
operator|||
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|separator
condition|)
block|{
comment|// end of field reached
if|if
condition|(
name|lastColumnTakesAll
operator|&&
name|fieldId
operator|==
name|fields
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|fieldByteEnd
operator|=
name|structByteEnd
expr_stmt|;
block|}
comment|// Test the length first so in most cases we avoid doing a byte[] comparison.
name|int
name|fieldLength
init|=
name|fieldByteEnd
operator|-
name|fieldByteBegin
decl_stmt|;
if|if
condition|(
name|fieldLength
operator|==
name|nullSequence
operator|.
name|getLength
argument_list|()
operator|&&
name|LazyUtils
operator|.
name|compare
argument_list|(
name|bytes
argument_list|,
name|fieldByteBegin
argument_list|,
name|fieldLength
argument_list|,
name|nullSequence
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|nullSequence
operator|.
name|getLength
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
name|fields
index|[
name|fieldId
index|]
operator|.
name|setAll
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
index|[
name|fieldId
index|]
operator|.
name|setAll
argument_list|(
name|bytes
argument_list|,
name|fieldByteBegin
argument_list|,
name|fieldByteEnd
operator|-
name|fieldByteBegin
argument_list|)
expr_stmt|;
block|}
name|fieldId
operator|++
expr_stmt|;
if|if
condition|(
name|fieldId
operator|==
name|fields
operator|.
name|length
operator|||
name|fieldByteEnd
operator|==
name|structByteEnd
condition|)
block|{
comment|// all fields have been parsed, or all bytes have been parsed
break|break;
block|}
name|fieldByteBegin
operator|=
name|fieldByteEnd
operator|+
literal|1
expr_stmt|;
block|}
name|fieldByteEnd
operator|++
expr_stmt|;
block|}
comment|// Extra bytes at the end?
if|if
condition|(
operator|!
name|extraFieldWarned
operator|&&
name|fieldByteEnd
operator|<
name|structByteEnd
condition|)
block|{
name|extraFieldWarned
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Extra bytes detected at the end of the row! Ignoring similar problems."
argument_list|)
expr_stmt|;
block|}
comment|// Missing fields?
if|if
condition|(
operator|!
name|missingFieldWarned
operator|&&
name|fieldId
operator|<
name|fields
operator|.
name|length
condition|)
block|{
name|missingFieldWarned
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing fields! Expected "
operator|+
name|fields
operator|.
name|length
operator|+
literal|" fields but only got "
operator|+
name|fieldId
operator|+
literal|"! Ignoring similar problems."
argument_list|)
expr_stmt|;
block|}
comment|// Fill all missing fields with nulls.
for|for
control|(
init|;
name|fieldId
operator|<
name|fields
operator|.
name|length
condition|;
name|fieldId
operator|++
control|)
block|{
name|fields
index|[
name|fieldId
index|]
operator|.
name|setAll
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|parsed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Get one field out of the struct.    *     * If the field is a primitive field, return the actual object.    * Otherwise return the LazyObject.  This is because PrimitiveObjectInspector    * does not have control over the object used by the user - the user simply    * directly use the Object instead of going through     * Object PrimitiveObjectInspector.get(Object).      *     * @param i  the field ID    * @return   the field as a LazyObject    */
specifier|public
name|Object
name|getField
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parsed
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fieldIsPrimitive
index|[
name|i
index|]
condition|)
block|{
return|return
name|fields
index|[
name|i
index|]
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|LazyPrimitive
operator|)
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|getPrimitiveObject
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

