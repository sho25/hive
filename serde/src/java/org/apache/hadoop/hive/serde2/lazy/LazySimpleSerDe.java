begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractEncodingAwareSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BinaryComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * LazySimpleSerDe can be used to read the same data format as  * MetadataTypedColumnsetSerDe and TCTLSeparatedProtocol.  *  * However, LazySimpleSerDe creates Objects in a lazy way, to provide better  * performance.  *  * Also LazySimpleSerDe outputs typed columns instead of treating all columns as  * String like MetadataTypedColumnsetSerDe.  */
end_comment

begin_class
specifier|public
class|class
name|LazySimpleSerDe
extends|extends
name|AbstractEncodingAwareSerDe
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SERIALIZATION_EXTEND_NESTING_LEVELS
init|=
literal|"hive.serialization.extend.nesting.levels"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|DefaultSeparators
init|=
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|,
operator|(
name|byte
operator|)
literal|3
block|}
decl_stmt|;
specifier|private
name|ObjectInspector
name|cachedObjectInspector
decl_stmt|;
specifier|private
name|long
name|serializedSize
decl_stmt|;
specifier|private
name|SerDeStats
name|stats
decl_stmt|;
specifier|private
name|boolean
name|lastOperationSerialize
decl_stmt|;
specifier|private
name|boolean
name|lastOperationDeserialize
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"["
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|serdeParams
operator|.
name|separators
argument_list|)
operator|+
literal|":"
operator|+
operator|(
operator|(
name|StructTypeInfo
operator|)
name|serdeParams
operator|.
name|rowTypeInfo
operator|)
operator|.
name|getAllStructFieldNames
argument_list|()
operator|+
literal|":"
operator|+
operator|(
operator|(
name|StructTypeInfo
operator|)
name|serdeParams
operator|.
name|rowTypeInfo
operator|)
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|LazySimpleSerDe
parameter_list|()
throws|throws
name|SerDeException
block|{   }
comment|/**    * Return the byte value of the number string.    *    * @param altValue    *          The string containing a number.    * @param defaultVal    *          If the altValue does not represent a number, return the    *          defaultVal.    */
specifier|public
specifier|static
name|byte
name|getByte
parameter_list|(
name|String
name|altValue
parameter_list|,
name|byte
name|defaultVal
parameter_list|)
block|{
if|if
condition|(
name|altValue
operator|!=
literal|null
operator|&&
name|altValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|altValue
argument_list|)
operator|.
name|byteValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
name|altValue
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
return|return
name|defaultVal
return|;
block|}
comment|/**    * SerDeParameters.    *    */
specifier|public
specifier|static
class|class
name|SerDeParameters
block|{
name|byte
index|[]
name|separators
init|=
name|DefaultSeparators
decl_stmt|;
name|String
name|nullString
decl_stmt|;
name|Text
name|nullSequence
decl_stmt|;
name|TypeInfo
name|rowTypeInfo
decl_stmt|;
name|boolean
name|lastColumnTakesRest
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
decl_stmt|;
name|boolean
name|escaped
decl_stmt|;
name|byte
name|escapeChar
decl_stmt|;
name|boolean
index|[]
name|needsEscape
decl_stmt|;
name|boolean
name|extendedBooleanLiteral
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|getColumnTypes
parameter_list|()
block|{
return|return
name|columnTypes
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getColumnNames
parameter_list|()
block|{
return|return
name|columnNames
return|;
block|}
specifier|public
name|byte
index|[]
name|getSeparators
parameter_list|()
block|{
return|return
name|separators
return|;
block|}
specifier|public
name|String
name|getNullString
parameter_list|()
block|{
return|return
name|nullString
return|;
block|}
specifier|public
name|Text
name|getNullSequence
parameter_list|()
block|{
return|return
name|nullSequence
return|;
block|}
specifier|public
name|TypeInfo
name|getRowTypeInfo
parameter_list|()
block|{
return|return
name|rowTypeInfo
return|;
block|}
specifier|public
name|boolean
name|isLastColumnTakesRest
parameter_list|()
block|{
return|return
name|lastColumnTakesRest
return|;
block|}
specifier|public
name|boolean
name|isEscaped
parameter_list|()
block|{
return|return
name|escaped
return|;
block|}
specifier|public
name|byte
name|getEscapeChar
parameter_list|()
block|{
return|return
name|escapeChar
return|;
block|}
specifier|public
name|boolean
index|[]
name|getNeedsEscape
parameter_list|()
block|{
return|return
name|needsEscape
return|;
block|}
block|}
name|SerDeParameters
name|serdeParams
init|=
literal|null
decl_stmt|;
comment|/**    * Initialize the SerDe given the parameters. serialization.format: separator    * char or byte code (only supports byte-value up to 127) columns:    * ","-separated column names columns.types: ",", ":", or ";"-separated column    * types    *    * @see SerDe#initialize(Configuration, Properties)    */
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|job
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|serdeParams
operator|=
name|LazySimpleSerDe
operator|.
name|initSerdeParams
argument_list|(
name|job
argument_list|,
name|tbl
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the ObjectInspectors for the fields
name|cachedObjectInspector
operator|=
name|LazyFactory
operator|.
name|createLazyStructInspector
argument_list|(
name|serdeParams
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getColumnTypes
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getSeparators
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getNullSequence
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|isLastColumnTakesRest
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|isEscaped
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getEscapeChar
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|extendedBooleanLiteral
argument_list|)
expr_stmt|;
name|cachedLazyStruct
operator|=
operator|(
name|LazyStruct
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|cachedObjectInspector
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" initialized with: columnNames="
operator|+
name|serdeParams
operator|.
name|columnNames
operator|+
literal|" columnTypes="
operator|+
name|serdeParams
operator|.
name|columnTypes
operator|+
literal|" separator="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|serdeParams
operator|.
name|separators
argument_list|)
operator|+
literal|" nullstring="
operator|+
name|serdeParams
operator|.
name|nullString
operator|+
literal|" lastColumnTakesRest="
operator|+
name|serdeParams
operator|.
name|lastColumnTakesRest
argument_list|)
expr_stmt|;
name|serializedSize
operator|=
literal|0
expr_stmt|;
name|stats
operator|=
operator|new
name|SerDeStats
argument_list|()
expr_stmt|;
name|lastOperationSerialize
operator|=
literal|false
expr_stmt|;
name|lastOperationDeserialize
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
specifier|static
name|SerDeParameters
name|initSerdeParams
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Properties
name|tbl
parameter_list|,
name|String
name|serdeName
parameter_list|)
throws|throws
name|SerDeException
block|{
name|SerDeParameters
name|serdeParams
init|=
operator|new
name|SerDeParameters
argument_list|()
decl_stmt|;
comment|// Read the separators: We use 8 levels of separators by default,
comment|// and 24 if SERIALIZATION_EXTEND_NESTING_LEVELS is set to true
comment|// The levels possible are the set of control chars that we can use as
comment|// special delimiters, ie they should absent in the data or escaped.
comment|// To increase this level further, we need to stop relying
comment|// on single control chars delimiters
name|serdeParams
operator|.
name|separators
operator|=
operator|new
name|byte
index|[
literal|8
index|]
expr_stmt|;
name|serdeParams
operator|.
name|separators
index|[
literal|0
index|]
operator|=
name|getByte
argument_list|(
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|)
argument_list|)
argument_list|,
name|DefaultSeparators
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|serdeParams
operator|.
name|separators
index|[
literal|1
index|]
operator|=
name|getByte
argument_list|(
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|)
argument_list|,
name|DefaultSeparators
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|serdeParams
operator|.
name|separators
index|[
literal|2
index|]
operator|=
name|getByte
argument_list|(
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|)
argument_list|,
name|DefaultSeparators
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|String
name|extendedNesting
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|SERIALIZATION_EXTEND_NESTING_LEVELS
argument_list|)
decl_stmt|;
if|if
condition|(
name|extendedNesting
operator|==
literal|null
operator|||
operator|!
name|extendedNesting
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
comment|//use the default smaller set of separators for backward compatibility
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
name|serdeParams
operator|.
name|separators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|serdeParams
operator|.
name|separators
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//If extended nesting is enabled, set the extended set of separator chars
specifier|final
name|int
name|MAX_CTRL_CHARS
init|=
literal|29
decl_stmt|;
name|byte
index|[]
name|extendedSeparators
init|=
operator|new
name|byte
index|[
name|MAX_CTRL_CHARS
index|]
decl_stmt|;
name|int
name|extendedSeparatorsIdx
init|=
literal|0
decl_stmt|;
comment|//get the first 3 separators that have already been set (defaults to 1,2,3)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|extendedSeparators
index|[
name|extendedSeparatorsIdx
operator|++
index|]
operator|=
name|serdeParams
operator|.
name|separators
index|[
name|i
index|]
expr_stmt|;
block|}
for|for
control|(
name|byte
name|asciival
init|=
literal|4
init|;
name|asciival
operator|<=
name|MAX_CTRL_CHARS
condition|;
name|asciival
operator|++
control|)
block|{
comment|//use only control chars that are very unlikely to be part of the string
comment|// the following might/likely to be used in text files for strings
comment|// 9 (horizontal tab, HT, \t, ^I)
comment|// 10 (line feed, LF, \n, ^J),
comment|// 12 (form feed, FF, \f, ^L),
comment|// 13 (carriage return, CR, \r, ^M),
comment|// 27 (escape, ESC, \e [GCC only], ^[).
comment|//reserving the following values for future dynamic level impl
comment|// 30
comment|// 31
switch|switch
condition|(
name|asciival
condition|)
block|{
case|case
literal|9
case|:
case|case
literal|10
case|:
case|case
literal|12
case|:
case|case
literal|13
case|:
case|case
literal|27
case|:
continue|continue;
block|}
name|extendedSeparators
index|[
name|extendedSeparatorsIdx
operator|++
index|]
operator|=
name|asciival
expr_stmt|;
block|}
name|serdeParams
operator|.
name|separators
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|extendedSeparators
argument_list|,
literal|0
argument_list|,
name|extendedSeparatorsIdx
argument_list|)
expr_stmt|;
block|}
name|serdeParams
operator|.
name|nullString
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
literal|"\\N"
argument_list|)
expr_stmt|;
name|serdeParams
operator|.
name|nullSequence
operator|=
operator|new
name|Text
argument_list|(
name|serdeParams
operator|.
name|nullString
argument_list|)
expr_stmt|;
name|String
name|lastColumnTakesRestString
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_LAST_COLUMN_TAKES_REST
argument_list|)
decl_stmt|;
name|serdeParams
operator|.
name|lastColumnTakesRest
operator|=
operator|(
name|lastColumnTakesRestString
operator|!=
literal|null
operator|&&
name|lastColumnTakesRestString
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|)
expr_stmt|;
name|LazyUtils
operator|.
name|extractColumnInfo
argument_list|(
name|tbl
argument_list|,
name|serdeParams
argument_list|,
name|serdeName
argument_list|)
expr_stmt|;
comment|// Create the LazyObject for storing the rows
name|serdeParams
operator|.
name|rowTypeInfo
operator|=
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|serdeParams
operator|.
name|columnNames
argument_list|,
name|serdeParams
operator|.
name|columnTypes
argument_list|)
expr_stmt|;
comment|// Get the escape information
name|String
name|escapeProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|)
decl_stmt|;
name|serdeParams
operator|.
name|escaped
operator|=
operator|(
name|escapeProperty
operator|!=
literal|null
operator|)
expr_stmt|;
if|if
condition|(
name|serdeParams
operator|.
name|escaped
condition|)
block|{
name|serdeParams
operator|.
name|escapeChar
operator|=
name|getByte
argument_list|(
name|escapeProperty
argument_list|,
operator|(
name|byte
operator|)
literal|'\\'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serdeParams
operator|.
name|escaped
condition|)
block|{
name|serdeParams
operator|.
name|needsEscape
operator|=
operator|new
name|boolean
index|[
literal|128
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|128
condition|;
name|i
operator|++
control|)
block|{
name|serdeParams
operator|.
name|needsEscape
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
name|serdeParams
operator|.
name|needsEscape
index|[
name|serdeParams
operator|.
name|escapeChar
index|]
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|serdeParams
operator|.
name|separators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|serdeParams
operator|.
name|needsEscape
index|[
name|serdeParams
operator|.
name|separators
index|[
name|i
index|]
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|serdeParams
operator|.
name|extendedBooleanLiteral
operator|=
name|job
operator|==
literal|null
condition|?
literal|false
else|:
name|job
operator|.
name|getBoolean
argument_list|(
name|ConfVars
operator|.
name|HIVE_LAZYSIMPLE_EXTENDED_BOOLEAN_LITERAL
operator|.
name|varname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|serdeParams
return|;
block|}
comment|// The object for storing row data
name|LazyStruct
name|cachedLazyStruct
decl_stmt|;
comment|// The wrapper for byte array
name|ByteArrayRef
name|byteArrayRef
decl_stmt|;
comment|/**    * Deserialize a row from the Writable to a LazyObject.    *    * @param field    *          the Writable that contains the data    * @return The deserialized row Object.    * @see SerDe#deserialize(Writable)    */
annotation|@
name|Override
specifier|public
name|Object
name|doDeserialize
parameter_list|(
name|Writable
name|field
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|byteArrayRef
operator|==
literal|null
condition|)
block|{
name|byteArrayRef
operator|=
operator|new
name|ByteArrayRef
argument_list|()
expr_stmt|;
block|}
name|BinaryComparable
name|b
init|=
operator|(
name|BinaryComparable
operator|)
name|field
decl_stmt|;
name|byteArrayRef
operator|.
name|setData
argument_list|(
name|b
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|cachedLazyStruct
operator|.
name|init
argument_list|(
name|byteArrayRef
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|lastOperationSerialize
operator|=
literal|false
expr_stmt|;
name|lastOperationDeserialize
operator|=
literal|true
expr_stmt|;
return|return
name|cachedLazyStruct
return|;
block|}
comment|/**    * Returns the ObjectInspector for the row.    */
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|cachedObjectInspector
return|;
block|}
comment|/**    * Returns the Writable Class after serialization.    *    * @see SerDe#getSerializedClass()    */
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|Text
operator|.
name|class
return|;
block|}
name|Text
name|serializeCache
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|ByteStream
operator|.
name|Output
name|serializeStream
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
comment|/**    * Serialize a row of data.    *    * @param obj    *          The row object    * @param objInspector    *          The ObjectInspector for the row object    * @return The serialized Writable object    * @throws IOException    * @see SerDe#serialize(Object, ObjectInspector)    */
annotation|@
name|Override
specifier|public
name|Writable
name|doSerialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|objInspector
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" can only serialize struct types, but we got: "
operator|+
name|objInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
comment|// Prepare the field ObjectInspectors
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|soi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|declaredFields
init|=
operator|(
name|serdeParams
operator|.
name|rowTypeInfo
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|StructTypeInfo
operator|)
name|serdeParams
operator|.
name|rowTypeInfo
operator|)
operator|.
name|getAllStructFieldNames
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|?
operator|(
operator|(
name|StructObjectInspector
operator|)
name|getObjectInspector
argument_list|()
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
else|:
literal|null
decl_stmt|;
name|serializeStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serializedSize
operator|=
literal|0
expr_stmt|;
comment|// Serialize each field
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Append the separator if needed.
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|serializeStream
operator|.
name|write
argument_list|(
name|serdeParams
operator|.
name|separators
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Get the field objectInspector and the field object.
name|ObjectInspector
name|foi
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|Object
name|f
init|=
operator|(
name|list
operator|==
literal|null
condition|?
literal|null
else|:
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|declaredFields
operator|!=
literal|null
operator|&&
name|i
operator|>=
name|declaredFields
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Error: expecting "
operator|+
name|declaredFields
operator|.
name|size
argument_list|()
operator|+
literal|" but asking for field "
operator|+
name|i
operator|+
literal|"\n"
operator|+
literal|"data="
operator|+
name|obj
operator|+
literal|"\n"
operator|+
literal|"tableType="
operator|+
name|serdeParams
operator|.
name|rowTypeInfo
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"dataType="
operator|+
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|objInspector
argument_list|)
argument_list|)
throw|;
block|}
name|serializeField
argument_list|(
name|serializeStream
argument_list|,
name|f
argument_list|,
name|foi
argument_list|,
name|serdeParams
argument_list|)
expr_stmt|;
block|}
comment|// TODO: The copy of data is unnecessary, but there is no work-around
comment|// since we cannot directly set the private byte[] field inside Text.
name|serializeCache
operator|.
name|set
argument_list|(
name|serializeStream
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|serializeStream
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|serializedSize
operator|=
name|serializeStream
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|lastOperationSerialize
operator|=
literal|true
expr_stmt|;
name|lastOperationDeserialize
operator|=
literal|false
expr_stmt|;
return|return
name|serializeCache
return|;
block|}
specifier|protected
name|void
name|serializeField
parameter_list|(
name|ByteStream
operator|.
name|Output
name|out
parameter_list|,
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|,
name|SerDeParameters
name|serdeParams
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|serialize
argument_list|(
name|out
argument_list|,
name|obj
argument_list|,
name|objInspector
argument_list|,
name|serdeParams
operator|.
name|separators
argument_list|,
literal|1
argument_list|,
name|serdeParams
operator|.
name|nullSequence
argument_list|,
name|serdeParams
operator|.
name|escaped
argument_list|,
name|serdeParams
operator|.
name|escapeChar
argument_list|,
name|serdeParams
operator|.
name|needsEscape
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Serialize the row into the StringBuilder.    *    * @param out    *          The StringBuilder to store the serialized data.    * @param obj    *          The object for the current field.    * @param objInspector    *          The ObjectInspector for the current Object.    * @param separators    *          The separators array.    * @param level    *          The current level of separator.    * @param nullSequence    *          The byte sequence representing the NULL value.    * @param escaped    *          Whether we need to escape the data when writing out    * @param escapeChar    *          Which char to use as the escape char, e.g. '\\'    * @param needsEscape    *          Which chars needs to be escaped. This array should have size of    *          128. Negative byte values (or byte values>= 128) are never    *          escaped.    * @throws IOException    * @throws SerDeException    */
specifier|public
specifier|static
name|void
name|serialize
parameter_list|(
name|ByteStream
operator|.
name|Output
name|out
parameter_list|,
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|,
name|byte
index|[]
name|separators
parameter_list|,
name|int
name|level
parameter_list|,
name|Text
name|nullSequence
parameter_list|,
name|boolean
name|escaped
parameter_list|,
name|byte
name|escapeChar
parameter_list|,
name|boolean
index|[]
name|needsEscape
parameter_list|)
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|nullSequence
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|nullSequence
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|char
name|separator
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
decl_stmt|;
switch|switch
condition|(
name|objInspector
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|LazyUtils
operator|.
name|writePrimitiveUTF8
argument_list|(
name|out
argument_list|,
name|obj
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|objInspector
argument_list|,
name|escaped
argument_list|,
name|escapeChar
argument_list|,
name|needsEscape
argument_list|)
expr_stmt|;
return|return;
case|case
name|LIST
case|:
name|separator
operator|=
operator|(
name|char
operator|)
name|LazyUtils
operator|.
name|getSeparator
argument_list|(
name|separators
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|list
operator|=
name|loi
operator|.
name|getList
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|ObjectInspector
name|eoi
init|=
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|nullSequence
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|nullSequence
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|serialize
argument_list|(
name|out
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|eoi
argument_list|,
name|separators
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|nullSequence
argument_list|,
name|escaped
argument_list|,
name|escapeChar
argument_list|,
name|needsEscape
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
case|case
name|MAP
case|:
name|separator
operator|=
operator|(
name|char
operator|)
name|LazyUtils
operator|.
name|getSeparator
argument_list|(
name|separators
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|char
name|keyValueSeparator
init|=
operator|(
name|char
operator|)
name|LazyUtils
operator|.
name|getSeparator
argument_list|(
name|separators
argument_list|,
name|level
operator|+
literal|1
argument_list|)
decl_stmt|;
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|ObjectInspector
name|koi
init|=
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|voi
init|=
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|moi
operator|.
name|getMap
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|nullSequence
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|nullSequence
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|serialize
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|koi
argument_list|,
name|separators
argument_list|,
name|level
operator|+
literal|2
argument_list|,
name|nullSequence
argument_list|,
name|escaped
argument_list|,
name|escapeChar
argument_list|,
name|needsEscape
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|keyValueSeparator
argument_list|)
expr_stmt|;
name|serialize
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|voi
argument_list|,
name|separators
argument_list|,
name|level
operator|+
literal|2
argument_list|,
name|nullSequence
argument_list|,
name|escaped
argument_list|,
name|escapeChar
argument_list|,
name|needsEscape
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
case|case
name|STRUCT
case|:
name|separator
operator|=
operator|(
name|char
operator|)
name|LazyUtils
operator|.
name|getSeparator
argument_list|(
name|separators
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|list
operator|=
name|soi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|obj
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|nullSequence
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|nullSequence
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|serialize
argument_list|(
name|out
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|separators
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|nullSequence
argument_list|,
name|escaped
argument_list|,
name|escapeChar
argument_list|,
name|needsEscape
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
case|case
name|UNION
case|:
name|separator
operator|=
operator|(
name|char
operator|)
name|LazyUtils
operator|.
name|getSeparator
argument_list|(
name|separators
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|UnionObjectInspector
name|uoi
init|=
operator|(
name|UnionObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|ObjectInspector
argument_list|>
name|ois
init|=
name|uoi
operator|.
name|getObjectInspectors
argument_list|()
decl_stmt|;
if|if
condition|(
name|ois
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|nullSequence
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|nullSequence
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LazyUtils
operator|.
name|writePrimitiveUTF8
argument_list|(
name|out
argument_list|,
operator|new
name|Byte
argument_list|(
name|uoi
operator|.
name|getTag
argument_list|(
name|obj
argument_list|)
argument_list|)
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaByteObjectInspector
argument_list|,
name|escaped
argument_list|,
name|escapeChar
argument_list|,
name|needsEscape
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|serialize
argument_list|(
name|out
argument_list|,
name|uoi
operator|.
name|getField
argument_list|(
name|obj
argument_list|)
argument_list|,
name|ois
operator|.
name|get
argument_list|(
name|uoi
operator|.
name|getTag
argument_list|(
name|obj
argument_list|)
argument_list|)
argument_list|,
name|separators
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|nullSequence
argument_list|,
name|escaped
argument_list|,
name|escapeChar
argument_list|,
name|needsEscape
argument_list|)
expr_stmt|;
block|}
return|return;
default|default:
break|break;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown category type: "
operator|+
name|objInspector
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Returns the statistics after (de)serialization)    */
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
comment|// must be different
assert|assert
operator|(
name|lastOperationSerialize
operator|!=
name|lastOperationDeserialize
operator|)
assert|;
if|if
condition|(
name|lastOperationSerialize
condition|)
block|{
name|stats
operator|.
name|setRawDataSize
argument_list|(
name|serializedSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|.
name|setRawDataSize
argument_list|(
name|cachedLazyStruct
operator|.
name|getRawDataSerializedSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Writable
name|transformFromUTF8
parameter_list|(
name|Writable
name|blob
parameter_list|)
block|{
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|blob
decl_stmt|;
return|return
name|SerDeUtils
operator|.
name|transformTextFromUTF8
argument_list|(
name|text
argument_list|,
name|this
operator|.
name|charset
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Writable
name|transformToUTF8
parameter_list|(
name|Writable
name|blob
parameter_list|)
block|{
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|blob
decl_stmt|;
return|return
name|SerDeUtils
operator|.
name|transformTextToUTF8
argument_list|(
name|text
argument_list|,
name|this
operator|.
name|charset
argument_list|)
return|;
block|}
block|}
end_class

end_unit

